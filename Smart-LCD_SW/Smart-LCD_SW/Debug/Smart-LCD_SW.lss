
Smart-LCD_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00002428  000024bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800118  00800118  000024d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  00002544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005529  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000183f  00000000  00000000  00007da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004a64  00000000  00000000  000095e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010a0  00000000  00000000  0000e048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00013364  00000000  00000000  0000f0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a9f  00000000  00000000  0002244c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  00026eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001945  00000000  00000000  000271b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c2       	rjmp	.+1146   	; 0x47c <__ctors_end>
       2:	00 00       	nop
       4:	62 c6       	rjmp	.+3268   	; 0xcca <__vector_1>
       6:	00 00       	nop
       8:	83 c6       	rjmp	.+3334   	; 0xd10 <__vector_2>
       a:	00 00       	nop
       c:	a4 c6       	rjmp	.+3400   	; 0xd56 <__vector_3>
       e:	00 00       	nop
      10:	c5 c6       	rjmp	.+3466   	; 0xd9c <__vector_4>
      12:	00 00       	nop
      14:	e6 c6       	rjmp	.+3532   	; 0xde2 <__vector_5>
      16:	00 00       	nop
      18:	07 c7       	rjmp	.+3598   	; 0xe28 <__vector_6>
      1a:	00 00       	nop
      1c:	28 c7       	rjmp	.+3664   	; 0xe6e <__vector_7>
      1e:	00 00       	nop
      20:	49 c7       	rjmp	.+3730   	; 0xeb4 <__vector_8>
      22:	00 00       	nop
      24:	6a c7       	rjmp	.+3796   	; 0xefa <__vector_9>
      26:	00 00       	nop
      28:	8b c7       	rjmp	.+3862   	; 0xf40 <__vector_10>
      2a:	00 00       	nop
      2c:	ac c7       	rjmp	.+3928   	; 0xf86 <__vector_11>
      2e:	00 00       	nop
      30:	cd c7       	rjmp	.+3994   	; 0xfcc <__vector_12>
      32:	00 00       	nop
      34:	ee c7       	rjmp	.+4060   	; 0x1012 <__vector_13>
      36:	00 00       	nop
      38:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__vector_14>
      3c:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__vector_15>
      40:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_16>
      44:	0c 94 95 08 	jmp	0x112a	; 0x112a <__vector_17>
      48:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__vector_18>
      4c:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__vector_19>
      50:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__vector_20>
      54:	0c 94 86 09 	jmp	0x130c	; 0x130c <__vector_21>
      58:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_22>
      5c:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__vector_23>
      60:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__vector_24>
      64:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__vector_25>
      68:	7e 0d       	add	r23, r14
      6a:	47 0e       	add	r4, r23
      6c:	47 0e       	add	r4, r23
      6e:	47 0e       	add	r4, r23
      70:	47 0e       	add	r4, r23
      72:	47 0e       	add	r4, r23
      74:	47 0e       	add	r4, r23
      76:	47 0e       	add	r4, r23
      78:	83 0d       	add	r24, r3
      7a:	47 0e       	add	r4, r23
      7c:	47 0e       	add	r4, r23
      7e:	47 0e       	add	r4, r23
      80:	47 0e       	add	r4, r23
      82:	47 0e       	add	r4, r23
      84:	47 0e       	add	r4, r23
      86:	47 0e       	add	r4, r23
      88:	83 0d       	add	r24, r3
      8a:	47 0e       	add	r4, r23
      8c:	47 0e       	add	r4, r23
      8e:	47 0e       	add	r4, r23
      90:	47 0e       	add	r4, r23
      92:	47 0e       	add	r4, r23
      94:	47 0e       	add	r4, r23
      96:	47 0e       	add	r4, r23
      98:	8f 0d       	add	r24, r15
      9a:	47 0e       	add	r4, r23
      9c:	47 0e       	add	r4, r23
      9e:	47 0e       	add	r4, r23
      a0:	47 0e       	add	r4, r23
      a2:	47 0e       	add	r4, r23
      a4:	47 0e       	add	r4, r23
      a6:	47 0e       	add	r4, r23
      a8:	92 0d       	add	r25, r2
      aa:	47 0e       	add	r4, r23
      ac:	47 0e       	add	r4, r23
      ae:	47 0e       	add	r4, r23
      b0:	47 0e       	add	r4, r23
      b2:	47 0e       	add	r4, r23
      b4:	47 0e       	add	r4, r23
      b6:	47 0e       	add	r4, r23
      b8:	aa 0d       	add	r26, r10
      ba:	47 0e       	add	r4, r23
      bc:	47 0e       	add	r4, r23
      be:	47 0e       	add	r4, r23
      c0:	47 0e       	add	r4, r23
      c2:	47 0e       	add	r4, r23
      c4:	47 0e       	add	r4, r23
      c6:	47 0e       	add	r4, r23
      c8:	b0 0d       	add	r27, r0
      ca:	47 0e       	add	r4, r23
      cc:	47 0e       	add	r4, r23
      ce:	47 0e       	add	r4, r23
      d0:	47 0e       	add	r4, r23
      d2:	47 0e       	add	r4, r23
      d4:	47 0e       	add	r4, r23
      d6:	47 0e       	add	r4, r23
      d8:	47 0e       	add	r4, r23
      da:	47 0e       	add	r4, r23
      dc:	47 0e       	add	r4, r23
      de:	47 0e       	add	r4, r23
      e0:	47 0e       	add	r4, r23
      e2:	47 0e       	add	r4, r23
      e4:	47 0e       	add	r4, r23
      e6:	47 0e       	add	r4, r23
      e8:	47 0e       	add	r4, r23
      ea:	47 0e       	add	r4, r23
      ec:	47 0e       	add	r4, r23
      ee:	47 0e       	add	r4, r23
      f0:	47 0e       	add	r4, r23
      f2:	47 0e       	add	r4, r23
      f4:	47 0e       	add	r4, r23
      f6:	47 0e       	add	r4, r23
      f8:	47 0e       	add	r4, r23
      fa:	47 0e       	add	r4, r23
      fc:	47 0e       	add	r4, r23
      fe:	47 0e       	add	r4, r23
     100:	47 0e       	add	r4, r23
     102:	47 0e       	add	r4, r23
     104:	47 0e       	add	r4, r23
     106:	47 0e       	add	r4, r23
     108:	47 0e       	add	r4, r23
     10a:	47 0e       	add	r4, r23
     10c:	47 0e       	add	r4, r23
     10e:	47 0e       	add	r4, r23
     110:	47 0e       	add	r4, r23
     112:	47 0e       	add	r4, r23
     114:	47 0e       	add	r4, r23
     116:	47 0e       	add	r4, r23
     118:	b3 0d       	add	r27, r3
     11a:	47 0e       	add	r4, r23
     11c:	47 0e       	add	r4, r23
     11e:	47 0e       	add	r4, r23
     120:	47 0e       	add	r4, r23
     122:	47 0e       	add	r4, r23
     124:	47 0e       	add	r4, r23
     126:	47 0e       	add	r4, r23
     128:	b3 0d       	add	r27, r3
     12a:	47 0e       	add	r4, r23
     12c:	47 0e       	add	r4, r23
     12e:	47 0e       	add	r4, r23
     130:	47 0e       	add	r4, r23
     132:	47 0e       	add	r4, r23
     134:	47 0e       	add	r4, r23
     136:	47 0e       	add	r4, r23
     138:	bb 0d       	add	r27, r11
     13a:	47 0e       	add	r4, r23
     13c:	47 0e       	add	r4, r23
     13e:	47 0e       	add	r4, r23
     140:	47 0e       	add	r4, r23
     142:	47 0e       	add	r4, r23
     144:	47 0e       	add	r4, r23
     146:	47 0e       	add	r4, r23
     148:	bb 0d       	add	r27, r11
     14a:	47 0e       	add	r4, r23
     14c:	47 0e       	add	r4, r23
     14e:	47 0e       	add	r4, r23
     150:	47 0e       	add	r4, r23
     152:	47 0e       	add	r4, r23
     154:	47 0e       	add	r4, r23
     156:	47 0e       	add	r4, r23
     158:	c3 0d       	add	r28, r3
     15a:	47 0e       	add	r4, r23
     15c:	47 0e       	add	r4, r23
     15e:	47 0e       	add	r4, r23
     160:	47 0e       	add	r4, r23
     162:	47 0e       	add	r4, r23
     164:	47 0e       	add	r4, r23
     166:	47 0e       	add	r4, r23
     168:	f4 0d       	add	r31, r4
     16a:	47 0e       	add	r4, r23
     16c:	47 0e       	add	r4, r23
     16e:	47 0e       	add	r4, r23
     170:	47 0e       	add	r4, r23
     172:	47 0e       	add	r4, r23
     174:	47 0e       	add	r4, r23
     176:	47 0e       	add	r4, r23
     178:	c3 0d       	add	r28, r3
     17a:	47 0e       	add	r4, r23
     17c:	47 0e       	add	r4, r23
     17e:	47 0e       	add	r4, r23
     180:	47 0e       	add	r4, r23
     182:	47 0e       	add	r4, r23
     184:	47 0e       	add	r4, r23
     186:	47 0e       	add	r4, r23
     188:	f4 0d       	add	r31, r4
     18a:	47 0e       	add	r4, r23
     18c:	47 0e       	add	r4, r23
     18e:	47 0e       	add	r4, r23
     190:	47 0e       	add	r4, r23
     192:	47 0e       	add	r4, r23
     194:	47 0e       	add	r4, r23
     196:	47 0e       	add	r4, r23
     198:	00 0e       	add	r0, r16
     19a:	47 0e       	add	r4, r23
     19c:	47 0e       	add	r4, r23
     19e:	47 0e       	add	r4, r23
     1a0:	47 0e       	add	r4, r23
     1a2:	47 0e       	add	r4, r23
     1a4:	47 0e       	add	r4, r23
     1a6:	47 0e       	add	r4, r23
     1a8:	09 0e       	add	r0, r25
     1aa:	47 0e       	add	r4, r23
     1ac:	47 0e       	add	r4, r23
     1ae:	47 0e       	add	r4, r23
     1b0:	47 0e       	add	r4, r23
     1b2:	47 0e       	add	r4, r23
     1b4:	47 0e       	add	r4, r23
     1b6:	47 0e       	add	r4, r23
     1b8:	09 0e       	add	r0, r25
     1ba:	47 0e       	add	r4, r23
     1bc:	47 0e       	add	r4, r23
     1be:	47 0e       	add	r4, r23
     1c0:	47 0e       	add	r4, r23
     1c2:	47 0e       	add	r4, r23
     1c4:	47 0e       	add	r4, r23
     1c6:	47 0e       	add	r4, r23
     1c8:	21 0e       	add	r2, r17
     1ca:	47 0e       	add	r4, r23
     1cc:	47 0e       	add	r4, r23
     1ce:	47 0e       	add	r4, r23
     1d0:	47 0e       	add	r4, r23
     1d2:	47 0e       	add	r4, r23
     1d4:	47 0e       	add	r4, r23
     1d6:	47 0e       	add	r4, r23
     1d8:	3a 0e       	add	r3, r26
     1da:	47 0e       	add	r4, r23
     1dc:	47 0e       	add	r4, r23
     1de:	47 0e       	add	r4, r23
     1e0:	47 0e       	add	r4, r23
     1e2:	47 0e       	add	r4, r23
     1e4:	47 0e       	add	r4, r23
     1e6:	47 0e       	add	r4, r23
     1e8:	43 0e       	add	r4, r19

000001ea <__trampolines_end>:
     1ea:	00 00       	nop
     1ec:	00 00       	nop
     1ee:	00 00       	nop
     1f0:	00 20       	and	r0, r0
     1f2:	20 20       	and	r2, r0
     1f4:	20 20       	and	r2, r0
     1f6:	00 20       	and	r0, r0
     1f8:	50 50       	subi	r21, 0x00	; 0
     1fa:	50 00       	.word	0x0050	; ????
     1fc:	00 00       	nop
     1fe:	00 50       	subi	r16, 0x00	; 0
     200:	50 f8       	bld	r5, 0
     202:	50 f8       	bld	r5, 0
     204:	50 50       	subi	r21, 0x00	; 0
     206:	20 78       	andi	r18, 0x80	; 128
     208:	a0 70       	andi	r26, 0x00	; 0
     20a:	28 f0       	brcs	.+10     	; 0x216 <__trampolines_end+0x2c>
     20c:	20 c0       	rjmp	.+64     	; 0x24e <__trampolines_end+0x64>
     20e:	c8 10       	cpse	r12, r8
     210:	20 40       	sbci	r18, 0x00	; 0
     212:	98 18       	sub	r9, r8
     214:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x3f4d>
     218:	a8 90       	.word	0x90a8	; ????
     21a:	68 60       	ori	r22, 0x08	; 8
     21c:	20 40       	sbci	r18, 0x00	; 0
     21e:	00 00       	nop
     220:	00 00       	nop
     222:	10 20       	and	r1, r0
     224:	40 40       	sbci	r20, 0x00	; 0
     226:	40 20       	and	r4, r0
     228:	10 40       	sbci	r17, 0x00	; 0
     22a:	20 10       	cpse	r2, r0
     22c:	10 10       	cpse	r1, r0
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 50       	subi	r16, 0x00	; 0
     232:	20 f8       	bld	r2, 0
     234:	20 50       	subi	r18, 0x00	; 0
     236:	00 00       	nop
     238:	20 20       	and	r2, r0
     23a:	f8 20       	and	r15, r8
     23c:	20 00       	.word	0x0020	; ????
     23e:	00 00       	nop
     240:	00 00       	nop
     242:	60 20       	and	r6, r0
     244:	40 00       	.word	0x0040	; ????
     246:	00 00       	nop
     248:	f8 00       	.word	0x00f8	; ????
     24a:	00 00       	nop
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 60       	ori	r16, 0x00	; 0
     252:	60 00       	.word	0x0060	; ????
     254:	08 10       	cpse	r0, r8
     256:	20 40       	sbci	r18, 0x00	; 0
     258:	80 00       	.word	0x0080	; ????
     25a:	70 88       	ldd	r7, Z+16	; 0x10
     25c:	98 a8       	ldd	r9, Y+48	; 0x30
     25e:	c8 88       	ldd	r12, Y+16	; 0x10
     260:	70 20       	and	r7, r0
     262:	60 20       	and	r6, r0
     264:	20 20       	and	r2, r0
     266:	20 70       	andi	r18, 0x00	; 0
     268:	70 88       	ldd	r7, Z+16	; 0x10
     26a:	08 10       	cpse	r0, r8
     26c:	20 40       	sbci	r18, 0x00	; 0
     26e:	f8 f8       	.word	0xf8f8	; ????
     270:	10 20       	and	r1, r0
     272:	10 08       	sbc	r1, r0
     274:	88 70       	andi	r24, 0x08	; 8
     276:	10 30       	cpi	r17, 0x00	; 0
     278:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__bss_end+0xfa5>
     27c:	10 f8       	bld	r1, 0
     27e:	80 f0       	brcs	.+32     	; 0x2a0 <__trampolines_end+0xb6>
     280:	08 08       	sbc	r0, r8
     282:	88 70       	andi	r24, 0x08	; 8
     284:	30 40       	sbci	r19, 0x00	; 0
     286:	80 f0       	brcs	.+32     	; 0x2a8 <__trampolines_end+0xbe>
     288:	88 88       	ldd	r8, Y+16	; 0x10
     28a:	70 f8       	bld	r7, 0
     28c:	08 10       	cpse	r0, r8
     28e:	20 40       	sbci	r18, 0x00	; 0
     290:	40 40       	sbci	r20, 0x00	; 0
     292:	70 88       	ldd	r7, Z+16	; 0x10
     294:	88 70       	andi	r24, 0x08	; 8
     296:	88 88       	ldd	r8, Y+16	; 0x10
     298:	70 70       	andi	r23, 0x00	; 0
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	78 08       	sbc	r7, r8
     29e:	10 60       	ori	r17, 0x00	; 0
     2a0:	00 60       	ori	r16, 0x00	; 0
     2a2:	60 00       	.word	0x0060	; ????
     2a4:	60 60       	ori	r22, 0x00	; 0
     2a6:	00 00       	nop
     2a8:	60 60       	ori	r22, 0x00	; 0
     2aa:	00 60       	ori	r16, 0x00	; 0
     2ac:	20 40       	sbci	r18, 0x00	; 0
     2ae:	08 10       	cpse	r0, r8
     2b0:	20 40       	sbci	r18, 0x00	; 0
     2b2:	20 10       	cpse	r2, r0
     2b4:	08 00       	.word	0x0008	; ????
     2b6:	00 f8       	bld	r0, 0
     2b8:	00 f8       	bld	r0, 0
     2ba:	00 00       	nop
     2bc:	80 40       	sbci	r24, 0x00	; 0
     2be:	20 10       	cpse	r2, r0
     2c0:	20 40       	sbci	r18, 0x00	; 0
     2c2:	80 70       	andi	r24, 0x00	; 0
     2c4:	88 08       	sbc	r8, r8
     2c6:	10 20       	and	r1, r0
     2c8:	00 20       	and	r0, r0
     2ca:	70 88       	ldd	r7, Z+16	; 0x10
     2cc:	08 68       	ori	r16, 0x88	; 136
     2ce:	a8 a8       	ldd	r10, Y+48	; 0x30
     2d0:	70 70       	andi	r23, 0x00	; 0
     2d2:	88 88       	ldd	r8, Y+16	; 0x10
     2d4:	88 f8       	.word	0xf888	; ????
     2d6:	88 88       	ldd	r8, Y+16	; 0x10
     2d8:	f0 88       	ldd	r15, Z+16	; 0x10
     2da:	88 f0       	brcs	.+34     	; 0x2fe <__trampolines_end+0x114>
     2dc:	88 88       	ldd	r8, Y+16	; 0x10
     2de:	f0 70       	andi	r31, 0x00	; 0
     2e0:	88 80       	ld	r8, Y
     2e2:	80 80       	ld	r8, Z
     2e4:	88 70       	andi	r24, 0x08	; 8
     2e6:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x8735>
     2ea:	88 90       	.word	0x9088	; ????
     2ec:	e0 f8       	bld	r14, 0
     2ee:	80 80       	ld	r8, Z
     2f0:	f0 80       	ld	r15, Z
     2f2:	80 f8       	bld	r8, 0
     2f4:	f8 80       	ld	r15, Y
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	80 80       	ld	r8, Z
     2fa:	80 70       	andi	r24, 0x00	; 0
     2fc:	88 80       	ld	r8, Y
     2fe:	80 98       	cbi	0x10, 0	; 16
     300:	88 70       	andi	r24, 0x08	; 8
     302:	88 88       	ldd	r8, Y+16	; 0x10
     304:	88 f8       	.word	0xf888	; ????
     306:	88 88       	ldd	r8, Y+16	; 0x10
     308:	88 70       	andi	r24, 0x08	; 8
     30a:	20 20       	and	r2, r0
     30c:	20 20       	and	r2, r0
     30e:	20 70       	andi	r18, 0x00	; 0
     310:	38 10       	cpse	r3, r8
     312:	10 10       	cpse	r1, r0
     314:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x870d>
     318:	90 a0       	ldd	r9, Z+32	; 0x20
     31a:	c0 a0       	ldd	r12, Z+32	; 0x20
     31c:	90 88       	ldd	r9, Z+16	; 0x10
     31e:	80 80       	ld	r8, Z
     320:	80 80       	ld	r8, Z
     322:	80 80       	ld	r8, Z
     324:	f8 88       	ldd	r15, Y+16	; 0x10
     326:	d8 a8       	ldd	r13, Y+48	; 0x30
     328:	88 88       	ldd	r8, Y+16	; 0x10
     32a:	88 88       	ldd	r8, Y+16	; 0x10
     32c:	88 88       	ldd	r8, Y+16	; 0x10
     32e:	c8 a8       	ldd	r12, Y+48	; 0x30
     330:	98 88       	ldd	r9, Y+16	; 0x10
     332:	88 70       	andi	r24, 0x08	; 8
     334:	88 88       	ldd	r8, Y+16	; 0x10
     336:	88 88       	ldd	r8, Y+16	; 0x10
     338:	88 70       	andi	r24, 0x08	; 8
     33a:	f0 88       	ldd	r15, Z+16	; 0x10
     33c:	88 f0       	brcs	.+34     	; 0x360 <__trampolines_end+0x176>
     33e:	80 80       	ld	r8, Z
     340:	80 70       	andi	r24, 0x00	; 0
     342:	88 88       	ldd	r8, Y+16	; 0x10
     344:	88 a8       	ldd	r8, Y+48	; 0x30
     346:	90 68       	ori	r25, 0x80	; 128
     348:	f0 88       	ldd	r15, Z+16	; 0x10
     34a:	88 f0       	brcs	.+34     	; 0x36e <__trampolines_end+0x184>
     34c:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x7735>
     350:	80 80       	ld	r8, Z
     352:	70 08       	sbc	r7, r0
     354:	08 f0       	brcs	.+2      	; 0x358 <__trampolines_end+0x16e>
     356:	f8 20       	and	r15, r8
     358:	20 20       	and	r2, r0
     35a:	20 20       	and	r2, r0
     35c:	20 88       	ldd	r2, Z+16	; 0x10
     35e:	88 88       	ldd	r8, Y+16	; 0x10
     360:	88 88       	ldd	r8, Y+16	; 0x10
     362:	88 70       	andi	r24, 0x08	; 8
     364:	88 88       	ldd	r8, Y+16	; 0x10
     366:	88 88       	ldd	r8, Y+16	; 0x10
     368:	88 50       	subi	r24, 0x08	; 8
     36a:	20 88       	ldd	r2, Z+16	; 0x10
     36c:	88 88       	ldd	r8, Y+16	; 0x10
     36e:	a8 a8       	ldd	r10, Y+48	; 0x30
     370:	d8 88       	ldd	r13, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	50 20       	and	r5, r0
     376:	50 88       	ldd	r5, Z+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 20       	and	r2, r0
     37e:	20 20       	and	r2, r0
     380:	f8 08       	sbc	r15, r8
     382:	10 20       	and	r1, r0
     384:	40 80       	ld	r4, Z
     386:	f8 38       	cpi	r31, 0x88	; 136
     388:	20 20       	and	r2, r0
     38a:	20 20       	and	r2, r0
     38c:	20 38       	cpi	r18, 0x80	; 128
     38e:	00 80       	ld	r0, Z
     390:	40 20       	and	r4, r0
     392:	10 08       	sbc	r1, r0
     394:	00 e0       	ldi	r16, 0x00	; 0
     396:	20 20       	and	r2, r0
     398:	20 20       	and	r2, r0
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	20 50       	subi	r18, 0x00	; 0
     39e:	88 00       	.word	0x0088	; ????
	...
     3a8:	00 f8       	bld	r0, 0
     3aa:	40 20       	and	r4, r0
     3ac:	10 00       	.word	0x0010	; ????
     3ae:	00 00       	nop
     3b0:	00 00       	nop
     3b2:	00 70       	andi	r16, 0x00	; 0
     3b4:	08 78       	andi	r16, 0x88	; 136
     3b6:	88 78       	andi	r24, 0x88	; 136
     3b8:	80 80       	ld	r8, Z
     3ba:	b0 c8       	rjmp	.-3744   	; 0xfffff51c <__eeprom_end+0xff7ef51c>
     3bc:	88 88       	ldd	r8, Y+16	; 0x10
     3be:	f0 00       	.word	0x00f0	; ????
     3c0:	00 70       	andi	r16, 0x00	; 0
     3c2:	80 80       	ld	r8, Z
     3c4:	88 70       	andi	r24, 0x08	; 8
     3c6:	08 08       	sbc	r0, r8
     3c8:	68 98       	cbi	0x0d, 0	; 13
     3ca:	88 88       	ldd	r8, Y+16	; 0x10
     3cc:	78 00       	.word	0x0078	; ????
     3ce:	00 70       	andi	r16, 0x00	; 0
     3d0:	88 f8       	.word	0xf888	; ????
     3d2:	80 70       	andi	r24, 0x00	; 0
     3d4:	30 48       	sbci	r19, 0x80	; 128
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	40 40       	sbci	r20, 0x00	; 0
     3da:	40 00       	.word	0x0040	; ????
     3dc:	00 78       	andi	r16, 0x80	; 128
     3de:	88 78       	andi	r24, 0x88	; 136
     3e0:	08 30       	cpi	r16, 0x08	; 8
     3e2:	80 80       	ld	r8, Z
     3e4:	b0 c8       	rjmp	.-3744   	; 0xfffff546 <__eeprom_end+0xff7ef546>
     3e6:	88 88       	ldd	r8, Y+16	; 0x10
     3e8:	88 20       	and	r8, r8
     3ea:	00 60       	ori	r16, 0x00	; 0
     3ec:	20 20       	and	r2, r0
     3ee:	20 70       	andi	r18, 0x00	; 0
     3f0:	10 00       	.word	0x0010	; ????
     3f2:	30 10       	cpse	r3, r0
     3f4:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x3f0d>
     3f8:	40 48       	sbci	r20, 0x80	; 128
     3fa:	50 60       	ori	r21, 0x00	; 0
     3fc:	50 48       	sbci	r21, 0x80	; 128
     3fe:	60 20       	and	r6, r0
     400:	20 20       	and	r2, r0
     402:	20 20       	and	r2, r0
     404:	70 00       	.word	0x0070	; ????
     406:	00 d0       	rcall	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     408:	a8 a8       	ldd	r10, Y+48	; 0x30
     40a:	88 88       	ldd	r8, Y+16	; 0x10
     40c:	00 00       	nop
     40e:	b0 c8       	rjmp	.-3744   	; 0xfffff570 <__eeprom_end+0xff7ef570>
     410:	88 88       	ldd	r8, Y+16	; 0x10
     412:	88 00       	.word	0x0088	; ????
     414:	00 70       	andi	r16, 0x00	; 0
     416:	88 88       	ldd	r8, Y+16	; 0x10
     418:	88 70       	andi	r24, 0x08	; 8
     41a:	00 00       	nop
     41c:	f0 88       	ldd	r15, Z+16	; 0x10
     41e:	f0 80       	ld	r15, Z
     420:	80 00       	.word	0x0080	; ????
     422:	00 68       	ori	r16, 0x80	; 128
     424:	98 78       	andi	r25, 0x88	; 136
     426:	08 08       	sbc	r0, r8
     428:	00 00       	nop
     42a:	b0 c8       	rjmp	.-3744   	; 0xfffff58c <__eeprom_end+0xff7ef58c>
     42c:	80 80       	ld	r8, Z
     42e:	80 00       	.word	0x0080	; ????
     430:	00 70       	andi	r16, 0x00	; 0
     432:	80 70       	andi	r24, 0x00	; 0
     434:	08 f0       	brcs	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     436:	40 40       	sbci	r20, 0x00	; 0
     438:	e0 40       	sbci	r30, 0x00	; 0
     43a:	40 48       	sbci	r20, 0x80	; 128
     43c:	30 00       	.word	0x0030	; ????
     43e:	00 88       	ldd	r0, Z+16	; 0x10
     440:	88 88       	ldd	r8, Y+16	; 0x10
     442:	98 68       	ori	r25, 0x88	; 136
     444:	00 00       	nop
     446:	88 88       	ldd	r8, Y+16	; 0x10
     448:	88 50       	subi	r24, 0x08	; 8
     44a:	20 00       	.word	0x0020	; ????
     44c:	00 88       	ldd	r0, Z+16	; 0x10
     44e:	88 a8       	ldd	r8, Y+48	; 0x30
     450:	a8 50       	subi	r26, 0x08	; 8
     452:	00 00       	nop
     454:	88 50       	subi	r24, 0x08	; 8
     456:	20 50       	subi	r18, 0x00	; 0
     458:	88 00       	.word	0x0088	; ????
     45a:	00 88       	ldd	r0, Z+16	; 0x10
     45c:	88 78       	andi	r24, 0x88	; 136
     45e:	08 70       	andi	r16, 0x08	; 8
     460:	00 00       	nop
     462:	f8 10       	cpse	r15, r8
     464:	20 40       	sbci	r18, 0x00	; 0
     466:	f8 10       	cpse	r15, r8
     468:	20 20       	and	r2, r0
     46a:	40 20       	and	r4, r0
     46c:	20 10       	cpse	r2, r0
     46e:	20 20       	and	r2, r0
     470:	20 20       	and	r2, r0
     472:	20 20       	and	r2, r0
     474:	20 40       	sbci	r18, 0x00	; 0
     476:	20 20       	and	r2, r0
     478:	10 20       	and	r1, r0
     47a:	20 40       	sbci	r18, 0x00	; 0

0000047c <__ctors_end>:
     47c:	11 24       	eor	r1, r1
     47e:	1f be       	out	0x3f, r1	; 63
     480:	cf ef       	ldi	r28, 0xFF	; 255
     482:	d8 e0       	ldi	r29, 0x08	; 8
     484:	de bf       	out	0x3e, r29	; 62
     486:	cd bf       	out	0x3d, r28	; 61

00000488 <__do_copy_data>:
     488:	11 e0       	ldi	r17, 0x01	; 1
     48a:	a0 e0       	ldi	r26, 0x00	; 0
     48c:	b1 e0       	ldi	r27, 0x01	; 1
     48e:	e8 e2       	ldi	r30, 0x28	; 40
     490:	f4 e2       	ldi	r31, 0x24	; 36
     492:	02 c0       	rjmp	.+4      	; 0x498 <__do_copy_data+0x10>
     494:	05 90       	lpm	r0, Z+
     496:	0d 92       	st	X+, r0
     498:	a8 31       	cpi	r26, 0x18	; 24
     49a:	b1 07       	cpc	r27, r17
     49c:	d9 f7       	brne	.-10     	; 0x494 <__do_copy_data+0xc>

0000049e <__do_clear_bss>:
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	a8 e1       	ldi	r26, 0x18	; 24
     4a2:	b1 e0       	ldi	r27, 0x01	; 1
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <.do_clear_bss_start>

000004a6 <.do_clear_bss_loop>:
     4a6:	1d 92       	st	X+, r1

000004a8 <.do_clear_bss_start>:
     4a8:	a3 35       	cpi	r26, 0x53	; 83
     4aa:	b2 07       	cpc	r27, r18
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <.do_clear_bss_loop>
     4ae:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <main>
     4b2:	0c 94 12 12 	jmp	0x2424	; 0x2424 <_exit>

000004b6 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	1f 92       	push	r1
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4c6:	8f b7       	in	r24, 0x3f	; 63
     4c8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     4ca:	f8 94       	cli
	return flags;
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     4ce:	5f 93       	push	r21
     4d0:	50 e8       	ldi	r21, 0x80	; 128
     4d2:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     4dc:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4de:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     4e0:	0f 90       	pop	r0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <gfx_mono_generic_draw_horizontal_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     4f2:	e4 2f       	mov	r30, r20
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	e8 0f       	add	r30, r24
     4f8:	f1 1d       	adc	r31, r1
     4fa:	e1 3f       	cpi	r30, 0xF1	; 241
     4fc:	f1 05       	cpc	r31, r1
     4fe:	1c f0       	brlt	.+6      	; 0x506 <gfx_mono_generic_draw_horizontal_line+0x1e>
		length = GFX_MONO_LCD_WIDTH - x;
     500:	c0 ef       	ldi	r28, 0xF0	; 240
     502:	4c 2f       	mov	r20, r28
     504:	48 1b       	sub	r20, r24
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     506:	44 23       	and	r20, r20
     508:	09 f4       	brne	.+2      	; 0x50c <gfx_mono_generic_draw_horizontal_line+0x24>
     50a:	53 c0       	rjmp	.+166    	; 0x5b2 <gfx_mono_generic_draw_horizontal_line+0xca>
	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
		length = GFX_MONO_LCD_WIDTH - x;
	}

	page = y / 8;
     50c:	d6 2f       	mov	r29, r22
     50e:	d6 95       	lsr	r29
     510:	d6 95       	lsr	r29
     512:	d6 95       	lsr	r29
	pixelmask = (1 << (y - (page * 8)));
     514:	ed 2f       	mov	r30, r29
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	f1 95       	neg	r31
     51a:	e1 95       	neg	r30
     51c:	f1 09       	sbc	r31, r1
     51e:	ee 0f       	add	r30, r30
     520:	ff 1f       	adc	r31, r31
     522:	ee 0f       	add	r30, r30
     524:	ff 1f       	adc	r31, r31
     526:	ee 0f       	add	r30, r30
     528:	ff 1f       	adc	r31, r31
     52a:	df 01       	movw	r26, r30
     52c:	a6 0f       	add	r26, r22
     52e:	b1 1d       	adc	r27, r1
     530:	bd 01       	movw	r22, r26
     532:	e1 e0       	ldi	r30, 0x01	; 1
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	df 01       	movw	r26, r30
     538:	02 c0       	rjmp	.+4      	; 0x53e <gfx_mono_generic_draw_horizontal_line+0x56>
     53a:	aa 0f       	add	r26, r26
     53c:	bb 1f       	adc	r27, r27
     53e:	6a 95       	dec	r22
     540:	e2 f7       	brpl	.-8      	; 0x53a <gfx_mono_generic_draw_horizontal_line+0x52>
     542:	fa 2e       	mov	r15, r26
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     544:	21 30       	cpi	r18, 0x01	; 1
     546:	21 f0       	breq	.+8      	; 0x550 <gfx_mono_generic_draw_horizontal_line+0x68>
     548:	98 f0       	brcs	.+38     	; 0x570 <gfx_mono_generic_draw_horizontal_line+0x88>
     54a:	22 30       	cpi	r18, 0x02	; 2
     54c:	19 f1       	breq	.+70     	; 0x594 <gfx_mono_generic_draw_horizontal_line+0xac>
     54e:	31 c0       	rjmp	.+98     	; 0x5b2 <gfx_mono_generic_draw_horizontal_line+0xca>
     550:	c4 2f       	mov	r28, r20
     552:	1f ef       	ldi	r17, 0xFF	; 255
     554:	18 0f       	add	r17, r24
     556:	01 2f       	mov	r16, r17
     558:	0c 0f       	add	r16, r28
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     55a:	60 2f       	mov	r22, r16
     55c:	8d 2f       	mov	r24, r29
     55e:	e0 d2       	rcall	.+1472   	; 0xb20 <gfx_mono_lcd_uc1608_get_byte>
			temp |= pixelmask;
     560:	48 2f       	mov	r20, r24
     562:	4f 29       	or	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     564:	60 2f       	mov	r22, r16
     566:	8d 2f       	mov	r24, r29
     568:	cb d2       	rcall	.+1430   	; 0xb00 <gfx_mono_lcd_uc1608_put_byte>
     56a:	c1 50       	subi	r28, 0x01	; 1
		return;
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
     56c:	a1 f7       	brne	.-24     	; 0x556 <gfx_mono_generic_draw_horizontal_line+0x6e>
     56e:	21 c0       	rjmp	.+66     	; 0x5b2 <gfx_mono_generic_draw_horizontal_line+0xca>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     570:	c4 2f       	mov	r28, r20
     572:	1f ef       	ldi	r17, 0xFF	; 255
     574:	18 0f       	add	r17, r24
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
			temp &= ~pixelmask;
     576:	fa 2e       	mov	r15, r26
     578:	f0 94       	com	r15
     57a:	01 2f       	mov	r16, r17
     57c:	0c 0f       	add	r16, r28
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     57e:	60 2f       	mov	r22, r16
     580:	8d 2f       	mov	r24, r29
     582:	ce d2       	rcall	.+1436   	; 0xb20 <gfx_mono_lcd_uc1608_get_byte>
			temp &= ~pixelmask;
     584:	48 2f       	mov	r20, r24
     586:	4f 21       	and	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     588:	60 2f       	mov	r22, r16
     58a:	8d 2f       	mov	r24, r29
     58c:	b9 d2       	rcall	.+1394   	; 0xb00 <gfx_mono_lcd_uc1608_put_byte>
     58e:	c1 50       	subi	r28, 0x01	; 1
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
     590:	a1 f7       	brne	.-24     	; 0x57a <gfx_mono_generic_draw_horizontal_line+0x92>
     592:	0f c0       	rjmp	.+30     	; 0x5b2 <gfx_mono_generic_draw_horizontal_line+0xca>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     594:	c4 2f       	mov	r28, r20
     596:	1f ef       	ldi	r17, 0xFF	; 255
     598:	18 0f       	add	r17, r24
     59a:	01 2f       	mov	r16, r17
     59c:	0c 0f       	add	r16, r28
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     59e:	60 2f       	mov	r22, r16
     5a0:	8d 2f       	mov	r24, r29
     5a2:	be d2       	rcall	.+1404   	; 0xb20 <gfx_mono_lcd_uc1608_get_byte>
			temp ^= pixelmask;
     5a4:	48 2f       	mov	r20, r24
     5a6:	4f 25       	eor	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     5a8:	60 2f       	mov	r22, r16
     5aa:	8d 2f       	mov	r24, r29
     5ac:	a9 d2       	rcall	.+1362   	; 0xb00 <gfx_mono_lcd_uc1608_put_byte>
     5ae:	c1 50       	subi	r28, 0x01	; 1
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
     5b0:	a1 f7       	brne	.-24     	; 0x59a <gfx_mono_generic_draw_horizontal_line+0xb2>
		break;

	default:
		break;
	}
}
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	08 95       	ret

000005be <gfx_mono_generic_draw_vertical_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
	if (length == 0) {
     5ca:	44 23       	and	r20, r20
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <gfx_mono_generic_draw_vertical_line+0x12>
     5ce:	46 c0       	rjmp	.+140    	; 0x65c <gfx_mono_generic_draw_vertical_line+0x9e>
     5d0:	12 2f       	mov	r17, r18
     5d2:	d8 2f       	mov	r29, r24
     5d4:	9f ef       	ldi	r25, 0xFF	; 255
     5d6:	96 0f       	add	r25, r22
		return;
	}

	gfx_coord_t y2 = y + length - 1;
     5d8:	94 0f       	add	r25, r20

	if (y == y2) {
     5da:	69 13       	cpse	r22, r25
     5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <gfx_mono_generic_draw_vertical_line+0x26>
		gfx_mono_draw_pixel(x, y, color);
     5de:	42 2f       	mov	r20, r18
     5e0:	d2 d2       	rcall	.+1444   	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     5e2:	3c c0       	rjmp	.+120    	; 0x65c <gfx_mono_generic_draw_vertical_line+0x9e>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
     5e4:	9f 37       	cpi	r25, 0x7F	; 127
     5e6:	08 f0       	brcs	.+2      	; 0x5ea <gfx_mono_generic_draw_vertical_line+0x2c>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
     5e8:	9f e7       	ldi	r25, 0x7F	; 127
	}

	gfx_coord_t y1page = y / 8;
     5ea:	c6 2f       	mov	r28, r22
     5ec:	c6 95       	lsr	r28
     5ee:	c6 95       	lsr	r28
     5f0:	c6 95       	lsr	r28
	gfx_coord_t y2page = y2 / 8;
     5f2:	09 2f       	mov	r16, r25
     5f4:	06 95       	lsr	r16
     5f6:	06 95       	lsr	r16
     5f8:	06 95       	lsr	r16

	uint8_t y1bitpos = y & 0x07;
     5fa:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
     5fc:	2f ef       	ldi	r18, 0xFF	; 255
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	a9 01       	movw	r20, r18
     602:	02 c0       	rjmp	.+4      	; 0x608 <gfx_mono_generic_draw_vertical_line+0x4a>
     604:	44 0f       	add	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	6a 95       	dec	r22
     60a:	e2 f7       	brpl	.-8      	; 0x604 <gfx_mono_generic_draw_vertical_line+0x46>

	gfx_coord_t y1page = y / 8;
	gfx_coord_t y2page = y2 / 8;

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;
     60c:	97 70       	andi	r25, 0x07	; 7

	uint8_t y1pixelmask = 0xFF << y1bitpos;
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
     60e:	67 e0       	ldi	r22, 0x07	; 7
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	fb 01       	movw	r30, r22
     614:	e9 1b       	sub	r30, r25
     616:	f1 09       	sbc	r31, r1
     618:	79 01       	movw	r14, r18
     61a:	02 c0       	rjmp	.+4      	; 0x620 <gfx_mono_generic_draw_vertical_line+0x62>
     61c:	f5 94       	asr	r15
     61e:	e7 94       	ror	r14
     620:	ea 95       	dec	r30
     622:	e2 f7       	brpl	.-8      	; 0x61c <gfx_mono_generic_draw_vertical_line+0x5e>

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     624:	c0 13       	cpse	r28, r16
     626:	06 c0       	rjmp	.+12     	; 0x634 <gfx_mono_generic_draw_vertical_line+0x76>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
     628:	4e 21       	and	r20, r14
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
     62a:	21 2f       	mov	r18, r17
     62c:	6d 2f       	mov	r22, r29
     62e:	8c 2f       	mov	r24, r28
     630:	87 d2       	rcall	.+1294   	; 0xb40 <gfx_mono_lcd_uc1608_mask_byte>
     632:	14 c0       	rjmp	.+40     	; 0x65c <gfx_mono_generic_draw_vertical_line+0x9e>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
     634:	21 2f       	mov	r18, r17
     636:	6d 2f       	mov	r22, r29
     638:	8c 2f       	mov	r24, r28
     63a:	82 d2       	rcall	.+1284   	; 0xb40 <gfx_mono_lcd_uc1608_mask_byte>

		while (++y1page < y2page) {
     63c:	cf 5f       	subi	r28, 0xFF	; 255
     63e:	c0 17       	cp	r28, r16
     640:	40 f4       	brcc	.+16     	; 0x652 <gfx_mono_generic_draw_vertical_line+0x94>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     642:	21 2f       	mov	r18, r17
     644:	4f ef       	ldi	r20, 0xFF	; 255
     646:	6d 2f       	mov	r22, r29
     648:	8c 2f       	mov	r24, r28
     64a:	7a d2       	rcall	.+1268   	; 0xb40 <gfx_mono_lcd_uc1608_mask_byte>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     64c:	cf 5f       	subi	r28, 0xFF	; 255
     64e:	c0 17       	cp	r28, r16
     650:	c0 f3       	brcs	.-16     	; 0x642 <gfx_mono_generic_draw_vertical_line+0x84>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     652:	21 2f       	mov	r18, r17
     654:	4e 2d       	mov	r20, r14
     656:	6d 2f       	mov	r22, r29
     658:	80 2f       	mov	r24, r16
     65a:	72 d2       	rcall	.+1252   	; 0xb40 <gfx_mono_lcd_uc1608_mask_byte>
	}
}
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	08 95       	ret

0000066a <gfx_mono_generic_draw_line>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
     66a:	8f 92       	push	r8
     66c:	9f 92       	push	r9
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	c8 2f       	mov	r28, r24
     684:	d6 2f       	mov	r29, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     686:	48 17       	cp	r20, r24
     688:	28 f4       	brcc	.+10     	; 0x694 <gfx_mono_generic_draw_line+0x2a>
		dx = x1;
		x1 = x2;
		x2 = dx;
		dy = y1;
		y1 = y2;
     68a:	d2 2f       	mov	r29, r18
		y2 = dy;
     68c:	26 2f       	mov	r18, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     68e:	8c 2f       	mov	r24, r28
		dx = x1;
		x1 = x2;
     690:	c4 2f       	mov	r28, r20
		x2 = dx;
     692:	48 2f       	mov	r20, r24
		dy = y1;
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
     694:	e4 2e       	mov	r14, r20
     696:	f1 2c       	mov	r15, r1
     698:	ec 1a       	sub	r14, r28
     69a:	f1 08       	sbc	r15, r1
	dy = y2 - y1;
     69c:	a2 2e       	mov	r10, r18
     69e:	b1 2c       	mov	r11, r1
     6a0:	ad 1a       	sub	r10, r29
     6a2:	b1 08       	sbc	r11, r1

	x = x1;
	y = y1;

	if (dx < 0) {
     6a4:	ff 20       	and	r15, r15
     6a6:	2c f4       	brge	.+10     	; 0x6b2 <gfx_mono_generic_draw_line+0x48>
		xinc = -1;
		dx = -dx;
     6a8:	f1 94       	neg	r15
     6aa:	e1 94       	neg	r14
     6ac:	f1 08       	sbc	r15, r1

	x = x1;
	y = y1;

	if (dx < 0) {
		xinc = -1;
     6ae:	1f ef       	ldi	r17, 0xFF	; 255
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <gfx_mono_generic_draw_line+0x4a>
		dx = -dx;
	} else {
		xinc = 1;
     6b2:	11 e0       	ldi	r17, 0x01	; 1
	}

	if (dy < 0) {
     6b4:	bb 20       	and	r11, r11
     6b6:	0c f0       	brlt	.+2      	; 0x6ba <gfx_mono_generic_draw_line+0x50>
     6b8:	48 c0       	rjmp	.+144    	; 0x74a <gfx_mono_generic_draw_line+0xe0>
		yinc = -1;
		dy = -dy;
     6ba:	88 24       	eor	r8, r8
     6bc:	99 24       	eor	r9, r9
     6be:	8a 18       	sub	r8, r10
     6c0:	9b 08       	sbc	r9, r11
	} else {
		yinc = 1;
	}

	if (dx > dy) {
     6c2:	8e 14       	cp	r8, r14
     6c4:	9f 04       	cpc	r9, r15
     6c6:	fc f4       	brge	.+62     	; 0x706 <gfx_mono_generic_draw_line+0x9c>
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
		dy = -dy;
     6c8:	54 01       	movw	r10, r8
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     6ca:	88 24       	eor	r8, r8
     6cc:	8a 94       	dec	r8
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <gfx_mono_generic_draw_line+0x6a>
		dy = -dy;
	} else {
		yinc = 1;
     6d0:	88 24       	eor	r8, r8
     6d2:	83 94       	inc	r8
	}

	if (dx > dy) {
		e = dy - dx;
     6d4:	65 01       	movw	r12, r10
     6d6:	ce 18       	sub	r12, r14
     6d8:	df 08       	sbc	r13, r15
		for (i = 0; i <= dx; i++) {
     6da:	ff 20       	and	r15, r15
     6dc:	dc f1       	brlt	.+118    	; 0x754 <gfx_mono_generic_draw_line+0xea>
     6de:	91 2c       	mov	r9, r1
			gfx_mono_draw_pixel(x, y, color);
     6e0:	40 2f       	mov	r20, r16
     6e2:	6d 2f       	mov	r22, r29
     6e4:	8c 2f       	mov	r24, r28
     6e6:	4f d2       	rcall	.+1182   	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     6e8:	dd 20       	and	r13, r13
     6ea:	1c f0       	brlt	.+6      	; 0x6f2 <gfx_mono_generic_draw_line+0x88>
				e -= dx;
     6ec:	ce 18       	sub	r12, r14
     6ee:	df 08       	sbc	r13, r15
				y += yinc;
     6f0:	d8 0d       	add	r29, r8
			}

			e += dy;
     6f2:	ca 0c       	add	r12, r10
     6f4:	db 1c       	adc	r13, r11
     6f6:	c1 0f       	add	r28, r17
		yinc = 1;
	}

	if (dx > dy) {
		e = dy - dx;
		for (i = 0; i <= dx; i++) {
     6f8:	93 94       	inc	r9
     6fa:	89 2d       	mov	r24, r9
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	e8 16       	cp	r14, r24
     700:	f9 06       	cpc	r15, r25
     702:	74 f7       	brge	.-36     	; 0x6e0 <gfx_mono_generic_draw_line+0x76>
     704:	27 c0       	rjmp	.+78     	; 0x754 <gfx_mono_generic_draw_line+0xea>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     706:	67 01       	movw	r12, r14
     708:	ca 0c       	add	r12, r10
     70a:	db 1c       	adc	r13, r11
		for (i = 0; i <= dy; i++) {
     70c:	99 20       	and	r9, r9
     70e:	14 f1       	brlt	.+68     	; 0x754 <gfx_mono_generic_draw_line+0xea>
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     710:	aa 24       	eor	r10, r10
     712:	aa 94       	dec	r10
		dy = -dy;
	} else {
		yinc = 1;
     714:	b1 2c       	mov	r11, r1
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
			gfx_mono_draw_pixel(x, y, color);
     716:	40 2f       	mov	r20, r16
     718:	6d 2f       	mov	r22, r29
     71a:	8c 2f       	mov	r24, r28
     71c:	34 d2       	rcall	.+1128   	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     71e:	dd 20       	and	r13, r13
     720:	1c f0       	brlt	.+6      	; 0x728 <gfx_mono_generic_draw_line+0xbe>
				e -= dy;
     722:	c8 18       	sub	r12, r8
     724:	d9 08       	sbc	r13, r9
				x += xinc;
     726:	c1 0f       	add	r28, r17
			}

			e += dx;
     728:	ce 0c       	add	r12, r14
     72a:	df 1c       	adc	r13, r15
     72c:	da 0d       	add	r29, r10
			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
     72e:	b3 94       	inc	r11
     730:	8b 2d       	mov	r24, r11
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	88 16       	cp	r8, r24
     736:	99 06       	cpc	r9, r25
     738:	74 f7       	brge	.-36     	; 0x716 <gfx_mono_generic_draw_line+0xac>
     73a:	0c c0       	rjmp	.+24     	; 0x754 <gfx_mono_generic_draw_line+0xea>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     73c:	67 01       	movw	r12, r14
     73e:	ca 18       	sub	r12, r10
     740:	db 08       	sbc	r13, r11
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
	dy = y2 - y1;
     742:	45 01       	movw	r8, r10

	if (dy < 0) {
		yinc = -1;
		dy = -dy;
	} else {
		yinc = 1;
     744:	aa 24       	eor	r10, r10
     746:	a3 94       	inc	r10
     748:	e5 cf       	rjmp	.-54     	; 0x714 <gfx_mono_generic_draw_line+0xaa>
	}

	if (dx > dy) {
     74a:	ae 14       	cp	r10, r14
     74c:	bf 04       	cpc	r11, r15
     74e:	0c f4       	brge	.+2      	; 0x752 <gfx_mono_generic_draw_line+0xe8>
     750:	bf cf       	rjmp	.-130    	; 0x6d0 <gfx_mono_generic_draw_line+0x66>
     752:	f4 cf       	rjmp	.-24     	; 0x73c <gfx_mono_generic_draw_line+0xd2>

			e += dx;
			y += yinc;
		}
	}
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	bf 90       	pop	r11
     766:	af 90       	pop	r10
     768:	9f 90       	pop	r9
     76a:	8f 90       	pop	r8
     76c:	08 95       	ret

0000076e <gfx_mono_generic_draw_rect>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	d8 2f       	mov	r29, r24
     77a:	16 2f       	mov	r17, r22
     77c:	c4 2f       	mov	r28, r20
     77e:	f2 2e       	mov	r15, r18
	gfx_mono_draw_horizontal_line(x, y, width, color);
     780:	20 2f       	mov	r18, r16
     782:	b2 de       	rcall	.-668    	; 0x4e8 <gfx_mono_generic_draw_horizontal_line>
     784:	6f ef       	ldi	r22, 0xFF	; 255
     786:	6f 0d       	add	r22, r15
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
     788:	61 0f       	add	r22, r17
     78a:	20 2f       	mov	r18, r16
     78c:	4c 2f       	mov	r20, r28
     78e:	8d 2f       	mov	r24, r29
     790:	ab de       	rcall	.-682    	; 0x4e8 <gfx_mono_generic_draw_horizontal_line>

	gfx_mono_draw_vertical_line(x, y, height, color);
     792:	20 2f       	mov	r18, r16
     794:	4f 2d       	mov	r20, r15
     796:	61 2f       	mov	r22, r17
     798:	8d 2f       	mov	r24, r29
     79a:	11 df       	rcall	.-478    	; 0x5be <gfx_mono_generic_draw_vertical_line>
     79c:	8f ef       	ldi	r24, 0xFF	; 255
     79e:	8c 0f       	add	r24, r28
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     7a0:	20 2f       	mov	r18, r16
     7a2:	4f 2d       	mov	r20, r15
     7a4:	61 2f       	mov	r22, r17
     7a6:	8d 0f       	add	r24, r29
     7a8:	0a df       	rcall	.-492    	; 0x5be <gfx_mono_generic_draw_vertical_line>
}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	08 95       	ret

000007b6 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
	if (height == 0) {
     7c0:	22 23       	and	r18, r18
     7c2:	69 f0       	breq	.+26     	; 0x7de <gfx_mono_generic_draw_filled_rect+0x28>
     7c4:	c2 2f       	mov	r28, r18
     7c6:	f4 2e       	mov	r15, r20
     7c8:	18 2f       	mov	r17, r24
     7ca:	df ef       	ldi	r29, 0xFF	; 255
     7cc:	d6 0f       	add	r29, r22
     7ce:	6d 2f       	mov	r22, r29
     7d0:	6c 0f       	add	r22, r28
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     7d2:	20 2f       	mov	r18, r16
     7d4:	4f 2d       	mov	r20, r15
     7d6:	81 2f       	mov	r24, r17
     7d8:	87 de       	rcall	.-754    	; 0x4e8 <gfx_mono_generic_draw_horizontal_line>
     7da:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     7dc:	c1 f7       	brne	.-16     	; 0x7ce <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	08 95       	ret

000007ea <gfx_mono_generic_draw_circle>:
 * \param  octant_mask Bitmask indicating which octants to draw.
 */
void gfx_mono_generic_draw_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t octant_mask)
{
     7ea:	2f 92       	push	r2
     7ec:	3f 92       	push	r3
     7ee:	4f 92       	push	r4
     7f0:	5f 92       	push	r5
     7f2:	6f 92       	push	r6
     7f4:	7f 92       	push	r7
     7f6:	8f 92       	push	r8
     7f8:	9f 92       	push	r9
     7fa:	af 92       	push	r10
     7fc:	bf 92       	push	r11
     7fe:	cf 92       	push	r12
     800:	df 92       	push	r13
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	00 d0       	rcall	.+0      	; 0x810 <gfx_mono_generic_draw_circle+0x26>
     810:	1f 92       	push	r1
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	88 2e       	mov	r8, r24
     818:	96 2e       	mov	r9, r22
     81a:	4a 83       	std	Y+2, r20	; 0x02
     81c:	a2 2e       	mov	r10, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     81e:	41 11       	cpse	r20, r1
     820:	03 c0       	rjmp	.+6      	; 0x828 <gfx_mono_generic_draw_circle+0x3e>
		gfx_mono_draw_pixel(x, y, color);
     822:	42 2f       	mov	r20, r18
     824:	b0 d1       	rcall	.+864    	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     826:	89 c0       	rjmp	.+274    	; 0x93a <__stack+0x3b>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     828:	2a 81       	ldd	r18, Y+2	; 0x02
     82a:	e2 2e       	mov	r14, r18
     82c:	f1 2c       	mov	r15, r1
     82e:	ee 0c       	add	r14, r14
     830:	ff 1c       	adc	r15, r15
     832:	f1 94       	neg	r15
     834:	e1 94       	neg	r14
     836:	f1 08       	sbc	r15, r1
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	e8 0e       	add	r14, r24
     83c:	f1 1c       	adc	r15, r1
     83e:	c6 2e       	mov	r12, r22
     840:	d8 2c       	mov	r13, r8
     842:	18 2d       	mov	r17, r8
     844:	b6 2e       	mov	r11, r22
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     846:	1b 82       	std	Y+3, r1	; 0x03
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     848:	90 2f       	mov	r25, r16
     84a:	91 70       	andi	r25, 0x01	; 1
     84c:	29 2e       	mov	r2, r25
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT1) {
     84e:	e0 2f       	mov	r30, r16
     850:	e2 70       	andi	r30, 0x02	; 2
     852:	3e 2e       	mov	r3, r30
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT2) {
     854:	f0 2f       	mov	r31, r16
     856:	f4 70       	andi	r31, 0x04	; 4
     858:	4f 2e       	mov	r4, r31
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT3) {
     85a:	20 2f       	mov	r18, r16
     85c:	28 70       	andi	r18, 0x08	; 8
     85e:	52 2e       	mov	r5, r18
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT4) {
     860:	80 2f       	mov	r24, r16
     862:	80 71       	andi	r24, 0x10	; 16
     864:	68 2e       	mov	r6, r24
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
		}

		if (octant_mask & GFX_OCTANT5) {
     866:	90 2f       	mov	r25, r16
     868:	90 72       	andi	r25, 0x20	; 32
     86a:	79 2e       	mov	r7, r25
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
		}

		if (octant_mask & GFX_OCTANT6) {
     86c:	e0 2f       	mov	r30, r16
     86e:	e0 74       	andi	r30, 0x40	; 64
     870:	e9 83       	std	Y+1, r30	; 0x01
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     872:	22 20       	and	r2, r2
     874:	29 f0       	breq	.+10     	; 0x880 <gfx_mono_generic_draw_circle+0x96>
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
     876:	4a 2d       	mov	r20, r10
     878:	6c 2d       	mov	r22, r12
     87a:	8a 81       	ldd	r24, Y+2	; 0x02
     87c:	88 0d       	add	r24, r8
     87e:	83 d1       	rcall	.+774    	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT1) {
     880:	33 20       	and	r3, r3
     882:	31 f0       	breq	.+12     	; 0x890 <gfx_mono_generic_draw_circle+0xa6>
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
     884:	4a 2d       	mov	r20, r10
     886:	69 2d       	mov	r22, r9
     888:	fa 81       	ldd	r31, Y+2	; 0x02
     88a:	6f 1b       	sub	r22, r31
     88c:	81 2f       	mov	r24, r17
     88e:	7b d1       	rcall	.+758    	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT2) {
     890:	44 20       	and	r4, r4
     892:	31 f0       	breq	.+12     	; 0x8a0 <gfx_mono_generic_draw_circle+0xb6>
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
     894:	4a 2d       	mov	r20, r10
     896:	69 2d       	mov	r22, r9
     898:	2a 81       	ldd	r18, Y+2	; 0x02
     89a:	62 1b       	sub	r22, r18
     89c:	8d 2d       	mov	r24, r13
     89e:	73 d1       	rcall	.+742    	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT3) {
     8a0:	55 20       	and	r5, r5
     8a2:	31 f0       	breq	.+12     	; 0x8b0 <gfx_mono_generic_draw_circle+0xc6>
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
     8a4:	4a 2d       	mov	r20, r10
     8a6:	6c 2d       	mov	r22, r12
     8a8:	88 2d       	mov	r24, r8
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	89 1b       	sub	r24, r25
     8ae:	6b d1       	rcall	.+726    	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT4) {
     8b0:	66 20       	and	r6, r6
     8b2:	31 f0       	breq	.+12     	; 0x8c0 <gfx_mono_generic_draw_circle+0xd6>
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
     8b4:	4a 2d       	mov	r20, r10
     8b6:	6b 2d       	mov	r22, r11
     8b8:	88 2d       	mov	r24, r8
     8ba:	ea 81       	ldd	r30, Y+2	; 0x02
     8bc:	8e 1b       	sub	r24, r30
     8be:	63 d1       	rcall	.+710    	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT5) {
     8c0:	77 20       	and	r7, r7
     8c2:	29 f0       	breq	.+10     	; 0x8ce <gfx_mono_generic_draw_circle+0xe4>
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
     8c4:	4a 2d       	mov	r20, r10
     8c6:	6a 81       	ldd	r22, Y+2	; 0x02
     8c8:	69 0d       	add	r22, r9
     8ca:	8d 2d       	mov	r24, r13
     8cc:	5c d1       	rcall	.+696    	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT6) {
     8ce:	f9 81       	ldd	r31, Y+1	; 0x01
     8d0:	ff 23       	and	r31, r31
     8d2:	29 f0       	breq	.+10     	; 0x8de <gfx_mono_generic_draw_circle+0xf4>
			gfx_mono_draw_pixel(x + offset_x, y + offset_y, color);
     8d4:	4a 2d       	mov	r20, r10
     8d6:	6a 81       	ldd	r22, Y+2	; 0x02
     8d8:	69 0d       	add	r22, r9
     8da:	81 2f       	mov	r24, r17
     8dc:	54 d1       	rcall	.+680    	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT7) {
     8de:	00 23       	and	r16, r16
     8e0:	2c f4       	brge	.+10     	; 0x8ec <gfx_mono_generic_draw_circle+0x102>
			gfx_mono_draw_pixel(x + offset_y, y + offset_x, color);
     8e2:	4a 2d       	mov	r20, r10
     8e4:	6b 2d       	mov	r22, r11
     8e6:	8a 81       	ldd	r24, Y+2	; 0x02
     8e8:	88 0d       	add	r24, r8
     8ea:	4d d1       	rcall	.+666    	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     8ec:	ff 20       	and	r15, r15
     8ee:	5c f4       	brge	.+22     	; 0x906 <__stack+0x7>
			error += ((offset_x << 2) + 6);
     8f0:	2b 81       	ldd	r18, Y+3	; 0x03
     8f2:	82 2f       	mov	r24, r18
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	06 96       	adiw	r24, 0x06	; 6
     900:	e8 0e       	add	r14, r24
     902:	f9 1e       	adc	r15, r25
     904:	0f c0       	rjmp	.+30     	; 0x924 <__stack+0x25>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     906:	eb 81       	ldd	r30, Y+3	; 0x03
     908:	8e 2f       	mov	r24, r30
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	fa 81       	ldd	r31, Y+2	; 0x02
     90e:	8f 1b       	sub	r24, r31
     910:	91 09       	sbc	r25, r1
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	0a 96       	adiw	r24, 0x0a	; 10
     91c:	e8 0e       	add	r14, r24
     91e:	f9 1e       	adc	r15, r25
			--offset_y;
     920:	f1 50       	subi	r31, 0x01	; 1
     922:	fa 83       	std	Y+2, r31	; 0x02
		}

		/* Next X. */
		++offset_x;
     924:	2b 81       	ldd	r18, Y+3	; 0x03
     926:	2f 5f       	subi	r18, 0xFF	; 255
     928:	2b 83       	std	Y+3, r18	; 0x03
     92a:	b3 94       	inc	r11
     92c:	1f 5f       	subi	r17, 0xFF	; 255
     92e:	da 94       	dec	r13
     930:	ca 94       	dec	r12
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
     932:	8a 81       	ldd	r24, Y+2	; 0x02
     934:	82 17       	cp	r24, r18
     936:	08 f0       	brcs	.+2      	; 0x93a <__stack+0x3b>
     938:	9c cf       	rjmp	.-200    	; 0x872 <gfx_mono_generic_draw_circle+0x88>
		}

		/* Next X. */
		++offset_x;
	}
}
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	9f 90       	pop	r9
     956:	8f 90       	pop	r8
     958:	7f 90       	pop	r7
     95a:	6f 90       	pop	r6
     95c:	5f 90       	pop	r5
     95e:	4f 90       	pop	r4
     960:	3f 90       	pop	r3
     962:	2f 90       	pop	r2
     964:	08 95       	ret

00000966 <gfx_mono_generic_draw_filled_circle>:
 * \param  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
     966:	5f 92       	push	r5
     968:	6f 92       	push	r6
     96a:	7f 92       	push	r7
     96c:	8f 92       	push	r8
     96e:	9f 92       	push	r9
     970:	af 92       	push	r10
     972:	bf 92       	push	r11
     974:	cf 92       	push	r12
     976:	df 92       	push	r13
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	88 2e       	mov	r8, r24
     986:	96 2e       	mov	r9, r22
     988:	c4 2f       	mov	r28, r20
     98a:	a2 2e       	mov	r10, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     98c:	41 11       	cpse	r20, r1
     98e:	03 c0       	rjmp	.+6      	; 0x996 <gfx_mono_generic_draw_filled_circle+0x30>
		gfx_mono_draw_pixel(x, y, color);
     990:	42 2f       	mov	r20, r18
     992:	f9 d0       	rcall	.+498    	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     994:	73 c0       	rjmp	.+230    	; 0xa7c <gfx_mono_generic_draw_filled_circle+0x116>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     996:	e4 2e       	mov	r14, r20
     998:	f1 2c       	mov	r15, r1
     99a:	ee 0c       	add	r14, r14
     99c:	ff 1c       	adc	r15, r15
     99e:	f1 94       	neg	r15
     9a0:	e1 94       	neg	r14
     9a2:	f1 08       	sbc	r15, r1
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	e8 0e       	add	r14, r24
     9a8:	f1 1c       	adc	r15, r1
     9aa:	b6 2e       	mov	r11, r22
     9ac:	c8 2c       	mov	r12, r8
     9ae:	d8 2c       	mov	r13, r8
     9b0:	11 e0       	ldi	r17, 0x01	; 1
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     9b4:	80 2f       	mov	r24, r16
     9b6:	83 70       	andi	r24, 0x03	; 3
     9b8:	58 2e       	mov	r5, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     9ba:	80 2f       	mov	r24, r16
     9bc:	8c 70       	andi	r24, 0x0C	; 12
     9be:	68 2e       	mov	r6, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     9c0:	80 2f       	mov	r24, r16
     9c2:	80 73       	andi	r24, 0x30	; 48
     9c4:	78 2e       	mov	r7, r24
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     9c6:	00 7c       	andi	r16, 0xC0	; 192
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     9c8:	55 20       	and	r5, r5
     9ca:	69 f0       	breq	.+26     	; 0x9e6 <gfx_mono_generic_draw_filled_circle+0x80>
			gfx_mono_draw_vertical_line(x + offset_y,
     9cc:	2a 2d       	mov	r18, r10
     9ce:	41 2f       	mov	r20, r17
     9d0:	6b 2d       	mov	r22, r11
     9d2:	8c 2f       	mov	r24, r28
     9d4:	88 0d       	add	r24, r8
     9d6:	f3 dd       	rcall	.-1050   	; 0x5be <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     9d8:	2a 2d       	mov	r18, r10
     9da:	41 e0       	ldi	r20, 0x01	; 1
     9dc:	4c 0f       	add	r20, r28
     9de:	69 2d       	mov	r22, r9
     9e0:	6c 1b       	sub	r22, r28
     9e2:	8d 2d       	mov	r24, r13
     9e4:	ec dd       	rcall	.-1064   	; 0x5be <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     9e6:	66 20       	and	r6, r6
     9e8:	69 f0       	breq	.+26     	; 0xa04 <gfx_mono_generic_draw_filled_circle+0x9e>
			gfx_mono_draw_vertical_line(x - offset_y,
     9ea:	2a 2d       	mov	r18, r10
     9ec:	41 2f       	mov	r20, r17
     9ee:	6b 2d       	mov	r22, r11
     9f0:	88 2d       	mov	r24, r8
     9f2:	8c 1b       	sub	r24, r28
     9f4:	e4 dd       	rcall	.-1080   	; 0x5be <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     9f6:	2a 2d       	mov	r18, r10
     9f8:	41 e0       	ldi	r20, 0x01	; 1
     9fa:	4c 0f       	add	r20, r28
     9fc:	69 2d       	mov	r22, r9
     9fe:	6c 1b       	sub	r22, r28
     a00:	8c 2d       	mov	r24, r12
     a02:	dd dd       	rcall	.-1094   	; 0x5be <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     a04:	77 20       	and	r7, r7
     a06:	61 f0       	breq	.+24     	; 0xa20 <gfx_mono_generic_draw_filled_circle+0xba>
			gfx_mono_draw_vertical_line(x - offset_y,
     a08:	2a 2d       	mov	r18, r10
     a0a:	41 2f       	mov	r20, r17
     a0c:	69 2d       	mov	r22, r9
     a0e:	88 2d       	mov	r24, r8
     a10:	8c 1b       	sub	r24, r28
     a12:	d5 dd       	rcall	.-1110   	; 0x5be <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     a14:	2a 2d       	mov	r18, r10
     a16:	41 e0       	ldi	r20, 0x01	; 1
     a18:	4c 0f       	add	r20, r28
     a1a:	69 2d       	mov	r22, r9
     a1c:	8c 2d       	mov	r24, r12
     a1e:	cf dd       	rcall	.-1122   	; 0x5be <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     a20:	00 23       	and	r16, r16
     a22:	61 f0       	breq	.+24     	; 0xa3c <gfx_mono_generic_draw_filled_circle+0xd6>
			gfx_mono_draw_vertical_line(x + offset_y,
     a24:	2a 2d       	mov	r18, r10
     a26:	41 2f       	mov	r20, r17
     a28:	69 2d       	mov	r22, r9
     a2a:	8c 2f       	mov	r24, r28
     a2c:	88 0d       	add	r24, r8
     a2e:	c7 dd       	rcall	.-1138   	; 0x5be <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     a30:	2a 2d       	mov	r18, r10
     a32:	41 e0       	ldi	r20, 0x01	; 1
     a34:	4c 0f       	add	r20, r28
     a36:	69 2d       	mov	r22, r9
     a38:	8d 2d       	mov	r24, r13
     a3a:	c1 dd       	rcall	.-1150   	; 0x5be <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     a3c:	ff 20       	and	r15, r15
     a3e:	54 f4       	brge	.+20     	; 0xa54 <gfx_mono_generic_draw_filled_circle+0xee>
			error += ((offset_x << 2) + 6);
     a40:	8d 2f       	mov	r24, r29
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	06 96       	adiw	r24, 0x06	; 6
     a4e:	e8 0e       	add	r14, r24
     a50:	f9 1e       	adc	r15, r25
     a52:	0c c0       	rjmp	.+24     	; 0xa6c <gfx_mono_generic_draw_filled_circle+0x106>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     a54:	ed 2f       	mov	r30, r29
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	ec 1b       	sub	r30, r28
     a5a:	f1 09       	sbc	r31, r1
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	3a 96       	adiw	r30, 0x0a	; 10
     a66:	ee 0e       	add	r14, r30
     a68:	ff 1e       	adc	r15, r31
			--offset_y;
     a6a:	c1 50       	subi	r28, 0x01	; 1
		}

		/* Next X. */
		++offset_x;
     a6c:	df 5f       	subi	r29, 0xFF	; 255
     a6e:	1f 5f       	subi	r17, 0xFF	; 255
     a70:	d3 94       	inc	r13
     a72:	ca 94       	dec	r12
     a74:	ba 94       	dec	r11
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
     a76:	cd 17       	cp	r28, r29
     a78:	08 f0       	brcs	.+2      	; 0xa7c <gfx_mono_generic_draw_filled_circle+0x116>
     a7a:	a6 cf       	rjmp	.-180    	; 0x9c8 <gfx_mono_generic_draw_filled_circle+0x62>
		}

		/* Next X. */
		++offset_x;
	}
}
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	ff 90       	pop	r15
     a86:	ef 90       	pop	r14
     a88:	df 90       	pop	r13
     a8a:	cf 90       	pop	r12
     a8c:	bf 90       	pop	r11
     a8e:	af 90       	pop	r10
     a90:	9f 90       	pop	r9
     a92:	8f 90       	pop	r8
     a94:	7f 90       	pop	r7
     a96:	6f 90       	pop	r6
     a98:	5f 90       	pop	r5
     a9a:	08 95       	ret

00000a9c <gfx_mono_lcd_uc1608_put_page>:
		uint8_t				byte = gfx_mono_lcd_uc1608_get_byte(page, x);

		isSet = (byte & pixel_mask) ?  GFX_PIXEL_SET : GFX_PIXEL_CLR;
	}
	return isSet;
}
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	7c 01       	movw	r14, r24
     aaa:	c4 2f       	mov	r28, r20
     aac:	12 2f       	mov	r17, r18
     aae:	89 2b       	or	r24, r25
     ab0:	01 f1       	breq	.+64     	; 0xaf2 <gfx_mono_lcd_uc1608_put_page+0x56>
     ab2:	60 31       	cpi	r22, 0x10	; 16
     ab4:	f0 f4       	brcc	.+60     	; 0xaf2 <gfx_mono_lcd_uc1608_put_page+0x56>
     ab6:	40 3f       	cpi	r20, 0xF0	; 240
     ab8:	e0 f4       	brcc	.+56     	; 0xaf2 <gfx_mono_lcd_uc1608_put_page+0x56>
     aba:	86 2f       	mov	r24, r22
     abc:	6a d5       	rcall	.+2772   	; 0x1592 <lcd_page_set>
     abe:	8c 2f       	mov	r24, r28
     ac0:	6e d5       	rcall	.+2780   	; 0x159e <lcd_col_set>
     ac2:	81 2f       	mov	r24, r17
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	8c 0f       	add	r24, r28
     ac8:	91 1d       	adc	r25, r1
     aca:	81 3f       	cpi	r24, 0xF1	; 241
     acc:	91 05       	cpc	r25, r1
     ace:	14 f0       	brlt	.+4      	; 0xad4 <gfx_mono_lcd_uc1608_put_page+0x38>
     ad0:	10 ef       	ldi	r17, 0xF0	; 240
     ad2:	1c 1b       	sub	r17, r28
     ad4:	11 23       	and	r17, r17
     ad6:	69 f0       	breq	.+26     	; 0xaf2 <gfx_mono_lcd_uc1608_put_page+0x56>
     ad8:	e7 01       	movw	r28, r14
     ada:	11 50       	subi	r17, 0x01	; 1
     adc:	01 2f       	mov	r16, r17
     ade:	10 e0       	ldi	r17, 0x00	; 0
     ae0:	0f 5f       	subi	r16, 0xFF	; 255
     ae2:	1f 4f       	sbci	r17, 0xFF	; 255
     ae4:	0e 0d       	add	r16, r14
     ae6:	1f 1d       	adc	r17, r15
     ae8:	89 91       	ld	r24, Y+
     aea:	19 d5       	rcall	.+2610   	; 0x151e <lcd_bus_write_ram>
     aec:	c0 17       	cp	r28, r16
     aee:	d1 07       	cpc	r29, r17
     af0:	d9 f7       	brne	.-10     	; 0xae8 <gfx_mono_lcd_uc1608_put_page+0x4c>
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	08 95       	ret

00000b00 <gfx_mono_lcd_uc1608_put_byte>:
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	80 31       	cpi	r24, 0x10	; 16
     b06:	48 f4       	brcc	.+18     	; 0xb1a <gfx_mono_lcd_uc1608_put_byte+0x1a>
     b08:	60 3f       	cpi	r22, 0xF0	; 240
     b0a:	38 f4       	brcc	.+14     	; 0xb1a <gfx_mono_lcd_uc1608_put_byte+0x1a>
     b0c:	d4 2f       	mov	r29, r20
     b0e:	c6 2f       	mov	r28, r22
     b10:	40 d5       	rcall	.+2688   	; 0x1592 <lcd_page_set>
     b12:	8c 2f       	mov	r24, r28
     b14:	44 d5       	rcall	.+2696   	; 0x159e <lcd_col_set>
     b16:	8d 2f       	mov	r24, r29
     b18:	02 d5       	rcall	.+2564   	; 0x151e <lcd_bus_write_ram>
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	08 95       	ret

00000b20 <gfx_mono_lcd_uc1608_get_byte>:
     b20:	cf 93       	push	r28
     b22:	80 31       	cpi	r24, 0x10	; 16
     b24:	40 f4       	brcc	.+16     	; 0xb36 <gfx_mono_lcd_uc1608_get_byte+0x16>
     b26:	60 3f       	cpi	r22, 0xF0	; 240
     b28:	40 f4       	brcc	.+16     	; 0xb3a <gfx_mono_lcd_uc1608_get_byte+0x1a>
     b2a:	c6 2f       	mov	r28, r22
     b2c:	32 d5       	rcall	.+2660   	; 0x1592 <lcd_page_set>
     b2e:	8c 2f       	mov	r24, r28
     b30:	36 d5       	rcall	.+2668   	; 0x159e <lcd_col_set>
     b32:	0c d5       	rcall	.+2584   	; 0x154c <lcd_bus_read_ram>
     b34:	03 c0       	rjmp	.+6      	; 0xb3c <gfx_mono_lcd_uc1608_get_byte+0x1c>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <gfx_mono_lcd_uc1608_get_byte+0x1c>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret

00000b40 <gfx_mono_lcd_uc1608_mask_byte>:
 * \param column     Page offset (x coordinate)
 * \param pixel_mask Mask for pixel operation
 * \param color      Pixel operation
 */
void gfx_mono_lcd_uc1608_mask_byte(gfx_coord_t page, gfx_coord_t column, gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
	uint8_t data = 0;

	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
     b48:	80 31       	cpi	r24, 0x10	; 16
     b4a:	c0 f4       	brcc	.+48     	; 0xb7c <gfx_mono_lcd_uc1608_mask_byte+0x3c>
     b4c:	60 3f       	cpi	r22, 0xF0	; 240
     b4e:	b0 f4       	brcc	.+44     	; 0xb7c <gfx_mono_lcd_uc1608_mask_byte+0x3c>
     b50:	d2 2f       	mov	r29, r18
     b52:	14 2f       	mov	r17, r20
     b54:	c6 2f       	mov	r28, r22
		data = gfx_mono_lcd_uc1608_get_byte(page, column);
     b56:	e4 df       	rcall	.-56     	; 0xb20 <gfx_mono_lcd_uc1608_get_byte>
     b58:	08 2f       	mov	r16, r24

		switch (color) {
     b5a:	d1 30       	cpi	r29, 0x01	; 1
     b5c:	41 f0       	breq	.+16     	; 0xb6e <gfx_mono_lcd_uc1608_mask_byte+0x2e>
     b5e:	18 f0       	brcs	.+6      	; 0xb66 <gfx_mono_lcd_uc1608_mask_byte+0x26>
     b60:	d2 30       	cpi	r29, 0x02	; 2
     b62:	39 f0       	breq	.+14     	; 0xb72 <gfx_mono_lcd_uc1608_mask_byte+0x32>
     b64:	07 c0       	rjmp	.+14     	; 0xb74 <gfx_mono_lcd_uc1608_mask_byte+0x34>
			case GFX_PIXEL_CLR:
				data &= ~pixel_mask;
     b66:	41 2f       	mov	r20, r17
     b68:	40 95       	com	r20
     b6a:	04 23       	and	r16, r20
				break;
     b6c:	03 c0       	rjmp	.+6      	; 0xb74 <gfx_mono_lcd_uc1608_mask_byte+0x34>

			case GFX_PIXEL_SET:
				data |= pixel_mask;
     b6e:	01 2b       	or	r16, r17
				break;
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <gfx_mono_lcd_uc1608_mask_byte+0x34>

			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
     b72:	01 27       	eor	r16, r17
				break;
		}

		lcd_col_set(column);
     b74:	8c 2f       	mov	r24, r28
     b76:	13 d5       	rcall	.+2598   	; 0x159e <lcd_col_set>
		lcd_bus_write_ram(data);										// Write byte slice to RAM
     b78:	80 2f       	mov	r24, r16
     b7a:	d1 d4       	rcall	.+2466   	; 0x151e <lcd_bus_write_ram>
	}
}
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	08 95       	ret

00000b86 <gfx_mono_lcd_uc1608_draw_pixel>:
 * \param y         Y coordinate of the pixel
 * \param color     Pixel operation.
 */
void gfx_mono_lcd_uc1608_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_mono_color_t color)
{
	if ((x < GFX_MONO_LCD_WIDTH) && (y < GFX_MONO_LCD_HEIGHT)) {
     b86:	80 3f       	cpi	r24, 0xF0	; 240
     b88:	98 f4       	brcc	.+38     	; 0xbb0 <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     b8a:	66 23       	and	r22, r22
     b8c:	8c f0       	brlt	.+34     	; 0xbb0 <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     b8e:	24 2f       	mov	r18, r20
     b90:	96 2f       	mov	r25, r22
     b92:	68 2f       	mov	r22, r24
		gfx_coord_t			page		= y / GFX_MONO_LCD_PIXELS_PER_BYTE;
		gfx_mono_color_t	pixel_mask	= 1 << (y % GFX_MONO_LCD_PIXELS_PER_BYTE);
     b94:	89 2f       	mov	r24, r25
     b96:	87 70       	andi	r24, 0x07	; 7
     b98:	41 e0       	ldi	r20, 0x01	; 1
     b9a:	50 e0       	ldi	r21, 0x00	; 0
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <gfx_mono_lcd_uc1608_draw_pixel+0x1c>
     b9e:	44 0f       	add	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	8a 95       	dec	r24
     ba4:	e2 f7       	brpl	.-8      	; 0xb9e <gfx_mono_lcd_uc1608_draw_pixel+0x18>

		gfx_mono_lcd_uc1608_mask_byte(page, x, pixel_mask, color);
     ba6:	89 2f       	mov	r24, r25
     ba8:	86 95       	lsr	r24
     baa:	86 95       	lsr	r24
     bac:	86 95       	lsr	r24
     bae:	c8 cf       	rjmp	.-112    	; 0xb40 <gfx_mono_lcd_uc1608_mask_byte>
     bb0:	08 95       	ret

00000bb2 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     bb2:	9f 92       	push	r9
     bb4:	af 92       	push	r10
     bb6:	bf 92       	push	r11
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	c8 2f       	mov	r28, r24
     bca:	e6 2e       	mov	r14, r22
     bcc:	b4 2e       	mov	r11, r20
     bce:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     bd0:	00 e0       	ldi	r16, 0x00	; 0
     bd2:	f9 01       	movw	r30, r18
     bd4:	24 81       	ldd	r18, Z+4	; 0x04
     bd6:	43 81       	ldd	r20, Z+3	; 0x03
     bd8:	6b 2d       	mov	r22, r11
     bda:	8e 2d       	mov	r24, r14
     bdc:	ec dd       	rcall	.-1064   	; 0x7b6 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     bde:	f6 01       	movw	r30, r12
     be0:	80 81       	ld	r24, Z
     be2:	81 11       	cpse	r24, r1
     be4:	3a c0       	rjmp	.+116    	; 0xc5a <gfx_mono_draw_char+0xa8>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     be6:	83 81       	ldd	r24, Z+3	; 0x03
     be8:	28 2f       	mov	r18, r24
     bea:	26 95       	lsr	r18
     bec:	26 95       	lsr	r18
     bee:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     bf0:	87 70       	andi	r24, 0x07	; 7
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <gfx_mono_draw_char+0x44>
		char_row_size++;
     bf4:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     bf6:	f6 01       	movw	r30, r12
     bf8:	a4 80       	ldd	r10, Z+4	; 0x04
     bfa:	2a 9d       	mul	r18, r10
     bfc:	90 01       	movw	r18, r0
     bfe:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
     c00:	8c 2f       	mov	r24, r28
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	45 81       	ldd	r20, Z+5	; 0x05
     c06:	84 1b       	sub	r24, r20
     c08:	91 09       	sbc	r25, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
     c0a:	28 9f       	mul	r18, r24
     c0c:	a0 01       	movw	r20, r0
     c0e:	29 9f       	mul	r18, r25
     c10:	50 0d       	add	r21, r0
     c12:	38 9f       	mul	r19, r24
     c14:	50 0d       	add	r21, r0
     c16:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     c18:	01 81       	ldd	r16, Z+1	; 0x01
     c1a:	12 81       	ldd	r17, Z+2	; 0x02
     c1c:	04 0f       	add	r16, r20
     c1e:	15 1f       	adc	r17, r21

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     c20:	91 2c       	mov	r9, r1
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     c22:	f6 01       	movw	r30, r12
     c24:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     c26:	ff 20       	and	r15, r15
     c28:	a1 f0       	breq	.+40     	; 0xc52 <gfx_mono_draw_char+0xa0>
     c2a:	d9 2d       	mov	r29, r9
     c2c:	c9 2d       	mov	r28, r9
     c2e:	8c 2f       	mov	r24, r28
     c30:	8e 0d       	add	r24, r14
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     c32:	9c 2f       	mov	r25, r28
     c34:	97 70       	andi	r25, 0x07	; 7
     c36:	21 f4       	brne	.+8      	; 0xc40 <gfx_mono_draw_char+0x8e>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     c38:	f8 01       	movw	r30, r16
     c3a:	d4 91       	lpm	r29, Z
				glyph_data++;
     c3c:	0f 5f       	subi	r16, 0xFF	; 255
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     c40:	dd 23       	and	r29, r29
     c42:	1c f4       	brge	.+6      	; 0xc4a <gfx_mono_draw_char+0x98>
				gfx_mono_draw_pixel(inc_x, inc_y,
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	6b 2d       	mov	r22, r11
     c48:	9e df       	rcall	.-196    	; 0xb86 <gfx_mono_lcd_uc1608_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     c4a:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     c4c:	cf 5f       	subi	r28, 0xFF	; 255
     c4e:	cf 11       	cpse	r28, r15
     c50:	ee cf       	rjmp	.-36     	; 0xc2e <gfx_mono_draw_char+0x7c>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     c52:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     c54:	aa 94       	dec	r10
	} while (rows_left > 0);
     c56:	a1 10       	cpse	r10, r1
     c58:	e4 cf       	rjmp	.-56     	; 0xc22 <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	bf 90       	pop	r11
     c6c:	af 90       	pop	r10
     c6e:	9f 90       	pop	r9
     c70:	08 95       	ret

00000c72 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	04 2f       	mov	r16, r20
     c82:	79 01       	movw	r14, r18
     c84:	ec 01       	movw	r28, r24
     c86:	16 2f       	mov	r17, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     c88:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     c8a:	89 91       	ld	r24, Y+
     c8c:	8a 30       	cpi	r24, 0x0A	; 10
     c8e:	31 f4       	brne	.+12     	; 0xc9c <gfx_mono_draw_string+0x2a>
     c90:	f7 01       	movw	r30, r14
     c92:	84 81       	ldd	r24, Z+4	; 0x04
     c94:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
     c96:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     c98:	1d 2d       	mov	r17, r13
     c9a:	09 c0       	rjmp	.+18     	; 0xcae <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     c9c:	8d 30       	cpi	r24, 0x0D	; 13
     c9e:	39 f0       	breq	.+14     	; 0xcae <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     ca0:	97 01       	movw	r18, r14
     ca2:	40 2f       	mov	r20, r16
     ca4:	61 2f       	mov	r22, r17
     ca6:	85 df       	rcall	.-246    	; 0xbb2 <gfx_mono_draw_char>
			x += font->width;
     ca8:	f7 01       	movw	r30, r14
     caa:	83 81       	ldd	r24, Z+3	; 0x03
     cac:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     cae:	88 81       	ld	r24, Y
     cb0:	81 11       	cpse	r24, r1
     cb2:	eb cf       	rjmp	.-42     	; 0xc8a <gfx_mono_draw_string+0x18>
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	08 95       	ret

00000cc4 <asm_break>:

/* Helper functions */

void asm_break(void)
{
	__asm__ __volatile__ ("break" ::: "memory");
     cc4:	98 95       	break
	nop();
     cc6:	00 00       	nop
     cc8:	08 95       	ret

00000cca <__vector_1>:
	asm_break();
}


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	11 24       	eor	r1, r1
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     cec:	eb df       	rcall	.-42     	; 0xcc4 <asm_break>


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
	s_bad_interrupt();
}
     cee:	ff 91       	pop	r31
     cf0:	ef 91       	pop	r30
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	9f 91       	pop	r25
     cf8:	8f 91       	pop	r24
     cfa:	7f 91       	pop	r23
     cfc:	6f 91       	pop	r22
     cfe:	5f 91       	pop	r21
     d00:	4f 91       	pop	r20
     d02:	3f 91       	pop	r19
     d04:	2f 91       	pop	r18
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <__vector_2>:

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	2f 93       	push	r18
     d1c:	3f 93       	push	r19
     d1e:	4f 93       	push	r20
     d20:	5f 93       	push	r21
     d22:	6f 93       	push	r22
     d24:	7f 93       	push	r23
     d26:	8f 93       	push	r24
     d28:	9f 93       	push	r25
     d2a:	af 93       	push	r26
     d2c:	bf 93       	push	r27
     d2e:	ef 93       	push	r30
     d30:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     d32:	c8 df       	rcall	.-112    	; 0xcc4 <asm_break>
}

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
	s_bad_interrupt();
}
     d34:	ff 91       	pop	r31
     d36:	ef 91       	pop	r30
     d38:	bf 91       	pop	r27
     d3a:	af 91       	pop	r26
     d3c:	9f 91       	pop	r25
     d3e:	8f 91       	pop	r24
     d40:	7f 91       	pop	r23
     d42:	6f 91       	pop	r22
     d44:	5f 91       	pop	r21
     d46:	4f 91       	pop	r20
     d48:	3f 91       	pop	r19
     d4a:	2f 91       	pop	r18
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <__vector_3>:

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
     d56:	1f 92       	push	r1
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	0f 92       	push	r0
     d5e:	11 24       	eor	r1, r1
     d60:	2f 93       	push	r18
     d62:	3f 93       	push	r19
     d64:	4f 93       	push	r20
     d66:	5f 93       	push	r21
     d68:	6f 93       	push	r22
     d6a:	7f 93       	push	r23
     d6c:	8f 93       	push	r24
     d6e:	9f 93       	push	r25
     d70:	af 93       	push	r26
     d72:	bf 93       	push	r27
     d74:	ef 93       	push	r30
     d76:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     d78:	a5 df       	rcall	.-182    	; 0xcc4 <asm_break>
}

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
	s_bad_interrupt();
}
     d7a:	ff 91       	pop	r31
     d7c:	ef 91       	pop	r30
     d7e:	bf 91       	pop	r27
     d80:	af 91       	pop	r26
     d82:	9f 91       	pop	r25
     d84:	8f 91       	pop	r24
     d86:	7f 91       	pop	r23
     d88:	6f 91       	pop	r22
     d8a:	5f 91       	pop	r21
     d8c:	4f 91       	pop	r20
     d8e:	3f 91       	pop	r19
     d90:	2f 91       	pop	r18
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	0f 90       	pop	r0
     d98:	1f 90       	pop	r1
     d9a:	18 95       	reti

00000d9c <__vector_4>:

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	11 24       	eor	r1, r1
     da6:	2f 93       	push	r18
     da8:	3f 93       	push	r19
     daa:	4f 93       	push	r20
     dac:	5f 93       	push	r21
     dae:	6f 93       	push	r22
     db0:	7f 93       	push	r23
     db2:	8f 93       	push	r24
     db4:	9f 93       	push	r25
     db6:	af 93       	push	r26
     db8:	bf 93       	push	r27
     dba:	ef 93       	push	r30
     dbc:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     dbe:	82 df       	rcall	.-252    	; 0xcc4 <asm_break>
}

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
	s_bad_interrupt();
}
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	0f 90       	pop	r0
     dde:	1f 90       	pop	r1
     de0:	18 95       	reti

00000de2 <__vector_5>:

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
     de2:	1f 92       	push	r1
     de4:	0f 92       	push	r0
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	0f 92       	push	r0
     dea:	11 24       	eor	r1, r1
     dec:	2f 93       	push	r18
     dee:	3f 93       	push	r19
     df0:	4f 93       	push	r20
     df2:	5f 93       	push	r21
     df4:	6f 93       	push	r22
     df6:	7f 93       	push	r23
     df8:	8f 93       	push	r24
     dfa:	9f 93       	push	r25
     dfc:	af 93       	push	r26
     dfe:	bf 93       	push	r27
     e00:	ef 93       	push	r30
     e02:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     e04:	5f df       	rcall	.-322    	; 0xcc4 <asm_break>
}

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
	s_bad_interrupt();
}
     e06:	ff 91       	pop	r31
     e08:	ef 91       	pop	r30
     e0a:	bf 91       	pop	r27
     e0c:	af 91       	pop	r26
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	7f 91       	pop	r23
     e14:	6f 91       	pop	r22
     e16:	5f 91       	pop	r21
     e18:	4f 91       	pop	r20
     e1a:	3f 91       	pop	r19
     e1c:	2f 91       	pop	r18
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti

00000e28 <__vector_6>:

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     e4a:	3c df       	rcall	.-392    	; 0xcc4 <asm_break>
}

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
	s_bad_interrupt();
}
     e4c:	ff 91       	pop	r31
     e4e:	ef 91       	pop	r30
     e50:	bf 91       	pop	r27
     e52:	af 91       	pop	r26
     e54:	9f 91       	pop	r25
     e56:	8f 91       	pop	r24
     e58:	7f 91       	pop	r23
     e5a:	6f 91       	pop	r22
     e5c:	5f 91       	pop	r21
     e5e:	4f 91       	pop	r20
     e60:	3f 91       	pop	r19
     e62:	2f 91       	pop	r18
     e64:	0f 90       	pop	r0
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	0f 90       	pop	r0
     e6a:	1f 90       	pop	r1
     e6c:	18 95       	reti

00000e6e <__vector_7>:

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
     e6e:	1f 92       	push	r1
     e70:	0f 92       	push	r0
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	0f 92       	push	r0
     e76:	11 24       	eor	r1, r1
     e78:	2f 93       	push	r18
     e7a:	3f 93       	push	r19
     e7c:	4f 93       	push	r20
     e7e:	5f 93       	push	r21
     e80:	6f 93       	push	r22
     e82:	7f 93       	push	r23
     e84:	8f 93       	push	r24
     e86:	9f 93       	push	r25
     e88:	af 93       	push	r26
     e8a:	bf 93       	push	r27
     e8c:	ef 93       	push	r30
     e8e:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     e90:	19 df       	rcall	.-462    	; 0xcc4 <asm_break>
}

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
	s_bad_interrupt();
}
     e92:	ff 91       	pop	r31
     e94:	ef 91       	pop	r30
     e96:	bf 91       	pop	r27
     e98:	af 91       	pop	r26
     e9a:	9f 91       	pop	r25
     e9c:	8f 91       	pop	r24
     e9e:	7f 91       	pop	r23
     ea0:	6f 91       	pop	r22
     ea2:	5f 91       	pop	r21
     ea4:	4f 91       	pop	r20
     ea6:	3f 91       	pop	r19
     ea8:	2f 91       	pop	r18
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	0f 90       	pop	r0
     eb0:	1f 90       	pop	r1
     eb2:	18 95       	reti

00000eb4 <__vector_8>:

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	0f 92       	push	r0
     ebc:	11 24       	eor	r1, r1
     ebe:	2f 93       	push	r18
     ec0:	3f 93       	push	r19
     ec2:	4f 93       	push	r20
     ec4:	5f 93       	push	r21
     ec6:	6f 93       	push	r22
     ec8:	7f 93       	push	r23
     eca:	8f 93       	push	r24
     ecc:	9f 93       	push	r25
     ece:	af 93       	push	r26
     ed0:	bf 93       	push	r27
     ed2:	ef 93       	push	r30
     ed4:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     ed6:	f6 de       	rcall	.-532    	; 0xcc4 <asm_break>
}

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
	s_bad_interrupt();
}
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <__vector_9>:

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     f1c:	d3 de       	rcall	.-602    	; 0xcc4 <asm_break>
}

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
	s_bad_interrupt();
}
     f1e:	ff 91       	pop	r31
     f20:	ef 91       	pop	r30
     f22:	bf 91       	pop	r27
     f24:	af 91       	pop	r26
     f26:	9f 91       	pop	r25
     f28:	8f 91       	pop	r24
     f2a:	7f 91       	pop	r23
     f2c:	6f 91       	pop	r22
     f2e:	5f 91       	pop	r21
     f30:	4f 91       	pop	r20
     f32:	3f 91       	pop	r19
     f34:	2f 91       	pop	r18
     f36:	0f 90       	pop	r0
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	0f 90       	pop	r0
     f3c:	1f 90       	pop	r1
     f3e:	18 95       	reti

00000f40 <__vector_10>:

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
     f40:	1f 92       	push	r1
     f42:	0f 92       	push	r0
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	0f 92       	push	r0
     f48:	11 24       	eor	r1, r1
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     f62:	b0 de       	rcall	.-672    	; 0xcc4 <asm_break>
}

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
	s_bad_interrupt();
}
     f64:	ff 91       	pop	r31
     f66:	ef 91       	pop	r30
     f68:	bf 91       	pop	r27
     f6a:	af 91       	pop	r26
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	7f 91       	pop	r23
     f72:	6f 91       	pop	r22
     f74:	5f 91       	pop	r21
     f76:	4f 91       	pop	r20
     f78:	3f 91       	pop	r19
     f7a:	2f 91       	pop	r18
     f7c:	0f 90       	pop	r0
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	0f 90       	pop	r0
     f82:	1f 90       	pop	r1
     f84:	18 95       	reti

00000f86 <__vector_11>:

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
     f86:	1f 92       	push	r1
     f88:	0f 92       	push	r0
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	0f 92       	push	r0
     f8e:	11 24       	eor	r1, r1
     f90:	2f 93       	push	r18
     f92:	3f 93       	push	r19
     f94:	4f 93       	push	r20
     f96:	5f 93       	push	r21
     f98:	6f 93       	push	r22
     f9a:	7f 93       	push	r23
     f9c:	8f 93       	push	r24
     f9e:	9f 93       	push	r25
     fa0:	af 93       	push	r26
     fa2:	bf 93       	push	r27
     fa4:	ef 93       	push	r30
     fa6:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     fa8:	8d de       	rcall	.-742    	; 0xcc4 <asm_break>
}

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
	s_bad_interrupt();
}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <__vector_12>:

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     fee:	6a de       	rcall	.-812    	; 0xcc4 <asm_break>
}

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
	s_bad_interrupt();
}
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <__vector_13>:

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
    1012:	1f 92       	push	r1
    1014:	0f 92       	push	r0
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	0f 92       	push	r0
    101a:	11 24       	eor	r1, r1
    101c:	2f 93       	push	r18
    101e:	3f 93       	push	r19
    1020:	4f 93       	push	r20
    1022:	5f 93       	push	r21
    1024:	6f 93       	push	r22
    1026:	7f 93       	push	r23
    1028:	8f 93       	push	r24
    102a:	9f 93       	push	r25
    102c:	af 93       	push	r26
    102e:	bf 93       	push	r27
    1030:	ef 93       	push	r30
    1032:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1034:	47 de       	rcall	.-882    	; 0xcc4 <asm_break>
}

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
	s_bad_interrupt();
}
    1036:	ff 91       	pop	r31
    1038:	ef 91       	pop	r30
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	0f 90       	pop	r0
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	0f 90       	pop	r0
    1054:	1f 90       	pop	r1
    1056:	18 95       	reti

00001058 <__vector_14>:

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
    1058:	1f 92       	push	r1
    105a:	0f 92       	push	r0
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	0f 92       	push	r0
    1060:	11 24       	eor	r1, r1
    1062:	2f 93       	push	r18
    1064:	3f 93       	push	r19
    1066:	4f 93       	push	r20
    1068:	5f 93       	push	r21
    106a:	6f 93       	push	r22
    106c:	7f 93       	push	r23
    106e:	8f 93       	push	r24
    1070:	9f 93       	push	r25
    1072:	af 93       	push	r26
    1074:	bf 93       	push	r27
    1076:	ef 93       	push	r30
    1078:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    107a:	24 de       	rcall	.-952    	; 0xcc4 <asm_break>
}

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
	s_bad_interrupt();
}
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <__vector_15>:

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	11 24       	eor	r1, r1
    10a8:	2f 93       	push	r18
    10aa:	3f 93       	push	r19
    10ac:	4f 93       	push	r20
    10ae:	5f 93       	push	r21
    10b0:	6f 93       	push	r22
    10b2:	7f 93       	push	r23
    10b4:	8f 93       	push	r24
    10b6:	9f 93       	push	r25
    10b8:	af 93       	push	r26
    10ba:	bf 93       	push	r27
    10bc:	ef 93       	push	r30
    10be:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    10c0:	01 de       	rcall	.-1022   	; 0xcc4 <asm_break>
}

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
	s_bad_interrupt();
}
    10c2:	ff 91       	pop	r31
    10c4:	ef 91       	pop	r30
    10c6:	bf 91       	pop	r27
    10c8:	af 91       	pop	r26
    10ca:	9f 91       	pop	r25
    10cc:	8f 91       	pop	r24
    10ce:	7f 91       	pop	r23
    10d0:	6f 91       	pop	r22
    10d2:	5f 91       	pop	r21
    10d4:	4f 91       	pop	r20
    10d6:	3f 91       	pop	r19
    10d8:	2f 91       	pop	r18
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f 90       	pop	r0
    10e0:	1f 90       	pop	r1
    10e2:	18 95       	reti

000010e4 <__vector_16>:

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	6f 93       	push	r22
    10f8:	7f 93       	push	r23
    10fa:	8f 93       	push	r24
    10fc:	9f 93       	push	r25
    10fe:	af 93       	push	r26
    1100:	bf 93       	push	r27
    1102:	ef 93       	push	r30
    1104:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1106:	de dd       	rcall	.-1092   	; 0xcc4 <asm_break>
}

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
	s_bad_interrupt();
}
    1108:	ff 91       	pop	r31
    110a:	ef 91       	pop	r30
    110c:	bf 91       	pop	r27
    110e:	af 91       	pop	r26
    1110:	9f 91       	pop	r25
    1112:	8f 91       	pop	r24
    1114:	7f 91       	pop	r23
    1116:	6f 91       	pop	r22
    1118:	5f 91       	pop	r21
    111a:	4f 91       	pop	r20
    111c:	3f 91       	pop	r19
    111e:	2f 91       	pop	r18
    1120:	0f 90       	pop	r0
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	0f 90       	pop	r0
    1126:	1f 90       	pop	r1
    1128:	18 95       	reti

0000112a <__vector_17>:

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
    112a:	1f 92       	push	r1
    112c:	0f 92       	push	r0
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	0f 92       	push	r0
    1132:	11 24       	eor	r1, r1
    1134:	2f 93       	push	r18
    1136:	3f 93       	push	r19
    1138:	4f 93       	push	r20
    113a:	5f 93       	push	r21
    113c:	6f 93       	push	r22
    113e:	7f 93       	push	r23
    1140:	8f 93       	push	r24
    1142:	9f 93       	push	r25
    1144:	af 93       	push	r26
    1146:	bf 93       	push	r27
    1148:	ef 93       	push	r30
    114a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    114c:	bb dd       	rcall	.-1162   	; 0xcc4 <asm_break>
}

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
	s_bad_interrupt();
}
    114e:	ff 91       	pop	r31
    1150:	ef 91       	pop	r30
    1152:	bf 91       	pop	r27
    1154:	af 91       	pop	r26
    1156:	9f 91       	pop	r25
    1158:	8f 91       	pop	r24
    115a:	7f 91       	pop	r23
    115c:	6f 91       	pop	r22
    115e:	5f 91       	pop	r21
    1160:	4f 91       	pop	r20
    1162:	3f 91       	pop	r19
    1164:	2f 91       	pop	r18
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	0f 90       	pop	r0
    116c:	1f 90       	pop	r1
    116e:	18 95       	reti

00001170 <__vector_18>:

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
    1170:	1f 92       	push	r1
    1172:	0f 92       	push	r0
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	0f 92       	push	r0
    1178:	11 24       	eor	r1, r1
    117a:	2f 93       	push	r18
    117c:	3f 93       	push	r19
    117e:	4f 93       	push	r20
    1180:	5f 93       	push	r21
    1182:	6f 93       	push	r22
    1184:	7f 93       	push	r23
    1186:	8f 93       	push	r24
    1188:	9f 93       	push	r25
    118a:	af 93       	push	r26
    118c:	bf 93       	push	r27
    118e:	ef 93       	push	r30
    1190:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1192:	98 dd       	rcall	.-1232   	; 0xcc4 <asm_break>
}

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
	s_bad_interrupt();
}
    1194:	ff 91       	pop	r31
    1196:	ef 91       	pop	r30
    1198:	bf 91       	pop	r27
    119a:	af 91       	pop	r26
    119c:	9f 91       	pop	r25
    119e:	8f 91       	pop	r24
    11a0:	7f 91       	pop	r23
    11a2:	6f 91       	pop	r22
    11a4:	5f 91       	pop	r21
    11a6:	4f 91       	pop	r20
    11a8:	3f 91       	pop	r19
    11aa:	2f 91       	pop	r18
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <__vector_19>:

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
    11b6:	1f 92       	push	r1
    11b8:	0f 92       	push	r0
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	2f 93       	push	r18
    11c2:	3f 93       	push	r19
    11c4:	4f 93       	push	r20
    11c6:	5f 93       	push	r21
    11c8:	6f 93       	push	r22
    11ca:	7f 93       	push	r23
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	af 93       	push	r26
    11d2:	bf 93       	push	r27
    11d4:	ef 93       	push	r30
    11d6:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    11d8:	75 dd       	rcall	.-1302   	; 0xcc4 <asm_break>
}

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
	s_bad_interrupt();
}
    11da:	ff 91       	pop	r31
    11dc:	ef 91       	pop	r30
    11de:	bf 91       	pop	r27
    11e0:	af 91       	pop	r26
    11e2:	9f 91       	pop	r25
    11e4:	8f 91       	pop	r24
    11e6:	7f 91       	pop	r23
    11e8:	6f 91       	pop	r22
    11ea:	5f 91       	pop	r21
    11ec:	4f 91       	pop	r20
    11ee:	3f 91       	pop	r19
    11f0:	2f 91       	pop	r18
    11f2:	0f 90       	pop	r0
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	0f 90       	pop	r0
    11f8:	1f 90       	pop	r1
    11fa:	18 95       	reti

000011fc <__vector_20>:

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
    11fc:	1f 92       	push	r1
    11fe:	0f 92       	push	r0
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	0f 92       	push	r0
    1204:	11 24       	eor	r1, r1
    1206:	2f 93       	push	r18
    1208:	3f 93       	push	r19
    120a:	4f 93       	push	r20
    120c:	5f 93       	push	r21
    120e:	6f 93       	push	r22
    1210:	7f 93       	push	r23
    1212:	8f 93       	push	r24
    1214:	9f 93       	push	r25
    1216:	af 93       	push	r26
    1218:	bf 93       	push	r27
    121a:	ef 93       	push	r30
    121c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    121e:	52 dd       	rcall	.-1372   	; 0xcc4 <asm_break>
}

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
	s_bad_interrupt();
}
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	bf 91       	pop	r27
    1226:	af 91       	pop	r26
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	7f 91       	pop	r23
    122e:	6f 91       	pop	r22
    1230:	5f 91       	pop	r21
    1232:	4f 91       	pop	r20
    1234:	3f 91       	pop	r19
    1236:	2f 91       	pop	r18
    1238:	0f 90       	pop	r0
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	0f 90       	pop	r0
    123e:	1f 90       	pop	r1
    1240:	18 95       	reti

00001242 <__vector_21__bottom>:
	__vector_21__bottom(reason, adc_val);
}

/* do not static this function to avoid code inlining that would inherit many push operations in the critical section */
void __vector_21__bottom(uint8_t reason, uint16_t adc_val)
{
    1242:	cf 92       	push	r12
    1244:	df 92       	push	r13
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	eb 01       	movw	r28, r22
	/* Low pass filtering and enhancing the data depth */

	if (reason == ADC_STATE_VLD_LDR) {
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	51 f5       	brne	.+84     	; 0x12a8 <__vector_21__bottom+0x66>
		float calc = 0.90f * g_adc_ldr		+ 0.10f * adc_val;
    1254:	26 e6       	ldi	r18, 0x66	; 102
    1256:	36 e6       	ldi	r19, 0x66	; 102
    1258:	46 e6       	ldi	r20, 0x66	; 102
    125a:	5f e3       	ldi	r21, 0x3F	; 63
    125c:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <g_adc_ldr>
    1260:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <g_adc_ldr+0x1>
    1264:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_adc_ldr+0x2>
    1268:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_adc_ldr+0x3>
    126c:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3>
    1270:	6b 01       	movw	r12, r22
    1272:	7c 01       	movw	r14, r24
    1274:	be 01       	movw	r22, r28
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	8e d7       	rcall	.+3868   	; 0x2198 <__floatunsisf>
    127c:	2d ec       	ldi	r18, 0xCD	; 205
    127e:	3c ec       	ldi	r19, 0xCC	; 204
    1280:	4c ec       	ldi	r20, 0xCC	; 204
    1282:	5d e3       	ldi	r21, 0x3D	; 61
    1284:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3>
    1288:	9b 01       	movw	r18, r22
    128a:	ac 01       	movw	r20, r24
    128c:	c7 01       	movw	r24, r14
    128e:	b6 01       	movw	r22, r12
    1290:	82 d6       	rcall	.+3332   	; 0x1f96 <__addsf3>

		cli();
    1292:	f8 94       	cli
		g_adc_ldr  = calc;
    1294:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <g_adc_ldr>
    1298:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <g_adc_ldr+0x1>
    129c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <g_adc_ldr+0x2>
    12a0:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <g_adc_ldr+0x3>
		sei();
    12a4:	78 94       	sei
    12a6:	2b c0       	rjmp	.+86     	; 0x12fe <__vector_21__bottom+0xbc>

	} else if (reason == ADC_STATE_VLD_TEMP) {
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	49 f5       	brne	.+82     	; 0x12fe <__vector_21__bottom+0xbc>
		float calc = 0.97f * g_adc_temp	+ 0.03f * adc_val;
    12ac:	2c ee       	ldi	r18, 0xEC	; 236
    12ae:	31 e5       	ldi	r19, 0x51	; 81
    12b0:	48 e7       	ldi	r20, 0x78	; 120
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <g_adc_temp>
    12b8:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <g_adc_temp+0x1>
    12bc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <g_adc_temp+0x2>
    12c0:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <g_adc_temp+0x3>
    12c4:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3>
    12c8:	6b 01       	movw	r12, r22
    12ca:	7c 01       	movw	r14, r24
    12cc:	be 01       	movw	r22, r28
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	62 d7       	rcall	.+3780   	; 0x2198 <__floatunsisf>
    12d4:	2f e8       	ldi	r18, 0x8F	; 143
    12d6:	32 ec       	ldi	r19, 0xC2	; 194
    12d8:	45 ef       	ldi	r20, 0xF5	; 245
    12da:	5c e3       	ldi	r21, 0x3C	; 60
    12dc:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3>
    12e0:	9b 01       	movw	r18, r22
    12e2:	ac 01       	movw	r20, r24
    12e4:	c7 01       	movw	r24, r14
    12e6:	b6 01       	movw	r22, r12
    12e8:	56 d6       	rcall	.+3244   	; 0x1f96 <__addsf3>

		cli();
    12ea:	f8 94       	cli
		g_adc_temp = calc;
    12ec:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <g_adc_temp>
    12f0:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <g_adc_temp+0x1>
    12f4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <g_adc_temp+0x2>
    12f8:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <g_adc_temp+0x3>
		sei();
    12fc:	78 94       	sei
	}
}
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	df 90       	pop	r13
    1308:	cf 90       	pop	r12
    130a:	08 95       	ret

0000130c <__vector_21>:
{	/* USART, TX - Complete */
	s_bad_interrupt();
}

ISR(__vector_21, ISR_BLOCK)
{	/* ADC */
    130c:	1f 92       	push	r1
    130e:	0f 92       	push	r0
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	0f 92       	push	r0
    1314:	11 24       	eor	r1, r1
    1316:	2f 93       	push	r18
    1318:	3f 93       	push	r19
    131a:	4f 93       	push	r20
    131c:	5f 93       	push	r21
    131e:	6f 93       	push	r22
    1320:	7f 93       	push	r23
    1322:	8f 93       	push	r24
    1324:	9f 93       	push	r25
    1326:	af 93       	push	r26
    1328:	bf 93       	push	r27
    132a:	ef 93       	push	r30
    132c:	ff 93       	push	r31
	uint16_t adc_val;
	uint8_t  reason = g_adc_state;
    132e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <g_adc_state>

	/* CLI part */
	adc_val  = ADCL;
    1332:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	adc_val |= ADCH << 8;
    1336:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	79 2b       	or	r23, r25

	switch (g_adc_state) {
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	41 f0       	breq	.+16     	; 0x1352 <__vector_21+0x46>
    1342:	18 f0       	brcs	.+6      	; 0x134a <__vector_21+0x3e>
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	61 f0       	breq	.+24     	; 0x1360 <__vector_21+0x54>
    1348:	0f c0       	rjmp	.+30     	; 0x1368 <__vector_21+0x5c>
		case ADC_STATE_PRE_LDR:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_LDR;
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <g_adc_state>
		break;
    1350:	10 c0       	rjmp	.+32     	; 0x1372 <__vector_21+0x66>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    1352:	98 ec       	ldi	r25, 0xC8	; 200
    1354:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		case ADC_STATE_VLD_LDR:
		adc_set_admux(ADC_MUX_TEMPSENSE | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_TEMP;
    1358:	92 e0       	ldi	r25, 0x02	; 2
    135a:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <g_adc_state>
		break;
    135e:	09 c0       	rjmp	.+18     	; 0x1372 <__vector_21+0x66>

		case ADC_STATE_PRE_TEMP:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_TEMP;
    1360:	93 e0       	ldi	r25, 0x03	; 3
    1362:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <g_adc_state>
		break;
    1366:	05 c0       	rjmp	.+10     	; 0x1372 <__vector_21+0x66>
    1368:	90 ec       	ldi	r25, 0xC0	; 192
    136a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		case ADC_STATE_VLD_TEMP:
		// fall-through

		default:
		adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_LDR;
    136e:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <g_adc_state>
	}

	/* SEI part */
	sei();
    1372:	78 94       	sei
	__vector_21__bottom(reason, adc_val);
    1374:	66 df       	rcall	.-308    	; 0x1242 <__vector_21__bottom>
}
    1376:	ff 91       	pop	r31
    1378:	ef 91       	pop	r30
    137a:	bf 91       	pop	r27
    137c:	af 91       	pop	r26
    137e:	9f 91       	pop	r25
    1380:	8f 91       	pop	r24
    1382:	7f 91       	pop	r23
    1384:	6f 91       	pop	r22
    1386:	5f 91       	pop	r21
    1388:	4f 91       	pop	r20
    138a:	3f 91       	pop	r19
    138c:	2f 91       	pop	r18
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	0f 90       	pop	r0
    1394:	1f 90       	pop	r1
    1396:	18 95       	reti

00001398 <__vector_22>:
		sei();
	}
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
    1398:	1f 92       	push	r1
    139a:	0f 92       	push	r0
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	0f 92       	push	r0
    13a0:	11 24       	eor	r1, r1
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	4f 93       	push	r20
    13a8:	5f 93       	push	r21
    13aa:	6f 93       	push	r22
    13ac:	7f 93       	push	r23
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	af 93       	push	r26
    13b4:	bf 93       	push	r27
    13b6:	ef 93       	push	r30
    13b8:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    13ba:	84 dc       	rcall	.-1784   	; 0xcc4 <asm_break>
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
	s_bad_interrupt();
}
    13bc:	ff 91       	pop	r31
    13be:	ef 91       	pop	r30
    13c0:	bf 91       	pop	r27
    13c2:	af 91       	pop	r26
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	7f 91       	pop	r23
    13ca:	6f 91       	pop	r22
    13cc:	5f 91       	pop	r21
    13ce:	4f 91       	pop	r20
    13d0:	3f 91       	pop	r19
    13d2:	2f 91       	pop	r18
    13d4:	0f 90       	pop	r0
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	0f 90       	pop	r0
    13da:	1f 90       	pop	r1
    13dc:	18 95       	reti

000013de <__vector_23>:

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
    13de:	1f 92       	push	r1
    13e0:	0f 92       	push	r0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
    13e8:	2f 93       	push	r18
    13ea:	3f 93       	push	r19
    13ec:	4f 93       	push	r20
    13ee:	5f 93       	push	r21
    13f0:	6f 93       	push	r22
    13f2:	7f 93       	push	r23
    13f4:	8f 93       	push	r24
    13f6:	9f 93       	push	r25
    13f8:	af 93       	push	r26
    13fa:	bf 93       	push	r27
    13fc:	ef 93       	push	r30
    13fe:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1400:	61 dc       	rcall	.-1854   	; 0xcc4 <asm_break>
}

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
	s_bad_interrupt();
}
    1402:	ff 91       	pop	r31
    1404:	ef 91       	pop	r30
    1406:	bf 91       	pop	r27
    1408:	af 91       	pop	r26
    140a:	9f 91       	pop	r25
    140c:	8f 91       	pop	r24
    140e:	7f 91       	pop	r23
    1410:	6f 91       	pop	r22
    1412:	5f 91       	pop	r21
    1414:	4f 91       	pop	r20
    1416:	3f 91       	pop	r19
    1418:	2f 91       	pop	r18
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	0f 90       	pop	r0
    1420:	1f 90       	pop	r1
    1422:	18 95       	reti

00001424 <__vector_24>:

ISR(__vector_24, ISR_BLOCK)
{	/* TWI */
    1424:	1f 92       	push	r1
    1426:	0f 92       	push	r0
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	0f 92       	push	r0
    142c:	11 24       	eor	r1, r1
    142e:	2f 93       	push	r18
    1430:	3f 93       	push	r19
    1432:	4f 93       	push	r20
    1434:	5f 93       	push	r21
    1436:	6f 93       	push	r22
    1438:	7f 93       	push	r23
    143a:	8f 93       	push	r24
    143c:	9f 93       	push	r25
    143e:	af 93       	push	r26
    1440:	bf 93       	push	r27
    1442:	ef 93       	push	r30
    1444:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b1111 << TWS4);
    1446:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	uint8_t twd = TWDR;
    144a:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	/* SEI part */
	sei();
    144e:	78 94       	sei
	__vector_24__bottom(tws, twd);
    1450:	80 7f       	andi	r24, 0xF0	; 240
    1452:	49 d3       	rcall	.+1682   	; 0x1ae6 <__vector_24__bottom>
	TWCR = _BV(TWINT);
    1454:	80 e8       	ldi	r24, 0x80	; 128
    1456:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    145a:	ff 91       	pop	r31
    145c:	ef 91       	pop	r30
    145e:	bf 91       	pop	r27
    1460:	af 91       	pop	r26
    1462:	9f 91       	pop	r25
    1464:	8f 91       	pop	r24
    1466:	7f 91       	pop	r23
    1468:	6f 91       	pop	r22
    146a:	5f 91       	pop	r21
    146c:	4f 91       	pop	r20
    146e:	3f 91       	pop	r19
    1470:	2f 91       	pop	r18
    1472:	0f 90       	pop	r0
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	0f 90       	pop	r0
    1478:	1f 90       	pop	r1
    147a:	18 95       	reti

0000147c <__vector_25>:

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
    147c:	1f 92       	push	r1
    147e:	0f 92       	push	r0
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	0f 92       	push	r0
    1484:	11 24       	eor	r1, r1
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    149e:	12 dc       	rcall	.-2012   	; 0xcc4 <asm_break>
}

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
	s_bad_interrupt();
}
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <lcd_bus_read_status>:
		} else if (y >= GFX_MONO_LCD_HEIGHT) {
		return (uint8_t) GFX_MONO_LCD_HEIGHT - 1;
		} else {
		return (uint8_t) y;
	}
}
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	1f 92       	push	r1
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	8f b7       	in	r24, 0x3f	; 63
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	f8 94       	cli
    14d2:	99 81       	ldd	r25, Y+1	; 0x01
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	8b b9       	out	0x0b, r24	; 11
    14d8:	1a b8       	out	0x0a, r1	; 10
    14da:	28 98       	cbi	0x05, 0	; 5
    14dc:	2c 9a       	sbi	0x05, 4	; 5
    14de:	2d 9a       	sbi	0x05, 5	; 5
    14e0:	00 00       	nop
    14e2:	2d 98       	cbi	0x05, 5	; 5
    14e4:	00 00       	nop
    14e6:	89 b1       	in	r24, 0x09	; 9
    14e8:	9f bf       	out	0x3f, r25	; 63
    14ea:	0f 90       	pop	r0
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	08 95       	ret

000014f2 <lcd_bus_write_cmd>:
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	1f 92       	push	r1
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	9f b7       	in	r25, 0x3f	; 63
    14fe:	99 83       	std	Y+1, r25	; 0x01
    1500:	f8 94       	cli
    1502:	99 81       	ldd	r25, Y+1	; 0x01
    1504:	8b b9       	out	0x0b, r24	; 11
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	8a b9       	out	0x0a, r24	; 10
    150a:	28 98       	cbi	0x05, 0	; 5
    150c:	2c 98       	cbi	0x05, 4	; 5
    150e:	2d 9a       	sbi	0x05, 5	; 5
    1510:	00 00       	nop
    1512:	2d 98       	cbi	0x05, 5	; 5
    1514:	9f bf       	out	0x3f, r25	; 63
    1516:	0f 90       	pop	r0
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	08 95       	ret

0000151e <lcd_bus_write_ram>:
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	1f 92       	push	r1
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	9f b7       	in	r25, 0x3f	; 63
    152a:	99 83       	std	Y+1, r25	; 0x01
    152c:	f8 94       	cli
    152e:	99 81       	ldd	r25, Y+1	; 0x01
    1530:	8b b9       	out	0x0b, r24	; 11
    1532:	8f ef       	ldi	r24, 0xFF	; 255
    1534:	8a b9       	out	0x0a, r24	; 10
    1536:	28 9a       	sbi	0x05, 0	; 5
    1538:	2c 98       	cbi	0x05, 4	; 5
    153a:	2d 9a       	sbi	0x05, 5	; 5
    153c:	00 00       	nop
    153e:	2d 98       	cbi	0x05, 5	; 5
    1540:	00 00       	nop
    1542:	9f bf       	out	0x3f, r25	; 63
    1544:	0f 90       	pop	r0
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	08 95       	ret

0000154c <lcd_bus_read_ram>:
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	1f 92       	push	r1
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	8f b7       	in	r24, 0x3f	; 63
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	f8 94       	cli
    155c:	99 81       	ldd	r25, Y+1	; 0x01
    155e:	8f ef       	ldi	r24, 0xFF	; 255
    1560:	8b b9       	out	0x0b, r24	; 11
    1562:	1a b8       	out	0x0a, r1	; 10
    1564:	28 9a       	sbi	0x05, 0	; 5
    1566:	2c 9a       	sbi	0x05, 4	; 5
    1568:	2d 9a       	sbi	0x05, 5	; 5
    156a:	00 00       	nop
    156c:	2d 98       	cbi	0x05, 5	; 5
    156e:	00 00       	nop
    1570:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <s_lcd_ram_read_nonvalid>
    1574:	88 23       	and	r24, r24
    1576:	39 f0       	breq	.+14     	; 0x1586 <lcd_bus_read_ram+0x3a>
    1578:	89 b1       	in	r24, 0x09	; 9
    157a:	2d 9a       	sbi	0x05, 5	; 5
    157c:	00 00       	nop
    157e:	2d 98       	cbi	0x05, 5	; 5
    1580:	00 00       	nop
    1582:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <s_lcd_ram_read_nonvalid>
    1586:	89 b1       	in	r24, 0x09	; 9
    1588:	9f bf       	out	0x3f, r25	; 63
    158a:	0f 90       	pop	r0
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret

00001592 <lcd_page_set>:

void lcd_page_set(uint8_t page)
{
	if ((0 <= page && page) < (GFX_MONO_LCD_PAGES)) {
		lcd_bus_write_cmd(0b10110000 | page);					// Set Page Address
    1592:	80 6b       	ori	r24, 0xB0	; 176
    1594:	ae df       	rcall	.-164    	; 0x14f2 <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <s_lcd_ram_read_nonvalid>
    159c:	08 95       	ret

0000159e <lcd_col_set>:
	}
}

void lcd_col_set(uint8_t col)
{
    159e:	cf 93       	push	r28
	if ((0 <= col) && (col < GFX_MONO_LCD_WIDTH)) {
    15a0:	80 3f       	cpi	r24, 0xF0	; 240
    15a2:	58 f4       	brcc	.+22     	; 0x15ba <lcd_col_set+0x1c>
    15a4:	c8 2f       	mov	r28, r24
		lcd_bus_write_cmd(0b00000000 | ( col       & 0x0f));	// Set Column Address LSB
    15a6:	8f 70       	andi	r24, 0x0F	; 15
    15a8:	a4 df       	rcall	.-184    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000 | ((col >> 4) & 0x0f));	// Set Column Address MSB
    15aa:	8c 2f       	mov	r24, r28
    15ac:	82 95       	swap	r24
    15ae:	8f 70       	andi	r24, 0x0F	; 15
    15b0:	80 61       	ori	r24, 0x10	; 16
    15b2:	9f df       	rcall	.-194    	; 0x14f2 <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <s_lcd_ram_read_nonvalid>
	}
}
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <lcd_cr>:

void lcd_cr(void)
{
	lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	98 df       	rcall	.-208    	; 0x14f2 <lcd_bus_write_cmd>
	lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    15c2:	80 e1       	ldi	r24, 0x10	; 16
    15c4:	96 df       	rcall	.-212    	; 0x14f2 <lcd_bus_write_cmd>

	s_lcd_ram_read_nonvalid = 1;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <s_lcd_ram_read_nonvalid>
    15cc:	08 95       	ret

000015ce <lcd_home>:
}

void lcd_home(void)
{
	lcd_bus_write_cmd(0b10110000);								// Set Page Address (0)
    15ce:	80 eb       	ldi	r24, 0xB0	; 176
    15d0:	90 df       	rcall	.-224    	; 0x14f2 <lcd_bus_write_cmd>
	lcd_cr();
    15d2:	f5 cf       	rjmp	.-22     	; 0x15be <lcd_cr>
    15d4:	08 95       	ret

000015d6 <lcd_cls>:
}

void lcd_cls(void)
{
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    15dc:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    15de:	10 ef       	ldi	r17, 0xF0	; 240

void lcd_cls(void)
{
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
    15e0:	8d 2f       	mov	r24, r29
    15e2:	80 6b       	ori	r24, 0xB0	; 176
    15e4:	86 df       	rcall	.-244    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	84 df       	rcall	.-248    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    15ea:	80 e1       	ldi	r24, 0x10	; 16
    15ec:	82 df       	rcall	.-252    	; 0x14f2 <lcd_bus_write_cmd>
    15ee:	c1 2f       	mov	r28, r17

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
			lcd_bus_write_ram(0);
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	95 df       	rcall	.-214    	; 0x151e <lcd_bus_write_ram>
    15f4:	c1 50       	subi	r28, 0x01	; 1
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
    15f6:	e1 f7       	brne	.-8      	; 0x15f0 <lcd_cls+0x1a>
}

void lcd_cls(void)
{
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    15f8:	df 5f       	subi	r29, 0xFF	; 255
    15fa:	d0 31       	cpi	r29, 0x10	; 16
    15fc:	89 f7       	brne	.-30     	; 0x15e0 <lcd_cls+0xa>
			lcd_bus_write_ram(0);
		}
	}	

	/* Set cursor to home position */
	lcd_home();
    15fe:	e7 df       	rcall	.-50     	; 0x15ce <lcd_home>
}
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	08 95       	ret

00001608 <lcd_init>:
#endif
}


uint8_t lcd_init(void)
{
    1608:	2f 92       	push	r2
    160a:	3f 92       	push	r3
    160c:	4f 92       	push	r4
    160e:	5f 92       	push	r5
    1610:	6f 92       	push	r6
    1612:	7f 92       	push	r7
    1614:	8f 92       	push	r8
    1616:	9f 92       	push	r9
    1618:	af 92       	push	r10
    161a:	bf 92       	push	r11
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	2a 97       	sbiw	r28, 0x0a	; 10
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
		return 0;													// Return OK

	} else {
		return 1;													// Return failure
	}
}
    163c:	0d b7       	in	r16, 0x3d	; 61
    163e:	1e b7       	in	r17, 0x3e	; 62
uint8_t lcd_init(void)
{
	uint8_t data;

	/* INIT sequence */
	lcd_bus_write_cmd(0b11100010);									// Reset display
    1640:	82 ee       	ldi	r24, 0xE2	; 226
    1642:	57 df       	rcall	.-338    	; 0x14f2 <lcd_bus_write_cmd>
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
		barrier();
    1648:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    164a:	8b 32       	cpi	r24, 0x2B	; 43
    164c:	28 e6       	ldi	r18, 0x68	; 104
    164e:	92 07       	cpc	r25, r18
    1650:	d9 f7       	brne	.-10     	; 0x1648 <lcd_init+0x40>
	delay_ms(20);													// Wait for the panel to get ready in case one is attached to the bus

	data = lcd_bus_read_status();									// Get current status
    1652:	37 df       	rcall	.-402    	; 0x14c2 <lcd_bus_read_status>
	if (!(data & C_LCD_STATUS_M)) {
    1654:	88 23       	and	r24, r24
    1656:	0c f4       	brge	.+2      	; 0x165a <lcd_init+0x52>
    1658:	d7 c1       	rjmp	.+942    	; 0x1a08 <lcd_init+0x400>
		/* LCD panel reacts correctly - resume with INIT sequence */
		lcd_bus_write_cmd(0b00101000 | C_LCD_PWR_CTRL);				// Set Power Control
    165a:	8d e2       	ldi	r24, 0x2D	; 45
    165c:	4a df       	rcall	.-364    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00100000 | C_LCD_MR_TC);				// Set MR and TC
    165e:	84 e2       	ldi	r24, 0x24	; 36
    1660:	48 df       	rcall	.-368    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b11101000 | C_LCD_BIASRATIO);			// Set Bias Ratio
    1662:	8a ee       	ldi	r24, 0xEA	; 234
    1664:	46 df       	rcall	.-372    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10000001);								// Set Gain and PM (A)
    1666:	81 e8       	ldi	r24, 0x81	; 129
    1668:	44 df       	rcall	.-376    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(C_LCD_GAIN_PM);							// Set Gain and PM (B)
    166a:	8c e9       	ldi	r24, 0x9C	; 156
    166c:	42 df       	rcall	.-380    	; 0x14f2 <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b11000000 | C_LCD_MAPPING);				// Set Mapping
    166e:	88 ec       	ldi	r24, 0xC8	; 200
    1670:	40 df       	rcall	.-384    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10001000 | C_LCD_AC);					// Set RAM Address Control
    1672:	88 e8       	ldi	r24, 0x88	; 136
    1674:	3e df       	rcall	.-388    	; 0x14f2 <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b01000000);								// Set Start Line (0)
    1676:	80 e4       	ldi	r24, 0x40	; 64
    1678:	3c df       	rcall	.-392    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10010000);								// Set Fixed Lines (0)
    167a:	80 e9       	ldi	r24, 0x90	; 144
    167c:	3a df       	rcall	.-396    	; 0x14f2 <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b10110000);								// Set Page Address (0)
    167e:	80 eb       	ldi	r24, 0xB0	; 176
    1680:	38 df       	rcall	.-400    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	36 df       	rcall	.-404    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    1686:	80 e1       	ldi	r24, 0x10	; 16
    1688:	34 df       	rcall	.-408    	; 0x14f2 <lcd_bus_write_cmd>
		s_lcd_ram_read_nonvalid = true;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <s_lcd_ram_read_nonvalid>

		lcd_bus_write_cmd(0b11101111);								// Set Cursor Mode
    1690:	8f ee       	ldi	r24, 0xEF	; 239
    1692:	2f df       	rcall	.-418    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b11101110);								// Reset Cursor Mode (now CR := CA)
    1694:	8e ee       	ldi	r24, 0xEE	; 238
    1696:	2d df       	rcall	.-422    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10100100);								// Disable DC[1] (all pixel on)
    1698:	84 ea       	ldi	r24, 0xA4	; 164
    169a:	2b df       	rcall	.-426    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10100110);								// Disable DC[0] (all pixel inverse)
    169c:	86 ea       	ldi	r24, 0xA6	; 166
    169e:	29 df       	rcall	.-430    	; 0x14f2 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10101111);								// Enable  DC[2] (Display)
    16a0:	8f ea       	ldi	r24, 0xAF	; 175
    16a2:	27 df       	rcall	.-434    	; 0x14f2 <lcd_bus_write_cmd>

		lcd_cls();													// Clear screen
    16a4:	98 df       	rcall	.-208    	; 0x15d6 <lcd_cls>
    16a6:	10 e0       	ldi	r17, 0x00	; 0
static void s_lcd_test(void)
{
#if 1
	// TEST 1
	for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
		lcd_bus_write_ram(i);
    16a8:	81 2f       	mov	r24, r17
    16aa:	39 df       	rcall	.-398    	; 0x151e <lcd_bus_write_ram>
    16ac:	1f 5f       	subi	r17, 0xFF	; 255

static void s_lcd_test(void)
{
#if 1
	// TEST 1
	for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
    16ae:	10 3f       	cpi	r17, 0xF0	; 240
    16b0:	d9 f7       	brne	.-10     	; 0x16a8 <lcd_init+0xa0>
	gfx_mono_generic_draw_line (0, 16, 239, 31, GFX_PIXEL_SET);
#endif

#if 1
	// TEST 5
	gfx_mono_generic_draw_rect(        70, 48, 40, 40, GFX_PIXEL_SET);
    16b2:	01 e0       	ldi	r16, 0x01	; 1
    16b4:	28 e2       	ldi	r18, 0x28	; 40
    16b6:	48 e2       	ldi	r20, 0x28	; 40
    16b8:	60 e3       	ldi	r22, 0x30	; 48
    16ba:	86 e4       	ldi	r24, 0x46	; 70
    16bc:	58 d8       	rcall	.-3920   	; 0x76e <gfx_mono_generic_draw_rect>
	gfx_mono_generic_draw_filled_rect(170, 48, 40, 40, GFX_PIXEL_SET);
    16be:	28 e2       	ldi	r18, 0x28	; 40
    16c0:	48 e2       	ldi	r20, 0x28	; 40
    16c2:	60 e3       	ldi	r22, 0x30	; 48
    16c4:	8a ea       	ldi	r24, 0xAA	; 170
    16c6:	77 d8       	rcall	.-3858   	; 0x7b6 <gfx_mono_generic_draw_filled_rect>
#endif

#if 1
	// TEST 6
	gfx_mono_generic_draw_circle(       10, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    16c8:	0f ef       	ldi	r16, 0xFF	; 255
    16ca:	21 e0       	ldi	r18, 0x01	; 1
    16cc:	4a e0       	ldi	r20, 0x0A	; 10
    16ce:	60 e5       	ldi	r22, 0x50	; 80
    16d0:	8a e0       	ldi	r24, 0x0A	; 10
    16d2:	8b d8       	rcall	.-3818   	; 0x7ea <gfx_mono_generic_draw_circle>
	gfx_mono_generic_draw_filled_circle(40, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    16d4:	21 e0       	ldi	r18, 0x01	; 1
    16d6:	4a e0       	ldi	r20, 0x0A	; 10
    16d8:	60 e5       	ldi	r22, 0x50	; 80
    16da:	88 e2       	ldi	r24, 0x28	; 40
    16dc:	44 d9       	rcall	.-3448   	; 0x966 <gfx_mono_generic_draw_filled_circle>
#endif

#if 1
	// TEST 7
	gfx_mono_draw_string("DF4IAH Smart-LCD", 70, 32, &sysfont);
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	31 e0       	ldi	r19, 0x01	; 1
    16e2:	40 e2       	ldi	r20, 0x20	; 32
    16e4:	66 e4       	ldi	r22, 0x46	; 70
    16e6:	87 e0       	ldi	r24, 0x07	; 7
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	c3 da       	rcall	.-2682   	; 0xc72 <gfx_mono_draw_string>
	const int cnt = 4;
	const int blank_len = 1 + 15 + cnt * (3 + 8) + 1;  // train length + front + rear spacer
	int		origin = -blank_len;
	int		i = 0;
	int8_t  dx = 1;
	uint8_t	train_left[blank_len];
    16ec:	8d b7       	in	r24, 0x3d	; 61
    16ee:	9e b7       	in	r25, 0x3e	; 62
    16f0:	cd 97       	sbiw	r24, 0x3d	; 61
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	9e bf       	out	0x3e, r25	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	8d bf       	out	0x3d, r24	; 61
    16fc:	0d b7       	in	r16, 0x3d	; 61
    16fe:	1e b7       	in	r17, 0x3e	; 62
    1700:	0f 5f       	subi	r16, 0xFF	; 255
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	48 01       	movw	r8, r16
	uint8_t	train_right[blank_len];
    1706:	ed b7       	in	r30, 0x3d	; 61
    1708:	fe b7       	in	r31, 0x3e	; 62
    170a:	fd 97       	sbiw	r30, 0x3d	; 61
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	fe bf       	out	0x3e, r31	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	ed bf       	out	0x3d, r30	; 61
    1716:	cc 97       	sbiw	r24, 0x3c	; 60
    1718:	7c 01       	movw	r14, r24
    171a:	9a 87       	std	Y+10, r25	; 0x0a
    171c:	89 87       	std	Y+9, r24	; 0x09

	/* prepare trains */	
	{
		int idx;

		for (idx = 0; idx < blank_len; ++idx) {
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
				train_left[  idx] = 0b11111000;

			} else if (idx == blank_len - 1) {
				train_left[  idx] = 0;

			} else if (!((idx - 16) % 11)) {
    1722:	0f 2e       	mov	r0, r31
    1724:	fb e0       	ldi	r31, 0x0B	; 11
    1726:	4f 2e       	mov	r4, r31
    1728:	51 2c       	mov	r5, r1
    172a:	f0 2d       	mov	r31, r0
				train_left[  idx] = 0b01000000;
    172c:	68 94       	set
    172e:	dd 24       	eor	r13, r13
    1730:	d6 f8       	bld	r13, 6
				train_left[++idx] = 0b01000000;
				train_left[++idx] = 0b01000000;
				train_left[++idx] = 0b11111000;
    1732:	48 ef       	ldi	r20, 0xF8	; 248
				train_left[++idx] = 0b11111000;
				train_left[++idx] = 0b11001000;
    1734:	0f 2e       	mov	r0, r31
    1736:	f8 ec       	ldi	r31, 0xC8	; 200
    1738:	bf 2e       	mov	r11, r31
    173a:	f0 2d       	mov	r31, r0
				train_left[  idx] = 0b11111000;
				train_left[++idx] = 0b11011000;
			} else if (idx <  5) {
				train_left[  idx] = 0b11011111;
			} else if (idx < 11) {
				train_left[  idx] = 0b11011000;
    173c:	0f 2e       	mov	r0, r31
    173e:	f8 ed       	ldi	r31, 0xD8	; 216
    1740:	cf 2e       	mov	r12, r31
    1742:	f0 2d       	mov	r31, r0

			} else if (idx < 3) {
				train_left[  idx] = 0b11111000;
				train_left[++idx] = 0b11011000;
			} else if (idx <  5) {
				train_left[  idx] = 0b11011111;
    1744:	0f 2e       	mov	r0, r31
    1746:	ff ed       	ldi	r31, 0xDF	; 223
    1748:	6f 2e       	mov	r6, r31
    174a:	f0 2d       	mov	r31, r0

	/* prepare trains */	
	{
		int idx;

		for (idx = 0; idx < blank_len; ++idx) {
    174c:	77 24       	eor	r7, r7
    174e:	73 94       	inc	r7
    1750:	a1 2c       	mov	r10, r1
			if (!idx) {
    1752:	21 15       	cp	r18, r1
    1754:	31 05       	cpc	r19, r1
    1756:	29 f4       	brne	.+10     	; 0x1762 <lcd_init+0x15a>
				train_left[idx] = 0;
    1758:	f4 01       	movw	r30, r8
    175a:	10 82       	st	Z, r1

	/* prepare trains */	
	{
		int idx;

		for (idx = 0; idx < blank_len; ++idx) {
    175c:	27 2d       	mov	r18, r7
    175e:	3a 2d       	mov	r19, r10
    1760:	f8 cf       	rjmp	.-16     	; 0x1752 <lcd_init+0x14a>
			if (!idx) {
				train_left[idx] = 0;

			} else if (idx < 3) {
    1762:	23 30       	cpi	r18, 0x03	; 3
    1764:	31 05       	cpc	r19, r1
    1766:	5c f4       	brge	.+22     	; 0x177e <lcd_init+0x176>
				train_left[  idx] = 0b11111000;
    1768:	f4 01       	movw	r30, r8
    176a:	e2 0f       	add	r30, r18
    176c:	f3 1f       	adc	r31, r19
    176e:	40 83       	st	Z, r20
				train_left[++idx] = 0b11011000;
    1770:	2f 5f       	subi	r18, 0xFF	; 255
    1772:	3f 4f       	sbci	r19, 0xFF	; 255
    1774:	f4 01       	movw	r30, r8
    1776:	e2 0f       	add	r30, r18
    1778:	f3 1f       	adc	r31, r19
    177a:	c0 82       	st	Z, r12
    177c:	3c c0       	rjmp	.+120    	; 0x17f6 <lcd_init+0x1ee>
			} else if (idx <  5) {
    177e:	25 30       	cpi	r18, 0x05	; 5
    1780:	31 05       	cpc	r19, r1
    1782:	2c f4       	brge	.+10     	; 0x178e <lcd_init+0x186>
				train_left[  idx] = 0b11011111;
    1784:	f4 01       	movw	r30, r8
    1786:	e2 0f       	add	r30, r18
    1788:	f3 1f       	adc	r31, r19
    178a:	60 82       	st	Z, r6
    178c:	34 c0       	rjmp	.+104    	; 0x17f6 <lcd_init+0x1ee>
			} else if (idx < 11) {
    178e:	2b 30       	cpi	r18, 0x0B	; 11
    1790:	31 05       	cpc	r19, r1
    1792:	2c f4       	brge	.+10     	; 0x179e <lcd_init+0x196>
				train_left[  idx] = 0b11011000;
    1794:	f4 01       	movw	r30, r8
    1796:	e2 0f       	add	r30, r18
    1798:	f3 1f       	adc	r31, r19
    179a:	c0 82       	st	Z, r12
    179c:	2c c0       	rjmp	.+88     	; 0x17f6 <lcd_init+0x1ee>
			} else if (idx < 16) {
    179e:	20 31       	cpi	r18, 0x10	; 16
    17a0:	31 05       	cpc	r19, r1
    17a2:	2c f4       	brge	.+10     	; 0x17ae <lcd_init+0x1a6>
				train_left[  idx] = 0b11111000;
    17a4:	f4 01       	movw	r30, r8
    17a6:	e2 0f       	add	r30, r18
    17a8:	f3 1f       	adc	r31, r19
    17aa:	40 83       	st	Z, r20
    17ac:	24 c0       	rjmp	.+72     	; 0x17f6 <lcd_init+0x1ee>

			} else if (idx == blank_len - 1) {
    17ae:	2c 33       	cpi	r18, 0x3C	; 60
    17b0:	31 05       	cpc	r19, r1
    17b2:	19 f4       	brne	.+6      	; 0x17ba <lcd_init+0x1b2>
				train_left[  idx] = 0;
    17b4:	f8 01       	movw	r30, r16
    17b6:	14 ae       	std	Z+60, r1	; 0x3c
    17b8:	24 c0       	rjmp	.+72     	; 0x1802 <lcd_init+0x1fa>

			} else if (!((idx - 16) % 11)) {
    17ba:	c9 01       	movw	r24, r18
    17bc:	40 97       	sbiw	r24, 0x10	; 16
    17be:	b2 01       	movw	r22, r4
    17c0:	04 d6       	rcall	.+3080   	; 0x23ca <__divmodhi4>
    17c2:	89 2b       	or	r24, r25
    17c4:	a1 f4       	brne	.+40     	; 0x17ee <lcd_init+0x1e6>
				train_left[  idx] = 0b01000000;
    17c6:	f4 01       	movw	r30, r8
    17c8:	e2 0f       	add	r30, r18
    17ca:	f3 1f       	adc	r31, r19
    17cc:	d0 82       	st	Z, r13
				train_left[++idx] = 0b01000000;
    17ce:	d1 82       	std	Z+1, r13	; 0x01
				train_left[++idx] = 0b01000000;
    17d0:	d2 82       	std	Z+2, r13	; 0x02
				train_left[++idx] = 0b11111000;
    17d2:	43 83       	std	Z+3, r20	; 0x03
				train_left[++idx] = 0b11111000;
    17d4:	44 83       	std	Z+4, r20	; 0x04
				train_left[++idx] = 0b11001000;
    17d6:	b5 82       	std	Z+5, r11	; 0x05
				train_left[++idx] = 0b11111000;
    17d8:	46 83       	std	Z+6, r20	; 0x06
				train_left[++idx] = 0b11111000;
    17da:	47 83       	std	Z+7, r20	; 0x07
				train_left[++idx] = 0b11001000;
    17dc:	b0 86       	std	Z+8, r11	; 0x08
				train_left[++idx] = 0b11111000;
    17de:	41 87       	std	Z+9, r20	; 0x09
				train_left[++idx] = 0b11111000;
    17e0:	26 5f       	subi	r18, 0xF6	; 246
    17e2:	3f 4f       	sbci	r19, 0xFF	; 255
    17e4:	f4 01       	movw	r30, r8
    17e6:	e2 0f       	add	r30, r18
    17e8:	f3 1f       	adc	r31, r19
    17ea:	40 83       	st	Z, r20
    17ec:	04 c0       	rjmp	.+8      	; 0x17f6 <lcd_init+0x1ee>
			} else {
				train_left[idx] = 0;
    17ee:	f4 01       	movw	r30, r8
    17f0:	e2 0f       	add	r30, r18
    17f2:	f3 1f       	adc	r31, r19
    17f4:	10 82       	st	Z, r1

	/* prepare trains */	
	{
		int idx;

		for (idx = 0; idx < blank_len; ++idx) {
    17f6:	2f 5f       	subi	r18, 0xFF	; 255
    17f8:	3f 4f       	sbci	r19, 0xFF	; 255
    17fa:	2d 33       	cpi	r18, 0x3D	; 61
    17fc:	31 05       	cpc	r19, r1
    17fe:	0c f4       	brge	.+2      	; 0x1802 <lcd_init+0x1fa>
    1800:	a8 cf       	rjmp	.-176    	; 0x1752 <lcd_init+0x14a>
    1802:	f8 01       	movw	r30, r16
    1804:	d7 01       	movw	r26, r14
    1806:	dd 96       	adiw	r26, 0x3d	; 61
				train_left[idx] = 0;
			}
		}

		for (idx = 0; idx < blank_len; ++idx) {
			train_right[blank_len - idx - 1] = train_left[idx];		// x-mirror
    1808:	81 91       	ld	r24, Z+
    180a:	8e 93       	st	-X, r24
			} else {
				train_left[idx] = 0;
			}
		}

		for (idx = 0; idx < blank_len; ++idx) {
    180c:	ae 15       	cp	r26, r14
    180e:	bf 05       	cpc	r27, r15
    1810:	d9 f7       	brne	.-10     	; 0x1808 <lcd_init+0x200>
			train_right[blank_len - idx - 1] = train_left[idx];		// x-mirror
		}
	}

	gfx_mono_generic_draw_filled_rect(0, (GFX_MONO_LCD_PAGES - 1) * GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_PIXEL_CLR);
    1812:	00 e0       	ldi	r16, 0x00	; 0
    1814:	28 e0       	ldi	r18, 0x08	; 8
    1816:	40 ef       	ldi	r20, 0xF0	; 240
    1818:	68 e7       	ldi	r22, 0x78	; 120
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <gfx_mono_generic_draw_filled_rect>
{
	const int cnt = 4;
	const int blank_len = 1 + 15 + cnt * (3 + 8) + 1;  // train length + front + rear spacer
	int		origin = -blank_len;
	int		i = 0;
	int8_t  dx = 1;
    1820:	33 24       	eor	r3, r3
    1822:	33 94       	inc	r3
static void s_lcd_animation(void)
{
	const int cnt = 4;
	const int blank_len = 1 + 15 + cnt * (3 + 8) + 1;  // train length + front + rear spacer
	int		origin = -blank_len;
	int		i = 0;
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0

static void s_lcd_animation(void)
{
	const int cnt = 4;
	const int blank_len = 1 + 15 + cnt * (3 + 8) + 1;  // train length + front + rear spacer
	int		origin = -blank_len;
    1828:	0f 2e       	mov	r0, r31
    182a:	f3 ec       	ldi	r31, 0xC3	; 195
    182c:	ef 2e       	mov	r14, r31
    182e:	ff 24       	eor	r15, r15
    1830:	fa 94       	dec	r15
    1832:	f0 2d       	mov	r31, r0
	}

	gfx_mono_generic_draw_filled_rect(0, (GFX_MONO_LCD_PAGES - 1) * GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_PIXEL_CLR);

	do {
		if (!(i++ % 6)) {
    1834:	0f 2e       	mov	r0, r31
    1836:	f6 e0       	ldi	r31, 0x06	; 6
    1838:	af 2e       	mov	r10, r31
    183a:	b1 2c       	mov	r11, r1
    183c:	f0 2d       	mov	r31, r0
		t = 0.f;
	}

	buf[0] = '0' + (uint8_t)(((int)(t /  10.f)) % 10);
	buf[1] = '0' + (uint8_t)(((int) t         ) % 10);
	buf[2] = ',';
    183e:	0f 2e       	mov	r0, r31
    1840:	fc e2       	ldi	r31, 0x2C	; 44
    1842:	2f 2e       	mov	r2, r31
    1844:	f0 2d       	mov	r31, r0
static void s_lcd_test_lines(void)
{
	static int loop = 0;
	uint8_t m = ++loop % 18;
	uint8_t y1 = 10 + m;
	uint8_t y2 = 26 - m;
    1846:	1a e1       	ldi	r17, 0x1A	; 26
	}

	gfx_mono_generic_draw_filled_rect(0, (GFX_MONO_LCD_PAGES - 1) * GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_PIXEL_CLR);

	do {
		if (!(i++ % 6)) {
    1848:	6c 01       	movw	r12, r24
    184a:	ff ef       	ldi	r31, 0xFF	; 255
    184c:	cf 1a       	sub	r12, r31
    184e:	df 0a       	sbc	r13, r31
    1850:	b5 01       	movw	r22, r10
    1852:	bb d5       	rcall	.+2934   	; 0x23ca <__divmodhi4>
    1854:	89 2b       	or	r24, r25
    1856:	09 f0       	breq	.+2      	; 0x185a <lcd_init+0x252>
    1858:	49 c0       	rjmp	.+146    	; 0x18ec <lcd_init+0x2e4>
			origin += dx;
    185a:	e3 0c       	add	r14, r3
    185c:	f1 1c       	adc	r15, r1
    185e:	37 fc       	sbrc	r3, 7
    1860:	fa 94       	dec	r15

			if (origin <= (-10 - blank_len)) {
    1862:	2a eb       	ldi	r18, 0xBA	; 186
    1864:	e2 16       	cp	r14, r18
    1866:	2f ef       	ldi	r18, 0xFF	; 255
    1868:	f2 06       	cpc	r15, r18
    186a:	1c f1       	brlt	.+70     	; 0x18b2 <lcd_init+0x2aa>
				dx = 1;
			} else if (origin >= (GFX_MONO_LCD_WIDTH + 10)) {
    186c:	8a ef       	ldi	r24, 0xFA	; 250
    186e:	e8 16       	cp	r14, r24
    1870:	f1 04       	cpc	r15, r1
    1872:	1c f4       	brge	.+6      	; 0x187a <lcd_init+0x272>
				dx = -1;
			}

			if (dx < 0) {
    1874:	33 20       	and	r3, r3
    1876:	fc f4       	brge	.+62     	; 0x18b6 <lcd_init+0x2ae>
    1878:	02 c0       	rjmp	.+4      	; 0x187e <lcd_init+0x276>
			origin += dx;

			if (origin <= (-10 - blank_len)) {
				dx = 1;
			} else if (origin >= (GFX_MONO_LCD_WIDTH + 10)) {
				dx = -1;
    187a:	33 24       	eor	r3, r3
    187c:	3a 94       	dec	r3
			}

			if (dx < 0) {
				// Draw train left
				if (origin >= 0 && origin < GFX_MONO_LCD_WIDTH) {
    187e:	e0 ef       	ldi	r30, 0xF0	; 240
    1880:	ee 16       	cp	r14, r30
    1882:	f1 04       	cpc	r15, r1
    1884:	30 f4       	brcc	.+12     	; 0x1892 <lcd_init+0x28a>
					gfx_mono_lcd_uc1608_put_page(train_left, GFX_MONO_LCD_PAGES - 1, origin, blank_len);				// full width
    1886:	2d e3       	ldi	r18, 0x3D	; 61
    1888:	4e 2d       	mov	r20, r14
    188a:	6f e0       	ldi	r22, 0x0F	; 15
    188c:	c4 01       	movw	r24, r8
    188e:	06 d9       	rcall	.-3572   	; 0xa9c <gfx_mono_lcd_uc1608_put_page>
    1890:	2d c0       	rjmp	.+90     	; 0x18ec <lcd_init+0x2e4>
				} else if (-blank_len < origin && origin < 0) {
    1892:	97 01       	movw	r18, r14
    1894:	24 5c       	subi	r18, 0xC4	; 196
    1896:	3f 4f       	sbci	r19, 0xFF	; 255
    1898:	2c 33       	cpi	r18, 0x3C	; 60
    189a:	31 05       	cpc	r19, r1
    189c:	38 f5       	brcc	.+78     	; 0x18ec <lcd_init+0x2e4>
					gfx_mono_lcd_uc1608_put_page(train_left - origin, GFX_MONO_LCD_PAGES - 1, 0, blank_len + origin);	// left: reduced width
    189e:	2d e3       	ldi	r18, 0x3D	; 61
    18a0:	2e 0d       	add	r18, r14
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	6f e0       	ldi	r22, 0x0F	; 15
    18a6:	f4 01       	movw	r30, r8
    18a8:	ee 19       	sub	r30, r14
    18aa:	ff 09       	sbc	r31, r15
    18ac:	cf 01       	movw	r24, r30
    18ae:	f6 d8       	rcall	.-3604   	; 0xa9c <gfx_mono_lcd_uc1608_put_page>
    18b0:	1d c0       	rjmp	.+58     	; 0x18ec <lcd_init+0x2e4>
	do {
		if (!(i++ % 6)) {
			origin += dx;

			if (origin <= (-10 - blank_len)) {
				dx = 1;
    18b2:	33 24       	eor	r3, r3
    18b4:	33 94       	inc	r3
					gfx_mono_lcd_uc1608_put_page(train_left - origin, GFX_MONO_LCD_PAGES - 1, 0, blank_len + origin);	// left: reduced width
				}

			} else {
				// Draw train right
				if (origin >= 0 && origin < GFX_MONO_LCD_WIDTH) {
    18b6:	f0 ef       	ldi	r31, 0xF0	; 240
    18b8:	ef 16       	cp	r14, r31
    18ba:	f1 04       	cpc	r15, r1
    18bc:	38 f4       	brcc	.+14     	; 0x18cc <lcd_init+0x2c4>
					gfx_mono_lcd_uc1608_put_page(train_right, GFX_MONO_LCD_PAGES - 1, origin, blank_len);				// full width
    18be:	2d e3       	ldi	r18, 0x3D	; 61
    18c0:	4e 2d       	mov	r20, r14
    18c2:	6f e0       	ldi	r22, 0x0F	; 15
    18c4:	89 85       	ldd	r24, Y+9	; 0x09
    18c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c8:	e9 d8       	rcall	.-3630   	; 0xa9c <gfx_mono_lcd_uc1608_put_page>
    18ca:	10 c0       	rjmp	.+32     	; 0x18ec <lcd_init+0x2e4>
				} else if (-blank_len < origin && origin < 0) {
    18cc:	97 01       	movw	r18, r14
    18ce:	24 5c       	subi	r18, 0xC4	; 196
    18d0:	3f 4f       	sbci	r19, 0xFF	; 255
    18d2:	2c 33       	cpi	r18, 0x3C	; 60
    18d4:	31 05       	cpc	r19, r1
    18d6:	50 f4       	brcc	.+20     	; 0x18ec <lcd_init+0x2e4>
					gfx_mono_lcd_uc1608_put_page(train_right - origin, GFX_MONO_LCD_PAGES - 1, 0, blank_len + origin);	// left: reduced width
    18d8:	2d e3       	ldi	r18, 0x3D	; 61
    18da:	2e 0d       	add	r18, r14
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	6f e0       	ldi	r22, 0x0F	; 15
    18e0:	e9 85       	ldd	r30, Y+9	; 0x09
    18e2:	fa 85       	ldd	r31, Y+10	; 0x0a
    18e4:	ee 19       	sub	r30, r14
    18e6:	ff 09       	sbc	r31, r15
    18e8:	cf 01       	movw	r24, r30
    18ea:	d8 d8       	rcall	.-3664   	; 0xa9c <gfx_mono_lcd_uc1608_put_page>
				}
			}
		}

		if (!(i % 100)) {
    18ec:	c6 01       	movw	r24, r12
    18ee:	64 e6       	ldi	r22, 0x64	; 100
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	6b d5       	rcall	.+2774   	; 0x23ca <__divmodhi4>
    18f4:	89 2b       	or	r24, r25
    18f6:	09 f0       	breq	.+2      	; 0x18fa <lcd_init+0x2f2>
    18f8:	57 c0       	rjmp	.+174    	; 0x19a8 <lcd_init+0x3a0>
static void s_lcd_test_temp(void)
{
	char	buf[7];
	float	t;

	s_task();
    18fa:	cc d1       	rcall	.+920    	; 0x1c94 <s_task>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    18fc:	8f b7       	in	r24, 0x3f	; 63
    18fe:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    1900:	f8 94       	cli
	return flags;
    1902:	88 85       	ldd	r24, Y+8	; 0x08

	irqflags_t flags = cpu_irq_save();
	t = g_temp;
    1904:	40 90 42 01 	lds	r4, 0x0142	; 0x800142 <g_temp>
    1908:	50 90 43 01 	lds	r5, 0x0143	; 0x800143 <g_temp+0x1>
    190c:	60 90 44 01 	lds	r6, 0x0144	; 0x800144 <g_temp+0x2>
    1910:	70 90 45 01 	lds	r7, 0x0145	; 0x800145 <g_temp+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1914:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	if (t < 0.f) {
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	a9 01       	movw	r20, r18
    191c:	c3 01       	movw	r24, r6
    191e:	b2 01       	movw	r22, r4
    1920:	9e d3       	rcall	.+1852   	; 0x205e <__cmpsf2>
    1922:	88 23       	and	r24, r24
    1924:	1c f4       	brge	.+6      	; 0x192c <lcd_init+0x324>
		t = 0.f;
    1926:	41 2c       	mov	r4, r1
    1928:	51 2c       	mov	r5, r1
    192a:	32 01       	movw	r6, r4
	}

	buf[0] = '0' + (uint8_t)(((int)(t /  10.f)) % 10);
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e2       	ldi	r20, 0x20	; 32
    1932:	51 e4       	ldi	r21, 0x41	; 65
    1934:	c3 01       	movw	r24, r6
    1936:	b2 01       	movw	r22, r4
    1938:	96 d3       	rcall	.+1836   	; 0x2066 <__divsf3>
    193a:	fd d3       	rcall	.+2042   	; 0x2136 <__fixsfsi>
    193c:	cb 01       	movw	r24, r22
    193e:	6a e0       	ldi	r22, 0x0A	; 10
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	43 d5       	rcall	.+2694   	; 0x23ca <__divmodhi4>
    1944:	80 5d       	subi	r24, 0xD0	; 208
    1946:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = '0' + (uint8_t)(((int) t         ) % 10);
    1948:	c3 01       	movw	r24, r6
    194a:	b2 01       	movw	r22, r4
    194c:	f4 d3       	rcall	.+2024   	; 0x2136 <__fixsfsi>
    194e:	cb 01       	movw	r24, r22
    1950:	6a e0       	ldi	r22, 0x0A	; 10
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	3a d5       	rcall	.+2676   	; 0x23ca <__divmodhi4>
    1956:	80 5d       	subi	r24, 0xD0	; 208
    1958:	8a 83       	std	Y+2, r24	; 0x02
	buf[2] = ',';
    195a:	2b 82       	std	Y+3, r2	; 0x03
	buf[3] = '0' + (uint8_t)(((int)(t *  10.f)) % 10);
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	c3 01       	movw	r24, r6
    1966:	b2 01       	movw	r22, r4
    1968:	cd d4       	rcall	.+2458   	; 0x2304 <__mulsf3>
    196a:	e5 d3       	rcall	.+1994   	; 0x2136 <__fixsfsi>
    196c:	cb 01       	movw	r24, r22
    196e:	6a e0       	ldi	r22, 0x0A	; 10
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	2b d5       	rcall	.+2646   	; 0x23ca <__divmodhi4>
    1974:	80 5d       	subi	r24, 0xD0	; 208
    1976:	8c 83       	std	Y+4, r24	; 0x04
	buf[4] = '0' + (uint8_t)(((int)(t * 100.f)) % 10);
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	48 ec       	ldi	r20, 0xC8	; 200
    197e:	52 e4       	ldi	r21, 0x42	; 66
    1980:	c3 01       	movw	r24, r6
    1982:	b2 01       	movw	r22, r4
    1984:	bf d4       	rcall	.+2430   	; 0x2304 <__mulsf3>
    1986:	d7 d3       	rcall	.+1966   	; 0x2136 <__fixsfsi>
    1988:	cb 01       	movw	r24, r22
    198a:	6a e0       	ldi	r22, 0x0A	; 10
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	1d d5       	rcall	.+2618   	; 0x23ca <__divmodhi4>
    1990:	80 5d       	subi	r24, 0xD0	; 208
    1992:	8d 83       	std	Y+5, r24	; 0x05
	buf[5] = 'C';
    1994:	f3 e4       	ldi	r31, 0x43	; 67
    1996:	fe 83       	std	Y+6, r31	; 0x06
	buf[6] = 0;
    1998:	1f 82       	std	Y+7, r1	; 0x07

	gfx_mono_draw_string(buf, 120, 65, &sysfont);
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	31 e0       	ldi	r19, 0x01	; 1
    199e:	41 e4       	ldi	r20, 0x41	; 65
    19a0:	68 e7       	ldi	r22, 0x78	; 120
    19a2:	ce 01       	movw	r24, r28
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	65 d9       	rcall	.-3382   	; 0xc72 <gfx_mono_draw_string>


static void s_lcd_test_lines(void)
{
	static int loop = 0;
	uint8_t m = ++loop % 18;
    19a8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
    19ac:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
    19b6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
    19ba:	62 e1       	ldi	r22, 0x12	; 18
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	05 d5       	rcall	.+2570   	; 0x23ca <__divmodhi4>
    19c0:	38 2f       	mov	r19, r24
	uint8_t y1 = 10 + m;
	uint8_t y2 = 26 - m;

	gfx_mono_generic_draw_line (0, y1, 239, y2, (loop / 18) % 3);
    19c2:	cb 01       	movw	r24, r22
    19c4:	63 e0       	ldi	r22, 0x03	; 3
    19c6:	70 e0       	ldi	r23, 0x00	; 0
    19c8:	00 d5       	rcall	.+2560   	; 0x23ca <__divmodhi4>
static void s_lcd_test_lines(void)
{
	static int loop = 0;
	uint8_t m = ++loop % 18;
	uint8_t y1 = 10 + m;
	uint8_t y2 = 26 - m;
    19ca:	21 2f       	mov	r18, r17
    19cc:	23 1b       	sub	r18, r19

static void s_lcd_test_lines(void)
{
	static int loop = 0;
	uint8_t m = ++loop % 18;
	uint8_t y1 = 10 + m;
    19ce:	6a e0       	ldi	r22, 0x0A	; 10
    19d0:	63 0f       	add	r22, r19
	uint8_t y2 = 26 - m;

	gfx_mono_generic_draw_line (0, y1, 239, y2, (loop / 18) % 3);
    19d2:	08 2f       	mov	r16, r24
    19d4:	4f ee       	ldi	r20, 0xEF	; 239
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	0e 94 35 03 	call	0x66a	; 0x66a <gfx_mono_generic_draw_line>
	
	if (loop >= 1024 * 18) {
    19dc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
    19e0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
    19e4:	81 15       	cp	r24, r1
    19e6:	98 44       	sbci	r25, 0x48	; 72
    19e8:	24 f0       	brlt	.+8      	; 0x19f2 <lcd_init+0x3ea>
		loop = 0;
    19ea:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
    19ee:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
	irqflags_t flags = cpu_irq_save();
	t = g_temp;
	cpu_irq_restore(flags);

	if (t < 0.f) {
		t = 0.f;
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
		}

		s_lcd_test_lines();

		for (long delay = 1000; delay; --delay)
			nop();
    19f6:	00 00       	nop
    19f8:	2f 5f       	subi	r18, 0xFF	; 255
    19fa:	3f 4f       	sbci	r19, 0xFF	; 255
			s_lcd_test_temp();
		}

		s_lcd_test_lines();

		for (long delay = 1000; delay; --delay)
    19fc:	28 3e       	cpi	r18, 0xE8	; 232
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	38 07       	cpc	r19, r24
    1a02:	c9 f7       	brne	.-14     	; 0x19f6 <lcd_init+0x3ee>
	}

	gfx_mono_generic_draw_filled_rect(0, (GFX_MONO_LCD_PAGES - 1) * GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_PIXEL_CLR);

	do {
		if (!(i++ % 6)) {
    1a04:	c6 01       	movw	r24, r12
    1a06:	20 cf       	rjmp	.-448    	; 0x1848 <lcd_init+0x240>
		return 0;													// Return OK

	} else {
		return 1;													// Return failure
	}
}
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	1e bf       	out	0x3e, r17	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	0d bf       	out	0x3d, r16	; 61
    1a14:	2a 96       	adiw	r28, 0x0a	; 10
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	ff 90       	pop	r15
    1a2a:	ef 90       	pop	r14
    1a2c:	df 90       	pop	r13
    1a2e:	cf 90       	pop	r12
    1a30:	bf 90       	pop	r11
    1a32:	af 90       	pop	r10
    1a34:	9f 90       	pop	r9
    1a36:	8f 90       	pop	r8
    1a38:	7f 90       	pop	r7
    1a3a:	6f 90       	pop	r6
    1a3c:	5f 90       	pop	r5
    1a3e:	4f 90       	pop	r4
    1a40:	3f 90       	pop	r3
    1a42:	2f 90       	pop	r2
    1a44:	08 95       	ret

00001a46 <s_twcr_ack>:
static uint8_t s_rx_lock = 0;
static uint8_t s_rx_d[8];


static void s_twcr_ack(uint8_t set)
{
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	1f 92       	push	r1
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a50:	9f b7       	in	r25, 0x3f	; 63
    1a52:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1a54:	f8 94       	cli
	return flags;
    1a56:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	if (set) {
    1a58:	88 23       	and	r24, r24
    1a5a:	31 f0       	breq	.+12     	; 0x1a68 <s_twcr_ack+0x22>
		TWCR |=   _BV(TWEA);					// ACK
    1a5c:	ec eb       	ldi	r30, 0xBC	; 188
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	80 64       	ori	r24, 0x40	; 64
    1a64:	80 83       	st	Z, r24
    1a66:	05 c0       	rjmp	.+10     	; 0x1a72 <s_twcr_ack+0x2c>
	} else {
		TWCR &= ~(_BV(TWEA));					// NACK
    1a68:	ec eb       	ldi	r30, 0xBC	; 188
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8f 7b       	andi	r24, 0xBF	; 191
    1a70:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a72:	9f bf       	out	0x3f, r25	; 63
	}

	cpu_irq_restore(flags);
}
    1a74:	0f 90       	pop	r0
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	08 95       	ret

00001a7c <s_twcr_all>:

static void s_twcr_all(uint8_t ctrl)
{
    1a7c:	cf 93       	push	r28
    1a7e:	df 93       	push	r29
    1a80:	1f 92       	push	r1
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a86:	9f b7       	in	r25, 0x3f	; 63
    1a88:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1a8a:	f8 94       	cli
	return flags;
    1a8c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	TWCR = ctrl;
    1a8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a92:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1a94:	0f 90       	pop	r0
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	08 95       	ret

00001a9c <s_twdr>:

static void s_twdr(uint8_t data_o)
{
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	1f 92       	push	r1
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1aa6:	9f b7       	in	r25, 0x3f	; 63
    1aa8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1aaa:	f8 94       	cli
	return flags;
    1aac:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	TWDR = data_o;
    1aae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ab2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1ab4:	0f 90       	pop	r0
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	08 95       	ret

00001abc <s_twi_tx_done>:
}

static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
    1abc:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <s_tx_next_len>
    1ac0:	22 23       	and	r18, r18
    1ac2:	81 f0       	breq	.+32     	; 0x1ae4 <s_twi_tx_done+0x28>
    1ac4:	e2 2f       	mov	r30, r18
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	e7 5d       	subi	r30, 0xD7	; 215
    1aca:	fe 4f       	sbci	r31, 0xFE	; 254
    1acc:	88 e2       	ldi	r24, 0x28	; 40
    1ace:	91 e0       	ldi	r25, 0x01	; 1
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
			s_tx_d[idx] = s_tx_next_d[idx];
    1ad0:	12 92       	st	-Z, r1
static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
    1ad2:	e8 17       	cp	r30, r24
    1ad4:	f9 07       	cpc	r31, r25
    1ad6:	e1 f7       	brne	.-8      	; 0x1ad0 <s_twi_tx_done+0x14>
			s_tx_d[idx] = s_tx_next_d[idx];
		}
		s_tx_len = s_tx_next_len;
    1ad8:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <s_tx_len>
		s_tx_next_len = 0;
    1adc:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <s_tx_next_len>
		s_twdr(0b11100101);						// Start condition
    1ae0:	85 ee       	ldi	r24, 0xE5	; 229
    1ae2:	dc cf       	rjmp	.-72     	; 0x1a9c <s_twdr>
    1ae4:	08 95       	ret

00001ae6 <__vector_24__bottom>:
	}
}


void __vector_24__bottom(uint8_t tws, uint8_t twd)
{
    1ae6:	cf 93       	push	r28
	static uint8_t pos_i	= 0;
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;

	switch(tws) {
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	fc 01       	movw	r30, r24
    1aec:	38 97       	sbiw	r30, 0x08	; 8
    1aee:	e1 3c       	cpi	r30, 0xC1	; 193
    1af0:	f1 05       	cpc	r31, r1
    1af2:	08 f0       	brcs	.+2      	; 0x1af6 <__vector_24__bottom+0x10>
    1af4:	cc c0       	rjmp	.+408    	; 0x1c8e <__vector_24__bottom+0x1a8>
    1af6:	ec 5c       	subi	r30, 0xCC	; 204
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	7a c4       	rjmp	.+2292   	; 0x23f0 <__tablejump2__>

	/* Master Transmitter Mode */

	case 0x08:									// Start condition transmitted
		s_tx_lock = 1;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <s_tx_lock>
		pos_o = 0;
    1b02:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <pos_o.2504>
	case 0x10:									// Repeated start condition transmitted
	case 0x18:									// SLA+W transmitted and ACK received
		s_twdr(s_tx_d[pos_o++]);
    1b06:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <pos_o.2504>
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	8e 0f       	add	r24, r30
    1b0e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <pos_o.2504>
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	e8 5d       	subi	r30, 0xD8	; 216
    1b16:	fe 4f       	sbci	r31, 0xFE	; 254
    1b18:	80 81       	ld	r24, Z
    1b1a:	c0 df       	rcall	.-128    	; 0x1a9c <s_twdr>
		break;
    1b1c:	b8 c0       	rjmp	.+368    	; 0x1c8e <__vector_24__bottom+0x1a8>

	case 0x20:									// SLA+W transmitted and NACK received
		s_twcr_all(0b10010101);					// Send NACK and STOP
    1b1e:	85 e9       	ldi	r24, 0x95	; 149
    1b20:	ad df       	rcall	.-166    	; 0x1a7c <s_twcr_all>
		break;
    1b22:	b5 c0       	rjmp	.+362    	; 0x1c8e <__vector_24__bottom+0x1a8>

	case 0x28:									// Data byte sent and ACK received
		if (pos_o < cnt_o) {
    1b24:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <pos_o.2504>
    1b28:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <cnt_o.2506>
    1b2c:	e8 17       	cp	r30, r24
    1b2e:	60 f4       	brcc	.+24     	; 0x1b48 <__vector_24__bottom+0x62>
			s_twdr(s_tx_d[pos_o++]);
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	8e 0f       	add	r24, r30
    1b34:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <pos_o.2504>
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	e8 5d       	subi	r30, 0xD8	; 216
    1b3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b3e:	80 81       	ld	r24, Z
    1b40:	ad df       	rcall	.-166    	; 0x1a9c <s_twdr>
			s_twcr_all(0b11000101);				// Send new data byte and ACK send enable
    1b42:	85 ec       	ldi	r24, 0xC5	; 197
    1b44:	9b df       	rcall	.-202    	; 0x1a7c <s_twcr_all>
    1b46:	a3 c0       	rjmp	.+326    	; 0x1c8e <__vector_24__bottom+0x1a8>
		} else {
			s_twcr_all(0b11010101);				// Send STOP and ACK send enable
    1b48:	85 ed       	ldi	r24, 0xD5	; 213
    1b4a:	98 df       	rcall	.-208    	; 0x1a7c <s_twcr_all>
			s_tx_lock = 0;
    1b4c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <s_tx_lock>
			s_twi_tx_done();					// Message sent
    1b50:	b5 df       	rcall	.-150    	; 0x1abc <s_twi_tx_done>
    1b52:	9d c0       	rjmp	.+314    	; 0x1c8e <__vector_24__bottom+0x1a8>
		}
		break;

	case 0x30:									// Data byte sent and NACK received
		s_twcr_all(0b10010101);					// Send NACK and STOP
    1b54:	85 e9       	ldi	r24, 0x95	; 149
    1b56:	92 df       	rcall	.-220    	; 0x1a7c <s_twcr_all>
		s_tx_lock = 0;
    1b58:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <s_tx_lock>
		s_twi_tx_done();						// Message failure
    1b5c:	af df       	rcall	.-162    	; 0x1abc <s_twi_tx_done>
		break;
    1b5e:	97 c0       	rjmp	.+302    	; 0x1c8e <__vector_24__bottom+0x1a8>

	case 0x38:									// Arbitration lost
		s_twcr_all(0b11100101);					// Send START (again) and ACK send enable
    1b60:	85 ee       	ldi	r24, 0xE5	; 229
    1b62:	8c df       	rcall	.-232    	; 0x1a7c <s_twcr_all>
		break;
    1b64:	94 c0       	rjmp	.+296    	; 0x1c8e <__vector_24__bottom+0x1a8>

	/* Slave Receiver Mode */

	case 0x60:									// SLA+W received and ACK sent
	case 0x68:
		s_rx_lock = 1;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <s_rx_lock>
		s_rx_d[0] = twd;						// Target address
    1b6c:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <s_rx_d>
		pos_i = 1;								// Starting of reception
    1b70:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pos_i.2503>
		break;
    1b74:	8c c0       	rjmp	.+280    	; 0x1c8e <__vector_24__bottom+0x1a8>

	case 0x70:									// GCA received and ACK sent
	case 0x78:
		s_rx_lock = 1;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <s_rx_lock>
		s_rx_d[0] = twd;						// GCA
    1b7c:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <s_rx_d>
		pos_i = 1;								// Starting of reception
    1b80:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pos_i.2503>
		break;
    1b84:	84 c0       	rjmp	.+264    	; 0x1c8e <__vector_24__bottom+0x1a8>

	case 0x80:									// Data after SLA+W received
	case 0x90:
		if (cnt_i == 0b111) {					// Open parameter form
    1b86:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cnt_i.2505>
    1b8a:	87 30       	cpi	r24, 0x07	; 7
    1b8c:	61 f4       	brne	.+24     	; 0x1ba6 <__vector_24__bottom+0xc0>
			s_rx_d[2] = twd;
    1b8e:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <s_rx_d+0x2>
			if (!s_twi_rcvd_command_open_form(s_rx_d, ++pos_i)) {
    1b92:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pos_i.2503>
    1b96:	8f 5f       	subi	r24, 0xFF	; 255
    1b98:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pos_i.2503>
				s_twcr_ack(true);				// ACK
			} else {
				s_twcr_ack(false);				// NACK
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	53 df       	rcall	.-346    	; 0x1a46 <s_twcr_ack>
				cnt_i = 0;
    1ba0:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cnt_i.2505>
    1ba4:	74 c0       	rjmp	.+232    	; 0x1c8e <__vector_24__bottom+0x1a8>
			}

		} else {								// Closed parameter form
			if (pos_i <= 0b111) {
    1ba6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pos_i.2503>
    1baa:	88 30       	cpi	r24, 0x08	; 8
    1bac:	28 f4       	brcc	.+10     	; 0x1bb8 <__vector_24__bottom+0xd2>
				s_rx_d[pos_i] = twd;
    1bae:	e8 2f       	mov	r30, r24
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	e1 5e       	subi	r30, 0xE1	; 225
    1bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb6:	60 83       	st	Z, r22
			}
			if (pos_i == 1) {
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	39 f4       	brne	.+14     	; 0x1bca <__vector_24__bottom+0xe4>
				cnt_i = ((twd >> 5) & 0b111) + 1;
    1bbc:	62 95       	swap	r22
    1bbe:	66 95       	lsr	r22
    1bc0:	67 70       	andi	r22, 0x07	; 7
    1bc2:	6f 5f       	subi	r22, 0xFF	; 255
    1bc4:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <cnt_i.2505>
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <__vector_24__bottom+0xe8>
			}
			if (pos_i < 0b111) {
    1bca:	87 30       	cpi	r24, 0x07	; 7
    1bcc:	18 f4       	brcc	.+6      	; 0x1bd4 <__vector_24__bottom+0xee>
				++pos_i;
    1bce:	8f 5f       	subi	r24, 0xFF	; 255
    1bd0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pos_i.2503>
			}
			s_twcr_ack(pos_i <= cnt_i);			// ACK - NACK
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <pos_i.2503>
    1bda:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cnt_i.2505>
    1bde:	92 17       	cp	r25, r18
    1be0:	08 f4       	brcc	.+2      	; 0x1be4 <__vector_24__bottom+0xfe>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	30 df       	rcall	.-416    	; 0x1a46 <s_twcr_ack>
    1be6:	53 c0       	rjmp	.+166    	; 0x1c8e <__vector_24__bottom+0x1a8>
		}
		break;

	case 0x88:									// NACK after last data byte sent
	case 0x98:
		if (cnt_i != 0b111) {
    1be8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cnt_i.2505>
    1bec:	87 30       	cpi	r24, 0x07	; 7
    1bee:	29 f4       	brne	.+10     	; 0x1bfa <__vector_24__bottom+0x114>
			s_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
		} else {
			s_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
    1bf0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pos_i.2503>
    1bf4:	8f 5f       	subi	r24, 0xFF	; 255
    1bf6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pos_i.2503>
		}
		s_rx_lock = 0;
    1bfa:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <s_rx_lock>
		break;
    1bfe:	47 c0       	rjmp	.+142    	; 0x1c8e <__vector_24__bottom+0x1a8>

	case 0xA0:
		s_twcr_all(0b11000101);					// Send nothing
    1c00:	85 ec       	ldi	r24, 0xC5	; 197
    1c02:	3c df       	rcall	.-392    	; 0x1a7c <s_twcr_all>
		pos_i = 0;
    1c04:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <pos_i.2503>
		cnt_i = 0;
    1c08:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cnt_i.2505>
		s_rx_lock = 0;
    1c0c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <s_rx_lock>
		break;
    1c10:	3e c0       	rjmp	.+124    	; 0x1c8e <__vector_24__bottom+0x1a8>

	/* Slave Transmitter Mode */

	case 0xA8:									// SLA+R received and ACK has been returned
	case 0xB0:
		s_rx_lock = 1;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <s_rx_lock>
		pos_o = 0;
    1c18:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <pos_o.2504>
		s_twdr(cnt_o > pos_o ?  s_rx_d[pos_o++] : 0);
    1c1c:	c0 91 1d 01 	lds	r28, 0x011D	; 0x80011d <cnt_o.2506>
    1c20:	cc 23       	and	r28, r28
    1c22:	29 f0       	breq	.+10     	; 0x1c2e <__vector_24__bottom+0x148>
    1c24:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <pos_o.2504>
    1c28:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <s_rx_d>
    1c2c:	01 c0       	rjmp	.+2      	; 0x1c30 <__vector_24__bottom+0x14a>
    1c2e:	8c 2f       	mov	r24, r28
    1c30:	35 df       	rcall	.-406    	; 0x1a9c <s_twdr>
		s_twcr_ack(cnt_o > pos_o);				// ACK - NACK
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <pos_o.2504>
    1c38:	9c 17       	cp	r25, r28
    1c3a:	08 f0       	brcs	.+2      	; 0x1c3e <__vector_24__bottom+0x158>
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	03 df       	rcall	.-506    	; 0x1a46 <s_twcr_ack>
		break;
    1c40:	26 c0       	rjmp	.+76     	; 0x1c8e <__vector_24__bottom+0x1a8>

	case 0xB8:									// Data sent and ACK has been returned
		s_twdr(cnt_o > pos_o ?  s_rx_d[pos_o++] : 0);
    1c42:	c0 91 1d 01 	lds	r28, 0x011D	; 0x80011d <cnt_o.2506>
    1c46:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <pos_o.2504>
    1c4a:	ec 17       	cp	r30, r28
    1c4c:	48 f4       	brcc	.+18     	; 0x1c60 <__vector_24__bottom+0x17a>
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	8e 0f       	add	r24, r30
    1c52:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <pos_o.2504>
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	e1 5e       	subi	r30, 0xE1	; 225
    1c5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c5c:	80 81       	ld	r24, Z
    1c5e:	01 c0       	rjmp	.+2      	; 0x1c62 <__vector_24__bottom+0x17c>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	1c df       	rcall	.-456    	; 0x1a9c <s_twdr>
		s_twcr_ack(cnt_o > pos_o);				// ACK - NACK
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <pos_o.2504>
    1c6a:	9c 17       	cp	r25, r28
    1c6c:	08 f0       	brcs	.+2      	; 0x1c70 <__vector_24__bottom+0x18a>
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	ea de       	rcall	.-556    	; 0x1a46 <s_twcr_ack>
		break;
    1c72:	0d c0       	rjmp	.+26     	; 0x1c8e <__vector_24__bottom+0x1a8>

	case 0xC0:									// Data sent and NACK has been returned
		s_twcr_ack(false);						// NACK
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	e7 de       	rcall	.-562    	; 0x1a46 <s_twcr_ack>
		pos_o = 0;
    1c78:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <pos_o.2504>
		cnt_o = 0;
    1c7c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <cnt_o.2506>
		s_rx_lock = 0;
    1c80:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <s_rx_lock>
		break;
    1c84:	04 c0       	rjmp	.+8      	; 0x1c8e <__vector_24__bottom+0x1a8>

	case 0xC8:									// Superfluous ACK by master sent after NACK has been returned
		s_twcr_all(0b11000101);					// Send nothing
    1c86:	85 ec       	ldi	r24, 0xC5	; 197
    1c88:	f9 de       	rcall	.-526    	; 0x1a7c <s_twcr_all>
		s_rx_lock = 0;
    1c8a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <s_rx_lock>
		break;
	}
}
    1c8e:	cf 91       	pop	r28
    1c90:	08 95       	ret

00001c92 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    1c92:	08 95       	ret

00001c94 <s_task>:
/* MAIN section */

void halt(void)
{
	/* MAIN Loop Shutdown */
	runmode = 0;
    1c94:	4f 92       	push	r4
    1c96:	5f 92       	push	r5
    1c98:	6f 92       	push	r6
    1c9a:	7f 92       	push	r7
    1c9c:	8f 92       	push	r8
    1c9e:	9f 92       	push	r9
    1ca0:	af 92       	push	r10
    1ca2:	bf 92       	push	r11
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <s_task+0x1e>
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <s_task+0x20>
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	8f b7       	in	r24, 0x3f	; 63
    1cba:	8c 83       	std	Y+4, r24	; 0x04
    1cbc:	f8 94       	cli
    1cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc0:	c0 90 4e 01 	lds	r12, 0x014E	; 0x80014e <g_adc_ldr>
    1cc4:	d0 90 4f 01 	lds	r13, 0x014F	; 0x80014f <g_adc_ldr+0x1>
    1cc8:	e0 90 50 01 	lds	r14, 0x0150	; 0x800150 <g_adc_ldr+0x2>
    1ccc:	f0 90 51 01 	lds	r15, 0x0151	; 0x800151 <g_adc_ldr+0x3>
    1cd0:	40 90 46 01 	lds	r4, 0x0146	; 0x800146 <g_adc_temp>
    1cd4:	50 90 47 01 	lds	r5, 0x0147	; 0x800147 <g_adc_temp+0x1>
    1cd8:	60 90 48 01 	lds	r6, 0x0148	; 0x800148 <g_adc_temp+0x2>
    1cdc:	70 90 49 01 	lds	r7, 0x0149	; 0x800149 <g_adc_temp+0x3>
    1ce0:	8f bf       	out	0x3f, r24	; 63
    1ce2:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <pwm.2556>
    1ce6:	8f 5f       	subi	r24, 0xFF	; 255
    1ce8:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <pwm.2556>
    1cec:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	5f e3       	ldi	r21, 0x3F	; 63
    1cf8:	c7 01       	movw	r24, r14
    1cfa:	b6 01       	movw	r22, r12
    1cfc:	ff d2       	rcall	.+1534   	; 0x22fc <__gesf2>
    1cfe:	88 23       	and	r24, r24
    1d00:	04 f1       	brlt	.+64     	; 0x1d42 <s_task+0xae>
    1d02:	a7 01       	movw	r20, r14
    1d04:	96 01       	movw	r18, r12
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	70 e4       	ldi	r23, 0x40	; 64
    1d0a:	8c e9       	ldi	r24, 0x9C	; 156
    1d0c:	95 e4       	ldi	r25, 0x45	; 69
    1d0e:	ab d1       	rcall	.+854    	; 0x2066 <__divsf3>
    1d10:	4b 01       	movw	r8, r22
    1d12:	5c 01       	movw	r10, r24
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4a e7       	ldi	r20, 0x7A	; 122
    1d1a:	54 e4       	ldi	r21, 0x44	; 68
    1d1c:	a0 d1       	rcall	.+832    	; 0x205e <__cmpsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	dc f4       	brge	.+54     	; 0x1d58 <s_task+0xc4>
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	4a e7       	ldi	r20, 0x7A	; 122
    1d28:	54 e4       	ldi	r21, 0x44	; 68
    1d2a:	c5 01       	movw	r24, r10
    1d2c:	b4 01       	movw	r22, r8
    1d2e:	9b d1       	rcall	.+822    	; 0x2066 <__divsf3>
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	45 e6       	ldi	r20, 0x65	; 101
    1d36:	53 e4       	ldi	r21, 0x43	; 67
    1d38:	e5 d2       	rcall	.+1482   	; 0x2304 <__mulsf3>
    1d3a:	02 d2       	rcall	.+1028   	; 0x2140 <__fixunssfsi>
    1d3c:	8a e1       	ldi	r24, 0x1A	; 26
    1d3e:	86 0f       	add	r24, r22
    1d40:	0c c0       	rjmp	.+24     	; 0x1d5a <s_task+0xc6>
    1d42:	0f 2e       	mov	r0, r31
    1d44:	81 2c       	mov	r8, r1
    1d46:	f0 e4       	ldi	r31, 0x40	; 64
    1d48:	9f 2e       	mov	r9, r31
    1d4a:	fc e1       	ldi	r31, 0x1C	; 28
    1d4c:	af 2e       	mov	r10, r31
    1d4e:	f6 e4       	ldi	r31, 0x46	; 70
    1d50:	bf 2e       	mov	r11, r31
    1d52:	f0 2d       	mov	r31, r0
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	01 c0       	rjmp	.+2      	; 0x1d5a <s_task+0xc6>
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	80 92 39 01 	sts	0x0139, r8	; 0x800139 <g_f_DEBUG31>
    1d5e:	90 92 3a 01 	sts	0x013A, r9	; 0x80013a <g_f_DEBUG31+0x1>
    1d62:	a0 92 3b 01 	sts	0x013B, r10	; 0x80013b <g_f_DEBUG31+0x2>
    1d66:	b0 92 3c 01 	sts	0x013C, r11	; 0x80013c <g_f_DEBUG31+0x3>
    1d6a:	c0 92 35 01 	sts	0x0135, r12	; 0x800135 <g_f_DEBUG32>
    1d6e:	d0 92 36 01 	sts	0x0136, r13	; 0x800136 <g_f_DEBUG32+0x1>
    1d72:	e0 92 37 01 	sts	0x0137, r14	; 0x800137 <g_f_DEBUG32+0x2>
    1d76:	f0 92 38 01 	sts	0x0138, r15	; 0x800138 <g_f_DEBUG32+0x3>
    1d7a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <g_u8_DEBUG13>
    1d7e:	8f b7       	in	r24, 0x3f	; 63
    1d80:	8b 83       	std	Y+3, r24	; 0x03
    1d82:	f8 94       	cli
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	c0 92 4a 01 	sts	0x014A, r12	; 0x80014a <g_adc_ldr_last>
    1d8a:	d0 92 4b 01 	sts	0x014B, r13	; 0x80014b <g_adc_ldr_last+0x1>
    1d8e:	e0 92 4c 01 	sts	0x014C, r14	; 0x80014c <g_adc_ldr_last+0x2>
    1d92:	f0 92 4d 01 	sts	0x014D, r15	; 0x80014d <g_adc_ldr_last+0x3>
    1d96:	8f bf       	out	0x3f, r24	; 63
    1d98:	29 e1       	ldi	r18, 0x19	; 25
    1d9a:	37 e2       	ldi	r19, 0x27	; 39
    1d9c:	4d ea       	ldi	r20, 0xAD	; 173
    1d9e:	53 e4       	ldi	r21, 0x43	; 67
    1da0:	c3 01       	movw	r24, r6
    1da2:	b2 01       	movw	r22, r4
    1da4:	f7 d0       	rcall	.+494    	; 0x1f94 <__subsf3>
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 ea       	ldi	r19, 0xA0	; 160
    1daa:	47 e8       	ldi	r20, 0x87	; 135
    1dac:	5f e3       	ldi	r21, 0x3F	; 63
    1dae:	aa d2       	rcall	.+1364   	; 0x2304 <__mulsf3>
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	48 ec       	ldi	r20, 0xC8	; 200
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	ee d0       	rcall	.+476    	; 0x1f96 <__addsf3>
    1dba:	6b 01       	movw	r12, r22
    1dbc:	7c 01       	movw	r14, r24
    1dbe:	8f b7       	in	r24, 0x3f	; 63
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	f8 94       	cli
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <g_temp_lcd_last>
    1dca:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <g_temp_lcd_last+0x1>
    1dce:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <g_temp_lcd_last+0x2>
    1dd2:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <g_temp_lcd_last+0x3>
    1dd6:	c0 92 42 01 	sts	0x0142, r12	; 0x800142 <g_temp>
    1dda:	d0 92 43 01 	sts	0x0143, r13	; 0x800143 <g_temp+0x1>
    1dde:	e0 92 44 01 	sts	0x0144, r14	; 0x800144 <g_temp+0x2>
    1de2:	f0 92 45 01 	sts	0x0145, r15	; 0x800145 <g_temp+0x3>
    1de6:	8f bf       	out	0x3f, r24	; 63
    1de8:	c7 01       	movw	r24, r14
    1dea:	b6 01       	movw	r22, r12
    1dec:	d3 d0       	rcall	.+422    	; 0x1f94 <__subsf3>
    1dee:	a3 d1       	rcall	.+838    	; 0x2136 <__fixsfsi>
    1df0:	9b 01       	movw	r18, r22
    1df2:	77 23       	and	r23, r23
    1df4:	24 f4       	brge	.+8      	; 0x1dfe <s_task+0x16a>
    1df6:	22 27       	eor	r18, r18
    1df8:	33 27       	eor	r19, r19
    1dfa:	26 1b       	sub	r18, r22
    1dfc:	37 0b       	sbc	r19, r23
    1dfe:	b9 01       	movw	r22, r18
    1e00:	33 0f       	add	r19, r19
    1e02:	88 0b       	sbc	r24, r24
    1e04:	99 0b       	sbc	r25, r25
    1e06:	ca d1       	rcall	.+916    	; 0x219c <__floatsisf>
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e8       	ldi	r20, 0x80	; 128
    1e0e:	5f e3       	ldi	r21, 0x3F	; 63
    1e10:	75 d2       	rcall	.+1258   	; 0x22fc <__gesf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	6c f4       	brge	.+26     	; 0x1e30 <s_task+0x19c>
    1e16:	8f b7       	in	r24, 0x3f	; 63
    1e18:	8a 83       	std	Y+2, r24	; 0x02
    1e1a:	f8 94       	cli
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	c0 92 3e 01 	sts	0x013E, r12	; 0x80013e <g_temp_lcd_last>
    1e22:	d0 92 3f 01 	sts	0x013F, r13	; 0x80013f <g_temp_lcd_last+0x1>
    1e26:	e0 92 40 01 	sts	0x0140, r14	; 0x800140 <g_temp_lcd_last+0x2>
    1e2a:	f0 92 41 01 	sts	0x0141, r15	; 0x800141 <g_temp_lcd_last+0x3>
    1e2e:	8f bf       	out	0x3f, r24	; 63
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	ff 90       	pop	r15
    1e3e:	ef 90       	pop	r14
    1e40:	df 90       	pop	r13
    1e42:	cf 90       	pop	r12
    1e44:	bf 90       	pop	r11
    1e46:	af 90       	pop	r10
    1e48:	9f 90       	pop	r9
    1e4a:	8f 90       	pop	r8
    1e4c:	7f 90       	pop	r7
    1e4e:	6f 90       	pop	r6
    1e50:	5f 90       	pop	r5
    1e52:	4f 90       	pop	r4
    1e54:	08 95       	ret

00001e56 <main>:
}

int main (void)
{
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	1f 92       	push	r1
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts,
	 * most critical pins are handled first.
	 */

	PORTC = 0b01111110;		// PC0: LDR-ADC in-NoPU, PC1: SW_I in-PU, PC2: SW_Q in-PU, PC3: LCD-CS out-HI
    1e60:	8e e7       	ldi	r24, 0x7E	; 126
    1e62:	88 b9       	out	0x08, r24	; 8
	DDRC  = 0b00001000;		// PC4: I2C-SDA in-PU-AF-TWI, PC5: I2C-SCL in-PU-AF-TWI, PC6: RESET in-PU, PC7: -
    1e64:	88 e0       	ldi	r24, 0x08	; 8
    1e66:	87 b9       	out	0x07, r24	; 7

	PORTB = 0b00010100;		// PB0: LCD-CD out-LO, PB1: AUDIO out-AF-OC1A, PB2: SW_P in-PU, PB3: LCDBL out-AF-OC2A,
    1e68:	84 e1       	ldi	r24, 0x14	; 20
    1e6a:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0b11111011;		// PB4: LCD-R/!W out-HI, PB5: LCD-EN out-LO, PB6: LEDRD out-LO, LEDGN out-LO
    1e6c:	8b ef       	ldi	r24, 0xFB	; 251
    1e6e:	84 b9       	out	0x04, r24	; 4

	PORTD = 0xff;			// PD0..PD7: LCD-D0..LCD-D7 in-PU
    1e70:	8f ef       	ldi	r24, 0xFF	; 255
    1e72:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x00;
    1e74:	1a b8       	out	0x0a, r1	; 10

	// Analog input: Digital Disable Register
	DIDR0 = 0b00000001;		// PC0: LDR-ADC
    1e76:	0e e7       	ldi	r16, 0x7E	; 126
    1e78:	10 e0       	ldi	r17, 0x00	; 0
    1e7a:	ff 24       	eor	r15, r15
    1e7c:	f3 94       	inc	r15
    1e7e:	f8 01       	movw	r30, r16
    1e80:	f0 82       	st	Z, r15

	/* Rapid I/O settings */
	s_io_preinit();

	/* Init of sub-modules */
	sysclk_init();	PRR = 0b11101011;			// For debugging this module has to be powered on, again
    1e82:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <sysclk_init>
    1e86:	e4 e6       	ldi	r30, 0x64	; 100
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	8b ee       	ldi	r24, 0xEB	; 235
    1e8c:	80 83       	st	Z, r24
#if 0
	GTCCR = _BV(TSM)							// Timer Synchronous Mode active
		  | _BV(PSRASY)							// Timer 2   prescaler is synced
		  | _BV(PSRSYNC);						// Timer 0/1 prescaler is synced
#else
	GTCCR = 0;
    1e8e:	13 bc       	out	0x23, r1	; 35
	}

	/* TC1 - OC1A: Audio output @ 16-bit counter PWM, used: 10-bit resolution - overflows with 15625 Hz */
	{
		//sysclk_enable_module(POWER_RED_REG0, PRTIM1);
		PRR &= ~_BV(PRTIM1);
    1e90:	80 81       	ld	r24, Z
    1e92:	87 7f       	andi	r24, 0xF7	; 247
    1e94:	80 83       	st	Z, r24

		TCCR1A  = (0b10  << COM1A0)		 		// HI --> LO when compare value is reached - non-inverted PWM mode
    1e96:	93 e8       	ldi	r25, 0x83	; 131
    1e98:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				| (0b11  << WGM10);				// WGM: 0b0111 = Fast PWM 10 bit
//				| (0b10  << WGM10);				// WGM: 0b1110 = Fast PWM, TOP = ICR1

		TCCR1B  = ( 0b01 << WGM12)
    1e9c:	89 e0       	ldi	r24, 0x09	; 9
    1e9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
#if 0
		ICR1H	=       0b11           ;
		ICR1L	=            0b11111111;
#endif

		TCNT1H  = 0b00000000           ;		// Clear current value for synchronous start (when restarting without reset)
    1ea2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		barrier();
		TCNT1L	=            0b00000000;
    1ea6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

		OCR1AH  =       0b10           ;		// Mid-range compare value for zero audio output
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL  =            0b00000000;
    1eb0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

		TIMSK1  = 0;							// No interrupts (when restarting without reset)
    1eb4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		TIFR1   = 0b00100111;					// Clear all flags (when restarting without reset)
    1eb8:	87 e2       	ldi	r24, 0x27	; 39
    1eba:	86 bb       	out	0x16, r24	; 22
	}

	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		//sysclk_enable_module(POWER_RED_REG0, PRTIM2);
		PRR &= ~_BV(PRTIM2);
    1ebc:	80 81       	ld	r24, Z
    1ebe:	8f 7b       	andi	r24, 0xBF	; 191
    1ec0:	80 83       	st	Z, r24

		TCCR2A  = (0b10  << COM2A0)				// HI --> LO when compare value is reached - non-inverted PWM mode
    1ec2:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				| (0b11  << WGM20);				// WGM: 0b011 = Fast PWM mode 8 bit

		TCCR2B  = ( 0b0  << WGM22)
    1ec6:	87 e0       	ldi	r24, 0x07	; 7
    1ec8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
				| (0b111 << CS20);				// CLKio DIV 1024 = 15625 Hz

		TCNT2   = 0;							// Clear current value for synchronous start (when restarting without reset)
    1ecc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

		OCR2A   = 0x40;							// LCD backlight dimmed down to 25% 
    1ed0:	90 e4       	ldi	r25, 0x40	; 64
    1ed2:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

		TIMSK2  = 0;							// No interrupts (when restarting without reset)
    1ed6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		TIFR2   = 0b00000111;					// Clear all flags (when restarting without reset)
    1eda:	87 bb       	out	0x17, r24	; 23

		ASSR    = 0;							// No async. TOSC1 mode
    1edc:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>


static void s_adc_init(void)
{
	//sysclk_enable_module(POWER_RED_REG0, PRADC);	// enable ADC sub-module
	PRR &= ~_BV(PRADC);
    1ee0:	80 81       	ld	r24, Z
    1ee2:	8e 7f       	andi	r24, 0xFE	; 254
    1ee4:	80 83       	st	Z, r24
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	f0 82       	st	Z, r15
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    1eea:	ea e7       	ldi	r30, 0x7A	; 122
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	87 e8       	ldi	r24, 0x87	; 135
    1ef0:	80 83       	st	Z, r24
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    1ef2:	80 ec       	ldi	r24, 0xC0	; 192
    1ef4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    1ef8:	ab e7       	ldi	r26, 0x7B	; 123
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	8c 91       	ld	r24, X
    1efe:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
    1f00:	86 60       	ori	r24, 0x06	; 6
	ADC_ADTS_REG = temp;
    1f02:	8c 93       	st	X, r24
}

/*  \brief Enable ADC interrupt */
static inline void adc_enable_interrupt(void)
{
	ADCSRA |= (1 << ADIE);
    1f04:	80 81       	ld	r24, Z
    1f06:	88 60       	ori	r24, 0x08	; 8
    1f08:	80 83       	st	Z, r24
}

/*  \brief Start ADC conversion */
static inline void adc_start_conversion(void)
{
	ADCSRA |= (1 << ADSC);
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 64       	ori	r24, 0x40	; 64
    1f0e:	80 83       	st	Z, r24
	ioport_init();
	s_tc_init();
	s_adc_init();

	/* I/O pins go active here */
	board_init();
    1f10:	c0 de       	rcall	.-640    	; 0x1c92 <board_init>
//@}
static inline reset_cause_t reset_cause_get_causes(void)
{
#if (MEGA_XX4 ||MEGA_XX4_A || MEGA_XX8 || MEGA_XX8_A || \
	MEGA_XX || MEGA_XX_UN2 || MEGA_XX0_1 || MEGA_RF || MEGA_UNCATEGORIZED) && !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t temp_mcsr = MCUSR ;
    1f12:	84 b7       	in	r24, 0x34	; 52
    1f14:	98 2f       	mov	r25, r24
    1f16:	97 70       	andi	r25, 0x07	; 7

	reset_cause_t rc = reset_cause_get_causes();
	if (rc & CHIP_RESET_CAUSE_EXTRST	||
		rc & CHIP_RESET_CAUSE_BOD_CPU	||
    1f18:	11 f4       	brne	.+4      	; 0x1f1e <main+0xc8>
		rc & CHIP_RESET_CAUSE_POR		||
    1f1a:	81 11       	cpse	r24, r1
    1f1c:	30 c0       	rjmp	.+96     	; 0x1f7e <main+0x128>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1f1e:	8f b7       	in	r24, 0x3f	; 63
    1f20:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1f22:	f8 94       	cli
	return flags;
    1f24:	89 81       	ldd	r24, Y+1	; 0x01

static void s_reset_global_vars(void)
{
	irqflags_t flags	= cpu_irq_save();

	g_adc_state			= ADC_STATE_PRE_LDR;
    1f26:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <g_adc_state>
	g_adc_ldr			= 0.f;
    1f2a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <g_adc_ldr>
    1f2e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <g_adc_ldr+0x1>
    1f32:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <g_adc_ldr+0x2>
    1f36:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <g_adc_ldr+0x3>
	g_adc_ldr_last		= 0.f;
    1f3a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <g_adc_ldr_last>
    1f3e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <g_adc_ldr_last+0x1>
    1f42:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <g_adc_ldr_last+0x2>
    1f46:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <g_adc_ldr_last+0x3>
	g_adc_temp			= 0.f;
    1f4a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <g_adc_temp>
    1f4e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <g_adc_temp+0x1>
    1f52:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <g_adc_temp+0x2>
    1f56:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <g_adc_temp+0x3>
	g_temp				= 0.f;
    1f5a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <g_temp>
    1f5e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <g_temp+0x1>
    1f62:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <g_temp+0x2>
    1f66:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <g_temp+0x3>
	g_temp_lcd_last		= 0.f;
    1f6a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <g_temp_lcd_last>
    1f6e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <g_temp_lcd_last+0x1>
    1f72:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <g_temp_lcd_last+0x2>
    1f76:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <g_temp_lcd_last+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f7a:	8f bf       	out	0x3f, r24	; 63
    1f7c:	03 c0       	rjmp	.+6      	; 0x1f84 <main+0x12e>
		rc & CHIP_RESET_CAUSE_POR		||
		!rc) {
		s_reset_global_vars();
	} else {
		/* DEBUG */
		asm_break();
    1f7e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <asm_break>
		nop();
    1f82:	00 00       	nop
	}

	//s_twi_init();

	/* All interrupt sources prepared here - IRQ activation */
	cpu_irq_enable();
    1f84:	78 94       	sei
	/* TC0: not in use */
	/* TC1: Audio output @ 16-bit counter PWM, used: 10-bit resolution */
	/* TC2: LCD backlight w/ 8-bit resolution */
	{
		/* Timer Synchronous Mode - trigger */
		GTCCR = 0;								// trigger the sync for all counters
    1f86:	13 bc       	out	0x23, r1	; 35

	/* Start of sub-modules */
	s_tc_start();								// All clocks and PWM timers start here

	/* Initialize external components */
	lcd_init();
    1f88:	3f db       	rcall	.-2434   	; 0x1608 <lcd_init>

	/* main loop */
	runmode = 1;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <runmode>
    while (runmode) {
	    s_task();
    1f90:	81 de       	rcall	.-766    	; 0x1c94 <s_task>
    1f92:	fe cf       	rjmp	.-4      	; 0x1f90 <main+0x13a>

00001f94 <__subsf3>:
    1f94:	50 58       	subi	r21, 0x80	; 128

00001f96 <__addsf3>:
    1f96:	bb 27       	eor	r27, r27
    1f98:	aa 27       	eor	r26, r26
    1f9a:	0e d0       	rcall	.+28     	; 0x1fb8 <__addsf3x>
    1f9c:	75 c1       	rjmp	.+746    	; 0x2288 <__fp_round>
    1f9e:	66 d1       	rcall	.+716    	; 0x226c <__fp_pscA>
    1fa0:	30 f0       	brcs	.+12     	; 0x1fae <__addsf3+0x18>
    1fa2:	6b d1       	rcall	.+726    	; 0x227a <__fp_pscB>
    1fa4:	20 f0       	brcs	.+8      	; 0x1fae <__addsf3+0x18>
    1fa6:	31 f4       	brne	.+12     	; 0x1fb4 <__addsf3+0x1e>
    1fa8:	9f 3f       	cpi	r25, 0xFF	; 255
    1faa:	11 f4       	brne	.+4      	; 0x1fb0 <__addsf3+0x1a>
    1fac:	1e f4       	brtc	.+6      	; 0x1fb4 <__addsf3+0x1e>
    1fae:	5b c1       	rjmp	.+694    	; 0x2266 <__fp_nan>
    1fb0:	0e f4       	brtc	.+2      	; 0x1fb4 <__addsf3+0x1e>
    1fb2:	e0 95       	com	r30
    1fb4:	e7 fb       	bst	r30, 7
    1fb6:	51 c1       	rjmp	.+674    	; 0x225a <__fp_inf>

00001fb8 <__addsf3x>:
    1fb8:	e9 2f       	mov	r30, r25
    1fba:	77 d1       	rcall	.+750    	; 0x22aa <__fp_split3>
    1fbc:	80 f3       	brcs	.-32     	; 0x1f9e <__addsf3+0x8>
    1fbe:	ba 17       	cp	r27, r26
    1fc0:	62 07       	cpc	r22, r18
    1fc2:	73 07       	cpc	r23, r19
    1fc4:	84 07       	cpc	r24, r20
    1fc6:	95 07       	cpc	r25, r21
    1fc8:	18 f0       	brcs	.+6      	; 0x1fd0 <__addsf3x+0x18>
    1fca:	71 f4       	brne	.+28     	; 0x1fe8 <__addsf3x+0x30>
    1fcc:	9e f5       	brtc	.+102    	; 0x2034 <__addsf3x+0x7c>
    1fce:	8f c1       	rjmp	.+798    	; 0x22ee <__fp_zero>
    1fd0:	0e f4       	brtc	.+2      	; 0x1fd4 <__addsf3x+0x1c>
    1fd2:	e0 95       	com	r30
    1fd4:	0b 2e       	mov	r0, r27
    1fd6:	ba 2f       	mov	r27, r26
    1fd8:	a0 2d       	mov	r26, r0
    1fda:	0b 01       	movw	r0, r22
    1fdc:	b9 01       	movw	r22, r18
    1fde:	90 01       	movw	r18, r0
    1fe0:	0c 01       	movw	r0, r24
    1fe2:	ca 01       	movw	r24, r20
    1fe4:	a0 01       	movw	r20, r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	ff 27       	eor	r31, r31
    1fea:	59 1b       	sub	r21, r25
    1fec:	99 f0       	breq	.+38     	; 0x2014 <__addsf3x+0x5c>
    1fee:	59 3f       	cpi	r21, 0xF9	; 249
    1ff0:	50 f4       	brcc	.+20     	; 0x2006 <__addsf3x+0x4e>
    1ff2:	50 3e       	cpi	r21, 0xE0	; 224
    1ff4:	68 f1       	brcs	.+90     	; 0x2050 <__addsf3x+0x98>
    1ff6:	1a 16       	cp	r1, r26
    1ff8:	f0 40       	sbci	r31, 0x00	; 0
    1ffa:	a2 2f       	mov	r26, r18
    1ffc:	23 2f       	mov	r18, r19
    1ffe:	34 2f       	mov	r19, r20
    2000:	44 27       	eor	r20, r20
    2002:	58 5f       	subi	r21, 0xF8	; 248
    2004:	f3 cf       	rjmp	.-26     	; 0x1fec <__addsf3x+0x34>
    2006:	46 95       	lsr	r20
    2008:	37 95       	ror	r19
    200a:	27 95       	ror	r18
    200c:	a7 95       	ror	r26
    200e:	f0 40       	sbci	r31, 0x00	; 0
    2010:	53 95       	inc	r21
    2012:	c9 f7       	brne	.-14     	; 0x2006 <__addsf3x+0x4e>
    2014:	7e f4       	brtc	.+30     	; 0x2034 <__addsf3x+0x7c>
    2016:	1f 16       	cp	r1, r31
    2018:	ba 0b       	sbc	r27, r26
    201a:	62 0b       	sbc	r22, r18
    201c:	73 0b       	sbc	r23, r19
    201e:	84 0b       	sbc	r24, r20
    2020:	ba f0       	brmi	.+46     	; 0x2050 <__addsf3x+0x98>
    2022:	91 50       	subi	r25, 0x01	; 1
    2024:	a1 f0       	breq	.+40     	; 0x204e <__addsf3x+0x96>
    2026:	ff 0f       	add	r31, r31
    2028:	bb 1f       	adc	r27, r27
    202a:	66 1f       	adc	r22, r22
    202c:	77 1f       	adc	r23, r23
    202e:	88 1f       	adc	r24, r24
    2030:	c2 f7       	brpl	.-16     	; 0x2022 <__addsf3x+0x6a>
    2032:	0e c0       	rjmp	.+28     	; 0x2050 <__addsf3x+0x98>
    2034:	ba 0f       	add	r27, r26
    2036:	62 1f       	adc	r22, r18
    2038:	73 1f       	adc	r23, r19
    203a:	84 1f       	adc	r24, r20
    203c:	48 f4       	brcc	.+18     	; 0x2050 <__addsf3x+0x98>
    203e:	87 95       	ror	r24
    2040:	77 95       	ror	r23
    2042:	67 95       	ror	r22
    2044:	b7 95       	ror	r27
    2046:	f7 95       	ror	r31
    2048:	9e 3f       	cpi	r25, 0xFE	; 254
    204a:	08 f0       	brcs	.+2      	; 0x204e <__addsf3x+0x96>
    204c:	b3 cf       	rjmp	.-154    	; 0x1fb4 <__addsf3+0x1e>
    204e:	93 95       	inc	r25
    2050:	88 0f       	add	r24, r24
    2052:	08 f0       	brcs	.+2      	; 0x2056 <__addsf3x+0x9e>
    2054:	99 27       	eor	r25, r25
    2056:	ee 0f       	add	r30, r30
    2058:	97 95       	ror	r25
    205a:	87 95       	ror	r24
    205c:	08 95       	ret

0000205e <__cmpsf2>:
    205e:	d9 d0       	rcall	.+434    	; 0x2212 <__fp_cmp>
    2060:	08 f4       	brcc	.+2      	; 0x2064 <__cmpsf2+0x6>
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	08 95       	ret

00002066 <__divsf3>:
    2066:	0c d0       	rcall	.+24     	; 0x2080 <__divsf3x>
    2068:	0f c1       	rjmp	.+542    	; 0x2288 <__fp_round>
    206a:	07 d1       	rcall	.+526    	; 0x227a <__fp_pscB>
    206c:	40 f0       	brcs	.+16     	; 0x207e <__divsf3+0x18>
    206e:	fe d0       	rcall	.+508    	; 0x226c <__fp_pscA>
    2070:	30 f0       	brcs	.+12     	; 0x207e <__divsf3+0x18>
    2072:	21 f4       	brne	.+8      	; 0x207c <__divsf3+0x16>
    2074:	5f 3f       	cpi	r21, 0xFF	; 255
    2076:	19 f0       	breq	.+6      	; 0x207e <__divsf3+0x18>
    2078:	f0 c0       	rjmp	.+480    	; 0x225a <__fp_inf>
    207a:	51 11       	cpse	r21, r1
    207c:	39 c1       	rjmp	.+626    	; 0x22f0 <__fp_szero>
    207e:	f3 c0       	rjmp	.+486    	; 0x2266 <__fp_nan>

00002080 <__divsf3x>:
    2080:	14 d1       	rcall	.+552    	; 0x22aa <__fp_split3>
    2082:	98 f3       	brcs	.-26     	; 0x206a <__divsf3+0x4>

00002084 <__divsf3_pse>:
    2084:	99 23       	and	r25, r25
    2086:	c9 f3       	breq	.-14     	; 0x207a <__divsf3+0x14>
    2088:	55 23       	and	r21, r21
    208a:	b1 f3       	breq	.-20     	; 0x2078 <__divsf3+0x12>
    208c:	95 1b       	sub	r25, r21
    208e:	55 0b       	sbc	r21, r21
    2090:	bb 27       	eor	r27, r27
    2092:	aa 27       	eor	r26, r26
    2094:	62 17       	cp	r22, r18
    2096:	73 07       	cpc	r23, r19
    2098:	84 07       	cpc	r24, r20
    209a:	38 f0       	brcs	.+14     	; 0x20aa <__divsf3_pse+0x26>
    209c:	9f 5f       	subi	r25, 0xFF	; 255
    209e:	5f 4f       	sbci	r21, 0xFF	; 255
    20a0:	22 0f       	add	r18, r18
    20a2:	33 1f       	adc	r19, r19
    20a4:	44 1f       	adc	r20, r20
    20a6:	aa 1f       	adc	r26, r26
    20a8:	a9 f3       	breq	.-22     	; 0x2094 <__divsf3_pse+0x10>
    20aa:	33 d0       	rcall	.+102    	; 0x2112 <__divsf3_pse+0x8e>
    20ac:	0e 2e       	mov	r0, r30
    20ae:	3a f0       	brmi	.+14     	; 0x20be <__divsf3_pse+0x3a>
    20b0:	e0 e8       	ldi	r30, 0x80	; 128
    20b2:	30 d0       	rcall	.+96     	; 0x2114 <__divsf3_pse+0x90>
    20b4:	91 50       	subi	r25, 0x01	; 1
    20b6:	50 40       	sbci	r21, 0x00	; 0
    20b8:	e6 95       	lsr	r30
    20ba:	00 1c       	adc	r0, r0
    20bc:	ca f7       	brpl	.-14     	; 0x20b0 <__divsf3_pse+0x2c>
    20be:	29 d0       	rcall	.+82     	; 0x2112 <__divsf3_pse+0x8e>
    20c0:	fe 2f       	mov	r31, r30
    20c2:	27 d0       	rcall	.+78     	; 0x2112 <__divsf3_pse+0x8e>
    20c4:	66 0f       	add	r22, r22
    20c6:	77 1f       	adc	r23, r23
    20c8:	88 1f       	adc	r24, r24
    20ca:	bb 1f       	adc	r27, r27
    20cc:	26 17       	cp	r18, r22
    20ce:	37 07       	cpc	r19, r23
    20d0:	48 07       	cpc	r20, r24
    20d2:	ab 07       	cpc	r26, r27
    20d4:	b0 e8       	ldi	r27, 0x80	; 128
    20d6:	09 f0       	breq	.+2      	; 0x20da <__divsf3_pse+0x56>
    20d8:	bb 0b       	sbc	r27, r27
    20da:	80 2d       	mov	r24, r0
    20dc:	bf 01       	movw	r22, r30
    20de:	ff 27       	eor	r31, r31
    20e0:	93 58       	subi	r25, 0x83	; 131
    20e2:	5f 4f       	sbci	r21, 0xFF	; 255
    20e4:	2a f0       	brmi	.+10     	; 0x20f0 <__divsf3_pse+0x6c>
    20e6:	9e 3f       	cpi	r25, 0xFE	; 254
    20e8:	51 05       	cpc	r21, r1
    20ea:	68 f0       	brcs	.+26     	; 0x2106 <__divsf3_pse+0x82>
    20ec:	b6 c0       	rjmp	.+364    	; 0x225a <__fp_inf>
    20ee:	00 c1       	rjmp	.+512    	; 0x22f0 <__fp_szero>
    20f0:	5f 3f       	cpi	r21, 0xFF	; 255
    20f2:	ec f3       	brlt	.-6      	; 0x20ee <__divsf3_pse+0x6a>
    20f4:	98 3e       	cpi	r25, 0xE8	; 232
    20f6:	dc f3       	brlt	.-10     	; 0x20ee <__divsf3_pse+0x6a>
    20f8:	86 95       	lsr	r24
    20fa:	77 95       	ror	r23
    20fc:	67 95       	ror	r22
    20fe:	b7 95       	ror	r27
    2100:	f7 95       	ror	r31
    2102:	9f 5f       	subi	r25, 0xFF	; 255
    2104:	c9 f7       	brne	.-14     	; 0x20f8 <__divsf3_pse+0x74>
    2106:	88 0f       	add	r24, r24
    2108:	91 1d       	adc	r25, r1
    210a:	96 95       	lsr	r25
    210c:	87 95       	ror	r24
    210e:	97 f9       	bld	r25, 7
    2110:	08 95       	ret
    2112:	e1 e0       	ldi	r30, 0x01	; 1
    2114:	66 0f       	add	r22, r22
    2116:	77 1f       	adc	r23, r23
    2118:	88 1f       	adc	r24, r24
    211a:	bb 1f       	adc	r27, r27
    211c:	62 17       	cp	r22, r18
    211e:	73 07       	cpc	r23, r19
    2120:	84 07       	cpc	r24, r20
    2122:	ba 07       	cpc	r27, r26
    2124:	20 f0       	brcs	.+8      	; 0x212e <__divsf3_pse+0xaa>
    2126:	62 1b       	sub	r22, r18
    2128:	73 0b       	sbc	r23, r19
    212a:	84 0b       	sbc	r24, r20
    212c:	ba 0b       	sbc	r27, r26
    212e:	ee 1f       	adc	r30, r30
    2130:	88 f7       	brcc	.-30     	; 0x2114 <__divsf3_pse+0x90>
    2132:	e0 95       	com	r30
    2134:	08 95       	ret

00002136 <__fixsfsi>:
    2136:	04 d0       	rcall	.+8      	; 0x2140 <__fixunssfsi>
    2138:	68 94       	set
    213a:	b1 11       	cpse	r27, r1
    213c:	d9 c0       	rjmp	.+434    	; 0x22f0 <__fp_szero>
    213e:	08 95       	ret

00002140 <__fixunssfsi>:
    2140:	bc d0       	rcall	.+376    	; 0x22ba <__fp_splitA>
    2142:	88 f0       	brcs	.+34     	; 0x2166 <__fixunssfsi+0x26>
    2144:	9f 57       	subi	r25, 0x7F	; 127
    2146:	90 f0       	brcs	.+36     	; 0x216c <__fixunssfsi+0x2c>
    2148:	b9 2f       	mov	r27, r25
    214a:	99 27       	eor	r25, r25
    214c:	b7 51       	subi	r27, 0x17	; 23
    214e:	a0 f0       	brcs	.+40     	; 0x2178 <__fixunssfsi+0x38>
    2150:	d1 f0       	breq	.+52     	; 0x2186 <__fixunssfsi+0x46>
    2152:	66 0f       	add	r22, r22
    2154:	77 1f       	adc	r23, r23
    2156:	88 1f       	adc	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	1a f0       	brmi	.+6      	; 0x2162 <__fixunssfsi+0x22>
    215c:	ba 95       	dec	r27
    215e:	c9 f7       	brne	.-14     	; 0x2152 <__fixunssfsi+0x12>
    2160:	12 c0       	rjmp	.+36     	; 0x2186 <__fixunssfsi+0x46>
    2162:	b1 30       	cpi	r27, 0x01	; 1
    2164:	81 f0       	breq	.+32     	; 0x2186 <__fixunssfsi+0x46>
    2166:	c3 d0       	rcall	.+390    	; 0x22ee <__fp_zero>
    2168:	b1 e0       	ldi	r27, 0x01	; 1
    216a:	08 95       	ret
    216c:	c0 c0       	rjmp	.+384    	; 0x22ee <__fp_zero>
    216e:	67 2f       	mov	r22, r23
    2170:	78 2f       	mov	r23, r24
    2172:	88 27       	eor	r24, r24
    2174:	b8 5f       	subi	r27, 0xF8	; 248
    2176:	39 f0       	breq	.+14     	; 0x2186 <__fixunssfsi+0x46>
    2178:	b9 3f       	cpi	r27, 0xF9	; 249
    217a:	cc f3       	brlt	.-14     	; 0x216e <__fixunssfsi+0x2e>
    217c:	86 95       	lsr	r24
    217e:	77 95       	ror	r23
    2180:	67 95       	ror	r22
    2182:	b3 95       	inc	r27
    2184:	d9 f7       	brne	.-10     	; 0x217c <__fixunssfsi+0x3c>
    2186:	3e f4       	brtc	.+14     	; 0x2196 <__fixunssfsi+0x56>
    2188:	90 95       	com	r25
    218a:	80 95       	com	r24
    218c:	70 95       	com	r23
    218e:	61 95       	neg	r22
    2190:	7f 4f       	sbci	r23, 0xFF	; 255
    2192:	8f 4f       	sbci	r24, 0xFF	; 255
    2194:	9f 4f       	sbci	r25, 0xFF	; 255
    2196:	08 95       	ret

00002198 <__floatunsisf>:
    2198:	e8 94       	clt
    219a:	09 c0       	rjmp	.+18     	; 0x21ae <__floatsisf+0x12>

0000219c <__floatsisf>:
    219c:	97 fb       	bst	r25, 7
    219e:	3e f4       	brtc	.+14     	; 0x21ae <__floatsisf+0x12>
    21a0:	90 95       	com	r25
    21a2:	80 95       	com	r24
    21a4:	70 95       	com	r23
    21a6:	61 95       	neg	r22
    21a8:	7f 4f       	sbci	r23, 0xFF	; 255
    21aa:	8f 4f       	sbci	r24, 0xFF	; 255
    21ac:	9f 4f       	sbci	r25, 0xFF	; 255
    21ae:	99 23       	and	r25, r25
    21b0:	a9 f0       	breq	.+42     	; 0x21dc <__floatsisf+0x40>
    21b2:	f9 2f       	mov	r31, r25
    21b4:	96 e9       	ldi	r25, 0x96	; 150
    21b6:	bb 27       	eor	r27, r27
    21b8:	93 95       	inc	r25
    21ba:	f6 95       	lsr	r31
    21bc:	87 95       	ror	r24
    21be:	77 95       	ror	r23
    21c0:	67 95       	ror	r22
    21c2:	b7 95       	ror	r27
    21c4:	f1 11       	cpse	r31, r1
    21c6:	f8 cf       	rjmp	.-16     	; 0x21b8 <__floatsisf+0x1c>
    21c8:	fa f4       	brpl	.+62     	; 0x2208 <__floatsisf+0x6c>
    21ca:	bb 0f       	add	r27, r27
    21cc:	11 f4       	brne	.+4      	; 0x21d2 <__floatsisf+0x36>
    21ce:	60 ff       	sbrs	r22, 0
    21d0:	1b c0       	rjmp	.+54     	; 0x2208 <__floatsisf+0x6c>
    21d2:	6f 5f       	subi	r22, 0xFF	; 255
    21d4:	7f 4f       	sbci	r23, 0xFF	; 255
    21d6:	8f 4f       	sbci	r24, 0xFF	; 255
    21d8:	9f 4f       	sbci	r25, 0xFF	; 255
    21da:	16 c0       	rjmp	.+44     	; 0x2208 <__floatsisf+0x6c>
    21dc:	88 23       	and	r24, r24
    21de:	11 f0       	breq	.+4      	; 0x21e4 <__floatsisf+0x48>
    21e0:	96 e9       	ldi	r25, 0x96	; 150
    21e2:	11 c0       	rjmp	.+34     	; 0x2206 <__floatsisf+0x6a>
    21e4:	77 23       	and	r23, r23
    21e6:	21 f0       	breq	.+8      	; 0x21f0 <__floatsisf+0x54>
    21e8:	9e e8       	ldi	r25, 0x8E	; 142
    21ea:	87 2f       	mov	r24, r23
    21ec:	76 2f       	mov	r23, r22
    21ee:	05 c0       	rjmp	.+10     	; 0x21fa <__floatsisf+0x5e>
    21f0:	66 23       	and	r22, r22
    21f2:	71 f0       	breq	.+28     	; 0x2210 <__floatsisf+0x74>
    21f4:	96 e8       	ldi	r25, 0x86	; 134
    21f6:	86 2f       	mov	r24, r22
    21f8:	70 e0       	ldi	r23, 0x00	; 0
    21fa:	60 e0       	ldi	r22, 0x00	; 0
    21fc:	2a f0       	brmi	.+10     	; 0x2208 <__floatsisf+0x6c>
    21fe:	9a 95       	dec	r25
    2200:	66 0f       	add	r22, r22
    2202:	77 1f       	adc	r23, r23
    2204:	88 1f       	adc	r24, r24
    2206:	da f7       	brpl	.-10     	; 0x21fe <__floatsisf+0x62>
    2208:	88 0f       	add	r24, r24
    220a:	96 95       	lsr	r25
    220c:	87 95       	ror	r24
    220e:	97 f9       	bld	r25, 7
    2210:	08 95       	ret

00002212 <__fp_cmp>:
    2212:	99 0f       	add	r25, r25
    2214:	00 08       	sbc	r0, r0
    2216:	55 0f       	add	r21, r21
    2218:	aa 0b       	sbc	r26, r26
    221a:	e0 e8       	ldi	r30, 0x80	; 128
    221c:	fe ef       	ldi	r31, 0xFE	; 254
    221e:	16 16       	cp	r1, r22
    2220:	17 06       	cpc	r1, r23
    2222:	e8 07       	cpc	r30, r24
    2224:	f9 07       	cpc	r31, r25
    2226:	c0 f0       	brcs	.+48     	; 0x2258 <__fp_cmp+0x46>
    2228:	12 16       	cp	r1, r18
    222a:	13 06       	cpc	r1, r19
    222c:	e4 07       	cpc	r30, r20
    222e:	f5 07       	cpc	r31, r21
    2230:	98 f0       	brcs	.+38     	; 0x2258 <__fp_cmp+0x46>
    2232:	62 1b       	sub	r22, r18
    2234:	73 0b       	sbc	r23, r19
    2236:	84 0b       	sbc	r24, r20
    2238:	95 0b       	sbc	r25, r21
    223a:	39 f4       	brne	.+14     	; 0x224a <__fp_cmp+0x38>
    223c:	0a 26       	eor	r0, r26
    223e:	61 f0       	breq	.+24     	; 0x2258 <__fp_cmp+0x46>
    2240:	23 2b       	or	r18, r19
    2242:	24 2b       	or	r18, r20
    2244:	25 2b       	or	r18, r21
    2246:	21 f4       	brne	.+8      	; 0x2250 <__fp_cmp+0x3e>
    2248:	08 95       	ret
    224a:	0a 26       	eor	r0, r26
    224c:	09 f4       	brne	.+2      	; 0x2250 <__fp_cmp+0x3e>
    224e:	a1 40       	sbci	r26, 0x01	; 1
    2250:	a6 95       	lsr	r26
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	81 1d       	adc	r24, r1
    2256:	81 1d       	adc	r24, r1
    2258:	08 95       	ret

0000225a <__fp_inf>:
    225a:	97 f9       	bld	r25, 7
    225c:	9f 67       	ori	r25, 0x7F	; 127
    225e:	80 e8       	ldi	r24, 0x80	; 128
    2260:	70 e0       	ldi	r23, 0x00	; 0
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	08 95       	ret

00002266 <__fp_nan>:
    2266:	9f ef       	ldi	r25, 0xFF	; 255
    2268:	80 ec       	ldi	r24, 0xC0	; 192
    226a:	08 95       	ret

0000226c <__fp_pscA>:
    226c:	00 24       	eor	r0, r0
    226e:	0a 94       	dec	r0
    2270:	16 16       	cp	r1, r22
    2272:	17 06       	cpc	r1, r23
    2274:	18 06       	cpc	r1, r24
    2276:	09 06       	cpc	r0, r25
    2278:	08 95       	ret

0000227a <__fp_pscB>:
    227a:	00 24       	eor	r0, r0
    227c:	0a 94       	dec	r0
    227e:	12 16       	cp	r1, r18
    2280:	13 06       	cpc	r1, r19
    2282:	14 06       	cpc	r1, r20
    2284:	05 06       	cpc	r0, r21
    2286:	08 95       	ret

00002288 <__fp_round>:
    2288:	09 2e       	mov	r0, r25
    228a:	03 94       	inc	r0
    228c:	00 0c       	add	r0, r0
    228e:	11 f4       	brne	.+4      	; 0x2294 <__fp_round+0xc>
    2290:	88 23       	and	r24, r24
    2292:	52 f0       	brmi	.+20     	; 0x22a8 <__fp_round+0x20>
    2294:	bb 0f       	add	r27, r27
    2296:	40 f4       	brcc	.+16     	; 0x22a8 <__fp_round+0x20>
    2298:	bf 2b       	or	r27, r31
    229a:	11 f4       	brne	.+4      	; 0x22a0 <__fp_round+0x18>
    229c:	60 ff       	sbrs	r22, 0
    229e:	04 c0       	rjmp	.+8      	; 0x22a8 <__fp_round+0x20>
    22a0:	6f 5f       	subi	r22, 0xFF	; 255
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255
    22a4:	8f 4f       	sbci	r24, 0xFF	; 255
    22a6:	9f 4f       	sbci	r25, 0xFF	; 255
    22a8:	08 95       	ret

000022aa <__fp_split3>:
    22aa:	57 fd       	sbrc	r21, 7
    22ac:	90 58       	subi	r25, 0x80	; 128
    22ae:	44 0f       	add	r20, r20
    22b0:	55 1f       	adc	r21, r21
    22b2:	59 f0       	breq	.+22     	; 0x22ca <__fp_splitA+0x10>
    22b4:	5f 3f       	cpi	r21, 0xFF	; 255
    22b6:	71 f0       	breq	.+28     	; 0x22d4 <__fp_splitA+0x1a>
    22b8:	47 95       	ror	r20

000022ba <__fp_splitA>:
    22ba:	88 0f       	add	r24, r24
    22bc:	97 fb       	bst	r25, 7
    22be:	99 1f       	adc	r25, r25
    22c0:	61 f0       	breq	.+24     	; 0x22da <__fp_splitA+0x20>
    22c2:	9f 3f       	cpi	r25, 0xFF	; 255
    22c4:	79 f0       	breq	.+30     	; 0x22e4 <__fp_splitA+0x2a>
    22c6:	87 95       	ror	r24
    22c8:	08 95       	ret
    22ca:	12 16       	cp	r1, r18
    22cc:	13 06       	cpc	r1, r19
    22ce:	14 06       	cpc	r1, r20
    22d0:	55 1f       	adc	r21, r21
    22d2:	f2 cf       	rjmp	.-28     	; 0x22b8 <__fp_split3+0xe>
    22d4:	46 95       	lsr	r20
    22d6:	f1 df       	rcall	.-30     	; 0x22ba <__fp_splitA>
    22d8:	08 c0       	rjmp	.+16     	; 0x22ea <__fp_splitA+0x30>
    22da:	16 16       	cp	r1, r22
    22dc:	17 06       	cpc	r1, r23
    22de:	18 06       	cpc	r1, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	f1 cf       	rjmp	.-30     	; 0x22c6 <__fp_splitA+0xc>
    22e4:	86 95       	lsr	r24
    22e6:	71 05       	cpc	r23, r1
    22e8:	61 05       	cpc	r22, r1
    22ea:	08 94       	sec
    22ec:	08 95       	ret

000022ee <__fp_zero>:
    22ee:	e8 94       	clt

000022f0 <__fp_szero>:
    22f0:	bb 27       	eor	r27, r27
    22f2:	66 27       	eor	r22, r22
    22f4:	77 27       	eor	r23, r23
    22f6:	cb 01       	movw	r24, r22
    22f8:	97 f9       	bld	r25, 7
    22fa:	08 95       	ret

000022fc <__gesf2>:
    22fc:	8a df       	rcall	.-236    	; 0x2212 <__fp_cmp>
    22fe:	08 f4       	brcc	.+2      	; 0x2302 <__gesf2+0x6>
    2300:	8f ef       	ldi	r24, 0xFF	; 255
    2302:	08 95       	ret

00002304 <__mulsf3>:
    2304:	0b d0       	rcall	.+22     	; 0x231c <__mulsf3x>
    2306:	c0 cf       	rjmp	.-128    	; 0x2288 <__fp_round>
    2308:	b1 df       	rcall	.-158    	; 0x226c <__fp_pscA>
    230a:	28 f0       	brcs	.+10     	; 0x2316 <__mulsf3+0x12>
    230c:	b6 df       	rcall	.-148    	; 0x227a <__fp_pscB>
    230e:	18 f0       	brcs	.+6      	; 0x2316 <__mulsf3+0x12>
    2310:	95 23       	and	r25, r21
    2312:	09 f0       	breq	.+2      	; 0x2316 <__mulsf3+0x12>
    2314:	a2 cf       	rjmp	.-188    	; 0x225a <__fp_inf>
    2316:	a7 cf       	rjmp	.-178    	; 0x2266 <__fp_nan>
    2318:	11 24       	eor	r1, r1
    231a:	ea cf       	rjmp	.-44     	; 0x22f0 <__fp_szero>

0000231c <__mulsf3x>:
    231c:	c6 df       	rcall	.-116    	; 0x22aa <__fp_split3>
    231e:	a0 f3       	brcs	.-24     	; 0x2308 <__mulsf3+0x4>

00002320 <__mulsf3_pse>:
    2320:	95 9f       	mul	r25, r21
    2322:	d1 f3       	breq	.-12     	; 0x2318 <__mulsf3+0x14>
    2324:	95 0f       	add	r25, r21
    2326:	50 e0       	ldi	r21, 0x00	; 0
    2328:	55 1f       	adc	r21, r21
    232a:	62 9f       	mul	r22, r18
    232c:	f0 01       	movw	r30, r0
    232e:	72 9f       	mul	r23, r18
    2330:	bb 27       	eor	r27, r27
    2332:	f0 0d       	add	r31, r0
    2334:	b1 1d       	adc	r27, r1
    2336:	63 9f       	mul	r22, r19
    2338:	aa 27       	eor	r26, r26
    233a:	f0 0d       	add	r31, r0
    233c:	b1 1d       	adc	r27, r1
    233e:	aa 1f       	adc	r26, r26
    2340:	64 9f       	mul	r22, r20
    2342:	66 27       	eor	r22, r22
    2344:	b0 0d       	add	r27, r0
    2346:	a1 1d       	adc	r26, r1
    2348:	66 1f       	adc	r22, r22
    234a:	82 9f       	mul	r24, r18
    234c:	22 27       	eor	r18, r18
    234e:	b0 0d       	add	r27, r0
    2350:	a1 1d       	adc	r26, r1
    2352:	62 1f       	adc	r22, r18
    2354:	73 9f       	mul	r23, r19
    2356:	b0 0d       	add	r27, r0
    2358:	a1 1d       	adc	r26, r1
    235a:	62 1f       	adc	r22, r18
    235c:	83 9f       	mul	r24, r19
    235e:	a0 0d       	add	r26, r0
    2360:	61 1d       	adc	r22, r1
    2362:	22 1f       	adc	r18, r18
    2364:	74 9f       	mul	r23, r20
    2366:	33 27       	eor	r19, r19
    2368:	a0 0d       	add	r26, r0
    236a:	61 1d       	adc	r22, r1
    236c:	23 1f       	adc	r18, r19
    236e:	84 9f       	mul	r24, r20
    2370:	60 0d       	add	r22, r0
    2372:	21 1d       	adc	r18, r1
    2374:	82 2f       	mov	r24, r18
    2376:	76 2f       	mov	r23, r22
    2378:	6a 2f       	mov	r22, r26
    237a:	11 24       	eor	r1, r1
    237c:	9f 57       	subi	r25, 0x7F	; 127
    237e:	50 40       	sbci	r21, 0x00	; 0
    2380:	8a f0       	brmi	.+34     	; 0x23a4 <__mulsf3_pse+0x84>
    2382:	e1 f0       	breq	.+56     	; 0x23bc <__mulsf3_pse+0x9c>
    2384:	88 23       	and	r24, r24
    2386:	4a f0       	brmi	.+18     	; 0x239a <__mulsf3_pse+0x7a>
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	bb 1f       	adc	r27, r27
    238e:	66 1f       	adc	r22, r22
    2390:	77 1f       	adc	r23, r23
    2392:	88 1f       	adc	r24, r24
    2394:	91 50       	subi	r25, 0x01	; 1
    2396:	50 40       	sbci	r21, 0x00	; 0
    2398:	a9 f7       	brne	.-22     	; 0x2384 <__mulsf3_pse+0x64>
    239a:	9e 3f       	cpi	r25, 0xFE	; 254
    239c:	51 05       	cpc	r21, r1
    239e:	70 f0       	brcs	.+28     	; 0x23bc <__mulsf3_pse+0x9c>
    23a0:	5c cf       	rjmp	.-328    	; 0x225a <__fp_inf>
    23a2:	a6 cf       	rjmp	.-180    	; 0x22f0 <__fp_szero>
    23a4:	5f 3f       	cpi	r21, 0xFF	; 255
    23a6:	ec f3       	brlt	.-6      	; 0x23a2 <__mulsf3_pse+0x82>
    23a8:	98 3e       	cpi	r25, 0xE8	; 232
    23aa:	dc f3       	brlt	.-10     	; 0x23a2 <__mulsf3_pse+0x82>
    23ac:	86 95       	lsr	r24
    23ae:	77 95       	ror	r23
    23b0:	67 95       	ror	r22
    23b2:	b7 95       	ror	r27
    23b4:	f7 95       	ror	r31
    23b6:	e7 95       	ror	r30
    23b8:	9f 5f       	subi	r25, 0xFF	; 255
    23ba:	c1 f7       	brne	.-16     	; 0x23ac <__mulsf3_pse+0x8c>
    23bc:	fe 2b       	or	r31, r30
    23be:	88 0f       	add	r24, r24
    23c0:	91 1d       	adc	r25, r1
    23c2:	96 95       	lsr	r25
    23c4:	87 95       	ror	r24
    23c6:	97 f9       	bld	r25, 7
    23c8:	08 95       	ret

000023ca <__divmodhi4>:
    23ca:	97 fb       	bst	r25, 7
    23cc:	07 2e       	mov	r0, r23
    23ce:	16 f4       	brtc	.+4      	; 0x23d4 <__divmodhi4+0xa>
    23d0:	00 94       	com	r0
    23d2:	06 d0       	rcall	.+12     	; 0x23e0 <__divmodhi4_neg1>
    23d4:	77 fd       	sbrc	r23, 7
    23d6:	08 d0       	rcall	.+16     	; 0x23e8 <__divmodhi4_neg2>
    23d8:	11 d0       	rcall	.+34     	; 0x23fc <__udivmodhi4>
    23da:	07 fc       	sbrc	r0, 7
    23dc:	05 d0       	rcall	.+10     	; 0x23e8 <__divmodhi4_neg2>
    23de:	3e f4       	brtc	.+14     	; 0x23ee <__divmodhi4_exit>

000023e0 <__divmodhi4_neg1>:
    23e0:	90 95       	com	r25
    23e2:	81 95       	neg	r24
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	08 95       	ret

000023e8 <__divmodhi4_neg2>:
    23e8:	70 95       	com	r23
    23ea:	61 95       	neg	r22
    23ec:	7f 4f       	sbci	r23, 0xFF	; 255

000023ee <__divmodhi4_exit>:
    23ee:	08 95       	ret

000023f0 <__tablejump2__>:
    23f0:	ee 0f       	add	r30, r30
    23f2:	ff 1f       	adc	r31, r31
    23f4:	05 90       	lpm	r0, Z+
    23f6:	f4 91       	lpm	r31, Z
    23f8:	e0 2d       	mov	r30, r0
    23fa:	09 94       	ijmp

000023fc <__udivmodhi4>:
    23fc:	aa 1b       	sub	r26, r26
    23fe:	bb 1b       	sub	r27, r27
    2400:	51 e1       	ldi	r21, 0x11	; 17
    2402:	07 c0       	rjmp	.+14     	; 0x2412 <__udivmodhi4_ep>

00002404 <__udivmodhi4_loop>:
    2404:	aa 1f       	adc	r26, r26
    2406:	bb 1f       	adc	r27, r27
    2408:	a6 17       	cp	r26, r22
    240a:	b7 07       	cpc	r27, r23
    240c:	10 f0       	brcs	.+4      	; 0x2412 <__udivmodhi4_ep>
    240e:	a6 1b       	sub	r26, r22
    2410:	b7 0b       	sbc	r27, r23

00002412 <__udivmodhi4_ep>:
    2412:	88 1f       	adc	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	5a 95       	dec	r21
    2418:	a9 f7       	brne	.-22     	; 0x2404 <__udivmodhi4_loop>
    241a:	80 95       	com	r24
    241c:	90 95       	com	r25
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	08 95       	ret

00002424 <_exit>:
    2424:	f8 94       	cli

00002426 <__stop_program>:
    2426:	ff cf       	rjmp	.-2      	; 0x2426 <__stop_program>
