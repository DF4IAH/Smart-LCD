
Smart-LCD_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000018e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d31  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099f  00000000  00000000  00000fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000118c  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00002ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010902  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f8  00000000  00000000  000134b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000136aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000c0a  00000000  00000000  000136f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	1c d0       	rcall	.+56     	; 0xd4 <main>
  9c:	3c c0       	rjmp	.+120    	; 0x116 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	1f 92       	push	r1
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
  b0:	8f b7       	in	r24, 0x3f	; 63
  b2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
  b4:	f8 94       	cli
	return flags;
  b6:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
  b8:	5f 93       	push	r21
  ba:	50 e8       	ldi	r21, 0x80	; 128
  bc:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  c6:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
  c8:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
  ca:	0f 90       	pop	r0
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  d2:	08 95       	ret

000000d4 <main>:
}



int main (void)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	1f 92       	push	r1
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
	uint8_t retcode = 0;
	
	/* Init of sub-modules */
	//pmic_init();
	sysclk_init();
  de:	e0 df       	rcall	.-64     	; 0xa0 <sysclk_init>
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
  e0:	85 e8       	ldi	r24, 0x85	; 133
  e2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
  e6:	8f b7       	in	r24, 0x3f	; 63
  e8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
  ea:	f8 94       	cli
	return flags;
  ec:	99 81       	ldd	r25, Y+1	; 0x01
 */
static inline void adc_set_mux(enum adc_mux_setting input)
{
	uint8_t temp;

	temp = (ADMUX & ~(ADC_MUX_MASK));
  ee:	ec e7       	ldi	r30, 0x7C	; 124
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 7f       	andi	r24, 0xF0	; 240
	/* mask out MUX5 for ADMUX. */
	temp |= ((uint8_t)input & ADC_MUX_MASK);
#else
	temp |= (uint8_t)input;
#endif
	ADMUX = temp;
  f6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
  f8:	9f bf       	out	0x3f, r25	; 63
	s_tc_init();
	s_adc_init();

	/* All interrupt sources prepared here - IRQ activation */
	cpu_irq_enable();
  fa:	78 94       	sei
	
	board_init();
  fc:	ea df       	rcall	.-44     	; 0xd2 <board_init>
//@}
static inline reset_cause_t reset_cause_get_causes(void)
{
#if (MEGA_XX4 ||MEGA_XX4_A || MEGA_XX8 || MEGA_XX8_A || \
	MEGA_XX || MEGA_XX_UN2 || MEGA_XX0_1 || MEGA_RF || MEGA_UNCATEGORIZED) && !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t temp_mcsr = MCUSR ;
  fe:	84 b7       	in	r24, 0x34	; 52
		 rc & CHIP_RESET_CAUSE_BOD_CPU || 
		 rc & CHIP_RESET_CAUSE_POR) {
		 s_reset_global_vars();
	 }
	 
    while (runmode) {
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 104:	81 11       	cpse	r24, r1
 106:	fe cf       	rjmp	.-4      	; 0x104 <main+0x30>
	    s_task();
	    //sleepmgr_enter_sleep();
    }
    
    cpu_irq_disable();
 108:	f8 94       	cli
    //sleepmgr_enter_sleep();
    
    return retcode;
}
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0f 90       	pop	r0
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
