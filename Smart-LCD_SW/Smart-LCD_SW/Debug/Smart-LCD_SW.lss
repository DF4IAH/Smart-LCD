
Smart-LCD_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000146c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800100  00800100  000014e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023c8  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e68  00000000  00000000  00003ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002601  00000000  00000000  00004930  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ac0  00000000  00000000  00006f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001124b  00000000  00000000  000079f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ea5  00000000  00000000  00018c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0001aae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001012  00000000  00000000  0001ac44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f4 c0       	rjmp	.+488    	; 0x1ea <__ctors_end>
       2:	00 00       	nop
       4:	40 c1       	rjmp	.+640    	; 0x286 <__vector_1>
       6:	00 00       	nop
       8:	61 c1       	rjmp	.+706    	; 0x2cc <__vector_2>
       a:	00 00       	nop
       c:	82 c1       	rjmp	.+772    	; 0x312 <__vector_3>
       e:	00 00       	nop
      10:	a3 c1       	rjmp	.+838    	; 0x358 <__vector_4>
      12:	00 00       	nop
      14:	c4 c1       	rjmp	.+904    	; 0x39e <__vector_5>
      16:	00 00       	nop
      18:	e5 c1       	rjmp	.+970    	; 0x3e4 <__vector_6>
      1a:	00 00       	nop
      1c:	06 c2       	rjmp	.+1036   	; 0x42a <__vector_7>
      1e:	00 00       	nop
      20:	27 c2       	rjmp	.+1102   	; 0x470 <__vector_8>
      22:	00 00       	nop
      24:	48 c2       	rjmp	.+1168   	; 0x4b6 <__vector_9>
      26:	00 00       	nop
      28:	69 c2       	rjmp	.+1234   	; 0x4fc <__vector_10>
      2a:	00 00       	nop
      2c:	8a c2       	rjmp	.+1300   	; 0x542 <__vector_11>
      2e:	00 00       	nop
      30:	ab c2       	rjmp	.+1366   	; 0x588 <__vector_12>
      32:	00 00       	nop
      34:	cc c2       	rjmp	.+1432   	; 0x5ce <__vector_13>
      36:	00 00       	nop
      38:	ed c2       	rjmp	.+1498   	; 0x614 <__vector_14>
      3a:	00 00       	nop
      3c:	0e c3       	rjmp	.+1564   	; 0x65a <__vector_15>
      3e:	00 00       	nop
      40:	2f c3       	rjmp	.+1630   	; 0x6a0 <__vector_16>
      42:	00 00       	nop
      44:	50 c3       	rjmp	.+1696   	; 0x6e6 <__vector_17>
      46:	00 00       	nop
      48:	71 c3       	rjmp	.+1762   	; 0x72c <__vector_18>
      4a:	00 00       	nop
      4c:	92 c3       	rjmp	.+1828   	; 0x772 <__vector_19>
      4e:	00 00       	nop
      50:	b3 c3       	rjmp	.+1894   	; 0x7b8 <__vector_20>
      52:	00 00       	nop
      54:	31 c4       	rjmp	.+2146   	; 0x8b8 <__vector_21>
      56:	00 00       	nop
      58:	75 c4       	rjmp	.+2282   	; 0x944 <__vector_22>
      5a:	00 00       	nop
      5c:	96 c4       	rjmp	.+2348   	; 0x98a <__vector_23>
      5e:	00 00       	nop
      60:	b7 c4       	rjmp	.+2414   	; 0x9d0 <__vector_24>
      62:	00 00       	nop
      64:	e1 c4       	rjmp	.+2498   	; 0xa28 <__vector_25>
      66:	00 00       	nop
      68:	92 05       	cpc	r25, r2
      6a:	5b 06       	cpc	r5, r27
      6c:	5b 06       	cpc	r5, r27
      6e:	5b 06       	cpc	r5, r27
      70:	5b 06       	cpc	r5, r27
      72:	5b 06       	cpc	r5, r27
      74:	5b 06       	cpc	r5, r27
      76:	5b 06       	cpc	r5, r27
      78:	97 05       	cpc	r25, r7
      7a:	5b 06       	cpc	r5, r27
      7c:	5b 06       	cpc	r5, r27
      7e:	5b 06       	cpc	r5, r27
      80:	5b 06       	cpc	r5, r27
      82:	5b 06       	cpc	r5, r27
      84:	5b 06       	cpc	r5, r27
      86:	5b 06       	cpc	r5, r27
      88:	97 05       	cpc	r25, r7
      8a:	5b 06       	cpc	r5, r27
      8c:	5b 06       	cpc	r5, r27
      8e:	5b 06       	cpc	r5, r27
      90:	5b 06       	cpc	r5, r27
      92:	5b 06       	cpc	r5, r27
      94:	5b 06       	cpc	r5, r27
      96:	5b 06       	cpc	r5, r27
      98:	a3 05       	cpc	r26, r3
      9a:	5b 06       	cpc	r5, r27
      9c:	5b 06       	cpc	r5, r27
      9e:	5b 06       	cpc	r5, r27
      a0:	5b 06       	cpc	r5, r27
      a2:	5b 06       	cpc	r5, r27
      a4:	5b 06       	cpc	r5, r27
      a6:	5b 06       	cpc	r5, r27
      a8:	a6 05       	cpc	r26, r6
      aa:	5b 06       	cpc	r5, r27
      ac:	5b 06       	cpc	r5, r27
      ae:	5b 06       	cpc	r5, r27
      b0:	5b 06       	cpc	r5, r27
      b2:	5b 06       	cpc	r5, r27
      b4:	5b 06       	cpc	r5, r27
      b6:	5b 06       	cpc	r5, r27
      b8:	be 05       	cpc	r27, r14
      ba:	5b 06       	cpc	r5, r27
      bc:	5b 06       	cpc	r5, r27
      be:	5b 06       	cpc	r5, r27
      c0:	5b 06       	cpc	r5, r27
      c2:	5b 06       	cpc	r5, r27
      c4:	5b 06       	cpc	r5, r27
      c6:	5b 06       	cpc	r5, r27
      c8:	c4 05       	cpc	r28, r4
      ca:	5b 06       	cpc	r5, r27
      cc:	5b 06       	cpc	r5, r27
      ce:	5b 06       	cpc	r5, r27
      d0:	5b 06       	cpc	r5, r27
      d2:	5b 06       	cpc	r5, r27
      d4:	5b 06       	cpc	r5, r27
      d6:	5b 06       	cpc	r5, r27
      d8:	5b 06       	cpc	r5, r27
      da:	5b 06       	cpc	r5, r27
      dc:	5b 06       	cpc	r5, r27
      de:	5b 06       	cpc	r5, r27
      e0:	5b 06       	cpc	r5, r27
      e2:	5b 06       	cpc	r5, r27
      e4:	5b 06       	cpc	r5, r27
      e6:	5b 06       	cpc	r5, r27
      e8:	5b 06       	cpc	r5, r27
      ea:	5b 06       	cpc	r5, r27
      ec:	5b 06       	cpc	r5, r27
      ee:	5b 06       	cpc	r5, r27
      f0:	5b 06       	cpc	r5, r27
      f2:	5b 06       	cpc	r5, r27
      f4:	5b 06       	cpc	r5, r27
      f6:	5b 06       	cpc	r5, r27
      f8:	5b 06       	cpc	r5, r27
      fa:	5b 06       	cpc	r5, r27
      fc:	5b 06       	cpc	r5, r27
      fe:	5b 06       	cpc	r5, r27
     100:	5b 06       	cpc	r5, r27
     102:	5b 06       	cpc	r5, r27
     104:	5b 06       	cpc	r5, r27
     106:	5b 06       	cpc	r5, r27
     108:	5b 06       	cpc	r5, r27
     10a:	5b 06       	cpc	r5, r27
     10c:	5b 06       	cpc	r5, r27
     10e:	5b 06       	cpc	r5, r27
     110:	5b 06       	cpc	r5, r27
     112:	5b 06       	cpc	r5, r27
     114:	5b 06       	cpc	r5, r27
     116:	5b 06       	cpc	r5, r27
     118:	c7 05       	cpc	r28, r7
     11a:	5b 06       	cpc	r5, r27
     11c:	5b 06       	cpc	r5, r27
     11e:	5b 06       	cpc	r5, r27
     120:	5b 06       	cpc	r5, r27
     122:	5b 06       	cpc	r5, r27
     124:	5b 06       	cpc	r5, r27
     126:	5b 06       	cpc	r5, r27
     128:	c7 05       	cpc	r28, r7
     12a:	5b 06       	cpc	r5, r27
     12c:	5b 06       	cpc	r5, r27
     12e:	5b 06       	cpc	r5, r27
     130:	5b 06       	cpc	r5, r27
     132:	5b 06       	cpc	r5, r27
     134:	5b 06       	cpc	r5, r27
     136:	5b 06       	cpc	r5, r27
     138:	cf 05       	cpc	r28, r15
     13a:	5b 06       	cpc	r5, r27
     13c:	5b 06       	cpc	r5, r27
     13e:	5b 06       	cpc	r5, r27
     140:	5b 06       	cpc	r5, r27
     142:	5b 06       	cpc	r5, r27
     144:	5b 06       	cpc	r5, r27
     146:	5b 06       	cpc	r5, r27
     148:	cf 05       	cpc	r28, r15
     14a:	5b 06       	cpc	r5, r27
     14c:	5b 06       	cpc	r5, r27
     14e:	5b 06       	cpc	r5, r27
     150:	5b 06       	cpc	r5, r27
     152:	5b 06       	cpc	r5, r27
     154:	5b 06       	cpc	r5, r27
     156:	5b 06       	cpc	r5, r27
     158:	d7 05       	cpc	r29, r7
     15a:	5b 06       	cpc	r5, r27
     15c:	5b 06       	cpc	r5, r27
     15e:	5b 06       	cpc	r5, r27
     160:	5b 06       	cpc	r5, r27
     162:	5b 06       	cpc	r5, r27
     164:	5b 06       	cpc	r5, r27
     166:	5b 06       	cpc	r5, r27
     168:	08 06       	cpc	r0, r24
     16a:	5b 06       	cpc	r5, r27
     16c:	5b 06       	cpc	r5, r27
     16e:	5b 06       	cpc	r5, r27
     170:	5b 06       	cpc	r5, r27
     172:	5b 06       	cpc	r5, r27
     174:	5b 06       	cpc	r5, r27
     176:	5b 06       	cpc	r5, r27
     178:	d7 05       	cpc	r29, r7
     17a:	5b 06       	cpc	r5, r27
     17c:	5b 06       	cpc	r5, r27
     17e:	5b 06       	cpc	r5, r27
     180:	5b 06       	cpc	r5, r27
     182:	5b 06       	cpc	r5, r27
     184:	5b 06       	cpc	r5, r27
     186:	5b 06       	cpc	r5, r27
     188:	08 06       	cpc	r0, r24
     18a:	5b 06       	cpc	r5, r27
     18c:	5b 06       	cpc	r5, r27
     18e:	5b 06       	cpc	r5, r27
     190:	5b 06       	cpc	r5, r27
     192:	5b 06       	cpc	r5, r27
     194:	5b 06       	cpc	r5, r27
     196:	5b 06       	cpc	r5, r27
     198:	14 06       	cpc	r1, r20
     19a:	5b 06       	cpc	r5, r27
     19c:	5b 06       	cpc	r5, r27
     19e:	5b 06       	cpc	r5, r27
     1a0:	5b 06       	cpc	r5, r27
     1a2:	5b 06       	cpc	r5, r27
     1a4:	5b 06       	cpc	r5, r27
     1a6:	5b 06       	cpc	r5, r27
     1a8:	1d 06       	cpc	r1, r29
     1aa:	5b 06       	cpc	r5, r27
     1ac:	5b 06       	cpc	r5, r27
     1ae:	5b 06       	cpc	r5, r27
     1b0:	5b 06       	cpc	r5, r27
     1b2:	5b 06       	cpc	r5, r27
     1b4:	5b 06       	cpc	r5, r27
     1b6:	5b 06       	cpc	r5, r27
     1b8:	1d 06       	cpc	r1, r29
     1ba:	5b 06       	cpc	r5, r27
     1bc:	5b 06       	cpc	r5, r27
     1be:	5b 06       	cpc	r5, r27
     1c0:	5b 06       	cpc	r5, r27
     1c2:	5b 06       	cpc	r5, r27
     1c4:	5b 06       	cpc	r5, r27
     1c6:	5b 06       	cpc	r5, r27
     1c8:	35 06       	cpc	r3, r21
     1ca:	5b 06       	cpc	r5, r27
     1cc:	5b 06       	cpc	r5, r27
     1ce:	5b 06       	cpc	r5, r27
     1d0:	5b 06       	cpc	r5, r27
     1d2:	5b 06       	cpc	r5, r27
     1d4:	5b 06       	cpc	r5, r27
     1d6:	5b 06       	cpc	r5, r27
     1d8:	4e 06       	cpc	r4, r30
     1da:	5b 06       	cpc	r5, r27
     1dc:	5b 06       	cpc	r5, r27
     1de:	5b 06       	cpc	r5, r27
     1e0:	5b 06       	cpc	r5, r27
     1e2:	5b 06       	cpc	r5, r27
     1e4:	5b 06       	cpc	r5, r27
     1e6:	5b 06       	cpc	r5, r27
     1e8:	57 06       	cpc	r5, r23

000001ea <__ctors_end>:
     1ea:	11 24       	eor	r1, r1
     1ec:	1f be       	out	0x3f, r1	; 63
     1ee:	cf ef       	ldi	r28, 0xFF	; 255
     1f0:	d8 e0       	ldi	r29, 0x08	; 8
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	cd bf       	out	0x3d, r28	; 61

000001f6 <__do_copy_data>:
     1f6:	11 e0       	ldi	r17, 0x01	; 1
     1f8:	a0 e0       	ldi	r26, 0x00	; 0
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	ec e6       	ldi	r30, 0x6C	; 108
     1fe:	f4 e1       	ldi	r31, 0x14	; 20
     200:	02 c0       	rjmp	.+4      	; 0x206 <__do_copy_data+0x10>
     202:	05 90       	lpm	r0, Z+
     204:	0d 92       	st	X+, r0
     206:	a0 30       	cpi	r26, 0x00	; 0
     208:	b1 07       	cpc	r27, r17
     20a:	d9 f7       	brne	.-10     	; 0x202 <__do_copy_data+0xc>

0000020c <__do_clear_bss>:
     20c:	21 e0       	ldi	r18, 0x01	; 1
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
     214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
     216:	ac 33       	cpi	r26, 0x3C	; 60
     218:	b2 07       	cpc	r27, r18
     21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
     21c:	30 d6       	rcall	.+3168   	; 0xe7e <main>
     21e:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <_exit>

00000222 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	1f 92       	push	r1
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     232:	8f b7       	in	r24, 0x3f	; 63
     234:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     236:	f8 94       	cli
	return flags;
     238:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     23a:	5f 93       	push	r21
     23c:	50 e8       	ldi	r21, 0x80	; 128
     23e:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     248:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     24a:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     24c:	0f 90       	pop	r0
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	1f 92       	push	r1
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     25e:	9f b7       	in	r25, 0x3f	; 63
     260:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     262:	f8 94       	cli
	return flags;
     264:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     266:	81 11       	cpse	r24, r1
     268:	06 c0       	rjmp	.+12     	; 0x276 <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
     26a:	e4 e6       	ldi	r30, 0x64	; 100
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	60 95       	com	r22
     270:	80 81       	ld	r24, Z
     272:	68 23       	and	r22, r24
     274:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     276:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     278:	0f 90       	pop	r0
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <asm_break>:

/* Helper functions */

void asm_break(void)
{
	__asm__ __volatile__ ("break" ::: "memory");
     280:	98 95       	break
	nop();
     282:	00 00       	nop
     284:	08 95       	ret

00000286 <__vector_1>:
	asm_break();
}


ISR(__vector_1, ISR_BLOCK)
{	/* INT0 */
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	0f 92       	push	r0
     28e:	11 24       	eor	r1, r1
     290:	2f 93       	push	r18
     292:	3f 93       	push	r19
     294:	4f 93       	push	r20
     296:	5f 93       	push	r21
     298:	6f 93       	push	r22
     29a:	7f 93       	push	r23
     29c:	8f 93       	push	r24
     29e:	9f 93       	push	r25
     2a0:	af 93       	push	r26
     2a2:	bf 93       	push	r27
     2a4:	ef 93       	push	r30
     2a6:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     2a8:	eb df       	rcall	.-42     	; 0x280 <asm_break>


ISR(__vector_1, ISR_BLOCK)
{	/* INT0 */
	s_bad_interrupt();
}
     2aa:	ff 91       	pop	r31
     2ac:	ef 91       	pop	r30
     2ae:	bf 91       	pop	r27
     2b0:	af 91       	pop	r26
     2b2:	9f 91       	pop	r25
     2b4:	8f 91       	pop	r24
     2b6:	7f 91       	pop	r23
     2b8:	6f 91       	pop	r22
     2ba:	5f 91       	pop	r21
     2bc:	4f 91       	pop	r20
     2be:	3f 91       	pop	r19
     2c0:	2f 91       	pop	r18
     2c2:	0f 90       	pop	r0
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	0f 90       	pop	r0
     2c8:	1f 90       	pop	r1
     2ca:	18 95       	reti

000002cc <__vector_2>:

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	0f 92       	push	r0
     2d4:	11 24       	eor	r1, r1
     2d6:	2f 93       	push	r18
     2d8:	3f 93       	push	r19
     2da:	4f 93       	push	r20
     2dc:	5f 93       	push	r21
     2de:	6f 93       	push	r22
     2e0:	7f 93       	push	r23
     2e2:	8f 93       	push	r24
     2e4:	9f 93       	push	r25
     2e6:	af 93       	push	r26
     2e8:	bf 93       	push	r27
     2ea:	ef 93       	push	r30
     2ec:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     2ee:	c8 df       	rcall	.-112    	; 0x280 <asm_break>
}

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
	s_bad_interrupt();
}
     2f0:	ff 91       	pop	r31
     2f2:	ef 91       	pop	r30
     2f4:	bf 91       	pop	r27
     2f6:	af 91       	pop	r26
     2f8:	9f 91       	pop	r25
     2fa:	8f 91       	pop	r24
     2fc:	7f 91       	pop	r23
     2fe:	6f 91       	pop	r22
     300:	5f 91       	pop	r21
     302:	4f 91       	pop	r20
     304:	3f 91       	pop	r19
     306:	2f 91       	pop	r18
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <__vector_3>:

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
     312:	1f 92       	push	r1
     314:	0f 92       	push	r0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	0f 92       	push	r0
     31a:	11 24       	eor	r1, r1
     31c:	2f 93       	push	r18
     31e:	3f 93       	push	r19
     320:	4f 93       	push	r20
     322:	5f 93       	push	r21
     324:	6f 93       	push	r22
     326:	7f 93       	push	r23
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
     32c:	af 93       	push	r26
     32e:	bf 93       	push	r27
     330:	ef 93       	push	r30
     332:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     334:	a5 df       	rcall	.-182    	; 0x280 <asm_break>
}

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
	s_bad_interrupt();
}
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	bf 91       	pop	r27
     33c:	af 91       	pop	r26
     33e:	9f 91       	pop	r25
     340:	8f 91       	pop	r24
     342:	7f 91       	pop	r23
     344:	6f 91       	pop	r22
     346:	5f 91       	pop	r21
     348:	4f 91       	pop	r20
     34a:	3f 91       	pop	r19
     34c:	2f 91       	pop	r18
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <__vector_4>:

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	2f 93       	push	r18
     364:	3f 93       	push	r19
     366:	4f 93       	push	r20
     368:	5f 93       	push	r21
     36a:	6f 93       	push	r22
     36c:	7f 93       	push	r23
     36e:	8f 93       	push	r24
     370:	9f 93       	push	r25
     372:	af 93       	push	r26
     374:	bf 93       	push	r27
     376:	ef 93       	push	r30
     378:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     37a:	82 df       	rcall	.-252    	; 0x280 <asm_break>
}

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
	s_bad_interrupt();
}
     37c:	ff 91       	pop	r31
     37e:	ef 91       	pop	r30
     380:	bf 91       	pop	r27
     382:	af 91       	pop	r26
     384:	9f 91       	pop	r25
     386:	8f 91       	pop	r24
     388:	7f 91       	pop	r23
     38a:	6f 91       	pop	r22
     38c:	5f 91       	pop	r21
     38e:	4f 91       	pop	r20
     390:	3f 91       	pop	r19
     392:	2f 91       	pop	r18
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <__vector_5>:

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	2f 93       	push	r18
     3aa:	3f 93       	push	r19
     3ac:	4f 93       	push	r20
     3ae:	5f 93       	push	r21
     3b0:	6f 93       	push	r22
     3b2:	7f 93       	push	r23
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
     3b8:	af 93       	push	r26
     3ba:	bf 93       	push	r27
     3bc:	ef 93       	push	r30
     3be:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     3c0:	5f df       	rcall	.-322    	; 0x280 <asm_break>
}

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
	s_bad_interrupt();
}
     3c2:	ff 91       	pop	r31
     3c4:	ef 91       	pop	r30
     3c6:	bf 91       	pop	r27
     3c8:	af 91       	pop	r26
     3ca:	9f 91       	pop	r25
     3cc:	8f 91       	pop	r24
     3ce:	7f 91       	pop	r23
     3d0:	6f 91       	pop	r22
     3d2:	5f 91       	pop	r21
     3d4:	4f 91       	pop	r20
     3d6:	3f 91       	pop	r19
     3d8:	2f 91       	pop	r18
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_6>:

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	2f 93       	push	r18
     3f0:	3f 93       	push	r19
     3f2:	4f 93       	push	r20
     3f4:	5f 93       	push	r21
     3f6:	6f 93       	push	r22
     3f8:	7f 93       	push	r23
     3fa:	8f 93       	push	r24
     3fc:	9f 93       	push	r25
     3fe:	af 93       	push	r26
     400:	bf 93       	push	r27
     402:	ef 93       	push	r30
     404:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     406:	3c df       	rcall	.-392    	; 0x280 <asm_break>
}

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
	s_bad_interrupt();
}
     408:	ff 91       	pop	r31
     40a:	ef 91       	pop	r30
     40c:	bf 91       	pop	r27
     40e:	af 91       	pop	r26
     410:	9f 91       	pop	r25
     412:	8f 91       	pop	r24
     414:	7f 91       	pop	r23
     416:	6f 91       	pop	r22
     418:	5f 91       	pop	r21
     41a:	4f 91       	pop	r20
     41c:	3f 91       	pop	r19
     41e:	2f 91       	pop	r18
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <__vector_7>:

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
     42a:	1f 92       	push	r1
     42c:	0f 92       	push	r0
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	0f 92       	push	r0
     432:	11 24       	eor	r1, r1
     434:	2f 93       	push	r18
     436:	3f 93       	push	r19
     438:	4f 93       	push	r20
     43a:	5f 93       	push	r21
     43c:	6f 93       	push	r22
     43e:	7f 93       	push	r23
     440:	8f 93       	push	r24
     442:	9f 93       	push	r25
     444:	af 93       	push	r26
     446:	bf 93       	push	r27
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     44c:	19 df       	rcall	.-462    	; 0x280 <asm_break>
}

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
	s_bad_interrupt();
}
     44e:	ff 91       	pop	r31
     450:	ef 91       	pop	r30
     452:	bf 91       	pop	r27
     454:	af 91       	pop	r26
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	7f 91       	pop	r23
     45c:	6f 91       	pop	r22
     45e:	5f 91       	pop	r21
     460:	4f 91       	pop	r20
     462:	3f 91       	pop	r19
     464:	2f 91       	pop	r18
     466:	0f 90       	pop	r0
     468:	0f be       	out	0x3f, r0	; 63
     46a:	0f 90       	pop	r0
     46c:	1f 90       	pop	r1
     46e:	18 95       	reti

00000470 <__vector_8>:

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
     470:	1f 92       	push	r1
     472:	0f 92       	push	r0
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	0f 92       	push	r0
     478:	11 24       	eor	r1, r1
     47a:	2f 93       	push	r18
     47c:	3f 93       	push	r19
     47e:	4f 93       	push	r20
     480:	5f 93       	push	r21
     482:	6f 93       	push	r22
     484:	7f 93       	push	r23
     486:	8f 93       	push	r24
     488:	9f 93       	push	r25
     48a:	af 93       	push	r26
     48c:	bf 93       	push	r27
     48e:	ef 93       	push	r30
     490:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     492:	f6 de       	rcall	.-532    	; 0x280 <asm_break>
}

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
	s_bad_interrupt();
}
     494:	ff 91       	pop	r31
     496:	ef 91       	pop	r30
     498:	bf 91       	pop	r27
     49a:	af 91       	pop	r26
     49c:	9f 91       	pop	r25
     49e:	8f 91       	pop	r24
     4a0:	7f 91       	pop	r23
     4a2:	6f 91       	pop	r22
     4a4:	5f 91       	pop	r21
     4a6:	4f 91       	pop	r20
     4a8:	3f 91       	pop	r19
     4aa:	2f 91       	pop	r18
     4ac:	0f 90       	pop	r0
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <__vector_9>:

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	2f 93       	push	r18
     4c2:	3f 93       	push	r19
     4c4:	4f 93       	push	r20
     4c6:	5f 93       	push	r21
     4c8:	6f 93       	push	r22
     4ca:	7f 93       	push	r23
     4cc:	8f 93       	push	r24
     4ce:	9f 93       	push	r25
     4d0:	af 93       	push	r26
     4d2:	bf 93       	push	r27
     4d4:	ef 93       	push	r30
     4d6:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     4d8:	d3 de       	rcall	.-602    	; 0x280 <asm_break>
}

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
	s_bad_interrupt();
}
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	0f 90       	pop	r0
     4f8:	1f 90       	pop	r1
     4fa:	18 95       	reti

000004fc <__vector_10>:

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
     4fc:	1f 92       	push	r1
     4fe:	0f 92       	push	r0
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	2f 93       	push	r18
     508:	3f 93       	push	r19
     50a:	4f 93       	push	r20
     50c:	5f 93       	push	r21
     50e:	6f 93       	push	r22
     510:	7f 93       	push	r23
     512:	8f 93       	push	r24
     514:	9f 93       	push	r25
     516:	af 93       	push	r26
     518:	bf 93       	push	r27
     51a:	ef 93       	push	r30
     51c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     51e:	b0 de       	rcall	.-672    	; 0x280 <asm_break>
}

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
	s_bad_interrupt();
}
     520:	ff 91       	pop	r31
     522:	ef 91       	pop	r30
     524:	bf 91       	pop	r27
     526:	af 91       	pop	r26
     528:	9f 91       	pop	r25
     52a:	8f 91       	pop	r24
     52c:	7f 91       	pop	r23
     52e:	6f 91       	pop	r22
     530:	5f 91       	pop	r21
     532:	4f 91       	pop	r20
     534:	3f 91       	pop	r19
     536:	2f 91       	pop	r18
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <__vector_11>:

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	0f 92       	push	r0
     54a:	11 24       	eor	r1, r1
     54c:	2f 93       	push	r18
     54e:	3f 93       	push	r19
     550:	4f 93       	push	r20
     552:	5f 93       	push	r21
     554:	6f 93       	push	r22
     556:	7f 93       	push	r23
     558:	8f 93       	push	r24
     55a:	9f 93       	push	r25
     55c:	af 93       	push	r26
     55e:	bf 93       	push	r27
     560:	ef 93       	push	r30
     562:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     564:	8d de       	rcall	.-742    	; 0x280 <asm_break>
}

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
	s_bad_interrupt();
}
     566:	ff 91       	pop	r31
     568:	ef 91       	pop	r30
     56a:	bf 91       	pop	r27
     56c:	af 91       	pop	r26
     56e:	9f 91       	pop	r25
     570:	8f 91       	pop	r24
     572:	7f 91       	pop	r23
     574:	6f 91       	pop	r22
     576:	5f 91       	pop	r21
     578:	4f 91       	pop	r20
     57a:	3f 91       	pop	r19
     57c:	2f 91       	pop	r18
     57e:	0f 90       	pop	r0
     580:	0f be       	out	0x3f, r0	; 63
     582:	0f 90       	pop	r0
     584:	1f 90       	pop	r1
     586:	18 95       	reti

00000588 <__vector_12>:

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
     588:	1f 92       	push	r1
     58a:	0f 92       	push	r0
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	0f 92       	push	r0
     590:	11 24       	eor	r1, r1
     592:	2f 93       	push	r18
     594:	3f 93       	push	r19
     596:	4f 93       	push	r20
     598:	5f 93       	push	r21
     59a:	6f 93       	push	r22
     59c:	7f 93       	push	r23
     59e:	8f 93       	push	r24
     5a0:	9f 93       	push	r25
     5a2:	af 93       	push	r26
     5a4:	bf 93       	push	r27
     5a6:	ef 93       	push	r30
     5a8:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     5aa:	6a de       	rcall	.-812    	; 0x280 <asm_break>
}

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
	s_bad_interrupt();
}
     5ac:	ff 91       	pop	r31
     5ae:	ef 91       	pop	r30
     5b0:	bf 91       	pop	r27
     5b2:	af 91       	pop	r26
     5b4:	9f 91       	pop	r25
     5b6:	8f 91       	pop	r24
     5b8:	7f 91       	pop	r23
     5ba:	6f 91       	pop	r22
     5bc:	5f 91       	pop	r21
     5be:	4f 91       	pop	r20
     5c0:	3f 91       	pop	r19
     5c2:	2f 91       	pop	r18
     5c4:	0f 90       	pop	r0
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	0f 90       	pop	r0
     5ca:	1f 90       	pop	r1
     5cc:	18 95       	reti

000005ce <__vector_13>:

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
     5ce:	1f 92       	push	r1
     5d0:	0f 92       	push	r0
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	0f 92       	push	r0
     5d6:	11 24       	eor	r1, r1
     5d8:	2f 93       	push	r18
     5da:	3f 93       	push	r19
     5dc:	4f 93       	push	r20
     5de:	5f 93       	push	r21
     5e0:	6f 93       	push	r22
     5e2:	7f 93       	push	r23
     5e4:	8f 93       	push	r24
     5e6:	9f 93       	push	r25
     5e8:	af 93       	push	r26
     5ea:	bf 93       	push	r27
     5ec:	ef 93       	push	r30
     5ee:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     5f0:	47 de       	rcall	.-882    	; 0x280 <asm_break>
}

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
	s_bad_interrupt();
}
     5f2:	ff 91       	pop	r31
     5f4:	ef 91       	pop	r30
     5f6:	bf 91       	pop	r27
     5f8:	af 91       	pop	r26
     5fa:	9f 91       	pop	r25
     5fc:	8f 91       	pop	r24
     5fe:	7f 91       	pop	r23
     600:	6f 91       	pop	r22
     602:	5f 91       	pop	r21
     604:	4f 91       	pop	r20
     606:	3f 91       	pop	r19
     608:	2f 91       	pop	r18
     60a:	0f 90       	pop	r0
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	0f 90       	pop	r0
     610:	1f 90       	pop	r1
     612:	18 95       	reti

00000614 <__vector_14>:

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
     614:	1f 92       	push	r1
     616:	0f 92       	push	r0
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	0f 92       	push	r0
     61c:	11 24       	eor	r1, r1
     61e:	2f 93       	push	r18
     620:	3f 93       	push	r19
     622:	4f 93       	push	r20
     624:	5f 93       	push	r21
     626:	6f 93       	push	r22
     628:	7f 93       	push	r23
     62a:	8f 93       	push	r24
     62c:	9f 93       	push	r25
     62e:	af 93       	push	r26
     630:	bf 93       	push	r27
     632:	ef 93       	push	r30
     634:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     636:	24 de       	rcall	.-952    	; 0x280 <asm_break>
}

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
	s_bad_interrupt();
}
     638:	ff 91       	pop	r31
     63a:	ef 91       	pop	r30
     63c:	bf 91       	pop	r27
     63e:	af 91       	pop	r26
     640:	9f 91       	pop	r25
     642:	8f 91       	pop	r24
     644:	7f 91       	pop	r23
     646:	6f 91       	pop	r22
     648:	5f 91       	pop	r21
     64a:	4f 91       	pop	r20
     64c:	3f 91       	pop	r19
     64e:	2f 91       	pop	r18
     650:	0f 90       	pop	r0
     652:	0f be       	out	0x3f, r0	; 63
     654:	0f 90       	pop	r0
     656:	1f 90       	pop	r1
     658:	18 95       	reti

0000065a <__vector_15>:

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
     65a:	1f 92       	push	r1
     65c:	0f 92       	push	r0
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	0f 92       	push	r0
     662:	11 24       	eor	r1, r1
     664:	2f 93       	push	r18
     666:	3f 93       	push	r19
     668:	4f 93       	push	r20
     66a:	5f 93       	push	r21
     66c:	6f 93       	push	r22
     66e:	7f 93       	push	r23
     670:	8f 93       	push	r24
     672:	9f 93       	push	r25
     674:	af 93       	push	r26
     676:	bf 93       	push	r27
     678:	ef 93       	push	r30
     67a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     67c:	01 de       	rcall	.-1022   	; 0x280 <asm_break>
}

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
	s_bad_interrupt();
}
     67e:	ff 91       	pop	r31
     680:	ef 91       	pop	r30
     682:	bf 91       	pop	r27
     684:	af 91       	pop	r26
     686:	9f 91       	pop	r25
     688:	8f 91       	pop	r24
     68a:	7f 91       	pop	r23
     68c:	6f 91       	pop	r22
     68e:	5f 91       	pop	r21
     690:	4f 91       	pop	r20
     692:	3f 91       	pop	r19
     694:	2f 91       	pop	r18
     696:	0f 90       	pop	r0
     698:	0f be       	out	0x3f, r0	; 63
     69a:	0f 90       	pop	r0
     69c:	1f 90       	pop	r1
     69e:	18 95       	reti

000006a0 <__vector_16>:

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
     6a0:	1f 92       	push	r1
     6a2:	0f 92       	push	r0
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	0f 92       	push	r0
     6a8:	11 24       	eor	r1, r1
     6aa:	2f 93       	push	r18
     6ac:	3f 93       	push	r19
     6ae:	4f 93       	push	r20
     6b0:	5f 93       	push	r21
     6b2:	6f 93       	push	r22
     6b4:	7f 93       	push	r23
     6b6:	8f 93       	push	r24
     6b8:	9f 93       	push	r25
     6ba:	af 93       	push	r26
     6bc:	bf 93       	push	r27
     6be:	ef 93       	push	r30
     6c0:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     6c2:	de dd       	rcall	.-1092   	; 0x280 <asm_break>
}

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
	s_bad_interrupt();
}
     6c4:	ff 91       	pop	r31
     6c6:	ef 91       	pop	r30
     6c8:	bf 91       	pop	r27
     6ca:	af 91       	pop	r26
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	7f 91       	pop	r23
     6d2:	6f 91       	pop	r22
     6d4:	5f 91       	pop	r21
     6d6:	4f 91       	pop	r20
     6d8:	3f 91       	pop	r19
     6da:	2f 91       	pop	r18
     6dc:	0f 90       	pop	r0
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	0f 90       	pop	r0
     6e2:	1f 90       	pop	r1
     6e4:	18 95       	reti

000006e6 <__vector_17>:

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
     6e6:	1f 92       	push	r1
     6e8:	0f 92       	push	r0
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	0f 92       	push	r0
     6ee:	11 24       	eor	r1, r1
     6f0:	2f 93       	push	r18
     6f2:	3f 93       	push	r19
     6f4:	4f 93       	push	r20
     6f6:	5f 93       	push	r21
     6f8:	6f 93       	push	r22
     6fa:	7f 93       	push	r23
     6fc:	8f 93       	push	r24
     6fe:	9f 93       	push	r25
     700:	af 93       	push	r26
     702:	bf 93       	push	r27
     704:	ef 93       	push	r30
     706:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     708:	bb dd       	rcall	.-1162   	; 0x280 <asm_break>
}

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
	s_bad_interrupt();
}
     70a:	ff 91       	pop	r31
     70c:	ef 91       	pop	r30
     70e:	bf 91       	pop	r27
     710:	af 91       	pop	r26
     712:	9f 91       	pop	r25
     714:	8f 91       	pop	r24
     716:	7f 91       	pop	r23
     718:	6f 91       	pop	r22
     71a:	5f 91       	pop	r21
     71c:	4f 91       	pop	r20
     71e:	3f 91       	pop	r19
     720:	2f 91       	pop	r18
     722:	0f 90       	pop	r0
     724:	0f be       	out	0x3f, r0	; 63
     726:	0f 90       	pop	r0
     728:	1f 90       	pop	r1
     72a:	18 95       	reti

0000072c <__vector_18>:

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	0f 92       	push	r0
     734:	11 24       	eor	r1, r1
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	ef 93       	push	r30
     74c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     74e:	98 dd       	rcall	.-1232   	; 0x280 <asm_break>
}

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
	s_bad_interrupt();
}
     750:	ff 91       	pop	r31
     752:	ef 91       	pop	r30
     754:	bf 91       	pop	r27
     756:	af 91       	pop	r26
     758:	9f 91       	pop	r25
     75a:	8f 91       	pop	r24
     75c:	7f 91       	pop	r23
     75e:	6f 91       	pop	r22
     760:	5f 91       	pop	r21
     762:	4f 91       	pop	r20
     764:	3f 91       	pop	r19
     766:	2f 91       	pop	r18
     768:	0f 90       	pop	r0
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	0f 90       	pop	r0
     76e:	1f 90       	pop	r1
     770:	18 95       	reti

00000772 <__vector_19>:

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
     772:	1f 92       	push	r1
     774:	0f 92       	push	r0
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	0f 92       	push	r0
     77a:	11 24       	eor	r1, r1
     77c:	2f 93       	push	r18
     77e:	3f 93       	push	r19
     780:	4f 93       	push	r20
     782:	5f 93       	push	r21
     784:	6f 93       	push	r22
     786:	7f 93       	push	r23
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	af 93       	push	r26
     78e:	bf 93       	push	r27
     790:	ef 93       	push	r30
     792:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     794:	75 dd       	rcall	.-1302   	; 0x280 <asm_break>
}

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
	s_bad_interrupt();
}
     796:	ff 91       	pop	r31
     798:	ef 91       	pop	r30
     79a:	bf 91       	pop	r27
     79c:	af 91       	pop	r26
     79e:	9f 91       	pop	r25
     7a0:	8f 91       	pop	r24
     7a2:	7f 91       	pop	r23
     7a4:	6f 91       	pop	r22
     7a6:	5f 91       	pop	r21
     7a8:	4f 91       	pop	r20
     7aa:	3f 91       	pop	r19
     7ac:	2f 91       	pop	r18
     7ae:	0f 90       	pop	r0
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	0f 90       	pop	r0
     7b4:	1f 90       	pop	r1
     7b6:	18 95       	reti

000007b8 <__vector_20>:

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
     7b8:	1f 92       	push	r1
     7ba:	0f 92       	push	r0
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	0f 92       	push	r0
     7c0:	11 24       	eor	r1, r1
     7c2:	2f 93       	push	r18
     7c4:	3f 93       	push	r19
     7c6:	4f 93       	push	r20
     7c8:	5f 93       	push	r21
     7ca:	6f 93       	push	r22
     7cc:	7f 93       	push	r23
     7ce:	8f 93       	push	r24
     7d0:	9f 93       	push	r25
     7d2:	af 93       	push	r26
     7d4:	bf 93       	push	r27
     7d6:	ef 93       	push	r30
     7d8:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     7da:	52 dd       	rcall	.-1372   	; 0x280 <asm_break>
}

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
	s_bad_interrupt();
}
     7dc:	ff 91       	pop	r31
     7de:	ef 91       	pop	r30
     7e0:	bf 91       	pop	r27
     7e2:	af 91       	pop	r26
     7e4:	9f 91       	pop	r25
     7e6:	8f 91       	pop	r24
     7e8:	7f 91       	pop	r23
     7ea:	6f 91       	pop	r22
     7ec:	5f 91       	pop	r21
     7ee:	4f 91       	pop	r20
     7f0:	3f 91       	pop	r19
     7f2:	2f 91       	pop	r18
     7f4:	0f 90       	pop	r0
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	0f 90       	pop	r0
     7fa:	1f 90       	pop	r1
     7fc:	18 95       	reti

000007fe <__vector_21__bottom>:
	__vector_21__bottom(reason, adc_val);
}

/* do not static this function to avoid code inlining that would inherit many push operations in the critical section */
void __vector_21__bottom(uint8_t reason, uint16_t adc_val)
{
     7fe:	cf 92       	push	r12
     800:	df 92       	push	r13
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	eb 01       	movw	r28, r22
	/* Low pass filtering and enhancing the data depth */

	if (reason == ADC_STATE_VLD_LDR) {
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	31 f5       	brne	.+76     	; 0x85c <__vector_21__bottom+0x5e>
		g_adc_ldr	= 0.90f * g_adc_ldr		+ 0.10f * adc_val;
     810:	26 e6       	ldi	r18, 0x66	; 102
     812:	36 e6       	ldi	r19, 0x66	; 102
     814:	46 e6       	ldi	r20, 0x66	; 102
     816:	5f e3       	ldi	r21, 0x3F	; 63
     818:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <g_adc_ldr>
     81c:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <g_adc_ldr+0x1>
     820:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <g_adc_ldr+0x2>
     824:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <g_adc_ldr+0x3>
     828:	b6 d5       	rcall	.+2924   	; 0x1396 <__mulsf3>
     82a:	6b 01       	movw	r12, r22
     82c:	7c 01       	movw	r14, r24
     82e:	be 01       	movw	r22, r28
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	fa d4       	rcall	.+2548   	; 0x122a <__floatunsisf>
     836:	2d ec       	ldi	r18, 0xCD	; 205
     838:	3c ec       	ldi	r19, 0xCC	; 204
     83a:	4c ec       	ldi	r20, 0xCC	; 204
     83c:	5d e3       	ldi	r21, 0x3D	; 61
     83e:	ab d5       	rcall	.+2902   	; 0x1396 <__mulsf3>
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	c7 01       	movw	r24, r14
     846:	b6 01       	movw	r22, r12
     848:	ef d3       	rcall	.+2014   	; 0x1028 <__addsf3>
     84a:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <g_adc_ldr>
     84e:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <g_adc_ldr+0x1>
     852:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_adc_ldr+0x2>
     856:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <g_adc_ldr+0x3>
     85a:	27 c0       	rjmp	.+78     	; 0x8aa <__vector_21__bottom+0xac>

		} else if (reason == ADC_STATE_VLD_TEMP) {
     85c:	83 30       	cpi	r24, 0x03	; 3
     85e:	29 f5       	brne	.+74     	; 0x8aa <__vector_21__bottom+0xac>
		g_adc_temp	= 0.97f * g_adc_temp	+ 0.03f * adc_val;
     860:	2c ee       	ldi	r18, 0xEC	; 236
     862:	31 e5       	ldi	r19, 0x51	; 81
     864:	48 e7       	ldi	r20, 0x78	; 120
     866:	5f e3       	ldi	r21, 0x3F	; 63
     868:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <g_adc_temp>
     86c:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <g_adc_temp+0x1>
     870:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <g_adc_temp+0x2>
     874:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <g_adc_temp+0x3>
     878:	8e d5       	rcall	.+2844   	; 0x1396 <__mulsf3>
     87a:	6b 01       	movw	r12, r22
     87c:	7c 01       	movw	r14, r24
     87e:	be 01       	movw	r22, r28
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	d2 d4       	rcall	.+2468   	; 0x122a <__floatunsisf>
     886:	2f e8       	ldi	r18, 0x8F	; 143
     888:	32 ec       	ldi	r19, 0xC2	; 194
     88a:	45 ef       	ldi	r20, 0xF5	; 245
     88c:	5c e3       	ldi	r21, 0x3C	; 60
     88e:	83 d5       	rcall	.+2822   	; 0x1396 <__mulsf3>
     890:	9b 01       	movw	r18, r22
     892:	ac 01       	movw	r20, r24
     894:	c7 01       	movw	r24, r14
     896:	b6 01       	movw	r22, r12
     898:	c7 d3       	rcall	.+1934   	; 0x1028 <__addsf3>
     89a:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <g_adc_temp>
     89e:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <g_adc_temp+0x1>
     8a2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <g_adc_temp+0x2>
     8a6:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <g_adc_temp+0x3>
	}
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	df 90       	pop	r13
     8b4:	cf 90       	pop	r12
     8b6:	08 95       	ret

000008b8 <__vector_21>:
{	/* USART, TX - Complete */
	s_bad_interrupt();
}

ISR(__vector_21, ISR_BLOCK)  // ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* ADC */
     8b8:	1f 92       	push	r1
     8ba:	0f 92       	push	r0
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	0f 92       	push	r0
     8c0:	11 24       	eor	r1, r1
     8c2:	2f 93       	push	r18
     8c4:	3f 93       	push	r19
     8c6:	4f 93       	push	r20
     8c8:	5f 93       	push	r21
     8ca:	6f 93       	push	r22
     8cc:	7f 93       	push	r23
     8ce:	8f 93       	push	r24
     8d0:	9f 93       	push	r25
     8d2:	af 93       	push	r26
     8d4:	bf 93       	push	r27
     8d6:	ef 93       	push	r30
     8d8:	ff 93       	push	r31
	uint16_t adc_val;
	uint8_t  reason = g_adc_state;
     8da:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <g_adc_state>

	/* CLI part */
	adc_val  = ADCL;
     8de:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	adc_val |= ADCH << 8;
     8e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	79 2b       	or	r23, r25

	switch (g_adc_state) {
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	41 f0       	breq	.+16     	; 0x8fe <__vector_21+0x46>
     8ee:	18 f0       	brcs	.+6      	; 0x8f6 <__vector_21+0x3e>
     8f0:	82 30       	cpi	r24, 0x02	; 2
     8f2:	61 f0       	breq	.+24     	; 0x90c <__stack+0xd>
     8f4:	0f c0       	rjmp	.+30     	; 0x914 <__stack+0x15>
		case ADC_STATE_PRE_LDR:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_LDR;
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <g_adc_state>
		break;
     8fc:	10 c0       	rjmp	.+32     	; 0x91e <__stack+0x1f>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
     8fe:	98 ec       	ldi	r25, 0xC8	; 200
     900:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		case ADC_STATE_VLD_LDR:
		adc_set_admux(ADC_MUX_TEMPSENSE | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_TEMP;
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <g_adc_state>
		break;
     90a:	09 c0       	rjmp	.+18     	; 0x91e <__stack+0x1f>

		case ADC_STATE_PRE_TEMP:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_TEMP;
     90c:	93 e0       	ldi	r25, 0x03	; 3
     90e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <g_adc_state>
		break;
     912:	05 c0       	rjmp	.+10     	; 0x91e <__stack+0x1f>
     914:	90 ec       	ldi	r25, 0xC0	; 192
     916:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		case ADC_STATE_VLD_TEMP:
		// fall-through

		default:
		adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_LDR;
     91a:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <g_adc_state>
	}

	/* SEI part */
	sei();
     91e:	78 94       	sei
	__vector_21__bottom(reason, adc_val);
     920:	6e df       	rcall	.-292    	; 0x7fe <__vector_21__bottom>
}
     922:	ff 91       	pop	r31
     924:	ef 91       	pop	r30
     926:	bf 91       	pop	r27
     928:	af 91       	pop	r26
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	7f 91       	pop	r23
     930:	6f 91       	pop	r22
     932:	5f 91       	pop	r21
     934:	4f 91       	pop	r20
     936:	3f 91       	pop	r19
     938:	2f 91       	pop	r18
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <__vector_22>:
		g_adc_temp	= 0.97f * g_adc_temp	+ 0.03f * adc_val;
	}
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	2f 93       	push	r18
     950:	3f 93       	push	r19
     952:	4f 93       	push	r20
     954:	5f 93       	push	r21
     956:	6f 93       	push	r22
     958:	7f 93       	push	r23
     95a:	8f 93       	push	r24
     95c:	9f 93       	push	r25
     95e:	af 93       	push	r26
     960:	bf 93       	push	r27
     962:	ef 93       	push	r30
     964:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     966:	8c dc       	rcall	.-1768   	; 0x280 <asm_break>
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
	s_bad_interrupt();
}
     968:	ff 91       	pop	r31
     96a:	ef 91       	pop	r30
     96c:	bf 91       	pop	r27
     96e:	af 91       	pop	r26
     970:	9f 91       	pop	r25
     972:	8f 91       	pop	r24
     974:	7f 91       	pop	r23
     976:	6f 91       	pop	r22
     978:	5f 91       	pop	r21
     97a:	4f 91       	pop	r20
     97c:	3f 91       	pop	r19
     97e:	2f 91       	pop	r18
     980:	0f 90       	pop	r0
     982:	0f be       	out	0x3f, r0	; 63
     984:	0f 90       	pop	r0
     986:	1f 90       	pop	r1
     988:	18 95       	reti

0000098a <__vector_23>:

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	0f 92       	push	r0
     992:	11 24       	eor	r1, r1
     994:	2f 93       	push	r18
     996:	3f 93       	push	r19
     998:	4f 93       	push	r20
     99a:	5f 93       	push	r21
     99c:	6f 93       	push	r22
     99e:	7f 93       	push	r23
     9a0:	8f 93       	push	r24
     9a2:	9f 93       	push	r25
     9a4:	af 93       	push	r26
     9a6:	bf 93       	push	r27
     9a8:	ef 93       	push	r30
     9aa:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     9ac:	69 dc       	rcall	.-1838   	; 0x280 <asm_break>
}

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
	s_bad_interrupt();
}
     9ae:	ff 91       	pop	r31
     9b0:	ef 91       	pop	r30
     9b2:	bf 91       	pop	r27
     9b4:	af 91       	pop	r26
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	7f 91       	pop	r23
     9bc:	6f 91       	pop	r22
     9be:	5f 91       	pop	r21
     9c0:	4f 91       	pop	r20
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	0f 90       	pop	r0
     9cc:	1f 90       	pop	r1
     9ce:	18 95       	reti

000009d0 <__vector_24>:

ISR(__vector_24, ISR_BLOCK)
{	/* TWI */
     9d0:	1f 92       	push	r1
     9d2:	0f 92       	push	r0
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	0f 92       	push	r0
     9d8:	11 24       	eor	r1, r1
     9da:	2f 93       	push	r18
     9dc:	3f 93       	push	r19
     9de:	4f 93       	push	r20
     9e0:	5f 93       	push	r21
     9e2:	6f 93       	push	r22
     9e4:	7f 93       	push	r23
     9e6:	8f 93       	push	r24
     9e8:	9f 93       	push	r25
     9ea:	af 93       	push	r26
     9ec:	bf 93       	push	r27
     9ee:	ef 93       	push	r30
     9f0:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b1111 << TWS4);
     9f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	uint8_t twd = TWDR;
     9f6:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	/* SEI part */
	sei();
     9fa:	78 94       	sei
	__vector_24__bottom(tws, twd);
     9fc:	80 7f       	andi	r24, 0xF0	; 240
     9fe:	87 d0       	rcall	.+270    	; 0xb0e <__vector_24__bottom>
	TWCR = _BV(TWINT);
     a00:	80 e8       	ldi	r24, 0x80	; 128
     a02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
     a06:	ff 91       	pop	r31
     a08:	ef 91       	pop	r30
     a0a:	bf 91       	pop	r27
     a0c:	af 91       	pop	r26
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	7f 91       	pop	r23
     a14:	6f 91       	pop	r22
     a16:	5f 91       	pop	r21
     a18:	4f 91       	pop	r20
     a1a:	3f 91       	pop	r19
     a1c:	2f 91       	pop	r18
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	0f 90       	pop	r0
     a24:	1f 90       	pop	r1
     a26:	18 95       	reti

00000a28 <__vector_25>:

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
     a28:	1f 92       	push	r1
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	0f 92       	push	r0
     a30:	11 24       	eor	r1, r1
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     a4a:	1a dc       	rcall	.-1996   	; 0x280 <asm_break>
}

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
	s_bad_interrupt();
}
     a4c:	ff 91       	pop	r31
     a4e:	ef 91       	pop	r30
     a50:	bf 91       	pop	r27
     a52:	af 91       	pop	r26
     a54:	9f 91       	pop	r25
     a56:	8f 91       	pop	r24
     a58:	7f 91       	pop	r23
     a5a:	6f 91       	pop	r22
     a5c:	5f 91       	pop	r21
     a5e:	4f 91       	pop	r20
     a60:	3f 91       	pop	r19
     a62:	2f 91       	pop	r18
     a64:	0f 90       	pop	r0
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	0f 90       	pop	r0
     a6a:	1f 90       	pop	r1
     a6c:	18 95       	reti

00000a6e <s_twcr_ack>:
static uint8_t s_rx_lock = 0;
static uint8_t s_rx_d[8];


static void s_twcr_ack(uint8_t set)
{
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	1f 92       	push	r1
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a78:	9f b7       	in	r25, 0x3f	; 63
     a7a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     a7c:	f8 94       	cli
	return flags;
     a7e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	if (set) {
     a80:	88 23       	and	r24, r24
     a82:	31 f0       	breq	.+12     	; 0xa90 <s_twcr_ack+0x22>
		TWCR |=   _BV(TWEA);					// ACK
     a84:	ec eb       	ldi	r30, 0xBC	; 188
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 81       	ld	r24, Z
     a8a:	80 64       	ori	r24, 0x40	; 64
     a8c:	80 83       	st	Z, r24
     a8e:	05 c0       	rjmp	.+10     	; 0xa9a <s_twcr_ack+0x2c>
	} else {
		TWCR &= ~(_BV(TWEA));					// NACK
     a90:	ec eb       	ldi	r30, 0xBC	; 188
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	8f 7b       	andi	r24, 0xBF	; 191
     a98:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a9a:	9f bf       	out	0x3f, r25	; 63
	}

	cpu_irq_restore(flags);
}
     a9c:	0f 90       	pop	r0
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <s_twcr_all>:

static void s_twcr_all(uint8_t ctrl)
{
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	1f 92       	push	r1
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     aae:	9f b7       	in	r25, 0x3f	; 63
     ab0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     ab2:	f8 94       	cli
	return flags;
     ab4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	TWCR = ctrl;
     ab6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     aba:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     abc:	0f 90       	pop	r0
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <s_twdr>:

static void s_twdr(uint8_t data_o)
{
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	1f 92       	push	r1
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ace:	9f b7       	in	r25, 0x3f	; 63
     ad0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     ad2:	f8 94       	cli
	return flags;
     ad4:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	TWDR = data_o;
     ad6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ada:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     adc:	0f 90       	pop	r0
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <s_twi_tx_done>:
}

static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
     ae4:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <s_tx_next_len>
     ae8:	22 23       	and	r18, r18
     aea:	81 f0       	breq	.+32     	; 0xb0c <s_twi_tx_done+0x28>
     aec:	e2 2f       	mov	r30, r18
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	e2 5f       	subi	r30, 0xF2	; 242
     af2:	fe 4f       	sbci	r31, 0xFE	; 254
     af4:	8d e0       	ldi	r24, 0x0D	; 13
     af6:	91 e0       	ldi	r25, 0x01	; 1
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
			s_tx_d[idx] = s_tx_next_d[idx];
     af8:	12 92       	st	-Z, r1
static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
     afa:	e8 17       	cp	r30, r24
     afc:	f9 07       	cpc	r31, r25
     afe:	e1 f7       	brne	.-8      	; 0xaf8 <s_twi_tx_done+0x14>
			s_tx_d[idx] = s_tx_next_d[idx];
		}
		s_tx_len = s_tx_next_len;
     b00:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <s_tx_len>
		s_tx_next_len = 0;
     b04:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <s_tx_next_len>
		s_twdr(0b11100101);						// Start condition
     b08:	85 ee       	ldi	r24, 0xE5	; 229
     b0a:	dc cf       	rjmp	.-72     	; 0xac4 <s_twdr>
     b0c:	08 95       	ret

00000b0e <__vector_24__bottom>:
	}
}


void __vector_24__bottom(uint8_t tws, uint8_t twd)
{
     b0e:	cf 93       	push	r28
	static uint8_t pos_i	= 0;
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;

	switch(tws) {
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	fc 01       	movw	r30, r24
     b14:	38 97       	sbiw	r30, 0x08	; 8
     b16:	e1 3c       	cpi	r30, 0xC1	; 193
     b18:	f1 05       	cpc	r31, r1
     b1a:	08 f0       	brcs	.+2      	; 0xb1e <__vector_24__bottom+0x10>
     b1c:	cc c0       	rjmp	.+408    	; 0xcb6 <__vector_24__bottom+0x1a8>
     b1e:	ec 5c       	subi	r30, 0xCC	; 204
     b20:	ff 4f       	sbci	r31, 0xFF	; 255
     b22:	9c c4       	rjmp	.+2360   	; 0x145c <__tablejump2__>

	/* Master Transmitter Mode */

	case 0x08:									// Start condition transmitted
		s_tx_lock = 1;
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <s_tx_lock>
		pos_o = 0;
     b2a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <pos_o.2504>
	case 0x10:									// Repeated start condition transmitted
	case 0x18:									// SLA+W transmitted and ACK received
		s_twdr(s_tx_d[pos_o++]);
     b2e:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <pos_o.2504>
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	8e 0f       	add	r24, r30
     b36:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <pos_o.2504>
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	e3 5f       	subi	r30, 0xF3	; 243
     b3e:	fe 4f       	sbci	r31, 0xFE	; 254
     b40:	80 81       	ld	r24, Z
     b42:	c0 df       	rcall	.-128    	; 0xac4 <s_twdr>
		break;
     b44:	b8 c0       	rjmp	.+368    	; 0xcb6 <__vector_24__bottom+0x1a8>

	case 0x20:									// SLA+W transmitted and NACK received
		s_twcr_all(0b10010101);					// Send NACK and STOP
     b46:	85 e9       	ldi	r24, 0x95	; 149
     b48:	ad df       	rcall	.-166    	; 0xaa4 <s_twcr_all>
		break;
     b4a:	b5 c0       	rjmp	.+362    	; 0xcb6 <__vector_24__bottom+0x1a8>

	case 0x28:									// Data byte sent and ACK received
		if (pos_o < cnt_o) {
     b4c:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <pos_o.2504>
     b50:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cnt_o.2506>
     b54:	e8 17       	cp	r30, r24
     b56:	60 f4       	brcc	.+24     	; 0xb70 <__vector_24__bottom+0x62>
			s_twdr(s_tx_d[pos_o++]);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	8e 0f       	add	r24, r30
     b5c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <pos_o.2504>
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	e3 5f       	subi	r30, 0xF3	; 243
     b64:	fe 4f       	sbci	r31, 0xFE	; 254
     b66:	80 81       	ld	r24, Z
     b68:	ad df       	rcall	.-166    	; 0xac4 <s_twdr>
			s_twcr_all(0b11000101);				// Send new data byte and ACK send enable
     b6a:	85 ec       	ldi	r24, 0xC5	; 197
     b6c:	9b df       	rcall	.-202    	; 0xaa4 <s_twcr_all>
     b6e:	a3 c0       	rjmp	.+326    	; 0xcb6 <__vector_24__bottom+0x1a8>
		} else {
			s_twcr_all(0b11010101);				// Send STOP and ACK send enable
     b70:	85 ed       	ldi	r24, 0xD5	; 213
     b72:	98 df       	rcall	.-208    	; 0xaa4 <s_twcr_all>
			s_tx_lock = 0;
     b74:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <s_tx_lock>
			s_twi_tx_done();					// Message sent
     b78:	b5 df       	rcall	.-150    	; 0xae4 <s_twi_tx_done>
     b7a:	9d c0       	rjmp	.+314    	; 0xcb6 <__vector_24__bottom+0x1a8>
		}
		break;

	case 0x30:									// Data byte sent and NACK received
		s_twcr_all(0b10010101);					// Send NACK and STOP
     b7c:	85 e9       	ldi	r24, 0x95	; 149
     b7e:	92 df       	rcall	.-220    	; 0xaa4 <s_twcr_all>
		s_tx_lock = 0;
     b80:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <s_tx_lock>
		s_twi_tx_done();						// Message failure
     b84:	af df       	rcall	.-162    	; 0xae4 <s_twi_tx_done>
		break;
     b86:	97 c0       	rjmp	.+302    	; 0xcb6 <__vector_24__bottom+0x1a8>

	case 0x38:									// Arbitration lost
		s_twcr_all(0b11100101);					// Send START (again) and ACK send enable
     b88:	85 ee       	ldi	r24, 0xE5	; 229
     b8a:	8c df       	rcall	.-232    	; 0xaa4 <s_twcr_all>
		break;
     b8c:	94 c0       	rjmp	.+296    	; 0xcb6 <__vector_24__bottom+0x1a8>

	/* Slave Receiver Mode */

	case 0x60:									// SLA+W received and ACK sent
	case 0x68:
		s_rx_lock = 1;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <s_rx_lock>
		s_rx_d[0] = twd;						// Target address
     b94:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <s_rx_d>
		pos_i = 1;								// Starting of reception
     b98:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pos_i.2503>
		break;
     b9c:	8c c0       	rjmp	.+280    	; 0xcb6 <__vector_24__bottom+0x1a8>

	case 0x70:									// GCA received and ACK sent
	case 0x78:
		s_rx_lock = 1;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <s_rx_lock>
		s_rx_d[0] = twd;						// GCA
     ba4:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <s_rx_d>
		pos_i = 1;								// Starting of reception
     ba8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pos_i.2503>
		break;
     bac:	84 c0       	rjmp	.+264    	; 0xcb6 <__vector_24__bottom+0x1a8>

	case 0x80:									// Data after SLA+W received
	case 0x90:
		if (cnt_i == 0b111) {					// Open parameter form
     bae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     bb2:	87 30       	cpi	r24, 0x07	; 7
     bb4:	61 f4       	brne	.+24     	; 0xbce <__vector_24__bottom+0xc0>
			s_rx_d[2] = twd;
     bb6:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <s_rx_d+0x2>
			if (!s_twi_rcvd_command_open_form(s_rx_d, ++pos_i)) {
     bba:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pos_i.2503>
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pos_i.2503>
				s_twcr_ack(true);				// ACK
			} else {
				s_twcr_ack(false);				// NACK
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	53 df       	rcall	.-346    	; 0xa6e <s_twcr_ack>
				cnt_i = 0;
     bc8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
     bcc:	74 c0       	rjmp	.+232    	; 0xcb6 <__vector_24__bottom+0x1a8>
			}

		} else {								// Closed parameter form
			if (pos_i <= 0b111) {
     bce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pos_i.2503>
     bd2:	88 30       	cpi	r24, 0x08	; 8
     bd4:	28 f4       	brcc	.+10     	; 0xbe0 <__vector_24__bottom+0xd2>
				s_rx_d[pos_i] = twd;
     bd6:	e8 2f       	mov	r30, r24
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	ec 5f       	subi	r30, 0xFC	; 252
     bdc:	fe 4f       	sbci	r31, 0xFE	; 254
     bde:	60 83       	st	Z, r22
			}
			if (pos_i == 1) {
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	39 f4       	brne	.+14     	; 0xbf2 <__vector_24__bottom+0xe4>
				cnt_i = ((twd >> 5) & 0b111) + 1;
     be4:	62 95       	swap	r22
     be6:	66 95       	lsr	r22
     be8:	67 70       	andi	r22, 0x07	; 7
     bea:	6f 5f       	subi	r22, 0xFF	; 255
     bec:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_end>
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <__vector_24__bottom+0xe8>
			}
			if (pos_i < 0b111) {
     bf2:	87 30       	cpi	r24, 0x07	; 7
     bf4:	18 f4       	brcc	.+6      	; 0xbfc <__vector_24__bottom+0xee>
				++pos_i;
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pos_i.2503>
			}
			s_twcr_ack(pos_i <= cnt_i);			// ACK - NACK
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <pos_i.2503>
     c02:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_end>
     c06:	92 17       	cp	r25, r18
     c08:	08 f4       	brcc	.+2      	; 0xc0c <__vector_24__bottom+0xfe>
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	30 df       	rcall	.-416    	; 0xa6e <s_twcr_ack>
     c0e:	53 c0       	rjmp	.+166    	; 0xcb6 <__vector_24__bottom+0x1a8>
		}
		break;

	case 0x88:									// NACK after last data byte sent
	case 0x98:
		if (cnt_i != 0b111) {
     c10:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     c14:	87 30       	cpi	r24, 0x07	; 7
     c16:	29 f4       	brne	.+10     	; 0xc22 <__vector_24__bottom+0x114>
			s_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
		} else {
			s_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
     c18:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pos_i.2503>
     c1c:	8f 5f       	subi	r24, 0xFF	; 255
     c1e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pos_i.2503>
		}
		s_rx_lock = 0;
     c22:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <s_rx_lock>
		break;
     c26:	47 c0       	rjmp	.+142    	; 0xcb6 <__vector_24__bottom+0x1a8>

	case 0xA0:
		s_twcr_all(0b11000101);					// Send nothing
     c28:	85 ec       	ldi	r24, 0xC5	; 197
     c2a:	3c df       	rcall	.-392    	; 0xaa4 <s_twcr_all>
		pos_i = 0;
     c2c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pos_i.2503>
		cnt_i = 0;
     c30:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
		s_rx_lock = 0;
     c34:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <s_rx_lock>
		break;
     c38:	3e c0       	rjmp	.+124    	; 0xcb6 <__vector_24__bottom+0x1a8>

	/* Slave Transmitter Mode */

	case 0xA8:									// SLA+R received and ACK has been returned
	case 0xB0:
		s_rx_lock = 1;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <s_rx_lock>
		pos_o = 0;
     c40:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <pos_o.2504>
		s_twdr(cnt_o > pos_o ?  s_rx_d[pos_o++] : 0);
     c44:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <cnt_o.2506>
     c48:	cc 23       	and	r28, r28
     c4a:	29 f0       	breq	.+10     	; 0xc56 <__vector_24__bottom+0x148>
     c4c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <pos_o.2504>
     c50:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_rx_d>
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <__vector_24__bottom+0x14a>
     c56:	8c 2f       	mov	r24, r28
     c58:	35 df       	rcall	.-406    	; 0xac4 <s_twdr>
		s_twcr_ack(cnt_o > pos_o);				// ACK - NACK
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pos_o.2504>
     c60:	9c 17       	cp	r25, r28
     c62:	08 f0       	brcs	.+2      	; 0xc66 <__vector_24__bottom+0x158>
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	03 df       	rcall	.-506    	; 0xa6e <s_twcr_ack>
		break;
     c68:	26 c0       	rjmp	.+76     	; 0xcb6 <__vector_24__bottom+0x1a8>

	case 0xB8:									// Data sent and ACK has been returned
		s_twdr(cnt_o > pos_o ?  s_rx_d[pos_o++] : 0);
     c6a:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <cnt_o.2506>
     c6e:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <pos_o.2504>
     c72:	ec 17       	cp	r30, r28
     c74:	48 f4       	brcc	.+18     	; 0xc88 <__vector_24__bottom+0x17a>
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	8e 0f       	add	r24, r30
     c7a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <pos_o.2504>
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	ec 5f       	subi	r30, 0xFC	; 252
     c82:	fe 4f       	sbci	r31, 0xFE	; 254
     c84:	80 81       	ld	r24, Z
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <__vector_24__bottom+0x17c>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	1c df       	rcall	.-456    	; 0xac4 <s_twdr>
		s_twcr_ack(cnt_o > pos_o);				// ACK - NACK
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pos_o.2504>
     c92:	9c 17       	cp	r25, r28
     c94:	08 f0       	brcs	.+2      	; 0xc98 <__vector_24__bottom+0x18a>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	ea de       	rcall	.-556    	; 0xa6e <s_twcr_ack>
		break;
     c9a:	0d c0       	rjmp	.+26     	; 0xcb6 <__vector_24__bottom+0x1a8>

	case 0xC0:									// Data sent and NACK has been returned
		s_twcr_ack(false);						// NACK
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	e7 de       	rcall	.-562    	; 0xa6e <s_twcr_ack>
		pos_o = 0;
     ca0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <pos_o.2504>
		cnt_o = 0;
     ca4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <cnt_o.2506>
		s_rx_lock = 0;
     ca8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <s_rx_lock>
		break;
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <__vector_24__bottom+0x1a8>

	case 0xC8:									// Superfluous ACK by master sent after NACK has been returned
		s_twcr_all(0b11000101);					// Send nothing
     cae:	85 ec       	ldi	r24, 0xC5	; 197
     cb0:	f9 de       	rcall	.-526    	; 0xaa4 <s_twcr_all>
		s_rx_lock = 0;
     cb2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <s_rx_lock>
		break;
	}
}
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     cba:	08 95       	ret

00000cbc <s_task>:
/* MAIN section */

void halt(void)
{
	/* MAIN Loop Shutdown */
	runmode = 0;
     cbc:	4f 92       	push	r4
     cbe:	5f 92       	push	r5
     cc0:	6f 92       	push	r6
     cc2:	7f 92       	push	r7
     cc4:	8f 92       	push	r8
     cc6:	9f 92       	push	r9
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	00 d0       	rcall	.+0      	; 0xcda <s_task+0x1e>
     cda:	00 d0       	rcall	.+0      	; 0xcdc <s_task+0x20>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	8f b7       	in	r24, 0x3f	; 63
     ce2:	8c 83       	std	Y+4, r24	; 0x04
     ce4:	f8 94       	cli
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	c0 90 37 01 	lds	r12, 0x0137	; 0x800137 <g_adc_ldr>
     cec:	d0 90 38 01 	lds	r13, 0x0138	; 0x800138 <g_adc_ldr+0x1>
     cf0:	e0 90 39 01 	lds	r14, 0x0139	; 0x800139 <g_adc_ldr+0x2>
     cf4:	f0 90 3a 01 	lds	r15, 0x013A	; 0x80013a <g_adc_ldr+0x3>
     cf8:	40 90 2f 01 	lds	r4, 0x012F	; 0x80012f <g_adc_temp>
     cfc:	50 90 30 01 	lds	r5, 0x0130	; 0x800130 <g_adc_temp+0x1>
     d00:	60 90 31 01 	lds	r6, 0x0131	; 0x800131 <g_adc_temp+0x2>
     d04:	70 90 32 01 	lds	r7, 0x0132	; 0x800132 <g_adc_temp+0x3>
     d08:	8f bf       	out	0x3f, r24	; 63
     d0a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pwm.2563>
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <pwm.2563>
     d14:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e8       	ldi	r20, 0x80	; 128
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	c7 01       	movw	r24, r14
     d22:	b6 01       	movw	r22, r12
     d24:	34 d3       	rcall	.+1640   	; 0x138e <__gesf2>
     d26:	88 23       	and	r24, r24
     d28:	04 f1       	brlt	.+64     	; 0xd6a <s_task+0xae>
     d2a:	a7 01       	movw	r20, r14
     d2c:	96 01       	movw	r18, r12
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	70 e4       	ldi	r23, 0x40	; 64
     d32:	8c e9       	ldi	r24, 0x9C	; 156
     d34:	95 e4       	ldi	r25, 0x45	; 69
     d36:	e0 d1       	rcall	.+960    	; 0x10f8 <__divsf3>
     d38:	4b 01       	movw	r8, r22
     d3a:	5c 01       	movw	r10, r24
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	4a e7       	ldi	r20, 0x7A	; 122
     d42:	54 e4       	ldi	r21, 0x44	; 68
     d44:	d5 d1       	rcall	.+938    	; 0x10f0 <__cmpsf2>
     d46:	88 23       	and	r24, r24
     d48:	dc f4       	brge	.+54     	; 0xd80 <s_task+0xc4>
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	4a e7       	ldi	r20, 0x7A	; 122
     d50:	54 e4       	ldi	r21, 0x44	; 68
     d52:	c5 01       	movw	r24, r10
     d54:	b4 01       	movw	r22, r8
     d56:	d0 d1       	rcall	.+928    	; 0x10f8 <__divsf3>
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	45 e6       	ldi	r20, 0x65	; 101
     d5e:	53 e4       	ldi	r21, 0x43	; 67
     d60:	1a d3       	rcall	.+1588   	; 0x1396 <__mulsf3>
     d62:	37 d2       	rcall	.+1134   	; 0x11d2 <__fixunssfsi>
     d64:	8a e1       	ldi	r24, 0x1A	; 26
     d66:	86 0f       	add	r24, r22
     d68:	0c c0       	rjmp	.+24     	; 0xd82 <s_task+0xc6>
     d6a:	0f 2e       	mov	r0, r31
     d6c:	81 2c       	mov	r8, r1
     d6e:	f0 e4       	ldi	r31, 0x40	; 64
     d70:	9f 2e       	mov	r9, r31
     d72:	fc e1       	ldi	r31, 0x1C	; 28
     d74:	af 2e       	mov	r10, r31
     d76:	f6 e4       	ldi	r31, 0x46	; 70
     d78:	bf 2e       	mov	r11, r31
     d7a:	f0 2d       	mov	r31, r0
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <s_task+0xc6>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	80 92 1e 01 	sts	0x011E, r8	; 0x80011e <g_f_DEBUG31>
     d86:	90 92 1f 01 	sts	0x011F, r9	; 0x80011f <g_f_DEBUG31+0x1>
     d8a:	a0 92 20 01 	sts	0x0120, r10	; 0x800120 <g_f_DEBUG31+0x2>
     d8e:	b0 92 21 01 	sts	0x0121, r11	; 0x800121 <g_f_DEBUG31+0x3>
     d92:	c0 92 1a 01 	sts	0x011A, r12	; 0x80011a <g_f_DEBUG32>
     d96:	d0 92 1b 01 	sts	0x011B, r13	; 0x80011b <g_f_DEBUG32+0x1>
     d9a:	e0 92 1c 01 	sts	0x011C, r14	; 0x80011c <g_f_DEBUG32+0x2>
     d9e:	f0 92 1d 01 	sts	0x011D, r15	; 0x80011d <g_f_DEBUG32+0x3>
     da2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <g_u8_DEBUG13>
     da6:	8f b7       	in	r24, 0x3f	; 63
     da8:	8b 83       	std	Y+3, r24	; 0x03
     daa:	f8 94       	cli
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	c0 92 33 01 	sts	0x0133, r12	; 0x800133 <g_adc_ldr_last>
     db2:	d0 92 34 01 	sts	0x0134, r13	; 0x800134 <g_adc_ldr_last+0x1>
     db6:	e0 92 35 01 	sts	0x0135, r14	; 0x800135 <g_adc_ldr_last+0x2>
     dba:	f0 92 36 01 	sts	0x0136, r15	; 0x800136 <g_adc_ldr_last+0x3>
     dbe:	8f bf       	out	0x3f, r24	; 63
     dc0:	29 e1       	ldi	r18, 0x19	; 25
     dc2:	37 e2       	ldi	r19, 0x27	; 39
     dc4:	4d ea       	ldi	r20, 0xAD	; 173
     dc6:	53 e4       	ldi	r21, 0x43	; 67
     dc8:	c3 01       	movw	r24, r6
     dca:	b2 01       	movw	r22, r4
     dcc:	2c d1       	rcall	.+600    	; 0x1026 <__subsf3>
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 ea       	ldi	r19, 0xA0	; 160
     dd2:	47 e8       	ldi	r20, 0x87	; 135
     dd4:	5f e3       	ldi	r21, 0x3F	; 63
     dd6:	df d2       	rcall	.+1470   	; 0x1396 <__mulsf3>
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	48 ec       	ldi	r20, 0xC8	; 200
     dde:	51 e4       	ldi	r21, 0x41	; 65
     de0:	23 d1       	rcall	.+582    	; 0x1028 <__addsf3>
     de2:	6b 01       	movw	r12, r22
     de4:	7c 01       	movw	r14, r24
     de6:	8f b7       	in	r24, 0x3f	; 63
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	f8 94       	cli
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <g_temp_lcd_last>
     df2:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <g_temp_lcd_last+0x1>
     df6:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <g_temp_lcd_last+0x2>
     dfa:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <g_temp_lcd_last+0x3>
     dfe:	c0 92 2b 01 	sts	0x012B, r12	; 0x80012b <g_temp>
     e02:	d0 92 2c 01 	sts	0x012C, r13	; 0x80012c <g_temp+0x1>
     e06:	e0 92 2d 01 	sts	0x012D, r14	; 0x80012d <g_temp+0x2>
     e0a:	f0 92 2e 01 	sts	0x012E, r15	; 0x80012e <g_temp+0x3>
     e0e:	8f bf       	out	0x3f, r24	; 63
     e10:	c7 01       	movw	r24, r14
     e12:	b6 01       	movw	r22, r12
     e14:	08 d1       	rcall	.+528    	; 0x1026 <__subsf3>
     e16:	d8 d1       	rcall	.+944    	; 0x11c8 <__fixsfsi>
     e18:	9b 01       	movw	r18, r22
     e1a:	77 23       	and	r23, r23
     e1c:	24 f4       	brge	.+8      	; 0xe26 <s_task+0x16a>
     e1e:	22 27       	eor	r18, r18
     e20:	33 27       	eor	r19, r19
     e22:	26 1b       	sub	r18, r22
     e24:	37 0b       	sbc	r19, r23
     e26:	b9 01       	movw	r22, r18
     e28:	33 0f       	add	r19, r19
     e2a:	88 0b       	sbc	r24, r24
     e2c:	99 0b       	sbc	r25, r25
     e2e:	ff d1       	rcall	.+1022   	; 0x122e <__floatsisf>
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e8       	ldi	r20, 0x80	; 128
     e36:	5f e3       	ldi	r21, 0x3F	; 63
     e38:	aa d2       	rcall	.+1364   	; 0x138e <__gesf2>
     e3a:	18 16       	cp	r1, r24
     e3c:	6c f4       	brge	.+26     	; 0xe58 <s_task+0x19c>
     e3e:	8f b7       	in	r24, 0x3f	; 63
     e40:	8a 83       	std	Y+2, r24	; 0x02
     e42:	f8 94       	cli
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	c0 92 27 01 	sts	0x0127, r12	; 0x800127 <g_temp_lcd_last>
     e4a:	d0 92 28 01 	sts	0x0128, r13	; 0x800128 <g_temp_lcd_last+0x1>
     e4e:	e0 92 29 01 	sts	0x0129, r14	; 0x800129 <g_temp_lcd_last+0x2>
     e52:	f0 92 2a 01 	sts	0x012A, r15	; 0x80012a <g_temp_lcd_last+0x3>
     e56:	8f bf       	out	0x3f, r24	; 63
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	9f 90       	pop	r9
     e72:	8f 90       	pop	r8
     e74:	7f 90       	pop	r7
     e76:	6f 90       	pop	r6
     e78:	5f 90       	pop	r5
     e7a:	4f 90       	pop	r4
     e7c:	08 95       	ret

00000e7e <main>:
}

int main (void)
{
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	00 d0       	rcall	.+0      	; 0xe84 <main+0x6>
     e84:	1f 92       	push	r1
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts,
	 * most critical pins are handled first.
	 */

	PORTC = 0b01111110;		// PC0: LDR-ADC in-NoPU, PC1: SW_I in-PU, PC2: SW_Q in-PU, PC3: LCD-CS out-HI
     e8a:	8e e7       	ldi	r24, 0x7E	; 126
     e8c:	88 b9       	out	0x08, r24	; 8
	DDRC  = 0b00001000;		// PC4: I2C-SDA in-PU-AF-TWI, PC5: I2C-SCL in-PU-AF-TWI, PC6: RESET in-PU, PC7: -
     e8e:	88 e0       	ldi	r24, 0x08	; 8
     e90:	87 b9       	out	0x07, r24	; 7

	PORTB = 0b00010100;		// PB0: LCD-CD out-LO, PB1: AUDIO out-AF-OC1A, PB2: SW_P in-PU, PB3: LCDBL out-AF-OC2A,
     e92:	84 e1       	ldi	r24, 0x14	; 20
     e94:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0b11111011;		// PB4: LCD-R/!W out-HI, PB5: LCD-EN out-LO, PB6: LEDRD out-LO, LEDGN out-LO
     e96:	8b ef       	ldi	r24, 0xFB	; 251
     e98:	84 b9       	out	0x04, r24	; 4

	PORTD = 0xff;			// PD0..PD7: LCD-D0..LCD-D7 in-PU
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x00;
     e9e:	1a b8       	out	0x0a, r1	; 10

	// Analog input: Digital Disable Register
	DIDR0 = 0b00000001;		// PC0: LDR-ADC
     ea0:	0e e7       	ldi	r16, 0x7E	; 126
     ea2:	10 e0       	ldi	r17, 0x00	; 0
     ea4:	ff 24       	eor	r15, r15
     ea6:	f3 94       	inc	r15
     ea8:	d8 01       	movw	r26, r16
     eaa:	fc 92       	st	X, r15

	/* Rapid I/O settings */
	s_io_preinit();

	/* Init of sub-modules */
	sysclk_init();	sysclk_enable_module(POWER_RED_REG0, PRSPI);	// For debugging this module has to be powered on, again
     eac:	ba d9       	rcall	.-3212   	; 0x222 <sysclk_init>
     eae:	62 e0       	ldi	r22, 0x02	; 2
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	d0 d9       	rcall	.-3168   	; 0x254 <sysclk_enable_module>
#if 0
	GTCCR   = _BV(TSM)							// Timer Synchronous Mode active
		    | _BV(PSRASY)						// Timer 2   prescaler is synced
		    | _BV(PSRSYNC);						// Timer 0/1 prescaler is synced
#else
	GTCCR   = (0b11 << PSRSYNC);
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	83 bd       	out	0x23, r24	; 35
	{
	}

	/* TC1 - OC1A: Audio output @ 16-bit counter PWM, used: 10-bit resolution - overflows with 15625 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM1);
     eb8:	63 e0       	ldi	r22, 0x03	; 3
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	cb d9       	rcall	.-3178   	; 0x254 <sysclk_enable_module>

		TCCR1A  = (0b10  << COM1A0)		 		// HI --> LO when compare value is reached - non-inverted PWM mode
     ebe:	0f 2e       	mov	r0, r31
     ec0:	f3 e8       	ldi	r31, 0x83	; 131
     ec2:	ef 2e       	mov	r14, r31
     ec4:	f0 2d       	mov	r31, r0
     ec6:	e0 92 80 00 	sts	0x0080, r14	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				| (0b11  << WGM10);				// WGM: 0b0111 = Fast PWM 10 bit
//				| (0b10  << WGM10);				// WGM: 0b1110 = Fast PWM, TOP = ICR1

		TCCR1B  = ( 0b01 << WGM12)
     eca:	89 e0       	ldi	r24, 0x09	; 9
     ecc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
#if 0
		ICR1H	=       0b11           ;
		ICR1L	=            0b11111111;
#endif

		TCNT1H  = 0b00000000           ;		// Clear current value for synchronous start (when restarting without reset)
     ed0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		barrier();
		TCNT1L	=            0b00000000;
     ed4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

		OCR1AH  =       0b10           ;		// Mid-range compare value for zero audio output
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL  =            0b00000000;
     ede:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

		TIMSK1  = 0;							// No interrupts (when restarting without reset)
     ee2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		TIFR1   = 0b00100111;					// Clear all flags (when restarting without reset)
     ee6:	87 e2       	ldi	r24, 0x27	; 39
     ee8:	86 bb       	out	0x16, r24	; 22
	}

	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM2);
     eea:	66 e0       	ldi	r22, 0x06	; 6
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	b2 d9       	rcall	.-3228   	; 0x254 <sysclk_enable_module>

		TCCR2A  = (0b10  << COM2A0)				// HI --> LO when compare value is reached - non-inverted PWM mode
     ef0:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				| (0b11  << WGM20);				// WGM: 0b011 = Fast PWM mode 8 bit

		TCCR2B  = ( 0b0  << WGM22)
     ef4:	87 e0       	ldi	r24, 0x07	; 7
     ef6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
				| (0b111 << CS20);				// CLKio DIV 1024 = 15625 Hz

		TCNT2   = 0;							// Clear current value for synchronous start (when restarting without reset)
     efa:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

		OCR2A   = 0x40;							// LCD backlight dimmed down to 25% 
     efe:	90 e4       	ldi	r25, 0x40	; 64
     f00:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

		TIMSK2  = 0;							// No interrupts (when restarting without reset)
     f04:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		TIFR2   = 0b00000111;					// Clear all flags (when restarting without reset)
     f08:	87 bb       	out	0x17, r24	; 23

		ASSR    = 0;							// No async. TOSC1 mode
     f0a:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
}


static void s_adc_init(void)
{
	sysclk_enable_module(POWER_RED_REG0, PRADC);	// enable ADC sub-module
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	a0 d9       	rcall	.-3264   	; 0x254 <sysclk_enable_module>
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
     f14:	ea e7       	ldi	r30, 0x7A	; 122
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	87 e8       	ldi	r24, 0x87	; 135
     f1a:	80 83       	st	Z, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f1c:	8f b7       	in	r24, 0x3f	; 63
     f1e:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
     f20:	f8 94       	cli
	return flags;
     f22:	9b 81       	ldd	r25, Y+3	; 0x03
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
     f24:	d8 01       	movw	r26, r16
     f26:	fc 92       	st	X, r15
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
     f28:	80 ec       	ldi	r24, 0xC0	; 192
     f2a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
     f2e:	ab e7       	ldi	r26, 0x7B	; 123
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	8c 91       	ld	r24, X
     f34:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
     f36:	86 60       	ori	r24, 0x06	; 6
	ADC_ADTS_REG = temp;
     f38:	8c 93       	st	X, r24
}

/*  \brief Enable ADC interrupt */
static inline void adc_enable_interrupt(void)
{
	ADCSRA |= (1 << ADIE);
     f3a:	80 81       	ld	r24, Z
     f3c:	88 60       	ori	r24, 0x08	; 8
     f3e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f40:	9f bf       	out	0x3f, r25	; 63
	ioport_init();
	s_tc_init();
	s_adc_init();

	/* I/O pins go active here */
	board_init();
     f42:	bb de       	rcall	.-650    	; 0xcba <board_init>
//@}
static inline reset_cause_t reset_cause_get_causes(void)
{
#if (MEGA_XX4 ||MEGA_XX4_A || MEGA_XX8 || MEGA_XX8_A || \
	MEGA_XX || MEGA_XX_UN2 || MEGA_XX0_1 || MEGA_RF || MEGA_UNCATEGORIZED) && !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t temp_mcsr = MCUSR ;
     f44:	84 b7       	in	r24, 0x34	; 52
     f46:	98 2f       	mov	r25, r24
     f48:	97 70       	andi	r25, 0x07	; 7

	reset_cause_t rc = reset_cause_get_causes();
	if (rc & CHIP_RESET_CAUSE_EXTRST	||
		rc & CHIP_RESET_CAUSE_BOD_CPU	||
     f4a:	11 f4       	brne	.+4      	; 0xf50 <main+0xd2>
		rc & CHIP_RESET_CAUSE_POR		||
     f4c:	81 11       	cpse	r24, r1
     f4e:	30 c0       	rjmp	.+96     	; 0xfb0 <main+0x132>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f50:	8f b7       	in	r24, 0x3f	; 63
     f52:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     f54:	f8 94       	cli
	return flags;
     f56:	8a 81       	ldd	r24, Y+2	; 0x02

static void s_reset_global_vars(void)
{
	irqflags_t flags	= cpu_irq_save();

	g_adc_state			= ADC_STATE_PRE_LDR;
     f58:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <g_adc_state>
	g_adc_ldr			= 0.f;
     f5c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <g_adc_ldr>
     f60:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <g_adc_ldr+0x1>
     f64:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <g_adc_ldr+0x2>
     f68:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <g_adc_ldr+0x3>
	g_adc_ldr_last		= 0.f;
     f6c:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <g_adc_ldr_last>
     f70:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <g_adc_ldr_last+0x1>
     f74:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <g_adc_ldr_last+0x2>
     f78:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <g_adc_ldr_last+0x3>
	g_adc_temp			= 0.f;
     f7c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <g_adc_temp>
     f80:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <g_adc_temp+0x1>
     f84:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <g_adc_temp+0x2>
     f88:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <g_adc_temp+0x3>
	g_temp				= 0.f;
     f8c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <g_temp>
     f90:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <g_temp+0x1>
     f94:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <g_temp+0x2>
     f98:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <g_temp+0x3>
	g_temp_lcd_last		= 0.f;
     f9c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <g_temp_lcd_last>
     fa0:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <g_temp_lcd_last+0x1>
     fa4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <g_temp_lcd_last+0x2>
     fa8:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <g_temp_lcd_last+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fac:	8f bf       	out	0x3f, r24	; 63
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <main+0x136>
		rc & CHIP_RESET_CAUSE_POR		||
		!rc) {
		s_reset_global_vars();
	} else {
		/* DEBUG */
		asm_break();
     fb0:	67 d9       	rcall	.-3378   	; 0x280 <asm_break>
		nop();
     fb2:	00 00       	nop
	/* TC0: not in use */
	/* TC1: Audio output @ 16-bit counter PWM, used: 10-bit resolution */
	/* TC2: LCD backlight w/ 8-bit resolution */
	{
		/* Timer Synchronous Mode - trigger */
		GTCCR = 0;								// trigger the sync for all counters
     fb4:	13 bc       	out	0x23, r1	; 35

		uint_fast32_t time = 0;
		while (!time) {
			irqflags_t flags = cpu_irq_save();
			g_u32_DEBUG21  =  TCNT1L;
     fb6:	24 e8       	ldi	r18, 0x84	; 132
     fb8:	30 e0       	ldi	r19, 0x00	; 0
			g_u32_DEBUG21 |= (TCNT1H << 8);
     fba:	e5 e8       	ldi	r30, 0x85	; 133
     fbc:	f0 e0       	ldi	r31, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fbe:	8f b7       	in	r24, 0x3f	; 63
     fc0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     fc2:	f8 94       	cli
	return flags;
     fc4:	19 81       	ldd	r17, Y+1	; 0x01
		GTCCR = 0;								// trigger the sync for all counters

		uint_fast32_t time = 0;
		while (!time) {
			irqflags_t flags = cpu_irq_save();
			g_u32_DEBUG21  =  TCNT1L;
     fc6:	d9 01       	movw	r26, r18
     fc8:	8c 91       	ld	r24, X
     fca:	48 2f       	mov	r20, r24
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <g_u32_DEBUG21>
     fd6:	50 93 23 01 	sts	0x0123, r21	; 0x800123 <g_u32_DEBUG21+0x1>
     fda:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <g_u32_DEBUG21+0x2>
     fde:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <g_u32_DEBUG21+0x3>
			g_u32_DEBUG21 |= (TCNT1H << 8);
     fe2:	80 81       	ld	r24, Z
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	98 2f       	mov	r25, r24
     fe8:	88 27       	eor	r24, r24
     fea:	09 2e       	mov	r0, r25
     fec:	00 0c       	add	r0, r0
     fee:	aa 0b       	sbc	r26, r26
     ff0:	bb 0b       	sbc	r27, r27
     ff2:	84 2b       	or	r24, r20
     ff4:	95 2b       	or	r25, r21
     ff6:	a6 2b       	or	r26, r22
     ff8:	b7 2b       	or	r27, r23
     ffa:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <g_u32_DEBUG21>
     ffe:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <g_u32_DEBUG21+0x1>
    1002:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <g_u32_DEBUG21+0x2>
    1006:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <g_u32_DEBUG21+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    100a:	1f bf       	out	0x3f, r17	; 63
			time = g_u32_DEBUG21;
			cpu_irq_restore(flags);
			nop();
    100c:	00 00       	nop
	{
		/* Timer Synchronous Mode - trigger */
		GTCCR = 0;								// trigger the sync for all counters

		uint_fast32_t time = 0;
		while (!time) {
    100e:	89 2b       	or	r24, r25
    1010:	8a 2b       	or	r24, r26
    1012:	8b 2b       	or	r24, r27
    1014:	a1 f2       	breq	.-88     	; 0xfbe <main+0x140>
			g_u32_DEBUG21 |= (TCNT1H << 8);
			time = g_u32_DEBUG21;
			cpu_irq_restore(flags);
			nop();
		}
		nop();
    1016:	00 00       	nop
		nop();
    1018:	00 00       	nop
		nop();
    101a:	00 00       	nop

	/* Initialize external components */
	//lcd_init();

	/* main loop */
	runmode = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <runmode>
    while (runmode) {
	    s_task();
    1022:	4c de       	rcall	.-872    	; 0xcbc <s_task>
    1024:	fe cf       	rjmp	.-4      	; 0x1022 <main+0x1a4>

00001026 <__subsf3>:
    1026:	50 58       	subi	r21, 0x80	; 128

00001028 <__addsf3>:
    1028:	bb 27       	eor	r27, r27
    102a:	aa 27       	eor	r26, r26
    102c:	0e d0       	rcall	.+28     	; 0x104a <__addsf3x>
    102e:	75 c1       	rjmp	.+746    	; 0x131a <__fp_round>
    1030:	66 d1       	rcall	.+716    	; 0x12fe <__fp_pscA>
    1032:	30 f0       	brcs	.+12     	; 0x1040 <__addsf3+0x18>
    1034:	6b d1       	rcall	.+726    	; 0x130c <__fp_pscB>
    1036:	20 f0       	brcs	.+8      	; 0x1040 <__addsf3+0x18>
    1038:	31 f4       	brne	.+12     	; 0x1046 <__addsf3+0x1e>
    103a:	9f 3f       	cpi	r25, 0xFF	; 255
    103c:	11 f4       	brne	.+4      	; 0x1042 <__addsf3+0x1a>
    103e:	1e f4       	brtc	.+6      	; 0x1046 <__addsf3+0x1e>
    1040:	5b c1       	rjmp	.+694    	; 0x12f8 <__fp_nan>
    1042:	0e f4       	brtc	.+2      	; 0x1046 <__addsf3+0x1e>
    1044:	e0 95       	com	r30
    1046:	e7 fb       	bst	r30, 7
    1048:	51 c1       	rjmp	.+674    	; 0x12ec <__fp_inf>

0000104a <__addsf3x>:
    104a:	e9 2f       	mov	r30, r25
    104c:	77 d1       	rcall	.+750    	; 0x133c <__fp_split3>
    104e:	80 f3       	brcs	.-32     	; 0x1030 <__addsf3+0x8>
    1050:	ba 17       	cp	r27, r26
    1052:	62 07       	cpc	r22, r18
    1054:	73 07       	cpc	r23, r19
    1056:	84 07       	cpc	r24, r20
    1058:	95 07       	cpc	r25, r21
    105a:	18 f0       	brcs	.+6      	; 0x1062 <__addsf3x+0x18>
    105c:	71 f4       	brne	.+28     	; 0x107a <__addsf3x+0x30>
    105e:	9e f5       	brtc	.+102    	; 0x10c6 <__addsf3x+0x7c>
    1060:	8f c1       	rjmp	.+798    	; 0x1380 <__fp_zero>
    1062:	0e f4       	brtc	.+2      	; 0x1066 <__addsf3x+0x1c>
    1064:	e0 95       	com	r30
    1066:	0b 2e       	mov	r0, r27
    1068:	ba 2f       	mov	r27, r26
    106a:	a0 2d       	mov	r26, r0
    106c:	0b 01       	movw	r0, r22
    106e:	b9 01       	movw	r22, r18
    1070:	90 01       	movw	r18, r0
    1072:	0c 01       	movw	r0, r24
    1074:	ca 01       	movw	r24, r20
    1076:	a0 01       	movw	r20, r0
    1078:	11 24       	eor	r1, r1
    107a:	ff 27       	eor	r31, r31
    107c:	59 1b       	sub	r21, r25
    107e:	99 f0       	breq	.+38     	; 0x10a6 <__addsf3x+0x5c>
    1080:	59 3f       	cpi	r21, 0xF9	; 249
    1082:	50 f4       	brcc	.+20     	; 0x1098 <__addsf3x+0x4e>
    1084:	50 3e       	cpi	r21, 0xE0	; 224
    1086:	68 f1       	brcs	.+90     	; 0x10e2 <__addsf3x+0x98>
    1088:	1a 16       	cp	r1, r26
    108a:	f0 40       	sbci	r31, 0x00	; 0
    108c:	a2 2f       	mov	r26, r18
    108e:	23 2f       	mov	r18, r19
    1090:	34 2f       	mov	r19, r20
    1092:	44 27       	eor	r20, r20
    1094:	58 5f       	subi	r21, 0xF8	; 248
    1096:	f3 cf       	rjmp	.-26     	; 0x107e <__addsf3x+0x34>
    1098:	46 95       	lsr	r20
    109a:	37 95       	ror	r19
    109c:	27 95       	ror	r18
    109e:	a7 95       	ror	r26
    10a0:	f0 40       	sbci	r31, 0x00	; 0
    10a2:	53 95       	inc	r21
    10a4:	c9 f7       	brne	.-14     	; 0x1098 <__addsf3x+0x4e>
    10a6:	7e f4       	brtc	.+30     	; 0x10c6 <__addsf3x+0x7c>
    10a8:	1f 16       	cp	r1, r31
    10aa:	ba 0b       	sbc	r27, r26
    10ac:	62 0b       	sbc	r22, r18
    10ae:	73 0b       	sbc	r23, r19
    10b0:	84 0b       	sbc	r24, r20
    10b2:	ba f0       	brmi	.+46     	; 0x10e2 <__addsf3x+0x98>
    10b4:	91 50       	subi	r25, 0x01	; 1
    10b6:	a1 f0       	breq	.+40     	; 0x10e0 <__addsf3x+0x96>
    10b8:	ff 0f       	add	r31, r31
    10ba:	bb 1f       	adc	r27, r27
    10bc:	66 1f       	adc	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	c2 f7       	brpl	.-16     	; 0x10b4 <__addsf3x+0x6a>
    10c4:	0e c0       	rjmp	.+28     	; 0x10e2 <__addsf3x+0x98>
    10c6:	ba 0f       	add	r27, r26
    10c8:	62 1f       	adc	r22, r18
    10ca:	73 1f       	adc	r23, r19
    10cc:	84 1f       	adc	r24, r20
    10ce:	48 f4       	brcc	.+18     	; 0x10e2 <__addsf3x+0x98>
    10d0:	87 95       	ror	r24
    10d2:	77 95       	ror	r23
    10d4:	67 95       	ror	r22
    10d6:	b7 95       	ror	r27
    10d8:	f7 95       	ror	r31
    10da:	9e 3f       	cpi	r25, 0xFE	; 254
    10dc:	08 f0       	brcs	.+2      	; 0x10e0 <__addsf3x+0x96>
    10de:	b3 cf       	rjmp	.-154    	; 0x1046 <__addsf3+0x1e>
    10e0:	93 95       	inc	r25
    10e2:	88 0f       	add	r24, r24
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <__addsf3x+0x9e>
    10e6:	99 27       	eor	r25, r25
    10e8:	ee 0f       	add	r30, r30
    10ea:	97 95       	ror	r25
    10ec:	87 95       	ror	r24
    10ee:	08 95       	ret

000010f0 <__cmpsf2>:
    10f0:	d9 d0       	rcall	.+434    	; 0x12a4 <__fp_cmp>
    10f2:	08 f4       	brcc	.+2      	; 0x10f6 <__cmpsf2+0x6>
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	08 95       	ret

000010f8 <__divsf3>:
    10f8:	0c d0       	rcall	.+24     	; 0x1112 <__divsf3x>
    10fa:	0f c1       	rjmp	.+542    	; 0x131a <__fp_round>
    10fc:	07 d1       	rcall	.+526    	; 0x130c <__fp_pscB>
    10fe:	40 f0       	brcs	.+16     	; 0x1110 <__divsf3+0x18>
    1100:	fe d0       	rcall	.+508    	; 0x12fe <__fp_pscA>
    1102:	30 f0       	brcs	.+12     	; 0x1110 <__divsf3+0x18>
    1104:	21 f4       	brne	.+8      	; 0x110e <__divsf3+0x16>
    1106:	5f 3f       	cpi	r21, 0xFF	; 255
    1108:	19 f0       	breq	.+6      	; 0x1110 <__divsf3+0x18>
    110a:	f0 c0       	rjmp	.+480    	; 0x12ec <__fp_inf>
    110c:	51 11       	cpse	r21, r1
    110e:	39 c1       	rjmp	.+626    	; 0x1382 <__fp_szero>
    1110:	f3 c0       	rjmp	.+486    	; 0x12f8 <__fp_nan>

00001112 <__divsf3x>:
    1112:	14 d1       	rcall	.+552    	; 0x133c <__fp_split3>
    1114:	98 f3       	brcs	.-26     	; 0x10fc <__divsf3+0x4>

00001116 <__divsf3_pse>:
    1116:	99 23       	and	r25, r25
    1118:	c9 f3       	breq	.-14     	; 0x110c <__divsf3+0x14>
    111a:	55 23       	and	r21, r21
    111c:	b1 f3       	breq	.-20     	; 0x110a <__divsf3+0x12>
    111e:	95 1b       	sub	r25, r21
    1120:	55 0b       	sbc	r21, r21
    1122:	bb 27       	eor	r27, r27
    1124:	aa 27       	eor	r26, r26
    1126:	62 17       	cp	r22, r18
    1128:	73 07       	cpc	r23, r19
    112a:	84 07       	cpc	r24, r20
    112c:	38 f0       	brcs	.+14     	; 0x113c <__divsf3_pse+0x26>
    112e:	9f 5f       	subi	r25, 0xFF	; 255
    1130:	5f 4f       	sbci	r21, 0xFF	; 255
    1132:	22 0f       	add	r18, r18
    1134:	33 1f       	adc	r19, r19
    1136:	44 1f       	adc	r20, r20
    1138:	aa 1f       	adc	r26, r26
    113a:	a9 f3       	breq	.-22     	; 0x1126 <__divsf3_pse+0x10>
    113c:	33 d0       	rcall	.+102    	; 0x11a4 <__divsf3_pse+0x8e>
    113e:	0e 2e       	mov	r0, r30
    1140:	3a f0       	brmi	.+14     	; 0x1150 <__divsf3_pse+0x3a>
    1142:	e0 e8       	ldi	r30, 0x80	; 128
    1144:	30 d0       	rcall	.+96     	; 0x11a6 <__divsf3_pse+0x90>
    1146:	91 50       	subi	r25, 0x01	; 1
    1148:	50 40       	sbci	r21, 0x00	; 0
    114a:	e6 95       	lsr	r30
    114c:	00 1c       	adc	r0, r0
    114e:	ca f7       	brpl	.-14     	; 0x1142 <__divsf3_pse+0x2c>
    1150:	29 d0       	rcall	.+82     	; 0x11a4 <__divsf3_pse+0x8e>
    1152:	fe 2f       	mov	r31, r30
    1154:	27 d0       	rcall	.+78     	; 0x11a4 <__divsf3_pse+0x8e>
    1156:	66 0f       	add	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	bb 1f       	adc	r27, r27
    115e:	26 17       	cp	r18, r22
    1160:	37 07       	cpc	r19, r23
    1162:	48 07       	cpc	r20, r24
    1164:	ab 07       	cpc	r26, r27
    1166:	b0 e8       	ldi	r27, 0x80	; 128
    1168:	09 f0       	breq	.+2      	; 0x116c <__divsf3_pse+0x56>
    116a:	bb 0b       	sbc	r27, r27
    116c:	80 2d       	mov	r24, r0
    116e:	bf 01       	movw	r22, r30
    1170:	ff 27       	eor	r31, r31
    1172:	93 58       	subi	r25, 0x83	; 131
    1174:	5f 4f       	sbci	r21, 0xFF	; 255
    1176:	2a f0       	brmi	.+10     	; 0x1182 <__divsf3_pse+0x6c>
    1178:	9e 3f       	cpi	r25, 0xFE	; 254
    117a:	51 05       	cpc	r21, r1
    117c:	68 f0       	brcs	.+26     	; 0x1198 <__divsf3_pse+0x82>
    117e:	b6 c0       	rjmp	.+364    	; 0x12ec <__fp_inf>
    1180:	00 c1       	rjmp	.+512    	; 0x1382 <__fp_szero>
    1182:	5f 3f       	cpi	r21, 0xFF	; 255
    1184:	ec f3       	brlt	.-6      	; 0x1180 <__divsf3_pse+0x6a>
    1186:	98 3e       	cpi	r25, 0xE8	; 232
    1188:	dc f3       	brlt	.-10     	; 0x1180 <__divsf3_pse+0x6a>
    118a:	86 95       	lsr	r24
    118c:	77 95       	ror	r23
    118e:	67 95       	ror	r22
    1190:	b7 95       	ror	r27
    1192:	f7 95       	ror	r31
    1194:	9f 5f       	subi	r25, 0xFF	; 255
    1196:	c9 f7       	brne	.-14     	; 0x118a <__divsf3_pse+0x74>
    1198:	88 0f       	add	r24, r24
    119a:	91 1d       	adc	r25, r1
    119c:	96 95       	lsr	r25
    119e:	87 95       	ror	r24
    11a0:	97 f9       	bld	r25, 7
    11a2:	08 95       	ret
    11a4:	e1 e0       	ldi	r30, 0x01	; 1
    11a6:	66 0f       	add	r22, r22
    11a8:	77 1f       	adc	r23, r23
    11aa:	88 1f       	adc	r24, r24
    11ac:	bb 1f       	adc	r27, r27
    11ae:	62 17       	cp	r22, r18
    11b0:	73 07       	cpc	r23, r19
    11b2:	84 07       	cpc	r24, r20
    11b4:	ba 07       	cpc	r27, r26
    11b6:	20 f0       	brcs	.+8      	; 0x11c0 <__divsf3_pse+0xaa>
    11b8:	62 1b       	sub	r22, r18
    11ba:	73 0b       	sbc	r23, r19
    11bc:	84 0b       	sbc	r24, r20
    11be:	ba 0b       	sbc	r27, r26
    11c0:	ee 1f       	adc	r30, r30
    11c2:	88 f7       	brcc	.-30     	; 0x11a6 <__divsf3_pse+0x90>
    11c4:	e0 95       	com	r30
    11c6:	08 95       	ret

000011c8 <__fixsfsi>:
    11c8:	04 d0       	rcall	.+8      	; 0x11d2 <__fixunssfsi>
    11ca:	68 94       	set
    11cc:	b1 11       	cpse	r27, r1
    11ce:	d9 c0       	rjmp	.+434    	; 0x1382 <__fp_szero>
    11d0:	08 95       	ret

000011d2 <__fixunssfsi>:
    11d2:	bc d0       	rcall	.+376    	; 0x134c <__fp_splitA>
    11d4:	88 f0       	brcs	.+34     	; 0x11f8 <__fixunssfsi+0x26>
    11d6:	9f 57       	subi	r25, 0x7F	; 127
    11d8:	90 f0       	brcs	.+36     	; 0x11fe <__fixunssfsi+0x2c>
    11da:	b9 2f       	mov	r27, r25
    11dc:	99 27       	eor	r25, r25
    11de:	b7 51       	subi	r27, 0x17	; 23
    11e0:	a0 f0       	brcs	.+40     	; 0x120a <__fixunssfsi+0x38>
    11e2:	d1 f0       	breq	.+52     	; 0x1218 <__fixunssfsi+0x46>
    11e4:	66 0f       	add	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 1f       	adc	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	1a f0       	brmi	.+6      	; 0x11f4 <__fixunssfsi+0x22>
    11ee:	ba 95       	dec	r27
    11f0:	c9 f7       	brne	.-14     	; 0x11e4 <__fixunssfsi+0x12>
    11f2:	12 c0       	rjmp	.+36     	; 0x1218 <__fixunssfsi+0x46>
    11f4:	b1 30       	cpi	r27, 0x01	; 1
    11f6:	81 f0       	breq	.+32     	; 0x1218 <__fixunssfsi+0x46>
    11f8:	c3 d0       	rcall	.+390    	; 0x1380 <__fp_zero>
    11fa:	b1 e0       	ldi	r27, 0x01	; 1
    11fc:	08 95       	ret
    11fe:	c0 c0       	rjmp	.+384    	; 0x1380 <__fp_zero>
    1200:	67 2f       	mov	r22, r23
    1202:	78 2f       	mov	r23, r24
    1204:	88 27       	eor	r24, r24
    1206:	b8 5f       	subi	r27, 0xF8	; 248
    1208:	39 f0       	breq	.+14     	; 0x1218 <__fixunssfsi+0x46>
    120a:	b9 3f       	cpi	r27, 0xF9	; 249
    120c:	cc f3       	brlt	.-14     	; 0x1200 <__fixunssfsi+0x2e>
    120e:	86 95       	lsr	r24
    1210:	77 95       	ror	r23
    1212:	67 95       	ror	r22
    1214:	b3 95       	inc	r27
    1216:	d9 f7       	brne	.-10     	; 0x120e <__fixunssfsi+0x3c>
    1218:	3e f4       	brtc	.+14     	; 0x1228 <__fixunssfsi+0x56>
    121a:	90 95       	com	r25
    121c:	80 95       	com	r24
    121e:	70 95       	com	r23
    1220:	61 95       	neg	r22
    1222:	7f 4f       	sbci	r23, 0xFF	; 255
    1224:	8f 4f       	sbci	r24, 0xFF	; 255
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	08 95       	ret

0000122a <__floatunsisf>:
    122a:	e8 94       	clt
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <__floatsisf+0x12>

0000122e <__floatsisf>:
    122e:	97 fb       	bst	r25, 7
    1230:	3e f4       	brtc	.+14     	; 0x1240 <__floatsisf+0x12>
    1232:	90 95       	com	r25
    1234:	80 95       	com	r24
    1236:	70 95       	com	r23
    1238:	61 95       	neg	r22
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	8f 4f       	sbci	r24, 0xFF	; 255
    123e:	9f 4f       	sbci	r25, 0xFF	; 255
    1240:	99 23       	and	r25, r25
    1242:	a9 f0       	breq	.+42     	; 0x126e <__floatsisf+0x40>
    1244:	f9 2f       	mov	r31, r25
    1246:	96 e9       	ldi	r25, 0x96	; 150
    1248:	bb 27       	eor	r27, r27
    124a:	93 95       	inc	r25
    124c:	f6 95       	lsr	r31
    124e:	87 95       	ror	r24
    1250:	77 95       	ror	r23
    1252:	67 95       	ror	r22
    1254:	b7 95       	ror	r27
    1256:	f1 11       	cpse	r31, r1
    1258:	f8 cf       	rjmp	.-16     	; 0x124a <__floatsisf+0x1c>
    125a:	fa f4       	brpl	.+62     	; 0x129a <__floatsisf+0x6c>
    125c:	bb 0f       	add	r27, r27
    125e:	11 f4       	brne	.+4      	; 0x1264 <__floatsisf+0x36>
    1260:	60 ff       	sbrs	r22, 0
    1262:	1b c0       	rjmp	.+54     	; 0x129a <__floatsisf+0x6c>
    1264:	6f 5f       	subi	r22, 0xFF	; 255
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
    1268:	8f 4f       	sbci	r24, 0xFF	; 255
    126a:	9f 4f       	sbci	r25, 0xFF	; 255
    126c:	16 c0       	rjmp	.+44     	; 0x129a <__floatsisf+0x6c>
    126e:	88 23       	and	r24, r24
    1270:	11 f0       	breq	.+4      	; 0x1276 <__floatsisf+0x48>
    1272:	96 e9       	ldi	r25, 0x96	; 150
    1274:	11 c0       	rjmp	.+34     	; 0x1298 <__floatsisf+0x6a>
    1276:	77 23       	and	r23, r23
    1278:	21 f0       	breq	.+8      	; 0x1282 <__floatsisf+0x54>
    127a:	9e e8       	ldi	r25, 0x8E	; 142
    127c:	87 2f       	mov	r24, r23
    127e:	76 2f       	mov	r23, r22
    1280:	05 c0       	rjmp	.+10     	; 0x128c <__floatsisf+0x5e>
    1282:	66 23       	and	r22, r22
    1284:	71 f0       	breq	.+28     	; 0x12a2 <__floatsisf+0x74>
    1286:	96 e8       	ldi	r25, 0x86	; 134
    1288:	86 2f       	mov	r24, r22
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	2a f0       	brmi	.+10     	; 0x129a <__floatsisf+0x6c>
    1290:	9a 95       	dec	r25
    1292:	66 0f       	add	r22, r22
    1294:	77 1f       	adc	r23, r23
    1296:	88 1f       	adc	r24, r24
    1298:	da f7       	brpl	.-10     	; 0x1290 <__floatsisf+0x62>
    129a:	88 0f       	add	r24, r24
    129c:	96 95       	lsr	r25
    129e:	87 95       	ror	r24
    12a0:	97 f9       	bld	r25, 7
    12a2:	08 95       	ret

000012a4 <__fp_cmp>:
    12a4:	99 0f       	add	r25, r25
    12a6:	00 08       	sbc	r0, r0
    12a8:	55 0f       	add	r21, r21
    12aa:	aa 0b       	sbc	r26, r26
    12ac:	e0 e8       	ldi	r30, 0x80	; 128
    12ae:	fe ef       	ldi	r31, 0xFE	; 254
    12b0:	16 16       	cp	r1, r22
    12b2:	17 06       	cpc	r1, r23
    12b4:	e8 07       	cpc	r30, r24
    12b6:	f9 07       	cpc	r31, r25
    12b8:	c0 f0       	brcs	.+48     	; 0x12ea <__fp_cmp+0x46>
    12ba:	12 16       	cp	r1, r18
    12bc:	13 06       	cpc	r1, r19
    12be:	e4 07       	cpc	r30, r20
    12c0:	f5 07       	cpc	r31, r21
    12c2:	98 f0       	brcs	.+38     	; 0x12ea <__fp_cmp+0x46>
    12c4:	62 1b       	sub	r22, r18
    12c6:	73 0b       	sbc	r23, r19
    12c8:	84 0b       	sbc	r24, r20
    12ca:	95 0b       	sbc	r25, r21
    12cc:	39 f4       	brne	.+14     	; 0x12dc <__fp_cmp+0x38>
    12ce:	0a 26       	eor	r0, r26
    12d0:	61 f0       	breq	.+24     	; 0x12ea <__fp_cmp+0x46>
    12d2:	23 2b       	or	r18, r19
    12d4:	24 2b       	or	r18, r20
    12d6:	25 2b       	or	r18, r21
    12d8:	21 f4       	brne	.+8      	; 0x12e2 <__fp_cmp+0x3e>
    12da:	08 95       	ret
    12dc:	0a 26       	eor	r0, r26
    12de:	09 f4       	brne	.+2      	; 0x12e2 <__fp_cmp+0x3e>
    12e0:	a1 40       	sbci	r26, 0x01	; 1
    12e2:	a6 95       	lsr	r26
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	81 1d       	adc	r24, r1
    12e8:	81 1d       	adc	r24, r1
    12ea:	08 95       	ret

000012ec <__fp_inf>:
    12ec:	97 f9       	bld	r25, 7
    12ee:	9f 67       	ori	r25, 0x7F	; 127
    12f0:	80 e8       	ldi	r24, 0x80	; 128
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	08 95       	ret

000012f8 <__fp_nan>:
    12f8:	9f ef       	ldi	r25, 0xFF	; 255
    12fa:	80 ec       	ldi	r24, 0xC0	; 192
    12fc:	08 95       	ret

000012fe <__fp_pscA>:
    12fe:	00 24       	eor	r0, r0
    1300:	0a 94       	dec	r0
    1302:	16 16       	cp	r1, r22
    1304:	17 06       	cpc	r1, r23
    1306:	18 06       	cpc	r1, r24
    1308:	09 06       	cpc	r0, r25
    130a:	08 95       	ret

0000130c <__fp_pscB>:
    130c:	00 24       	eor	r0, r0
    130e:	0a 94       	dec	r0
    1310:	12 16       	cp	r1, r18
    1312:	13 06       	cpc	r1, r19
    1314:	14 06       	cpc	r1, r20
    1316:	05 06       	cpc	r0, r21
    1318:	08 95       	ret

0000131a <__fp_round>:
    131a:	09 2e       	mov	r0, r25
    131c:	03 94       	inc	r0
    131e:	00 0c       	add	r0, r0
    1320:	11 f4       	brne	.+4      	; 0x1326 <__fp_round+0xc>
    1322:	88 23       	and	r24, r24
    1324:	52 f0       	brmi	.+20     	; 0x133a <__fp_round+0x20>
    1326:	bb 0f       	add	r27, r27
    1328:	40 f4       	brcc	.+16     	; 0x133a <__fp_round+0x20>
    132a:	bf 2b       	or	r27, r31
    132c:	11 f4       	brne	.+4      	; 0x1332 <__fp_round+0x18>
    132e:	60 ff       	sbrs	r22, 0
    1330:	04 c0       	rjmp	.+8      	; 0x133a <__fp_round+0x20>
    1332:	6f 5f       	subi	r22, 0xFF	; 255
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	8f 4f       	sbci	r24, 0xFF	; 255
    1338:	9f 4f       	sbci	r25, 0xFF	; 255
    133a:	08 95       	ret

0000133c <__fp_split3>:
    133c:	57 fd       	sbrc	r21, 7
    133e:	90 58       	subi	r25, 0x80	; 128
    1340:	44 0f       	add	r20, r20
    1342:	55 1f       	adc	r21, r21
    1344:	59 f0       	breq	.+22     	; 0x135c <__fp_splitA+0x10>
    1346:	5f 3f       	cpi	r21, 0xFF	; 255
    1348:	71 f0       	breq	.+28     	; 0x1366 <__fp_splitA+0x1a>
    134a:	47 95       	ror	r20

0000134c <__fp_splitA>:
    134c:	88 0f       	add	r24, r24
    134e:	97 fb       	bst	r25, 7
    1350:	99 1f       	adc	r25, r25
    1352:	61 f0       	breq	.+24     	; 0x136c <__fp_splitA+0x20>
    1354:	9f 3f       	cpi	r25, 0xFF	; 255
    1356:	79 f0       	breq	.+30     	; 0x1376 <__fp_splitA+0x2a>
    1358:	87 95       	ror	r24
    135a:	08 95       	ret
    135c:	12 16       	cp	r1, r18
    135e:	13 06       	cpc	r1, r19
    1360:	14 06       	cpc	r1, r20
    1362:	55 1f       	adc	r21, r21
    1364:	f2 cf       	rjmp	.-28     	; 0x134a <__fp_split3+0xe>
    1366:	46 95       	lsr	r20
    1368:	f1 df       	rcall	.-30     	; 0x134c <__fp_splitA>
    136a:	08 c0       	rjmp	.+16     	; 0x137c <__fp_splitA+0x30>
    136c:	16 16       	cp	r1, r22
    136e:	17 06       	cpc	r1, r23
    1370:	18 06       	cpc	r1, r24
    1372:	99 1f       	adc	r25, r25
    1374:	f1 cf       	rjmp	.-30     	; 0x1358 <__fp_splitA+0xc>
    1376:	86 95       	lsr	r24
    1378:	71 05       	cpc	r23, r1
    137a:	61 05       	cpc	r22, r1
    137c:	08 94       	sec
    137e:	08 95       	ret

00001380 <__fp_zero>:
    1380:	e8 94       	clt

00001382 <__fp_szero>:
    1382:	bb 27       	eor	r27, r27
    1384:	66 27       	eor	r22, r22
    1386:	77 27       	eor	r23, r23
    1388:	cb 01       	movw	r24, r22
    138a:	97 f9       	bld	r25, 7
    138c:	08 95       	ret

0000138e <__gesf2>:
    138e:	8a df       	rcall	.-236    	; 0x12a4 <__fp_cmp>
    1390:	08 f4       	brcc	.+2      	; 0x1394 <__gesf2+0x6>
    1392:	8f ef       	ldi	r24, 0xFF	; 255
    1394:	08 95       	ret

00001396 <__mulsf3>:
    1396:	0b d0       	rcall	.+22     	; 0x13ae <__mulsf3x>
    1398:	c0 cf       	rjmp	.-128    	; 0x131a <__fp_round>
    139a:	b1 df       	rcall	.-158    	; 0x12fe <__fp_pscA>
    139c:	28 f0       	brcs	.+10     	; 0x13a8 <__mulsf3+0x12>
    139e:	b6 df       	rcall	.-148    	; 0x130c <__fp_pscB>
    13a0:	18 f0       	brcs	.+6      	; 0x13a8 <__mulsf3+0x12>
    13a2:	95 23       	and	r25, r21
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <__mulsf3+0x12>
    13a6:	a2 cf       	rjmp	.-188    	; 0x12ec <__fp_inf>
    13a8:	a7 cf       	rjmp	.-178    	; 0x12f8 <__fp_nan>
    13aa:	11 24       	eor	r1, r1
    13ac:	ea cf       	rjmp	.-44     	; 0x1382 <__fp_szero>

000013ae <__mulsf3x>:
    13ae:	c6 df       	rcall	.-116    	; 0x133c <__fp_split3>
    13b0:	a0 f3       	brcs	.-24     	; 0x139a <__mulsf3+0x4>

000013b2 <__mulsf3_pse>:
    13b2:	95 9f       	mul	r25, r21
    13b4:	d1 f3       	breq	.-12     	; 0x13aa <__mulsf3+0x14>
    13b6:	95 0f       	add	r25, r21
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	55 1f       	adc	r21, r21
    13bc:	62 9f       	mul	r22, r18
    13be:	f0 01       	movw	r30, r0
    13c0:	72 9f       	mul	r23, r18
    13c2:	bb 27       	eor	r27, r27
    13c4:	f0 0d       	add	r31, r0
    13c6:	b1 1d       	adc	r27, r1
    13c8:	63 9f       	mul	r22, r19
    13ca:	aa 27       	eor	r26, r26
    13cc:	f0 0d       	add	r31, r0
    13ce:	b1 1d       	adc	r27, r1
    13d0:	aa 1f       	adc	r26, r26
    13d2:	64 9f       	mul	r22, r20
    13d4:	66 27       	eor	r22, r22
    13d6:	b0 0d       	add	r27, r0
    13d8:	a1 1d       	adc	r26, r1
    13da:	66 1f       	adc	r22, r22
    13dc:	82 9f       	mul	r24, r18
    13de:	22 27       	eor	r18, r18
    13e0:	b0 0d       	add	r27, r0
    13e2:	a1 1d       	adc	r26, r1
    13e4:	62 1f       	adc	r22, r18
    13e6:	73 9f       	mul	r23, r19
    13e8:	b0 0d       	add	r27, r0
    13ea:	a1 1d       	adc	r26, r1
    13ec:	62 1f       	adc	r22, r18
    13ee:	83 9f       	mul	r24, r19
    13f0:	a0 0d       	add	r26, r0
    13f2:	61 1d       	adc	r22, r1
    13f4:	22 1f       	adc	r18, r18
    13f6:	74 9f       	mul	r23, r20
    13f8:	33 27       	eor	r19, r19
    13fa:	a0 0d       	add	r26, r0
    13fc:	61 1d       	adc	r22, r1
    13fe:	23 1f       	adc	r18, r19
    1400:	84 9f       	mul	r24, r20
    1402:	60 0d       	add	r22, r0
    1404:	21 1d       	adc	r18, r1
    1406:	82 2f       	mov	r24, r18
    1408:	76 2f       	mov	r23, r22
    140a:	6a 2f       	mov	r22, r26
    140c:	11 24       	eor	r1, r1
    140e:	9f 57       	subi	r25, 0x7F	; 127
    1410:	50 40       	sbci	r21, 0x00	; 0
    1412:	8a f0       	brmi	.+34     	; 0x1436 <__mulsf3_pse+0x84>
    1414:	e1 f0       	breq	.+56     	; 0x144e <__mulsf3_pse+0x9c>
    1416:	88 23       	and	r24, r24
    1418:	4a f0       	brmi	.+18     	; 0x142c <__mulsf3_pse+0x7a>
    141a:	ee 0f       	add	r30, r30
    141c:	ff 1f       	adc	r31, r31
    141e:	bb 1f       	adc	r27, r27
    1420:	66 1f       	adc	r22, r22
    1422:	77 1f       	adc	r23, r23
    1424:	88 1f       	adc	r24, r24
    1426:	91 50       	subi	r25, 0x01	; 1
    1428:	50 40       	sbci	r21, 0x00	; 0
    142a:	a9 f7       	brne	.-22     	; 0x1416 <__mulsf3_pse+0x64>
    142c:	9e 3f       	cpi	r25, 0xFE	; 254
    142e:	51 05       	cpc	r21, r1
    1430:	70 f0       	brcs	.+28     	; 0x144e <__mulsf3_pse+0x9c>
    1432:	5c cf       	rjmp	.-328    	; 0x12ec <__fp_inf>
    1434:	a6 cf       	rjmp	.-180    	; 0x1382 <__fp_szero>
    1436:	5f 3f       	cpi	r21, 0xFF	; 255
    1438:	ec f3       	brlt	.-6      	; 0x1434 <__mulsf3_pse+0x82>
    143a:	98 3e       	cpi	r25, 0xE8	; 232
    143c:	dc f3       	brlt	.-10     	; 0x1434 <__mulsf3_pse+0x82>
    143e:	86 95       	lsr	r24
    1440:	77 95       	ror	r23
    1442:	67 95       	ror	r22
    1444:	b7 95       	ror	r27
    1446:	f7 95       	ror	r31
    1448:	e7 95       	ror	r30
    144a:	9f 5f       	subi	r25, 0xFF	; 255
    144c:	c1 f7       	brne	.-16     	; 0x143e <__mulsf3_pse+0x8c>
    144e:	fe 2b       	or	r31, r30
    1450:	88 0f       	add	r24, r24
    1452:	91 1d       	adc	r25, r1
    1454:	96 95       	lsr	r25
    1456:	87 95       	ror	r24
    1458:	97 f9       	bld	r25, 7
    145a:	08 95       	ret

0000145c <__tablejump2__>:
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	05 90       	lpm	r0, Z+
    1462:	f4 91       	lpm	r31, Z
    1464:	e0 2d       	mov	r30, r0
    1466:	09 94       	ijmp

00001468 <_exit>:
    1468:	f8 94       	cli

0000146a <__stop_program>:
    146a:	ff cf       	rjmp	.-2      	; 0x146a <__stop_program>
