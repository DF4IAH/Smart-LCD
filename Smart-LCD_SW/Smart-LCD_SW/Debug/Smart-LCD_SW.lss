
Smart-LCD_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000024da  0000256e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800118  00800118  00002586  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002586  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005611  00000000  00000000  00002930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018b5  00000000  00000000  00007f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004aa9  00000000  00000000  000097f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010b0  00000000  00000000  0000e2a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000133ab  00000000  00000000  0000f350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004acc  00000000  00000000  000226fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  000271c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001945  00000000  00000000  0002748f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c2       	rjmp	.+1146   	; 0x47c <__ctors_end>
       2:	00 00       	nop
       4:	78 c6       	rjmp	.+3312   	; 0xcf6 <__vector_1>
       6:	00 00       	nop
       8:	99 c6       	rjmp	.+3378   	; 0xd3c <__vector_2>
       a:	00 00       	nop
       c:	ba c6       	rjmp	.+3444   	; 0xd82 <__vector_3>
       e:	00 00       	nop
      10:	db c6       	rjmp	.+3510   	; 0xdc8 <__vector_4>
      12:	00 00       	nop
      14:	fc c6       	rjmp	.+3576   	; 0xe0e <__vector_5>
      16:	00 00       	nop
      18:	1d c7       	rjmp	.+3642   	; 0xe54 <__vector_6>
      1a:	00 00       	nop
      1c:	3e c7       	rjmp	.+3708   	; 0xe9a <__vector_7>
      1e:	00 00       	nop
      20:	5f c7       	rjmp	.+3774   	; 0xee0 <__vector_8>
      22:	00 00       	nop
      24:	80 c7       	rjmp	.+3840   	; 0xf26 <__vector_9>
      26:	00 00       	nop
      28:	a1 c7       	rjmp	.+3906   	; 0xf6c <__vector_10>
      2a:	00 00       	nop
      2c:	c2 c7       	rjmp	.+3972   	; 0xfb2 <__vector_11>
      2e:	00 00       	nop
      30:	e3 c7       	rjmp	.+4038   	; 0xff8 <__vector_12>
      32:	00 00       	nop
      34:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__vector_13>
      38:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__vector_14>
      3c:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__vector_15>
      40:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__vector_16>
      44:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__vector_17>
      48:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__vector_18>
      4c:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_19>
      50:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_20>
      54:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__vector_21>
      58:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__vector_22>
      5c:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__vector_23>
      60:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__vector_24>
      64:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__vector_25>
      68:	cc 0d       	add	r28, r12
      6a:	95 0e       	add	r9, r21
      6c:	95 0e       	add	r9, r21
      6e:	95 0e       	add	r9, r21
      70:	95 0e       	add	r9, r21
      72:	95 0e       	add	r9, r21
      74:	95 0e       	add	r9, r21
      76:	95 0e       	add	r9, r21
      78:	d1 0d       	add	r29, r1
      7a:	95 0e       	add	r9, r21
      7c:	95 0e       	add	r9, r21
      7e:	95 0e       	add	r9, r21
      80:	95 0e       	add	r9, r21
      82:	95 0e       	add	r9, r21
      84:	95 0e       	add	r9, r21
      86:	95 0e       	add	r9, r21
      88:	d1 0d       	add	r29, r1
      8a:	95 0e       	add	r9, r21
      8c:	95 0e       	add	r9, r21
      8e:	95 0e       	add	r9, r21
      90:	95 0e       	add	r9, r21
      92:	95 0e       	add	r9, r21
      94:	95 0e       	add	r9, r21
      96:	95 0e       	add	r9, r21
      98:	dd 0d       	add	r29, r13
      9a:	95 0e       	add	r9, r21
      9c:	95 0e       	add	r9, r21
      9e:	95 0e       	add	r9, r21
      a0:	95 0e       	add	r9, r21
      a2:	95 0e       	add	r9, r21
      a4:	95 0e       	add	r9, r21
      a6:	95 0e       	add	r9, r21
      a8:	e0 0d       	add	r30, r0
      aa:	95 0e       	add	r9, r21
      ac:	95 0e       	add	r9, r21
      ae:	95 0e       	add	r9, r21
      b0:	95 0e       	add	r9, r21
      b2:	95 0e       	add	r9, r21
      b4:	95 0e       	add	r9, r21
      b6:	95 0e       	add	r9, r21
      b8:	f8 0d       	add	r31, r8
      ba:	95 0e       	add	r9, r21
      bc:	95 0e       	add	r9, r21
      be:	95 0e       	add	r9, r21
      c0:	95 0e       	add	r9, r21
      c2:	95 0e       	add	r9, r21
      c4:	95 0e       	add	r9, r21
      c6:	95 0e       	add	r9, r21
      c8:	fe 0d       	add	r31, r14
      ca:	95 0e       	add	r9, r21
      cc:	95 0e       	add	r9, r21
      ce:	95 0e       	add	r9, r21
      d0:	95 0e       	add	r9, r21
      d2:	95 0e       	add	r9, r21
      d4:	95 0e       	add	r9, r21
      d6:	95 0e       	add	r9, r21
      d8:	95 0e       	add	r9, r21
      da:	95 0e       	add	r9, r21
      dc:	95 0e       	add	r9, r21
      de:	95 0e       	add	r9, r21
      e0:	95 0e       	add	r9, r21
      e2:	95 0e       	add	r9, r21
      e4:	95 0e       	add	r9, r21
      e6:	95 0e       	add	r9, r21
      e8:	95 0e       	add	r9, r21
      ea:	95 0e       	add	r9, r21
      ec:	95 0e       	add	r9, r21
      ee:	95 0e       	add	r9, r21
      f0:	95 0e       	add	r9, r21
      f2:	95 0e       	add	r9, r21
      f4:	95 0e       	add	r9, r21
      f6:	95 0e       	add	r9, r21
      f8:	95 0e       	add	r9, r21
      fa:	95 0e       	add	r9, r21
      fc:	95 0e       	add	r9, r21
      fe:	95 0e       	add	r9, r21
     100:	95 0e       	add	r9, r21
     102:	95 0e       	add	r9, r21
     104:	95 0e       	add	r9, r21
     106:	95 0e       	add	r9, r21
     108:	95 0e       	add	r9, r21
     10a:	95 0e       	add	r9, r21
     10c:	95 0e       	add	r9, r21
     10e:	95 0e       	add	r9, r21
     110:	95 0e       	add	r9, r21
     112:	95 0e       	add	r9, r21
     114:	95 0e       	add	r9, r21
     116:	95 0e       	add	r9, r21
     118:	01 0e       	add	r0, r17
     11a:	95 0e       	add	r9, r21
     11c:	95 0e       	add	r9, r21
     11e:	95 0e       	add	r9, r21
     120:	95 0e       	add	r9, r21
     122:	95 0e       	add	r9, r21
     124:	95 0e       	add	r9, r21
     126:	95 0e       	add	r9, r21
     128:	01 0e       	add	r0, r17
     12a:	95 0e       	add	r9, r21
     12c:	95 0e       	add	r9, r21
     12e:	95 0e       	add	r9, r21
     130:	95 0e       	add	r9, r21
     132:	95 0e       	add	r9, r21
     134:	95 0e       	add	r9, r21
     136:	95 0e       	add	r9, r21
     138:	09 0e       	add	r0, r25
     13a:	95 0e       	add	r9, r21
     13c:	95 0e       	add	r9, r21
     13e:	95 0e       	add	r9, r21
     140:	95 0e       	add	r9, r21
     142:	95 0e       	add	r9, r21
     144:	95 0e       	add	r9, r21
     146:	95 0e       	add	r9, r21
     148:	09 0e       	add	r0, r25
     14a:	95 0e       	add	r9, r21
     14c:	95 0e       	add	r9, r21
     14e:	95 0e       	add	r9, r21
     150:	95 0e       	add	r9, r21
     152:	95 0e       	add	r9, r21
     154:	95 0e       	add	r9, r21
     156:	95 0e       	add	r9, r21
     158:	11 0e       	add	r1, r17
     15a:	95 0e       	add	r9, r21
     15c:	95 0e       	add	r9, r21
     15e:	95 0e       	add	r9, r21
     160:	95 0e       	add	r9, r21
     162:	95 0e       	add	r9, r21
     164:	95 0e       	add	r9, r21
     166:	95 0e       	add	r9, r21
     168:	42 0e       	add	r4, r18
     16a:	95 0e       	add	r9, r21
     16c:	95 0e       	add	r9, r21
     16e:	95 0e       	add	r9, r21
     170:	95 0e       	add	r9, r21
     172:	95 0e       	add	r9, r21
     174:	95 0e       	add	r9, r21
     176:	95 0e       	add	r9, r21
     178:	11 0e       	add	r1, r17
     17a:	95 0e       	add	r9, r21
     17c:	95 0e       	add	r9, r21
     17e:	95 0e       	add	r9, r21
     180:	95 0e       	add	r9, r21
     182:	95 0e       	add	r9, r21
     184:	95 0e       	add	r9, r21
     186:	95 0e       	add	r9, r21
     188:	42 0e       	add	r4, r18
     18a:	95 0e       	add	r9, r21
     18c:	95 0e       	add	r9, r21
     18e:	95 0e       	add	r9, r21
     190:	95 0e       	add	r9, r21
     192:	95 0e       	add	r9, r21
     194:	95 0e       	add	r9, r21
     196:	95 0e       	add	r9, r21
     198:	4e 0e       	add	r4, r30
     19a:	95 0e       	add	r9, r21
     19c:	95 0e       	add	r9, r21
     19e:	95 0e       	add	r9, r21
     1a0:	95 0e       	add	r9, r21
     1a2:	95 0e       	add	r9, r21
     1a4:	95 0e       	add	r9, r21
     1a6:	95 0e       	add	r9, r21
     1a8:	57 0e       	add	r5, r23
     1aa:	95 0e       	add	r9, r21
     1ac:	95 0e       	add	r9, r21
     1ae:	95 0e       	add	r9, r21
     1b0:	95 0e       	add	r9, r21
     1b2:	95 0e       	add	r9, r21
     1b4:	95 0e       	add	r9, r21
     1b6:	95 0e       	add	r9, r21
     1b8:	57 0e       	add	r5, r23
     1ba:	95 0e       	add	r9, r21
     1bc:	95 0e       	add	r9, r21
     1be:	95 0e       	add	r9, r21
     1c0:	95 0e       	add	r9, r21
     1c2:	95 0e       	add	r9, r21
     1c4:	95 0e       	add	r9, r21
     1c6:	95 0e       	add	r9, r21
     1c8:	6f 0e       	add	r6, r31
     1ca:	95 0e       	add	r9, r21
     1cc:	95 0e       	add	r9, r21
     1ce:	95 0e       	add	r9, r21
     1d0:	95 0e       	add	r9, r21
     1d2:	95 0e       	add	r9, r21
     1d4:	95 0e       	add	r9, r21
     1d6:	95 0e       	add	r9, r21
     1d8:	88 0e       	add	r8, r24
     1da:	95 0e       	add	r9, r21
     1dc:	95 0e       	add	r9, r21
     1de:	95 0e       	add	r9, r21
     1e0:	95 0e       	add	r9, r21
     1e2:	95 0e       	add	r9, r21
     1e4:	95 0e       	add	r9, r21
     1e6:	95 0e       	add	r9, r21
     1e8:	91 0e       	add	r9, r17

000001ea <__trampolines_end>:
     1ea:	00 00       	nop
     1ec:	00 00       	nop
     1ee:	00 00       	nop
     1f0:	00 20       	and	r0, r0
     1f2:	20 20       	and	r2, r0
     1f4:	20 20       	and	r2, r0
     1f6:	00 20       	and	r0, r0
     1f8:	50 50       	subi	r21, 0x00	; 0
     1fa:	50 00       	.word	0x0050	; ????
     1fc:	00 00       	nop
     1fe:	00 50       	subi	r16, 0x00	; 0
     200:	50 f8       	bld	r5, 0
     202:	50 f8       	bld	r5, 0
     204:	50 50       	subi	r21, 0x00	; 0
     206:	20 78       	andi	r18, 0x80	; 128
     208:	a0 70       	andi	r26, 0x00	; 0
     20a:	28 f0       	brcs	.+10     	; 0x216 <__trampolines_end+0x2c>
     20c:	20 c0       	rjmp	.+64     	; 0x24e <__trampolines_end+0x64>
     20e:	c8 10       	cpse	r12, r8
     210:	20 40       	sbci	r18, 0x00	; 0
     212:	98 18       	sub	r9, r8
     214:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x3f47>
     218:	a8 90       	.word	0x90a8	; ????
     21a:	68 60       	ori	r22, 0x08	; 8
     21c:	20 40       	sbci	r18, 0x00	; 0
     21e:	00 00       	nop
     220:	00 00       	nop
     222:	10 20       	and	r1, r0
     224:	40 40       	sbci	r20, 0x00	; 0
     226:	40 20       	and	r4, r0
     228:	10 40       	sbci	r17, 0x00	; 0
     22a:	20 10       	cpse	r2, r0
     22c:	10 10       	cpse	r1, r0
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 50       	subi	r16, 0x00	; 0
     232:	20 f8       	bld	r2, 0
     234:	20 50       	subi	r18, 0x00	; 0
     236:	00 00       	nop
     238:	20 20       	and	r2, r0
     23a:	f8 20       	and	r15, r8
     23c:	20 00       	.word	0x0020	; ????
     23e:	00 00       	nop
     240:	00 00       	nop
     242:	60 20       	and	r6, r0
     244:	40 00       	.word	0x0040	; ????
     246:	00 00       	nop
     248:	f8 00       	.word	0x00f8	; ????
     24a:	00 00       	nop
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 60       	ori	r16, 0x00	; 0
     252:	60 00       	.word	0x0060	; ????
     254:	08 10       	cpse	r0, r8
     256:	20 40       	sbci	r18, 0x00	; 0
     258:	80 00       	.word	0x0080	; ????
     25a:	70 88       	ldd	r7, Z+16	; 0x10
     25c:	98 a8       	ldd	r9, Y+48	; 0x30
     25e:	c8 88       	ldd	r12, Y+16	; 0x10
     260:	70 20       	and	r7, r0
     262:	60 20       	and	r6, r0
     264:	20 20       	and	r2, r0
     266:	20 70       	andi	r18, 0x00	; 0
     268:	70 88       	ldd	r7, Z+16	; 0x10
     26a:	08 10       	cpse	r0, r8
     26c:	20 40       	sbci	r18, 0x00	; 0
     26e:	f8 f8       	.word	0xf8f8	; ????
     270:	10 20       	and	r1, r0
     272:	10 08       	sbc	r1, r0
     274:	88 70       	andi	r24, 0x08	; 8
     276:	10 30       	cpi	r17, 0x00	; 0
     278:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__bss_end+0xf9f>
     27c:	10 f8       	bld	r1, 0
     27e:	80 f0       	brcs	.+32     	; 0x2a0 <__trampolines_end+0xb6>
     280:	08 08       	sbc	r0, r8
     282:	88 70       	andi	r24, 0x08	; 8
     284:	30 40       	sbci	r19, 0x00	; 0
     286:	80 f0       	brcs	.+32     	; 0x2a8 <__trampolines_end+0xbe>
     288:	88 88       	ldd	r8, Y+16	; 0x10
     28a:	70 f8       	bld	r7, 0
     28c:	08 10       	cpse	r0, r8
     28e:	20 40       	sbci	r18, 0x00	; 0
     290:	40 40       	sbci	r20, 0x00	; 0
     292:	70 88       	ldd	r7, Z+16	; 0x10
     294:	88 70       	andi	r24, 0x08	; 8
     296:	88 88       	ldd	r8, Y+16	; 0x10
     298:	70 70       	andi	r23, 0x00	; 0
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	78 08       	sbc	r7, r8
     29e:	10 60       	ori	r17, 0x00	; 0
     2a0:	00 60       	ori	r16, 0x00	; 0
     2a2:	60 00       	.word	0x0060	; ????
     2a4:	60 60       	ori	r22, 0x00	; 0
     2a6:	00 00       	nop
     2a8:	60 60       	ori	r22, 0x00	; 0
     2aa:	00 60       	ori	r16, 0x00	; 0
     2ac:	20 40       	sbci	r18, 0x00	; 0
     2ae:	08 10       	cpse	r0, r8
     2b0:	20 40       	sbci	r18, 0x00	; 0
     2b2:	20 10       	cpse	r2, r0
     2b4:	08 00       	.word	0x0008	; ????
     2b6:	00 f8       	bld	r0, 0
     2b8:	00 f8       	bld	r0, 0
     2ba:	00 00       	nop
     2bc:	80 40       	sbci	r24, 0x00	; 0
     2be:	20 10       	cpse	r2, r0
     2c0:	20 40       	sbci	r18, 0x00	; 0
     2c2:	80 70       	andi	r24, 0x00	; 0
     2c4:	88 08       	sbc	r8, r8
     2c6:	10 20       	and	r1, r0
     2c8:	00 20       	and	r0, r0
     2ca:	70 88       	ldd	r7, Z+16	; 0x10
     2cc:	08 68       	ori	r16, 0x88	; 136
     2ce:	a8 a8       	ldd	r10, Y+48	; 0x30
     2d0:	70 70       	andi	r23, 0x00	; 0
     2d2:	88 88       	ldd	r8, Y+16	; 0x10
     2d4:	88 f8       	.word	0xf888	; ????
     2d6:	88 88       	ldd	r8, Y+16	; 0x10
     2d8:	f0 88       	ldd	r15, Z+16	; 0x10
     2da:	88 f0       	brcs	.+34     	; 0x2fe <__trampolines_end+0x114>
     2dc:	88 88       	ldd	r8, Y+16	; 0x10
     2de:	f0 70       	andi	r31, 0x00	; 0
     2e0:	88 80       	ld	r8, Y
     2e2:	80 80       	ld	r8, Z
     2e4:	88 70       	andi	r24, 0x08	; 8
     2e6:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x872f>
     2ea:	88 90       	.word	0x9088	; ????
     2ec:	e0 f8       	bld	r14, 0
     2ee:	80 80       	ld	r8, Z
     2f0:	f0 80       	ld	r15, Z
     2f2:	80 f8       	bld	r8, 0
     2f4:	f8 80       	ld	r15, Y
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	80 80       	ld	r8, Z
     2fa:	80 70       	andi	r24, 0x00	; 0
     2fc:	88 80       	ld	r8, Y
     2fe:	80 98       	cbi	0x10, 0	; 16
     300:	88 70       	andi	r24, 0x08	; 8
     302:	88 88       	ldd	r8, Y+16	; 0x10
     304:	88 f8       	.word	0xf888	; ????
     306:	88 88       	ldd	r8, Y+16	; 0x10
     308:	88 70       	andi	r24, 0x08	; 8
     30a:	20 20       	and	r2, r0
     30c:	20 20       	and	r2, r0
     30e:	20 70       	andi	r18, 0x00	; 0
     310:	38 10       	cpse	r3, r8
     312:	10 10       	cpse	r1, r0
     314:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x8707>
     318:	90 a0       	ldd	r9, Z+32	; 0x20
     31a:	c0 a0       	ldd	r12, Z+32	; 0x20
     31c:	90 88       	ldd	r9, Z+16	; 0x10
     31e:	80 80       	ld	r8, Z
     320:	80 80       	ld	r8, Z
     322:	80 80       	ld	r8, Z
     324:	f8 88       	ldd	r15, Y+16	; 0x10
     326:	d8 a8       	ldd	r13, Y+48	; 0x30
     328:	88 88       	ldd	r8, Y+16	; 0x10
     32a:	88 88       	ldd	r8, Y+16	; 0x10
     32c:	88 88       	ldd	r8, Y+16	; 0x10
     32e:	c8 a8       	ldd	r12, Y+48	; 0x30
     330:	98 88       	ldd	r9, Y+16	; 0x10
     332:	88 70       	andi	r24, 0x08	; 8
     334:	88 88       	ldd	r8, Y+16	; 0x10
     336:	88 88       	ldd	r8, Y+16	; 0x10
     338:	88 70       	andi	r24, 0x08	; 8
     33a:	f0 88       	ldd	r15, Z+16	; 0x10
     33c:	88 f0       	brcs	.+34     	; 0x360 <__trampolines_end+0x176>
     33e:	80 80       	ld	r8, Z
     340:	80 70       	andi	r24, 0x00	; 0
     342:	88 88       	ldd	r8, Y+16	; 0x10
     344:	88 a8       	ldd	r8, Y+48	; 0x30
     346:	90 68       	ori	r25, 0x80	; 128
     348:	f0 88       	ldd	r15, Z+16	; 0x10
     34a:	88 f0       	brcs	.+34     	; 0x36e <__trampolines_end+0x184>
     34c:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x772f>
     350:	80 80       	ld	r8, Z
     352:	70 08       	sbc	r7, r0
     354:	08 f0       	brcs	.+2      	; 0x358 <__trampolines_end+0x16e>
     356:	f8 20       	and	r15, r8
     358:	20 20       	and	r2, r0
     35a:	20 20       	and	r2, r0
     35c:	20 88       	ldd	r2, Z+16	; 0x10
     35e:	88 88       	ldd	r8, Y+16	; 0x10
     360:	88 88       	ldd	r8, Y+16	; 0x10
     362:	88 70       	andi	r24, 0x08	; 8
     364:	88 88       	ldd	r8, Y+16	; 0x10
     366:	88 88       	ldd	r8, Y+16	; 0x10
     368:	88 50       	subi	r24, 0x08	; 8
     36a:	20 88       	ldd	r2, Z+16	; 0x10
     36c:	88 88       	ldd	r8, Y+16	; 0x10
     36e:	a8 a8       	ldd	r10, Y+48	; 0x30
     370:	d8 88       	ldd	r13, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	50 20       	and	r5, r0
     376:	50 88       	ldd	r5, Z+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 20       	and	r2, r0
     37e:	20 20       	and	r2, r0
     380:	f8 08       	sbc	r15, r8
     382:	10 20       	and	r1, r0
     384:	40 80       	ld	r4, Z
     386:	f8 38       	cpi	r31, 0x88	; 136
     388:	20 20       	and	r2, r0
     38a:	20 20       	and	r2, r0
     38c:	20 38       	cpi	r18, 0x80	; 128
     38e:	00 80       	ld	r0, Z
     390:	40 20       	and	r4, r0
     392:	10 08       	sbc	r1, r0
     394:	00 e0       	ldi	r16, 0x00	; 0
     396:	20 20       	and	r2, r0
     398:	20 20       	and	r2, r0
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	20 50       	subi	r18, 0x00	; 0
     39e:	88 00       	.word	0x0088	; ????
	...
     3a8:	00 f8       	bld	r0, 0
     3aa:	40 20       	and	r4, r0
     3ac:	10 00       	.word	0x0010	; ????
     3ae:	00 00       	nop
     3b0:	00 00       	nop
     3b2:	00 70       	andi	r16, 0x00	; 0
     3b4:	08 78       	andi	r16, 0x88	; 136
     3b6:	88 78       	andi	r24, 0x88	; 136
     3b8:	80 80       	ld	r8, Z
     3ba:	b0 c8       	rjmp	.-3744   	; 0xfffff51c <__eeprom_end+0xff7ef51c>
     3bc:	88 88       	ldd	r8, Y+16	; 0x10
     3be:	f0 00       	.word	0x00f0	; ????
     3c0:	00 70       	andi	r16, 0x00	; 0
     3c2:	80 80       	ld	r8, Z
     3c4:	88 70       	andi	r24, 0x08	; 8
     3c6:	08 08       	sbc	r0, r8
     3c8:	68 98       	cbi	0x0d, 0	; 13
     3ca:	88 88       	ldd	r8, Y+16	; 0x10
     3cc:	78 00       	.word	0x0078	; ????
     3ce:	00 70       	andi	r16, 0x00	; 0
     3d0:	88 f8       	.word	0xf888	; ????
     3d2:	80 70       	andi	r24, 0x00	; 0
     3d4:	30 48       	sbci	r19, 0x80	; 128
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	40 40       	sbci	r20, 0x00	; 0
     3da:	40 00       	.word	0x0040	; ????
     3dc:	00 78       	andi	r16, 0x80	; 128
     3de:	88 78       	andi	r24, 0x88	; 136
     3e0:	08 30       	cpi	r16, 0x08	; 8
     3e2:	80 80       	ld	r8, Z
     3e4:	b0 c8       	rjmp	.-3744   	; 0xfffff546 <__eeprom_end+0xff7ef546>
     3e6:	88 88       	ldd	r8, Y+16	; 0x10
     3e8:	88 20       	and	r8, r8
     3ea:	00 60       	ori	r16, 0x00	; 0
     3ec:	20 20       	and	r2, r0
     3ee:	20 70       	andi	r18, 0x00	; 0
     3f0:	10 00       	.word	0x0010	; ????
     3f2:	30 10       	cpse	r3, r0
     3f4:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x3f07>
     3f8:	40 48       	sbci	r20, 0x80	; 128
     3fa:	50 60       	ori	r21, 0x00	; 0
     3fc:	50 48       	sbci	r21, 0x80	; 128
     3fe:	60 20       	and	r6, r0
     400:	20 20       	and	r2, r0
     402:	20 20       	and	r2, r0
     404:	70 00       	.word	0x0070	; ????
     406:	00 d0       	rcall	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     408:	a8 a8       	ldd	r10, Y+48	; 0x30
     40a:	88 88       	ldd	r8, Y+16	; 0x10
     40c:	00 00       	nop
     40e:	b0 c8       	rjmp	.-3744   	; 0xfffff570 <__eeprom_end+0xff7ef570>
     410:	88 88       	ldd	r8, Y+16	; 0x10
     412:	88 00       	.word	0x0088	; ????
     414:	00 70       	andi	r16, 0x00	; 0
     416:	88 88       	ldd	r8, Y+16	; 0x10
     418:	88 70       	andi	r24, 0x08	; 8
     41a:	00 00       	nop
     41c:	f0 88       	ldd	r15, Z+16	; 0x10
     41e:	f0 80       	ld	r15, Z
     420:	80 00       	.word	0x0080	; ????
     422:	00 68       	ori	r16, 0x80	; 128
     424:	98 78       	andi	r25, 0x88	; 136
     426:	08 08       	sbc	r0, r8
     428:	00 00       	nop
     42a:	b0 c8       	rjmp	.-3744   	; 0xfffff58c <__eeprom_end+0xff7ef58c>
     42c:	80 80       	ld	r8, Z
     42e:	80 00       	.word	0x0080	; ????
     430:	00 70       	andi	r16, 0x00	; 0
     432:	80 70       	andi	r24, 0x00	; 0
     434:	08 f0       	brcs	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     436:	40 40       	sbci	r20, 0x00	; 0
     438:	e0 40       	sbci	r30, 0x00	; 0
     43a:	40 48       	sbci	r20, 0x80	; 128
     43c:	30 00       	.word	0x0030	; ????
     43e:	00 88       	ldd	r0, Z+16	; 0x10
     440:	88 88       	ldd	r8, Y+16	; 0x10
     442:	98 68       	ori	r25, 0x88	; 136
     444:	00 00       	nop
     446:	88 88       	ldd	r8, Y+16	; 0x10
     448:	88 50       	subi	r24, 0x08	; 8
     44a:	20 00       	.word	0x0020	; ????
     44c:	00 88       	ldd	r0, Z+16	; 0x10
     44e:	88 a8       	ldd	r8, Y+48	; 0x30
     450:	a8 50       	subi	r26, 0x08	; 8
     452:	00 00       	nop
     454:	88 50       	subi	r24, 0x08	; 8
     456:	20 50       	subi	r18, 0x00	; 0
     458:	88 00       	.word	0x0088	; ????
     45a:	00 88       	ldd	r0, Z+16	; 0x10
     45c:	88 78       	andi	r24, 0x88	; 136
     45e:	08 70       	andi	r16, 0x08	; 8
     460:	00 00       	nop
     462:	f8 10       	cpse	r15, r8
     464:	20 40       	sbci	r18, 0x00	; 0
     466:	f8 10       	cpse	r15, r8
     468:	20 20       	and	r2, r0
     46a:	40 20       	and	r4, r0
     46c:	20 10       	cpse	r2, r0
     46e:	20 20       	and	r2, r0
     470:	20 20       	and	r2, r0
     472:	20 20       	and	r2, r0
     474:	20 40       	sbci	r18, 0x00	; 0
     476:	20 20       	and	r2, r0
     478:	10 20       	and	r1, r0
     47a:	20 40       	sbci	r18, 0x00	; 0

0000047c <__ctors_end>:
     47c:	11 24       	eor	r1, r1
     47e:	1f be       	out	0x3f, r1	; 63
     480:	cf ef       	ldi	r28, 0xFF	; 255
     482:	d8 e0       	ldi	r29, 0x08	; 8
     484:	de bf       	out	0x3e, r29	; 62
     486:	cd bf       	out	0x3d, r28	; 61

00000488 <__do_copy_data>:
     488:	11 e0       	ldi	r17, 0x01	; 1
     48a:	a0 e0       	ldi	r26, 0x00	; 0
     48c:	b1 e0       	ldi	r27, 0x01	; 1
     48e:	ea ed       	ldi	r30, 0xDA	; 218
     490:	f4 e2       	ldi	r31, 0x24	; 36
     492:	02 c0       	rjmp	.+4      	; 0x498 <__do_copy_data+0x10>
     494:	05 90       	lpm	r0, Z+
     496:	0d 92       	st	X+, r0
     498:	a8 31       	cpi	r26, 0x18	; 24
     49a:	b1 07       	cpc	r27, r17
     49c:	d9 f7       	brne	.-10     	; 0x494 <__do_copy_data+0xc>

0000049e <__do_clear_bss>:
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	a8 e1       	ldi	r26, 0x18	; 24
     4a2:	b1 e0       	ldi	r27, 0x01	; 1
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <.do_clear_bss_start>

000004a6 <.do_clear_bss_loop>:
     4a6:	1d 92       	st	X+, r1

000004a8 <.do_clear_bss_start>:
     4a8:	a9 35       	cpi	r26, 0x59	; 89
     4aa:	b2 07       	cpc	r27, r18
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <.do_clear_bss_loop>
     4ae:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <main>
     4b2:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <_exit>

000004b6 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	1f 92       	push	r1
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4c6:	8f b7       	in	r24, 0x3f	; 63
     4c8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     4ca:	f8 94       	cli
	return flags;
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     4ce:	5f 93       	push	r21
     4d0:	50 e8       	ldi	r21, 0x80	; 128
     4d2:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     4dc:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4de:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     4e0:	0f 90       	pop	r0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	1f 92       	push	r1
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     4f2:	9f b7       	in	r25, 0x3f	; 63
     4f4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     4f6:	f8 94       	cli
	return flags;
     4f8:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     4fa:	81 11       	cpse	r24, r1
     4fc:	06 c0       	rjmp	.+12     	; 0x50a <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
     4fe:	e4 e6       	ldi	r30, 0x64	; 100
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	60 95       	com	r22
     504:	80 81       	ld	r24, Z
     506:	68 23       	and	r22, r24
     508:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     50a:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     50c:	0f 90       	pop	r0
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <gfx_mono_generic_draw_horizontal_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     51e:	e4 2f       	mov	r30, r20
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	e8 0f       	add	r30, r24
     524:	f1 1d       	adc	r31, r1
     526:	e1 3f       	cpi	r30, 0xF1	; 241
     528:	f1 05       	cpc	r31, r1
     52a:	1c f0       	brlt	.+6      	; 0x532 <gfx_mono_generic_draw_horizontal_line+0x1e>
		length = GFX_MONO_LCD_WIDTH - x;
     52c:	c0 ef       	ldi	r28, 0xF0	; 240
     52e:	4c 2f       	mov	r20, r28
     530:	48 1b       	sub	r20, r24
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     532:	44 23       	and	r20, r20
     534:	09 f4       	brne	.+2      	; 0x538 <gfx_mono_generic_draw_horizontal_line+0x24>
     536:	53 c0       	rjmp	.+166    	; 0x5de <gfx_mono_generic_draw_horizontal_line+0xca>
	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
		length = GFX_MONO_LCD_WIDTH - x;
	}

	page = y / 8;
     538:	d6 2f       	mov	r29, r22
     53a:	d6 95       	lsr	r29
     53c:	d6 95       	lsr	r29
     53e:	d6 95       	lsr	r29
	pixelmask = (1 << (y - (page * 8)));
     540:	ed 2f       	mov	r30, r29
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	f1 95       	neg	r31
     546:	e1 95       	neg	r30
     548:	f1 09       	sbc	r31, r1
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	ee 0f       	add	r30, r30
     550:	ff 1f       	adc	r31, r31
     552:	ee 0f       	add	r30, r30
     554:	ff 1f       	adc	r31, r31
     556:	df 01       	movw	r26, r30
     558:	a6 0f       	add	r26, r22
     55a:	b1 1d       	adc	r27, r1
     55c:	bd 01       	movw	r22, r26
     55e:	e1 e0       	ldi	r30, 0x01	; 1
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	df 01       	movw	r26, r30
     564:	02 c0       	rjmp	.+4      	; 0x56a <gfx_mono_generic_draw_horizontal_line+0x56>
     566:	aa 0f       	add	r26, r26
     568:	bb 1f       	adc	r27, r27
     56a:	6a 95       	dec	r22
     56c:	e2 f7       	brpl	.-8      	; 0x566 <gfx_mono_generic_draw_horizontal_line+0x52>
     56e:	fa 2e       	mov	r15, r26
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     570:	21 30       	cpi	r18, 0x01	; 1
     572:	21 f0       	breq	.+8      	; 0x57c <gfx_mono_generic_draw_horizontal_line+0x68>
     574:	98 f0       	brcs	.+38     	; 0x59c <gfx_mono_generic_draw_horizontal_line+0x88>
     576:	22 30       	cpi	r18, 0x02	; 2
     578:	19 f1       	breq	.+70     	; 0x5c0 <gfx_mono_generic_draw_horizontal_line+0xac>
     57a:	31 c0       	rjmp	.+98     	; 0x5de <gfx_mono_generic_draw_horizontal_line+0xca>
     57c:	c4 2f       	mov	r28, r20
     57e:	1f ef       	ldi	r17, 0xFF	; 255
     580:	18 0f       	add	r17, r24
     582:	01 2f       	mov	r16, r17
     584:	0c 0f       	add	r16, r28
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     586:	60 2f       	mov	r22, r16
     588:	8d 2f       	mov	r24, r29
     58a:	e0 d2       	rcall	.+1472   	; 0xb4c <gfx_mono_lcd_uc1608_get_byte>
			temp |= pixelmask;
     58c:	48 2f       	mov	r20, r24
     58e:	4f 29       	or	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     590:	60 2f       	mov	r22, r16
     592:	8d 2f       	mov	r24, r29
     594:	cb d2       	rcall	.+1430   	; 0xb2c <gfx_mono_lcd_uc1608_put_byte>
     596:	c1 50       	subi	r28, 0x01	; 1
		return;
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
     598:	a1 f7       	brne	.-24     	; 0x582 <gfx_mono_generic_draw_horizontal_line+0x6e>
     59a:	21 c0       	rjmp	.+66     	; 0x5de <gfx_mono_generic_draw_horizontal_line+0xca>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     59c:	c4 2f       	mov	r28, r20
     59e:	1f ef       	ldi	r17, 0xFF	; 255
     5a0:	18 0f       	add	r17, r24
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
			temp &= ~pixelmask;
     5a2:	fa 2e       	mov	r15, r26
     5a4:	f0 94       	com	r15
     5a6:	01 2f       	mov	r16, r17
     5a8:	0c 0f       	add	r16, r28
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     5aa:	60 2f       	mov	r22, r16
     5ac:	8d 2f       	mov	r24, r29
     5ae:	ce d2       	rcall	.+1436   	; 0xb4c <gfx_mono_lcd_uc1608_get_byte>
			temp &= ~pixelmask;
     5b0:	48 2f       	mov	r20, r24
     5b2:	4f 21       	and	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     5b4:	60 2f       	mov	r22, r16
     5b6:	8d 2f       	mov	r24, r29
     5b8:	b9 d2       	rcall	.+1394   	; 0xb2c <gfx_mono_lcd_uc1608_put_byte>
     5ba:	c1 50       	subi	r28, 0x01	; 1
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
     5bc:	a1 f7       	brne	.-24     	; 0x5a6 <gfx_mono_generic_draw_horizontal_line+0x92>
     5be:	0f c0       	rjmp	.+30     	; 0x5de <gfx_mono_generic_draw_horizontal_line+0xca>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     5c0:	c4 2f       	mov	r28, r20
     5c2:	1f ef       	ldi	r17, 0xFF	; 255
     5c4:	18 0f       	add	r17, r24
     5c6:	01 2f       	mov	r16, r17
     5c8:	0c 0f       	add	r16, r28
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     5ca:	60 2f       	mov	r22, r16
     5cc:	8d 2f       	mov	r24, r29
     5ce:	be d2       	rcall	.+1404   	; 0xb4c <gfx_mono_lcd_uc1608_get_byte>
			temp ^= pixelmask;
     5d0:	48 2f       	mov	r20, r24
     5d2:	4f 25       	eor	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     5d4:	60 2f       	mov	r22, r16
     5d6:	8d 2f       	mov	r24, r29
     5d8:	a9 d2       	rcall	.+1362   	; 0xb2c <gfx_mono_lcd_uc1608_put_byte>
     5da:	c1 50       	subi	r28, 0x01	; 1
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
     5dc:	a1 f7       	brne	.-24     	; 0x5c6 <gfx_mono_generic_draw_horizontal_line+0xb2>
		break;

	default:
		break;
	}
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	08 95       	ret

000005ea <gfx_mono_generic_draw_vertical_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
	if (length == 0) {
     5f6:	44 23       	and	r20, r20
     5f8:	09 f4       	brne	.+2      	; 0x5fc <gfx_mono_generic_draw_vertical_line+0x12>
     5fa:	46 c0       	rjmp	.+140    	; 0x688 <gfx_mono_generic_draw_vertical_line+0x9e>
     5fc:	12 2f       	mov	r17, r18
     5fe:	d8 2f       	mov	r29, r24
     600:	9f ef       	ldi	r25, 0xFF	; 255
     602:	96 0f       	add	r25, r22
		return;
	}

	gfx_coord_t y2 = y + length - 1;
     604:	94 0f       	add	r25, r20

	if (y == y2) {
     606:	69 13       	cpse	r22, r25
     608:	03 c0       	rjmp	.+6      	; 0x610 <gfx_mono_generic_draw_vertical_line+0x26>
		gfx_mono_draw_pixel(x, y, color);
     60a:	42 2f       	mov	r20, r18
     60c:	d2 d2       	rcall	.+1444   	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     60e:	3c c0       	rjmp	.+120    	; 0x688 <gfx_mono_generic_draw_vertical_line+0x9e>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
     610:	9f 37       	cpi	r25, 0x7F	; 127
     612:	08 f0       	brcs	.+2      	; 0x616 <gfx_mono_generic_draw_vertical_line+0x2c>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
     614:	9f e7       	ldi	r25, 0x7F	; 127
	}

	gfx_coord_t y1page = y / 8;
     616:	c6 2f       	mov	r28, r22
     618:	c6 95       	lsr	r28
     61a:	c6 95       	lsr	r28
     61c:	c6 95       	lsr	r28
	gfx_coord_t y2page = y2 / 8;
     61e:	09 2f       	mov	r16, r25
     620:	06 95       	lsr	r16
     622:	06 95       	lsr	r16
     624:	06 95       	lsr	r16

	uint8_t y1bitpos = y & 0x07;
     626:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
     628:	2f ef       	ldi	r18, 0xFF	; 255
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	a9 01       	movw	r20, r18
     62e:	02 c0       	rjmp	.+4      	; 0x634 <gfx_mono_generic_draw_vertical_line+0x4a>
     630:	44 0f       	add	r20, r20
     632:	55 1f       	adc	r21, r21
     634:	6a 95       	dec	r22
     636:	e2 f7       	brpl	.-8      	; 0x630 <gfx_mono_generic_draw_vertical_line+0x46>

	gfx_coord_t y1page = y / 8;
	gfx_coord_t y2page = y2 / 8;

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;
     638:	97 70       	andi	r25, 0x07	; 7

	uint8_t y1pixelmask = 0xFF << y1bitpos;
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
     63a:	67 e0       	ldi	r22, 0x07	; 7
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	fb 01       	movw	r30, r22
     640:	e9 1b       	sub	r30, r25
     642:	f1 09       	sbc	r31, r1
     644:	79 01       	movw	r14, r18
     646:	02 c0       	rjmp	.+4      	; 0x64c <gfx_mono_generic_draw_vertical_line+0x62>
     648:	f5 94       	asr	r15
     64a:	e7 94       	ror	r14
     64c:	ea 95       	dec	r30
     64e:	e2 f7       	brpl	.-8      	; 0x648 <gfx_mono_generic_draw_vertical_line+0x5e>

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     650:	c0 13       	cpse	r28, r16
     652:	06 c0       	rjmp	.+12     	; 0x660 <gfx_mono_generic_draw_vertical_line+0x76>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
     654:	4e 21       	and	r20, r14
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
     656:	21 2f       	mov	r18, r17
     658:	6d 2f       	mov	r22, r29
     65a:	8c 2f       	mov	r24, r28
     65c:	87 d2       	rcall	.+1294   	; 0xb6c <gfx_mono_lcd_uc1608_mask_byte>
     65e:	14 c0       	rjmp	.+40     	; 0x688 <gfx_mono_generic_draw_vertical_line+0x9e>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
     660:	21 2f       	mov	r18, r17
     662:	6d 2f       	mov	r22, r29
     664:	8c 2f       	mov	r24, r28
     666:	82 d2       	rcall	.+1284   	; 0xb6c <gfx_mono_lcd_uc1608_mask_byte>

		while (++y1page < y2page) {
     668:	cf 5f       	subi	r28, 0xFF	; 255
     66a:	c0 17       	cp	r28, r16
     66c:	40 f4       	brcc	.+16     	; 0x67e <gfx_mono_generic_draw_vertical_line+0x94>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     66e:	21 2f       	mov	r18, r17
     670:	4f ef       	ldi	r20, 0xFF	; 255
     672:	6d 2f       	mov	r22, r29
     674:	8c 2f       	mov	r24, r28
     676:	7a d2       	rcall	.+1268   	; 0xb6c <gfx_mono_lcd_uc1608_mask_byte>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     678:	cf 5f       	subi	r28, 0xFF	; 255
     67a:	c0 17       	cp	r28, r16
     67c:	c0 f3       	brcs	.-16     	; 0x66e <gfx_mono_generic_draw_vertical_line+0x84>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     67e:	21 2f       	mov	r18, r17
     680:	4e 2d       	mov	r20, r14
     682:	6d 2f       	mov	r22, r29
     684:	80 2f       	mov	r24, r16
     686:	72 d2       	rcall	.+1252   	; 0xb6c <gfx_mono_lcd_uc1608_mask_byte>
	}
}
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	08 95       	ret

00000696 <gfx_mono_generic_draw_line>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
     696:	8f 92       	push	r8
     698:	9f 92       	push	r9
     69a:	af 92       	push	r10
     69c:	bf 92       	push	r11
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	c8 2f       	mov	r28, r24
     6b0:	d6 2f       	mov	r29, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     6b2:	48 17       	cp	r20, r24
     6b4:	28 f4       	brcc	.+10     	; 0x6c0 <gfx_mono_generic_draw_line+0x2a>
		dx = x1;
		x1 = x2;
		x2 = dx;
		dy = y1;
		y1 = y2;
     6b6:	d2 2f       	mov	r29, r18
		y2 = dy;
     6b8:	26 2f       	mov	r18, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     6ba:	8c 2f       	mov	r24, r28
		dx = x1;
		x1 = x2;
     6bc:	c4 2f       	mov	r28, r20
		x2 = dx;
     6be:	48 2f       	mov	r20, r24
		dy = y1;
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
     6c0:	e4 2e       	mov	r14, r20
     6c2:	f1 2c       	mov	r15, r1
     6c4:	ec 1a       	sub	r14, r28
     6c6:	f1 08       	sbc	r15, r1
	dy = y2 - y1;
     6c8:	a2 2e       	mov	r10, r18
     6ca:	b1 2c       	mov	r11, r1
     6cc:	ad 1a       	sub	r10, r29
     6ce:	b1 08       	sbc	r11, r1

	x = x1;
	y = y1;

	if (dx < 0) {
     6d0:	ff 20       	and	r15, r15
     6d2:	2c f4       	brge	.+10     	; 0x6de <gfx_mono_generic_draw_line+0x48>
		xinc = -1;
		dx = -dx;
     6d4:	f1 94       	neg	r15
     6d6:	e1 94       	neg	r14
     6d8:	f1 08       	sbc	r15, r1

	x = x1;
	y = y1;

	if (dx < 0) {
		xinc = -1;
     6da:	1f ef       	ldi	r17, 0xFF	; 255
     6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <gfx_mono_generic_draw_line+0x4a>
		dx = -dx;
	} else {
		xinc = 1;
     6de:	11 e0       	ldi	r17, 0x01	; 1
	}

	if (dy < 0) {
     6e0:	bb 20       	and	r11, r11
     6e2:	0c f0       	brlt	.+2      	; 0x6e6 <gfx_mono_generic_draw_line+0x50>
     6e4:	48 c0       	rjmp	.+144    	; 0x776 <gfx_mono_generic_draw_line+0xe0>
		yinc = -1;
		dy = -dy;
     6e6:	88 24       	eor	r8, r8
     6e8:	99 24       	eor	r9, r9
     6ea:	8a 18       	sub	r8, r10
     6ec:	9b 08       	sbc	r9, r11
	} else {
		yinc = 1;
	}

	if (dx > dy) {
     6ee:	8e 14       	cp	r8, r14
     6f0:	9f 04       	cpc	r9, r15
     6f2:	fc f4       	brge	.+62     	; 0x732 <gfx_mono_generic_draw_line+0x9c>
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
		dy = -dy;
     6f4:	54 01       	movw	r10, r8
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     6f6:	88 24       	eor	r8, r8
     6f8:	8a 94       	dec	r8
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <gfx_mono_generic_draw_line+0x6a>
		dy = -dy;
	} else {
		yinc = 1;
     6fc:	88 24       	eor	r8, r8
     6fe:	83 94       	inc	r8
	}

	if (dx > dy) {
		e = dy - dx;
     700:	65 01       	movw	r12, r10
     702:	ce 18       	sub	r12, r14
     704:	df 08       	sbc	r13, r15
		for (i = 0; i <= dx; i++) {
     706:	ff 20       	and	r15, r15
     708:	dc f1       	brlt	.+118    	; 0x780 <gfx_mono_generic_draw_line+0xea>
     70a:	91 2c       	mov	r9, r1
			gfx_mono_draw_pixel(x, y, color);
     70c:	40 2f       	mov	r20, r16
     70e:	6d 2f       	mov	r22, r29
     710:	8c 2f       	mov	r24, r28
     712:	4f d2       	rcall	.+1182   	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     714:	dd 20       	and	r13, r13
     716:	1c f0       	brlt	.+6      	; 0x71e <gfx_mono_generic_draw_line+0x88>
				e -= dx;
     718:	ce 18       	sub	r12, r14
     71a:	df 08       	sbc	r13, r15
				y += yinc;
     71c:	d8 0d       	add	r29, r8
			}

			e += dy;
     71e:	ca 0c       	add	r12, r10
     720:	db 1c       	adc	r13, r11
     722:	c1 0f       	add	r28, r17
		yinc = 1;
	}

	if (dx > dy) {
		e = dy - dx;
		for (i = 0; i <= dx; i++) {
     724:	93 94       	inc	r9
     726:	89 2d       	mov	r24, r9
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	e8 16       	cp	r14, r24
     72c:	f9 06       	cpc	r15, r25
     72e:	74 f7       	brge	.-36     	; 0x70c <gfx_mono_generic_draw_line+0x76>
     730:	27 c0       	rjmp	.+78     	; 0x780 <gfx_mono_generic_draw_line+0xea>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     732:	67 01       	movw	r12, r14
     734:	ca 0c       	add	r12, r10
     736:	db 1c       	adc	r13, r11
		for (i = 0; i <= dy; i++) {
     738:	99 20       	and	r9, r9
     73a:	14 f1       	brlt	.+68     	; 0x780 <gfx_mono_generic_draw_line+0xea>
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     73c:	aa 24       	eor	r10, r10
     73e:	aa 94       	dec	r10
		dy = -dy;
	} else {
		yinc = 1;
     740:	b1 2c       	mov	r11, r1
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
			gfx_mono_draw_pixel(x, y, color);
     742:	40 2f       	mov	r20, r16
     744:	6d 2f       	mov	r22, r29
     746:	8c 2f       	mov	r24, r28
     748:	34 d2       	rcall	.+1128   	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     74a:	dd 20       	and	r13, r13
     74c:	1c f0       	brlt	.+6      	; 0x754 <gfx_mono_generic_draw_line+0xbe>
				e -= dy;
     74e:	c8 18       	sub	r12, r8
     750:	d9 08       	sbc	r13, r9
				x += xinc;
     752:	c1 0f       	add	r28, r17
			}

			e += dx;
     754:	ce 0c       	add	r12, r14
     756:	df 1c       	adc	r13, r15
     758:	da 0d       	add	r29, r10
			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
     75a:	b3 94       	inc	r11
     75c:	8b 2d       	mov	r24, r11
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	88 16       	cp	r8, r24
     762:	99 06       	cpc	r9, r25
     764:	74 f7       	brge	.-36     	; 0x742 <gfx_mono_generic_draw_line+0xac>
     766:	0c c0       	rjmp	.+24     	; 0x780 <gfx_mono_generic_draw_line+0xea>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     768:	67 01       	movw	r12, r14
     76a:	ca 18       	sub	r12, r10
     76c:	db 08       	sbc	r13, r11
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
	dy = y2 - y1;
     76e:	45 01       	movw	r8, r10

	if (dy < 0) {
		yinc = -1;
		dy = -dy;
	} else {
		yinc = 1;
     770:	aa 24       	eor	r10, r10
     772:	a3 94       	inc	r10
     774:	e5 cf       	rjmp	.-54     	; 0x740 <gfx_mono_generic_draw_line+0xaa>
	}

	if (dx > dy) {
     776:	ae 14       	cp	r10, r14
     778:	bf 04       	cpc	r11, r15
     77a:	0c f4       	brge	.+2      	; 0x77e <gfx_mono_generic_draw_line+0xe8>
     77c:	bf cf       	rjmp	.-130    	; 0x6fc <gfx_mono_generic_draw_line+0x66>
     77e:	f4 cf       	rjmp	.-24     	; 0x768 <gfx_mono_generic_draw_line+0xd2>

			e += dx;
			y += yinc;
		}
	}
}
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	ff 90       	pop	r15
     78a:	ef 90       	pop	r14
     78c:	df 90       	pop	r13
     78e:	cf 90       	pop	r12
     790:	bf 90       	pop	r11
     792:	af 90       	pop	r10
     794:	9f 90       	pop	r9
     796:	8f 90       	pop	r8
     798:	08 95       	ret

0000079a <gfx_mono_generic_draw_rect>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	d8 2f       	mov	r29, r24
     7a6:	16 2f       	mov	r17, r22
     7a8:	c4 2f       	mov	r28, r20
     7aa:	f2 2e       	mov	r15, r18
	gfx_mono_draw_horizontal_line(x, y, width, color);
     7ac:	20 2f       	mov	r18, r16
     7ae:	b2 de       	rcall	.-668    	; 0x514 <gfx_mono_generic_draw_horizontal_line>
     7b0:	6f ef       	ldi	r22, 0xFF	; 255
     7b2:	6f 0d       	add	r22, r15
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
     7b4:	61 0f       	add	r22, r17
     7b6:	20 2f       	mov	r18, r16
     7b8:	4c 2f       	mov	r20, r28
     7ba:	8d 2f       	mov	r24, r29
     7bc:	ab de       	rcall	.-682    	; 0x514 <gfx_mono_generic_draw_horizontal_line>

	gfx_mono_draw_vertical_line(x, y, height, color);
     7be:	20 2f       	mov	r18, r16
     7c0:	4f 2d       	mov	r20, r15
     7c2:	61 2f       	mov	r22, r17
     7c4:	8d 2f       	mov	r24, r29
     7c6:	11 df       	rcall	.-478    	; 0x5ea <gfx_mono_generic_draw_vertical_line>
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	8c 0f       	add	r24, r28
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     7cc:	20 2f       	mov	r18, r16
     7ce:	4f 2d       	mov	r20, r15
     7d0:	61 2f       	mov	r22, r17
     7d2:	8d 0f       	add	r24, r29
     7d4:	0a df       	rcall	.-492    	; 0x5ea <gfx_mono_generic_draw_vertical_line>
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	08 95       	ret

000007e2 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
	if (height == 0) {
     7ec:	22 23       	and	r18, r18
     7ee:	69 f0       	breq	.+26     	; 0x80a <gfx_mono_generic_draw_filled_rect+0x28>
     7f0:	c2 2f       	mov	r28, r18
     7f2:	f4 2e       	mov	r15, r20
     7f4:	18 2f       	mov	r17, r24
     7f6:	df ef       	ldi	r29, 0xFF	; 255
     7f8:	d6 0f       	add	r29, r22
     7fa:	6d 2f       	mov	r22, r29
     7fc:	6c 0f       	add	r22, r28
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     7fe:	20 2f       	mov	r18, r16
     800:	4f 2d       	mov	r20, r15
     802:	81 2f       	mov	r24, r17
     804:	87 de       	rcall	.-754    	; 0x514 <gfx_mono_generic_draw_horizontal_line>
     806:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     808:	c1 f7       	brne	.-16     	; 0x7fa <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	08 95       	ret

00000816 <gfx_mono_generic_draw_circle>:
 * \param  octant_mask Bitmask indicating which octants to draw.
 */
void gfx_mono_generic_draw_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t octant_mask)
{
     816:	2f 92       	push	r2
     818:	3f 92       	push	r3
     81a:	4f 92       	push	r4
     81c:	5f 92       	push	r5
     81e:	6f 92       	push	r6
     820:	7f 92       	push	r7
     822:	8f 92       	push	r8
     824:	9f 92       	push	r9
     826:	af 92       	push	r10
     828:	bf 92       	push	r11
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	00 d0       	rcall	.+0      	; 0x83c <gfx_mono_generic_draw_circle+0x26>
     83c:	1f 92       	push	r1
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	88 2e       	mov	r8, r24
     844:	96 2e       	mov	r9, r22
     846:	4a 83       	std	Y+2, r20	; 0x02
     848:	a2 2e       	mov	r10, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     84a:	41 11       	cpse	r20, r1
     84c:	03 c0       	rjmp	.+6      	; 0x854 <gfx_mono_generic_draw_circle+0x3e>
		gfx_mono_draw_pixel(x, y, color);
     84e:	42 2f       	mov	r20, r18
     850:	b0 d1       	rcall	.+864    	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     852:	89 c0       	rjmp	.+274    	; 0x966 <__stack+0x67>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     854:	2a 81       	ldd	r18, Y+2	; 0x02
     856:	e2 2e       	mov	r14, r18
     858:	f1 2c       	mov	r15, r1
     85a:	ee 0c       	add	r14, r14
     85c:	ff 1c       	adc	r15, r15
     85e:	f1 94       	neg	r15
     860:	e1 94       	neg	r14
     862:	f1 08       	sbc	r15, r1
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	e8 0e       	add	r14, r24
     868:	f1 1c       	adc	r15, r1
     86a:	c6 2e       	mov	r12, r22
     86c:	d8 2c       	mov	r13, r8
     86e:	18 2d       	mov	r17, r8
     870:	b6 2e       	mov	r11, r22
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     872:	1b 82       	std	Y+3, r1	; 0x03
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     874:	90 2f       	mov	r25, r16
     876:	91 70       	andi	r25, 0x01	; 1
     878:	29 2e       	mov	r2, r25
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT1) {
     87a:	e0 2f       	mov	r30, r16
     87c:	e2 70       	andi	r30, 0x02	; 2
     87e:	3e 2e       	mov	r3, r30
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT2) {
     880:	f0 2f       	mov	r31, r16
     882:	f4 70       	andi	r31, 0x04	; 4
     884:	4f 2e       	mov	r4, r31
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT3) {
     886:	20 2f       	mov	r18, r16
     888:	28 70       	andi	r18, 0x08	; 8
     88a:	52 2e       	mov	r5, r18
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT4) {
     88c:	80 2f       	mov	r24, r16
     88e:	80 71       	andi	r24, 0x10	; 16
     890:	68 2e       	mov	r6, r24
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
		}

		if (octant_mask & GFX_OCTANT5) {
     892:	90 2f       	mov	r25, r16
     894:	90 72       	andi	r25, 0x20	; 32
     896:	79 2e       	mov	r7, r25
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
		}

		if (octant_mask & GFX_OCTANT6) {
     898:	e0 2f       	mov	r30, r16
     89a:	e0 74       	andi	r30, 0x40	; 64
     89c:	e9 83       	std	Y+1, r30	; 0x01
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     89e:	22 20       	and	r2, r2
     8a0:	29 f0       	breq	.+10     	; 0x8ac <gfx_mono_generic_draw_circle+0x96>
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
     8a2:	4a 2d       	mov	r20, r10
     8a4:	6c 2d       	mov	r22, r12
     8a6:	8a 81       	ldd	r24, Y+2	; 0x02
     8a8:	88 0d       	add	r24, r8
     8aa:	83 d1       	rcall	.+774    	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT1) {
     8ac:	33 20       	and	r3, r3
     8ae:	31 f0       	breq	.+12     	; 0x8bc <gfx_mono_generic_draw_circle+0xa6>
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
     8b0:	4a 2d       	mov	r20, r10
     8b2:	69 2d       	mov	r22, r9
     8b4:	fa 81       	ldd	r31, Y+2	; 0x02
     8b6:	6f 1b       	sub	r22, r31
     8b8:	81 2f       	mov	r24, r17
     8ba:	7b d1       	rcall	.+758    	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT2) {
     8bc:	44 20       	and	r4, r4
     8be:	31 f0       	breq	.+12     	; 0x8cc <gfx_mono_generic_draw_circle+0xb6>
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
     8c0:	4a 2d       	mov	r20, r10
     8c2:	69 2d       	mov	r22, r9
     8c4:	2a 81       	ldd	r18, Y+2	; 0x02
     8c6:	62 1b       	sub	r22, r18
     8c8:	8d 2d       	mov	r24, r13
     8ca:	73 d1       	rcall	.+742    	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT3) {
     8cc:	55 20       	and	r5, r5
     8ce:	31 f0       	breq	.+12     	; 0x8dc <gfx_mono_generic_draw_circle+0xc6>
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
     8d0:	4a 2d       	mov	r20, r10
     8d2:	6c 2d       	mov	r22, r12
     8d4:	88 2d       	mov	r24, r8
     8d6:	9a 81       	ldd	r25, Y+2	; 0x02
     8d8:	89 1b       	sub	r24, r25
     8da:	6b d1       	rcall	.+726    	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT4) {
     8dc:	66 20       	and	r6, r6
     8de:	31 f0       	breq	.+12     	; 0x8ec <gfx_mono_generic_draw_circle+0xd6>
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
     8e0:	4a 2d       	mov	r20, r10
     8e2:	6b 2d       	mov	r22, r11
     8e4:	88 2d       	mov	r24, r8
     8e6:	ea 81       	ldd	r30, Y+2	; 0x02
     8e8:	8e 1b       	sub	r24, r30
     8ea:	63 d1       	rcall	.+710    	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT5) {
     8ec:	77 20       	and	r7, r7
     8ee:	29 f0       	breq	.+10     	; 0x8fa <gfx_mono_generic_draw_circle+0xe4>
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
     8f0:	4a 2d       	mov	r20, r10
     8f2:	6a 81       	ldd	r22, Y+2	; 0x02
     8f4:	69 0d       	add	r22, r9
     8f6:	8d 2d       	mov	r24, r13
     8f8:	5c d1       	rcall	.+696    	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT6) {
     8fa:	f9 81       	ldd	r31, Y+1	; 0x01
     8fc:	ff 23       	and	r31, r31
     8fe:	29 f0       	breq	.+10     	; 0x90a <__stack+0xb>
			gfx_mono_draw_pixel(x + offset_x, y + offset_y, color);
     900:	4a 2d       	mov	r20, r10
     902:	6a 81       	ldd	r22, Y+2	; 0x02
     904:	69 0d       	add	r22, r9
     906:	81 2f       	mov	r24, r17
     908:	54 d1       	rcall	.+680    	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT7) {
     90a:	00 23       	and	r16, r16
     90c:	2c f4       	brge	.+10     	; 0x918 <__stack+0x19>
			gfx_mono_draw_pixel(x + offset_y, y + offset_x, color);
     90e:	4a 2d       	mov	r20, r10
     910:	6b 2d       	mov	r22, r11
     912:	8a 81       	ldd	r24, Y+2	; 0x02
     914:	88 0d       	add	r24, r8
     916:	4d d1       	rcall	.+666    	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     918:	ff 20       	and	r15, r15
     91a:	5c f4       	brge	.+22     	; 0x932 <__stack+0x33>
			error += ((offset_x << 2) + 6);
     91c:	2b 81       	ldd	r18, Y+3	; 0x03
     91e:	82 2f       	mov	r24, r18
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	06 96       	adiw	r24, 0x06	; 6
     92c:	e8 0e       	add	r14, r24
     92e:	f9 1e       	adc	r15, r25
     930:	0f c0       	rjmp	.+30     	; 0x950 <__stack+0x51>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     932:	eb 81       	ldd	r30, Y+3	; 0x03
     934:	8e 2f       	mov	r24, r30
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	fa 81       	ldd	r31, Y+2	; 0x02
     93a:	8f 1b       	sub	r24, r31
     93c:	91 09       	sbc	r25, r1
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	0a 96       	adiw	r24, 0x0a	; 10
     948:	e8 0e       	add	r14, r24
     94a:	f9 1e       	adc	r15, r25
			--offset_y;
     94c:	f1 50       	subi	r31, 0x01	; 1
     94e:	fa 83       	std	Y+2, r31	; 0x02
		}

		/* Next X. */
		++offset_x;
     950:	2b 81       	ldd	r18, Y+3	; 0x03
     952:	2f 5f       	subi	r18, 0xFF	; 255
     954:	2b 83       	std	Y+3, r18	; 0x03
     956:	b3 94       	inc	r11
     958:	1f 5f       	subi	r17, 0xFF	; 255
     95a:	da 94       	dec	r13
     95c:	ca 94       	dec	r12
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
     95e:	8a 81       	ldd	r24, Y+2	; 0x02
     960:	82 17       	cp	r24, r18
     962:	08 f0       	brcs	.+2      	; 0x966 <__stack+0x67>
     964:	9c cf       	rjmp	.-200    	; 0x89e <gfx_mono_generic_draw_circle+0x88>
		}

		/* Next X. */
		++offset_x;
	}
}
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	df 90       	pop	r13
     97a:	cf 90       	pop	r12
     97c:	bf 90       	pop	r11
     97e:	af 90       	pop	r10
     980:	9f 90       	pop	r9
     982:	8f 90       	pop	r8
     984:	7f 90       	pop	r7
     986:	6f 90       	pop	r6
     988:	5f 90       	pop	r5
     98a:	4f 90       	pop	r4
     98c:	3f 90       	pop	r3
     98e:	2f 90       	pop	r2
     990:	08 95       	ret

00000992 <gfx_mono_generic_draw_filled_circle>:
 * \param  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
     992:	5f 92       	push	r5
     994:	6f 92       	push	r6
     996:	7f 92       	push	r7
     998:	8f 92       	push	r8
     99a:	9f 92       	push	r9
     99c:	af 92       	push	r10
     99e:	bf 92       	push	r11
     9a0:	cf 92       	push	r12
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	88 2e       	mov	r8, r24
     9b2:	96 2e       	mov	r9, r22
     9b4:	c4 2f       	mov	r28, r20
     9b6:	a2 2e       	mov	r10, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     9b8:	41 11       	cpse	r20, r1
     9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <gfx_mono_generic_draw_filled_circle+0x30>
		gfx_mono_draw_pixel(x, y, color);
     9bc:	42 2f       	mov	r20, r18
     9be:	f9 d0       	rcall	.+498    	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     9c0:	73 c0       	rjmp	.+230    	; 0xaa8 <gfx_mono_generic_draw_filled_circle+0x116>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     9c2:	e4 2e       	mov	r14, r20
     9c4:	f1 2c       	mov	r15, r1
     9c6:	ee 0c       	add	r14, r14
     9c8:	ff 1c       	adc	r15, r15
     9ca:	f1 94       	neg	r15
     9cc:	e1 94       	neg	r14
     9ce:	f1 08       	sbc	r15, r1
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	e8 0e       	add	r14, r24
     9d4:	f1 1c       	adc	r15, r1
     9d6:	b6 2e       	mov	r11, r22
     9d8:	c8 2c       	mov	r12, r8
     9da:	d8 2c       	mov	r13, r8
     9dc:	11 e0       	ldi	r17, 0x01	; 1
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     9de:	d0 e0       	ldi	r29, 0x00	; 0
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     9e0:	80 2f       	mov	r24, r16
     9e2:	83 70       	andi	r24, 0x03	; 3
     9e4:	58 2e       	mov	r5, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     9e6:	80 2f       	mov	r24, r16
     9e8:	8c 70       	andi	r24, 0x0C	; 12
     9ea:	68 2e       	mov	r6, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     9ec:	80 2f       	mov	r24, r16
     9ee:	80 73       	andi	r24, 0x30	; 48
     9f0:	78 2e       	mov	r7, r24
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     9f2:	00 7c       	andi	r16, 0xC0	; 192
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     9f4:	55 20       	and	r5, r5
     9f6:	69 f0       	breq	.+26     	; 0xa12 <gfx_mono_generic_draw_filled_circle+0x80>
			gfx_mono_draw_vertical_line(x + offset_y,
     9f8:	2a 2d       	mov	r18, r10
     9fa:	41 2f       	mov	r20, r17
     9fc:	6b 2d       	mov	r22, r11
     9fe:	8c 2f       	mov	r24, r28
     a00:	88 0d       	add	r24, r8
     a02:	f3 dd       	rcall	.-1050   	; 0x5ea <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     a04:	2a 2d       	mov	r18, r10
     a06:	41 e0       	ldi	r20, 0x01	; 1
     a08:	4c 0f       	add	r20, r28
     a0a:	69 2d       	mov	r22, r9
     a0c:	6c 1b       	sub	r22, r28
     a0e:	8d 2d       	mov	r24, r13
     a10:	ec dd       	rcall	.-1064   	; 0x5ea <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     a12:	66 20       	and	r6, r6
     a14:	69 f0       	breq	.+26     	; 0xa30 <gfx_mono_generic_draw_filled_circle+0x9e>
			gfx_mono_draw_vertical_line(x - offset_y,
     a16:	2a 2d       	mov	r18, r10
     a18:	41 2f       	mov	r20, r17
     a1a:	6b 2d       	mov	r22, r11
     a1c:	88 2d       	mov	r24, r8
     a1e:	8c 1b       	sub	r24, r28
     a20:	e4 dd       	rcall	.-1080   	; 0x5ea <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     a22:	2a 2d       	mov	r18, r10
     a24:	41 e0       	ldi	r20, 0x01	; 1
     a26:	4c 0f       	add	r20, r28
     a28:	69 2d       	mov	r22, r9
     a2a:	6c 1b       	sub	r22, r28
     a2c:	8c 2d       	mov	r24, r12
     a2e:	dd dd       	rcall	.-1094   	; 0x5ea <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     a30:	77 20       	and	r7, r7
     a32:	61 f0       	breq	.+24     	; 0xa4c <gfx_mono_generic_draw_filled_circle+0xba>
			gfx_mono_draw_vertical_line(x - offset_y,
     a34:	2a 2d       	mov	r18, r10
     a36:	41 2f       	mov	r20, r17
     a38:	69 2d       	mov	r22, r9
     a3a:	88 2d       	mov	r24, r8
     a3c:	8c 1b       	sub	r24, r28
     a3e:	d5 dd       	rcall	.-1110   	; 0x5ea <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     a40:	2a 2d       	mov	r18, r10
     a42:	41 e0       	ldi	r20, 0x01	; 1
     a44:	4c 0f       	add	r20, r28
     a46:	69 2d       	mov	r22, r9
     a48:	8c 2d       	mov	r24, r12
     a4a:	cf dd       	rcall	.-1122   	; 0x5ea <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     a4c:	00 23       	and	r16, r16
     a4e:	61 f0       	breq	.+24     	; 0xa68 <gfx_mono_generic_draw_filled_circle+0xd6>
			gfx_mono_draw_vertical_line(x + offset_y,
     a50:	2a 2d       	mov	r18, r10
     a52:	41 2f       	mov	r20, r17
     a54:	69 2d       	mov	r22, r9
     a56:	8c 2f       	mov	r24, r28
     a58:	88 0d       	add	r24, r8
     a5a:	c7 dd       	rcall	.-1138   	; 0x5ea <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     a5c:	2a 2d       	mov	r18, r10
     a5e:	41 e0       	ldi	r20, 0x01	; 1
     a60:	4c 0f       	add	r20, r28
     a62:	69 2d       	mov	r22, r9
     a64:	8d 2d       	mov	r24, r13
     a66:	c1 dd       	rcall	.-1150   	; 0x5ea <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     a68:	ff 20       	and	r15, r15
     a6a:	54 f4       	brge	.+20     	; 0xa80 <gfx_mono_generic_draw_filled_circle+0xee>
			error += ((offset_x << 2) + 6);
     a6c:	8d 2f       	mov	r24, r29
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	88 0f       	add	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	88 0f       	add	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	06 96       	adiw	r24, 0x06	; 6
     a7a:	e8 0e       	add	r14, r24
     a7c:	f9 1e       	adc	r15, r25
     a7e:	0c c0       	rjmp	.+24     	; 0xa98 <gfx_mono_generic_draw_filled_circle+0x106>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     a80:	ed 2f       	mov	r30, r29
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	ec 1b       	sub	r30, r28
     a86:	f1 09       	sbc	r31, r1
     a88:	ee 0f       	add	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	ee 0f       	add	r30, r30
     a8e:	ff 1f       	adc	r31, r31
     a90:	3a 96       	adiw	r30, 0x0a	; 10
     a92:	ee 0e       	add	r14, r30
     a94:	ff 1e       	adc	r15, r31
			--offset_y;
     a96:	c1 50       	subi	r28, 0x01	; 1
		}

		/* Next X. */
		++offset_x;
     a98:	df 5f       	subi	r29, 0xFF	; 255
     a9a:	1f 5f       	subi	r17, 0xFF	; 255
     a9c:	d3 94       	inc	r13
     a9e:	ca 94       	dec	r12
     aa0:	ba 94       	dec	r11
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
     aa2:	cd 17       	cp	r28, r29
     aa4:	08 f0       	brcs	.+2      	; 0xaa8 <gfx_mono_generic_draw_filled_circle+0x116>
     aa6:	a6 cf       	rjmp	.-180    	; 0x9f4 <gfx_mono_generic_draw_filled_circle+0x62>
		}

		/* Next X. */
		++offset_x;
	}
}
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	df 90       	pop	r13
     ab6:	cf 90       	pop	r12
     ab8:	bf 90       	pop	r11
     aba:	af 90       	pop	r10
     abc:	9f 90       	pop	r9
     abe:	8f 90       	pop	r8
     ac0:	7f 90       	pop	r7
     ac2:	6f 90       	pop	r6
     ac4:	5f 90       	pop	r5
     ac6:	08 95       	ret

00000ac8 <gfx_mono_lcd_uc1608_put_page>:
		uint8_t				byte = gfx_mono_lcd_uc1608_get_byte(page, x);

		isSet = (byte & pixel_mask) ?  GFX_PIXEL_SET : GFX_PIXEL_CLR;
	}
	return isSet;
}
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	7c 01       	movw	r14, r24
     ad6:	c4 2f       	mov	r28, r20
     ad8:	12 2f       	mov	r17, r18
     ada:	89 2b       	or	r24, r25
     adc:	01 f1       	breq	.+64     	; 0xb1e <gfx_mono_lcd_uc1608_put_page+0x56>
     ade:	60 31       	cpi	r22, 0x10	; 16
     ae0:	f0 f4       	brcc	.+60     	; 0xb1e <gfx_mono_lcd_uc1608_put_page+0x56>
     ae2:	40 3f       	cpi	r20, 0xF0	; 240
     ae4:	e0 f4       	brcc	.+56     	; 0xb1e <gfx_mono_lcd_uc1608_put_page+0x56>
     ae6:	86 2f       	mov	r24, r22
     ae8:	a2 d5       	rcall	.+2884   	; 0x162e <lcd_page_set>
     aea:	8c 2f       	mov	r24, r28
     aec:	a6 d5       	rcall	.+2892   	; 0x163a <lcd_col_set>
     aee:	81 2f       	mov	r24, r17
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	8c 0f       	add	r24, r28
     af4:	91 1d       	adc	r25, r1
     af6:	81 3f       	cpi	r24, 0xF1	; 241
     af8:	91 05       	cpc	r25, r1
     afa:	14 f0       	brlt	.+4      	; 0xb00 <gfx_mono_lcd_uc1608_put_page+0x38>
     afc:	10 ef       	ldi	r17, 0xF0	; 240
     afe:	1c 1b       	sub	r17, r28
     b00:	11 23       	and	r17, r17
     b02:	69 f0       	breq	.+26     	; 0xb1e <gfx_mono_lcd_uc1608_put_page+0x56>
     b04:	e7 01       	movw	r28, r14
     b06:	11 50       	subi	r17, 0x01	; 1
     b08:	01 2f       	mov	r16, r17
     b0a:	10 e0       	ldi	r17, 0x00	; 0
     b0c:	0f 5f       	subi	r16, 0xFF	; 255
     b0e:	1f 4f       	sbci	r17, 0xFF	; 255
     b10:	0e 0d       	add	r16, r14
     b12:	1f 1d       	adc	r17, r15
     b14:	89 91       	ld	r24, Y+
     b16:	51 d5       	rcall	.+2722   	; 0x15ba <lcd_bus_write_ram>
     b18:	c0 17       	cp	r28, r16
     b1a:	d1 07       	cpc	r29, r17
     b1c:	d9 f7       	brne	.-10     	; 0xb14 <gfx_mono_lcd_uc1608_put_page+0x4c>
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	08 95       	ret

00000b2c <gfx_mono_lcd_uc1608_put_byte>:
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	80 31       	cpi	r24, 0x10	; 16
     b32:	48 f4       	brcc	.+18     	; 0xb46 <gfx_mono_lcd_uc1608_put_byte+0x1a>
     b34:	60 3f       	cpi	r22, 0xF0	; 240
     b36:	38 f4       	brcc	.+14     	; 0xb46 <gfx_mono_lcd_uc1608_put_byte+0x1a>
     b38:	d4 2f       	mov	r29, r20
     b3a:	c6 2f       	mov	r28, r22
     b3c:	78 d5       	rcall	.+2800   	; 0x162e <lcd_page_set>
     b3e:	8c 2f       	mov	r24, r28
     b40:	7c d5       	rcall	.+2808   	; 0x163a <lcd_col_set>
     b42:	8d 2f       	mov	r24, r29
     b44:	3a d5       	rcall	.+2676   	; 0x15ba <lcd_bus_write_ram>
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <gfx_mono_lcd_uc1608_get_byte>:
     b4c:	cf 93       	push	r28
     b4e:	80 31       	cpi	r24, 0x10	; 16
     b50:	40 f4       	brcc	.+16     	; 0xb62 <gfx_mono_lcd_uc1608_get_byte+0x16>
     b52:	60 3f       	cpi	r22, 0xF0	; 240
     b54:	40 f4       	brcc	.+16     	; 0xb66 <gfx_mono_lcd_uc1608_get_byte+0x1a>
     b56:	c6 2f       	mov	r28, r22
     b58:	6a d5       	rcall	.+2772   	; 0x162e <lcd_page_set>
     b5a:	8c 2f       	mov	r24, r28
     b5c:	6e d5       	rcall	.+2780   	; 0x163a <lcd_col_set>
     b5e:	44 d5       	rcall	.+2696   	; 0x15e8 <lcd_bus_read_ram>
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <gfx_mono_lcd_uc1608_get_byte+0x1c>
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <gfx_mono_lcd_uc1608_get_byte+0x1c>
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <gfx_mono_lcd_uc1608_mask_byte>:
 * \param column     Page offset (x coordinate)
 * \param pixel_mask Mask for pixel operation
 * \param color      Pixel operation
 */
void gfx_mono_lcd_uc1608_mask_byte(gfx_coord_t page, gfx_coord_t column, gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
	uint8_t data = 0;

	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
     b74:	80 31       	cpi	r24, 0x10	; 16
     b76:	c0 f4       	brcc	.+48     	; 0xba8 <gfx_mono_lcd_uc1608_mask_byte+0x3c>
     b78:	60 3f       	cpi	r22, 0xF0	; 240
     b7a:	b0 f4       	brcc	.+44     	; 0xba8 <gfx_mono_lcd_uc1608_mask_byte+0x3c>
     b7c:	d2 2f       	mov	r29, r18
     b7e:	14 2f       	mov	r17, r20
     b80:	c6 2f       	mov	r28, r22
		data = gfx_mono_lcd_uc1608_get_byte(page, column);
     b82:	e4 df       	rcall	.-56     	; 0xb4c <gfx_mono_lcd_uc1608_get_byte>
     b84:	08 2f       	mov	r16, r24

		switch (color) {
     b86:	d1 30       	cpi	r29, 0x01	; 1
     b88:	41 f0       	breq	.+16     	; 0xb9a <gfx_mono_lcd_uc1608_mask_byte+0x2e>
     b8a:	18 f0       	brcs	.+6      	; 0xb92 <gfx_mono_lcd_uc1608_mask_byte+0x26>
     b8c:	d2 30       	cpi	r29, 0x02	; 2
     b8e:	39 f0       	breq	.+14     	; 0xb9e <gfx_mono_lcd_uc1608_mask_byte+0x32>
     b90:	07 c0       	rjmp	.+14     	; 0xba0 <gfx_mono_lcd_uc1608_mask_byte+0x34>
			case GFX_PIXEL_CLR:
				data &= ~pixel_mask;
     b92:	41 2f       	mov	r20, r17
     b94:	40 95       	com	r20
     b96:	04 23       	and	r16, r20
				break;
     b98:	03 c0       	rjmp	.+6      	; 0xba0 <gfx_mono_lcd_uc1608_mask_byte+0x34>

			case GFX_PIXEL_SET:
				data |= pixel_mask;
     b9a:	01 2b       	or	r16, r17
				break;
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <gfx_mono_lcd_uc1608_mask_byte+0x34>

			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
     b9e:	01 27       	eor	r16, r17
				break;
		}

		lcd_col_set(column);
     ba0:	8c 2f       	mov	r24, r28
     ba2:	4b d5       	rcall	.+2710   	; 0x163a <lcd_col_set>
		lcd_bus_write_ram(data);										// Write byte slice to RAM
     ba4:	80 2f       	mov	r24, r16
     ba6:	09 d5       	rcall	.+2578   	; 0x15ba <lcd_bus_write_ram>
	}
}
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	08 95       	ret

00000bb2 <gfx_mono_lcd_uc1608_draw_pixel>:
 * \param y         Y coordinate of the pixel
 * \param color     Pixel operation.
 */
void gfx_mono_lcd_uc1608_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_mono_color_t color)
{
	if ((x < GFX_MONO_LCD_WIDTH) && (y < GFX_MONO_LCD_HEIGHT)) {
     bb2:	80 3f       	cpi	r24, 0xF0	; 240
     bb4:	98 f4       	brcc	.+38     	; 0xbdc <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     bb6:	66 23       	and	r22, r22
     bb8:	8c f0       	brlt	.+34     	; 0xbdc <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     bba:	24 2f       	mov	r18, r20
     bbc:	96 2f       	mov	r25, r22
     bbe:	68 2f       	mov	r22, r24
		gfx_coord_t			page		= y / GFX_MONO_LCD_PIXELS_PER_BYTE;
		gfx_mono_color_t	pixel_mask	= 1 << (y % GFX_MONO_LCD_PIXELS_PER_BYTE);
     bc0:	89 2f       	mov	r24, r25
     bc2:	87 70       	andi	r24, 0x07	; 7
     bc4:	41 e0       	ldi	r20, 0x01	; 1
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <gfx_mono_lcd_uc1608_draw_pixel+0x1c>
     bca:	44 0f       	add	r20, r20
     bcc:	55 1f       	adc	r21, r21
     bce:	8a 95       	dec	r24
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <gfx_mono_lcd_uc1608_draw_pixel+0x18>

		gfx_mono_lcd_uc1608_mask_byte(page, x, pixel_mask, color);
     bd2:	89 2f       	mov	r24, r25
     bd4:	86 95       	lsr	r24
     bd6:	86 95       	lsr	r24
     bd8:	86 95       	lsr	r24
     bda:	c8 cf       	rjmp	.-112    	; 0xb6c <gfx_mono_lcd_uc1608_mask_byte>
     bdc:	08 95       	ret

00000bde <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     bde:	9f 92       	push	r9
     be0:	af 92       	push	r10
     be2:	bf 92       	push	r11
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	c8 2f       	mov	r28, r24
     bf6:	e6 2e       	mov	r14, r22
     bf8:	b4 2e       	mov	r11, r20
     bfa:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     bfc:	00 e0       	ldi	r16, 0x00	; 0
     bfe:	f9 01       	movw	r30, r18
     c00:	24 81       	ldd	r18, Z+4	; 0x04
     c02:	43 81       	ldd	r20, Z+3	; 0x03
     c04:	6b 2d       	mov	r22, r11
     c06:	8e 2d       	mov	r24, r14
     c08:	ec dd       	rcall	.-1064   	; 0x7e2 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     c0a:	f6 01       	movw	r30, r12
     c0c:	80 81       	ld	r24, Z
     c0e:	81 11       	cpse	r24, r1
     c10:	3a c0       	rjmp	.+116    	; 0xc86 <gfx_mono_draw_char+0xa8>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     c12:	83 81       	ldd	r24, Z+3	; 0x03
     c14:	28 2f       	mov	r18, r24
     c16:	26 95       	lsr	r18
     c18:	26 95       	lsr	r18
     c1a:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     c1c:	87 70       	andi	r24, 0x07	; 7
     c1e:	09 f0       	breq	.+2      	; 0xc22 <gfx_mono_draw_char+0x44>
		char_row_size++;
     c20:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     c22:	f6 01       	movw	r30, r12
     c24:	a4 80       	ldd	r10, Z+4	; 0x04
     c26:	2a 9d       	mul	r18, r10
     c28:	90 01       	movw	r18, r0
     c2a:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
     c2c:	8c 2f       	mov	r24, r28
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	45 81       	ldd	r20, Z+5	; 0x05
     c32:	84 1b       	sub	r24, r20
     c34:	91 09       	sbc	r25, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
     c36:	28 9f       	mul	r18, r24
     c38:	a0 01       	movw	r20, r0
     c3a:	29 9f       	mul	r18, r25
     c3c:	50 0d       	add	r21, r0
     c3e:	38 9f       	mul	r19, r24
     c40:	50 0d       	add	r21, r0
     c42:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     c44:	01 81       	ldd	r16, Z+1	; 0x01
     c46:	12 81       	ldd	r17, Z+2	; 0x02
     c48:	04 0f       	add	r16, r20
     c4a:	15 1f       	adc	r17, r21

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     c4c:	91 2c       	mov	r9, r1
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     c4e:	f6 01       	movw	r30, r12
     c50:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     c52:	ff 20       	and	r15, r15
     c54:	a1 f0       	breq	.+40     	; 0xc7e <gfx_mono_draw_char+0xa0>
     c56:	d9 2d       	mov	r29, r9
     c58:	c9 2d       	mov	r28, r9
     c5a:	8c 2f       	mov	r24, r28
     c5c:	8e 0d       	add	r24, r14
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     c5e:	9c 2f       	mov	r25, r28
     c60:	97 70       	andi	r25, 0x07	; 7
     c62:	21 f4       	brne	.+8      	; 0xc6c <gfx_mono_draw_char+0x8e>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     c64:	f8 01       	movw	r30, r16
     c66:	d4 91       	lpm	r29, Z
				glyph_data++;
     c68:	0f 5f       	subi	r16, 0xFF	; 255
     c6a:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     c6c:	dd 23       	and	r29, r29
     c6e:	1c f4       	brge	.+6      	; 0xc76 <gfx_mono_draw_char+0x98>
				gfx_mono_draw_pixel(inc_x, inc_y,
     c70:	41 e0       	ldi	r20, 0x01	; 1
     c72:	6b 2d       	mov	r22, r11
     c74:	9e df       	rcall	.-196    	; 0xbb2 <gfx_mono_lcd_uc1608_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     c76:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     c78:	cf 5f       	subi	r28, 0xFF	; 255
     c7a:	cf 11       	cpse	r28, r15
     c7c:	ee cf       	rjmp	.-36     	; 0xc5a <gfx_mono_draw_char+0x7c>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     c7e:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     c80:	aa 94       	dec	r10
	} while (rows_left > 0);
     c82:	a1 10       	cpse	r10, r1
     c84:	e4 cf       	rjmp	.-56     	; 0xc4e <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	df 90       	pop	r13
     c94:	cf 90       	pop	r12
     c96:	bf 90       	pop	r11
     c98:	af 90       	pop	r10
     c9a:	9f 90       	pop	r9
     c9c:	08 95       	ret

00000c9e <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     c9e:	df 92       	push	r13
     ca0:	ef 92       	push	r14
     ca2:	ff 92       	push	r15
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	04 2f       	mov	r16, r20
     cae:	79 01       	movw	r14, r18
     cb0:	ec 01       	movw	r28, r24
     cb2:	16 2f       	mov	r17, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     cb4:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     cb6:	89 91       	ld	r24, Y+
     cb8:	8a 30       	cpi	r24, 0x0A	; 10
     cba:	31 f4       	brne	.+12     	; 0xcc8 <gfx_mono_draw_string+0x2a>
     cbc:	f7 01       	movw	r30, r14
     cbe:	84 81       	ldd	r24, Z+4	; 0x04
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
     cc2:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     cc4:	1d 2d       	mov	r17, r13
     cc6:	09 c0       	rjmp	.+18     	; 0xcda <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     cc8:	8d 30       	cpi	r24, 0x0D	; 13
     cca:	39 f0       	breq	.+14     	; 0xcda <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     ccc:	97 01       	movw	r18, r14
     cce:	40 2f       	mov	r20, r16
     cd0:	61 2f       	mov	r22, r17
     cd2:	85 df       	rcall	.-246    	; 0xbde <gfx_mono_draw_char>
			x += font->width;
     cd4:	f7 01       	movw	r30, r14
     cd6:	83 81       	ldd	r24, Z+3	; 0x03
     cd8:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     cda:	88 81       	ld	r24, Y
     cdc:	81 11       	cpse	r24, r1
     cde:	eb cf       	rjmp	.-42     	; 0xcb6 <gfx_mono_draw_string+0x18>
}
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	df 90       	pop	r13
     cee:	08 95       	ret

00000cf0 <asm_break>:

/* Helper functions */

void asm_break(void)
{
	__asm__ __volatile__ ("break" ::: "memory");
     cf0:	98 95       	break
	nop();
     cf2:	00 00       	nop
     cf4:	08 95       	ret

00000cf6 <__vector_1>:
	asm_break();
}


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
     cf6:	1f 92       	push	r1
     cf8:	0f 92       	push	r0
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	0f 92       	push	r0
     cfe:	11 24       	eor	r1, r1
     d00:	2f 93       	push	r18
     d02:	3f 93       	push	r19
     d04:	4f 93       	push	r20
     d06:	5f 93       	push	r21
     d08:	6f 93       	push	r22
     d0a:	7f 93       	push	r23
     d0c:	8f 93       	push	r24
     d0e:	9f 93       	push	r25
     d10:	af 93       	push	r26
     d12:	bf 93       	push	r27
     d14:	ef 93       	push	r30
     d16:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     d18:	eb df       	rcall	.-42     	; 0xcf0 <asm_break>


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
	s_bad_interrupt();
}
     d1a:	ff 91       	pop	r31
     d1c:	ef 91       	pop	r30
     d1e:	bf 91       	pop	r27
     d20:	af 91       	pop	r26
     d22:	9f 91       	pop	r25
     d24:	8f 91       	pop	r24
     d26:	7f 91       	pop	r23
     d28:	6f 91       	pop	r22
     d2a:	5f 91       	pop	r21
     d2c:	4f 91       	pop	r20
     d2e:	3f 91       	pop	r19
     d30:	2f 91       	pop	r18
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	0f 90       	pop	r0
     d38:	1f 90       	pop	r1
     d3a:	18 95       	reti

00000d3c <__vector_2>:

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
     d46:	2f 93       	push	r18
     d48:	3f 93       	push	r19
     d4a:	4f 93       	push	r20
     d4c:	5f 93       	push	r21
     d4e:	6f 93       	push	r22
     d50:	7f 93       	push	r23
     d52:	8f 93       	push	r24
     d54:	9f 93       	push	r25
     d56:	af 93       	push	r26
     d58:	bf 93       	push	r27
     d5a:	ef 93       	push	r30
     d5c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     d5e:	c8 df       	rcall	.-112    	; 0xcf0 <asm_break>
}

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
	s_bad_interrupt();
}
     d60:	ff 91       	pop	r31
     d62:	ef 91       	pop	r30
     d64:	bf 91       	pop	r27
     d66:	af 91       	pop	r26
     d68:	9f 91       	pop	r25
     d6a:	8f 91       	pop	r24
     d6c:	7f 91       	pop	r23
     d6e:	6f 91       	pop	r22
     d70:	5f 91       	pop	r21
     d72:	4f 91       	pop	r20
     d74:	3f 91       	pop	r19
     d76:	2f 91       	pop	r18
     d78:	0f 90       	pop	r0
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	0f 90       	pop	r0
     d7e:	1f 90       	pop	r1
     d80:	18 95       	reti

00000d82 <__vector_3>:

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     da4:	a5 df       	rcall	.-182    	; 0xcf0 <asm_break>
}

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
	s_bad_interrupt();
}
     da6:	ff 91       	pop	r31
     da8:	ef 91       	pop	r30
     daa:	bf 91       	pop	r27
     dac:	af 91       	pop	r26
     dae:	9f 91       	pop	r25
     db0:	8f 91       	pop	r24
     db2:	7f 91       	pop	r23
     db4:	6f 91       	pop	r22
     db6:	5f 91       	pop	r21
     db8:	4f 91       	pop	r20
     dba:	3f 91       	pop	r19
     dbc:	2f 91       	pop	r18
     dbe:	0f 90       	pop	r0
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	0f 90       	pop	r0
     dc4:	1f 90       	pop	r1
     dc6:	18 95       	reti

00000dc8 <__vector_4>:

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
     dc8:	1f 92       	push	r1
     dca:	0f 92       	push	r0
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	0f 92       	push	r0
     dd0:	11 24       	eor	r1, r1
     dd2:	2f 93       	push	r18
     dd4:	3f 93       	push	r19
     dd6:	4f 93       	push	r20
     dd8:	5f 93       	push	r21
     dda:	6f 93       	push	r22
     ddc:	7f 93       	push	r23
     dde:	8f 93       	push	r24
     de0:	9f 93       	push	r25
     de2:	af 93       	push	r26
     de4:	bf 93       	push	r27
     de6:	ef 93       	push	r30
     de8:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     dea:	82 df       	rcall	.-252    	; 0xcf0 <asm_break>
}

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
	s_bad_interrupt();
}
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	7f 91       	pop	r23
     dfa:	6f 91       	pop	r22
     dfc:	5f 91       	pop	r21
     dfe:	4f 91       	pop	r20
     e00:	3f 91       	pop	r19
     e02:	2f 91       	pop	r18
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	0f 90       	pop	r0
     e0a:	1f 90       	pop	r1
     e0c:	18 95       	reti

00000e0e <__vector_5>:

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
     e0e:	1f 92       	push	r1
     e10:	0f 92       	push	r0
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	0f 92       	push	r0
     e16:	11 24       	eor	r1, r1
     e18:	2f 93       	push	r18
     e1a:	3f 93       	push	r19
     e1c:	4f 93       	push	r20
     e1e:	5f 93       	push	r21
     e20:	6f 93       	push	r22
     e22:	7f 93       	push	r23
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	af 93       	push	r26
     e2a:	bf 93       	push	r27
     e2c:	ef 93       	push	r30
     e2e:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     e30:	5f df       	rcall	.-322    	; 0xcf0 <asm_break>
}

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
	s_bad_interrupt();
}
     e32:	ff 91       	pop	r31
     e34:	ef 91       	pop	r30
     e36:	bf 91       	pop	r27
     e38:	af 91       	pop	r26
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	7f 91       	pop	r23
     e40:	6f 91       	pop	r22
     e42:	5f 91       	pop	r21
     e44:	4f 91       	pop	r20
     e46:	3f 91       	pop	r19
     e48:	2f 91       	pop	r18
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <__vector_6>:

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	0f 92       	push	r0
     e5c:	11 24       	eor	r1, r1
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	4f 93       	push	r20
     e64:	5f 93       	push	r21
     e66:	6f 93       	push	r22
     e68:	7f 93       	push	r23
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     e76:	3c df       	rcall	.-392    	; 0xcf0 <asm_break>
}

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
	s_bad_interrupt();
}
     e78:	ff 91       	pop	r31
     e7a:	ef 91       	pop	r30
     e7c:	bf 91       	pop	r27
     e7e:	af 91       	pop	r26
     e80:	9f 91       	pop	r25
     e82:	8f 91       	pop	r24
     e84:	7f 91       	pop	r23
     e86:	6f 91       	pop	r22
     e88:	5f 91       	pop	r21
     e8a:	4f 91       	pop	r20
     e8c:	3f 91       	pop	r19
     e8e:	2f 91       	pop	r18
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	0f 90       	pop	r0
     e96:	1f 90       	pop	r1
     e98:	18 95       	reti

00000e9a <__vector_7>:

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
     e9a:	1f 92       	push	r1
     e9c:	0f 92       	push	r0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	0f 92       	push	r0
     ea2:	11 24       	eor	r1, r1
     ea4:	2f 93       	push	r18
     ea6:	3f 93       	push	r19
     ea8:	4f 93       	push	r20
     eaa:	5f 93       	push	r21
     eac:	6f 93       	push	r22
     eae:	7f 93       	push	r23
     eb0:	8f 93       	push	r24
     eb2:	9f 93       	push	r25
     eb4:	af 93       	push	r26
     eb6:	bf 93       	push	r27
     eb8:	ef 93       	push	r30
     eba:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     ebc:	19 df       	rcall	.-462    	; 0xcf0 <asm_break>
}

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
	s_bad_interrupt();
}
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <__vector_8>:

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
     ee0:	1f 92       	push	r1
     ee2:	0f 92       	push	r0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	0f 92       	push	r0
     ee8:	11 24       	eor	r1, r1
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     f02:	f6 de       	rcall	.-532    	; 0xcf0 <asm_break>
}

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
	s_bad_interrupt();
}
     f04:	ff 91       	pop	r31
     f06:	ef 91       	pop	r30
     f08:	bf 91       	pop	r27
     f0a:	af 91       	pop	r26
     f0c:	9f 91       	pop	r25
     f0e:	8f 91       	pop	r24
     f10:	7f 91       	pop	r23
     f12:	6f 91       	pop	r22
     f14:	5f 91       	pop	r21
     f16:	4f 91       	pop	r20
     f18:	3f 91       	pop	r19
     f1a:	2f 91       	pop	r18
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	0f 90       	pop	r0
     f22:	1f 90       	pop	r1
     f24:	18 95       	reti

00000f26 <__vector_9>:

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	2f 93       	push	r18
     f32:	3f 93       	push	r19
     f34:	4f 93       	push	r20
     f36:	5f 93       	push	r21
     f38:	6f 93       	push	r22
     f3a:	7f 93       	push	r23
     f3c:	8f 93       	push	r24
     f3e:	9f 93       	push	r25
     f40:	af 93       	push	r26
     f42:	bf 93       	push	r27
     f44:	ef 93       	push	r30
     f46:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     f48:	d3 de       	rcall	.-602    	; 0xcf0 <asm_break>
}

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
	s_bad_interrupt();
}
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	bf 91       	pop	r27
     f50:	af 91       	pop	r26
     f52:	9f 91       	pop	r25
     f54:	8f 91       	pop	r24
     f56:	7f 91       	pop	r23
     f58:	6f 91       	pop	r22
     f5a:	5f 91       	pop	r21
     f5c:	4f 91       	pop	r20
     f5e:	3f 91       	pop	r19
     f60:	2f 91       	pop	r18
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	0f 90       	pop	r0
     f68:	1f 90       	pop	r1
     f6a:	18 95       	reti

00000f6c <__vector_10>:

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	11 24       	eor	r1, r1
     f76:	2f 93       	push	r18
     f78:	3f 93       	push	r19
     f7a:	4f 93       	push	r20
     f7c:	5f 93       	push	r21
     f7e:	6f 93       	push	r22
     f80:	7f 93       	push	r23
     f82:	8f 93       	push	r24
     f84:	9f 93       	push	r25
     f86:	af 93       	push	r26
     f88:	bf 93       	push	r27
     f8a:	ef 93       	push	r30
     f8c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     f8e:	b0 de       	rcall	.-672    	; 0xcf0 <asm_break>
}

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
	s_bad_interrupt();
}
     f90:	ff 91       	pop	r31
     f92:	ef 91       	pop	r30
     f94:	bf 91       	pop	r27
     f96:	af 91       	pop	r26
     f98:	9f 91       	pop	r25
     f9a:	8f 91       	pop	r24
     f9c:	7f 91       	pop	r23
     f9e:	6f 91       	pop	r22
     fa0:	5f 91       	pop	r21
     fa2:	4f 91       	pop	r20
     fa4:	3f 91       	pop	r19
     fa6:	2f 91       	pop	r18
     fa8:	0f 90       	pop	r0
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	0f 90       	pop	r0
     fae:	1f 90       	pop	r1
     fb0:	18 95       	reti

00000fb2 <__vector_11>:

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
     fb2:	1f 92       	push	r1
     fb4:	0f 92       	push	r0
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	0f 92       	push	r0
     fba:	11 24       	eor	r1, r1
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     fd4:	8d de       	rcall	.-742    	; 0xcf0 <asm_break>
}

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
	s_bad_interrupt();
}
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	bf 91       	pop	r27
     fdc:	af 91       	pop	r26
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	7f 91       	pop	r23
     fe4:	6f 91       	pop	r22
     fe6:	5f 91       	pop	r21
     fe8:	4f 91       	pop	r20
     fea:	3f 91       	pop	r19
     fec:	2f 91       	pop	r18
     fee:	0f 90       	pop	r0
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	0f 90       	pop	r0
     ff4:	1f 90       	pop	r1
     ff6:	18 95       	reti

00000ff8 <__vector_12>:

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
     ff8:	1f 92       	push	r1
     ffa:	0f 92       	push	r0
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	0f 92       	push	r0
    1000:	11 24       	eor	r1, r1
    1002:	2f 93       	push	r18
    1004:	3f 93       	push	r19
    1006:	4f 93       	push	r20
    1008:	5f 93       	push	r21
    100a:	6f 93       	push	r22
    100c:	7f 93       	push	r23
    100e:	8f 93       	push	r24
    1010:	9f 93       	push	r25
    1012:	af 93       	push	r26
    1014:	bf 93       	push	r27
    1016:	ef 93       	push	r30
    1018:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    101a:	6a de       	rcall	.-812    	; 0xcf0 <asm_break>
}

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
	s_bad_interrupt();
}
    101c:	ff 91       	pop	r31
    101e:	ef 91       	pop	r30
    1020:	bf 91       	pop	r27
    1022:	af 91       	pop	r26
    1024:	9f 91       	pop	r25
    1026:	8f 91       	pop	r24
    1028:	7f 91       	pop	r23
    102a:	6f 91       	pop	r22
    102c:	5f 91       	pop	r21
    102e:	4f 91       	pop	r20
    1030:	3f 91       	pop	r19
    1032:	2f 91       	pop	r18
    1034:	0f 90       	pop	r0
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	0f 90       	pop	r0
    103a:	1f 90       	pop	r1
    103c:	18 95       	reti

0000103e <__vector_13>:

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
    103e:	1f 92       	push	r1
    1040:	0f 92       	push	r0
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	0f 92       	push	r0
    1046:	11 24       	eor	r1, r1
    1048:	2f 93       	push	r18
    104a:	3f 93       	push	r19
    104c:	4f 93       	push	r20
    104e:	5f 93       	push	r21
    1050:	6f 93       	push	r22
    1052:	7f 93       	push	r23
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
    1058:	af 93       	push	r26
    105a:	bf 93       	push	r27
    105c:	ef 93       	push	r30
    105e:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1060:	47 de       	rcall	.-882    	; 0xcf0 <asm_break>
}

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
	s_bad_interrupt();
}
    1062:	ff 91       	pop	r31
    1064:	ef 91       	pop	r30
    1066:	bf 91       	pop	r27
    1068:	af 91       	pop	r26
    106a:	9f 91       	pop	r25
    106c:	8f 91       	pop	r24
    106e:	7f 91       	pop	r23
    1070:	6f 91       	pop	r22
    1072:	5f 91       	pop	r21
    1074:	4f 91       	pop	r20
    1076:	3f 91       	pop	r19
    1078:	2f 91       	pop	r18
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	0f 90       	pop	r0
    1080:	1f 90       	pop	r1
    1082:	18 95       	reti

00001084 <__vector_14>:

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
    1084:	1f 92       	push	r1
    1086:	0f 92       	push	r0
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	0f 92       	push	r0
    108c:	11 24       	eor	r1, r1
    108e:	2f 93       	push	r18
    1090:	3f 93       	push	r19
    1092:	4f 93       	push	r20
    1094:	5f 93       	push	r21
    1096:	6f 93       	push	r22
    1098:	7f 93       	push	r23
    109a:	8f 93       	push	r24
    109c:	9f 93       	push	r25
    109e:	af 93       	push	r26
    10a0:	bf 93       	push	r27
    10a2:	ef 93       	push	r30
    10a4:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    10a6:	24 de       	rcall	.-952    	; 0xcf0 <asm_break>
}

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
	s_bad_interrupt();
}
    10a8:	ff 91       	pop	r31
    10aa:	ef 91       	pop	r30
    10ac:	bf 91       	pop	r27
    10ae:	af 91       	pop	r26
    10b0:	9f 91       	pop	r25
    10b2:	8f 91       	pop	r24
    10b4:	7f 91       	pop	r23
    10b6:	6f 91       	pop	r22
    10b8:	5f 91       	pop	r21
    10ba:	4f 91       	pop	r20
    10bc:	3f 91       	pop	r19
    10be:	2f 91       	pop	r18
    10c0:	0f 90       	pop	r0
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	0f 90       	pop	r0
    10c6:	1f 90       	pop	r1
    10c8:	18 95       	reti

000010ca <__vector_15>:

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
    10ca:	1f 92       	push	r1
    10cc:	0f 92       	push	r0
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	0f 92       	push	r0
    10d2:	11 24       	eor	r1, r1
    10d4:	2f 93       	push	r18
    10d6:	3f 93       	push	r19
    10d8:	4f 93       	push	r20
    10da:	5f 93       	push	r21
    10dc:	6f 93       	push	r22
    10de:	7f 93       	push	r23
    10e0:	8f 93       	push	r24
    10e2:	9f 93       	push	r25
    10e4:	af 93       	push	r26
    10e6:	bf 93       	push	r27
    10e8:	ef 93       	push	r30
    10ea:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    10ec:	01 de       	rcall	.-1022   	; 0xcf0 <asm_break>
}

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
	s_bad_interrupt();
}
    10ee:	ff 91       	pop	r31
    10f0:	ef 91       	pop	r30
    10f2:	bf 91       	pop	r27
    10f4:	af 91       	pop	r26
    10f6:	9f 91       	pop	r25
    10f8:	8f 91       	pop	r24
    10fa:	7f 91       	pop	r23
    10fc:	6f 91       	pop	r22
    10fe:	5f 91       	pop	r21
    1100:	4f 91       	pop	r20
    1102:	3f 91       	pop	r19
    1104:	2f 91       	pop	r18
    1106:	0f 90       	pop	r0
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	0f 90       	pop	r0
    110c:	1f 90       	pop	r1
    110e:	18 95       	reti

00001110 <__vector_16>:

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
    1110:	1f 92       	push	r1
    1112:	0f 92       	push	r0
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	0f 92       	push	r0
    1118:	11 24       	eor	r1, r1
    111a:	2f 93       	push	r18
    111c:	3f 93       	push	r19
    111e:	4f 93       	push	r20
    1120:	5f 93       	push	r21
    1122:	6f 93       	push	r22
    1124:	7f 93       	push	r23
    1126:	8f 93       	push	r24
    1128:	9f 93       	push	r25
    112a:	af 93       	push	r26
    112c:	bf 93       	push	r27
    112e:	ef 93       	push	r30
    1130:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1132:	de dd       	rcall	.-1092   	; 0xcf0 <asm_break>
}

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
	s_bad_interrupt();
}
    1134:	ff 91       	pop	r31
    1136:	ef 91       	pop	r30
    1138:	bf 91       	pop	r27
    113a:	af 91       	pop	r26
    113c:	9f 91       	pop	r25
    113e:	8f 91       	pop	r24
    1140:	7f 91       	pop	r23
    1142:	6f 91       	pop	r22
    1144:	5f 91       	pop	r21
    1146:	4f 91       	pop	r20
    1148:	3f 91       	pop	r19
    114a:	2f 91       	pop	r18
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

00001156 <__vector_17>:

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
    1156:	1f 92       	push	r1
    1158:	0f 92       	push	r0
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	0f 92       	push	r0
    115e:	11 24       	eor	r1, r1
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	ef 93       	push	r30
    1176:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1178:	bb dd       	rcall	.-1162   	; 0xcf0 <asm_break>
}

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
	s_bad_interrupt();
}
    117a:	ff 91       	pop	r31
    117c:	ef 91       	pop	r30
    117e:	bf 91       	pop	r27
    1180:	af 91       	pop	r26
    1182:	9f 91       	pop	r25
    1184:	8f 91       	pop	r24
    1186:	7f 91       	pop	r23
    1188:	6f 91       	pop	r22
    118a:	5f 91       	pop	r21
    118c:	4f 91       	pop	r20
    118e:	3f 91       	pop	r19
    1190:	2f 91       	pop	r18
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	0f 90       	pop	r0
    1198:	1f 90       	pop	r1
    119a:	18 95       	reti

0000119c <__vector_18>:

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
    119c:	1f 92       	push	r1
    119e:	0f 92       	push	r0
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	0f 92       	push	r0
    11a4:	11 24       	eor	r1, r1
    11a6:	2f 93       	push	r18
    11a8:	3f 93       	push	r19
    11aa:	4f 93       	push	r20
    11ac:	5f 93       	push	r21
    11ae:	6f 93       	push	r22
    11b0:	7f 93       	push	r23
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    11be:	98 dd       	rcall	.-1232   	; 0xcf0 <asm_break>
}

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
	s_bad_interrupt();
}
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	bf 91       	pop	r27
    11c6:	af 91       	pop	r26
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	7f 91       	pop	r23
    11ce:	6f 91       	pop	r22
    11d0:	5f 91       	pop	r21
    11d2:	4f 91       	pop	r20
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <__vector_19>:

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	ef 93       	push	r30
    1202:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1204:	75 dd       	rcall	.-1302   	; 0xcf0 <asm_break>
}

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
	s_bad_interrupt();
}
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	7f 91       	pop	r23
    1214:	6f 91       	pop	r22
    1216:	5f 91       	pop	r21
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <__vector_20>:

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    124a:	52 dd       	rcall	.-1372   	; 0xcf0 <asm_break>
}

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
	s_bad_interrupt();
}
    124c:	ff 91       	pop	r31
    124e:	ef 91       	pop	r30
    1250:	bf 91       	pop	r27
    1252:	af 91       	pop	r26
    1254:	9f 91       	pop	r25
    1256:	8f 91       	pop	r24
    1258:	7f 91       	pop	r23
    125a:	6f 91       	pop	r22
    125c:	5f 91       	pop	r21
    125e:	4f 91       	pop	r20
    1260:	3f 91       	pop	r19
    1262:	2f 91       	pop	r18
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	0f 90       	pop	r0
    126a:	1f 90       	pop	r1
    126c:	18 95       	reti

0000126e <__vector_21__bottom>:
	__vector_21__bottom(reason, adc_val);
}

/* do not static this function to avoid code inlining that would inherit many push operations in the critical section */
void __vector_21__bottom(uint8_t reason, uint16_t adc_val)
{
    126e:	8f 92       	push	r8
    1270:	9f 92       	push	r9
    1272:	af 92       	push	r10
    1274:	bf 92       	push	r11
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	8b 01       	movw	r16, r22
	static uint16_t test1  = 0;
	static uint16_t test2  = 0;
	static uint8_t  test2b = 0;
	uint8_t l_ocr1ah = 0x01 & (++test1 >> 8);
    1282:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <test1.2582>
    1286:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <test1.2582+0x1>
    128a:	21 96       	adiw	r28, 0x01	; 1
    128c:	d0 93 1d 01 	sts	0x011D, r29	; 0x80011d <test1.2582+0x1>
    1290:	c0 93 1c 01 	sts	0x011C, r28	; 0x80011c <test1.2582>
    1294:	9d 2f       	mov	r25, r29
    1296:	91 70       	andi	r25, 0x01	; 1
    1298:	f9 2e       	mov	r15, r25
	uint8_t l_ocr1al = 0xff & test1;
	static uint8_t l_ocr2a = 0;
	
	if (++test2 > 100) {
    129a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <test2.2583>
    129e:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <test2.2583+0x1>
    12a2:	2f 5f       	subi	r18, 0xFF	; 255
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	25 36       	cpi	r18, 0x65	; 101
    12a8:	31 05       	cpc	r19, r1
    12aa:	28 f4       	brcc	.+10     	; 0x12b6 <__vector_21__bottom+0x48>
    12ac:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <test2.2583+0x1>
    12b0:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <test2.2583>
    12b4:	0b c0       	rjmp	.+22     	; 0x12cc <__vector_21__bottom+0x5e>
		test2 = 0;
    12b6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <test2.2583+0x1>
    12ba:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <test2.2583>
		l_ocr2a = 0xff & ++test2b;
    12be:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <test2b.2584>
    12c2:	9f 5f       	subi	r25, 0xFF	; 255
    12c4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <test2b.2584>
    12c8:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <__data_end>
	}
	
	/* Low pass filtering and enhancing the data depth */
	if (reason == ADC_STATE_VLD_LDR) {
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	51 f5       	brne	.+84     	; 0x1324 <__vector_21__bottom+0xb6>
		float calc = 0.90f * g_adc_ldr		+ 0.10f * adc_val;
    12d0:	26 e6       	ldi	r18, 0x66	; 102
    12d2:	36 e6       	ldi	r19, 0x66	; 102
    12d4:	46 e6       	ldi	r20, 0x66	; 102
    12d6:	5f e3       	ldi	r21, 0x3F	; 63
    12d8:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <g_adc_ldr>
    12dc:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <g_adc_ldr+0x1>
    12e0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <g_adc_ldr+0x2>
    12e4:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <g_adc_ldr+0x3>
    12e8:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    12ec:	4b 01       	movw	r8, r22
    12ee:	5c 01       	movw	r10, r24
    12f0:	b8 01       	movw	r22, r16
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	a9 d7       	rcall	.+3922   	; 0x224a <__floatunsisf>
    12f8:	2d ec       	ldi	r18, 0xCD	; 205
    12fa:	3c ec       	ldi	r19, 0xCC	; 204
    12fc:	4c ec       	ldi	r20, 0xCC	; 204
    12fe:	5d e3       	ldi	r21, 0x3D	; 61
    1300:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	c5 01       	movw	r24, r10
    130a:	b4 01       	movw	r22, r8
    130c:	9d d6       	rcall	.+3386   	; 0x2048 <__addsf3>

		cli();
    130e:	f8 94       	cli
		g_adc_ldr  = calc;
    1310:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <g_adc_ldr>
    1314:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <g_adc_ldr+0x1>
    1318:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <g_adc_ldr+0x2>
    131c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <g_adc_ldr+0x3>
		sei();
    1320:	78 94       	sei
    1322:	2b c0       	rjmp	.+86     	; 0x137a <__vector_21__bottom+0x10c>

	} else if (reason == ADC_STATE_VLD_TEMP) {
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	49 f5       	brne	.+82     	; 0x137a <__vector_21__bottom+0x10c>
		float calc = 0.9995f * g_adc_temp	+ 0.0005f * adc_val;
    1328:	2b e3       	ldi	r18, 0x3B	; 59
    132a:	3f ed       	ldi	r19, 0xDF	; 223
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	5f e3       	ldi	r21, 0x3F	; 63
    1330:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <g_adc_temp>
    1334:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <g_adc_temp+0x1>
    1338:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <g_adc_temp+0x2>
    133c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <g_adc_temp+0x3>
    1340:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    1344:	4b 01       	movw	r8, r22
    1346:	5c 01       	movw	r10, r24
    1348:	b8 01       	movw	r22, r16
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	7d d7       	rcall	.+3834   	; 0x224a <__floatunsisf>
    1350:	2f e6       	ldi	r18, 0x6F	; 111
    1352:	32 e1       	ldi	r19, 0x12	; 18
    1354:	43 e0       	ldi	r20, 0x03	; 3
    1356:	5a e3       	ldi	r21, 0x3A	; 58
    1358:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__mulsf3>
    135c:	9b 01       	movw	r18, r22
    135e:	ac 01       	movw	r20, r24
    1360:	c5 01       	movw	r24, r10
    1362:	b4 01       	movw	r22, r8
    1364:	71 d6       	rcall	.+3298   	; 0x2048 <__addsf3>

		cli();
    1366:	f8 94       	cli
		g_adc_temp = calc;
    1368:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <g_adc_temp>
    136c:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <g_adc_temp+0x1>
    1370:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <g_adc_temp+0x2>
    1374:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <g_adc_temp+0x3>
		sei();
    1378:	78 94       	sei
	}

	cli();
    137a:	f8 94       	cli
	OCR1AH = l_ocr1ah;
    137c:	f0 92 89 00 	sts	0x0089, r15	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = l_ocr1al;
    1380:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR2A  = l_ocr2a;
    1384:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
    1388:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
    138c:	78 94       	sei
}
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	bf 90       	pop	r11
    139a:	af 90       	pop	r10
    139c:	9f 90       	pop	r9
    139e:	8f 90       	pop	r8
    13a0:	08 95       	ret

000013a2 <__vector_21>:
{	/* USART, TX - Complete */
	s_bad_interrupt();
}

ISR(__vector_21, ISR_BLOCK)
{	/* ADC */
    13a2:	1f 92       	push	r1
    13a4:	0f 92       	push	r0
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	0f 92       	push	r0
    13aa:	11 24       	eor	r1, r1
    13ac:	2f 93       	push	r18
    13ae:	3f 93       	push	r19
    13b0:	4f 93       	push	r20
    13b2:	5f 93       	push	r21
    13b4:	6f 93       	push	r22
    13b6:	7f 93       	push	r23
    13b8:	8f 93       	push	r24
    13ba:	9f 93       	push	r25
    13bc:	af 93       	push	r26
    13be:	bf 93       	push	r27
    13c0:	ef 93       	push	r30
    13c2:	ff 93       	push	r31
	uint16_t adc_val;
	uint8_t  reason = g_adc_state;
    13c4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <g_adc_state>

	/* CLI part */
	adc_val  = ADCL;
    13c8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	adc_val |= ADCH << 8;
    13cc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	79 2b       	or	r23, r25

	TIFR1 |= _BV(TOV1);							// Reset Timer1 overflow status bit (no ISR for TOV1 activated!)
    13d4:	b0 9a       	sbi	0x16, 0	; 22

	switch (g_adc_state) {
    13d6:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <g_adc_state>
    13da:	91 30       	cpi	r25, 0x01	; 1
    13dc:	41 f0       	breq	.+16     	; 0x13ee <__vector_21+0x4c>
    13de:	18 f0       	brcs	.+6      	; 0x13e6 <__vector_21+0x44>
    13e0:	92 30       	cpi	r25, 0x02	; 2
    13e2:	61 f0       	breq	.+24     	; 0x13fc <__vector_21+0x5a>
    13e4:	0f c0       	rjmp	.+30     	; 0x1404 <__vector_21+0x62>
		case ADC_STATE_PRE_LDR:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_LDR;
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <g_adc_state>
		break;
    13ec:	10 c0       	rjmp	.+32     	; 0x140e <__vector_21+0x6c>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    13ee:	98 ec       	ldi	r25, 0xC8	; 200
    13f0:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		case ADC_STATE_VLD_LDR:
		adc_set_admux(ADC_MUX_TEMPSENSE | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_TEMP;
    13f4:	92 e0       	ldi	r25, 0x02	; 2
    13f6:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <g_adc_state>
		break;
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <__vector_21+0x6c>

		case ADC_STATE_PRE_TEMP:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_TEMP;
    13fc:	93 e0       	ldi	r25, 0x03	; 3
    13fe:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <g_adc_state>
		break;
    1402:	05 c0       	rjmp	.+10     	; 0x140e <__vector_21+0x6c>
    1404:	90 ec       	ldi	r25, 0xC0	; 192
    1406:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		case ADC_STATE_VLD_TEMP:
		// fall-through

		default:
		adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_LDR;
    140a:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <g_adc_state>
	}

	/* SEI part */
	sei();
    140e:	78 94       	sei
	__vector_21__bottom(reason, adc_val);
    1410:	2e df       	rcall	.-420    	; 0x126e <__vector_21__bottom>
}
    1412:	ff 91       	pop	r31
    1414:	ef 91       	pop	r30
    1416:	bf 91       	pop	r27
    1418:	af 91       	pop	r26
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	7f 91       	pop	r23
    1420:	6f 91       	pop	r22
    1422:	5f 91       	pop	r21
    1424:	4f 91       	pop	r20
    1426:	3f 91       	pop	r19
    1428:	2f 91       	pop	r18
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	0f 90       	pop	r0
    1430:	1f 90       	pop	r1
    1432:	18 95       	reti

00001434 <__vector_22>:
	OCR2A  = l_ocr2a;
	sei();
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
    1434:	1f 92       	push	r1
    1436:	0f 92       	push	r0
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	0f 92       	push	r0
    143c:	11 24       	eor	r1, r1
    143e:	2f 93       	push	r18
    1440:	3f 93       	push	r19
    1442:	4f 93       	push	r20
    1444:	5f 93       	push	r21
    1446:	6f 93       	push	r22
    1448:	7f 93       	push	r23
    144a:	8f 93       	push	r24
    144c:	9f 93       	push	r25
    144e:	af 93       	push	r26
    1450:	bf 93       	push	r27
    1452:	ef 93       	push	r30
    1454:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1456:	4c dc       	rcall	.-1896   	; 0xcf0 <asm_break>
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
	s_bad_interrupt();
}
    1458:	ff 91       	pop	r31
    145a:	ef 91       	pop	r30
    145c:	bf 91       	pop	r27
    145e:	af 91       	pop	r26
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	7f 91       	pop	r23
    1466:	6f 91       	pop	r22
    1468:	5f 91       	pop	r21
    146a:	4f 91       	pop	r20
    146c:	3f 91       	pop	r19
    146e:	2f 91       	pop	r18
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <__vector_23>:

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
    147a:	1f 92       	push	r1
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	0f 92       	push	r0
    1482:	11 24       	eor	r1, r1
    1484:	2f 93       	push	r18
    1486:	3f 93       	push	r19
    1488:	4f 93       	push	r20
    148a:	5f 93       	push	r21
    148c:	6f 93       	push	r22
    148e:	7f 93       	push	r23
    1490:	8f 93       	push	r24
    1492:	9f 93       	push	r25
    1494:	af 93       	push	r26
    1496:	bf 93       	push	r27
    1498:	ef 93       	push	r30
    149a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    149c:	29 dc       	rcall	.-1966   	; 0xcf0 <asm_break>
}

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
	s_bad_interrupt();
}
    149e:	ff 91       	pop	r31
    14a0:	ef 91       	pop	r30
    14a2:	bf 91       	pop	r27
    14a4:	af 91       	pop	r26
    14a6:	9f 91       	pop	r25
    14a8:	8f 91       	pop	r24
    14aa:	7f 91       	pop	r23
    14ac:	6f 91       	pop	r22
    14ae:	5f 91       	pop	r21
    14b0:	4f 91       	pop	r20
    14b2:	3f 91       	pop	r19
    14b4:	2f 91       	pop	r18
    14b6:	0f 90       	pop	r0
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	0f 90       	pop	r0
    14bc:	1f 90       	pop	r1
    14be:	18 95       	reti

000014c0 <__vector_24>:

ISR(__vector_24, ISR_BLOCK)
{	/* TWI */
    14c0:	1f 92       	push	r1
    14c2:	0f 92       	push	r0
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	0f 92       	push	r0
    14c8:	11 24       	eor	r1, r1
    14ca:	2f 93       	push	r18
    14cc:	3f 93       	push	r19
    14ce:	4f 93       	push	r20
    14d0:	5f 93       	push	r21
    14d2:	6f 93       	push	r22
    14d4:	7f 93       	push	r23
    14d6:	8f 93       	push	r24
    14d8:	9f 93       	push	r25
    14da:	af 93       	push	r26
    14dc:	bf 93       	push	r27
    14de:	ef 93       	push	r30
    14e0:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b1111 << TWS4);
    14e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	uint8_t twd = TWDR;
    14e6:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	/* SEI part */
	sei();
    14ea:	78 94       	sei
	__vector_24__bottom(tws, twd);
    14ec:	80 7f       	andi	r24, 0xF0	; 240
    14ee:	49 d3       	rcall	.+1682   	; 0x1b82 <__vector_24__bottom>
	TWCR = _BV(TWINT);
    14f0:	80 e8       	ldi	r24, 0x80	; 128
    14f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    14f6:	ff 91       	pop	r31
    14f8:	ef 91       	pop	r30
    14fa:	bf 91       	pop	r27
    14fc:	af 91       	pop	r26
    14fe:	9f 91       	pop	r25
    1500:	8f 91       	pop	r24
    1502:	7f 91       	pop	r23
    1504:	6f 91       	pop	r22
    1506:	5f 91       	pop	r21
    1508:	4f 91       	pop	r20
    150a:	3f 91       	pop	r19
    150c:	2f 91       	pop	r18
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	0f 90       	pop	r0
    1514:	1f 90       	pop	r1
    1516:	18 95       	reti

00001518 <__vector_25>:

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
    1518:	1f 92       	push	r1
    151a:	0f 92       	push	r0
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	0f 92       	push	r0
    1520:	11 24       	eor	r1, r1
    1522:	2f 93       	push	r18
    1524:	3f 93       	push	r19
    1526:	4f 93       	push	r20
    1528:	5f 93       	push	r21
    152a:	6f 93       	push	r22
    152c:	7f 93       	push	r23
    152e:	8f 93       	push	r24
    1530:	9f 93       	push	r25
    1532:	af 93       	push	r26
    1534:	bf 93       	push	r27
    1536:	ef 93       	push	r30
    1538:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    153a:	da db       	rcall	.-2124   	; 0xcf0 <asm_break>
}

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
	s_bad_interrupt();
}
    153c:	ff 91       	pop	r31
    153e:	ef 91       	pop	r30
    1540:	bf 91       	pop	r27
    1542:	af 91       	pop	r26
    1544:	9f 91       	pop	r25
    1546:	8f 91       	pop	r24
    1548:	7f 91       	pop	r23
    154a:	6f 91       	pop	r22
    154c:	5f 91       	pop	r21
    154e:	4f 91       	pop	r20
    1550:	3f 91       	pop	r19
    1552:	2f 91       	pop	r18
    1554:	0f 90       	pop	r0
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	0f 90       	pop	r0
    155a:	1f 90       	pop	r1
    155c:	18 95       	reti

0000155e <lcd_bus_read_status>:
		} else if (y >= GFX_MONO_LCD_HEIGHT) {
		return (uint8_t) GFX_MONO_LCD_HEIGHT - 1;
		} else {
		return (uint8_t) y;
	}
}
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	1f 92       	push	r1
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	8f b7       	in	r24, 0x3f	; 63
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	f8 94       	cli
    156e:	99 81       	ldd	r25, Y+1	; 0x01
    1570:	8f ef       	ldi	r24, 0xFF	; 255
    1572:	8b b9       	out	0x0b, r24	; 11
    1574:	1a b8       	out	0x0a, r1	; 10
    1576:	28 98       	cbi	0x05, 0	; 5
    1578:	2c 9a       	sbi	0x05, 4	; 5
    157a:	2d 9a       	sbi	0x05, 5	; 5
    157c:	00 00       	nop
    157e:	2d 98       	cbi	0x05, 5	; 5
    1580:	00 00       	nop
    1582:	89 b1       	in	r24, 0x09	; 9
    1584:	9f bf       	out	0x3f, r25	; 63
    1586:	0f 90       	pop	r0
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	08 95       	ret

0000158e <lcd_bus_write_cmd>:
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	1f 92       	push	r1
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	9f b7       	in	r25, 0x3f	; 63
    159a:	99 83       	std	Y+1, r25	; 0x01
    159c:	f8 94       	cli
    159e:	99 81       	ldd	r25, Y+1	; 0x01
    15a0:	8b b9       	out	0x0b, r24	; 11
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
    15a4:	8a b9       	out	0x0a, r24	; 10
    15a6:	28 98       	cbi	0x05, 0	; 5
    15a8:	2c 98       	cbi	0x05, 4	; 5
    15aa:	2d 9a       	sbi	0x05, 5	; 5
    15ac:	00 00       	nop
    15ae:	2d 98       	cbi	0x05, 5	; 5
    15b0:	9f bf       	out	0x3f, r25	; 63
    15b2:	0f 90       	pop	r0
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	08 95       	ret

000015ba <lcd_bus_write_ram>:
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	1f 92       	push	r1
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	9f b7       	in	r25, 0x3f	; 63
    15c6:	99 83       	std	Y+1, r25	; 0x01
    15c8:	f8 94       	cli
    15ca:	99 81       	ldd	r25, Y+1	; 0x01
    15cc:	8b b9       	out	0x0b, r24	; 11
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	8a b9       	out	0x0a, r24	; 10
    15d2:	28 9a       	sbi	0x05, 0	; 5
    15d4:	2c 98       	cbi	0x05, 4	; 5
    15d6:	2d 9a       	sbi	0x05, 5	; 5
    15d8:	00 00       	nop
    15da:	2d 98       	cbi	0x05, 5	; 5
    15dc:	00 00       	nop
    15de:	9f bf       	out	0x3f, r25	; 63
    15e0:	0f 90       	pop	r0
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	08 95       	ret

000015e8 <lcd_bus_read_ram>:
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	1f 92       	push	r1
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	8f b7       	in	r24, 0x3f	; 63
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	f8 94       	cli
    15f8:	99 81       	ldd	r25, Y+1	; 0x01
    15fa:	8f ef       	ldi	r24, 0xFF	; 255
    15fc:	8b b9       	out	0x0b, r24	; 11
    15fe:	1a b8       	out	0x0a, r1	; 10
    1600:	28 9a       	sbi	0x05, 0	; 5
    1602:	2c 9a       	sbi	0x05, 4	; 5
    1604:	2d 9a       	sbi	0x05, 5	; 5
    1606:	00 00       	nop
    1608:	2d 98       	cbi	0x05, 5	; 5
    160a:	00 00       	nop
    160c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <s_lcd_ram_read_nonvalid>
    1610:	88 23       	and	r24, r24
    1612:	39 f0       	breq	.+14     	; 0x1622 <lcd_bus_read_ram+0x3a>
    1614:	89 b1       	in	r24, 0x09	; 9
    1616:	2d 9a       	sbi	0x05, 5	; 5
    1618:	00 00       	nop
    161a:	2d 98       	cbi	0x05, 5	; 5
    161c:	00 00       	nop
    161e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <s_lcd_ram_read_nonvalid>
    1622:	89 b1       	in	r24, 0x09	; 9
    1624:	9f bf       	out	0x3f, r25	; 63
    1626:	0f 90       	pop	r0
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <lcd_page_set>:

void lcd_page_set(uint8_t page)
{
	if ((0 <= page && page) < (GFX_MONO_LCD_PAGES)) {
		lcd_bus_write_cmd(0b10110000 | page);					// Set Page Address
    162e:	80 6b       	ori	r24, 0xB0	; 176
    1630:	ae df       	rcall	.-164    	; 0x158e <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <s_lcd_ram_read_nonvalid>
    1638:	08 95       	ret

0000163a <lcd_col_set>:
	}
}

void lcd_col_set(uint8_t col)
{
    163a:	cf 93       	push	r28
	if ((0 <= col) && (col < GFX_MONO_LCD_WIDTH)) {
    163c:	80 3f       	cpi	r24, 0xF0	; 240
    163e:	58 f4       	brcc	.+22     	; 0x1656 <lcd_col_set+0x1c>
    1640:	c8 2f       	mov	r28, r24
		lcd_bus_write_cmd(0b00000000 | ( col       & 0x0f));	// Set Column Address LSB
    1642:	8f 70       	andi	r24, 0x0F	; 15
    1644:	a4 df       	rcall	.-184    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000 | ((col >> 4) & 0x0f));	// Set Column Address MSB
    1646:	8c 2f       	mov	r24, r28
    1648:	82 95       	swap	r24
    164a:	8f 70       	andi	r24, 0x0F	; 15
    164c:	80 61       	ori	r24, 0x10	; 16
    164e:	9f df       	rcall	.-194    	; 0x158e <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <s_lcd_ram_read_nonvalid>
	}
}
    1656:	cf 91       	pop	r28
    1658:	08 95       	ret

0000165a <lcd_cr>:

void lcd_cr(void)
{
	lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	98 df       	rcall	.-208    	; 0x158e <lcd_bus_write_cmd>
	lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    165e:	80 e1       	ldi	r24, 0x10	; 16
    1660:	96 df       	rcall	.-212    	; 0x158e <lcd_bus_write_cmd>

	s_lcd_ram_read_nonvalid = 1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <s_lcd_ram_read_nonvalid>
    1668:	08 95       	ret

0000166a <lcd_home>:
}

void lcd_home(void)
{
	lcd_bus_write_cmd(0b10110000);								// Set Page Address (0)
    166a:	80 eb       	ldi	r24, 0xB0	; 176
    166c:	90 df       	rcall	.-224    	; 0x158e <lcd_bus_write_cmd>
	lcd_cr();
    166e:	f5 cf       	rjmp	.-22     	; 0x165a <lcd_cr>
    1670:	08 95       	ret

00001672 <lcd_cls>:
}

void lcd_cls(void)
{
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    1678:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    167a:	10 ef       	ldi	r17, 0xF0	; 240

void lcd_cls(void)
{
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
    167c:	8d 2f       	mov	r24, r29
    167e:	80 6b       	ori	r24, 0xB0	; 176
    1680:	86 df       	rcall	.-244    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	84 df       	rcall	.-248    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    1686:	80 e1       	ldi	r24, 0x10	; 16
    1688:	82 df       	rcall	.-252    	; 0x158e <lcd_bus_write_cmd>
    168a:	c1 2f       	mov	r28, r17

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
			lcd_bus_write_ram(0);
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	95 df       	rcall	.-214    	; 0x15ba <lcd_bus_write_ram>
    1690:	c1 50       	subi	r28, 0x01	; 1
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
    1692:	e1 f7       	brne	.-8      	; 0x168c <lcd_cls+0x1a>
}

void lcd_cls(void)
{
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    1694:	df 5f       	subi	r29, 0xFF	; 255
    1696:	d0 31       	cpi	r29, 0x10	; 16
    1698:	89 f7       	brne	.-30     	; 0x167c <lcd_cls+0xa>
			lcd_bus_write_ram(0);
		}
	}	

	/* Set cursor to home position */
	lcd_home();
    169a:	e7 df       	rcall	.-50     	; 0x166a <lcd_home>
}
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	08 95       	ret

000016a4 <lcd_init>:
#endif
}


uint8_t lcd_init(void)
{
    16a4:	2f 92       	push	r2
    16a6:	3f 92       	push	r3
    16a8:	4f 92       	push	r4
    16aa:	5f 92       	push	r5
    16ac:	6f 92       	push	r6
    16ae:	7f 92       	push	r7
    16b0:	8f 92       	push	r8
    16b2:	9f 92       	push	r9
    16b4:	af 92       	push	r10
    16b6:	bf 92       	push	r11
    16b8:	cf 92       	push	r12
    16ba:	df 92       	push	r13
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	2a 97       	sbiw	r28, 0x0a	; 10
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
		return 0;													// Return OK

	} else {
		return 1;													// Return failure
	}
}
    16d8:	0d b7       	in	r16, 0x3d	; 61
    16da:	1e b7       	in	r17, 0x3e	; 62
uint8_t lcd_init(void)
{
	uint8_t data;

	/* INIT sequence */
	lcd_bus_write_cmd(0b11100010);									// Reset display
    16dc:	82 ee       	ldi	r24, 0xE2	; 226
    16de:	57 df       	rcall	.-338    	; 0x158e <lcd_bus_write_cmd>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
		barrier();
    16e4:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    16e6:	8b 32       	cpi	r24, 0x2B	; 43
    16e8:	28 e6       	ldi	r18, 0x68	; 104
    16ea:	92 07       	cpc	r25, r18
    16ec:	d9 f7       	brne	.-10     	; 0x16e4 <lcd_init+0x40>
	delay_ms(20);													// Wait for the panel to get ready in case one is attached to the bus

	data = lcd_bus_read_status();									// Get current status
    16ee:	37 df       	rcall	.-402    	; 0x155e <lcd_bus_read_status>
	if (!(data & C_LCD_STATUS_M)) {
    16f0:	88 23       	and	r24, r24
    16f2:	0c f4       	brge	.+2      	; 0x16f6 <lcd_init+0x52>
    16f4:	d7 c1       	rjmp	.+942    	; 0x1aa4 <lcd_init+0x400>
		/* LCD panel reacts correctly - resume with INIT sequence */
		lcd_bus_write_cmd(0b00101000 | C_LCD_PWR_CTRL);				// Set Power Control
    16f6:	8d e2       	ldi	r24, 0x2D	; 45
    16f8:	4a df       	rcall	.-364    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00100000 | C_LCD_MR_TC);				// Set MR and TC
    16fa:	84 e2       	ldi	r24, 0x24	; 36
    16fc:	48 df       	rcall	.-368    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b11101000 | C_LCD_BIASRATIO);			// Set Bias Ratio
    16fe:	8a ee       	ldi	r24, 0xEA	; 234
    1700:	46 df       	rcall	.-372    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10000001);								// Set Gain and PM (A)
    1702:	81 e8       	ldi	r24, 0x81	; 129
    1704:	44 df       	rcall	.-376    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(C_LCD_GAIN_PM);							// Set Gain and PM (B)
    1706:	8c e9       	ldi	r24, 0x9C	; 156
    1708:	42 df       	rcall	.-380    	; 0x158e <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b11000000 | C_LCD_MAPPING);				// Set Mapping
    170a:	88 ec       	ldi	r24, 0xC8	; 200
    170c:	40 df       	rcall	.-384    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10001000 | C_LCD_AC);					// Set RAM Address Control
    170e:	88 e8       	ldi	r24, 0x88	; 136
    1710:	3e df       	rcall	.-388    	; 0x158e <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b01000000);								// Set Start Line (0)
    1712:	80 e4       	ldi	r24, 0x40	; 64
    1714:	3c df       	rcall	.-392    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10010000);								// Set Fixed Lines (0)
    1716:	80 e9       	ldi	r24, 0x90	; 144
    1718:	3a df       	rcall	.-396    	; 0x158e <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b10110000);								// Set Page Address (0)
    171a:	80 eb       	ldi	r24, 0xB0	; 176
    171c:	38 df       	rcall	.-400    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	36 df       	rcall	.-404    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    1722:	80 e1       	ldi	r24, 0x10	; 16
    1724:	34 df       	rcall	.-408    	; 0x158e <lcd_bus_write_cmd>
		s_lcd_ram_read_nonvalid = true;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <s_lcd_ram_read_nonvalid>

		lcd_bus_write_cmd(0b11101111);								// Set Cursor Mode
    172c:	8f ee       	ldi	r24, 0xEF	; 239
    172e:	2f df       	rcall	.-418    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b11101110);								// Reset Cursor Mode (now CR := CA)
    1730:	8e ee       	ldi	r24, 0xEE	; 238
    1732:	2d df       	rcall	.-422    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10100100);								// Disable DC[1] (all pixel on)
    1734:	84 ea       	ldi	r24, 0xA4	; 164
    1736:	2b df       	rcall	.-426    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10100110);								// Disable DC[0] (all pixel inverse)
    1738:	86 ea       	ldi	r24, 0xA6	; 166
    173a:	29 df       	rcall	.-430    	; 0x158e <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10101111);								// Enable  DC[2] (Display)
    173c:	8f ea       	ldi	r24, 0xAF	; 175
    173e:	27 df       	rcall	.-434    	; 0x158e <lcd_bus_write_cmd>

		lcd_cls();													// Clear screen
    1740:	98 df       	rcall	.-208    	; 0x1672 <lcd_cls>
    1742:	10 e0       	ldi	r17, 0x00	; 0
static void s_lcd_test(void)
{
#if 1
	// TEST 1
	for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
		lcd_bus_write_ram(i);
    1744:	81 2f       	mov	r24, r17
    1746:	39 df       	rcall	.-398    	; 0x15ba <lcd_bus_write_ram>
    1748:	1f 5f       	subi	r17, 0xFF	; 255

static void s_lcd_test(void)
{
#if 1
	// TEST 1
	for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
    174a:	10 3f       	cpi	r17, 0xF0	; 240
    174c:	d9 f7       	brne	.-10     	; 0x1744 <lcd_init+0xa0>
	gfx_mono_generic_draw_line (0, 16, 239, 31, GFX_PIXEL_SET);
#endif

#if 1
	// TEST 5
	gfx_mono_generic_draw_rect(        70, 48, 40, 40, GFX_PIXEL_SET);
    174e:	01 e0       	ldi	r16, 0x01	; 1
    1750:	28 e2       	ldi	r18, 0x28	; 40
    1752:	48 e2       	ldi	r20, 0x28	; 40
    1754:	60 e3       	ldi	r22, 0x30	; 48
    1756:	86 e4       	ldi	r24, 0x46	; 70
    1758:	20 d8       	rcall	.-4032   	; 0x79a <gfx_mono_generic_draw_rect>
	gfx_mono_generic_draw_filled_rect(170, 48, 40, 40, GFX_PIXEL_SET);
    175a:	28 e2       	ldi	r18, 0x28	; 40
    175c:	48 e2       	ldi	r20, 0x28	; 40
    175e:	60 e3       	ldi	r22, 0x30	; 48
    1760:	8a ea       	ldi	r24, 0xAA	; 170
    1762:	3f d8       	rcall	.-3970   	; 0x7e2 <gfx_mono_generic_draw_filled_rect>
#endif

#if 1
	// TEST 6
	gfx_mono_generic_draw_circle(       10, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    1764:	0f ef       	ldi	r16, 0xFF	; 255
    1766:	21 e0       	ldi	r18, 0x01	; 1
    1768:	4a e0       	ldi	r20, 0x0A	; 10
    176a:	60 e5       	ldi	r22, 0x50	; 80
    176c:	8a e0       	ldi	r24, 0x0A	; 10
    176e:	53 d8       	rcall	.-3930   	; 0x816 <gfx_mono_generic_draw_circle>
	gfx_mono_generic_draw_filled_circle(40, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    1770:	21 e0       	ldi	r18, 0x01	; 1
    1772:	4a e0       	ldi	r20, 0x0A	; 10
    1774:	60 e5       	ldi	r22, 0x50	; 80
    1776:	88 e2       	ldi	r24, 0x28	; 40
    1778:	0c d9       	rcall	.-3560   	; 0x992 <gfx_mono_generic_draw_filled_circle>
#endif

#if 1
	// TEST 7
	gfx_mono_draw_string("DF4IAH Smart-LCD", 70, 32, &sysfont);
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	31 e0       	ldi	r19, 0x01	; 1
    177e:	40 e2       	ldi	r20, 0x20	; 32
    1780:	66 e4       	ldi	r22, 0x46	; 70
    1782:	87 e0       	ldi	r24, 0x07	; 7
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	8b da       	rcall	.-2794   	; 0xc9e <gfx_mono_draw_string>
	const int cnt = 4;
	const int blank_len = 1 + 15 + cnt * (3 + 8) + 1;  // train length + front + rear spacer
	int		origin = -blank_len;
	int		i = 0;
	int8_t  dx = 1;
	uint8_t	train_left[blank_len];
    1788:	8d b7       	in	r24, 0x3d	; 61
    178a:	9e b7       	in	r25, 0x3e	; 62
    178c:	cd 97       	sbiw	r24, 0x3d	; 61
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	9e bf       	out	0x3e, r25	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	8d bf       	out	0x3d, r24	; 61
    1798:	0d b7       	in	r16, 0x3d	; 61
    179a:	1e b7       	in	r17, 0x3e	; 62
    179c:	0f 5f       	subi	r16, 0xFF	; 255
    179e:	1f 4f       	sbci	r17, 0xFF	; 255
    17a0:	48 01       	movw	r8, r16
	uint8_t	train_right[blank_len];
    17a2:	ed b7       	in	r30, 0x3d	; 61
    17a4:	fe b7       	in	r31, 0x3e	; 62
    17a6:	fd 97       	sbiw	r30, 0x3d	; 61
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	fe bf       	out	0x3e, r31	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	ed bf       	out	0x3d, r30	; 61
    17b2:	cc 97       	sbiw	r24, 0x3c	; 60
    17b4:	7c 01       	movw	r14, r24
    17b6:	9a 87       	std	Y+10, r25	; 0x0a
    17b8:	89 87       	std	Y+9, r24	; 0x09

	/* prepare trains */	
	{
		int idx;

		for (idx = 0; idx < blank_len; ++idx) {
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
				train_left[  idx] = 0b11111000;

			} else if (idx == blank_len - 1) {
				train_left[  idx] = 0;

			} else if (!((idx - 16) % 11)) {
    17be:	0f 2e       	mov	r0, r31
    17c0:	fb e0       	ldi	r31, 0x0B	; 11
    17c2:	4f 2e       	mov	r4, r31
    17c4:	51 2c       	mov	r5, r1
    17c6:	f0 2d       	mov	r31, r0
				train_left[  idx] = 0b01000000;
    17c8:	68 94       	set
    17ca:	dd 24       	eor	r13, r13
    17cc:	d6 f8       	bld	r13, 6
				train_left[++idx] = 0b01000000;
				train_left[++idx] = 0b01000000;
				train_left[++idx] = 0b11111000;
    17ce:	48 ef       	ldi	r20, 0xF8	; 248
				train_left[++idx] = 0b11111000;
				train_left[++idx] = 0b11001000;
    17d0:	0f 2e       	mov	r0, r31
    17d2:	f8 ec       	ldi	r31, 0xC8	; 200
    17d4:	bf 2e       	mov	r11, r31
    17d6:	f0 2d       	mov	r31, r0
				train_left[  idx] = 0b11111000;
				train_left[++idx] = 0b11011000;
			} else if (idx <  5) {
				train_left[  idx] = 0b11011111;
			} else if (idx < 11) {
				train_left[  idx] = 0b11011000;
    17d8:	0f 2e       	mov	r0, r31
    17da:	f8 ed       	ldi	r31, 0xD8	; 216
    17dc:	cf 2e       	mov	r12, r31
    17de:	f0 2d       	mov	r31, r0

			} else if (idx < 3) {
				train_left[  idx] = 0b11111000;
				train_left[++idx] = 0b11011000;
			} else if (idx <  5) {
				train_left[  idx] = 0b11011111;
    17e0:	0f 2e       	mov	r0, r31
    17e2:	ff ed       	ldi	r31, 0xDF	; 223
    17e4:	6f 2e       	mov	r6, r31
    17e6:	f0 2d       	mov	r31, r0

	/* prepare trains */	
	{
		int idx;

		for (idx = 0; idx < blank_len; ++idx) {
    17e8:	77 24       	eor	r7, r7
    17ea:	73 94       	inc	r7
    17ec:	a1 2c       	mov	r10, r1
			if (!idx) {
    17ee:	21 15       	cp	r18, r1
    17f0:	31 05       	cpc	r19, r1
    17f2:	29 f4       	brne	.+10     	; 0x17fe <lcd_init+0x15a>
				train_left[idx] = 0;
    17f4:	f4 01       	movw	r30, r8
    17f6:	10 82       	st	Z, r1

	/* prepare trains */	
	{
		int idx;

		for (idx = 0; idx < blank_len; ++idx) {
    17f8:	27 2d       	mov	r18, r7
    17fa:	3a 2d       	mov	r19, r10
    17fc:	f8 cf       	rjmp	.-16     	; 0x17ee <lcd_init+0x14a>
			if (!idx) {
				train_left[idx] = 0;

			} else if (idx < 3) {
    17fe:	23 30       	cpi	r18, 0x03	; 3
    1800:	31 05       	cpc	r19, r1
    1802:	5c f4       	brge	.+22     	; 0x181a <lcd_init+0x176>
				train_left[  idx] = 0b11111000;
    1804:	f4 01       	movw	r30, r8
    1806:	e2 0f       	add	r30, r18
    1808:	f3 1f       	adc	r31, r19
    180a:	40 83       	st	Z, r20
				train_left[++idx] = 0b11011000;
    180c:	2f 5f       	subi	r18, 0xFF	; 255
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	f4 01       	movw	r30, r8
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	c0 82       	st	Z, r12
    1818:	3c c0       	rjmp	.+120    	; 0x1892 <lcd_init+0x1ee>
			} else if (idx <  5) {
    181a:	25 30       	cpi	r18, 0x05	; 5
    181c:	31 05       	cpc	r19, r1
    181e:	2c f4       	brge	.+10     	; 0x182a <lcd_init+0x186>
				train_left[  idx] = 0b11011111;
    1820:	f4 01       	movw	r30, r8
    1822:	e2 0f       	add	r30, r18
    1824:	f3 1f       	adc	r31, r19
    1826:	60 82       	st	Z, r6
    1828:	34 c0       	rjmp	.+104    	; 0x1892 <lcd_init+0x1ee>
			} else if (idx < 11) {
    182a:	2b 30       	cpi	r18, 0x0B	; 11
    182c:	31 05       	cpc	r19, r1
    182e:	2c f4       	brge	.+10     	; 0x183a <lcd_init+0x196>
				train_left[  idx] = 0b11011000;
    1830:	f4 01       	movw	r30, r8
    1832:	e2 0f       	add	r30, r18
    1834:	f3 1f       	adc	r31, r19
    1836:	c0 82       	st	Z, r12
    1838:	2c c0       	rjmp	.+88     	; 0x1892 <lcd_init+0x1ee>
			} else if (idx < 16) {
    183a:	20 31       	cpi	r18, 0x10	; 16
    183c:	31 05       	cpc	r19, r1
    183e:	2c f4       	brge	.+10     	; 0x184a <lcd_init+0x1a6>
				train_left[  idx] = 0b11111000;
    1840:	f4 01       	movw	r30, r8
    1842:	e2 0f       	add	r30, r18
    1844:	f3 1f       	adc	r31, r19
    1846:	40 83       	st	Z, r20
    1848:	24 c0       	rjmp	.+72     	; 0x1892 <lcd_init+0x1ee>

			} else if (idx == blank_len - 1) {
    184a:	2c 33       	cpi	r18, 0x3C	; 60
    184c:	31 05       	cpc	r19, r1
    184e:	19 f4       	brne	.+6      	; 0x1856 <lcd_init+0x1b2>
				train_left[  idx] = 0;
    1850:	f8 01       	movw	r30, r16
    1852:	14 ae       	std	Z+60, r1	; 0x3c
    1854:	24 c0       	rjmp	.+72     	; 0x189e <lcd_init+0x1fa>

			} else if (!((idx - 16) % 11)) {
    1856:	c9 01       	movw	r24, r18
    1858:	40 97       	sbiw	r24, 0x10	; 16
    185a:	b2 01       	movw	r22, r4
    185c:	0f d6       	rcall	.+3102   	; 0x247c <__divmodhi4>
    185e:	89 2b       	or	r24, r25
    1860:	a1 f4       	brne	.+40     	; 0x188a <lcd_init+0x1e6>
				train_left[  idx] = 0b01000000;
    1862:	f4 01       	movw	r30, r8
    1864:	e2 0f       	add	r30, r18
    1866:	f3 1f       	adc	r31, r19
    1868:	d0 82       	st	Z, r13
				train_left[++idx] = 0b01000000;
    186a:	d1 82       	std	Z+1, r13	; 0x01
				train_left[++idx] = 0b01000000;
    186c:	d2 82       	std	Z+2, r13	; 0x02
				train_left[++idx] = 0b11111000;
    186e:	43 83       	std	Z+3, r20	; 0x03
				train_left[++idx] = 0b11111000;
    1870:	44 83       	std	Z+4, r20	; 0x04
				train_left[++idx] = 0b11001000;
    1872:	b5 82       	std	Z+5, r11	; 0x05
				train_left[++idx] = 0b11111000;
    1874:	46 83       	std	Z+6, r20	; 0x06
				train_left[++idx] = 0b11111000;
    1876:	47 83       	std	Z+7, r20	; 0x07
				train_left[++idx] = 0b11001000;
    1878:	b0 86       	std	Z+8, r11	; 0x08
				train_left[++idx] = 0b11111000;
    187a:	41 87       	std	Z+9, r20	; 0x09
				train_left[++idx] = 0b11111000;
    187c:	26 5f       	subi	r18, 0xF6	; 246
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	f4 01       	movw	r30, r8
    1882:	e2 0f       	add	r30, r18
    1884:	f3 1f       	adc	r31, r19
    1886:	40 83       	st	Z, r20
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <lcd_init+0x1ee>
			} else {
				train_left[idx] = 0;
    188a:	f4 01       	movw	r30, r8
    188c:	e2 0f       	add	r30, r18
    188e:	f3 1f       	adc	r31, r19
    1890:	10 82       	st	Z, r1

	/* prepare trains */	
	{
		int idx;

		for (idx = 0; idx < blank_len; ++idx) {
    1892:	2f 5f       	subi	r18, 0xFF	; 255
    1894:	3f 4f       	sbci	r19, 0xFF	; 255
    1896:	2d 33       	cpi	r18, 0x3D	; 61
    1898:	31 05       	cpc	r19, r1
    189a:	0c f4       	brge	.+2      	; 0x189e <lcd_init+0x1fa>
    189c:	a8 cf       	rjmp	.-176    	; 0x17ee <lcd_init+0x14a>
    189e:	f8 01       	movw	r30, r16
    18a0:	d7 01       	movw	r26, r14
    18a2:	dd 96       	adiw	r26, 0x3d	; 61
				train_left[idx] = 0;
			}
		}

		for (idx = 0; idx < blank_len; ++idx) {
			train_right[blank_len - idx - 1] = train_left[idx];		// x-mirror
    18a4:	81 91       	ld	r24, Z+
    18a6:	8e 93       	st	-X, r24
			} else {
				train_left[idx] = 0;
			}
		}

		for (idx = 0; idx < blank_len; ++idx) {
    18a8:	ae 15       	cp	r26, r14
    18aa:	bf 05       	cpc	r27, r15
    18ac:	d9 f7       	brne	.-10     	; 0x18a4 <lcd_init+0x200>
			train_right[blank_len - idx - 1] = train_left[idx];		// x-mirror
		}
	}

	gfx_mono_generic_draw_filled_rect(0, (GFX_MONO_LCD_PAGES - 1) * GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_PIXEL_CLR);
    18ae:	00 e0       	ldi	r16, 0x00	; 0
    18b0:	28 e0       	ldi	r18, 0x08	; 8
    18b2:	40 ef       	ldi	r20, 0xF0	; 240
    18b4:	68 e7       	ldi	r22, 0x78	; 120
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <gfx_mono_generic_draw_filled_rect>
{
	const int cnt = 4;
	const int blank_len = 1 + 15 + cnt * (3 + 8) + 1;  // train length + front + rear spacer
	int		origin = -blank_len;
	int		i = 0;
	int8_t  dx = 1;
    18bc:	33 24       	eor	r3, r3
    18be:	33 94       	inc	r3
static void s_lcd_animation(void)
{
	const int cnt = 4;
	const int blank_len = 1 + 15 + cnt * (3 + 8) + 1;  // train length + front + rear spacer
	int		origin = -blank_len;
	int		i = 0;
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0

static void s_lcd_animation(void)
{
	const int cnt = 4;
	const int blank_len = 1 + 15 + cnt * (3 + 8) + 1;  // train length + front + rear spacer
	int		origin = -blank_len;
    18c4:	0f 2e       	mov	r0, r31
    18c6:	f3 ec       	ldi	r31, 0xC3	; 195
    18c8:	ef 2e       	mov	r14, r31
    18ca:	ff 24       	eor	r15, r15
    18cc:	fa 94       	dec	r15
    18ce:	f0 2d       	mov	r31, r0
	}

	gfx_mono_generic_draw_filled_rect(0, (GFX_MONO_LCD_PAGES - 1) * GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_PIXEL_CLR);

	do {
		if (!(i++ % 6)) {
    18d0:	0f 2e       	mov	r0, r31
    18d2:	f6 e0       	ldi	r31, 0x06	; 6
    18d4:	af 2e       	mov	r10, r31
    18d6:	b1 2c       	mov	r11, r1
    18d8:	f0 2d       	mov	r31, r0
		t = 0.f;
	}

	buf[0] = '0' + (uint8_t)(((int)(t /  10.f)) % 10);
	buf[1] = '0' + (uint8_t)(((int) t         ) % 10);
	buf[2] = ',';
    18da:	0f 2e       	mov	r0, r31
    18dc:	fc e2       	ldi	r31, 0x2C	; 44
    18de:	2f 2e       	mov	r2, r31
    18e0:	f0 2d       	mov	r31, r0
static void s_lcd_test_lines(void)
{
	static int loop = 0;
	uint8_t m = ++loop % 18;
	uint8_t y1 = 10 + m;
	uint8_t y2 = 26 - m;
    18e2:	1a e1       	ldi	r17, 0x1A	; 26
	}

	gfx_mono_generic_draw_filled_rect(0, (GFX_MONO_LCD_PAGES - 1) * GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_PIXEL_CLR);

	do {
		if (!(i++ % 6)) {
    18e4:	6c 01       	movw	r12, r24
    18e6:	ff ef       	ldi	r31, 0xFF	; 255
    18e8:	cf 1a       	sub	r12, r31
    18ea:	df 0a       	sbc	r13, r31
    18ec:	b5 01       	movw	r22, r10
    18ee:	c6 d5       	rcall	.+2956   	; 0x247c <__divmodhi4>
    18f0:	89 2b       	or	r24, r25
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <lcd_init+0x252>
    18f4:	49 c0       	rjmp	.+146    	; 0x1988 <lcd_init+0x2e4>
			origin += dx;
    18f6:	e3 0c       	add	r14, r3
    18f8:	f1 1c       	adc	r15, r1
    18fa:	37 fc       	sbrc	r3, 7
    18fc:	fa 94       	dec	r15

			if (origin <= (-10 - blank_len)) {
    18fe:	2a eb       	ldi	r18, 0xBA	; 186
    1900:	e2 16       	cp	r14, r18
    1902:	2f ef       	ldi	r18, 0xFF	; 255
    1904:	f2 06       	cpc	r15, r18
    1906:	1c f1       	brlt	.+70     	; 0x194e <lcd_init+0x2aa>
				dx = 1;
			} else if (origin >= (GFX_MONO_LCD_WIDTH + 10)) {
    1908:	8a ef       	ldi	r24, 0xFA	; 250
    190a:	e8 16       	cp	r14, r24
    190c:	f1 04       	cpc	r15, r1
    190e:	1c f4       	brge	.+6      	; 0x1916 <lcd_init+0x272>
				dx = -1;
			}

			if (dx < 0) {
    1910:	33 20       	and	r3, r3
    1912:	fc f4       	brge	.+62     	; 0x1952 <lcd_init+0x2ae>
    1914:	02 c0       	rjmp	.+4      	; 0x191a <lcd_init+0x276>
			origin += dx;

			if (origin <= (-10 - blank_len)) {
				dx = 1;
			} else if (origin >= (GFX_MONO_LCD_WIDTH + 10)) {
				dx = -1;
    1916:	33 24       	eor	r3, r3
    1918:	3a 94       	dec	r3
			}

			if (dx < 0) {
				// Draw train left
				if (origin >= 0 && origin < GFX_MONO_LCD_WIDTH) {
    191a:	e0 ef       	ldi	r30, 0xF0	; 240
    191c:	ee 16       	cp	r14, r30
    191e:	f1 04       	cpc	r15, r1
    1920:	30 f4       	brcc	.+12     	; 0x192e <lcd_init+0x28a>
					gfx_mono_lcd_uc1608_put_page(train_left, GFX_MONO_LCD_PAGES - 1, origin, blank_len);				// full width
    1922:	2d e3       	ldi	r18, 0x3D	; 61
    1924:	4e 2d       	mov	r20, r14
    1926:	6f e0       	ldi	r22, 0x0F	; 15
    1928:	c4 01       	movw	r24, r8
    192a:	ce d8       	rcall	.-3684   	; 0xac8 <gfx_mono_lcd_uc1608_put_page>
    192c:	2d c0       	rjmp	.+90     	; 0x1988 <lcd_init+0x2e4>
				} else if (-blank_len < origin && origin < 0) {
    192e:	97 01       	movw	r18, r14
    1930:	24 5c       	subi	r18, 0xC4	; 196
    1932:	3f 4f       	sbci	r19, 0xFF	; 255
    1934:	2c 33       	cpi	r18, 0x3C	; 60
    1936:	31 05       	cpc	r19, r1
    1938:	38 f5       	brcc	.+78     	; 0x1988 <lcd_init+0x2e4>
					gfx_mono_lcd_uc1608_put_page(train_left - origin, GFX_MONO_LCD_PAGES - 1, 0, blank_len + origin);	// left: reduced width
    193a:	2d e3       	ldi	r18, 0x3D	; 61
    193c:	2e 0d       	add	r18, r14
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	6f e0       	ldi	r22, 0x0F	; 15
    1942:	f4 01       	movw	r30, r8
    1944:	ee 19       	sub	r30, r14
    1946:	ff 09       	sbc	r31, r15
    1948:	cf 01       	movw	r24, r30
    194a:	be d8       	rcall	.-3716   	; 0xac8 <gfx_mono_lcd_uc1608_put_page>
    194c:	1d c0       	rjmp	.+58     	; 0x1988 <lcd_init+0x2e4>
	do {
		if (!(i++ % 6)) {
			origin += dx;

			if (origin <= (-10 - blank_len)) {
				dx = 1;
    194e:	33 24       	eor	r3, r3
    1950:	33 94       	inc	r3
					gfx_mono_lcd_uc1608_put_page(train_left - origin, GFX_MONO_LCD_PAGES - 1, 0, blank_len + origin);	// left: reduced width
				}

			} else {
				// Draw train right
				if (origin >= 0 && origin < GFX_MONO_LCD_WIDTH) {
    1952:	f0 ef       	ldi	r31, 0xF0	; 240
    1954:	ef 16       	cp	r14, r31
    1956:	f1 04       	cpc	r15, r1
    1958:	38 f4       	brcc	.+14     	; 0x1968 <lcd_init+0x2c4>
					gfx_mono_lcd_uc1608_put_page(train_right, GFX_MONO_LCD_PAGES - 1, origin, blank_len);				// full width
    195a:	2d e3       	ldi	r18, 0x3D	; 61
    195c:	4e 2d       	mov	r20, r14
    195e:	6f e0       	ldi	r22, 0x0F	; 15
    1960:	89 85       	ldd	r24, Y+9	; 0x09
    1962:	9a 85       	ldd	r25, Y+10	; 0x0a
    1964:	b1 d8       	rcall	.-3742   	; 0xac8 <gfx_mono_lcd_uc1608_put_page>
    1966:	10 c0       	rjmp	.+32     	; 0x1988 <lcd_init+0x2e4>
				} else if (-blank_len < origin && origin < 0) {
    1968:	97 01       	movw	r18, r14
    196a:	24 5c       	subi	r18, 0xC4	; 196
    196c:	3f 4f       	sbci	r19, 0xFF	; 255
    196e:	2c 33       	cpi	r18, 0x3C	; 60
    1970:	31 05       	cpc	r19, r1
    1972:	50 f4       	brcc	.+20     	; 0x1988 <lcd_init+0x2e4>
					gfx_mono_lcd_uc1608_put_page(train_right - origin, GFX_MONO_LCD_PAGES - 1, 0, blank_len + origin);	// left: reduced width
    1974:	2d e3       	ldi	r18, 0x3D	; 61
    1976:	2e 0d       	add	r18, r14
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	6f e0       	ldi	r22, 0x0F	; 15
    197c:	e9 85       	ldd	r30, Y+9	; 0x09
    197e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1980:	ee 19       	sub	r30, r14
    1982:	ff 09       	sbc	r31, r15
    1984:	cf 01       	movw	r24, r30
    1986:	a0 d8       	rcall	.-3776   	; 0xac8 <gfx_mono_lcd_uc1608_put_page>
				}
			}
		}

		if (!(i % 20)) {
    1988:	c6 01       	movw	r24, r12
    198a:	64 e1       	ldi	r22, 0x14	; 20
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	76 d5       	rcall	.+2796   	; 0x247c <__divmodhi4>
    1990:	89 2b       	or	r24, r25
    1992:	09 f0       	breq	.+2      	; 0x1996 <lcd_init+0x2f2>
    1994:	57 c0       	rjmp	.+174    	; 0x1a44 <lcd_init+0x3a0>
static void s_lcd_test_temp(void)
{
	char	buf[7];
	float	t;

	s_task();
    1996:	cc d1       	rcall	.+920    	; 0x1d30 <s_task>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1998:	8f b7       	in	r24, 0x3f	; 63
    199a:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    199c:	f8 94       	cli
	return flags;
    199e:	88 85       	ldd	r24, Y+8	; 0x08

	irqflags_t flags = cpu_irq_save();
	t = g_temp;
    19a0:	40 90 48 01 	lds	r4, 0x0148	; 0x800148 <g_temp>
    19a4:	50 90 49 01 	lds	r5, 0x0149	; 0x800149 <g_temp+0x1>
    19a8:	60 90 4a 01 	lds	r6, 0x014A	; 0x80014a <g_temp+0x2>
    19ac:	70 90 4b 01 	lds	r7, 0x014B	; 0x80014b <g_temp+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    19b0:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	if (t < 0.f) {
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	a9 01       	movw	r20, r18
    19b8:	c3 01       	movw	r24, r6
    19ba:	b2 01       	movw	r22, r4
    19bc:	a9 d3       	rcall	.+1874   	; 0x2110 <__cmpsf2>
    19be:	88 23       	and	r24, r24
    19c0:	1c f4       	brge	.+6      	; 0x19c8 <lcd_init+0x324>
		t = 0.f;
    19c2:	41 2c       	mov	r4, r1
    19c4:	51 2c       	mov	r5, r1
    19c6:	32 01       	movw	r6, r4
	}

	buf[0] = '0' + (uint8_t)(((int)(t /  10.f)) % 10);
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e2       	ldi	r20, 0x20	; 32
    19ce:	51 e4       	ldi	r21, 0x41	; 65
    19d0:	c3 01       	movw	r24, r6
    19d2:	b2 01       	movw	r22, r4
    19d4:	a1 d3       	rcall	.+1858   	; 0x2118 <__divsf3>
    19d6:	08 d4       	rcall	.+2064   	; 0x21e8 <__fixsfsi>
    19d8:	cb 01       	movw	r24, r22
    19da:	6a e0       	ldi	r22, 0x0A	; 10
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	4e d5       	rcall	.+2716   	; 0x247c <__divmodhi4>
    19e0:	80 5d       	subi	r24, 0xD0	; 208
    19e2:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = '0' + (uint8_t)(((int) t         ) % 10);
    19e4:	c3 01       	movw	r24, r6
    19e6:	b2 01       	movw	r22, r4
    19e8:	ff d3       	rcall	.+2046   	; 0x21e8 <__fixsfsi>
    19ea:	cb 01       	movw	r24, r22
    19ec:	6a e0       	ldi	r22, 0x0A	; 10
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	45 d5       	rcall	.+2698   	; 0x247c <__divmodhi4>
    19f2:	80 5d       	subi	r24, 0xD0	; 208
    19f4:	8a 83       	std	Y+2, r24	; 0x02
	buf[2] = ',';
    19f6:	2b 82       	std	Y+3, r2	; 0x03
	buf[3] = '0' + (uint8_t)(((int)(t *  10.f)) % 10);
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e2       	ldi	r20, 0x20	; 32
    19fe:	51 e4       	ldi	r21, 0x41	; 65
    1a00:	c3 01       	movw	r24, r6
    1a02:	b2 01       	movw	r22, r4
    1a04:	d8 d4       	rcall	.+2480   	; 0x23b6 <__mulsf3>
    1a06:	f0 d3       	rcall	.+2016   	; 0x21e8 <__fixsfsi>
    1a08:	cb 01       	movw	r24, r22
    1a0a:	6a e0       	ldi	r22, 0x0A	; 10
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	36 d5       	rcall	.+2668   	; 0x247c <__divmodhi4>
    1a10:	80 5d       	subi	r24, 0xD0	; 208
    1a12:	8c 83       	std	Y+4, r24	; 0x04
	buf[4] = '0' + (uint8_t)(((int)(t * 100.f)) % 10);
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	48 ec       	ldi	r20, 0xC8	; 200
    1a1a:	52 e4       	ldi	r21, 0x42	; 66
    1a1c:	c3 01       	movw	r24, r6
    1a1e:	b2 01       	movw	r22, r4
    1a20:	ca d4       	rcall	.+2452   	; 0x23b6 <__mulsf3>
    1a22:	e2 d3       	rcall	.+1988   	; 0x21e8 <__fixsfsi>
    1a24:	cb 01       	movw	r24, r22
    1a26:	6a e0       	ldi	r22, 0x0A	; 10
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	28 d5       	rcall	.+2640   	; 0x247c <__divmodhi4>
    1a2c:	80 5d       	subi	r24, 0xD0	; 208
    1a2e:	8d 83       	std	Y+5, r24	; 0x05
	buf[5] = 'C';
    1a30:	f3 e4       	ldi	r31, 0x43	; 67
    1a32:	fe 83       	std	Y+6, r31	; 0x06
	buf[6] = 0;
    1a34:	1f 82       	std	Y+7, r1	; 0x07

	gfx_mono_draw_string(buf, 120, 65, &sysfont);
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	31 e0       	ldi	r19, 0x01	; 1
    1a3a:	41 e4       	ldi	r20, 0x41	; 65
    1a3c:	68 e7       	ldi	r22, 0x78	; 120
    1a3e:	ce 01       	movw	r24, r28
    1a40:	01 96       	adiw	r24, 0x01	; 1
    1a42:	2d d9       	rcall	.-3494   	; 0xc9e <gfx_mono_draw_string>


static void s_lcd_test_lines(void)
{
	static int loop = 0;
	uint8_t m = ++loop % 18;
    1a44:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <loop.2696>
    1a48:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <loop.2696+0x1>
    1a4c:	01 96       	adiw	r24, 0x01	; 1
    1a4e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <loop.2696+0x1>
    1a52:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <loop.2696>
    1a56:	62 e1       	ldi	r22, 0x12	; 18
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	10 d5       	rcall	.+2592   	; 0x247c <__divmodhi4>
    1a5c:	38 2f       	mov	r19, r24
	uint8_t y1 = 10 + m;
	uint8_t y2 = 26 - m;

	gfx_mono_generic_draw_line (0, y1, 239, y2, (loop / 18) % 3);
    1a5e:	cb 01       	movw	r24, r22
    1a60:	63 e0       	ldi	r22, 0x03	; 3
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	0b d5       	rcall	.+2582   	; 0x247c <__divmodhi4>
static void s_lcd_test_lines(void)
{
	static int loop = 0;
	uint8_t m = ++loop % 18;
	uint8_t y1 = 10 + m;
	uint8_t y2 = 26 - m;
    1a66:	21 2f       	mov	r18, r17
    1a68:	23 1b       	sub	r18, r19

static void s_lcd_test_lines(void)
{
	static int loop = 0;
	uint8_t m = ++loop % 18;
	uint8_t y1 = 10 + m;
    1a6a:	6a e0       	ldi	r22, 0x0A	; 10
    1a6c:	63 0f       	add	r22, r19
	uint8_t y2 = 26 - m;

	gfx_mono_generic_draw_line (0, y1, 239, y2, (loop / 18) % 3);
    1a6e:	08 2f       	mov	r16, r24
    1a70:	4f ee       	ldi	r20, 0xEF	; 239
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	0e 94 4b 03 	call	0x696	; 0x696 <gfx_mono_generic_draw_line>

	if (loop >= 1024 * 18) {
    1a78:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <loop.2696>
    1a7c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <loop.2696+0x1>
    1a80:	81 15       	cp	r24, r1
    1a82:	98 44       	sbci	r25, 0x48	; 72
    1a84:	24 f0       	brlt	.+8      	; 0x1a8e <lcd_init+0x3ea>
		loop = 0;
    1a86:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <loop.2696+0x1>
    1a8a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <loop.2696>
	irqflags_t flags = cpu_irq_save();
	t = g_temp;
	cpu_irq_restore(flags);

	if (t < 0.f) {
		t = 0.f;
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
		}

		s_lcd_test_lines();

		for (long delay = 1000; delay; --delay)
			nop();
    1a92:	00 00       	nop
    1a94:	2f 5f       	subi	r18, 0xFF	; 255
    1a96:	3f 4f       	sbci	r19, 0xFF	; 255
			s_lcd_test_temp();
		}

		s_lcd_test_lines();

		for (long delay = 1000; delay; --delay)
    1a98:	28 3e       	cpi	r18, 0xE8	; 232
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
    1a9c:	38 07       	cpc	r19, r24
    1a9e:	c9 f7       	brne	.-14     	; 0x1a92 <lcd_init+0x3ee>
	}

	gfx_mono_generic_draw_filled_rect(0, (GFX_MONO_LCD_PAGES - 1) * GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_PIXEL_CLR);

	do {
		if (!(i++ % 6)) {
    1aa0:	c6 01       	movw	r24, r12
    1aa2:	20 cf       	rjmp	.-448    	; 0x18e4 <lcd_init+0x240>
		return 0;													// Return OK

	} else {
		return 1;													// Return failure
	}
}
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	1e bf       	out	0x3e, r17	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	0d bf       	out	0x3d, r16	; 61
    1ab0:	2a 96       	adiw	r28, 0x0a	; 10
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	df 90       	pop	r13
    1aca:	cf 90       	pop	r12
    1acc:	bf 90       	pop	r11
    1ace:	af 90       	pop	r10
    1ad0:	9f 90       	pop	r9
    1ad2:	8f 90       	pop	r8
    1ad4:	7f 90       	pop	r7
    1ad6:	6f 90       	pop	r6
    1ad8:	5f 90       	pop	r5
    1ada:	4f 90       	pop	r4
    1adc:	3f 90       	pop	r3
    1ade:	2f 90       	pop	r2
    1ae0:	08 95       	ret

00001ae2 <s_twcr_ack>:
static uint8_t s_rx_lock = 0;
static uint8_t s_rx_d[8];


static void s_twcr_ack(uint8_t set)
{
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	1f 92       	push	r1
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1aec:	9f b7       	in	r25, 0x3f	; 63
    1aee:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1af0:	f8 94       	cli
	return flags;
    1af2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	if (set) {
    1af4:	88 23       	and	r24, r24
    1af6:	31 f0       	breq	.+12     	; 0x1b04 <s_twcr_ack+0x22>
		TWCR |=   _BV(TWEA);					// ACK
    1af8:	ec eb       	ldi	r30, 0xBC	; 188
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	80 64       	ori	r24, 0x40	; 64
    1b00:	80 83       	st	Z, r24
    1b02:	05 c0       	rjmp	.+10     	; 0x1b0e <s_twcr_ack+0x2c>
	} else {
		TWCR &= ~(_BV(TWEA));					// NACK
    1b04:	ec eb       	ldi	r30, 0xBC	; 188
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	8f 7b       	andi	r24, 0xBF	; 191
    1b0c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b0e:	9f bf       	out	0x3f, r25	; 63
	}

	cpu_irq_restore(flags);
}
    1b10:	0f 90       	pop	r0
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	08 95       	ret

00001b18 <s_twcr_all>:

static void s_twcr_all(uint8_t ctrl)
{
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	1f 92       	push	r1
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b22:	9f b7       	in	r25, 0x3f	; 63
    1b24:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1b26:	f8 94       	cli
	return flags;
    1b28:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	TWCR = ctrl;
    1b2a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b2e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1b30:	0f 90       	pop	r0
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	08 95       	ret

00001b38 <s_twdr>:

static void s_twdr(uint8_t data_o)
{
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	1f 92       	push	r1
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b42:	9f b7       	in	r25, 0x3f	; 63
    1b44:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1b46:	f8 94       	cli
	return flags;
    1b48:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	TWDR = data_o;
    1b4a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b4e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1b50:	0f 90       	pop	r0
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	08 95       	ret

00001b58 <s_twi_tx_done>:
}

static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
    1b58:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <s_tx_next_len>
    1b5c:	22 23       	and	r18, r18
    1b5e:	81 f0       	breq	.+32     	; 0x1b80 <s_twi_tx_done+0x28>
    1b60:	e2 2f       	mov	r30, r18
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	e1 5d       	subi	r30, 0xD1	; 209
    1b66:	fe 4f       	sbci	r31, 0xFE	; 254
    1b68:	8e e2       	ldi	r24, 0x2E	; 46
    1b6a:	91 e0       	ldi	r25, 0x01	; 1
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
			s_tx_d[idx] = s_tx_next_d[idx];
    1b6c:	12 92       	st	-Z, r1
static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
    1b6e:	e8 17       	cp	r30, r24
    1b70:	f9 07       	cpc	r31, r25
    1b72:	e1 f7       	brne	.-8      	; 0x1b6c <s_twi_tx_done+0x14>
			s_tx_d[idx] = s_tx_next_d[idx];
		}
		s_tx_len = s_tx_next_len;
    1b74:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <s_tx_len>
		s_tx_next_len = 0;
    1b78:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <s_tx_next_len>
		s_twdr(0b11100101);						// Start condition
    1b7c:	85 ee       	ldi	r24, 0xE5	; 229
    1b7e:	dc cf       	rjmp	.-72     	; 0x1b38 <s_twdr>
    1b80:	08 95       	ret

00001b82 <__vector_24__bottom>:
	}
}


void __vector_24__bottom(uint8_t tws, uint8_t twd)
{
    1b82:	cf 93       	push	r28
	static uint8_t pos_i	= 0;
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;

	switch(tws) {
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	fc 01       	movw	r30, r24
    1b88:	38 97       	sbiw	r30, 0x08	; 8
    1b8a:	e1 3c       	cpi	r30, 0xC1	; 193
    1b8c:	f1 05       	cpc	r31, r1
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <__vector_24__bottom+0x10>
    1b90:	cc c0       	rjmp	.+408    	; 0x1d2a <__vector_24__bottom+0x1a8>
    1b92:	ec 5c       	subi	r30, 0xCC	; 204
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	85 c4       	rjmp	.+2314   	; 0x24a2 <__tablejump2__>

	/* Master Transmitter Mode */

	case 0x08:									// Start condition transmitted
		s_tx_lock = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <s_tx_lock>
		pos_o = 0;
    1b9e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <pos_o.2504>
	case 0x10:									// Repeated start condition transmitted
	case 0x18:									// SLA+W transmitted and ACK received
		s_twdr(s_tx_d[pos_o++]);
    1ba2:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <pos_o.2504>
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	8e 0f       	add	r24, r30
    1baa:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <pos_o.2504>
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	e2 5d       	subi	r30, 0xD2	; 210
    1bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb4:	80 81       	ld	r24, Z
    1bb6:	c0 df       	rcall	.-128    	; 0x1b38 <s_twdr>
		break;
    1bb8:	b8 c0       	rjmp	.+368    	; 0x1d2a <__vector_24__bottom+0x1a8>

	case 0x20:									// SLA+W transmitted and NACK received
		s_twcr_all(0b10010101);					// Send NACK and STOP
    1bba:	85 e9       	ldi	r24, 0x95	; 149
    1bbc:	ad df       	rcall	.-166    	; 0x1b18 <s_twcr_all>
		break;
    1bbe:	b5 c0       	rjmp	.+362    	; 0x1d2a <__vector_24__bottom+0x1a8>

	case 0x28:									// Data byte sent and ACK received
		if (pos_o < cnt_o) {
    1bc0:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <pos_o.2504>
    1bc4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <cnt_o.2506>
    1bc8:	e8 17       	cp	r30, r24
    1bca:	60 f4       	brcc	.+24     	; 0x1be4 <__vector_24__bottom+0x62>
			s_twdr(s_tx_d[pos_o++]);
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	8e 0f       	add	r24, r30
    1bd0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <pos_o.2504>
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	e2 5d       	subi	r30, 0xD2	; 210
    1bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bda:	80 81       	ld	r24, Z
    1bdc:	ad df       	rcall	.-166    	; 0x1b38 <s_twdr>
			s_twcr_all(0b11000101);				// Send new data byte and ACK send enable
    1bde:	85 ec       	ldi	r24, 0xC5	; 197
    1be0:	9b df       	rcall	.-202    	; 0x1b18 <s_twcr_all>
    1be2:	a3 c0       	rjmp	.+326    	; 0x1d2a <__vector_24__bottom+0x1a8>
		} else {
			s_twcr_all(0b11010101);				// Send STOP and ACK send enable
    1be4:	85 ed       	ldi	r24, 0xD5	; 213
    1be6:	98 df       	rcall	.-208    	; 0x1b18 <s_twcr_all>
			s_tx_lock = 0;
    1be8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <s_tx_lock>
			s_twi_tx_done();					// Message sent
    1bec:	b5 df       	rcall	.-150    	; 0x1b58 <s_twi_tx_done>
    1bee:	9d c0       	rjmp	.+314    	; 0x1d2a <__vector_24__bottom+0x1a8>
		}
		break;

	case 0x30:									// Data byte sent and NACK received
		s_twcr_all(0b10010101);					// Send NACK and STOP
    1bf0:	85 e9       	ldi	r24, 0x95	; 149
    1bf2:	92 df       	rcall	.-220    	; 0x1b18 <s_twcr_all>
		s_tx_lock = 0;
    1bf4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <s_tx_lock>
		s_twi_tx_done();						// Message failure
    1bf8:	af df       	rcall	.-162    	; 0x1b58 <s_twi_tx_done>
		break;
    1bfa:	97 c0       	rjmp	.+302    	; 0x1d2a <__vector_24__bottom+0x1a8>

	case 0x38:									// Arbitration lost
		s_twcr_all(0b11100101);					// Send START (again) and ACK send enable
    1bfc:	85 ee       	ldi	r24, 0xE5	; 229
    1bfe:	8c df       	rcall	.-232    	; 0x1b18 <s_twcr_all>
		break;
    1c00:	94 c0       	rjmp	.+296    	; 0x1d2a <__vector_24__bottom+0x1a8>

	/* Slave Receiver Mode */

	case 0x60:									// SLA+W received and ACK sent
	case 0x68:
		s_rx_lock = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <s_rx_lock>
		s_rx_d[0] = twd;						// Target address
    1c08:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <s_rx_d>
		pos_i = 1;								// Starting of reception
    1c0c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <pos_i.2503>
		break;
    1c10:	8c c0       	rjmp	.+280    	; 0x1d2a <__vector_24__bottom+0x1a8>

	case 0x70:									// GCA received and ACK sent
	case 0x78:
		s_rx_lock = 1;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <s_rx_lock>
		s_rx_d[0] = twd;						// GCA
    1c18:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <s_rx_d>
		pos_i = 1;								// Starting of reception
    1c1c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <pos_i.2503>
		break;
    1c20:	84 c0       	rjmp	.+264    	; 0x1d2a <__vector_24__bottom+0x1a8>

	case 0x80:									// Data after SLA+W received
	case 0x90:
		if (cnt_i == 0b111) {					// Open parameter form
    1c22:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <cnt_i.2505>
    1c26:	87 30       	cpi	r24, 0x07	; 7
    1c28:	61 f4       	brne	.+24     	; 0x1c42 <__vector_24__bottom+0xc0>
			s_rx_d[2] = twd;
    1c2a:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <s_rx_d+0x2>
			if (!s_twi_rcvd_command_open_form(s_rx_d, ++pos_i)) {
    1c2e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <pos_i.2503>
    1c32:	8f 5f       	subi	r24, 0xFF	; 255
    1c34:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <pos_i.2503>
				s_twcr_ack(true);				// ACK
			} else {
				s_twcr_ack(false);				// NACK
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	53 df       	rcall	.-346    	; 0x1ae2 <s_twcr_ack>
				cnt_i = 0;
    1c3c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <cnt_i.2505>
    1c40:	74 c0       	rjmp	.+232    	; 0x1d2a <__vector_24__bottom+0x1a8>
			}

		} else {								// Closed parameter form
			if (pos_i <= 0b111) {
    1c42:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <pos_i.2503>
    1c46:	88 30       	cpi	r24, 0x08	; 8
    1c48:	28 f4       	brcc	.+10     	; 0x1c54 <__vector_24__bottom+0xd2>
				s_rx_d[pos_i] = twd;
    1c4a:	e8 2f       	mov	r30, r24
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	eb 5d       	subi	r30, 0xDB	; 219
    1c50:	fe 4f       	sbci	r31, 0xFE	; 254
    1c52:	60 83       	st	Z, r22
			}
			if (pos_i == 1) {
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	39 f4       	brne	.+14     	; 0x1c66 <__vector_24__bottom+0xe4>
				cnt_i = ((twd >> 5) & 0b111) + 1;
    1c58:	62 95       	swap	r22
    1c5a:	66 95       	lsr	r22
    1c5c:	67 70       	andi	r22, 0x07	; 7
    1c5e:	6f 5f       	subi	r22, 0xFF	; 255
    1c60:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <cnt_i.2505>
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <__vector_24__bottom+0xe8>
			}
			if (pos_i < 0b111) {
    1c66:	87 30       	cpi	r24, 0x07	; 7
    1c68:	18 f4       	brcc	.+6      	; 0x1c70 <__vector_24__bottom+0xee>
				++pos_i;
    1c6a:	8f 5f       	subi	r24, 0xFF	; 255
    1c6c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <pos_i.2503>
			}
			s_twcr_ack(pos_i <= cnt_i);			// ACK - NACK
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <pos_i.2503>
    1c76:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <cnt_i.2505>
    1c7a:	92 17       	cp	r25, r18
    1c7c:	08 f4       	brcc	.+2      	; 0x1c80 <__vector_24__bottom+0xfe>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	30 df       	rcall	.-416    	; 0x1ae2 <s_twcr_ack>
    1c82:	53 c0       	rjmp	.+166    	; 0x1d2a <__vector_24__bottom+0x1a8>
		}
		break;

	case 0x88:									// NACK after last data byte sent
	case 0x98:
		if (cnt_i != 0b111) {
    1c84:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <cnt_i.2505>
    1c88:	87 30       	cpi	r24, 0x07	; 7
    1c8a:	29 f4       	brne	.+10     	; 0x1c96 <__vector_24__bottom+0x114>
			s_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
		} else {
			s_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
    1c8c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <pos_i.2503>
    1c90:	8f 5f       	subi	r24, 0xFF	; 255
    1c92:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <pos_i.2503>
		}
		s_rx_lock = 0;
    1c96:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <s_rx_lock>
		break;
    1c9a:	47 c0       	rjmp	.+142    	; 0x1d2a <__vector_24__bottom+0x1a8>

	case 0xA0:
		s_twcr_all(0b11000101);					// Send nothing
    1c9c:	85 ec       	ldi	r24, 0xC5	; 197
    1c9e:	3c df       	rcall	.-392    	; 0x1b18 <s_twcr_all>
		pos_i = 0;
    1ca0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <pos_i.2503>
		cnt_i = 0;
    1ca4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <cnt_i.2505>
		s_rx_lock = 0;
    1ca8:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <s_rx_lock>
		break;
    1cac:	3e c0       	rjmp	.+124    	; 0x1d2a <__vector_24__bottom+0x1a8>

	/* Slave Transmitter Mode */

	case 0xA8:									// SLA+R received and ACK has been returned
	case 0xB0:
		s_rx_lock = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <s_rx_lock>
		pos_o = 0;
    1cb4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <pos_o.2504>
		s_twdr(cnt_o > pos_o ?  s_rx_d[pos_o++] : 0);
    1cb8:	c0 91 23 01 	lds	r28, 0x0123	; 0x800123 <cnt_o.2506>
    1cbc:	cc 23       	and	r28, r28
    1cbe:	29 f0       	breq	.+10     	; 0x1cca <__vector_24__bottom+0x148>
    1cc0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <pos_o.2504>
    1cc4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <s_rx_d>
    1cc8:	01 c0       	rjmp	.+2      	; 0x1ccc <__vector_24__bottom+0x14a>
    1cca:	8c 2f       	mov	r24, r28
    1ccc:	35 df       	rcall	.-406    	; 0x1b38 <s_twdr>
		s_twcr_ack(cnt_o > pos_o);				// ACK - NACK
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <pos_o.2504>
    1cd4:	9c 17       	cp	r25, r28
    1cd6:	08 f0       	brcs	.+2      	; 0x1cda <__vector_24__bottom+0x158>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	03 df       	rcall	.-506    	; 0x1ae2 <s_twcr_ack>
		break;
    1cdc:	26 c0       	rjmp	.+76     	; 0x1d2a <__vector_24__bottom+0x1a8>

	case 0xB8:									// Data sent and ACK has been returned
		s_twdr(cnt_o > pos_o ?  s_rx_d[pos_o++] : 0);
    1cde:	c0 91 23 01 	lds	r28, 0x0123	; 0x800123 <cnt_o.2506>
    1ce2:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <pos_o.2504>
    1ce6:	ec 17       	cp	r30, r28
    1ce8:	48 f4       	brcc	.+18     	; 0x1cfc <__vector_24__bottom+0x17a>
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	8e 0f       	add	r24, r30
    1cee:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <pos_o.2504>
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	eb 5d       	subi	r30, 0xDB	; 219
    1cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf8:	80 81       	ld	r24, Z
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <__vector_24__bottom+0x17c>
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	1c df       	rcall	.-456    	; 0x1b38 <s_twdr>
		s_twcr_ack(cnt_o > pos_o);				// ACK - NACK
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <pos_o.2504>
    1d06:	9c 17       	cp	r25, r28
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <__vector_24__bottom+0x18a>
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	ea de       	rcall	.-556    	; 0x1ae2 <s_twcr_ack>
		break;
    1d0e:	0d c0       	rjmp	.+26     	; 0x1d2a <__vector_24__bottom+0x1a8>

	case 0xC0:									// Data sent and NACK has been returned
		s_twcr_ack(false);						// NACK
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	e7 de       	rcall	.-562    	; 0x1ae2 <s_twcr_ack>
		pos_o = 0;
    1d14:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <pos_o.2504>
		cnt_o = 0;
    1d18:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <cnt_o.2506>
		s_rx_lock = 0;
    1d1c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <s_rx_lock>
		break;
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <__vector_24__bottom+0x1a8>

	case 0xC8:									// Superfluous ACK by master sent after NACK has been returned
		s_twcr_all(0b11000101);					// Send nothing
    1d22:	85 ec       	ldi	r24, 0xC5	; 197
    1d24:	f9 de       	rcall	.-526    	; 0x1b18 <s_twcr_all>
		s_rx_lock = 0;
    1d26:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <s_rx_lock>
		break;
	}
}
    1d2a:	cf 91       	pop	r28
    1d2c:	08 95       	ret

00001d2e <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    1d2e:	08 95       	ret

00001d30 <s_task>:
/* MAIN section */

void halt(void)
{
	/* MAIN Loop Shutdown */
	runmode = 0;
    1d30:	4f 92       	push	r4
    1d32:	5f 92       	push	r5
    1d34:	6f 92       	push	r6
    1d36:	7f 92       	push	r7
    1d38:	8f 92       	push	r8
    1d3a:	9f 92       	push	r9
    1d3c:	af 92       	push	r10
    1d3e:	bf 92       	push	r11
    1d40:	cf 92       	push	r12
    1d42:	df 92       	push	r13
    1d44:	ef 92       	push	r14
    1d46:	ff 92       	push	r15
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <s_task+0x1e>
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <s_task+0x20>
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	8f b7       	in	r24, 0x3f	; 63
    1d56:	8c 83       	std	Y+4, r24	; 0x04
    1d58:	f8 94       	cli
    1d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5c:	c0 90 54 01 	lds	r12, 0x0154	; 0x800154 <g_adc_ldr>
    1d60:	d0 90 55 01 	lds	r13, 0x0155	; 0x800155 <g_adc_ldr+0x1>
    1d64:	e0 90 56 01 	lds	r14, 0x0156	; 0x800156 <g_adc_ldr+0x2>
    1d68:	f0 90 57 01 	lds	r15, 0x0157	; 0x800157 <g_adc_ldr+0x3>
    1d6c:	40 90 4c 01 	lds	r4, 0x014C	; 0x80014c <g_adc_temp>
    1d70:	50 90 4d 01 	lds	r5, 0x014D	; 0x80014d <g_adc_temp+0x1>
    1d74:	60 90 4e 01 	lds	r6, 0x014E	; 0x80014e <g_adc_temp+0x2>
    1d78:	70 90 4f 01 	lds	r7, 0x014F	; 0x80014f <g_adc_temp+0x3>
    1d7c:	8f bf       	out	0x3f, r24	; 63
    1d7e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <pwm.2556>
    1d82:	8f 5f       	subi	r24, 0xFF	; 255
    1d84:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <pwm.2556>
    1d88:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	c7 01       	movw	r24, r14
    1d96:	b6 01       	movw	r22, r12
    1d98:	0a d3       	rcall	.+1556   	; 0x23ae <__gesf2>
    1d9a:	88 23       	and	r24, r24
    1d9c:	04 f1       	brlt	.+64     	; 0x1dde <s_task+0xae>
    1d9e:	a7 01       	movw	r20, r14
    1da0:	96 01       	movw	r18, r12
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	70 e4       	ldi	r23, 0x40	; 64
    1da6:	8c e9       	ldi	r24, 0x9C	; 156
    1da8:	95 e4       	ldi	r25, 0x45	; 69
    1daa:	b6 d1       	rcall	.+876    	; 0x2118 <__divsf3>
    1dac:	4b 01       	movw	r8, r22
    1dae:	5c 01       	movw	r10, r24
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a e7       	ldi	r20, 0x7A	; 122
    1db6:	54 e4       	ldi	r21, 0x44	; 68
    1db8:	ab d1       	rcall	.+854    	; 0x2110 <__cmpsf2>
    1dba:	88 23       	and	r24, r24
    1dbc:	dc f4       	brge	.+54     	; 0x1df4 <s_task+0xc4>
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	4a e7       	ldi	r20, 0x7A	; 122
    1dc4:	54 e4       	ldi	r21, 0x44	; 68
    1dc6:	c5 01       	movw	r24, r10
    1dc8:	b4 01       	movw	r22, r8
    1dca:	a6 d1       	rcall	.+844    	; 0x2118 <__divsf3>
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	45 e6       	ldi	r20, 0x65	; 101
    1dd2:	53 e4       	ldi	r21, 0x43	; 67
    1dd4:	f0 d2       	rcall	.+1504   	; 0x23b6 <__mulsf3>
    1dd6:	0d d2       	rcall	.+1050   	; 0x21f2 <__fixunssfsi>
    1dd8:	8a e1       	ldi	r24, 0x1A	; 26
    1dda:	86 0f       	add	r24, r22
    1ddc:	0c c0       	rjmp	.+24     	; 0x1df6 <s_task+0xc6>
    1dde:	0f 2e       	mov	r0, r31
    1de0:	81 2c       	mov	r8, r1
    1de2:	f0 e4       	ldi	r31, 0x40	; 64
    1de4:	9f 2e       	mov	r9, r31
    1de6:	fc e1       	ldi	r31, 0x1C	; 28
    1de8:	af 2e       	mov	r10, r31
    1dea:	f6 e4       	ldi	r31, 0x46	; 70
    1dec:	bf 2e       	mov	r11, r31
    1dee:	f0 2d       	mov	r31, r0
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <s_task+0xc6>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	80 92 3f 01 	sts	0x013F, r8	; 0x80013f <g_f_DEBUG31>
    1dfa:	90 92 40 01 	sts	0x0140, r9	; 0x800140 <g_f_DEBUG31+0x1>
    1dfe:	a0 92 41 01 	sts	0x0141, r10	; 0x800141 <g_f_DEBUG31+0x2>
    1e02:	b0 92 42 01 	sts	0x0142, r11	; 0x800142 <g_f_DEBUG31+0x3>
    1e06:	c0 92 3b 01 	sts	0x013B, r12	; 0x80013b <g_f_DEBUG32>
    1e0a:	d0 92 3c 01 	sts	0x013C, r13	; 0x80013c <g_f_DEBUG32+0x1>
    1e0e:	e0 92 3d 01 	sts	0x013D, r14	; 0x80013d <g_f_DEBUG32+0x2>
    1e12:	f0 92 3e 01 	sts	0x013E, r15	; 0x80013e <g_f_DEBUG32+0x3>
    1e16:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <g_u8_DEBUG13>
    1e1a:	8f b7       	in	r24, 0x3f	; 63
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
    1e1e:	f8 94       	cli
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	c0 92 50 01 	sts	0x0150, r12	; 0x800150 <g_adc_ldr_last>
    1e26:	d0 92 51 01 	sts	0x0151, r13	; 0x800151 <g_adc_ldr_last+0x1>
    1e2a:	e0 92 52 01 	sts	0x0152, r14	; 0x800152 <g_adc_ldr_last+0x2>
    1e2e:	f0 92 53 01 	sts	0x0153, r15	; 0x800153 <g_adc_ldr_last+0x3>
    1e32:	8f bf       	out	0x3f, r24	; 63
    1e34:	29 e1       	ldi	r18, 0x19	; 25
    1e36:	37 ec       	ldi	r19, 0xC7	; 199
    1e38:	4f ea       	ldi	r20, 0xAF	; 175
    1e3a:	53 e4       	ldi	r21, 0x43	; 67
    1e3c:	c3 01       	movw	r24, r6
    1e3e:	b2 01       	movw	r22, r4
    1e40:	02 d1       	rcall	.+516    	; 0x2046 <__subsf3>
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 ea       	ldi	r19, 0xA0	; 160
    1e46:	47 e8       	ldi	r20, 0x87	; 135
    1e48:	5f e3       	ldi	r21, 0x3F	; 63
    1e4a:	b5 d2       	rcall	.+1386   	; 0x23b6 <__mulsf3>
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	48 ec       	ldi	r20, 0xC8	; 200
    1e52:	51 e4       	ldi	r21, 0x41	; 65
    1e54:	f9 d0       	rcall	.+498    	; 0x2048 <__addsf3>
    1e56:	6b 01       	movw	r12, r22
    1e58:	7c 01       	movw	r14, r24
    1e5a:	8f b7       	in	r24, 0x3f	; 63
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	f8 94       	cli
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <g_temp_lcd_last>
    1e66:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <g_temp_lcd_last+0x1>
    1e6a:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <g_temp_lcd_last+0x2>
    1e6e:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <g_temp_lcd_last+0x3>
    1e72:	c0 92 48 01 	sts	0x0148, r12	; 0x800148 <g_temp>
    1e76:	d0 92 49 01 	sts	0x0149, r13	; 0x800149 <g_temp+0x1>
    1e7a:	e0 92 4a 01 	sts	0x014A, r14	; 0x80014a <g_temp+0x2>
    1e7e:	f0 92 4b 01 	sts	0x014B, r15	; 0x80014b <g_temp+0x3>
    1e82:	8f bf       	out	0x3f, r24	; 63
    1e84:	c7 01       	movw	r24, r14
    1e86:	b6 01       	movw	r22, r12
    1e88:	de d0       	rcall	.+444    	; 0x2046 <__subsf3>
    1e8a:	ae d1       	rcall	.+860    	; 0x21e8 <__fixsfsi>
    1e8c:	9b 01       	movw	r18, r22
    1e8e:	77 23       	and	r23, r23
    1e90:	24 f4       	brge	.+8      	; 0x1e9a <s_task+0x16a>
    1e92:	22 27       	eor	r18, r18
    1e94:	33 27       	eor	r19, r19
    1e96:	26 1b       	sub	r18, r22
    1e98:	37 0b       	sbc	r19, r23
    1e9a:	b9 01       	movw	r22, r18
    1e9c:	33 0f       	add	r19, r19
    1e9e:	88 0b       	sbc	r24, r24
    1ea0:	99 0b       	sbc	r25, r25
    1ea2:	d5 d1       	rcall	.+938    	; 0x224e <__floatsisf>
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e8       	ldi	r20, 0x80	; 128
    1eaa:	5f e3       	ldi	r21, 0x3F	; 63
    1eac:	80 d2       	rcall	.+1280   	; 0x23ae <__gesf2>
    1eae:	18 16       	cp	r1, r24
    1eb0:	6c f4       	brge	.+26     	; 0x1ecc <s_task+0x19c>
    1eb2:	8f b7       	in	r24, 0x3f	; 63
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
    1eb6:	f8 94       	cli
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	c0 92 44 01 	sts	0x0144, r12	; 0x800144 <g_temp_lcd_last>
    1ebe:	d0 92 45 01 	sts	0x0145, r13	; 0x800145 <g_temp_lcd_last+0x1>
    1ec2:	e0 92 46 01 	sts	0x0146, r14	; 0x800146 <g_temp_lcd_last+0x2>
    1ec6:	f0 92 47 01 	sts	0x0147, r15	; 0x800147 <g_temp_lcd_last+0x3>
    1eca:	8f bf       	out	0x3f, r24	; 63
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	df 91       	pop	r29
    1ed6:	cf 91       	pop	r28
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	bf 90       	pop	r11
    1ee2:	af 90       	pop	r10
    1ee4:	9f 90       	pop	r9
    1ee6:	8f 90       	pop	r8
    1ee8:	7f 90       	pop	r7
    1eea:	6f 90       	pop	r6
    1eec:	5f 90       	pop	r5
    1eee:	4f 90       	pop	r4
    1ef0:	08 95       	ret

00001ef2 <main>:
}

int main (void)
{
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	1f 92       	push	r1
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts,
	 * most critical pins are handled first.
	 */

	PORTC = 0b01111110;		// PC0: LDR-ADC in-NoPU, PC1: SW_I in-PU, PC2: SW_Q in-PU, PC3: LCD-CS out-HI
    1efc:	8e e7       	ldi	r24, 0x7E	; 126
    1efe:	88 b9       	out	0x08, r24	; 8
	DDRC  = 0b00001000;		// PC4: I2C-SDA in-PU-AF-TWI, PC5: I2C-SCL in-PU-AF-TWI, PC6: RESET in-PU, PC7: -
    1f00:	88 e0       	ldi	r24, 0x08	; 8
    1f02:	87 b9       	out	0x07, r24	; 7

	PORTB = 0b00010100;		// PB0: LCD-CD out-LO, PB1: AUDIO out-AF-OC1A, PB2: SW_P in-PU, PB3: LCDBL out-AF-OC2A,
    1f04:	84 e1       	ldi	r24, 0x14	; 20
    1f06:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0b11111011;		// PB4: LCD-R/!W out-HI, PB5: LCD-EN out-LO, PB6: LEDRD out-LO, LEDGN out-LO
    1f08:	8b ef       	ldi	r24, 0xFB	; 251
    1f0a:	84 b9       	out	0x04, r24	; 4

	PORTD = 0xff;			// PD0..PD7: LCD-D0..LCD-D7 in-PU
    1f0c:	8f ef       	ldi	r24, 0xFF	; 255
    1f0e:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x00;
    1f10:	1a b8       	out	0x0a, r1	; 10

	// Analog input: Digital Disable Register
	DIDR0 = 0b00000001;		// PC0: LDR-ADC
    1f12:	0f 2e       	mov	r0, r31
    1f14:	fe e7       	ldi	r31, 0x7E	; 126
    1f16:	ef 2e       	mov	r14, r31
    1f18:	f1 2c       	mov	r15, r1
    1f1a:	f0 2d       	mov	r31, r0
    1f1c:	11 e0       	ldi	r17, 0x01	; 1
    1f1e:	f7 01       	movw	r30, r14
    1f20:	10 83       	st	Z, r17

	/* Rapid I/O settings */
	s_io_preinit();

	/* Init of sub-modules */
	sysclk_init();	PRR = 0b11101011;			// For debugging this module has to be powered on, again
    1f22:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <sysclk_init>
    1f26:	8b ee       	ldi	r24, 0xEB	; 235
    1f28:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
static void s_tc_init(void)
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts. */

	/* Timer Synchronous Mode - prepare for  s_tc_start(void) */
	GTCCR = _BV(TSM)							// Timer Synchronous Mode active
    1f2c:	03 e8       	ldi	r16, 0x83	; 131
    1f2e:	03 bd       	out	0x23, r16	; 35
	{
	}

	/* TC1 - OC1A: Audio output @ 16-bit counter PWM, used: 10-bit resolution - overflows with 15625 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    1f30:	68 e0       	ldi	r22, 0x08	; 8
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	0e 94 74 02 	call	0x4e8	; 0x4e8 <sysclk_enable_module>

		TCCR1A  = (0b10  << COM1A0)		 		// HI --> LO when compare value is reached - non-inverted PWM mode
    1f38:	82 e8       	ldi	r24, 0x82	; 130
    1f3a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				| (0b10  << WGM10);				// WGM: 0b0110 = Fast PWM 9 bit

		TCCR1B  = ( 0b01 << WGM12)
    1f3e:	89 e0       	ldi	r24, 0x09	; 9
    1f40:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
				| (0b001 << CS10);				// CLKio DIV1 = 8 MHz

		TCNT1H  = 0b00000000           ;		// Clear current value for synchronous start (when restarting without reset)
    1f44:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		barrier();
		TCNT1L	=            0b00000000;
    1f48:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

		OCR1AH  =        0b1           ;		// Mid-range compare value for zero audio output
    1f4c:	10 93 89 00 	sts	0x0089, r17	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL  =            0b00000000;
    1f50:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

		TIMSK1  = 0b00000000;					// No interrupts (when restarting without reset)
    1f54:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		TIFR1   = 0b00100111;					// Clear all flags (when restarting without reset)
    1f58:	87 e2       	ldi	r24, 0x27	; 39
    1f5a:	86 bb       	out	0x16, r24	; 22
	}

	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    1f5c:	60 e4       	ldi	r22, 0x40	; 64
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	0e 94 74 02 	call	0x4e8	; 0x4e8 <sysclk_enable_module>

		TCCR2A  = (0b10  << COM2A0)				// HI --> LO when compare value is reached - non-inverted PWM mode
    1f64:	00 93 b0 00 	sts	0x00B0, r16	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				| (0b11  << WGM20);				// WGM: 0b011 = Fast PWM mode 8 bit

		TCCR2B  = ( 0b0  << WGM22)
    1f68:	87 e0       	ldi	r24, 0x07	; 7
    1f6a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
				| (0b111 << CS20);				// CLKio DIV 1024 = 15625 Hz

		TCNT2   = 0;							// Clear current value for synchronous start (when restarting without reset)
    1f6e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

		OCR2A   = 0x40;							// LCD backlight dimmed down to 25% 
    1f72:	90 e4       	ldi	r25, 0x40	; 64
    1f74:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

		TIMSK2  = 0b00000000;					// No interrupts (when restarting without reset)
    1f78:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		TIFR2   = 0b00000111;					// Clear all flags (when restarting without reset)
    1f7c:	87 bb       	out	0x17, r24	; 23

		ASSR    = 0;							// No async. TOSC1 mode
    1f7e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
}


static void s_adc_init(void)
{
	sysclk_enable_module(POWER_RED_REG0, PRADC_bm);	// enable ADC sub-module
    1f82:	61 e0       	ldi	r22, 0x01	; 1
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	0e 94 74 02 	call	0x4e8	; 0x4e8 <sysclk_enable_module>
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    1f8a:	f7 01       	movw	r30, r14
    1f8c:	10 83       	st	Z, r17
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    1f8e:	ea e7       	ldi	r30, 0x7A	; 122
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	87 e8       	ldi	r24, 0x87	; 135
    1f94:	80 83       	st	Z, r24
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    1f96:	80 ec       	ldi	r24, 0xC0	; 192
    1f98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	adc_disable_digital_inputs(_BV(ADC0D));		// disable the digital input on the ADC0 port

	adc_init(ADC_PRESCALER_DIV128);
	adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);

	ADCSRA |= _BV(ADIF);						// clear interrupt status bit by setting it to clear
    1f9c:	80 81       	ld	r24, Z
    1f9e:	80 61       	ori	r24, 0x10	; 16
    1fa0:	80 83       	st	Z, r24
}

/*  \brief Enable ADC interrupt */
static inline void adc_enable_interrupt(void)
{
	ADCSRA |= (1 << ADIE);
    1fa2:	80 81       	ld	r24, Z
    1fa4:	88 60       	ori	r24, 0x08	; 8
    1fa6:	80 83       	st	Z, r24
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    1fa8:	ab e7       	ldi	r26, 0x7B	; 123
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	8c 91       	ld	r24, X
    1fae:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
    1fb0:	86 60       	ori	r24, 0x06	; 6
	ADC_ADTS_REG = temp;
    1fb2:	8c 93       	st	X, r24
}

/*  \brief Enable ADC Auto Trigger */
static inline void adc_enable_autotrigger(void)
{
	ADCSRA |= (1 << ADATE);
    1fb4:	80 81       	ld	r24, Z
    1fb6:	80 62       	ori	r24, 0x20	; 32
    1fb8:	80 83       	st	Z, r24
	ioport_init();
	s_tc_init();
	s_adc_init();

	/* I/O pins go active here */
	board_init();
    1fba:	b9 de       	rcall	.-654    	; 0x1d2e <board_init>
//@}
static inline reset_cause_t reset_cause_get_causes(void)
{
#if (MEGA_XX4 ||MEGA_XX4_A || MEGA_XX8 || MEGA_XX8_A || \
	MEGA_XX || MEGA_XX_UN2 || MEGA_XX0_1 || MEGA_RF || MEGA_UNCATEGORIZED) && !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t temp_mcsr = MCUSR ;
    1fbc:	84 b7       	in	r24, 0x34	; 52
    1fbe:	98 2f       	mov	r25, r24
    1fc0:	97 70       	andi	r25, 0x07	; 7

	reset_cause_t rc = reset_cause_get_causes();
	if (rc & CHIP_RESET_CAUSE_EXTRST	||
		rc & CHIP_RESET_CAUSE_BOD_CPU	||
    1fc2:	11 f4       	brne	.+4      	; 0x1fc8 <main+0xd6>
		rc & CHIP_RESET_CAUSE_POR		||
    1fc4:	81 11       	cpse	r24, r1
    1fc6:	34 c0       	rjmp	.+104    	; 0x2030 <main+0x13e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1fc8:	8f b7       	in	r24, 0x3f	; 63
    1fca:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1fcc:	f8 94       	cli
	return flags;
    1fce:	89 81       	ldd	r24, Y+1	; 0x01

static void s_reset_global_vars(void)
{
	irqflags_t flags	= cpu_irq_save();

	g_adc_state			= ADC_STATE_PRE_LDR;
    1fd0:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <g_adc_state>
	g_adc_ldr			= 0.f;
    1fd4:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <g_adc_ldr>
    1fd8:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <g_adc_ldr+0x1>
    1fdc:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <g_adc_ldr+0x2>
    1fe0:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <g_adc_ldr+0x3>
	g_adc_ldr_last		= 0.f;
    1fe4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <g_adc_ldr_last>
    1fe8:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <g_adc_ldr_last+0x1>
    1fec:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <g_adc_ldr_last+0x2>
    1ff0:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <g_adc_ldr_last+0x3>
	g_adc_temp			= 350.f;
    1ff4:	40 e0       	ldi	r20, 0x00	; 0
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	6f ea       	ldi	r22, 0xAF	; 175
    1ffa:	73 e4       	ldi	r23, 0x43	; 67
    1ffc:	40 93 4c 01 	sts	0x014C, r20	; 0x80014c <g_adc_temp>
    2000:	50 93 4d 01 	sts	0x014D, r21	; 0x80014d <g_adc_temp+0x1>
    2004:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <g_adc_temp+0x2>
    2008:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <g_adc_temp+0x3>
	g_temp				= 0.f;
    200c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <g_temp>
    2010:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <g_temp+0x1>
    2014:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <g_temp+0x2>
    2018:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <g_temp+0x3>
	g_temp_lcd_last		= 0.f;
    201c:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <g_temp_lcd_last>
    2020:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <g_temp_lcd_last+0x1>
    2024:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <g_temp_lcd_last+0x2>
    2028:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <g_temp_lcd_last+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    202c:	8f bf       	out	0x3f, r24	; 63
    202e:	03 c0       	rjmp	.+6      	; 0x2036 <main+0x144>
		rc & CHIP_RESET_CAUSE_POR		||
		!rc) {
		s_reset_global_vars();
	} else {
		/* DEBUG */
		asm_break();
    2030:	0e 94 78 06 	call	0xcf0	; 0xcf0 <asm_break>
		nop();
    2034:	00 00       	nop
	}

	//s_twi_init();

	/* All interrupt sources prepared here - IRQ activation */
	cpu_irq_enable();
    2036:	78 94       	sei
	/* TC0: not in use */
	/* TC1: Audio output @ 16-bit counter PWM, used: 10-bit resolution */
	/* TC2: LCD backlight w/ 8-bit resolution */
	{
		/* Timer Synchronous Mode - trigger */
		GTCCR = 0;								// trigger the sync for all counters
    2038:	13 bc       	out	0x23, r1	; 35

	/* Start of sub-modules */
	s_tc_start();								// All clocks and PWM timers start here

	/* Initialize external components */
	lcd_init();
    203a:	34 db       	rcall	.-2456   	; 0x16a4 <lcd_init>

	/* main loop */
	runmode = 1;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <runmode>
    while (runmode) {
	    s_task();
    2042:	76 de       	rcall	.-788    	; 0x1d30 <s_task>
    2044:	fe cf       	rjmp	.-4      	; 0x2042 <main+0x150>

00002046 <__subsf3>:
    2046:	50 58       	subi	r21, 0x80	; 128

00002048 <__addsf3>:
    2048:	bb 27       	eor	r27, r27
    204a:	aa 27       	eor	r26, r26
    204c:	0e d0       	rcall	.+28     	; 0x206a <__addsf3x>
    204e:	75 c1       	rjmp	.+746    	; 0x233a <__fp_round>
    2050:	66 d1       	rcall	.+716    	; 0x231e <__fp_pscA>
    2052:	30 f0       	brcs	.+12     	; 0x2060 <__addsf3+0x18>
    2054:	6b d1       	rcall	.+726    	; 0x232c <__fp_pscB>
    2056:	20 f0       	brcs	.+8      	; 0x2060 <__addsf3+0x18>
    2058:	31 f4       	brne	.+12     	; 0x2066 <__addsf3+0x1e>
    205a:	9f 3f       	cpi	r25, 0xFF	; 255
    205c:	11 f4       	brne	.+4      	; 0x2062 <__addsf3+0x1a>
    205e:	1e f4       	brtc	.+6      	; 0x2066 <__addsf3+0x1e>
    2060:	5b c1       	rjmp	.+694    	; 0x2318 <__fp_nan>
    2062:	0e f4       	brtc	.+2      	; 0x2066 <__addsf3+0x1e>
    2064:	e0 95       	com	r30
    2066:	e7 fb       	bst	r30, 7
    2068:	51 c1       	rjmp	.+674    	; 0x230c <__fp_inf>

0000206a <__addsf3x>:
    206a:	e9 2f       	mov	r30, r25
    206c:	77 d1       	rcall	.+750    	; 0x235c <__fp_split3>
    206e:	80 f3       	brcs	.-32     	; 0x2050 <__addsf3+0x8>
    2070:	ba 17       	cp	r27, r26
    2072:	62 07       	cpc	r22, r18
    2074:	73 07       	cpc	r23, r19
    2076:	84 07       	cpc	r24, r20
    2078:	95 07       	cpc	r25, r21
    207a:	18 f0       	brcs	.+6      	; 0x2082 <__addsf3x+0x18>
    207c:	71 f4       	brne	.+28     	; 0x209a <__addsf3x+0x30>
    207e:	9e f5       	brtc	.+102    	; 0x20e6 <__addsf3x+0x7c>
    2080:	8f c1       	rjmp	.+798    	; 0x23a0 <__fp_zero>
    2082:	0e f4       	brtc	.+2      	; 0x2086 <__addsf3x+0x1c>
    2084:	e0 95       	com	r30
    2086:	0b 2e       	mov	r0, r27
    2088:	ba 2f       	mov	r27, r26
    208a:	a0 2d       	mov	r26, r0
    208c:	0b 01       	movw	r0, r22
    208e:	b9 01       	movw	r22, r18
    2090:	90 01       	movw	r18, r0
    2092:	0c 01       	movw	r0, r24
    2094:	ca 01       	movw	r24, r20
    2096:	a0 01       	movw	r20, r0
    2098:	11 24       	eor	r1, r1
    209a:	ff 27       	eor	r31, r31
    209c:	59 1b       	sub	r21, r25
    209e:	99 f0       	breq	.+38     	; 0x20c6 <__addsf3x+0x5c>
    20a0:	59 3f       	cpi	r21, 0xF9	; 249
    20a2:	50 f4       	brcc	.+20     	; 0x20b8 <__addsf3x+0x4e>
    20a4:	50 3e       	cpi	r21, 0xE0	; 224
    20a6:	68 f1       	brcs	.+90     	; 0x2102 <__addsf3x+0x98>
    20a8:	1a 16       	cp	r1, r26
    20aa:	f0 40       	sbci	r31, 0x00	; 0
    20ac:	a2 2f       	mov	r26, r18
    20ae:	23 2f       	mov	r18, r19
    20b0:	34 2f       	mov	r19, r20
    20b2:	44 27       	eor	r20, r20
    20b4:	58 5f       	subi	r21, 0xF8	; 248
    20b6:	f3 cf       	rjmp	.-26     	; 0x209e <__addsf3x+0x34>
    20b8:	46 95       	lsr	r20
    20ba:	37 95       	ror	r19
    20bc:	27 95       	ror	r18
    20be:	a7 95       	ror	r26
    20c0:	f0 40       	sbci	r31, 0x00	; 0
    20c2:	53 95       	inc	r21
    20c4:	c9 f7       	brne	.-14     	; 0x20b8 <__addsf3x+0x4e>
    20c6:	7e f4       	brtc	.+30     	; 0x20e6 <__addsf3x+0x7c>
    20c8:	1f 16       	cp	r1, r31
    20ca:	ba 0b       	sbc	r27, r26
    20cc:	62 0b       	sbc	r22, r18
    20ce:	73 0b       	sbc	r23, r19
    20d0:	84 0b       	sbc	r24, r20
    20d2:	ba f0       	brmi	.+46     	; 0x2102 <__addsf3x+0x98>
    20d4:	91 50       	subi	r25, 0x01	; 1
    20d6:	a1 f0       	breq	.+40     	; 0x2100 <__addsf3x+0x96>
    20d8:	ff 0f       	add	r31, r31
    20da:	bb 1f       	adc	r27, r27
    20dc:	66 1f       	adc	r22, r22
    20de:	77 1f       	adc	r23, r23
    20e0:	88 1f       	adc	r24, r24
    20e2:	c2 f7       	brpl	.-16     	; 0x20d4 <__addsf3x+0x6a>
    20e4:	0e c0       	rjmp	.+28     	; 0x2102 <__addsf3x+0x98>
    20e6:	ba 0f       	add	r27, r26
    20e8:	62 1f       	adc	r22, r18
    20ea:	73 1f       	adc	r23, r19
    20ec:	84 1f       	adc	r24, r20
    20ee:	48 f4       	brcc	.+18     	; 0x2102 <__addsf3x+0x98>
    20f0:	87 95       	ror	r24
    20f2:	77 95       	ror	r23
    20f4:	67 95       	ror	r22
    20f6:	b7 95       	ror	r27
    20f8:	f7 95       	ror	r31
    20fa:	9e 3f       	cpi	r25, 0xFE	; 254
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <__addsf3x+0x96>
    20fe:	b3 cf       	rjmp	.-154    	; 0x2066 <__addsf3+0x1e>
    2100:	93 95       	inc	r25
    2102:	88 0f       	add	r24, r24
    2104:	08 f0       	brcs	.+2      	; 0x2108 <__addsf3x+0x9e>
    2106:	99 27       	eor	r25, r25
    2108:	ee 0f       	add	r30, r30
    210a:	97 95       	ror	r25
    210c:	87 95       	ror	r24
    210e:	08 95       	ret

00002110 <__cmpsf2>:
    2110:	d9 d0       	rcall	.+434    	; 0x22c4 <__fp_cmp>
    2112:	08 f4       	brcc	.+2      	; 0x2116 <__cmpsf2+0x6>
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	08 95       	ret

00002118 <__divsf3>:
    2118:	0c d0       	rcall	.+24     	; 0x2132 <__divsf3x>
    211a:	0f c1       	rjmp	.+542    	; 0x233a <__fp_round>
    211c:	07 d1       	rcall	.+526    	; 0x232c <__fp_pscB>
    211e:	40 f0       	brcs	.+16     	; 0x2130 <__divsf3+0x18>
    2120:	fe d0       	rcall	.+508    	; 0x231e <__fp_pscA>
    2122:	30 f0       	brcs	.+12     	; 0x2130 <__divsf3+0x18>
    2124:	21 f4       	brne	.+8      	; 0x212e <__divsf3+0x16>
    2126:	5f 3f       	cpi	r21, 0xFF	; 255
    2128:	19 f0       	breq	.+6      	; 0x2130 <__divsf3+0x18>
    212a:	f0 c0       	rjmp	.+480    	; 0x230c <__fp_inf>
    212c:	51 11       	cpse	r21, r1
    212e:	39 c1       	rjmp	.+626    	; 0x23a2 <__fp_szero>
    2130:	f3 c0       	rjmp	.+486    	; 0x2318 <__fp_nan>

00002132 <__divsf3x>:
    2132:	14 d1       	rcall	.+552    	; 0x235c <__fp_split3>
    2134:	98 f3       	brcs	.-26     	; 0x211c <__divsf3+0x4>

00002136 <__divsf3_pse>:
    2136:	99 23       	and	r25, r25
    2138:	c9 f3       	breq	.-14     	; 0x212c <__divsf3+0x14>
    213a:	55 23       	and	r21, r21
    213c:	b1 f3       	breq	.-20     	; 0x212a <__divsf3+0x12>
    213e:	95 1b       	sub	r25, r21
    2140:	55 0b       	sbc	r21, r21
    2142:	bb 27       	eor	r27, r27
    2144:	aa 27       	eor	r26, r26
    2146:	62 17       	cp	r22, r18
    2148:	73 07       	cpc	r23, r19
    214a:	84 07       	cpc	r24, r20
    214c:	38 f0       	brcs	.+14     	; 0x215c <__divsf3_pse+0x26>
    214e:	9f 5f       	subi	r25, 0xFF	; 255
    2150:	5f 4f       	sbci	r21, 0xFF	; 255
    2152:	22 0f       	add	r18, r18
    2154:	33 1f       	adc	r19, r19
    2156:	44 1f       	adc	r20, r20
    2158:	aa 1f       	adc	r26, r26
    215a:	a9 f3       	breq	.-22     	; 0x2146 <__divsf3_pse+0x10>
    215c:	33 d0       	rcall	.+102    	; 0x21c4 <__divsf3_pse+0x8e>
    215e:	0e 2e       	mov	r0, r30
    2160:	3a f0       	brmi	.+14     	; 0x2170 <__divsf3_pse+0x3a>
    2162:	e0 e8       	ldi	r30, 0x80	; 128
    2164:	30 d0       	rcall	.+96     	; 0x21c6 <__divsf3_pse+0x90>
    2166:	91 50       	subi	r25, 0x01	; 1
    2168:	50 40       	sbci	r21, 0x00	; 0
    216a:	e6 95       	lsr	r30
    216c:	00 1c       	adc	r0, r0
    216e:	ca f7       	brpl	.-14     	; 0x2162 <__divsf3_pse+0x2c>
    2170:	29 d0       	rcall	.+82     	; 0x21c4 <__divsf3_pse+0x8e>
    2172:	fe 2f       	mov	r31, r30
    2174:	27 d0       	rcall	.+78     	; 0x21c4 <__divsf3_pse+0x8e>
    2176:	66 0f       	add	r22, r22
    2178:	77 1f       	adc	r23, r23
    217a:	88 1f       	adc	r24, r24
    217c:	bb 1f       	adc	r27, r27
    217e:	26 17       	cp	r18, r22
    2180:	37 07       	cpc	r19, r23
    2182:	48 07       	cpc	r20, r24
    2184:	ab 07       	cpc	r26, r27
    2186:	b0 e8       	ldi	r27, 0x80	; 128
    2188:	09 f0       	breq	.+2      	; 0x218c <__divsf3_pse+0x56>
    218a:	bb 0b       	sbc	r27, r27
    218c:	80 2d       	mov	r24, r0
    218e:	bf 01       	movw	r22, r30
    2190:	ff 27       	eor	r31, r31
    2192:	93 58       	subi	r25, 0x83	; 131
    2194:	5f 4f       	sbci	r21, 0xFF	; 255
    2196:	2a f0       	brmi	.+10     	; 0x21a2 <__divsf3_pse+0x6c>
    2198:	9e 3f       	cpi	r25, 0xFE	; 254
    219a:	51 05       	cpc	r21, r1
    219c:	68 f0       	brcs	.+26     	; 0x21b8 <__divsf3_pse+0x82>
    219e:	b6 c0       	rjmp	.+364    	; 0x230c <__fp_inf>
    21a0:	00 c1       	rjmp	.+512    	; 0x23a2 <__fp_szero>
    21a2:	5f 3f       	cpi	r21, 0xFF	; 255
    21a4:	ec f3       	brlt	.-6      	; 0x21a0 <__divsf3_pse+0x6a>
    21a6:	98 3e       	cpi	r25, 0xE8	; 232
    21a8:	dc f3       	brlt	.-10     	; 0x21a0 <__divsf3_pse+0x6a>
    21aa:	86 95       	lsr	r24
    21ac:	77 95       	ror	r23
    21ae:	67 95       	ror	r22
    21b0:	b7 95       	ror	r27
    21b2:	f7 95       	ror	r31
    21b4:	9f 5f       	subi	r25, 0xFF	; 255
    21b6:	c9 f7       	brne	.-14     	; 0x21aa <__divsf3_pse+0x74>
    21b8:	88 0f       	add	r24, r24
    21ba:	91 1d       	adc	r25, r1
    21bc:	96 95       	lsr	r25
    21be:	87 95       	ror	r24
    21c0:	97 f9       	bld	r25, 7
    21c2:	08 95       	ret
    21c4:	e1 e0       	ldi	r30, 0x01	; 1
    21c6:	66 0f       	add	r22, r22
    21c8:	77 1f       	adc	r23, r23
    21ca:	88 1f       	adc	r24, r24
    21cc:	bb 1f       	adc	r27, r27
    21ce:	62 17       	cp	r22, r18
    21d0:	73 07       	cpc	r23, r19
    21d2:	84 07       	cpc	r24, r20
    21d4:	ba 07       	cpc	r27, r26
    21d6:	20 f0       	brcs	.+8      	; 0x21e0 <__divsf3_pse+0xaa>
    21d8:	62 1b       	sub	r22, r18
    21da:	73 0b       	sbc	r23, r19
    21dc:	84 0b       	sbc	r24, r20
    21de:	ba 0b       	sbc	r27, r26
    21e0:	ee 1f       	adc	r30, r30
    21e2:	88 f7       	brcc	.-30     	; 0x21c6 <__divsf3_pse+0x90>
    21e4:	e0 95       	com	r30
    21e6:	08 95       	ret

000021e8 <__fixsfsi>:
    21e8:	04 d0       	rcall	.+8      	; 0x21f2 <__fixunssfsi>
    21ea:	68 94       	set
    21ec:	b1 11       	cpse	r27, r1
    21ee:	d9 c0       	rjmp	.+434    	; 0x23a2 <__fp_szero>
    21f0:	08 95       	ret

000021f2 <__fixunssfsi>:
    21f2:	bc d0       	rcall	.+376    	; 0x236c <__fp_splitA>
    21f4:	88 f0       	brcs	.+34     	; 0x2218 <__fixunssfsi+0x26>
    21f6:	9f 57       	subi	r25, 0x7F	; 127
    21f8:	90 f0       	brcs	.+36     	; 0x221e <__fixunssfsi+0x2c>
    21fa:	b9 2f       	mov	r27, r25
    21fc:	99 27       	eor	r25, r25
    21fe:	b7 51       	subi	r27, 0x17	; 23
    2200:	a0 f0       	brcs	.+40     	; 0x222a <__fixunssfsi+0x38>
    2202:	d1 f0       	breq	.+52     	; 0x2238 <__fixunssfsi+0x46>
    2204:	66 0f       	add	r22, r22
    2206:	77 1f       	adc	r23, r23
    2208:	88 1f       	adc	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	1a f0       	brmi	.+6      	; 0x2214 <__fixunssfsi+0x22>
    220e:	ba 95       	dec	r27
    2210:	c9 f7       	brne	.-14     	; 0x2204 <__fixunssfsi+0x12>
    2212:	12 c0       	rjmp	.+36     	; 0x2238 <__fixunssfsi+0x46>
    2214:	b1 30       	cpi	r27, 0x01	; 1
    2216:	81 f0       	breq	.+32     	; 0x2238 <__fixunssfsi+0x46>
    2218:	c3 d0       	rcall	.+390    	; 0x23a0 <__fp_zero>
    221a:	b1 e0       	ldi	r27, 0x01	; 1
    221c:	08 95       	ret
    221e:	c0 c0       	rjmp	.+384    	; 0x23a0 <__fp_zero>
    2220:	67 2f       	mov	r22, r23
    2222:	78 2f       	mov	r23, r24
    2224:	88 27       	eor	r24, r24
    2226:	b8 5f       	subi	r27, 0xF8	; 248
    2228:	39 f0       	breq	.+14     	; 0x2238 <__fixunssfsi+0x46>
    222a:	b9 3f       	cpi	r27, 0xF9	; 249
    222c:	cc f3       	brlt	.-14     	; 0x2220 <__fixunssfsi+0x2e>
    222e:	86 95       	lsr	r24
    2230:	77 95       	ror	r23
    2232:	67 95       	ror	r22
    2234:	b3 95       	inc	r27
    2236:	d9 f7       	brne	.-10     	; 0x222e <__fixunssfsi+0x3c>
    2238:	3e f4       	brtc	.+14     	; 0x2248 <__fixunssfsi+0x56>
    223a:	90 95       	com	r25
    223c:	80 95       	com	r24
    223e:	70 95       	com	r23
    2240:	61 95       	neg	r22
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	8f 4f       	sbci	r24, 0xFF	; 255
    2246:	9f 4f       	sbci	r25, 0xFF	; 255
    2248:	08 95       	ret

0000224a <__floatunsisf>:
    224a:	e8 94       	clt
    224c:	09 c0       	rjmp	.+18     	; 0x2260 <__floatsisf+0x12>

0000224e <__floatsisf>:
    224e:	97 fb       	bst	r25, 7
    2250:	3e f4       	brtc	.+14     	; 0x2260 <__floatsisf+0x12>
    2252:	90 95       	com	r25
    2254:	80 95       	com	r24
    2256:	70 95       	com	r23
    2258:	61 95       	neg	r22
    225a:	7f 4f       	sbci	r23, 0xFF	; 255
    225c:	8f 4f       	sbci	r24, 0xFF	; 255
    225e:	9f 4f       	sbci	r25, 0xFF	; 255
    2260:	99 23       	and	r25, r25
    2262:	a9 f0       	breq	.+42     	; 0x228e <__floatsisf+0x40>
    2264:	f9 2f       	mov	r31, r25
    2266:	96 e9       	ldi	r25, 0x96	; 150
    2268:	bb 27       	eor	r27, r27
    226a:	93 95       	inc	r25
    226c:	f6 95       	lsr	r31
    226e:	87 95       	ror	r24
    2270:	77 95       	ror	r23
    2272:	67 95       	ror	r22
    2274:	b7 95       	ror	r27
    2276:	f1 11       	cpse	r31, r1
    2278:	f8 cf       	rjmp	.-16     	; 0x226a <__floatsisf+0x1c>
    227a:	fa f4       	brpl	.+62     	; 0x22ba <__floatsisf+0x6c>
    227c:	bb 0f       	add	r27, r27
    227e:	11 f4       	brne	.+4      	; 0x2284 <__floatsisf+0x36>
    2280:	60 ff       	sbrs	r22, 0
    2282:	1b c0       	rjmp	.+54     	; 0x22ba <__floatsisf+0x6c>
    2284:	6f 5f       	subi	r22, 0xFF	; 255
    2286:	7f 4f       	sbci	r23, 0xFF	; 255
    2288:	8f 4f       	sbci	r24, 0xFF	; 255
    228a:	9f 4f       	sbci	r25, 0xFF	; 255
    228c:	16 c0       	rjmp	.+44     	; 0x22ba <__floatsisf+0x6c>
    228e:	88 23       	and	r24, r24
    2290:	11 f0       	breq	.+4      	; 0x2296 <__floatsisf+0x48>
    2292:	96 e9       	ldi	r25, 0x96	; 150
    2294:	11 c0       	rjmp	.+34     	; 0x22b8 <__floatsisf+0x6a>
    2296:	77 23       	and	r23, r23
    2298:	21 f0       	breq	.+8      	; 0x22a2 <__floatsisf+0x54>
    229a:	9e e8       	ldi	r25, 0x8E	; 142
    229c:	87 2f       	mov	r24, r23
    229e:	76 2f       	mov	r23, r22
    22a0:	05 c0       	rjmp	.+10     	; 0x22ac <__floatsisf+0x5e>
    22a2:	66 23       	and	r22, r22
    22a4:	71 f0       	breq	.+28     	; 0x22c2 <__floatsisf+0x74>
    22a6:	96 e8       	ldi	r25, 0x86	; 134
    22a8:	86 2f       	mov	r24, r22
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	2a f0       	brmi	.+10     	; 0x22ba <__floatsisf+0x6c>
    22b0:	9a 95       	dec	r25
    22b2:	66 0f       	add	r22, r22
    22b4:	77 1f       	adc	r23, r23
    22b6:	88 1f       	adc	r24, r24
    22b8:	da f7       	brpl	.-10     	; 0x22b0 <__floatsisf+0x62>
    22ba:	88 0f       	add	r24, r24
    22bc:	96 95       	lsr	r25
    22be:	87 95       	ror	r24
    22c0:	97 f9       	bld	r25, 7
    22c2:	08 95       	ret

000022c4 <__fp_cmp>:
    22c4:	99 0f       	add	r25, r25
    22c6:	00 08       	sbc	r0, r0
    22c8:	55 0f       	add	r21, r21
    22ca:	aa 0b       	sbc	r26, r26
    22cc:	e0 e8       	ldi	r30, 0x80	; 128
    22ce:	fe ef       	ldi	r31, 0xFE	; 254
    22d0:	16 16       	cp	r1, r22
    22d2:	17 06       	cpc	r1, r23
    22d4:	e8 07       	cpc	r30, r24
    22d6:	f9 07       	cpc	r31, r25
    22d8:	c0 f0       	brcs	.+48     	; 0x230a <__fp_cmp+0x46>
    22da:	12 16       	cp	r1, r18
    22dc:	13 06       	cpc	r1, r19
    22de:	e4 07       	cpc	r30, r20
    22e0:	f5 07       	cpc	r31, r21
    22e2:	98 f0       	brcs	.+38     	; 0x230a <__fp_cmp+0x46>
    22e4:	62 1b       	sub	r22, r18
    22e6:	73 0b       	sbc	r23, r19
    22e8:	84 0b       	sbc	r24, r20
    22ea:	95 0b       	sbc	r25, r21
    22ec:	39 f4       	brne	.+14     	; 0x22fc <__fp_cmp+0x38>
    22ee:	0a 26       	eor	r0, r26
    22f0:	61 f0       	breq	.+24     	; 0x230a <__fp_cmp+0x46>
    22f2:	23 2b       	or	r18, r19
    22f4:	24 2b       	or	r18, r20
    22f6:	25 2b       	or	r18, r21
    22f8:	21 f4       	brne	.+8      	; 0x2302 <__fp_cmp+0x3e>
    22fa:	08 95       	ret
    22fc:	0a 26       	eor	r0, r26
    22fe:	09 f4       	brne	.+2      	; 0x2302 <__fp_cmp+0x3e>
    2300:	a1 40       	sbci	r26, 0x01	; 1
    2302:	a6 95       	lsr	r26
    2304:	8f ef       	ldi	r24, 0xFF	; 255
    2306:	81 1d       	adc	r24, r1
    2308:	81 1d       	adc	r24, r1
    230a:	08 95       	ret

0000230c <__fp_inf>:
    230c:	97 f9       	bld	r25, 7
    230e:	9f 67       	ori	r25, 0x7F	; 127
    2310:	80 e8       	ldi	r24, 0x80	; 128
    2312:	70 e0       	ldi	r23, 0x00	; 0
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	08 95       	ret

00002318 <__fp_nan>:
    2318:	9f ef       	ldi	r25, 0xFF	; 255
    231a:	80 ec       	ldi	r24, 0xC0	; 192
    231c:	08 95       	ret

0000231e <__fp_pscA>:
    231e:	00 24       	eor	r0, r0
    2320:	0a 94       	dec	r0
    2322:	16 16       	cp	r1, r22
    2324:	17 06       	cpc	r1, r23
    2326:	18 06       	cpc	r1, r24
    2328:	09 06       	cpc	r0, r25
    232a:	08 95       	ret

0000232c <__fp_pscB>:
    232c:	00 24       	eor	r0, r0
    232e:	0a 94       	dec	r0
    2330:	12 16       	cp	r1, r18
    2332:	13 06       	cpc	r1, r19
    2334:	14 06       	cpc	r1, r20
    2336:	05 06       	cpc	r0, r21
    2338:	08 95       	ret

0000233a <__fp_round>:
    233a:	09 2e       	mov	r0, r25
    233c:	03 94       	inc	r0
    233e:	00 0c       	add	r0, r0
    2340:	11 f4       	brne	.+4      	; 0x2346 <__fp_round+0xc>
    2342:	88 23       	and	r24, r24
    2344:	52 f0       	brmi	.+20     	; 0x235a <__fp_round+0x20>
    2346:	bb 0f       	add	r27, r27
    2348:	40 f4       	brcc	.+16     	; 0x235a <__fp_round+0x20>
    234a:	bf 2b       	or	r27, r31
    234c:	11 f4       	brne	.+4      	; 0x2352 <__fp_round+0x18>
    234e:	60 ff       	sbrs	r22, 0
    2350:	04 c0       	rjmp	.+8      	; 0x235a <__fp_round+0x20>
    2352:	6f 5f       	subi	r22, 0xFF	; 255
    2354:	7f 4f       	sbci	r23, 0xFF	; 255
    2356:	8f 4f       	sbci	r24, 0xFF	; 255
    2358:	9f 4f       	sbci	r25, 0xFF	; 255
    235a:	08 95       	ret

0000235c <__fp_split3>:
    235c:	57 fd       	sbrc	r21, 7
    235e:	90 58       	subi	r25, 0x80	; 128
    2360:	44 0f       	add	r20, r20
    2362:	55 1f       	adc	r21, r21
    2364:	59 f0       	breq	.+22     	; 0x237c <__fp_splitA+0x10>
    2366:	5f 3f       	cpi	r21, 0xFF	; 255
    2368:	71 f0       	breq	.+28     	; 0x2386 <__fp_splitA+0x1a>
    236a:	47 95       	ror	r20

0000236c <__fp_splitA>:
    236c:	88 0f       	add	r24, r24
    236e:	97 fb       	bst	r25, 7
    2370:	99 1f       	adc	r25, r25
    2372:	61 f0       	breq	.+24     	; 0x238c <__fp_splitA+0x20>
    2374:	9f 3f       	cpi	r25, 0xFF	; 255
    2376:	79 f0       	breq	.+30     	; 0x2396 <__fp_splitA+0x2a>
    2378:	87 95       	ror	r24
    237a:	08 95       	ret
    237c:	12 16       	cp	r1, r18
    237e:	13 06       	cpc	r1, r19
    2380:	14 06       	cpc	r1, r20
    2382:	55 1f       	adc	r21, r21
    2384:	f2 cf       	rjmp	.-28     	; 0x236a <__fp_split3+0xe>
    2386:	46 95       	lsr	r20
    2388:	f1 df       	rcall	.-30     	; 0x236c <__fp_splitA>
    238a:	08 c0       	rjmp	.+16     	; 0x239c <__fp_splitA+0x30>
    238c:	16 16       	cp	r1, r22
    238e:	17 06       	cpc	r1, r23
    2390:	18 06       	cpc	r1, r24
    2392:	99 1f       	adc	r25, r25
    2394:	f1 cf       	rjmp	.-30     	; 0x2378 <__fp_splitA+0xc>
    2396:	86 95       	lsr	r24
    2398:	71 05       	cpc	r23, r1
    239a:	61 05       	cpc	r22, r1
    239c:	08 94       	sec
    239e:	08 95       	ret

000023a0 <__fp_zero>:
    23a0:	e8 94       	clt

000023a2 <__fp_szero>:
    23a2:	bb 27       	eor	r27, r27
    23a4:	66 27       	eor	r22, r22
    23a6:	77 27       	eor	r23, r23
    23a8:	cb 01       	movw	r24, r22
    23aa:	97 f9       	bld	r25, 7
    23ac:	08 95       	ret

000023ae <__gesf2>:
    23ae:	8a df       	rcall	.-236    	; 0x22c4 <__fp_cmp>
    23b0:	08 f4       	brcc	.+2      	; 0x23b4 <__gesf2+0x6>
    23b2:	8f ef       	ldi	r24, 0xFF	; 255
    23b4:	08 95       	ret

000023b6 <__mulsf3>:
    23b6:	0b d0       	rcall	.+22     	; 0x23ce <__mulsf3x>
    23b8:	c0 cf       	rjmp	.-128    	; 0x233a <__fp_round>
    23ba:	b1 df       	rcall	.-158    	; 0x231e <__fp_pscA>
    23bc:	28 f0       	brcs	.+10     	; 0x23c8 <__mulsf3+0x12>
    23be:	b6 df       	rcall	.-148    	; 0x232c <__fp_pscB>
    23c0:	18 f0       	brcs	.+6      	; 0x23c8 <__mulsf3+0x12>
    23c2:	95 23       	and	r25, r21
    23c4:	09 f0       	breq	.+2      	; 0x23c8 <__mulsf3+0x12>
    23c6:	a2 cf       	rjmp	.-188    	; 0x230c <__fp_inf>
    23c8:	a7 cf       	rjmp	.-178    	; 0x2318 <__fp_nan>
    23ca:	11 24       	eor	r1, r1
    23cc:	ea cf       	rjmp	.-44     	; 0x23a2 <__fp_szero>

000023ce <__mulsf3x>:
    23ce:	c6 df       	rcall	.-116    	; 0x235c <__fp_split3>
    23d0:	a0 f3       	brcs	.-24     	; 0x23ba <__mulsf3+0x4>

000023d2 <__mulsf3_pse>:
    23d2:	95 9f       	mul	r25, r21
    23d4:	d1 f3       	breq	.-12     	; 0x23ca <__mulsf3+0x14>
    23d6:	95 0f       	add	r25, r21
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	55 1f       	adc	r21, r21
    23dc:	62 9f       	mul	r22, r18
    23de:	f0 01       	movw	r30, r0
    23e0:	72 9f       	mul	r23, r18
    23e2:	bb 27       	eor	r27, r27
    23e4:	f0 0d       	add	r31, r0
    23e6:	b1 1d       	adc	r27, r1
    23e8:	63 9f       	mul	r22, r19
    23ea:	aa 27       	eor	r26, r26
    23ec:	f0 0d       	add	r31, r0
    23ee:	b1 1d       	adc	r27, r1
    23f0:	aa 1f       	adc	r26, r26
    23f2:	64 9f       	mul	r22, r20
    23f4:	66 27       	eor	r22, r22
    23f6:	b0 0d       	add	r27, r0
    23f8:	a1 1d       	adc	r26, r1
    23fa:	66 1f       	adc	r22, r22
    23fc:	82 9f       	mul	r24, r18
    23fe:	22 27       	eor	r18, r18
    2400:	b0 0d       	add	r27, r0
    2402:	a1 1d       	adc	r26, r1
    2404:	62 1f       	adc	r22, r18
    2406:	73 9f       	mul	r23, r19
    2408:	b0 0d       	add	r27, r0
    240a:	a1 1d       	adc	r26, r1
    240c:	62 1f       	adc	r22, r18
    240e:	83 9f       	mul	r24, r19
    2410:	a0 0d       	add	r26, r0
    2412:	61 1d       	adc	r22, r1
    2414:	22 1f       	adc	r18, r18
    2416:	74 9f       	mul	r23, r20
    2418:	33 27       	eor	r19, r19
    241a:	a0 0d       	add	r26, r0
    241c:	61 1d       	adc	r22, r1
    241e:	23 1f       	adc	r18, r19
    2420:	84 9f       	mul	r24, r20
    2422:	60 0d       	add	r22, r0
    2424:	21 1d       	adc	r18, r1
    2426:	82 2f       	mov	r24, r18
    2428:	76 2f       	mov	r23, r22
    242a:	6a 2f       	mov	r22, r26
    242c:	11 24       	eor	r1, r1
    242e:	9f 57       	subi	r25, 0x7F	; 127
    2430:	50 40       	sbci	r21, 0x00	; 0
    2432:	8a f0       	brmi	.+34     	; 0x2456 <__mulsf3_pse+0x84>
    2434:	e1 f0       	breq	.+56     	; 0x246e <__mulsf3_pse+0x9c>
    2436:	88 23       	and	r24, r24
    2438:	4a f0       	brmi	.+18     	; 0x244c <__mulsf3_pse+0x7a>
    243a:	ee 0f       	add	r30, r30
    243c:	ff 1f       	adc	r31, r31
    243e:	bb 1f       	adc	r27, r27
    2440:	66 1f       	adc	r22, r22
    2442:	77 1f       	adc	r23, r23
    2444:	88 1f       	adc	r24, r24
    2446:	91 50       	subi	r25, 0x01	; 1
    2448:	50 40       	sbci	r21, 0x00	; 0
    244a:	a9 f7       	brne	.-22     	; 0x2436 <__mulsf3_pse+0x64>
    244c:	9e 3f       	cpi	r25, 0xFE	; 254
    244e:	51 05       	cpc	r21, r1
    2450:	70 f0       	brcs	.+28     	; 0x246e <__mulsf3_pse+0x9c>
    2452:	5c cf       	rjmp	.-328    	; 0x230c <__fp_inf>
    2454:	a6 cf       	rjmp	.-180    	; 0x23a2 <__fp_szero>
    2456:	5f 3f       	cpi	r21, 0xFF	; 255
    2458:	ec f3       	brlt	.-6      	; 0x2454 <__mulsf3_pse+0x82>
    245a:	98 3e       	cpi	r25, 0xE8	; 232
    245c:	dc f3       	brlt	.-10     	; 0x2454 <__mulsf3_pse+0x82>
    245e:	86 95       	lsr	r24
    2460:	77 95       	ror	r23
    2462:	67 95       	ror	r22
    2464:	b7 95       	ror	r27
    2466:	f7 95       	ror	r31
    2468:	e7 95       	ror	r30
    246a:	9f 5f       	subi	r25, 0xFF	; 255
    246c:	c1 f7       	brne	.-16     	; 0x245e <__mulsf3_pse+0x8c>
    246e:	fe 2b       	or	r31, r30
    2470:	88 0f       	add	r24, r24
    2472:	91 1d       	adc	r25, r1
    2474:	96 95       	lsr	r25
    2476:	87 95       	ror	r24
    2478:	97 f9       	bld	r25, 7
    247a:	08 95       	ret

0000247c <__divmodhi4>:
    247c:	97 fb       	bst	r25, 7
    247e:	07 2e       	mov	r0, r23
    2480:	16 f4       	brtc	.+4      	; 0x2486 <__divmodhi4+0xa>
    2482:	00 94       	com	r0
    2484:	06 d0       	rcall	.+12     	; 0x2492 <__divmodhi4_neg1>
    2486:	77 fd       	sbrc	r23, 7
    2488:	08 d0       	rcall	.+16     	; 0x249a <__divmodhi4_neg2>
    248a:	11 d0       	rcall	.+34     	; 0x24ae <__udivmodhi4>
    248c:	07 fc       	sbrc	r0, 7
    248e:	05 d0       	rcall	.+10     	; 0x249a <__divmodhi4_neg2>
    2490:	3e f4       	brtc	.+14     	; 0x24a0 <__divmodhi4_exit>

00002492 <__divmodhi4_neg1>:
    2492:	90 95       	com	r25
    2494:	81 95       	neg	r24
    2496:	9f 4f       	sbci	r25, 0xFF	; 255
    2498:	08 95       	ret

0000249a <__divmodhi4_neg2>:
    249a:	70 95       	com	r23
    249c:	61 95       	neg	r22
    249e:	7f 4f       	sbci	r23, 0xFF	; 255

000024a0 <__divmodhi4_exit>:
    24a0:	08 95       	ret

000024a2 <__tablejump2__>:
    24a2:	ee 0f       	add	r30, r30
    24a4:	ff 1f       	adc	r31, r31
    24a6:	05 90       	lpm	r0, Z+
    24a8:	f4 91       	lpm	r31, Z
    24aa:	e0 2d       	mov	r30, r0
    24ac:	09 94       	ijmp

000024ae <__udivmodhi4>:
    24ae:	aa 1b       	sub	r26, r26
    24b0:	bb 1b       	sub	r27, r27
    24b2:	51 e1       	ldi	r21, 0x11	; 17
    24b4:	07 c0       	rjmp	.+14     	; 0x24c4 <__udivmodhi4_ep>

000024b6 <__udivmodhi4_loop>:
    24b6:	aa 1f       	adc	r26, r26
    24b8:	bb 1f       	adc	r27, r27
    24ba:	a6 17       	cp	r26, r22
    24bc:	b7 07       	cpc	r27, r23
    24be:	10 f0       	brcs	.+4      	; 0x24c4 <__udivmodhi4_ep>
    24c0:	a6 1b       	sub	r26, r22
    24c2:	b7 0b       	sbc	r27, r23

000024c4 <__udivmodhi4_ep>:
    24c4:	88 1f       	adc	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	5a 95       	dec	r21
    24ca:	a9 f7       	brne	.-22     	; 0x24b6 <__udivmodhi4_loop>
    24cc:	80 95       	com	r24
    24ce:	90 95       	com	r25
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	08 95       	ret

000024d6 <_exit>:
    24d6:	f8 94       	cli

000024d8 <__stop_program>:
    24d8:	ff cf       	rjmp	.-2      	; 0x24d8 <__stop_program>
