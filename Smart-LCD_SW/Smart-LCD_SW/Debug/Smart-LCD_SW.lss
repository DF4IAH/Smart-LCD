
Smart-LCD_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000172  00800100  00003652  000036e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  00800272  00800272  00003858  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000038b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  000038f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000640f  00000000  00000000  00003cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a39  00000000  00000000  0000a0bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000500f  00000000  00000000  0000baf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013c4  00000000  00000000  00010b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00013e69  00000000  00000000  00011ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006006  00000000  00000000  00025d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0002bd37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001a74  00000000  00000000  0002c05f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	86 c3       	rjmp	.+1804   	; 0x70e <__ctors_end>
       2:	00 00       	nop
       4:	d6 c7       	rjmp	.+4012   	; 0xfb2 <__vector_1>
       6:	00 00       	nop
       8:	f7 c7       	rjmp	.+4078   	; 0xff8 <__vector_2>
       a:	00 00       	nop
       c:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__vector_3>
      10:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__vector_4>
      14:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__vector_5>
      18:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__vector_6>
      1c:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__vector_7>
      20:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__vector_8>
      24:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_9>
      28:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_10>
      2c:	0c 94 37 09 	jmp	0x126e	; 0x126e <__vector_11>
      30:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__vector_12>
      34:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_13>
      38:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_14>
      3c:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_15>
      40:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__vector_16>
      44:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_17>
      48:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__vector_18>
      4c:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__vector_19>
      50:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__vector_20>
      54:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__vector_21>
      58:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__vector_22>
      5c:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_23>
      60:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__vector_24>
      64:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__vector_25>
      68:	16 12       	cpse	r1, r22
      6a:	00 13       	cpse	r16, r16
      6c:	00 13       	cpse	r16, r16
      6e:	00 13       	cpse	r16, r16
      70:	00 13       	cpse	r16, r16
      72:	00 13       	cpse	r16, r16
      74:	00 13       	cpse	r16, r16
      76:	00 13       	cpse	r16, r16
      78:	2a 12       	cpse	r2, r26
      7a:	00 13       	cpse	r16, r16
      7c:	00 13       	cpse	r16, r16
      7e:	00 13       	cpse	r16, r16
      80:	00 13       	cpse	r16, r16
      82:	00 13       	cpse	r16, r16
      84:	00 13       	cpse	r16, r16
      86:	00 13       	cpse	r16, r16
      88:	2b 12       	cpse	r2, r27
      8a:	00 13       	cpse	r16, r16
      8c:	00 13       	cpse	r16, r16
      8e:	00 13       	cpse	r16, r16
      90:	00 13       	cpse	r16, r16
      92:	00 13       	cpse	r16, r16
      94:	00 13       	cpse	r16, r16
      96:	00 13       	cpse	r16, r16
      98:	38 12       	cpse	r3, r24
      9a:	00 13       	cpse	r16, r16
      9c:	00 13       	cpse	r16, r16
      9e:	00 13       	cpse	r16, r16
      a0:	00 13       	cpse	r16, r16
      a2:	00 13       	cpse	r16, r16
      a4:	00 13       	cpse	r16, r16
      a6:	00 13       	cpse	r16, r16
      a8:	3a 12       	cpse	r3, r26
      aa:	00 13       	cpse	r16, r16
      ac:	00 13       	cpse	r16, r16
      ae:	00 13       	cpse	r16, r16
      b0:	00 13       	cpse	r16, r16
      b2:	00 13       	cpse	r16, r16
      b4:	00 13       	cpse	r16, r16
      b6:	00 13       	cpse	r16, r16
      b8:	50 12       	cpse	r5, r16
      ba:	00 13       	cpse	r16, r16
      bc:	00 13       	cpse	r16, r16
      be:	00 13       	cpse	r16, r16
      c0:	00 13       	cpse	r16, r16
      c2:	00 13       	cpse	r16, r16
      c4:	00 13       	cpse	r16, r16
      c6:	00 13       	cpse	r16, r16
      c8:	55 12       	cpse	r5, r21
      ca:	00 13       	cpse	r16, r16
      cc:	00 13       	cpse	r16, r16
      ce:	00 13       	cpse	r16, r16
      d0:	00 13       	cpse	r16, r16
      d2:	00 13       	cpse	r16, r16
      d4:	00 13       	cpse	r16, r16
      d6:	00 13       	cpse	r16, r16
      d8:	00 13       	cpse	r16, r16
      da:	00 13       	cpse	r16, r16
      dc:	00 13       	cpse	r16, r16
      de:	00 13       	cpse	r16, r16
      e0:	00 13       	cpse	r16, r16
      e2:	00 13       	cpse	r16, r16
      e4:	00 13       	cpse	r16, r16
      e6:	00 13       	cpse	r16, r16
      e8:	00 13       	cpse	r16, r16
      ea:	00 13       	cpse	r16, r16
      ec:	00 13       	cpse	r16, r16
      ee:	00 13       	cpse	r16, r16
      f0:	00 13       	cpse	r16, r16
      f2:	00 13       	cpse	r16, r16
      f4:	00 13       	cpse	r16, r16
      f6:	00 13       	cpse	r16, r16
      f8:	00 13       	cpse	r16, r16
      fa:	00 13       	cpse	r16, r16
      fc:	00 13       	cpse	r16, r16
      fe:	00 13       	cpse	r16, r16
     100:	00 13       	cpse	r16, r16
     102:	00 13       	cpse	r16, r16
     104:	00 13       	cpse	r16, r16
     106:	00 13       	cpse	r16, r16
     108:	00 13       	cpse	r16, r16
     10a:	00 13       	cpse	r16, r16
     10c:	00 13       	cpse	r16, r16
     10e:	00 13       	cpse	r16, r16
     110:	00 13       	cpse	r16, r16
     112:	00 13       	cpse	r16, r16
     114:	00 13       	cpse	r16, r16
     116:	00 13       	cpse	r16, r16
     118:	57 12       	cpse	r5, r23
     11a:	00 13       	cpse	r16, r16
     11c:	00 13       	cpse	r16, r16
     11e:	00 13       	cpse	r16, r16
     120:	00 13       	cpse	r16, r16
     122:	00 13       	cpse	r16, r16
     124:	00 13       	cpse	r16, r16
     126:	00 13       	cpse	r16, r16
     128:	58 12       	cpse	r5, r24
     12a:	00 13       	cpse	r16, r16
     12c:	00 13       	cpse	r16, r16
     12e:	00 13       	cpse	r16, r16
     130:	00 13       	cpse	r16, r16
     132:	00 13       	cpse	r16, r16
     134:	00 13       	cpse	r16, r16
     136:	00 13       	cpse	r16, r16
     138:	66 12       	cpse	r6, r22
     13a:	00 13       	cpse	r16, r16
     13c:	00 13       	cpse	r16, r16
     13e:	00 13       	cpse	r16, r16
     140:	00 13       	cpse	r16, r16
     142:	00 13       	cpse	r16, r16
     144:	00 13       	cpse	r16, r16
     146:	00 13       	cpse	r16, r16
     148:	67 12       	cpse	r6, r23
     14a:	00 13       	cpse	r16, r16
     14c:	00 13       	cpse	r16, r16
     14e:	00 13       	cpse	r16, r16
     150:	00 13       	cpse	r16, r16
     152:	00 13       	cpse	r16, r16
     154:	00 13       	cpse	r16, r16
     156:	00 13       	cpse	r16, r16
     158:	70 12       	cpse	r7, r16
     15a:	00 13       	cpse	r16, r16
     15c:	00 13       	cpse	r16, r16
     15e:	00 13       	cpse	r16, r16
     160:	00 13       	cpse	r16, r16
     162:	00 13       	cpse	r16, r16
     164:	00 13       	cpse	r16, r16
     166:	00 13       	cpse	r16, r16
     168:	91 12       	cpse	r9, r17
     16a:	00 13       	cpse	r16, r16
     16c:	00 13       	cpse	r16, r16
     16e:	00 13       	cpse	r16, r16
     170:	00 13       	cpse	r16, r16
     172:	00 13       	cpse	r16, r16
     174:	00 13       	cpse	r16, r16
     176:	00 13       	cpse	r16, r16
     178:	71 12       	cpse	r7, r17
     17a:	00 13       	cpse	r16, r16
     17c:	00 13       	cpse	r16, r16
     17e:	00 13       	cpse	r16, r16
     180:	00 13       	cpse	r16, r16
     182:	00 13       	cpse	r16, r16
     184:	00 13       	cpse	r16, r16
     186:	00 13       	cpse	r16, r16
     188:	92 12       	cpse	r9, r18
     18a:	00 13       	cpse	r16, r16
     18c:	00 13       	cpse	r16, r16
     18e:	00 13       	cpse	r16, r16
     190:	00 13       	cpse	r16, r16
     192:	00 13       	cpse	r16, r16
     194:	00 13       	cpse	r16, r16
     196:	00 13       	cpse	r16, r16
     198:	aa 12       	cpse	r10, r26
     19a:	00 13       	cpse	r16, r16
     19c:	00 13       	cpse	r16, r16
     19e:	00 13       	cpse	r16, r16
     1a0:	00 13       	cpse	r16, r16
     1a2:	00 13       	cpse	r16, r16
     1a4:	00 13       	cpse	r16, r16
     1a6:	00 13       	cpse	r16, r16
     1a8:	b9 12       	cpse	r11, r25
     1aa:	00 13       	cpse	r16, r16
     1ac:	00 13       	cpse	r16, r16
     1ae:	00 13       	cpse	r16, r16
     1b0:	00 13       	cpse	r16, r16
     1b2:	00 13       	cpse	r16, r16
     1b4:	00 13       	cpse	r16, r16
     1b6:	00 13       	cpse	r16, r16
     1b8:	ba 12       	cpse	r11, r26
     1ba:	00 13       	cpse	r16, r16
     1bc:	00 13       	cpse	r16, r16
     1be:	00 13       	cpse	r16, r16
     1c0:	00 13       	cpse	r16, r16
     1c2:	00 13       	cpse	r16, r16
     1c4:	00 13       	cpse	r16, r16
     1c6:	00 13       	cpse	r16, r16
     1c8:	d8 12       	cpse	r13, r24
     1ca:	00 13       	cpse	r16, r16
     1cc:	00 13       	cpse	r16, r16
     1ce:	00 13       	cpse	r16, r16
     1d0:	00 13       	cpse	r16, r16
     1d2:	00 13       	cpse	r16, r16
     1d4:	00 13       	cpse	r16, r16
     1d6:	00 13       	cpse	r16, r16
     1d8:	f4 12       	cpse	r15, r20
     1da:	00 13       	cpse	r16, r16
     1dc:	00 13       	cpse	r16, r16
     1de:	00 13       	cpse	r16, r16
     1e0:	00 13       	cpse	r16, r16
     1e2:	00 13       	cpse	r16, r16
     1e4:	00 13       	cpse	r16, r16
     1e6:	00 13       	cpse	r16, r16
     1e8:	fc 12       	cpse	r15, r28

000001ea <__trampolines_end>:
     1ea:	00 00       	nop
     1ec:	00 00       	nop
     1ee:	00 00       	nop
     1f0:	00 20       	and	r0, r0
     1f2:	20 20       	and	r2, r0
     1f4:	20 20       	and	r2, r0
     1f6:	00 20       	and	r0, r0
     1f8:	50 50       	subi	r21, 0x00	; 0
     1fa:	50 00       	.word	0x0050	; ????
     1fc:	00 00       	nop
     1fe:	00 50       	subi	r16, 0x00	; 0
     200:	50 f8       	bld	r5, 0
     202:	50 f8       	bld	r5, 0
     204:	50 50       	subi	r21, 0x00	; 0
     206:	20 78       	andi	r18, 0x80	; 128
     208:	a0 70       	andi	r26, 0x00	; 0
     20a:	28 f0       	brcs	.+10     	; 0x216 <__trampolines_end+0x2c>
     20c:	20 c0       	rjmp	.+64     	; 0x24e <__trampolines_end+0x64>
     20e:	c8 10       	cpse	r12, r8
     210:	20 40       	sbci	r18, 0x00	; 0
     212:	98 18       	sub	r9, r8
     214:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x3d2c>
     218:	a8 90       	.word	0x90a8	; ????
     21a:	68 60       	ori	r22, 0x08	; 8
     21c:	20 40       	sbci	r18, 0x00	; 0
     21e:	00 00       	nop
     220:	00 00       	nop
     222:	10 20       	and	r1, r0
     224:	40 40       	sbci	r20, 0x00	; 0
     226:	40 20       	and	r4, r0
     228:	10 40       	sbci	r17, 0x00	; 0
     22a:	20 10       	cpse	r2, r0
     22c:	10 10       	cpse	r1, r0
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 50       	subi	r16, 0x00	; 0
     232:	20 f8       	bld	r2, 0
     234:	20 50       	subi	r18, 0x00	; 0
     236:	00 00       	nop
     238:	20 20       	and	r2, r0
     23a:	f8 20       	and	r15, r8
     23c:	20 00       	.word	0x0020	; ????
     23e:	00 00       	nop
     240:	00 00       	nop
     242:	60 20       	and	r6, r0
     244:	40 00       	.word	0x0040	; ????
     246:	00 00       	nop
     248:	f8 00       	.word	0x00f8	; ????
     24a:	00 00       	nop
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 60       	ori	r16, 0x00	; 0
     252:	60 00       	.word	0x0060	; ????
     254:	08 10       	cpse	r0, r8
     256:	20 40       	sbci	r18, 0x00	; 0
     258:	80 00       	.word	0x0080	; ????
     25a:	70 88       	ldd	r7, Z+16	; 0x10
     25c:	98 a8       	ldd	r9, Y+48	; 0x30
     25e:	c8 88       	ldd	r12, Y+16	; 0x10
     260:	70 20       	and	r7, r0
     262:	60 20       	and	r6, r0
     264:	20 20       	and	r2, r0
     266:	20 70       	andi	r18, 0x00	; 0
     268:	70 88       	ldd	r7, Z+16	; 0x10
     26a:	08 10       	cpse	r0, r8
     26c:	20 40       	sbci	r18, 0x00	; 0
     26e:	f8 f8       	.word	0xf8f8	; ????
     270:	10 20       	and	r1, r0
     272:	10 08       	sbc	r1, r0
     274:	88 70       	andi	r24, 0x08	; 8
     276:	10 30       	cpi	r17, 0x00	; 0
     278:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__bss_end+0xd84>
     27c:	10 f8       	bld	r1, 0
     27e:	80 f0       	brcs	.+32     	; 0x2a0 <__trampolines_end+0xb6>
     280:	08 08       	sbc	r0, r8
     282:	88 70       	andi	r24, 0x08	; 8
     284:	30 40       	sbci	r19, 0x00	; 0
     286:	80 f0       	brcs	.+32     	; 0x2a8 <__trampolines_end+0xbe>
     288:	88 88       	ldd	r8, Y+16	; 0x10
     28a:	70 f8       	bld	r7, 0
     28c:	08 10       	cpse	r0, r8
     28e:	20 40       	sbci	r18, 0x00	; 0
     290:	40 40       	sbci	r20, 0x00	; 0
     292:	70 88       	ldd	r7, Z+16	; 0x10
     294:	88 70       	andi	r24, 0x08	; 8
     296:	88 88       	ldd	r8, Y+16	; 0x10
     298:	70 70       	andi	r23, 0x00	; 0
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	78 08       	sbc	r7, r8
     29e:	10 60       	ori	r17, 0x00	; 0
     2a0:	00 60       	ori	r16, 0x00	; 0
     2a2:	60 00       	.word	0x0060	; ????
     2a4:	60 60       	ori	r22, 0x00	; 0
     2a6:	00 00       	nop
     2a8:	60 60       	ori	r22, 0x00	; 0
     2aa:	00 60       	ori	r16, 0x00	; 0
     2ac:	20 40       	sbci	r18, 0x00	; 0
     2ae:	08 10       	cpse	r0, r8
     2b0:	20 40       	sbci	r18, 0x00	; 0
     2b2:	20 10       	cpse	r2, r0
     2b4:	08 00       	.word	0x0008	; ????
     2b6:	00 f8       	bld	r0, 0
     2b8:	00 f8       	bld	r0, 0
     2ba:	00 00       	nop
     2bc:	80 40       	sbci	r24, 0x00	; 0
     2be:	20 10       	cpse	r2, r0
     2c0:	20 40       	sbci	r18, 0x00	; 0
     2c2:	80 70       	andi	r24, 0x00	; 0
     2c4:	88 08       	sbc	r8, r8
     2c6:	10 20       	and	r1, r0
     2c8:	00 20       	and	r0, r0
     2ca:	70 88       	ldd	r7, Z+16	; 0x10
     2cc:	08 68       	ori	r16, 0x88	; 136
     2ce:	a8 a8       	ldd	r10, Y+48	; 0x30
     2d0:	70 70       	andi	r23, 0x00	; 0
     2d2:	88 88       	ldd	r8, Y+16	; 0x10
     2d4:	88 f8       	.word	0xf888	; ????
     2d6:	88 88       	ldd	r8, Y+16	; 0x10
     2d8:	f0 88       	ldd	r15, Z+16	; 0x10
     2da:	88 f0       	brcs	.+34     	; 0x2fe <__trampolines_end+0x114>
     2dc:	88 88       	ldd	r8, Y+16	; 0x10
     2de:	f0 70       	andi	r31, 0x00	; 0
     2e0:	88 80       	ld	r8, Y
     2e2:	80 80       	ld	r8, Z
     2e4:	88 70       	andi	r24, 0x08	; 8
     2e6:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x8514>
     2ea:	88 90       	.word	0x9088	; ????
     2ec:	e0 f8       	bld	r14, 0
     2ee:	80 80       	ld	r8, Z
     2f0:	f0 80       	ld	r15, Z
     2f2:	80 f8       	bld	r8, 0
     2f4:	f8 80       	ld	r15, Y
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	80 80       	ld	r8, Z
     2fa:	80 70       	andi	r24, 0x00	; 0
     2fc:	88 80       	ld	r8, Y
     2fe:	80 98       	cbi	0x10, 0	; 16
     300:	88 70       	andi	r24, 0x08	; 8
     302:	88 88       	ldd	r8, Y+16	; 0x10
     304:	88 f8       	.word	0xf888	; ????
     306:	88 88       	ldd	r8, Y+16	; 0x10
     308:	88 70       	andi	r24, 0x08	; 8
     30a:	20 20       	and	r2, r0
     30c:	20 20       	and	r2, r0
     30e:	20 70       	andi	r18, 0x00	; 0
     310:	38 10       	cpse	r3, r8
     312:	10 10       	cpse	r1, r0
     314:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x84ec>
     318:	90 a0       	ldd	r9, Z+32	; 0x20
     31a:	c0 a0       	ldd	r12, Z+32	; 0x20
     31c:	90 88       	ldd	r9, Z+16	; 0x10
     31e:	80 80       	ld	r8, Z
     320:	80 80       	ld	r8, Z
     322:	80 80       	ld	r8, Z
     324:	f8 88       	ldd	r15, Y+16	; 0x10
     326:	d8 a8       	ldd	r13, Y+48	; 0x30
     328:	88 88       	ldd	r8, Y+16	; 0x10
     32a:	88 88       	ldd	r8, Y+16	; 0x10
     32c:	88 88       	ldd	r8, Y+16	; 0x10
     32e:	c8 a8       	ldd	r12, Y+48	; 0x30
     330:	98 88       	ldd	r9, Y+16	; 0x10
     332:	88 70       	andi	r24, 0x08	; 8
     334:	88 88       	ldd	r8, Y+16	; 0x10
     336:	88 88       	ldd	r8, Y+16	; 0x10
     338:	88 70       	andi	r24, 0x08	; 8
     33a:	f0 88       	ldd	r15, Z+16	; 0x10
     33c:	88 f0       	brcs	.+34     	; 0x360 <__trampolines_end+0x176>
     33e:	80 80       	ld	r8, Z
     340:	80 70       	andi	r24, 0x00	; 0
     342:	88 88       	ldd	r8, Y+16	; 0x10
     344:	88 a8       	ldd	r8, Y+48	; 0x30
     346:	90 68       	ori	r25, 0x80	; 128
     348:	f0 88       	ldd	r15, Z+16	; 0x10
     34a:	88 f0       	brcs	.+34     	; 0x36e <__trampolines_end+0x184>
     34c:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x7514>
     350:	80 80       	ld	r8, Z
     352:	70 08       	sbc	r7, r0
     354:	08 f0       	brcs	.+2      	; 0x358 <__trampolines_end+0x16e>
     356:	f8 20       	and	r15, r8
     358:	20 20       	and	r2, r0
     35a:	20 20       	and	r2, r0
     35c:	20 88       	ldd	r2, Z+16	; 0x10
     35e:	88 88       	ldd	r8, Y+16	; 0x10
     360:	88 88       	ldd	r8, Y+16	; 0x10
     362:	88 70       	andi	r24, 0x08	; 8
     364:	88 88       	ldd	r8, Y+16	; 0x10
     366:	88 88       	ldd	r8, Y+16	; 0x10
     368:	88 50       	subi	r24, 0x08	; 8
     36a:	20 88       	ldd	r2, Z+16	; 0x10
     36c:	88 88       	ldd	r8, Y+16	; 0x10
     36e:	a8 a8       	ldd	r10, Y+48	; 0x30
     370:	d8 88       	ldd	r13, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	50 20       	and	r5, r0
     376:	50 88       	ldd	r5, Z+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 20       	and	r2, r0
     37e:	20 20       	and	r2, r0
     380:	f8 08       	sbc	r15, r8
     382:	10 20       	and	r1, r0
     384:	40 80       	ld	r4, Z
     386:	f8 38       	cpi	r31, 0x88	; 136
     388:	20 20       	and	r2, r0
     38a:	20 20       	and	r2, r0
     38c:	20 38       	cpi	r18, 0x80	; 128
     38e:	00 80       	ld	r0, Z
     390:	40 20       	and	r4, r0
     392:	10 08       	sbc	r1, r0
     394:	00 e0       	ldi	r16, 0x00	; 0
     396:	20 20       	and	r2, r0
     398:	20 20       	and	r2, r0
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	20 50       	subi	r18, 0x00	; 0
     39e:	88 00       	.word	0x0088	; ????
	...
     3a8:	00 f8       	bld	r0, 0
     3aa:	40 20       	and	r4, r0
     3ac:	10 00       	.word	0x0010	; ????
     3ae:	00 00       	nop
     3b0:	00 00       	nop
     3b2:	00 70       	andi	r16, 0x00	; 0
     3b4:	08 78       	andi	r16, 0x88	; 136
     3b6:	88 78       	andi	r24, 0x88	; 136
     3b8:	80 80       	ld	r8, Z
     3ba:	b0 c8       	rjmp	.-3744   	; 0xfffff51c <__eeprom_end+0xff7ef51c>
     3bc:	88 88       	ldd	r8, Y+16	; 0x10
     3be:	f0 00       	.word	0x00f0	; ????
     3c0:	00 70       	andi	r16, 0x00	; 0
     3c2:	80 80       	ld	r8, Z
     3c4:	88 70       	andi	r24, 0x08	; 8
     3c6:	08 08       	sbc	r0, r8
     3c8:	68 98       	cbi	0x0d, 0	; 13
     3ca:	88 88       	ldd	r8, Y+16	; 0x10
     3cc:	78 00       	.word	0x0078	; ????
     3ce:	00 70       	andi	r16, 0x00	; 0
     3d0:	88 f8       	.word	0xf888	; ????
     3d2:	80 70       	andi	r24, 0x00	; 0
     3d4:	30 48       	sbci	r19, 0x80	; 128
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	40 40       	sbci	r20, 0x00	; 0
     3da:	40 00       	.word	0x0040	; ????
     3dc:	00 78       	andi	r16, 0x80	; 128
     3de:	88 78       	andi	r24, 0x88	; 136
     3e0:	08 30       	cpi	r16, 0x08	; 8
     3e2:	80 80       	ld	r8, Z
     3e4:	b0 c8       	rjmp	.-3744   	; 0xfffff546 <__eeprom_end+0xff7ef546>
     3e6:	88 88       	ldd	r8, Y+16	; 0x10
     3e8:	88 20       	and	r8, r8
     3ea:	00 60       	ori	r16, 0x00	; 0
     3ec:	20 20       	and	r2, r0
     3ee:	20 70       	andi	r18, 0x00	; 0
     3f0:	10 00       	.word	0x0010	; ????
     3f2:	30 10       	cpse	r3, r0
     3f4:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x3cec>
     3f8:	40 48       	sbci	r20, 0x80	; 128
     3fa:	50 60       	ori	r21, 0x00	; 0
     3fc:	50 48       	sbci	r21, 0x80	; 128
     3fe:	60 20       	and	r6, r0
     400:	20 20       	and	r2, r0
     402:	20 20       	and	r2, r0
     404:	70 00       	.word	0x0070	; ????
     406:	00 d0       	rcall	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     408:	a8 a8       	ldd	r10, Y+48	; 0x30
     40a:	88 88       	ldd	r8, Y+16	; 0x10
     40c:	00 00       	nop
     40e:	b0 c8       	rjmp	.-3744   	; 0xfffff570 <__eeprom_end+0xff7ef570>
     410:	88 88       	ldd	r8, Y+16	; 0x10
     412:	88 00       	.word	0x0088	; ????
     414:	00 70       	andi	r16, 0x00	; 0
     416:	88 88       	ldd	r8, Y+16	; 0x10
     418:	88 70       	andi	r24, 0x08	; 8
     41a:	00 00       	nop
     41c:	f0 88       	ldd	r15, Z+16	; 0x10
     41e:	f0 80       	ld	r15, Z
     420:	80 00       	.word	0x0080	; ????
     422:	00 68       	ori	r16, 0x80	; 128
     424:	98 78       	andi	r25, 0x88	; 136
     426:	08 08       	sbc	r0, r8
     428:	00 00       	nop
     42a:	b0 c8       	rjmp	.-3744   	; 0xfffff58c <__eeprom_end+0xff7ef58c>
     42c:	80 80       	ld	r8, Z
     42e:	80 00       	.word	0x0080	; ????
     430:	00 70       	andi	r16, 0x00	; 0
     432:	80 70       	andi	r24, 0x00	; 0
     434:	08 f0       	brcs	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     436:	40 40       	sbci	r20, 0x00	; 0
     438:	e0 40       	sbci	r30, 0x00	; 0
     43a:	40 48       	sbci	r20, 0x80	; 128
     43c:	30 00       	.word	0x0030	; ????
     43e:	00 88       	ldd	r0, Z+16	; 0x10
     440:	88 88       	ldd	r8, Y+16	; 0x10
     442:	98 68       	ori	r25, 0x88	; 136
     444:	00 00       	nop
     446:	88 88       	ldd	r8, Y+16	; 0x10
     448:	88 50       	subi	r24, 0x08	; 8
     44a:	20 00       	.word	0x0020	; ????
     44c:	00 88       	ldd	r0, Z+16	; 0x10
     44e:	88 a8       	ldd	r8, Y+48	; 0x30
     450:	a8 50       	subi	r26, 0x08	; 8
     452:	00 00       	nop
     454:	88 50       	subi	r24, 0x08	; 8
     456:	20 50       	subi	r18, 0x00	; 0
     458:	88 00       	.word	0x0088	; ????
     45a:	00 88       	ldd	r0, Z+16	; 0x10
     45c:	88 78       	andi	r24, 0x88	; 136
     45e:	08 70       	andi	r16, 0x08	; 8
     460:	00 00       	nop
     462:	f8 10       	cpse	r15, r8
     464:	20 40       	sbci	r18, 0x00	; 0
     466:	f8 10       	cpse	r15, r8
     468:	20 20       	and	r2, r0
     46a:	40 20       	and	r4, r0
     46c:	20 10       	cpse	r2, r0
     46e:	20 20       	and	r2, r0
     470:	20 20       	and	r2, r0
     472:	20 20       	and	r2, r0
     474:	20 40       	sbci	r18, 0x00	; 0
     476:	20 20       	and	r2, r0
     478:	10 20       	and	r1, r0
     47a:	20 40       	sbci	r18, 0x00	; 0

0000047c <sysfont_glyphs>:
     47c:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     48c:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     49c:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     4ac:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     4bc:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     4cc:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     4dc:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     4ec:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     4fc:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     50c:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     51c:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     52c:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     53c:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     54c:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     55c:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     56c:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     57c:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     58c:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     59c:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     5ac:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     5bc:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     5cc:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     5dc:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     5ec:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     5fc:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     60c:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     61c:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     62c:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     63c:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     64c:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     65c:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     66c:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     67c:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     68c:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     69c:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     6ac:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     6bc:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     6cc:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     6dc:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     6ec:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     6fc:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     70c:	20 40                                                @

0000070e <__ctors_end>:
     70e:	11 24       	eor	r1, r1
     710:	1f be       	out	0x3f, r1	; 63
     712:	cf ef       	ldi	r28, 0xFF	; 255
     714:	d8 e0       	ldi	r29, 0x08	; 8
     716:	de bf       	out	0x3e, r29	; 62
     718:	cd bf       	out	0x3d, r28	; 61

0000071a <__do_copy_data>:
     71a:	12 e0       	ldi	r17, 0x02	; 2
     71c:	a0 e0       	ldi	r26, 0x00	; 0
     71e:	b1 e0       	ldi	r27, 0x01	; 1
     720:	e2 e5       	ldi	r30, 0x52	; 82
     722:	f6 e3       	ldi	r31, 0x36	; 54
     724:	02 c0       	rjmp	.+4      	; 0x72a <__do_copy_data+0x10>
     726:	05 90       	lpm	r0, Z+
     728:	0d 92       	st	X+, r0
     72a:	a2 37       	cpi	r26, 0x72	; 114
     72c:	b1 07       	cpc	r27, r17
     72e:	d9 f7       	brne	.-10     	; 0x726 <__do_copy_data+0xc>

00000730 <__do_clear_bss>:
     730:	23 e0       	ldi	r18, 0x03	; 3
     732:	a2 e7       	ldi	r26, 0x72	; 114
     734:	b2 e0       	ldi	r27, 0x02	; 2
     736:	01 c0       	rjmp	.+2      	; 0x73a <.do_clear_bss_start>

00000738 <.do_clear_bss_loop>:
     738:	1d 92       	st	X+, r1

0000073a <.do_clear_bss_start>:
     73a:	a4 37       	cpi	r26, 0x74	; 116
     73c:	b2 07       	cpc	r27, r18
     73e:	e1 f7       	brne	.-8      	; 0x738 <.do_clear_bss_loop>
     740:	0e 94 92 14 	call	0x2924	; 0x2924 <main>
     744:	0c 94 27 1b 	jmp	0x364e	; 0x364e <_exit>

00000748 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	1f 92       	push	r1
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     752:	8f ef       	ldi	r24, 0xFF	; 255
     754:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     758:	8f b7       	in	r24, 0x3f	; 63
     75a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     75c:	f8 94       	cli
	return flags;
     75e:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     760:	5f 93       	push	r21
     762:	50 e8       	ldi	r21, 0x80	; 128
     764:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     76e:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     770:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     772:	0f 90       	pop	r0
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	1f 92       	push	r1
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     784:	9f b7       	in	r25, 0x3f	; 63
     786:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     788:	f8 94       	cli
	return flags;
     78a:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     78c:	81 11       	cpse	r24, r1
     78e:	06 c0       	rjmp	.+12     	; 0x79c <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
     790:	e4 e6       	ldi	r30, 0x64	; 100
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	60 95       	com	r22
     796:	80 81       	ld	r24, Z
     798:	68 23       	and	r22, r24
     79a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     79c:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     79e:	0f 90       	pop	r0
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	1f 92       	push	r1
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7b0:	9f b7       	in	r25, 0x3f	; 63
     7b2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     7b4:	f8 94       	cli
	return flags;
     7b6:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     7b8:	81 11       	cpse	r24, r1
     7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <sysclk_disable_module+0x20>
		*(reg + port) |= id;
     7bc:	e4 e6       	ldi	r30, 0x64	; 100
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 81       	ld	r24, Z
     7c2:	68 2b       	or	r22, r24
     7c4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7c6:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     7c8:	0f 90       	pop	r0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <gfx_mono_generic_draw_horizontal_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     7d0:	ff 92       	push	r15
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     7da:	e4 2f       	mov	r30, r20
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	e8 0f       	add	r30, r24
     7e0:	f1 1d       	adc	r31, r1
     7e2:	e1 3f       	cpi	r30, 0xF1	; 241
     7e4:	f1 05       	cpc	r31, r1
     7e6:	1c f0       	brlt	.+6      	; 0x7ee <gfx_mono_generic_draw_horizontal_line+0x1e>
		length = GFX_MONO_LCD_WIDTH - x;
     7e8:	c0 ef       	ldi	r28, 0xF0	; 240
     7ea:	4c 2f       	mov	r20, r28
     7ec:	48 1b       	sub	r20, r24
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     7ee:	44 23       	and	r20, r20
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <gfx_mono_generic_draw_horizontal_line+0x24>
     7f2:	53 c0       	rjmp	.+166    	; 0x89a <gfx_mono_generic_draw_horizontal_line+0xca>
	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
		length = GFX_MONO_LCD_WIDTH - x;
	}

	page = y / 8;
     7f4:	d6 2f       	mov	r29, r22
     7f6:	d6 95       	lsr	r29
     7f8:	d6 95       	lsr	r29
     7fa:	d6 95       	lsr	r29
	pixelmask = (1 << (y - (page * 8)));
     7fc:	ed 2f       	mov	r30, r29
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	f1 95       	neg	r31
     802:	e1 95       	neg	r30
     804:	f1 09       	sbc	r31, r1
     806:	ee 0f       	add	r30, r30
     808:	ff 1f       	adc	r31, r31
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	df 01       	movw	r26, r30
     814:	a6 0f       	add	r26, r22
     816:	b1 1d       	adc	r27, r1
     818:	bd 01       	movw	r22, r26
     81a:	e1 e0       	ldi	r30, 0x01	; 1
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	df 01       	movw	r26, r30
     820:	02 c0       	rjmp	.+4      	; 0x826 <gfx_mono_generic_draw_horizontal_line+0x56>
     822:	aa 0f       	add	r26, r26
     824:	bb 1f       	adc	r27, r27
     826:	6a 95       	dec	r22
     828:	e2 f7       	brpl	.-8      	; 0x822 <gfx_mono_generic_draw_horizontal_line+0x52>
     82a:	fa 2e       	mov	r15, r26
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     82c:	21 30       	cpi	r18, 0x01	; 1
     82e:	21 f0       	breq	.+8      	; 0x838 <gfx_mono_generic_draw_horizontal_line+0x68>
     830:	98 f0       	brcs	.+38     	; 0x858 <gfx_mono_generic_draw_horizontal_line+0x88>
     832:	22 30       	cpi	r18, 0x02	; 2
     834:	19 f1       	breq	.+70     	; 0x87c <gfx_mono_generic_draw_horizontal_line+0xac>
     836:	31 c0       	rjmp	.+98     	; 0x89a <gfx_mono_generic_draw_horizontal_line+0xca>
     838:	c4 2f       	mov	r28, r20
     83a:	1f ef       	ldi	r17, 0xFF	; 255
     83c:	18 0f       	add	r17, r24
     83e:	01 2f       	mov	r16, r17
     840:	0c 0f       	add	r16, r28
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     842:	60 2f       	mov	r22, r16
     844:	8d 2f       	mov	r24, r29
     846:	e0 d2       	rcall	.+1472   	; 0xe08 <gfx_mono_lcd_uc1608_get_byte>
			temp |= pixelmask;
     848:	48 2f       	mov	r20, r24
     84a:	4f 29       	or	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     84c:	60 2f       	mov	r22, r16
     84e:	8d 2f       	mov	r24, r29
     850:	cb d2       	rcall	.+1430   	; 0xde8 <gfx_mono_lcd_uc1608_put_byte>
     852:	c1 50       	subi	r28, 0x01	; 1
		return;
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
     854:	a1 f7       	brne	.-24     	; 0x83e <gfx_mono_generic_draw_horizontal_line+0x6e>
     856:	21 c0       	rjmp	.+66     	; 0x89a <gfx_mono_generic_draw_horizontal_line+0xca>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     858:	c4 2f       	mov	r28, r20
     85a:	1f ef       	ldi	r17, 0xFF	; 255
     85c:	18 0f       	add	r17, r24
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
			temp &= ~pixelmask;
     85e:	fa 2e       	mov	r15, r26
     860:	f0 94       	com	r15
     862:	01 2f       	mov	r16, r17
     864:	0c 0f       	add	r16, r28
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     866:	60 2f       	mov	r22, r16
     868:	8d 2f       	mov	r24, r29
     86a:	ce d2       	rcall	.+1436   	; 0xe08 <gfx_mono_lcd_uc1608_get_byte>
			temp &= ~pixelmask;
     86c:	48 2f       	mov	r20, r24
     86e:	4f 21       	and	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     870:	60 2f       	mov	r22, r16
     872:	8d 2f       	mov	r24, r29
     874:	b9 d2       	rcall	.+1394   	; 0xde8 <gfx_mono_lcd_uc1608_put_byte>
     876:	c1 50       	subi	r28, 0x01	; 1
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
     878:	a1 f7       	brne	.-24     	; 0x862 <gfx_mono_generic_draw_horizontal_line+0x92>
     87a:	0f c0       	rjmp	.+30     	; 0x89a <gfx_mono_generic_draw_horizontal_line+0xca>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     87c:	c4 2f       	mov	r28, r20
     87e:	1f ef       	ldi	r17, 0xFF	; 255
     880:	18 0f       	add	r17, r24
     882:	01 2f       	mov	r16, r17
     884:	0c 0f       	add	r16, r28
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     886:	60 2f       	mov	r22, r16
     888:	8d 2f       	mov	r24, r29
     88a:	be d2       	rcall	.+1404   	; 0xe08 <gfx_mono_lcd_uc1608_get_byte>
			temp ^= pixelmask;
     88c:	48 2f       	mov	r20, r24
     88e:	4f 25       	eor	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     890:	60 2f       	mov	r22, r16
     892:	8d 2f       	mov	r24, r29
     894:	a9 d2       	rcall	.+1362   	; 0xde8 <gfx_mono_lcd_uc1608_put_byte>
     896:	c1 50       	subi	r28, 0x01	; 1
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
     898:	a1 f7       	brne	.-24     	; 0x882 <gfx_mono_generic_draw_horizontal_line+0xb2>
		break;

	default:
		break;
	}
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	08 95       	ret

000008a6 <gfx_mono_generic_draw_vertical_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
	if (length == 0) {
     8b2:	44 23       	and	r20, r20
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <gfx_mono_generic_draw_vertical_line+0x12>
     8b6:	46 c0       	rjmp	.+140    	; 0x944 <__stack+0x45>
     8b8:	12 2f       	mov	r17, r18
     8ba:	d8 2f       	mov	r29, r24
     8bc:	9f ef       	ldi	r25, 0xFF	; 255
     8be:	96 0f       	add	r25, r22
		return;
	}

	gfx_coord_t y2 = y + length - 1;
     8c0:	94 0f       	add	r25, r20

	if (y == y2) {
     8c2:	69 13       	cpse	r22, r25
     8c4:	03 c0       	rjmp	.+6      	; 0x8cc <gfx_mono_generic_draw_vertical_line+0x26>
		gfx_mono_draw_pixel(x, y, color);
     8c6:	42 2f       	mov	r20, r18
     8c8:	d2 d2       	rcall	.+1444   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     8ca:	3c c0       	rjmp	.+120    	; 0x944 <__stack+0x45>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
     8cc:	9f 37       	cpi	r25, 0x7F	; 127
     8ce:	08 f0       	brcs	.+2      	; 0x8d2 <gfx_mono_generic_draw_vertical_line+0x2c>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
     8d0:	9f e7       	ldi	r25, 0x7F	; 127
	}

	gfx_coord_t y1page = y / 8;
     8d2:	c6 2f       	mov	r28, r22
     8d4:	c6 95       	lsr	r28
     8d6:	c6 95       	lsr	r28
     8d8:	c6 95       	lsr	r28
	gfx_coord_t y2page = y2 / 8;
     8da:	09 2f       	mov	r16, r25
     8dc:	06 95       	lsr	r16
     8de:	06 95       	lsr	r16
     8e0:	06 95       	lsr	r16

	uint8_t y1bitpos = y & 0x07;
     8e2:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
     8e4:	2f ef       	ldi	r18, 0xFF	; 255
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	a9 01       	movw	r20, r18
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <gfx_mono_generic_draw_vertical_line+0x4a>
     8ec:	44 0f       	add	r20, r20
     8ee:	55 1f       	adc	r21, r21
     8f0:	6a 95       	dec	r22
     8f2:	e2 f7       	brpl	.-8      	; 0x8ec <gfx_mono_generic_draw_vertical_line+0x46>

	gfx_coord_t y1page = y / 8;
	gfx_coord_t y2page = y2 / 8;

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;
     8f4:	97 70       	andi	r25, 0x07	; 7

	uint8_t y1pixelmask = 0xFF << y1bitpos;
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
     8f6:	67 e0       	ldi	r22, 0x07	; 7
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	fb 01       	movw	r30, r22
     8fc:	e9 1b       	sub	r30, r25
     8fe:	f1 09       	sbc	r31, r1
     900:	79 01       	movw	r14, r18
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0x9>
     904:	f5 94       	asr	r15
     906:	e7 94       	ror	r14
     908:	ea 95       	dec	r30
     90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0x5>

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     90c:	c0 13       	cpse	r28, r16
     90e:	06 c0       	rjmp	.+12     	; 0x91c <__stack+0x1d>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
     910:	4e 21       	and	r20, r14
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
     912:	21 2f       	mov	r18, r17
     914:	6d 2f       	mov	r22, r29
     916:	8c 2f       	mov	r24, r28
     918:	87 d2       	rcall	.+1294   	; 0xe28 <gfx_mono_lcd_uc1608_mask_byte>
     91a:	14 c0       	rjmp	.+40     	; 0x944 <__stack+0x45>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
     91c:	21 2f       	mov	r18, r17
     91e:	6d 2f       	mov	r22, r29
     920:	8c 2f       	mov	r24, r28
     922:	82 d2       	rcall	.+1284   	; 0xe28 <gfx_mono_lcd_uc1608_mask_byte>

		while (++y1page < y2page) {
     924:	cf 5f       	subi	r28, 0xFF	; 255
     926:	c0 17       	cp	r28, r16
     928:	40 f4       	brcc	.+16     	; 0x93a <__stack+0x3b>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     92a:	21 2f       	mov	r18, r17
     92c:	4f ef       	ldi	r20, 0xFF	; 255
     92e:	6d 2f       	mov	r22, r29
     930:	8c 2f       	mov	r24, r28
     932:	7a d2       	rcall	.+1268   	; 0xe28 <gfx_mono_lcd_uc1608_mask_byte>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     934:	cf 5f       	subi	r28, 0xFF	; 255
     936:	c0 17       	cp	r28, r16
     938:	c0 f3       	brcs	.-16     	; 0x92a <__stack+0x2b>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     93a:	21 2f       	mov	r18, r17
     93c:	4e 2d       	mov	r20, r14
     93e:	6d 2f       	mov	r22, r29
     940:	80 2f       	mov	r24, r16
     942:	72 d2       	rcall	.+1252   	; 0xe28 <gfx_mono_lcd_uc1608_mask_byte>
	}
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	08 95       	ret

00000952 <gfx_mono_generic_draw_line>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
     952:	8f 92       	push	r8
     954:	9f 92       	push	r9
     956:	af 92       	push	r10
     958:	bf 92       	push	r11
     95a:	cf 92       	push	r12
     95c:	df 92       	push	r13
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	c8 2f       	mov	r28, r24
     96c:	d6 2f       	mov	r29, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     96e:	48 17       	cp	r20, r24
     970:	28 f4       	brcc	.+10     	; 0x97c <gfx_mono_generic_draw_line+0x2a>
		dx = x1;
		x1 = x2;
		x2 = dx;
		dy = y1;
		y1 = y2;
     972:	d2 2f       	mov	r29, r18
		y2 = dy;
     974:	26 2f       	mov	r18, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     976:	8c 2f       	mov	r24, r28
		dx = x1;
		x1 = x2;
     978:	c4 2f       	mov	r28, r20
		x2 = dx;
     97a:	48 2f       	mov	r20, r24
		dy = y1;
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
     97c:	e4 2e       	mov	r14, r20
     97e:	f1 2c       	mov	r15, r1
     980:	ec 1a       	sub	r14, r28
     982:	f1 08       	sbc	r15, r1
	dy = y2 - y1;
     984:	a2 2e       	mov	r10, r18
     986:	b1 2c       	mov	r11, r1
     988:	ad 1a       	sub	r10, r29
     98a:	b1 08       	sbc	r11, r1

	x = x1;
	y = y1;

	if (dx < 0) {
     98c:	ff 20       	and	r15, r15
     98e:	2c f4       	brge	.+10     	; 0x99a <gfx_mono_generic_draw_line+0x48>
		xinc = -1;
		dx = -dx;
     990:	f1 94       	neg	r15
     992:	e1 94       	neg	r14
     994:	f1 08       	sbc	r15, r1

	x = x1;
	y = y1;

	if (dx < 0) {
		xinc = -1;
     996:	1f ef       	ldi	r17, 0xFF	; 255
     998:	01 c0       	rjmp	.+2      	; 0x99c <gfx_mono_generic_draw_line+0x4a>
		dx = -dx;
	} else {
		xinc = 1;
     99a:	11 e0       	ldi	r17, 0x01	; 1
	}

	if (dy < 0) {
     99c:	bb 20       	and	r11, r11
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <gfx_mono_generic_draw_line+0x50>
     9a0:	48 c0       	rjmp	.+144    	; 0xa32 <gfx_mono_generic_draw_line+0xe0>
		yinc = -1;
		dy = -dy;
     9a2:	88 24       	eor	r8, r8
     9a4:	99 24       	eor	r9, r9
     9a6:	8a 18       	sub	r8, r10
     9a8:	9b 08       	sbc	r9, r11
	} else {
		yinc = 1;
	}

	if (dx > dy) {
     9aa:	8e 14       	cp	r8, r14
     9ac:	9f 04       	cpc	r9, r15
     9ae:	fc f4       	brge	.+62     	; 0x9ee <gfx_mono_generic_draw_line+0x9c>
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
		dy = -dy;
     9b0:	54 01       	movw	r10, r8
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     9b2:	88 24       	eor	r8, r8
     9b4:	8a 94       	dec	r8
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <gfx_mono_generic_draw_line+0x6a>
		dy = -dy;
	} else {
		yinc = 1;
     9b8:	88 24       	eor	r8, r8
     9ba:	83 94       	inc	r8
	}

	if (dx > dy) {
		e = dy - dx;
     9bc:	65 01       	movw	r12, r10
     9be:	ce 18       	sub	r12, r14
     9c0:	df 08       	sbc	r13, r15
		for (i = 0; i <= dx; i++) {
     9c2:	ff 20       	and	r15, r15
     9c4:	dc f1       	brlt	.+118    	; 0xa3c <gfx_mono_generic_draw_line+0xea>
     9c6:	91 2c       	mov	r9, r1
			gfx_mono_draw_pixel(x, y, color);
     9c8:	40 2f       	mov	r20, r16
     9ca:	6d 2f       	mov	r22, r29
     9cc:	8c 2f       	mov	r24, r28
     9ce:	4f d2       	rcall	.+1182   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     9d0:	dd 20       	and	r13, r13
     9d2:	1c f0       	brlt	.+6      	; 0x9da <gfx_mono_generic_draw_line+0x88>
				e -= dx;
     9d4:	ce 18       	sub	r12, r14
     9d6:	df 08       	sbc	r13, r15
				y += yinc;
     9d8:	d8 0d       	add	r29, r8
			}

			e += dy;
     9da:	ca 0c       	add	r12, r10
     9dc:	db 1c       	adc	r13, r11
     9de:	c1 0f       	add	r28, r17
		yinc = 1;
	}

	if (dx > dy) {
		e = dy - dx;
		for (i = 0; i <= dx; i++) {
     9e0:	93 94       	inc	r9
     9e2:	89 2d       	mov	r24, r9
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	e8 16       	cp	r14, r24
     9e8:	f9 06       	cpc	r15, r25
     9ea:	74 f7       	brge	.-36     	; 0x9c8 <gfx_mono_generic_draw_line+0x76>
     9ec:	27 c0       	rjmp	.+78     	; 0xa3c <gfx_mono_generic_draw_line+0xea>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     9ee:	67 01       	movw	r12, r14
     9f0:	ca 0c       	add	r12, r10
     9f2:	db 1c       	adc	r13, r11
		for (i = 0; i <= dy; i++) {
     9f4:	99 20       	and	r9, r9
     9f6:	14 f1       	brlt	.+68     	; 0xa3c <gfx_mono_generic_draw_line+0xea>
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     9f8:	aa 24       	eor	r10, r10
     9fa:	aa 94       	dec	r10
		dy = -dy;
	} else {
		yinc = 1;
     9fc:	b1 2c       	mov	r11, r1
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
			gfx_mono_draw_pixel(x, y, color);
     9fe:	40 2f       	mov	r20, r16
     a00:	6d 2f       	mov	r22, r29
     a02:	8c 2f       	mov	r24, r28
     a04:	34 d2       	rcall	.+1128   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     a06:	dd 20       	and	r13, r13
     a08:	1c f0       	brlt	.+6      	; 0xa10 <gfx_mono_generic_draw_line+0xbe>
				e -= dy;
     a0a:	c8 18       	sub	r12, r8
     a0c:	d9 08       	sbc	r13, r9
				x += xinc;
     a0e:	c1 0f       	add	r28, r17
			}

			e += dx;
     a10:	ce 0c       	add	r12, r14
     a12:	df 1c       	adc	r13, r15
     a14:	da 0d       	add	r29, r10
			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
     a16:	b3 94       	inc	r11
     a18:	8b 2d       	mov	r24, r11
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	88 16       	cp	r8, r24
     a1e:	99 06       	cpc	r9, r25
     a20:	74 f7       	brge	.-36     	; 0x9fe <gfx_mono_generic_draw_line+0xac>
     a22:	0c c0       	rjmp	.+24     	; 0xa3c <gfx_mono_generic_draw_line+0xea>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     a24:	67 01       	movw	r12, r14
     a26:	ca 18       	sub	r12, r10
     a28:	db 08       	sbc	r13, r11
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
	dy = y2 - y1;
     a2a:	45 01       	movw	r8, r10

	if (dy < 0) {
		yinc = -1;
		dy = -dy;
	} else {
		yinc = 1;
     a2c:	aa 24       	eor	r10, r10
     a2e:	a3 94       	inc	r10
     a30:	e5 cf       	rjmp	.-54     	; 0x9fc <gfx_mono_generic_draw_line+0xaa>
	}

	if (dx > dy) {
     a32:	ae 14       	cp	r10, r14
     a34:	bf 04       	cpc	r11, r15
     a36:	0c f4       	brge	.+2      	; 0xa3a <gfx_mono_generic_draw_line+0xe8>
     a38:	bf cf       	rjmp	.-130    	; 0x9b8 <gfx_mono_generic_draw_line+0x66>
     a3a:	f4 cf       	rjmp	.-24     	; 0xa24 <gfx_mono_generic_draw_line+0xd2>

			e += dx;
			y += yinc;
		}
	}
}
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	bf 90       	pop	r11
     a4e:	af 90       	pop	r10
     a50:	9f 90       	pop	r9
     a52:	8f 90       	pop	r8
     a54:	08 95       	ret

00000a56 <gfx_mono_generic_draw_rect>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     a56:	ff 92       	push	r15
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	d8 2f       	mov	r29, r24
     a62:	16 2f       	mov	r17, r22
     a64:	c4 2f       	mov	r28, r20
     a66:	f2 2e       	mov	r15, r18
	gfx_mono_draw_horizontal_line(x, y, width, color);
     a68:	20 2f       	mov	r18, r16
     a6a:	b2 de       	rcall	.-668    	; 0x7d0 <gfx_mono_generic_draw_horizontal_line>
     a6c:	6f ef       	ldi	r22, 0xFF	; 255
     a6e:	6f 0d       	add	r22, r15
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
     a70:	61 0f       	add	r22, r17
     a72:	20 2f       	mov	r18, r16
     a74:	4c 2f       	mov	r20, r28
     a76:	8d 2f       	mov	r24, r29
     a78:	ab de       	rcall	.-682    	; 0x7d0 <gfx_mono_generic_draw_horizontal_line>

	gfx_mono_draw_vertical_line(x, y, height, color);
     a7a:	20 2f       	mov	r18, r16
     a7c:	4f 2d       	mov	r20, r15
     a7e:	61 2f       	mov	r22, r17
     a80:	8d 2f       	mov	r24, r29
     a82:	11 df       	rcall	.-478    	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
     a84:	8f ef       	ldi	r24, 0xFF	; 255
     a86:	8c 0f       	add	r24, r28
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     a88:	20 2f       	mov	r18, r16
     a8a:	4f 2d       	mov	r20, r15
     a8c:	61 2f       	mov	r22, r17
     a8e:	8d 0f       	add	r24, r29
     a90:	0a df       	rcall	.-492    	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	08 95       	ret

00000a9e <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
	if (height == 0) {
     aa8:	22 23       	and	r18, r18
     aaa:	69 f0       	breq	.+26     	; 0xac6 <gfx_mono_generic_draw_filled_rect+0x28>
     aac:	c2 2f       	mov	r28, r18
     aae:	f4 2e       	mov	r15, r20
     ab0:	18 2f       	mov	r17, r24
     ab2:	df ef       	ldi	r29, 0xFF	; 255
     ab4:	d6 0f       	add	r29, r22
     ab6:	6d 2f       	mov	r22, r29
     ab8:	6c 0f       	add	r22, r28
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     aba:	20 2f       	mov	r18, r16
     abc:	4f 2d       	mov	r20, r15
     abe:	81 2f       	mov	r24, r17
     ac0:	87 de       	rcall	.-754    	; 0x7d0 <gfx_mono_generic_draw_horizontal_line>
     ac2:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     ac4:	c1 f7       	brne	.-16     	; 0xab6 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	ff 90       	pop	r15
     ad0:	08 95       	ret

00000ad2 <gfx_mono_generic_draw_circle>:
 * \param  octant_mask Bitmask indicating which octants to draw.
 */
void gfx_mono_generic_draw_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t octant_mask)
{
     ad2:	2f 92       	push	r2
     ad4:	3f 92       	push	r3
     ad6:	4f 92       	push	r4
     ad8:	5f 92       	push	r5
     ada:	6f 92       	push	r6
     adc:	7f 92       	push	r7
     ade:	8f 92       	push	r8
     ae0:	9f 92       	push	r9
     ae2:	af 92       	push	r10
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <gfx_mono_generic_draw_circle+0x26>
     af8:	1f 92       	push	r1
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	88 2e       	mov	r8, r24
     b00:	96 2e       	mov	r9, r22
     b02:	4a 83       	std	Y+2, r20	; 0x02
     b04:	a2 2e       	mov	r10, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     b06:	41 11       	cpse	r20, r1
     b08:	03 c0       	rjmp	.+6      	; 0xb10 <gfx_mono_generic_draw_circle+0x3e>
		gfx_mono_draw_pixel(x, y, color);
     b0a:	42 2f       	mov	r20, r18
     b0c:	b0 d1       	rcall	.+864    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     b0e:	89 c0       	rjmp	.+274    	; 0xc22 <gfx_mono_generic_draw_circle+0x150>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     b10:	2a 81       	ldd	r18, Y+2	; 0x02
     b12:	e2 2e       	mov	r14, r18
     b14:	f1 2c       	mov	r15, r1
     b16:	ee 0c       	add	r14, r14
     b18:	ff 1c       	adc	r15, r15
     b1a:	f1 94       	neg	r15
     b1c:	e1 94       	neg	r14
     b1e:	f1 08       	sbc	r15, r1
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	e8 0e       	add	r14, r24
     b24:	f1 1c       	adc	r15, r1
     b26:	c6 2e       	mov	r12, r22
     b28:	d8 2c       	mov	r13, r8
     b2a:	18 2d       	mov	r17, r8
     b2c:	b6 2e       	mov	r11, r22
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     b2e:	1b 82       	std	Y+3, r1	; 0x03
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     b30:	90 2f       	mov	r25, r16
     b32:	91 70       	andi	r25, 0x01	; 1
     b34:	29 2e       	mov	r2, r25
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT1) {
     b36:	e0 2f       	mov	r30, r16
     b38:	e2 70       	andi	r30, 0x02	; 2
     b3a:	3e 2e       	mov	r3, r30
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT2) {
     b3c:	f0 2f       	mov	r31, r16
     b3e:	f4 70       	andi	r31, 0x04	; 4
     b40:	4f 2e       	mov	r4, r31
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT3) {
     b42:	20 2f       	mov	r18, r16
     b44:	28 70       	andi	r18, 0x08	; 8
     b46:	52 2e       	mov	r5, r18
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT4) {
     b48:	80 2f       	mov	r24, r16
     b4a:	80 71       	andi	r24, 0x10	; 16
     b4c:	68 2e       	mov	r6, r24
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
		}

		if (octant_mask & GFX_OCTANT5) {
     b4e:	90 2f       	mov	r25, r16
     b50:	90 72       	andi	r25, 0x20	; 32
     b52:	79 2e       	mov	r7, r25
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
		}

		if (octant_mask & GFX_OCTANT6) {
     b54:	e0 2f       	mov	r30, r16
     b56:	e0 74       	andi	r30, 0x40	; 64
     b58:	e9 83       	std	Y+1, r30	; 0x01
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     b5a:	22 20       	and	r2, r2
     b5c:	29 f0       	breq	.+10     	; 0xb68 <gfx_mono_generic_draw_circle+0x96>
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
     b5e:	4a 2d       	mov	r20, r10
     b60:	6c 2d       	mov	r22, r12
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	88 0d       	add	r24, r8
     b66:	83 d1       	rcall	.+774    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT1) {
     b68:	33 20       	and	r3, r3
     b6a:	31 f0       	breq	.+12     	; 0xb78 <gfx_mono_generic_draw_circle+0xa6>
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
     b6c:	4a 2d       	mov	r20, r10
     b6e:	69 2d       	mov	r22, r9
     b70:	fa 81       	ldd	r31, Y+2	; 0x02
     b72:	6f 1b       	sub	r22, r31
     b74:	81 2f       	mov	r24, r17
     b76:	7b d1       	rcall	.+758    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT2) {
     b78:	44 20       	and	r4, r4
     b7a:	31 f0       	breq	.+12     	; 0xb88 <gfx_mono_generic_draw_circle+0xb6>
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
     b7c:	4a 2d       	mov	r20, r10
     b7e:	69 2d       	mov	r22, r9
     b80:	2a 81       	ldd	r18, Y+2	; 0x02
     b82:	62 1b       	sub	r22, r18
     b84:	8d 2d       	mov	r24, r13
     b86:	73 d1       	rcall	.+742    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT3) {
     b88:	55 20       	and	r5, r5
     b8a:	31 f0       	breq	.+12     	; 0xb98 <gfx_mono_generic_draw_circle+0xc6>
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
     b8c:	4a 2d       	mov	r20, r10
     b8e:	6c 2d       	mov	r22, r12
     b90:	88 2d       	mov	r24, r8
     b92:	9a 81       	ldd	r25, Y+2	; 0x02
     b94:	89 1b       	sub	r24, r25
     b96:	6b d1       	rcall	.+726    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT4) {
     b98:	66 20       	and	r6, r6
     b9a:	31 f0       	breq	.+12     	; 0xba8 <gfx_mono_generic_draw_circle+0xd6>
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
     b9c:	4a 2d       	mov	r20, r10
     b9e:	6b 2d       	mov	r22, r11
     ba0:	88 2d       	mov	r24, r8
     ba2:	ea 81       	ldd	r30, Y+2	; 0x02
     ba4:	8e 1b       	sub	r24, r30
     ba6:	63 d1       	rcall	.+710    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT5) {
     ba8:	77 20       	and	r7, r7
     baa:	29 f0       	breq	.+10     	; 0xbb6 <gfx_mono_generic_draw_circle+0xe4>
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
     bac:	4a 2d       	mov	r20, r10
     bae:	6a 81       	ldd	r22, Y+2	; 0x02
     bb0:	69 0d       	add	r22, r9
     bb2:	8d 2d       	mov	r24, r13
     bb4:	5c d1       	rcall	.+696    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT6) {
     bb6:	f9 81       	ldd	r31, Y+1	; 0x01
     bb8:	ff 23       	and	r31, r31
     bba:	29 f0       	breq	.+10     	; 0xbc6 <gfx_mono_generic_draw_circle+0xf4>
			gfx_mono_draw_pixel(x + offset_x, y + offset_y, color);
     bbc:	4a 2d       	mov	r20, r10
     bbe:	6a 81       	ldd	r22, Y+2	; 0x02
     bc0:	69 0d       	add	r22, r9
     bc2:	81 2f       	mov	r24, r17
     bc4:	54 d1       	rcall	.+680    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT7) {
     bc6:	00 23       	and	r16, r16
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <gfx_mono_generic_draw_circle+0x102>
			gfx_mono_draw_pixel(x + offset_y, y + offset_x, color);
     bca:	4a 2d       	mov	r20, r10
     bcc:	6b 2d       	mov	r22, r11
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	88 0d       	add	r24, r8
     bd2:	4d d1       	rcall	.+666    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     bd4:	ff 20       	and	r15, r15
     bd6:	5c f4       	brge	.+22     	; 0xbee <gfx_mono_generic_draw_circle+0x11c>
			error += ((offset_x << 2) + 6);
     bd8:	2b 81       	ldd	r18, Y+3	; 0x03
     bda:	82 2f       	mov	r24, r18
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	06 96       	adiw	r24, 0x06	; 6
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0f c0       	rjmp	.+30     	; 0xc0c <gfx_mono_generic_draw_circle+0x13a>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     bee:	eb 81       	ldd	r30, Y+3	; 0x03
     bf0:	8e 2f       	mov	r24, r30
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	fa 81       	ldd	r31, Y+2	; 0x02
     bf6:	8f 1b       	sub	r24, r31
     bf8:	91 09       	sbc	r25, r1
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	0a 96       	adiw	r24, 0x0a	; 10
     c04:	e8 0e       	add	r14, r24
     c06:	f9 1e       	adc	r15, r25
			--offset_y;
     c08:	f1 50       	subi	r31, 0x01	; 1
     c0a:	fa 83       	std	Y+2, r31	; 0x02
		}

		/* Next X. */
		++offset_x;
     c0c:	2b 81       	ldd	r18, Y+3	; 0x03
     c0e:	2f 5f       	subi	r18, 0xFF	; 255
     c10:	2b 83       	std	Y+3, r18	; 0x03
     c12:	b3 94       	inc	r11
     c14:	1f 5f       	subi	r17, 0xFF	; 255
     c16:	da 94       	dec	r13
     c18:	ca 94       	dec	r12
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	82 17       	cp	r24, r18
     c1e:	08 f0       	brcs	.+2      	; 0xc22 <gfx_mono_generic_draw_circle+0x150>
     c20:	9c cf       	rjmp	.-200    	; 0xb5a <gfx_mono_generic_draw_circle+0x88>
		}

		/* Next X. */
		++offset_x;
	}
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	df 90       	pop	r13
     c36:	cf 90       	pop	r12
     c38:	bf 90       	pop	r11
     c3a:	af 90       	pop	r10
     c3c:	9f 90       	pop	r9
     c3e:	8f 90       	pop	r8
     c40:	7f 90       	pop	r7
     c42:	6f 90       	pop	r6
     c44:	5f 90       	pop	r5
     c46:	4f 90       	pop	r4
     c48:	3f 90       	pop	r3
     c4a:	2f 90       	pop	r2
     c4c:	08 95       	ret

00000c4e <gfx_mono_generic_draw_filled_circle>:
 * \param  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
     c4e:	5f 92       	push	r5
     c50:	6f 92       	push	r6
     c52:	7f 92       	push	r7
     c54:	8f 92       	push	r8
     c56:	9f 92       	push	r9
     c58:	af 92       	push	r10
     c5a:	bf 92       	push	r11
     c5c:	cf 92       	push	r12
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	88 2e       	mov	r8, r24
     c6e:	96 2e       	mov	r9, r22
     c70:	c4 2f       	mov	r28, r20
     c72:	a2 2e       	mov	r10, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     c74:	41 11       	cpse	r20, r1
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <gfx_mono_generic_draw_filled_circle+0x30>
		gfx_mono_draw_pixel(x, y, color);
     c78:	42 2f       	mov	r20, r18
     c7a:	f9 d0       	rcall	.+498    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     c7c:	73 c0       	rjmp	.+230    	; 0xd64 <gfx_mono_generic_draw_filled_circle+0x116>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     c7e:	e4 2e       	mov	r14, r20
     c80:	f1 2c       	mov	r15, r1
     c82:	ee 0c       	add	r14, r14
     c84:	ff 1c       	adc	r15, r15
     c86:	f1 94       	neg	r15
     c88:	e1 94       	neg	r14
     c8a:	f1 08       	sbc	r15, r1
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	e8 0e       	add	r14, r24
     c90:	f1 1c       	adc	r15, r1
     c92:	b6 2e       	mov	r11, r22
     c94:	c8 2c       	mov	r12, r8
     c96:	d8 2c       	mov	r13, r8
     c98:	11 e0       	ldi	r17, 0x01	; 1
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     c9a:	d0 e0       	ldi	r29, 0x00	; 0
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     c9c:	80 2f       	mov	r24, r16
     c9e:	83 70       	andi	r24, 0x03	; 3
     ca0:	58 2e       	mov	r5, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     ca2:	80 2f       	mov	r24, r16
     ca4:	8c 70       	andi	r24, 0x0C	; 12
     ca6:	68 2e       	mov	r6, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     ca8:	80 2f       	mov	r24, r16
     caa:	80 73       	andi	r24, 0x30	; 48
     cac:	78 2e       	mov	r7, r24
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     cae:	00 7c       	andi	r16, 0xC0	; 192
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     cb0:	55 20       	and	r5, r5
     cb2:	69 f0       	breq	.+26     	; 0xcce <gfx_mono_generic_draw_filled_circle+0x80>
			gfx_mono_draw_vertical_line(x + offset_y,
     cb4:	2a 2d       	mov	r18, r10
     cb6:	41 2f       	mov	r20, r17
     cb8:	6b 2d       	mov	r22, r11
     cba:	8c 2f       	mov	r24, r28
     cbc:	88 0d       	add	r24, r8
     cbe:	f3 dd       	rcall	.-1050   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     cc0:	2a 2d       	mov	r18, r10
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	4c 0f       	add	r20, r28
     cc6:	69 2d       	mov	r22, r9
     cc8:	6c 1b       	sub	r22, r28
     cca:	8d 2d       	mov	r24, r13
     ccc:	ec dd       	rcall	.-1064   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     cce:	66 20       	and	r6, r6
     cd0:	69 f0       	breq	.+26     	; 0xcec <gfx_mono_generic_draw_filled_circle+0x9e>
			gfx_mono_draw_vertical_line(x - offset_y,
     cd2:	2a 2d       	mov	r18, r10
     cd4:	41 2f       	mov	r20, r17
     cd6:	6b 2d       	mov	r22, r11
     cd8:	88 2d       	mov	r24, r8
     cda:	8c 1b       	sub	r24, r28
     cdc:	e4 dd       	rcall	.-1080   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     cde:	2a 2d       	mov	r18, r10
     ce0:	41 e0       	ldi	r20, 0x01	; 1
     ce2:	4c 0f       	add	r20, r28
     ce4:	69 2d       	mov	r22, r9
     ce6:	6c 1b       	sub	r22, r28
     ce8:	8c 2d       	mov	r24, r12
     cea:	dd dd       	rcall	.-1094   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     cec:	77 20       	and	r7, r7
     cee:	61 f0       	breq	.+24     	; 0xd08 <gfx_mono_generic_draw_filled_circle+0xba>
			gfx_mono_draw_vertical_line(x - offset_y,
     cf0:	2a 2d       	mov	r18, r10
     cf2:	41 2f       	mov	r20, r17
     cf4:	69 2d       	mov	r22, r9
     cf6:	88 2d       	mov	r24, r8
     cf8:	8c 1b       	sub	r24, r28
     cfa:	d5 dd       	rcall	.-1110   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     cfc:	2a 2d       	mov	r18, r10
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	4c 0f       	add	r20, r28
     d02:	69 2d       	mov	r22, r9
     d04:	8c 2d       	mov	r24, r12
     d06:	cf dd       	rcall	.-1122   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     d08:	00 23       	and	r16, r16
     d0a:	61 f0       	breq	.+24     	; 0xd24 <gfx_mono_generic_draw_filled_circle+0xd6>
			gfx_mono_draw_vertical_line(x + offset_y,
     d0c:	2a 2d       	mov	r18, r10
     d0e:	41 2f       	mov	r20, r17
     d10:	69 2d       	mov	r22, r9
     d12:	8c 2f       	mov	r24, r28
     d14:	88 0d       	add	r24, r8
     d16:	c7 dd       	rcall	.-1138   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     d18:	2a 2d       	mov	r18, r10
     d1a:	41 e0       	ldi	r20, 0x01	; 1
     d1c:	4c 0f       	add	r20, r28
     d1e:	69 2d       	mov	r22, r9
     d20:	8d 2d       	mov	r24, r13
     d22:	c1 dd       	rcall	.-1150   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     d24:	ff 20       	and	r15, r15
     d26:	54 f4       	brge	.+20     	; 0xd3c <gfx_mono_generic_draw_filled_circle+0xee>
			error += ((offset_x << 2) + 6);
     d28:	8d 2f       	mov	r24, r29
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	06 96       	adiw	r24, 0x06	; 6
     d36:	e8 0e       	add	r14, r24
     d38:	f9 1e       	adc	r15, r25
     d3a:	0c c0       	rjmp	.+24     	; 0xd54 <gfx_mono_generic_draw_filled_circle+0x106>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     d3c:	ed 2f       	mov	r30, r29
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	ec 1b       	sub	r30, r28
     d42:	f1 09       	sbc	r31, r1
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	ee 0f       	add	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	3a 96       	adiw	r30, 0x0a	; 10
     d4e:	ee 0e       	add	r14, r30
     d50:	ff 1e       	adc	r15, r31
			--offset_y;
     d52:	c1 50       	subi	r28, 0x01	; 1
		}

		/* Next X. */
		++offset_x;
     d54:	df 5f       	subi	r29, 0xFF	; 255
     d56:	1f 5f       	subi	r17, 0xFF	; 255
     d58:	d3 94       	inc	r13
     d5a:	ca 94       	dec	r12
     d5c:	ba 94       	dec	r11
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
     d5e:	cd 17       	cp	r28, r29
     d60:	08 f0       	brcs	.+2      	; 0xd64 <gfx_mono_generic_draw_filled_circle+0x116>
     d62:	a6 cf       	rjmp	.-180    	; 0xcb0 <gfx_mono_generic_draw_filled_circle+0x62>
		}

		/* Next X. */
		++offset_x;
	}
}
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	df 90       	pop	r13
     d72:	cf 90       	pop	r12
     d74:	bf 90       	pop	r11
     d76:	af 90       	pop	r10
     d78:	9f 90       	pop	r9
     d7a:	8f 90       	pop	r8
     d7c:	7f 90       	pop	r7
     d7e:	6f 90       	pop	r6
     d80:	5f 90       	pop	r5
     d82:	08 95       	ret

00000d84 <gfx_mono_lcd_uc1608_put_page>:
		uint8_t				byte = gfx_mono_lcd_uc1608_get_byte(page, x);

		isSet = (byte & pixel_mask) ?  GFX_PIXEL_SET : GFX_PIXEL_CLR;
	}
	return isSet;
}
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	7c 01       	movw	r14, r24
     d92:	c4 2f       	mov	r28, r20
     d94:	12 2f       	mov	r17, r18
     d96:	89 2b       	or	r24, r25
     d98:	01 f1       	breq	.+64     	; 0xdda <gfx_mono_lcd_uc1608_put_page+0x56>
     d9a:	60 31       	cpi	r22, 0x10	; 16
     d9c:	f0 f4       	brcc	.+60     	; 0xdda <gfx_mono_lcd_uc1608_put_page+0x56>
     d9e:	40 3f       	cpi	r20, 0xF0	; 240
     da0:	e0 f4       	brcc	.+56     	; 0xdda <gfx_mono_lcd_uc1608_put_page+0x56>
     da2:	86 2f       	mov	r24, r22
     da4:	df d5       	rcall	.+3006   	; 0x1964 <lcd_page_set>
     da6:	8c 2f       	mov	r24, r28
     da8:	e3 d5       	rcall	.+3014   	; 0x1970 <lcd_col_set>
     daa:	81 2f       	mov	r24, r17
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	8c 0f       	add	r24, r28
     db0:	91 1d       	adc	r25, r1
     db2:	81 3f       	cpi	r24, 0xF1	; 241
     db4:	91 05       	cpc	r25, r1
     db6:	14 f0       	brlt	.+4      	; 0xdbc <gfx_mono_lcd_uc1608_put_page+0x38>
     db8:	10 ef       	ldi	r17, 0xF0	; 240
     dba:	1c 1b       	sub	r17, r28
     dbc:	11 23       	and	r17, r17
     dbe:	69 f0       	breq	.+26     	; 0xdda <gfx_mono_lcd_uc1608_put_page+0x56>
     dc0:	e7 01       	movw	r28, r14
     dc2:	11 50       	subi	r17, 0x01	; 1
     dc4:	01 2f       	mov	r16, r17
     dc6:	10 e0       	ldi	r17, 0x00	; 0
     dc8:	0f 5f       	subi	r16, 0xFF	; 255
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	0e 0d       	add	r16, r14
     dce:	1f 1d       	adc	r17, r15
     dd0:	89 91       	ld	r24, Y+
     dd2:	69 d5       	rcall	.+2770   	; 0x18a6 <lcd_bus_write_ram>
     dd4:	c0 17       	cp	r28, r16
     dd6:	d1 07       	cpc	r29, r17
     dd8:	d9 f7       	brne	.-10     	; 0xdd0 <gfx_mono_lcd_uc1608_put_page+0x4c>
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	08 95       	ret

00000de8 <gfx_mono_lcd_uc1608_put_byte>:
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	80 31       	cpi	r24, 0x10	; 16
     dee:	48 f4       	brcc	.+18     	; 0xe02 <gfx_mono_lcd_uc1608_put_byte+0x1a>
     df0:	60 3f       	cpi	r22, 0xF0	; 240
     df2:	38 f4       	brcc	.+14     	; 0xe02 <gfx_mono_lcd_uc1608_put_byte+0x1a>
     df4:	d4 2f       	mov	r29, r20
     df6:	c6 2f       	mov	r28, r22
     df8:	b5 d5       	rcall	.+2922   	; 0x1964 <lcd_page_set>
     dfa:	8c 2f       	mov	r24, r28
     dfc:	b9 d5       	rcall	.+2930   	; 0x1970 <lcd_col_set>
     dfe:	8d 2f       	mov	r24, r29
     e00:	52 d5       	rcall	.+2724   	; 0x18a6 <lcd_bus_write_ram>
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <gfx_mono_lcd_uc1608_get_byte>:
     e08:	cf 93       	push	r28
     e0a:	80 31       	cpi	r24, 0x10	; 16
     e0c:	40 f4       	brcc	.+16     	; 0xe1e <gfx_mono_lcd_uc1608_get_byte+0x16>
     e0e:	60 3f       	cpi	r22, 0xF0	; 240
     e10:	40 f4       	brcc	.+16     	; 0xe22 <gfx_mono_lcd_uc1608_get_byte+0x1a>
     e12:	c6 2f       	mov	r28, r22
     e14:	a7 d5       	rcall	.+2894   	; 0x1964 <lcd_page_set>
     e16:	8c 2f       	mov	r24, r28
     e18:	ab d5       	rcall	.+2902   	; 0x1970 <lcd_col_set>
     e1a:	5a d5       	rcall	.+2740   	; 0x18d0 <lcd_bus_read_ram>
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <gfx_mono_lcd_uc1608_get_byte+0x1c>
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <gfx_mono_lcd_uc1608_get_byte+0x1c>
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	cf 91       	pop	r28
     e26:	08 95       	ret

00000e28 <gfx_mono_lcd_uc1608_mask_byte>:
 * \param column     Page offset (x coordinate)
 * \param pixel_mask Mask for pixel operation
 * \param color      Pixel operation
 */
void gfx_mono_lcd_uc1608_mask_byte(gfx_coord_t page, gfx_coord_t column, gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
	uint8_t data = 0;

	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
     e30:	80 31       	cpi	r24, 0x10	; 16
     e32:	c0 f4       	brcc	.+48     	; 0xe64 <gfx_mono_lcd_uc1608_mask_byte+0x3c>
     e34:	60 3f       	cpi	r22, 0xF0	; 240
     e36:	b0 f4       	brcc	.+44     	; 0xe64 <gfx_mono_lcd_uc1608_mask_byte+0x3c>
     e38:	d2 2f       	mov	r29, r18
     e3a:	14 2f       	mov	r17, r20
     e3c:	c6 2f       	mov	r28, r22
		data = gfx_mono_lcd_uc1608_get_byte(page, column);
     e3e:	e4 df       	rcall	.-56     	; 0xe08 <gfx_mono_lcd_uc1608_get_byte>
     e40:	08 2f       	mov	r16, r24

		switch (color) {
     e42:	d1 30       	cpi	r29, 0x01	; 1
     e44:	41 f0       	breq	.+16     	; 0xe56 <gfx_mono_lcd_uc1608_mask_byte+0x2e>
     e46:	18 f0       	brcs	.+6      	; 0xe4e <gfx_mono_lcd_uc1608_mask_byte+0x26>
     e48:	d2 30       	cpi	r29, 0x02	; 2
     e4a:	39 f0       	breq	.+14     	; 0xe5a <gfx_mono_lcd_uc1608_mask_byte+0x32>
     e4c:	07 c0       	rjmp	.+14     	; 0xe5c <gfx_mono_lcd_uc1608_mask_byte+0x34>
			case GFX_PIXEL_CLR:
				data &= ~pixel_mask;
     e4e:	41 2f       	mov	r20, r17
     e50:	40 95       	com	r20
     e52:	04 23       	and	r16, r20
				break;
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <gfx_mono_lcd_uc1608_mask_byte+0x34>

			case GFX_PIXEL_SET:
				data |= pixel_mask;
     e56:	01 2b       	or	r16, r17
				break;
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <gfx_mono_lcd_uc1608_mask_byte+0x34>

			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
     e5a:	01 27       	eor	r16, r17
				break;
		}

		lcd_col_set(column);
     e5c:	8c 2f       	mov	r24, r28
     e5e:	88 d5       	rcall	.+2832   	; 0x1970 <lcd_col_set>
		lcd_bus_write_ram(data);										// Write byte slice to RAM
     e60:	80 2f       	mov	r24, r16
     e62:	21 d5       	rcall	.+2626   	; 0x18a6 <lcd_bus_write_ram>
	}
}
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	08 95       	ret

00000e6e <gfx_mono_lcd_uc1608_draw_pixel>:
 * \param y         Y coordinate of the pixel
 * \param color     Pixel operation.
 */
void gfx_mono_lcd_uc1608_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_mono_color_t color)
{
	if ((x < GFX_MONO_LCD_WIDTH) && (y < GFX_MONO_LCD_HEIGHT)) {
     e6e:	80 3f       	cpi	r24, 0xF0	; 240
     e70:	98 f4       	brcc	.+38     	; 0xe98 <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     e72:	66 23       	and	r22, r22
     e74:	8c f0       	brlt	.+34     	; 0xe98 <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     e76:	24 2f       	mov	r18, r20
     e78:	96 2f       	mov	r25, r22
     e7a:	68 2f       	mov	r22, r24
		gfx_coord_t			page		= y / GFX_MONO_LCD_PIXELS_PER_BYTE;
		gfx_mono_color_t	pixel_mask	= 1 << (y % GFX_MONO_LCD_PIXELS_PER_BYTE);
     e7c:	89 2f       	mov	r24, r25
     e7e:	87 70       	andi	r24, 0x07	; 7
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <gfx_mono_lcd_uc1608_draw_pixel+0x1c>
     e86:	44 0f       	add	r20, r20
     e88:	55 1f       	adc	r21, r21
     e8a:	8a 95       	dec	r24
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <gfx_mono_lcd_uc1608_draw_pixel+0x18>

		gfx_mono_lcd_uc1608_mask_byte(page, x, pixel_mask, color);
     e8e:	89 2f       	mov	r24, r25
     e90:	86 95       	lsr	r24
     e92:	86 95       	lsr	r24
     e94:	86 95       	lsr	r24
     e96:	c8 cf       	rjmp	.-112    	; 0xe28 <gfx_mono_lcd_uc1608_mask_byte>
     e98:	08 95       	ret

00000e9a <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     e9a:	9f 92       	push	r9
     e9c:	af 92       	push	r10
     e9e:	bf 92       	push	r11
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	c8 2f       	mov	r28, r24
     eb2:	e6 2e       	mov	r14, r22
     eb4:	b4 2e       	mov	r11, r20
     eb6:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     eb8:	00 e0       	ldi	r16, 0x00	; 0
     eba:	f9 01       	movw	r30, r18
     ebc:	24 81       	ldd	r18, Z+4	; 0x04
     ebe:	43 81       	ldd	r20, Z+3	; 0x03
     ec0:	6b 2d       	mov	r22, r11
     ec2:	8e 2d       	mov	r24, r14
     ec4:	ec dd       	rcall	.-1064   	; 0xa9e <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     ec6:	f6 01       	movw	r30, r12
     ec8:	80 81       	ld	r24, Z
     eca:	81 11       	cpse	r24, r1
     ecc:	3a c0       	rjmp	.+116    	; 0xf42 <gfx_mono_draw_char+0xa8>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     ece:	83 81       	ldd	r24, Z+3	; 0x03
     ed0:	28 2f       	mov	r18, r24
     ed2:	26 95       	lsr	r18
     ed4:	26 95       	lsr	r18
     ed6:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     ed8:	87 70       	andi	r24, 0x07	; 7
     eda:	09 f0       	breq	.+2      	; 0xede <gfx_mono_draw_char+0x44>
		char_row_size++;
     edc:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     ede:	f6 01       	movw	r30, r12
     ee0:	a4 80       	ldd	r10, Z+4	; 0x04
     ee2:	2a 9d       	mul	r18, r10
     ee4:	90 01       	movw	r18, r0
     ee6:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
     ee8:	8c 2f       	mov	r24, r28
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	45 81       	ldd	r20, Z+5	; 0x05
     eee:	84 1b       	sub	r24, r20
     ef0:	91 09       	sbc	r25, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
     ef2:	28 9f       	mul	r18, r24
     ef4:	a0 01       	movw	r20, r0
     ef6:	29 9f       	mul	r18, r25
     ef8:	50 0d       	add	r21, r0
     efa:	38 9f       	mul	r19, r24
     efc:	50 0d       	add	r21, r0
     efe:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     f00:	01 81       	ldd	r16, Z+1	; 0x01
     f02:	12 81       	ldd	r17, Z+2	; 0x02
     f04:	04 0f       	add	r16, r20
     f06:	15 1f       	adc	r17, r21

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     f08:	91 2c       	mov	r9, r1
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     f0a:	f6 01       	movw	r30, r12
     f0c:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     f0e:	ff 20       	and	r15, r15
     f10:	a1 f0       	breq	.+40     	; 0xf3a <gfx_mono_draw_char+0xa0>
     f12:	d9 2d       	mov	r29, r9
     f14:	c9 2d       	mov	r28, r9
     f16:	8c 2f       	mov	r24, r28
     f18:	8e 0d       	add	r24, r14
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     f1a:	9c 2f       	mov	r25, r28
     f1c:	97 70       	andi	r25, 0x07	; 7
     f1e:	21 f4       	brne	.+8      	; 0xf28 <gfx_mono_draw_char+0x8e>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     f20:	f8 01       	movw	r30, r16
     f22:	d4 91       	lpm	r29, Z
				glyph_data++;
     f24:	0f 5f       	subi	r16, 0xFF	; 255
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     f28:	dd 23       	and	r29, r29
     f2a:	1c f4       	brge	.+6      	; 0xf32 <gfx_mono_draw_char+0x98>
				gfx_mono_draw_pixel(inc_x, inc_y,
     f2c:	41 e0       	ldi	r20, 0x01	; 1
     f2e:	6b 2d       	mov	r22, r11
     f30:	9e df       	rcall	.-196    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     f32:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     f34:	cf 5f       	subi	r28, 0xFF	; 255
     f36:	cf 11       	cpse	r28, r15
     f38:	ee cf       	rjmp	.-36     	; 0xf16 <gfx_mono_draw_char+0x7c>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     f3a:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     f3c:	aa 94       	dec	r10
	} while (rows_left > 0);
     f3e:	a1 10       	cpse	r10, r1
     f40:	e4 cf       	rjmp	.-56     	; 0xf0a <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	08 95       	ret

00000f5a <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	04 2f       	mov	r16, r20
     f6a:	79 01       	movw	r14, r18
     f6c:	ec 01       	movw	r28, r24
     f6e:	16 2f       	mov	r17, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     f70:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     f72:	89 91       	ld	r24, Y+
     f74:	8a 30       	cpi	r24, 0x0A	; 10
     f76:	31 f4       	brne	.+12     	; 0xf84 <gfx_mono_draw_string+0x2a>
     f78:	f7 01       	movw	r30, r14
     f7a:	84 81       	ldd	r24, Z+4	; 0x04
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
     f7e:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     f80:	1d 2d       	mov	r17, r13
     f82:	09 c0       	rjmp	.+18     	; 0xf96 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     f84:	8d 30       	cpi	r24, 0x0D	; 13
     f86:	39 f0       	breq	.+14     	; 0xf96 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     f88:	97 01       	movw	r18, r14
     f8a:	40 2f       	mov	r20, r16
     f8c:	61 2f       	mov	r22, r17
     f8e:	85 df       	rcall	.-246    	; 0xe9a <gfx_mono_draw_char>
			x += font->width;
     f90:	f7 01       	movw	r30, r14
     f92:	83 81       	ldd	r24, Z+3	; 0x03
     f94:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     f96:	88 81       	ld	r24, Y
     f98:	81 11       	cpse	r24, r1
     f9a:	eb cf       	rjmp	.-42     	; 0xf72 <gfx_mono_draw_string+0x18>
}
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	df 90       	pop	r13
     faa:	08 95       	ret

00000fac <asm_break>:

/* Helper functions */

void asm_break(void)
{
	__asm__ __volatile__ ("break" ::: "memory");
     fac:	98 95       	break
	nop();
     fae:	00 00       	nop
     fb0:	08 95       	ret

00000fb2 <__vector_1>:
	asm_break();
}


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
     fb2:	1f 92       	push	r1
     fb4:	0f 92       	push	r0
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	0f 92       	push	r0
     fba:	11 24       	eor	r1, r1
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     fd4:	eb df       	rcall	.-42     	; 0xfac <asm_break>


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
	s_bad_interrupt();
}
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	bf 91       	pop	r27
     fdc:	af 91       	pop	r26
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	7f 91       	pop	r23
     fe4:	6f 91       	pop	r22
     fe6:	5f 91       	pop	r21
     fe8:	4f 91       	pop	r20
     fea:	3f 91       	pop	r19
     fec:	2f 91       	pop	r18
     fee:	0f 90       	pop	r0
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	0f 90       	pop	r0
     ff4:	1f 90       	pop	r1
     ff6:	18 95       	reti

00000ff8 <__vector_2>:

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
     ff8:	1f 92       	push	r1
     ffa:	0f 92       	push	r0
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	0f 92       	push	r0
    1000:	11 24       	eor	r1, r1
    1002:	2f 93       	push	r18
    1004:	3f 93       	push	r19
    1006:	4f 93       	push	r20
    1008:	5f 93       	push	r21
    100a:	6f 93       	push	r22
    100c:	7f 93       	push	r23
    100e:	8f 93       	push	r24
    1010:	9f 93       	push	r25
    1012:	af 93       	push	r26
    1014:	bf 93       	push	r27
    1016:	ef 93       	push	r30
    1018:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    101a:	c8 df       	rcall	.-112    	; 0xfac <asm_break>
}

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
	s_bad_interrupt();
}
    101c:	ff 91       	pop	r31
    101e:	ef 91       	pop	r30
    1020:	bf 91       	pop	r27
    1022:	af 91       	pop	r26
    1024:	9f 91       	pop	r25
    1026:	8f 91       	pop	r24
    1028:	7f 91       	pop	r23
    102a:	6f 91       	pop	r22
    102c:	5f 91       	pop	r21
    102e:	4f 91       	pop	r20
    1030:	3f 91       	pop	r19
    1032:	2f 91       	pop	r18
    1034:	0f 90       	pop	r0
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	0f 90       	pop	r0
    103a:	1f 90       	pop	r1
    103c:	18 95       	reti

0000103e <__vector_3>:

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
    103e:	1f 92       	push	r1
    1040:	0f 92       	push	r0
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	0f 92       	push	r0
    1046:	11 24       	eor	r1, r1
    1048:	2f 93       	push	r18
    104a:	3f 93       	push	r19
    104c:	4f 93       	push	r20
    104e:	5f 93       	push	r21
    1050:	6f 93       	push	r22
    1052:	7f 93       	push	r23
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
    1058:	af 93       	push	r26
    105a:	bf 93       	push	r27
    105c:	ef 93       	push	r30
    105e:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1060:	a5 df       	rcall	.-182    	; 0xfac <asm_break>
}

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
	s_bad_interrupt();
}
    1062:	ff 91       	pop	r31
    1064:	ef 91       	pop	r30
    1066:	bf 91       	pop	r27
    1068:	af 91       	pop	r26
    106a:	9f 91       	pop	r25
    106c:	8f 91       	pop	r24
    106e:	7f 91       	pop	r23
    1070:	6f 91       	pop	r22
    1072:	5f 91       	pop	r21
    1074:	4f 91       	pop	r20
    1076:	3f 91       	pop	r19
    1078:	2f 91       	pop	r18
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	0f 90       	pop	r0
    1080:	1f 90       	pop	r1
    1082:	18 95       	reti

00001084 <__vector_4>:

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
    1084:	1f 92       	push	r1
    1086:	0f 92       	push	r0
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	0f 92       	push	r0
    108c:	11 24       	eor	r1, r1
    108e:	2f 93       	push	r18
    1090:	3f 93       	push	r19
    1092:	4f 93       	push	r20
    1094:	5f 93       	push	r21
    1096:	6f 93       	push	r22
    1098:	7f 93       	push	r23
    109a:	8f 93       	push	r24
    109c:	9f 93       	push	r25
    109e:	af 93       	push	r26
    10a0:	bf 93       	push	r27
    10a2:	ef 93       	push	r30
    10a4:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    10a6:	82 df       	rcall	.-252    	; 0xfac <asm_break>
}

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
	s_bad_interrupt();
}
    10a8:	ff 91       	pop	r31
    10aa:	ef 91       	pop	r30
    10ac:	bf 91       	pop	r27
    10ae:	af 91       	pop	r26
    10b0:	9f 91       	pop	r25
    10b2:	8f 91       	pop	r24
    10b4:	7f 91       	pop	r23
    10b6:	6f 91       	pop	r22
    10b8:	5f 91       	pop	r21
    10ba:	4f 91       	pop	r20
    10bc:	3f 91       	pop	r19
    10be:	2f 91       	pop	r18
    10c0:	0f 90       	pop	r0
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	0f 90       	pop	r0
    10c6:	1f 90       	pop	r1
    10c8:	18 95       	reti

000010ca <__vector_5>:

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
    10ca:	1f 92       	push	r1
    10cc:	0f 92       	push	r0
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	0f 92       	push	r0
    10d2:	11 24       	eor	r1, r1
    10d4:	2f 93       	push	r18
    10d6:	3f 93       	push	r19
    10d8:	4f 93       	push	r20
    10da:	5f 93       	push	r21
    10dc:	6f 93       	push	r22
    10de:	7f 93       	push	r23
    10e0:	8f 93       	push	r24
    10e2:	9f 93       	push	r25
    10e4:	af 93       	push	r26
    10e6:	bf 93       	push	r27
    10e8:	ef 93       	push	r30
    10ea:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    10ec:	5f df       	rcall	.-322    	; 0xfac <asm_break>
}

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
	s_bad_interrupt();
}
    10ee:	ff 91       	pop	r31
    10f0:	ef 91       	pop	r30
    10f2:	bf 91       	pop	r27
    10f4:	af 91       	pop	r26
    10f6:	9f 91       	pop	r25
    10f8:	8f 91       	pop	r24
    10fa:	7f 91       	pop	r23
    10fc:	6f 91       	pop	r22
    10fe:	5f 91       	pop	r21
    1100:	4f 91       	pop	r20
    1102:	3f 91       	pop	r19
    1104:	2f 91       	pop	r18
    1106:	0f 90       	pop	r0
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	0f 90       	pop	r0
    110c:	1f 90       	pop	r1
    110e:	18 95       	reti

00001110 <__vector_6>:

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
    1110:	1f 92       	push	r1
    1112:	0f 92       	push	r0
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	0f 92       	push	r0
    1118:	11 24       	eor	r1, r1
    111a:	2f 93       	push	r18
    111c:	3f 93       	push	r19
    111e:	4f 93       	push	r20
    1120:	5f 93       	push	r21
    1122:	6f 93       	push	r22
    1124:	7f 93       	push	r23
    1126:	8f 93       	push	r24
    1128:	9f 93       	push	r25
    112a:	af 93       	push	r26
    112c:	bf 93       	push	r27
    112e:	ef 93       	push	r30
    1130:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1132:	3c df       	rcall	.-392    	; 0xfac <asm_break>
}

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
	s_bad_interrupt();
}
    1134:	ff 91       	pop	r31
    1136:	ef 91       	pop	r30
    1138:	bf 91       	pop	r27
    113a:	af 91       	pop	r26
    113c:	9f 91       	pop	r25
    113e:	8f 91       	pop	r24
    1140:	7f 91       	pop	r23
    1142:	6f 91       	pop	r22
    1144:	5f 91       	pop	r21
    1146:	4f 91       	pop	r20
    1148:	3f 91       	pop	r19
    114a:	2f 91       	pop	r18
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

00001156 <__vector_7>:

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
    1156:	1f 92       	push	r1
    1158:	0f 92       	push	r0
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	0f 92       	push	r0
    115e:	11 24       	eor	r1, r1
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	ef 93       	push	r30
    1176:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1178:	19 df       	rcall	.-462    	; 0xfac <asm_break>
}

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
	s_bad_interrupt();
}
    117a:	ff 91       	pop	r31
    117c:	ef 91       	pop	r30
    117e:	bf 91       	pop	r27
    1180:	af 91       	pop	r26
    1182:	9f 91       	pop	r25
    1184:	8f 91       	pop	r24
    1186:	7f 91       	pop	r23
    1188:	6f 91       	pop	r22
    118a:	5f 91       	pop	r21
    118c:	4f 91       	pop	r20
    118e:	3f 91       	pop	r19
    1190:	2f 91       	pop	r18
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	0f 90       	pop	r0
    1198:	1f 90       	pop	r1
    119a:	18 95       	reti

0000119c <__vector_8>:

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
    119c:	1f 92       	push	r1
    119e:	0f 92       	push	r0
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	0f 92       	push	r0
    11a4:	11 24       	eor	r1, r1
    11a6:	2f 93       	push	r18
    11a8:	3f 93       	push	r19
    11aa:	4f 93       	push	r20
    11ac:	5f 93       	push	r21
    11ae:	6f 93       	push	r22
    11b0:	7f 93       	push	r23
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    11be:	f6 de       	rcall	.-532    	; 0xfac <asm_break>
}

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
	s_bad_interrupt();
}
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	bf 91       	pop	r27
    11c6:	af 91       	pop	r26
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	7f 91       	pop	r23
    11ce:	6f 91       	pop	r22
    11d0:	5f 91       	pop	r21
    11d2:	4f 91       	pop	r20
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <__vector_9>:

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	ef 93       	push	r30
    1202:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1204:	d3 de       	rcall	.-602    	; 0xfac <asm_break>
}

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
	s_bad_interrupt();
}
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	7f 91       	pop	r23
    1214:	6f 91       	pop	r22
    1216:	5f 91       	pop	r21
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <__vector_10>:

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    124a:	b0 de       	rcall	.-672    	; 0xfac <asm_break>
}

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
	s_bad_interrupt();
}
    124c:	ff 91       	pop	r31
    124e:	ef 91       	pop	r30
    1250:	bf 91       	pop	r27
    1252:	af 91       	pop	r26
    1254:	9f 91       	pop	r25
    1256:	8f 91       	pop	r24
    1258:	7f 91       	pop	r23
    125a:	6f 91       	pop	r22
    125c:	5f 91       	pop	r21
    125e:	4f 91       	pop	r20
    1260:	3f 91       	pop	r19
    1262:	2f 91       	pop	r18
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	0f 90       	pop	r0
    126a:	1f 90       	pop	r1
    126c:	18 95       	reti

0000126e <__vector_11>:

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
    126e:	1f 92       	push	r1
    1270:	0f 92       	push	r0
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	0f 92       	push	r0
    1276:	11 24       	eor	r1, r1
    1278:	2f 93       	push	r18
    127a:	3f 93       	push	r19
    127c:	4f 93       	push	r20
    127e:	5f 93       	push	r21
    1280:	6f 93       	push	r22
    1282:	7f 93       	push	r23
    1284:	8f 93       	push	r24
    1286:	9f 93       	push	r25
    1288:	af 93       	push	r26
    128a:	bf 93       	push	r27
    128c:	ef 93       	push	r30
    128e:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1290:	8d de       	rcall	.-742    	; 0xfac <asm_break>
}

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
	s_bad_interrupt();
}
    1292:	ff 91       	pop	r31
    1294:	ef 91       	pop	r30
    1296:	bf 91       	pop	r27
    1298:	af 91       	pop	r26
    129a:	9f 91       	pop	r25
    129c:	8f 91       	pop	r24
    129e:	7f 91       	pop	r23
    12a0:	6f 91       	pop	r22
    12a2:	5f 91       	pop	r21
    12a4:	4f 91       	pop	r20
    12a6:	3f 91       	pop	r19
    12a8:	2f 91       	pop	r18
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	0f 90       	pop	r0
    12b0:	1f 90       	pop	r1
    12b2:	18 95       	reti

000012b4 <__vector_12>:

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
    12b4:	1f 92       	push	r1
    12b6:	0f 92       	push	r0
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	0f 92       	push	r0
    12bc:	11 24       	eor	r1, r1
    12be:	2f 93       	push	r18
    12c0:	3f 93       	push	r19
    12c2:	4f 93       	push	r20
    12c4:	5f 93       	push	r21
    12c6:	6f 93       	push	r22
    12c8:	7f 93       	push	r23
    12ca:	8f 93       	push	r24
    12cc:	9f 93       	push	r25
    12ce:	af 93       	push	r26
    12d0:	bf 93       	push	r27
    12d2:	ef 93       	push	r30
    12d4:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    12d6:	6a de       	rcall	.-812    	; 0xfac <asm_break>
}

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
	s_bad_interrupt();
}
    12d8:	ff 91       	pop	r31
    12da:	ef 91       	pop	r30
    12dc:	bf 91       	pop	r27
    12de:	af 91       	pop	r26
    12e0:	9f 91       	pop	r25
    12e2:	8f 91       	pop	r24
    12e4:	7f 91       	pop	r23
    12e6:	6f 91       	pop	r22
    12e8:	5f 91       	pop	r21
    12ea:	4f 91       	pop	r20
    12ec:	3f 91       	pop	r19
    12ee:	2f 91       	pop	r18
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <__vector_13>:

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	8f 93       	push	r24
    1306:	9f 93       	push	r25
    1308:	af 93       	push	r26
    130a:	bf 93       	push	r27
	++g_timer_abs_msb;
    130c:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <g_timer_abs_msb>
    1310:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <g_timer_abs_msb+0x1>
    1314:	a0 91 72 03 	lds	r26, 0x0372	; 0x800372 <g_timer_abs_msb+0x2>
    1318:	b0 91 73 03 	lds	r27, 0x0373	; 0x800373 <g_timer_abs_msb+0x3>
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	a1 1d       	adc	r26, r1
    1320:	b1 1d       	adc	r27, r1
    1322:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <g_timer_abs_msb>
    1326:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <g_timer_abs_msb+0x1>
    132a:	a0 93 72 03 	sts	0x0372, r26	; 0x800372 <g_timer_abs_msb+0x2>
    132e:	b0 93 73 03 	sts	0x0373, r27	; 0x800373 <g_timer_abs_msb+0x3>
}
    1332:	bf 91       	pop	r27
    1334:	af 91       	pop	r26
    1336:	9f 91       	pop	r25
    1338:	8f 91       	pop	r24
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <__vector_14>:

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	2f 93       	push	r18
    1350:	3f 93       	push	r19
    1352:	4f 93       	push	r20
    1354:	5f 93       	push	r21
    1356:	6f 93       	push	r22
    1358:	7f 93       	push	r23
    135a:	8f 93       	push	r24
    135c:	9f 93       	push	r25
    135e:	af 93       	push	r26
    1360:	bf 93       	push	r27
    1362:	ef 93       	push	r30
    1364:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1366:	22 de       	rcall	.-956    	; 0xfac <asm_break>
}

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
	s_bad_interrupt();
}
    1368:	ff 91       	pop	r31
    136a:	ef 91       	pop	r30
    136c:	bf 91       	pop	r27
    136e:	af 91       	pop	r26
    1370:	9f 91       	pop	r25
    1372:	8f 91       	pop	r24
    1374:	7f 91       	pop	r23
    1376:	6f 91       	pop	r22
    1378:	5f 91       	pop	r21
    137a:	4f 91       	pop	r20
    137c:	3f 91       	pop	r19
    137e:	2f 91       	pop	r18
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_15>:

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	2f 93       	push	r18
    1396:	3f 93       	push	r19
    1398:	4f 93       	push	r20
    139a:	5f 93       	push	r21
    139c:	6f 93       	push	r22
    139e:	7f 93       	push	r23
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	af 93       	push	r26
    13a6:	bf 93       	push	r27
    13a8:	ef 93       	push	r30
    13aa:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    13ac:	ff dd       	rcall	.-1026   	; 0xfac <asm_break>
}

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
	s_bad_interrupt();
}
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	0f 90       	pop	r0
    13cc:	1f 90       	pop	r1
    13ce:	18 95       	reti

000013d0 <__vector_16>:

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
    13d0:	1f 92       	push	r1
    13d2:	0f 92       	push	r0
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	0f 92       	push	r0
    13d8:	11 24       	eor	r1, r1
    13da:	2f 93       	push	r18
    13dc:	3f 93       	push	r19
    13de:	4f 93       	push	r20
    13e0:	5f 93       	push	r21
    13e2:	6f 93       	push	r22
    13e4:	7f 93       	push	r23
    13e6:	8f 93       	push	r24
    13e8:	9f 93       	push	r25
    13ea:	af 93       	push	r26
    13ec:	bf 93       	push	r27
    13ee:	ef 93       	push	r30
    13f0:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    13f2:	dc dd       	rcall	.-1096   	; 0xfac <asm_break>
}

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
	s_bad_interrupt();
}
    13f4:	ff 91       	pop	r31
    13f6:	ef 91       	pop	r30
    13f8:	bf 91       	pop	r27
    13fa:	af 91       	pop	r26
    13fc:	9f 91       	pop	r25
    13fe:	8f 91       	pop	r24
    1400:	7f 91       	pop	r23
    1402:	6f 91       	pop	r22
    1404:	5f 91       	pop	r21
    1406:	4f 91       	pop	r20
    1408:	3f 91       	pop	r19
    140a:	2f 91       	pop	r18
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <__vector_17>:

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	2f 93       	push	r18
    1422:	3f 93       	push	r19
    1424:	4f 93       	push	r20
    1426:	5f 93       	push	r21
    1428:	6f 93       	push	r22
    142a:	7f 93       	push	r23
    142c:	8f 93       	push	r24
    142e:	9f 93       	push	r25
    1430:	af 93       	push	r26
    1432:	bf 93       	push	r27
    1434:	ef 93       	push	r30
    1436:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1438:	b9 dd       	rcall	.-1166   	; 0xfac <asm_break>
}

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
	s_bad_interrupt();
}
    143a:	ff 91       	pop	r31
    143c:	ef 91       	pop	r30
    143e:	bf 91       	pop	r27
    1440:	af 91       	pop	r26
    1442:	9f 91       	pop	r25
    1444:	8f 91       	pop	r24
    1446:	7f 91       	pop	r23
    1448:	6f 91       	pop	r22
    144a:	5f 91       	pop	r21
    144c:	4f 91       	pop	r20
    144e:	3f 91       	pop	r19
    1450:	2f 91       	pop	r18
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <__vector_18>:

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
    145c:	1f 92       	push	r1
    145e:	0f 92       	push	r0
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	0f 92       	push	r0
    1464:	11 24       	eor	r1, r1
    1466:	2f 93       	push	r18
    1468:	3f 93       	push	r19
    146a:	4f 93       	push	r20
    146c:	5f 93       	push	r21
    146e:	6f 93       	push	r22
    1470:	7f 93       	push	r23
    1472:	8f 93       	push	r24
    1474:	9f 93       	push	r25
    1476:	af 93       	push	r26
    1478:	bf 93       	push	r27
    147a:	ef 93       	push	r30
    147c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    147e:	96 dd       	rcall	.-1236   	; 0xfac <asm_break>
}

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
	s_bad_interrupt();
}
    1480:	ff 91       	pop	r31
    1482:	ef 91       	pop	r30
    1484:	bf 91       	pop	r27
    1486:	af 91       	pop	r26
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	7f 91       	pop	r23
    148e:	6f 91       	pop	r22
    1490:	5f 91       	pop	r21
    1492:	4f 91       	pop	r20
    1494:	3f 91       	pop	r19
    1496:	2f 91       	pop	r18
    1498:	0f 90       	pop	r0
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	0f 90       	pop	r0
    149e:	1f 90       	pop	r1
    14a0:	18 95       	reti

000014a2 <__vector_19>:

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
    14a2:	1f 92       	push	r1
    14a4:	0f 92       	push	r0
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	0f 92       	push	r0
    14aa:	11 24       	eor	r1, r1
    14ac:	2f 93       	push	r18
    14ae:	3f 93       	push	r19
    14b0:	4f 93       	push	r20
    14b2:	5f 93       	push	r21
    14b4:	6f 93       	push	r22
    14b6:	7f 93       	push	r23
    14b8:	8f 93       	push	r24
    14ba:	9f 93       	push	r25
    14bc:	af 93       	push	r26
    14be:	bf 93       	push	r27
    14c0:	ef 93       	push	r30
    14c2:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    14c4:	73 dd       	rcall	.-1306   	; 0xfac <asm_break>
}

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
	s_bad_interrupt();
}
    14c6:	ff 91       	pop	r31
    14c8:	ef 91       	pop	r30
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	7f 91       	pop	r23
    14d4:	6f 91       	pop	r22
    14d6:	5f 91       	pop	r21
    14d8:	4f 91       	pop	r20
    14da:	3f 91       	pop	r19
    14dc:	2f 91       	pop	r18
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0
    14e4:	1f 90       	pop	r1
    14e6:	18 95       	reti

000014e8 <__vector_20>:

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
    14e8:	1f 92       	push	r1
    14ea:	0f 92       	push	r0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	0f 92       	push	r0
    14f0:	11 24       	eor	r1, r1
    14f2:	2f 93       	push	r18
    14f4:	3f 93       	push	r19
    14f6:	4f 93       	push	r20
    14f8:	5f 93       	push	r21
    14fa:	6f 93       	push	r22
    14fc:	7f 93       	push	r23
    14fe:	8f 93       	push	r24
    1500:	9f 93       	push	r25
    1502:	af 93       	push	r26
    1504:	bf 93       	push	r27
    1506:	ef 93       	push	r30
    1508:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    150a:	50 dd       	rcall	.-1376   	; 0xfac <asm_break>
}

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
	s_bad_interrupt();
}
    150c:	ff 91       	pop	r31
    150e:	ef 91       	pop	r30
    1510:	bf 91       	pop	r27
    1512:	af 91       	pop	r26
    1514:	9f 91       	pop	r25
    1516:	8f 91       	pop	r24
    1518:	7f 91       	pop	r23
    151a:	6f 91       	pop	r22
    151c:	5f 91       	pop	r21
    151e:	4f 91       	pop	r20
    1520:	3f 91       	pop	r19
    1522:	2f 91       	pop	r18
    1524:	0f 90       	pop	r0
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	0f 90       	pop	r0
    152a:	1f 90       	pop	r1
    152c:	18 95       	reti

0000152e <__vector_21__bottom>:
	__vector_21__bottom(reason, adc_val, adc_ldr_last, adc_temp_last);
}

/* do not static this function to avoid code inlining that would inherit many push operations in the critical section */
void __vector_21__bottom(uint8_t reason, uint16_t adc_val, uint16_t adc_ldr_last, uint16_t adc_temp_last)
{
    152e:	cf 92       	push	r12
    1530:	df 92       	push	r13
    1532:	ef 92       	push	r14
    1534:	ff 92       	push	r15
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	eb 01       	movw	r28, r22
	/* Low pass filtering and enhancing the data depth */
	if (reason == ADC_STATE_VLD_LDR) {
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	e1 f5       	brne	.+120    	; 0x15b8 <__vector_21__bottom+0x8a>
		float calc = g_adc_ldr ?  0.998f * g_adc_ldr + 0.002f * adc_val : adc_val;			// load with initial value if none is set before
    1540:	c0 90 6b 03 	lds	r12, 0x036B	; 0x80036b <g_adc_ldr>
    1544:	d0 90 6c 03 	lds	r13, 0x036C	; 0x80036c <g_adc_ldr+0x1>
    1548:	e0 90 6d 03 	lds	r14, 0x036D	; 0x80036d <g_adc_ldr+0x2>
    154c:	f0 90 6e 03 	lds	r15, 0x036E	; 0x80036e <g_adc_ldr+0x3>
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	a9 01       	movw	r20, r18
    1556:	c7 01       	movw	r24, r14
    1558:	b6 01       	movw	r22, r12
    155a:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__cmpsf2>
    155e:	88 23       	and	r24, r24
    1560:	e1 f0       	breq	.+56     	; 0x159a <__vector_21__bottom+0x6c>
    1562:	2e ee       	ldi	r18, 0xEE	; 238
    1564:	3c e7       	ldi	r19, 0x7C	; 124
    1566:	4f e7       	ldi	r20, 0x7F	; 127
    1568:	5f e3       	ldi	r21, 0x3F	; 63
    156a:	c7 01       	movw	r24, r14
    156c:	b6 01       	movw	r22, r12
    156e:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__mulsf3>
    1572:	6b 01       	movw	r12, r22
    1574:	7c 01       	movw	r14, r24
    1576:	be 01       	movw	r22, r28
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__floatunsisf>
    1580:	2f e6       	ldi	r18, 0x6F	; 111
    1582:	32 e1       	ldi	r19, 0x12	; 18
    1584:	43 e0       	ldi	r20, 0x03	; 3
    1586:	5b e3       	ldi	r21, 0x3B	; 59
    1588:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__mulsf3>
    158c:	9b 01       	movw	r18, r22
    158e:	ac 01       	movw	r20, r24
    1590:	c7 01       	movw	r24, r14
    1592:	b6 01       	movw	r22, r12
    1594:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__addsf3>
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <__vector_21__bottom+0x76>
    159a:	be 01       	movw	r22, r28
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__floatunsisf>

		cli();
    15a4:	f8 94       	cli
		g_adc_ldr = calc;
    15a6:	60 93 6b 03 	sts	0x036B, r22	; 0x80036b <g_adc_ldr>
    15aa:	70 93 6c 03 	sts	0x036C, r23	; 0x80036c <g_adc_ldr+0x1>
    15ae:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <g_adc_ldr+0x2>
    15b2:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <g_adc_ldr+0x3>
    15b6:	3d c0       	rjmp	.+122    	; 0x1632 <__vector_21__bottom+0x104>

	} else if (reason == ADC_STATE_VLD_TEMP) {
    15b8:	83 30       	cpi	r24, 0x03	; 3
    15ba:	d9 f5       	brne	.+118    	; 0x1632 <__vector_21__bottom+0x104>
		float calc = g_adc_temp ?  0.9995f * g_adc_temp + 0.0005f * adc_val : adc_val;		// load with initial value if none is set before
    15bc:	c0 90 63 03 	lds	r12, 0x0363	; 0x800363 <g_adc_temp>
    15c0:	d0 90 64 03 	lds	r13, 0x0364	; 0x800364 <g_adc_temp+0x1>
    15c4:	e0 90 65 03 	lds	r14, 0x0365	; 0x800365 <g_adc_temp+0x2>
    15c8:	f0 90 66 03 	lds	r15, 0x0366	; 0x800366 <g_adc_temp+0x3>
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	a9 01       	movw	r20, r18
    15d2:	c7 01       	movw	r24, r14
    15d4:	b6 01       	movw	r22, r12
    15d6:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__cmpsf2>
    15da:	88 23       	and	r24, r24
    15dc:	e1 f0       	breq	.+56     	; 0x1616 <__vector_21__bottom+0xe8>
    15de:	2b e3       	ldi	r18, 0x3B	; 59
    15e0:	3f ed       	ldi	r19, 0xDF	; 223
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	c7 01       	movw	r24, r14
    15e8:	b6 01       	movw	r22, r12
    15ea:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__mulsf3>
    15ee:	6b 01       	movw	r12, r22
    15f0:	7c 01       	movw	r14, r24
    15f2:	be 01       	movw	r22, r28
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__floatunsisf>
    15fc:	2f e6       	ldi	r18, 0x6F	; 111
    15fe:	32 e1       	ldi	r19, 0x12	; 18
    1600:	43 e0       	ldi	r20, 0x03	; 3
    1602:	5a e3       	ldi	r21, 0x3A	; 58
    1604:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__mulsf3>
    1608:	9b 01       	movw	r18, r22
    160a:	ac 01       	movw	r20, r24
    160c:	c7 01       	movw	r24, r14
    160e:	b6 01       	movw	r22, r12
    1610:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__addsf3>
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <__vector_21__bottom+0xf2>
    1616:	be 01       	movw	r22, r28
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__floatunsisf>

		cli();
    1620:	f8 94       	cli
		g_adc_temp = calc;
    1622:	60 93 63 03 	sts	0x0363, r22	; 0x800363 <g_adc_temp>
    1626:	70 93 64 03 	sts	0x0364, r23	; 0x800364 <g_adc_temp+0x1>
    162a:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <g_adc_temp+0x2>
    162e:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <g_adc_temp+0x3>
	}
}
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	08 95       	ret

00001640 <__vector_21>:
{	/* USART, TX - Complete */
	s_bad_interrupt();
}

ISR(__vector_21, ISR_BLOCK)
{	/* ADC */
    1640:	1f 92       	push	r1
    1642:	0f 92       	push	r0
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	0f 92       	push	r0
    1648:	11 24       	eor	r1, r1
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	1f 93       	push	r17
    1654:	2f 93       	push	r18
    1656:	3f 93       	push	r19
    1658:	4f 93       	push	r20
    165a:	5f 93       	push	r21
    165c:	6f 93       	push	r22
    165e:	7f 93       	push	r23
    1660:	8f 93       	push	r24
    1662:	9f 93       	push	r25
    1664:	af 93       	push	r26
    1666:	bf 93       	push	r27
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	ef 93       	push	r30
    166e:	ff 93       	push	r31
	uint16_t adc_val;
	uint8_t  reason = g_adc_state;
    1670:	10 91 6f 03 	lds	r17, 0x036F	; 0x80036f <g_adc_state>

	/* CLI part */
	adc_val  = ADCL;
    1674:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	adc_val |= ADCH << 8;
    1678:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    167c:	d0 e0       	ldi	r29, 0x00	; 0
    167e:	d8 2b       	or	r29, r24

	//TIFR1 |= _BV(TOV1);							// Reset Timer1 overflow status bit (no ISR for TOV1 activated!)

	switch (g_adc_state) {
    1680:	11 30       	cpi	r17, 0x01	; 1
    1682:	41 f0       	breq	.+16     	; 0x1694 <__vector_21+0x54>
    1684:	18 f0       	brcs	.+6      	; 0x168c <__vector_21+0x4c>
    1686:	12 30       	cpi	r17, 0x02	; 2
    1688:	61 f0       	breq	.+24     	; 0x16a2 <__vector_21+0x62>
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <__vector_21+0x6a>
		case ADC_STATE_PRE_LDR:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_LDR;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <g_adc_state>
		break;
    1692:	10 c0       	rjmp	.+32     	; 0x16b4 <__vector_21+0x74>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    1694:	88 ec       	ldi	r24, 0xC8	; 200
    1696:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		case ADC_STATE_VLD_LDR:
		adc_set_admux(ADC_MUX_TEMPSENSE | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_TEMP;
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <g_adc_state>
		break;
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <__vector_21+0x74>

		case ADC_STATE_PRE_TEMP:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_TEMP;
    16a2:	83 e0       	ldi	r24, 0x03	; 3
    16a4:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <g_adc_state>
		break;
    16a8:	05 c0       	rjmp	.+10     	; 0x16b4 <__vector_21+0x74>
    16aa:	80 ec       	ldi	r24, 0xC0	; 192
    16ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		case ADC_STATE_VLD_TEMP:
		// fall-through

		default:
		adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_LDR;
    16b0:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <g_adc_state>
	}

	uint16_t adc_ldr_last  = g_adc_ldr;
    16b4:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <g_adc_ldr>
    16b8:	70 91 6c 03 	lds	r23, 0x036C	; 0x80036c <g_adc_ldr+0x1>
    16bc:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <g_adc_ldr+0x2>
    16c0:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <g_adc_ldr+0x3>
    16c4:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__fixunssfsi>
    16c8:	6b 01       	movw	r12, r22
    16ca:	7c 01       	movw	r14, r24
	uint16_t adc_temp_last = g_adc_temp;
    16cc:	60 91 63 03 	lds	r22, 0x0363	; 0x800363 <g_adc_temp>
    16d0:	70 91 64 03 	lds	r23, 0x0364	; 0x800364 <g_adc_temp+0x1>
    16d4:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <g_adc_temp+0x2>
    16d8:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <g_adc_temp+0x3>
    16dc:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <__fixunssfsi>

	/* SEI part */
	sei();
    16e0:	78 94       	sei

	__vector_21__bottom(reason, adc_val, adc_ldr_last, adc_temp_last);
    16e2:	9b 01       	movw	r18, r22
    16e4:	a6 01       	movw	r20, r12
    16e6:	be 01       	movw	r22, r28
    16e8:	81 2f       	mov	r24, r17
    16ea:	21 df       	rcall	.-446    	; 0x152e <__vector_21__bottom>
}
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	1f 91       	pop	r17
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	df 90       	pop	r13
    1710:	cf 90       	pop	r12
    1712:	0f 90       	pop	r0
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	0f 90       	pop	r0
    1718:	1f 90       	pop	r1
    171a:	18 95       	reti

0000171c <__vector_22>:
		g_adc_temp = calc;
	}
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
    171c:	1f 92       	push	r1
    171e:	0f 92       	push	r0
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	0f 92       	push	r0
    1724:	11 24       	eor	r1, r1
    1726:	2f 93       	push	r18
    1728:	3f 93       	push	r19
    172a:	4f 93       	push	r20
    172c:	5f 93       	push	r21
    172e:	6f 93       	push	r22
    1730:	7f 93       	push	r23
    1732:	8f 93       	push	r24
    1734:	9f 93       	push	r25
    1736:	af 93       	push	r26
    1738:	bf 93       	push	r27
    173a:	ef 93       	push	r30
    173c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    173e:	36 dc       	rcall	.-1940   	; 0xfac <asm_break>
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
	s_bad_interrupt();
}
    1740:	ff 91       	pop	r31
    1742:	ef 91       	pop	r30
    1744:	bf 91       	pop	r27
    1746:	af 91       	pop	r26
    1748:	9f 91       	pop	r25
    174a:	8f 91       	pop	r24
    174c:	7f 91       	pop	r23
    174e:	6f 91       	pop	r22
    1750:	5f 91       	pop	r21
    1752:	4f 91       	pop	r20
    1754:	3f 91       	pop	r19
    1756:	2f 91       	pop	r18
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	0f 90       	pop	r0
    175e:	1f 90       	pop	r1
    1760:	18 95       	reti

00001762 <__vector_23>:

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	2f 93       	push	r18
    176e:	3f 93       	push	r19
    1770:	4f 93       	push	r20
    1772:	5f 93       	push	r21
    1774:	6f 93       	push	r22
    1776:	7f 93       	push	r23
    1778:	8f 93       	push	r24
    177a:	9f 93       	push	r25
    177c:	af 93       	push	r26
    177e:	bf 93       	push	r27
    1780:	ef 93       	push	r30
    1782:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1784:	13 dc       	rcall	.-2010   	; 0xfac <asm_break>
}

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
	s_bad_interrupt();
}
    1786:	ff 91       	pop	r31
    1788:	ef 91       	pop	r30
    178a:	bf 91       	pop	r27
    178c:	af 91       	pop	r26
    178e:	9f 91       	pop	r25
    1790:	8f 91       	pop	r24
    1792:	7f 91       	pop	r23
    1794:	6f 91       	pop	r22
    1796:	5f 91       	pop	r21
    1798:	4f 91       	pop	r20
    179a:	3f 91       	pop	r19
    179c:	2f 91       	pop	r18
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	0f 90       	pop	r0
    17a4:	1f 90       	pop	r1
    17a6:	18 95       	reti

000017a8 <__vector_24>:

ISR(__vector_24, ISR_BLOCK)
{	/* TWI */
    17a8:	1f 92       	push	r1
    17aa:	0f 92       	push	r0
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	0f 92       	push	r0
    17b0:	11 24       	eor	r1, r1
    17b2:	2f 93       	push	r18
    17b4:	3f 93       	push	r19
    17b6:	4f 93       	push	r20
    17b8:	5f 93       	push	r21
    17ba:	6f 93       	push	r22
    17bc:	7f 93       	push	r23
    17be:	8f 93       	push	r24
    17c0:	9f 93       	push	r25
    17c2:	af 93       	push	r26
    17c4:	bf 93       	push	r27
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b11111 << TWS3);
    17ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	uint8_t twd = TWDR;
    17d2:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	uint8_t twcr_cur = TWCR;
    17d6:	cc eb       	ldi	r28, 0xBC	; 188
    17d8:	d0 e0       	ldi	r29, 0x00	; 0
    17da:	48 81       	ld	r20, Y

	uint8_t twcr_new = __vector_24__bottom(tws, twd, twcr_cur);
    17dc:	88 7f       	andi	r24, 0xF8	; 248
    17de:	15 d6       	rcall	.+3114   	; 0x240a <__vector_24__bottom>
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
    17e0:	85 68       	ori	r24, 0x85	; 133
    17e2:	88 83       	st	Y, r24
}
    17e4:	ff 91       	pop	r31
    17e6:	ef 91       	pop	r30
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	bf 91       	pop	r27
    17ee:	af 91       	pop	r26
    17f0:	9f 91       	pop	r25
    17f2:	8f 91       	pop	r24
    17f4:	7f 91       	pop	r23
    17f6:	6f 91       	pop	r22
    17f8:	5f 91       	pop	r21
    17fa:	4f 91       	pop	r20
    17fc:	3f 91       	pop	r19
    17fe:	2f 91       	pop	r18
    1800:	0f 90       	pop	r0
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	0f 90       	pop	r0
    1806:	1f 90       	pop	r1
    1808:	18 95       	reti

0000180a <__vector_25>:

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
    180a:	1f 92       	push	r1
    180c:	0f 92       	push	r0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	0f 92       	push	r0
    1812:	11 24       	eor	r1, r1
    1814:	2f 93       	push	r18
    1816:	3f 93       	push	r19
    1818:	4f 93       	push	r20
    181a:	5f 93       	push	r21
    181c:	6f 93       	push	r22
    181e:	7f 93       	push	r23
    1820:	8f 93       	push	r24
    1822:	9f 93       	push	r25
    1824:	af 93       	push	r26
    1826:	bf 93       	push	r27
    1828:	ef 93       	push	r30
    182a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    182c:	bf db       	rcall	.-2178   	; 0xfac <asm_break>
}

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
	s_bad_interrupt();
}
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	bf 91       	pop	r27
    1834:	af 91       	pop	r26
    1836:	9f 91       	pop	r25
    1838:	8f 91       	pop	r24
    183a:	7f 91       	pop	r23
    183c:	6f 91       	pop	r22
    183e:	5f 91       	pop	r21
    1840:	4f 91       	pop	r20
    1842:	3f 91       	pop	r19
    1844:	2f 91       	pop	r18
    1846:	0f 90       	pop	r0
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	0f 90       	pop	r0
    184c:	1f 90       	pop	r1
    184e:	18 95       	reti

00001850 <lcd_bus_read_status>:
		} else if (y >= GFX_MONO_LCD_HEIGHT) {
		return (uint8_t) GFX_MONO_LCD_HEIGHT - 1;
		} else {
		return (uint8_t) y;
	}
}
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	1f 92       	push	r1
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	8f b7       	in	r24, 0x3f	; 63
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	f8 94       	cli
    1860:	99 81       	ldd	r25, Y+1	; 0x01
    1862:	8f ef       	ldi	r24, 0xFF	; 255
    1864:	8b b9       	out	0x0b, r24	; 11
    1866:	1a b8       	out	0x0a, r1	; 10
    1868:	28 98       	cbi	0x05, 0	; 5
    186a:	2c 9a       	sbi	0x05, 4	; 5
    186c:	2d 9a       	sbi	0x05, 5	; 5
    186e:	2d 98       	cbi	0x05, 5	; 5
    1870:	89 b1       	in	r24, 0x09	; 9
    1872:	9f bf       	out	0x3f, r25	; 63
    1874:	0f 90       	pop	r0
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	08 95       	ret

0000187c <lcd_bus_write_cmd>:
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	1f 92       	push	r1
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	9f b7       	in	r25, 0x3f	; 63
    1888:	99 83       	std	Y+1, r25	; 0x01
    188a:	f8 94       	cli
    188c:	99 81       	ldd	r25, Y+1	; 0x01
    188e:	8b b9       	out	0x0b, r24	; 11
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	8a b9       	out	0x0a, r24	; 10
    1894:	28 98       	cbi	0x05, 0	; 5
    1896:	2c 98       	cbi	0x05, 4	; 5
    1898:	2d 9a       	sbi	0x05, 5	; 5
    189a:	2d 98       	cbi	0x05, 5	; 5
    189c:	9f bf       	out	0x3f, r25	; 63
    189e:	0f 90       	pop	r0
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <lcd_bus_write_ram>:
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	1f 92       	push	r1
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	9f b7       	in	r25, 0x3f	; 63
    18b2:	99 83       	std	Y+1, r25	; 0x01
    18b4:	f8 94       	cli
    18b6:	99 81       	ldd	r25, Y+1	; 0x01
    18b8:	8b b9       	out	0x0b, r24	; 11
    18ba:	8f ef       	ldi	r24, 0xFF	; 255
    18bc:	8a b9       	out	0x0a, r24	; 10
    18be:	28 9a       	sbi	0x05, 0	; 5
    18c0:	2c 98       	cbi	0x05, 4	; 5
    18c2:	2d 9a       	sbi	0x05, 5	; 5
    18c4:	2d 98       	cbi	0x05, 5	; 5
    18c6:	9f bf       	out	0x3f, r25	; 63
    18c8:	0f 90       	pop	r0
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <lcd_bus_read_ram>:
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	1f 92       	push	r1
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	8f b7       	in	r24, 0x3f	; 63
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	f8 94       	cli
    18e0:	99 81       	ldd	r25, Y+1	; 0x01
    18e2:	8f ef       	ldi	r24, 0xFF	; 255
    18e4:	8b b9       	out	0x0b, r24	; 11
    18e6:	1a b8       	out	0x0a, r1	; 10
    18e8:	28 9a       	sbi	0x05, 0	; 5
    18ea:	2c 9a       	sbi	0x05, 4	; 5
    18ec:	2d 9a       	sbi	0x05, 5	; 5
    18ee:	2d 98       	cbi	0x05, 5	; 5
    18f0:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <s_lcd_ram_read_nonvalid>
    18f4:	88 23       	and	r24, r24
    18f6:	19 f0       	breq	.+6      	; 0x18fe <lcd_bus_read_ram+0x2e>
    18f8:	89 b1       	in	r24, 0x09	; 9
    18fa:	2d 9a       	sbi	0x05, 5	; 5
    18fc:	2d 98       	cbi	0x05, 5	; 5
    18fe:	89 b1       	in	r24, 0x09	; 9
    1900:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <s_lcd_ram_read_nonvalid>
    1904:	9f bf       	out	0x3f, r25	; 63
    1906:	0f 90       	pop	r0
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	08 95       	ret

0000190e <lcd_enable>:


void lcd_enable(uint8_t on)
{
	if (!on) {
    190e:	81 11       	cpse	r24, r1
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <lcd_enable+0xa>
		lcd_bus_write_cmd(0b10101110);									// Disable DC[2] (Display)
    1912:	8e ea       	ldi	r24, 0xAE	; 174
    1914:	b3 cf       	rjmp	.-154    	; 0x187c <lcd_bus_write_cmd>
    1916:	08 95       	ret

	} else {
		lcd_bus_write_cmd(0b00101000 | C_LCD_PWR_CTRL);					// Set Power Control
    1918:	8d e2       	ldi	r24, 0x2D	; 45
    191a:	b0 df       	rcall	.-160    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00100000 | C_LCD_MR_TC);					// Set MR and TC
    191c:	84 e2       	ldi	r24, 0x24	; 36
    191e:	ae df       	rcall	.-164    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b11101000 | C_LCD_BIASRATIO);				// Set Bias Ratio
    1920:	8a ee       	ldi	r24, 0xEA	; 234
    1922:	ac df       	rcall	.-168    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10000001);									// Set Gain and PM (A)
    1924:	81 e8       	ldi	r24, 0x81	; 129
    1926:	aa df       	rcall	.-172    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(C_LCD_GAIN_PM);								// Set Gain and PM (B)
    1928:	8c e9       	ldi	r24, 0x9C	; 156
    192a:	a8 df       	rcall	.-176    	; 0x187c <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b11000000 | C_LCD_MAPPING);					// Set Mapping
    192c:	88 ec       	ldi	r24, 0xC8	; 200
    192e:	a6 df       	rcall	.-180    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10001000 | C_LCD_AC);						// Set RAM Address Control
    1930:	88 e8       	ldi	r24, 0x88	; 136
    1932:	a4 df       	rcall	.-184    	; 0x187c <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b01000000);									// Set Start Line (0)
    1934:	80 e4       	ldi	r24, 0x40	; 64
    1936:	a2 df       	rcall	.-188    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10010000);									// Set Fixed Lines (0)
    1938:	80 e9       	ldi	r24, 0x90	; 144
    193a:	a0 df       	rcall	.-192    	; 0x187c <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b10110000);									// Set Page Address (0)
    193c:	80 eb       	ldi	r24, 0xB0	; 176
    193e:	9e df       	rcall	.-196    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00000000);									// Set Column Address LSB (0)
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	9c df       	rcall	.-200    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000);									// Set Column Address MSB (0)
    1944:	80 e1       	ldi	r24, 0x10	; 16
    1946:	9a df       	rcall	.-204    	; 0x187c <lcd_bus_write_cmd>
		s_lcd_ram_read_nonvalid = true;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <s_lcd_ram_read_nonvalid>

		lcd_bus_write_cmd(0b11101111);									// Set Cursor Mode
    194e:	8f ee       	ldi	r24, 0xEF	; 239
    1950:	95 df       	rcall	.-214    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b11101110);									// Reset Cursor Mode (now CR := CA)
    1952:	8e ee       	ldi	r24, 0xEE	; 238
    1954:	93 df       	rcall	.-218    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10100100);									// Disable DC[1] (all pixel on)
    1956:	84 ea       	ldi	r24, 0xA4	; 164
    1958:	91 df       	rcall	.-222    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10100110);									// Disable DC[0] (all pixel inverse)
    195a:	86 ea       	ldi	r24, 0xA6	; 166
    195c:	8f df       	rcall	.-226    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10101111);									// Enable  DC[2] (Display)
    195e:	8f ea       	ldi	r24, 0xAF	; 175
    1960:	8d cf       	rjmp	.-230    	; 0x187c <lcd_bus_write_cmd>
    1962:	08 95       	ret

00001964 <lcd_page_set>:
}

void lcd_page_set(uint8_t page)
{
	if ((0 <= page && page) < (GFX_MONO_LCD_PAGES)) {
		lcd_bus_write_cmd(0b10110000 | page);					// Set Page Address
    1964:	80 6b       	ori	r24, 0xB0	; 176
    1966:	8a df       	rcall	.-236    	; 0x187c <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <s_lcd_ram_read_nonvalid>
    196e:	08 95       	ret

00001970 <lcd_col_set>:
	}
}

void lcd_col_set(uint8_t col)
{
    1970:	cf 93       	push	r28
	if ((0 <= col) && (col < GFX_MONO_LCD_WIDTH)) {
    1972:	80 3f       	cpi	r24, 0xF0	; 240
    1974:	58 f4       	brcc	.+22     	; 0x198c <lcd_col_set+0x1c>
    1976:	c8 2f       	mov	r28, r24
		lcd_bus_write_cmd(0b00000000 | ( col       & 0x0f));	// Set Column Address LSB
    1978:	8f 70       	andi	r24, 0x0F	; 15
    197a:	80 df       	rcall	.-256    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000 | ((col >> 4) & 0x0f));	// Set Column Address MSB
    197c:	8c 2f       	mov	r24, r28
    197e:	82 95       	swap	r24
    1980:	8f 70       	andi	r24, 0x0F	; 15
    1982:	80 61       	ori	r24, 0x10	; 16
    1984:	7b df       	rcall	.-266    	; 0x187c <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <s_lcd_ram_read_nonvalid>
	}
}
    198c:	cf 91       	pop	r28
    198e:	08 95       	ret

00001990 <lcd_cr>:

void lcd_cr(void)
{
	lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	74 df       	rcall	.-280    	; 0x187c <lcd_bus_write_cmd>
	lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    1994:	80 e1       	ldi	r24, 0x10	; 16
    1996:	72 df       	rcall	.-284    	; 0x187c <lcd_bus_write_cmd>

	s_lcd_ram_read_nonvalid = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <s_lcd_ram_read_nonvalid>
    199e:	08 95       	ret

000019a0 <lcd_home>:
}

void lcd_home(void)
{
	lcd_bus_write_cmd(0b10110000);								// Set Page Address (0)
    19a0:	80 eb       	ldi	r24, 0xB0	; 176
    19a2:	6c df       	rcall	.-296    	; 0x187c <lcd_bus_write_cmd>
	lcd_cr();
    19a4:	f5 cf       	rjmp	.-22     	; 0x1990 <lcd_cr>
    19a6:	08 95       	ret

000019a8 <lcd_cls>:
}

void lcd_cls(void)
{
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    19ae:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    19b0:	10 ef       	ldi	r17, 0xF0	; 240

void lcd_cls(void)
{
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
    19b2:	8d 2f       	mov	r24, r29
    19b4:	80 6b       	ori	r24, 0xB0	; 176
    19b6:	62 df       	rcall	.-316    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	60 df       	rcall	.-320    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    19bc:	80 e1       	ldi	r24, 0x10	; 16
    19be:	5e df       	rcall	.-324    	; 0x187c <lcd_bus_write_cmd>
    19c0:	c1 2f       	mov	r28, r17

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
			lcd_bus_write_ram(0);
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	70 df       	rcall	.-288    	; 0x18a6 <lcd_bus_write_ram>
    19c6:	c1 50       	subi	r28, 0x01	; 1
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
    19c8:	e1 f7       	brne	.-8      	; 0x19c2 <lcd_cls+0x1a>
}

void lcd_cls(void)
{
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    19ca:	df 5f       	subi	r29, 0xFF	; 255
    19cc:	d0 31       	cpi	r29, 0x10	; 16
    19ce:	89 f7       	brne	.-30     	; 0x19b2 <lcd_cls+0xa>
			lcd_bus_write_ram(0);
		}
	}	

	/* Set cursor to home position */
	lcd_home();
    19d0:	e7 df       	rcall	.-50     	; 0x19a0 <lcd_home>
}
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	08 95       	ret

000019da <lcd_animation_prepare>:
	}
	gfx_mono_draw_string(s_lcd_prepare_buf, 200, 8, &sysfont);
}

void lcd_animation_prepare(void)
{
    19da:	cf 92       	push	r12
    19dc:	df 92       	push	r13
    19de:	ef 92       	push	r14
    19e0:	ff 92       	push	r15
    19e2:	0f 93       	push	r16
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
	int idx;

	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
    19ea:	83 ec       	ldi	r24, 0xC3	; 195
    19ec:	9f ef       	ldi	r25, 0xFF	; 255
    19ee:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <s_animation_train_origin+0x1>
    19f2:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <s_animation_train_origin>
	s_animation_dx = 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <s_animation_dx>

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
			s_animation_train_left[  idx] = 0b11111000;

		} else if (idx == ANIMATION_TRAIN_BLANK_LEN - 1) {
			s_animation_train_left[  idx] = 0;

		} else if (!((idx - 16) % 11)) {
    1a00:	0f 2e       	mov	r0, r31
    1a02:	fb e0       	ldi	r31, 0x0B	; 11
    1a04:	ef 2e       	mov	r14, r31
    1a06:	f1 2c       	mov	r15, r1
    1a08:	f0 2d       	mov	r31, r0
			s_animation_train_left[  idx] = 0b01000000;
    1a0a:	68 94       	set
    1a0c:	dd 24       	eor	r13, r13
    1a0e:	d6 f8       	bld	r13, 6
			s_animation_train_left[++idx] = 0b01000000;
			s_animation_train_left[++idx] = 0b01000000;
			s_animation_train_left[++idx] = 0b11111000;
    1a10:	f8 ef       	ldi	r31, 0xF8	; 248
			s_animation_train_left[++idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11001000;
    1a12:	0f 2e       	mov	r0, r31
    1a14:	f8 ec       	ldi	r31, 0xC8	; 200
    1a16:	cf 2e       	mov	r12, r31
    1a18:	f0 2d       	mov	r31, r0
			s_animation_train_left[  idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11011000;
		} else if (idx <  5) {
			s_animation_train_left[  idx] = 0b11011111;
		} else if (idx < 11) {
			s_animation_train_left[  idx] = 0b11011000;
    1a1a:	18 ed       	ldi	r17, 0xD8	; 216

		} else if (idx < 3) {
			s_animation_train_left[  idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11011000;
		} else if (idx <  5) {
			s_animation_train_left[  idx] = 0b11011111;
    1a1c:	0f ed       	ldi	r16, 0xDF	; 223
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
		if (!idx) {
			s_animation_train_left[idx] = 0;
    1a1e:	c2 eb       	ldi	r28, 0xB2	; 178
    1a20:	d2 e0       	ldi	r29, 0x02	; 2
	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    1a22:	e1 e0       	ldi	r30, 0x01	; 1
    1a24:	40 e0       	ldi	r20, 0x00	; 0
		if (!idx) {
    1a26:	21 15       	cp	r18, r1
    1a28:	31 05       	cpc	r19, r1
    1a2a:	21 f4       	brne	.+8      	; 0x1a34 <lcd_animation_prepare+0x5a>
			s_animation_train_left[idx] = 0;
    1a2c:	18 82       	st	Y, r1
	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    1a2e:	2e 2f       	mov	r18, r30
    1a30:	34 2f       	mov	r19, r20
    1a32:	f9 cf       	rjmp	.-14     	; 0x1a26 <lcd_animation_prepare+0x4c>
		if (!idx) {
			s_animation_train_left[idx] = 0;

		} else if (idx < 3) {
    1a34:	23 30       	cpi	r18, 0x03	; 3
    1a36:	31 05       	cpc	r19, r1
    1a38:	5c f4       	brge	.+22     	; 0x1a50 <lcd_animation_prepare+0x76>
			s_animation_train_left[  idx] = 0b11111000;
    1a3a:	d9 01       	movw	r26, r18
    1a3c:	ae 54       	subi	r26, 0x4E	; 78
    1a3e:	bd 4f       	sbci	r27, 0xFD	; 253
    1a40:	fc 93       	st	X, r31
			s_animation_train_left[++idx] = 0b11011000;
    1a42:	2f 5f       	subi	r18, 0xFF	; 255
    1a44:	3f 4f       	sbci	r19, 0xFF	; 255
    1a46:	d9 01       	movw	r26, r18
    1a48:	ae 54       	subi	r26, 0x4E	; 78
    1a4a:	bd 4f       	sbci	r27, 0xFD	; 253
    1a4c:	1c 93       	st	X, r17
    1a4e:	4e c0       	rjmp	.+156    	; 0x1aec <lcd_animation_prepare+0x112>
		} else if (idx <  5) {
    1a50:	25 30       	cpi	r18, 0x05	; 5
    1a52:	31 05       	cpc	r19, r1
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <lcd_animation_prepare+0x86>
			s_animation_train_left[  idx] = 0b11011111;
    1a56:	d9 01       	movw	r26, r18
    1a58:	ae 54       	subi	r26, 0x4E	; 78
    1a5a:	bd 4f       	sbci	r27, 0xFD	; 253
    1a5c:	0c 93       	st	X, r16
    1a5e:	46 c0       	rjmp	.+140    	; 0x1aec <lcd_animation_prepare+0x112>
		} else if (idx < 11) {
    1a60:	2b 30       	cpi	r18, 0x0B	; 11
    1a62:	31 05       	cpc	r19, r1
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <lcd_animation_prepare+0x96>
			s_animation_train_left[  idx] = 0b11011000;
    1a66:	d9 01       	movw	r26, r18
    1a68:	ae 54       	subi	r26, 0x4E	; 78
    1a6a:	bd 4f       	sbci	r27, 0xFD	; 253
    1a6c:	1c 93       	st	X, r17
    1a6e:	3e c0       	rjmp	.+124    	; 0x1aec <lcd_animation_prepare+0x112>
		} else if (idx < 16) {
    1a70:	20 31       	cpi	r18, 0x10	; 16
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <lcd_animation_prepare+0xa6>
			s_animation_train_left[  idx] = 0b11111000;
    1a76:	d9 01       	movw	r26, r18
    1a78:	ae 54       	subi	r26, 0x4E	; 78
    1a7a:	bd 4f       	sbci	r27, 0xFD	; 253
    1a7c:	fc 93       	st	X, r31
    1a7e:	36 c0       	rjmp	.+108    	; 0x1aec <lcd_animation_prepare+0x112>

		} else if (idx == ANIMATION_TRAIN_BLANK_LEN - 1) {
    1a80:	2c 33       	cpi	r18, 0x3C	; 60
    1a82:	31 05       	cpc	r19, r1
    1a84:	19 f4       	brne	.+6      	; 0x1a8c <lcd_animation_prepare+0xb2>
			s_animation_train_left[  idx] = 0;
    1a86:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <s_animation_train_left+0x3c>
    1a8a:	36 c0       	rjmp	.+108    	; 0x1af8 <lcd_animation_prepare+0x11e>

		} else if (!((idx - 16) % 11)) {
    1a8c:	c9 01       	movw	r24, r18
    1a8e:	40 97       	sbiw	r24, 0x10	; 16
    1a90:	b7 01       	movw	r22, r14
    1a92:	0e 94 07 18 	call	0x300e	; 0x300e <__divmodhi4>
    1a96:	89 2b       	or	r24, r25
    1a98:	29 f5       	brne	.+74     	; 0x1ae4 <lcd_animation_prepare+0x10a>
			s_animation_train_left[  idx] = 0b01000000;
    1a9a:	d9 01       	movw	r26, r18
    1a9c:	ae 54       	subi	r26, 0x4E	; 78
    1a9e:	bd 4f       	sbci	r27, 0xFD	; 253
    1aa0:	dc 92       	st	X, r13
			s_animation_train_left[++idx] = 0b01000000;
    1aa2:	11 96       	adiw	r26, 0x01	; 1
    1aa4:	dc 92       	st	X, r13
    1aa6:	11 97       	sbiw	r26, 0x01	; 1
			s_animation_train_left[++idx] = 0b01000000;
    1aa8:	12 96       	adiw	r26, 0x02	; 2
    1aaa:	dc 92       	st	X, r13
    1aac:	12 97       	sbiw	r26, 0x02	; 2
			s_animation_train_left[++idx] = 0b11111000;
    1aae:	13 96       	adiw	r26, 0x03	; 3
    1ab0:	fc 93       	st	X, r31
    1ab2:	13 97       	sbiw	r26, 0x03	; 3
			s_animation_train_left[++idx] = 0b11111000;
    1ab4:	14 96       	adiw	r26, 0x04	; 4
    1ab6:	fc 93       	st	X, r31
    1ab8:	14 97       	sbiw	r26, 0x04	; 4
			s_animation_train_left[++idx] = 0b11001000;
    1aba:	15 96       	adiw	r26, 0x05	; 5
    1abc:	cc 92       	st	X, r12
    1abe:	15 97       	sbiw	r26, 0x05	; 5
			s_animation_train_left[++idx] = 0b11111000;
    1ac0:	16 96       	adiw	r26, 0x06	; 6
    1ac2:	fc 93       	st	X, r31
    1ac4:	16 97       	sbiw	r26, 0x06	; 6
			s_animation_train_left[++idx] = 0b11111000;
    1ac6:	17 96       	adiw	r26, 0x07	; 7
    1ac8:	fc 93       	st	X, r31
    1aca:	17 97       	sbiw	r26, 0x07	; 7
			s_animation_train_left[++idx] = 0b11001000;
    1acc:	18 96       	adiw	r26, 0x08	; 8
    1ace:	cc 92       	st	X, r12
    1ad0:	18 97       	sbiw	r26, 0x08	; 8
			s_animation_train_left[++idx] = 0b11111000;
    1ad2:	19 96       	adiw	r26, 0x09	; 9
    1ad4:	fc 93       	st	X, r31
			s_animation_train_left[++idx] = 0b11111000;
    1ad6:	26 5f       	subi	r18, 0xF6	; 246
    1ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ada:	d9 01       	movw	r26, r18
    1adc:	ae 54       	subi	r26, 0x4E	; 78
    1ade:	bd 4f       	sbci	r27, 0xFD	; 253
    1ae0:	fc 93       	st	X, r31
    1ae2:	04 c0       	rjmp	.+8      	; 0x1aec <lcd_animation_prepare+0x112>
		} else {
			s_animation_train_left[idx] = 0;
    1ae4:	d9 01       	movw	r26, r18
    1ae6:	ae 54       	subi	r26, 0x4E	; 78
    1ae8:	bd 4f       	sbci	r27, 0xFD	; 253
    1aea:	1c 92       	st	X, r1
	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    1aec:	2f 5f       	subi	r18, 0xFF	; 255
    1aee:	3f 4f       	sbci	r19, 0xFF	; 255
    1af0:	2d 33       	cpi	r18, 0x3D	; 61
    1af2:	31 05       	cpc	r19, r1
    1af4:	0c f4       	brge	.+2      	; 0x1af8 <lcd_animation_prepare+0x11e>
    1af6:	97 cf       	rjmp	.-210    	; 0x1a26 <lcd_animation_prepare+0x4c>
    1af8:	a2 eb       	ldi	r26, 0xB2	; 178
    1afa:	b2 e0       	ldi	r27, 0x02	; 2
    1afc:	e2 eb       	ldi	r30, 0xB2	; 178
    1afe:	f2 e0       	ldi	r31, 0x02	; 2
    1b00:	25 e7       	ldi	r18, 0x75	; 117
    1b02:	32 e0       	ldi	r19, 0x02	; 2
			s_animation_train_left[idx] = 0;
		}
	}

	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
		s_animation_train_right[ANIMATION_TRAIN_BLANK_LEN - idx - 1] = s_animation_train_left[idx];		// x-mirror
    1b04:	8d 91       	ld	r24, X+
    1b06:	82 93       	st	-Z, r24
		} else {
			s_animation_train_left[idx] = 0;
		}
	}

	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    1b08:	e2 17       	cp	r30, r18
    1b0a:	f3 07       	cpc	r31, r19
    1b0c:	d9 f7       	brne	.-10     	; 0x1b04 <lcd_animation_prepare+0x12a>
		s_animation_train_right[ANIMATION_TRAIN_BLANK_LEN - idx - 1] = s_animation_train_left[idx];		// x-mirror
	}

	/* prepare free line for train */
	gfx_mono_generic_draw_filled_rect(0, (GFX_MONO_LCD_PAGES - 1) * GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_PIXEL_CLR);
    1b0e:	00 e0       	ldi	r16, 0x00	; 0
    1b10:	28 e0       	ldi	r18, 0x08	; 8
    1b12:	40 ef       	ldi	r20, 0xF0	; 240
    1b14:	68 e7       	ldi	r22, 0x78	; 120
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	0e 94 4f 05 	call	0xa9e	; 0xa9e <gfx_mono_generic_draw_filled_rect>
}
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	08 95       	ret

00001b2e <lcd_animation_loop>:

void lcd_animation_loop(void)
{
    1b2e:	8f 92       	push	r8
    1b30:	9f 92       	push	r9
    1b32:	af 92       	push	r10
    1b34:	bf 92       	push	r11
    1b36:	cf 92       	push	r12
    1b38:	df 92       	push	r13
    1b3a:	ef 92       	push	r14
    1b3c:	ff 92       	push	r15
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	1f 92       	push	r1
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
	if (s_animation_dx) {
    1b4c:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <s_animation_dx>
    1b50:	88 23       	and	r24, r24
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <lcd_animation_loop+0x28>
    1b54:	3d c1       	rjmp	.+634    	; 0x1dd0 <lcd_animation_loop+0x2a2>
		float now = get_abs_time();
    1b56:	5c d5       	rcall	.+2744   	; 0x2610 <get_abs_time>
    1b58:	6b 01       	movw	r12, r22
    1b5a:	7c 01       	movw	r14, r24

		if ((now - s_animation_time_last_train) >= 0.04f) {  // 25x per sec
    1b5c:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <s_animation_time_last_train>
    1b60:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <s_animation_time_last_train+0x1>
    1b64:	40 91 f1 02 	lds	r20, 0x02F1	; 0x8002f1 <s_animation_time_last_train+0x2>
    1b68:	50 91 f2 02 	lds	r21, 0x02F2	; 0x8002f2 <s_animation_time_last_train+0x3>
    1b6c:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <__subsf3>
    1b70:	2a e0       	ldi	r18, 0x0A	; 10
    1b72:	37 ed       	ldi	r19, 0xD7	; 215
    1b74:	43 e2       	ldi	r20, 0x23	; 35
    1b76:	5d e3       	ldi	r21, 0x3D	; 61
    1b78:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__gesf2>
    1b7c:	88 23       	and	r24, r24
    1b7e:	0c f4       	brge	.+2      	; 0x1b82 <lcd_animation_loop+0x54>
    1b80:	58 c0       	rjmp	.+176    	; 0x1c32 <lcd_animation_loop+0x104>
			s_animation_time_last_train = now;
    1b82:	c0 92 ef 02 	sts	0x02EF, r12	; 0x8002ef <s_animation_time_last_train>
    1b86:	d0 92 f0 02 	sts	0x02F0, r13	; 0x8002f0 <s_animation_time_last_train+0x1>
    1b8a:	e0 92 f1 02 	sts	0x02F1, r14	; 0x8002f1 <s_animation_time_last_train+0x2>
    1b8e:	f0 92 f2 02 	sts	0x02F2, r15	; 0x8002f2 <s_animation_time_last_train+0x3>
			s_animation_train_origin += s_animation_dx;
    1b92:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <s_animation_dx>
    1b96:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <s_animation_train_origin>
    1b9a:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <s_animation_train_origin+0x1>
    1b9e:	e8 0f       	add	r30, r24
    1ba0:	f1 1d       	adc	r31, r1
    1ba2:	87 fd       	sbrc	r24, 7
    1ba4:	fa 95       	dec	r31
    1ba6:	f0 93 f9 02 	sts	0x02F9, r31	; 0x8002f9 <s_animation_train_origin+0x1>
    1baa:	e0 93 f8 02 	sts	0x02F8, r30	; 0x8002f8 <s_animation_train_origin>

			if (s_animation_train_origin <= (-10 - ANIMATION_TRAIN_BLANK_LEN)) {
    1bae:	ea 3b       	cpi	r30, 0xBA	; 186
    1bb0:	2f ef       	ldi	r18, 0xFF	; 255
    1bb2:	f2 07       	cpc	r31, r18
    1bb4:	24 f4       	brge	.+8      	; 0x1bbe <lcd_animation_loop+0x90>
				s_animation_dx = 1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <s_animation_dx>
    1bbc:	23 c0       	rjmp	.+70     	; 0x1c04 <lcd_animation_loop+0xd6>
				} else if (s_animation_train_origin >= (GFX_MONO_LCD_WIDTH + 10)) {
    1bbe:	ea 3f       	cpi	r30, 0xFA	; 250
    1bc0:	f1 05       	cpc	r31, r1
    1bc2:	24 f0       	brlt	.+8      	; 0x1bcc <lcd_animation_loop+0x9e>
				s_animation_dx = -1;
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <s_animation_dx>
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <lcd_animation_loop+0xa6>
			}

			if (s_animation_dx < 0) {
    1bcc:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <s_animation_dx>
    1bd0:	88 23       	and	r24, r24
    1bd2:	c4 f4       	brge	.+48     	; 0x1c04 <lcd_animation_loop+0xd6>
				// Draw train left
				if (s_animation_train_origin >= 0 && s_animation_train_origin < GFX_MONO_LCD_WIDTH) {
    1bd4:	e0 3f       	cpi	r30, 0xF0	; 240
    1bd6:	f1 05       	cpc	r31, r1
    1bd8:	38 f4       	brcc	.+14     	; 0x1be8 <lcd_animation_loop+0xba>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_left, GFX_MONO_LCD_PAGES - 1, s_animation_train_origin, ANIMATION_TRAIN_BLANK_LEN);				// full width
    1bda:	2d e3       	ldi	r18, 0x3D	; 61
    1bdc:	4e 2f       	mov	r20, r30
    1bde:	6f e0       	ldi	r22, 0x0F	; 15
    1be0:	82 eb       	ldi	r24, 0xB2	; 178
    1be2:	92 e0       	ldi	r25, 0x02	; 2
    1be4:	cf d8       	rcall	.-3682   	; 0xd84 <gfx_mono_lcd_uc1608_put_page>
    1be6:	25 c0       	rjmp	.+74     	; 0x1c32 <lcd_animation_loop+0x104>
					} else if (-ANIMATION_TRAIN_BLANK_LEN < s_animation_train_origin && s_animation_train_origin < 0) {
    1be8:	cf 01       	movw	r24, r30
    1bea:	cc 96       	adiw	r24, 0x3c	; 60
    1bec:	cc 97       	sbiw	r24, 0x3c	; 60
    1bee:	08 f5       	brcc	.+66     	; 0x1c32 <lcd_animation_loop+0x104>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_left - s_animation_train_origin, GFX_MONO_LCD_PAGES - 1, 0, ANIMATION_TRAIN_BLANK_LEN + s_animation_train_origin);	// left: reduced width
    1bf0:	2d e3       	ldi	r18, 0x3D	; 61
    1bf2:	2e 0f       	add	r18, r30
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	6f e0       	ldi	r22, 0x0F	; 15
    1bf8:	82 eb       	ldi	r24, 0xB2	; 178
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	8e 1b       	sub	r24, r30
    1bfe:	9f 0b       	sbc	r25, r31
    1c00:	c1 d8       	rcall	.-3710   	; 0xd84 <gfx_mono_lcd_uc1608_put_page>
    1c02:	17 c0       	rjmp	.+46     	; 0x1c32 <lcd_animation_loop+0x104>
				}

				} else {
				// Draw train right
				if (s_animation_train_origin >= 0 && s_animation_train_origin < GFX_MONO_LCD_WIDTH) {
    1c04:	e0 3f       	cpi	r30, 0xF0	; 240
    1c06:	f1 05       	cpc	r31, r1
    1c08:	38 f4       	brcc	.+14     	; 0x1c18 <lcd_animation_loop+0xea>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_right, GFX_MONO_LCD_PAGES - 1, s_animation_train_origin, ANIMATION_TRAIN_BLANK_LEN);				// full width
    1c0a:	2d e3       	ldi	r18, 0x3D	; 61
    1c0c:	4e 2f       	mov	r20, r30
    1c0e:	6f e0       	ldi	r22, 0x0F	; 15
    1c10:	85 e7       	ldi	r24, 0x75	; 117
    1c12:	92 e0       	ldi	r25, 0x02	; 2
    1c14:	b7 d8       	rcall	.-3730   	; 0xd84 <gfx_mono_lcd_uc1608_put_page>
    1c16:	0d c0       	rjmp	.+26     	; 0x1c32 <lcd_animation_loop+0x104>
					} else if (-ANIMATION_TRAIN_BLANK_LEN < s_animation_train_origin && s_animation_train_origin < 0) {
    1c18:	cf 01       	movw	r24, r30
    1c1a:	cc 96       	adiw	r24, 0x3c	; 60
    1c1c:	cc 97       	sbiw	r24, 0x3c	; 60
    1c1e:	48 f4       	brcc	.+18     	; 0x1c32 <lcd_animation_loop+0x104>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_right - s_animation_train_origin, GFX_MONO_LCD_PAGES - 1, 0, ANIMATION_TRAIN_BLANK_LEN + s_animation_train_origin);	// left: reduced width
    1c20:	2d e3       	ldi	r18, 0x3D	; 61
    1c22:	2e 0f       	add	r18, r30
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	6f e0       	ldi	r22, 0x0F	; 15
    1c28:	85 e7       	ldi	r24, 0x75	; 117
    1c2a:	92 e0       	ldi	r25, 0x02	; 2
    1c2c:	8e 1b       	sub	r24, r30
    1c2e:	9f 0b       	sbc	r25, r31
    1c30:	a9 d8       	rcall	.-3758   	; 0xd84 <gfx_mono_lcd_uc1608_put_page>
				}
			}
		}

		if ((now - s_animation_time_last_temp) >= 0.50f) {  // 2x per sec
    1c32:	20 91 f3 02 	lds	r18, 0x02F3	; 0x8002f3 <s_animation_time_last_temp>
    1c36:	30 91 f4 02 	lds	r19, 0x02F4	; 0x8002f4 <s_animation_time_last_temp+0x1>
    1c3a:	40 91 f5 02 	lds	r20, 0x02F5	; 0x8002f5 <s_animation_time_last_temp+0x2>
    1c3e:	50 91 f6 02 	lds	r21, 0x02F6	; 0x8002f6 <s_animation_time_last_temp+0x3>
    1c42:	c7 01       	movw	r24, r14
    1c44:	b6 01       	movw	r22, r12
    1c46:	c8 d7       	rcall	.+3984   	; 0x2bd8 <__subsf3>
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__gesf2>
    1c54:	88 23       	and	r24, r24
    1c56:	0c f4       	brge	.+2      	; 0x1c5a <lcd_animation_loop+0x12c>
    1c58:	75 c0       	rjmp	.+234    	; 0x1d44 <lcd_animation_loop+0x216>
			s_animation_time_last_temp = now;
    1c5a:	c0 92 f3 02 	sts	0x02F3, r12	; 0x8002f3 <s_animation_time_last_temp>
    1c5e:	d0 92 f4 02 	sts	0x02F4, r13	; 0x8002f4 <s_animation_time_last_temp+0x1>
    1c62:	e0 92 f5 02 	sts	0x02F5, r14	; 0x8002f5 <s_animation_time_last_temp+0x2>
    1c66:	f0 92 f6 02 	sts	0x02F6, r15	; 0x8002f6 <s_animation_time_last_temp+0x3>

static void s_lcd_test_temp(void)
{
	float	t;

	s_task();
    1c6a:	24 d5       	rcall	.+2632   	; 0x26b4 <s_task>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1c6c:	8f b7       	in	r24, 0x3f	; 63
    1c6e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1c70:	f8 94       	cli
	return flags;
    1c72:	89 81       	ldd	r24, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();
	t = g_temp;
    1c74:	80 90 5b 03 	lds	r8, 0x035B	; 0x80035b <g_temp>
    1c78:	90 90 5c 03 	lds	r9, 0x035C	; 0x80035c <g_temp+0x1>
    1c7c:	a0 90 5d 03 	lds	r10, 0x035D	; 0x80035d <g_temp+0x2>
    1c80:	b0 90 5e 03 	lds	r11, 0x035E	; 0x80035e <g_temp+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c84:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	if (t < 0.f) {
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	a9 01       	movw	r20, r18
    1c8c:	c5 01       	movw	r24, r10
    1c8e:	b4 01       	movw	r22, r8
    1c90:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__cmpsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	1c f4       	brge	.+6      	; 0x1c9e <lcd_animation_loop+0x170>
		t = 0.f;
    1c98:	81 2c       	mov	r8, r1
    1c9a:	91 2c       	mov	r9, r1
    1c9c:	54 01       	movw	r10, r8
	}

	s_lcd_prepare_buf[0] = '0' + (uint8_t)(((int)(t /  10.f)) % 10);
    1c9e:	0a ef       	ldi	r16, 0xFA	; 250
    1ca0:	12 e0       	ldi	r17, 0x02	; 2
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e2       	ldi	r20, 0x20	; 32
    1ca8:	51 e4       	ldi	r21, 0x41	; 65
    1caa:	c5 01       	movw	r24, r10
    1cac:	b4 01       	movw	r22, r8
    1cae:	fd d7       	rcall	.+4090   	; 0x2caa <__divsf3>
    1cb0:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__fixsfsi>
    1cb4:	0f 2e       	mov	r0, r31
    1cb6:	fa e0       	ldi	r31, 0x0A	; 10
    1cb8:	ef 2e       	mov	r14, r31
    1cba:	f1 2c       	mov	r15, r1
    1cbc:	f0 2d       	mov	r31, r0
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	b7 01       	movw	r22, r14
    1cc2:	0e 94 07 18 	call	0x300e	; 0x300e <__divmodhi4>
    1cc6:	80 5d       	subi	r24, 0xD0	; 208
    1cc8:	f8 01       	movw	r30, r16
    1cca:	80 83       	st	Z, r24
	s_lcd_prepare_buf[1] = '0' + (uint8_t)(((int) t         ) % 10);
    1ccc:	c5 01       	movw	r24, r10
    1cce:	b4 01       	movw	r22, r8
    1cd0:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__fixsfsi>
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	b7 01       	movw	r22, r14
    1cd8:	0e 94 07 18 	call	0x300e	; 0x300e <__divmodhi4>
    1cdc:	80 5d       	subi	r24, 0xD0	; 208
    1cde:	f8 01       	movw	r30, r16
    1ce0:	81 83       	std	Z+1, r24	; 0x01
	s_lcd_prepare_buf[2] = ',';
    1ce2:	8c e2       	ldi	r24, 0x2C	; 44
    1ce4:	82 83       	std	Z+2, r24	; 0x02
	s_lcd_prepare_buf[3] = '0' + (uint8_t)(((int)(t *  10.f)) % 10);
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e2       	ldi	r20, 0x20	; 32
    1cec:	51 e4       	ldi	r21, 0x41	; 65
    1cee:	c5 01       	movw	r24, r10
    1cf0:	b4 01       	movw	r22, r8
    1cf2:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__mulsf3>
    1cf6:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__fixsfsi>
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	b7 01       	movw	r22, r14
    1cfe:	0e 94 07 18 	call	0x300e	; 0x300e <__divmodhi4>
    1d02:	80 5d       	subi	r24, 0xD0	; 208
    1d04:	f8 01       	movw	r30, r16
    1d06:	83 83       	std	Z+3, r24	; 0x03
	s_lcd_prepare_buf[4] = '0' + (uint8_t)(((int)(t * 100.f)) % 10);
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	48 ec       	ldi	r20, 0xC8	; 200
    1d0e:	52 e4       	ldi	r21, 0x42	; 66
    1d10:	c5 01       	movw	r24, r10
    1d12:	b4 01       	movw	r22, r8
    1d14:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__mulsf3>
    1d18:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__fixsfsi>
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	b7 01       	movw	r22, r14
    1d20:	0e 94 07 18 	call	0x300e	; 0x300e <__divmodhi4>
    1d24:	80 5d       	subi	r24, 0xD0	; 208
    1d26:	f8 01       	movw	r30, r16
    1d28:	84 83       	std	Z+4, r24	; 0x04
	s_lcd_prepare_buf[5] = 'C';
    1d2a:	83 e4       	ldi	r24, 0x43	; 67
    1d2c:	85 83       	std	Z+5, r24	; 0x05
	s_lcd_prepare_buf[6] = 0;
    1d2e:	16 82       	std	Z+6, r1	; 0x06

	if (!g_animation_on) {
    1d30:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <g_animation_on>
    1d34:	88 23       	and	r24, r24
    1d36:	31 f0       	breq	.+12     	; 0x1d44 <lcd_animation_loop+0x216>
		return;
	}
	gfx_mono_draw_string(s_lcd_prepare_buf, 200, 8, &sysfont);
    1d38:	21 e0       	ldi	r18, 0x01	; 1
    1d3a:	31 e0       	ldi	r19, 0x01	; 1
    1d3c:	48 e0       	ldi	r20, 0x08	; 8
    1d3e:	68 ec       	ldi	r22, 0xC8	; 200
    1d40:	c8 01       	movw	r24, r16
    1d42:	0b d9       	rcall	.-3562   	; 0xf5a <gfx_mono_draw_string>
	const int w = GFX_MONO_LCD_WIDTH;

	static int loop = 0;
	static uint8_t sw = 0;

	if (loop++ < h) {
    1d44:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <loop.2958>
    1d48:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <loop.2958+0x1>
    1d4c:	c9 01       	movw	r24, r18
    1d4e:	01 96       	adiw	r24, 0x01	; 1
    1d50:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <loop.2958+0x1>
    1d54:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <loop.2958>
    1d58:	22 31       	cpi	r18, 0x12	; 18
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	a4 f4       	brge	.+40     	; 0x1d86 <lcd_animation_loop+0x258>
		uint8_t y11 = oy + loop;
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);
    1d5e:	00 91 72 02 	lds	r16, 0x0272	; 0x800272 <__data_end>
    1d62:	9b ea       	ldi	r25, 0xAB	; 171
    1d64:	09 9f       	mul	r16, r25
    1d66:	91 2d       	mov	r25, r1
    1d68:	11 24       	eor	r1, r1
    1d6a:	96 95       	lsr	r25
    1d6c:	29 2f       	mov	r18, r25
    1d6e:	22 0f       	add	r18, r18
    1d70:	92 0f       	add	r25, r18
    1d72:	09 1b       	sub	r16, r25
	static int loop = 0;
	static uint8_t sw = 0;

	if (loop++ < h) {
		uint8_t y11 = oy + loop;
		uint8_t y12 = oy + h - loop - 1;
    1d74:	2b e1       	ldi	r18, 0x1B	; 27
    1d76:	28 1b       	sub	r18, r24

	static int loop = 0;
	static uint8_t sw = 0;

	if (loop++ < h) {
		uint8_t y11 = oy + loop;
    1d78:	6a e0       	ldi	r22, 0x0A	; 10
    1d7a:	68 0f       	add	r22, r24
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);
    1d7c:	4f ee       	ldi	r20, 0xEF	; 239
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	0e 94 a9 04 	call	0x952	; 0x952 <gfx_mono_generic_draw_line>
    1d84:	25 c0       	rjmp	.+74     	; 0x1dd0 <lcd_animation_loop+0x2a2>

	} else if (loop < (h + w)) {
    1d86:	82 30       	cpi	r24, 0x02	; 2
    1d88:	f1 e0       	ldi	r31, 0x01	; 1
    1d8a:	9f 07       	cpc	r25, r31
    1d8c:	9c f4       	brge	.+38     	; 0x1db4 <lcd_animation_loop+0x286>
		uint8_t x21 = (loop - h);
		uint8_t x22 = w - (loop - h) - 1;
		gfx_mono_generic_draw_line (x21, oy + h - 1, x22, oy, sw % 3);
    1d8e:	00 91 72 02 	lds	r16, 0x0272	; 0x800272 <__data_end>
    1d92:	9b ea       	ldi	r25, 0xAB	; 171
    1d94:	09 9f       	mul	r16, r25
    1d96:	91 2d       	mov	r25, r1
    1d98:	11 24       	eor	r1, r1
    1d9a:	96 95       	lsr	r25
    1d9c:	29 2f       	mov	r18, r25
    1d9e:	22 0f       	add	r18, r18
    1da0:	92 0f       	add	r25, r18
    1da2:	09 1b       	sub	r16, r25
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);

	} else if (loop < (h + w)) {
		uint8_t x21 = (loop - h);
		uint8_t x22 = w - (loop - h) - 1;
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	48 1b       	sub	r20, r24
		gfx_mono_generic_draw_line (x21, oy + h - 1, x22, oy, sw % 3);
    1da8:	2a e0       	ldi	r18, 0x0A	; 10
    1daa:	6b e1       	ldi	r22, 0x1B	; 27
    1dac:	82 51       	subi	r24, 0x12	; 18
    1dae:	0e 94 a9 04 	call	0x952	; 0x952 <gfx_mono_generic_draw_line>
    1db2:	0e c0       	rjmp	.+28     	; 0x1dd0 <lcd_animation_loop+0x2a2>

	} else {
		loop = 0;
    1db4:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <loop.2958+0x1>
    1db8:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <loop.2958>
		if (++sw >= 3) {
    1dbc:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <__data_end>
    1dc0:	8f 5f       	subi	r24, 0xFF	; 255
    1dc2:	83 30       	cpi	r24, 0x03	; 3
    1dc4:	18 f4       	brcc	.+6      	; 0x1dcc <lcd_animation_loop+0x29e>
    1dc6:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <__data_end>
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <lcd_animation_loop+0x2a2>
			sw = 0;
    1dcc:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <__data_end>
			s_lcd_test_temp();
		}

		s_lcd_test_lines();  // Every cycle
	}	
}
    1dd0:	0f 90       	pop	r0
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	df 90       	pop	r13
    1de0:	cf 90       	pop	r12
    1de2:	bf 90       	pop	r11
    1de4:	af 90       	pop	r10
    1de6:	9f 90       	pop	r9
    1de8:	8f 90       	pop	r8
    1dea:	08 95       	ret

00001dec <lcd_test>:

void lcd_test(uint8_t pattern_bm)
{
    1dec:	ff 92       	push	r15
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	f8 2e       	mov	r15, r24
	if (pattern_bm & (1 << 0)) {
    1df8:	80 ff       	sbrs	r24, 0
    1dfa:	06 c0       	rjmp	.+12     	; 0x1e08 <lcd_test+0x1c>
    1dfc:	c0 e0       	ldi	r28, 0x00	; 0
		// TEST 1
		for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
			lcd_bus_write_ram(i);
    1dfe:	8c 2f       	mov	r24, r28
    1e00:	52 dd       	rcall	.-1372   	; 0x18a6 <lcd_bus_write_ram>
    1e02:	cf 5f       	subi	r28, 0xFF	; 255

void lcd_test(uint8_t pattern_bm)
{
	if (pattern_bm & (1 << 0)) {
		// TEST 1
		for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
    1e04:	c0 3f       	cpi	r28, 0xF0	; 240
    1e06:	d9 f7       	brne	.-10     	; 0x1dfe <lcd_test+0x12>
			lcd_bus_write_ram(i);
		}
	}

	if (pattern_bm & (1 << 1)) {
    1e08:	f1 fe       	sbrs	r15, 1
    1e0a:	18 c0       	rjmp	.+48     	; 0x1e3c <lcd_test+0x50>
		// TEST 2
		lcd_page_set(2);
    1e0c:	82 e0       	ldi	r24, 0x02	; 2
    1e0e:	aa dd       	rcall	.-1196   	; 0x1964 <lcd_page_set>
		lcd_cr();
    1e10:	bf dd       	rcall	.-1154   	; 0x1990 <lcd_cr>
		for (int i = 0, pos = 231; i < GFX_MONO_LCD_WIDTH; ++i, ++pos) {
    1e12:	c0 e0       	ldi	r28, 0x00	; 0
    1e14:	d0 e0       	ldi	r29, 0x00	; 0
			if (!(i % 7)) {
    1e16:	07 e0       	ldi	r16, 0x07	; 7
    1e18:	10 e0       	ldi	r17, 0x00	; 0
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	b8 01       	movw	r22, r16
    1e1e:	0e 94 07 18 	call	0x300e	; 0x300e <__divmodhi4>
    1e22:	89 2b       	or	r24, r25
    1e24:	11 f4       	brne	.+4      	; 0x1e2a <lcd_test+0x3e>
				lcd_bus_write_ram(0);
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	3e dd       	rcall	.-1412   	; 0x18a6 <lcd_bus_write_ram>
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	ed 59       	subi	r30, 0x9D	; 157
    1e2e:	fa 4f       	sbci	r31, 0xFA	; 250
			}
			lcd_bus_write_ram(PROGMEM_READ_BYTE(&(sysfont_glyphs[pos])));
    1e30:	84 91       	lpm	r24, Z
    1e32:	39 dd       	rcall	.-1422   	; 0x18a6 <lcd_bus_write_ram>

	if (pattern_bm & (1 << 1)) {
		// TEST 2
		lcd_page_set(2);
		lcd_cr();
		for (int i = 0, pos = 231; i < GFX_MONO_LCD_WIDTH; ++i, ++pos) {
    1e34:	21 96       	adiw	r28, 0x01	; 1
    1e36:	c0 3f       	cpi	r28, 0xF0	; 240
    1e38:	d1 05       	cpc	r29, r1
    1e3a:	79 f7       	brne	.-34     	; 0x1e1a <lcd_test+0x2e>
			}
			lcd_bus_write_ram(PROGMEM_READ_BYTE(&(sysfont_glyphs[pos])));
		}
	}

	if (pattern_bm & (1 << 2)) {
    1e3c:	f2 fe       	sbrs	r15, 2
    1e3e:	28 c0       	rjmp	.+80     	; 0x1e90 <lcd_test+0xa4>
		// TEST 3
		gfx_mono_draw_pixel(4 + 0, 40 + 0, GFX_PIXEL_SET);
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	68 e2       	ldi	r22, 0x28	; 40
    1e44:	84 e0       	ldi	r24, 0x04	; 4
    1e46:	13 d8       	rcall	.-4058   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 1, 40 + 1, GFX_PIXEL_SET);
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	69 e2       	ldi	r22, 0x29	; 41
    1e4c:	85 e0       	ldi	r24, 0x05	; 5
    1e4e:	0f d8       	rcall	.-4066   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 2, GFX_PIXEL_SET);
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	6a e2       	ldi	r22, 0x2A	; 42
    1e54:	86 e0       	ldi	r24, 0x06	; 6
    1e56:	0b d8       	rcall	.-4074   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 3, 40 + 3, GFX_PIXEL_SET);
    1e58:	41 e0       	ldi	r20, 0x01	; 1
    1e5a:	6b e2       	ldi	r22, 0x2B	; 43
    1e5c:	87 e0       	ldi	r24, 0x07	; 7
    1e5e:	07 d8       	rcall	.-4082   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 4, GFX_PIXEL_SET);
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	6c e2       	ldi	r22, 0x2C	; 44
    1e64:	86 e0       	ldi	r24, 0x06	; 6
    1e66:	03 d8       	rcall	.-4090   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 1, 40 + 5, GFX_PIXEL_SET);
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	6d e2       	ldi	r22, 0x2D	; 45
    1e6c:	85 e0       	ldi	r24, 0x05	; 5
    1e6e:	0e 94 37 07 	call	0xe6e	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 6, GFX_PIXEL_SET);
    1e72:	41 e0       	ldi	r20, 0x01	; 1
    1e74:	6e e2       	ldi	r22, 0x2E	; 46
    1e76:	86 e0       	ldi	r24, 0x06	; 6
    1e78:	0e 94 37 07 	call	0xe6e	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 3, 40 + 7, GFX_PIXEL_SET);
    1e7c:	41 e0       	ldi	r20, 0x01	; 1
    1e7e:	6f e2       	ldi	r22, 0x2F	; 47
    1e80:	87 e0       	ldi	r24, 0x07	; 7
    1e82:	0e 94 37 07 	call	0xe6e	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 4, 40 + 8, GFX_PIXEL_SET);
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	60 e3       	ldi	r22, 0x30	; 48
    1e8a:	88 e0       	ldi	r24, 0x08	; 8
    1e8c:	0e 94 37 07 	call	0xe6e	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
	}

	if (pattern_bm & (1 << 3)) {
    1e90:	f3 fe       	sbrs	r15, 3
    1e92:	07 c0       	rjmp	.+14     	; 0x1ea2 <lcd_test+0xb6>
		// TEST 4
		gfx_mono_generic_draw_line (0, 16, 239, 31, GFX_PIXEL_SET);
    1e94:	01 e0       	ldi	r16, 0x01	; 1
    1e96:	2f e1       	ldi	r18, 0x1F	; 31
    1e98:	4f ee       	ldi	r20, 0xEF	; 239
    1e9a:	60 e1       	ldi	r22, 0x10	; 16
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	0e 94 a9 04 	call	0x952	; 0x952 <gfx_mono_generic_draw_line>
	}

	if (pattern_bm & (1 << 4)) {
    1ea2:	f4 fe       	sbrs	r15, 4
    1ea4:	0d c0       	rjmp	.+26     	; 0x1ec0 <lcd_test+0xd4>
		// TEST 5
		gfx_mono_generic_draw_rect(        70, 48, 40, 40, GFX_PIXEL_SET);
    1ea6:	01 e0       	ldi	r16, 0x01	; 1
    1ea8:	28 e2       	ldi	r18, 0x28	; 40
    1eaa:	48 e2       	ldi	r20, 0x28	; 40
    1eac:	60 e3       	ldi	r22, 0x30	; 48
    1eae:	86 e4       	ldi	r24, 0x46	; 70
    1eb0:	0e 94 2b 05 	call	0xa56	; 0xa56 <gfx_mono_generic_draw_rect>
		gfx_mono_generic_draw_filled_rect(170, 48, 40, 40, GFX_PIXEL_SET);
    1eb4:	28 e2       	ldi	r18, 0x28	; 40
    1eb6:	48 e2       	ldi	r20, 0x28	; 40
    1eb8:	60 e3       	ldi	r22, 0x30	; 48
    1eba:	8a ea       	ldi	r24, 0xAA	; 170
    1ebc:	0e 94 4f 05 	call	0xa9e	; 0xa9e <gfx_mono_generic_draw_filled_rect>
	}

	if (pattern_bm & (1 << 5)) {
    1ec0:	f5 fe       	sbrs	r15, 5
    1ec2:	0d c0       	rjmp	.+26     	; 0x1ede <lcd_test+0xf2>
		// TEST 6
		gfx_mono_generic_draw_circle(       10, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    1ec4:	0f ef       	ldi	r16, 0xFF	; 255
    1ec6:	21 e0       	ldi	r18, 0x01	; 1
    1ec8:	4a e0       	ldi	r20, 0x0A	; 10
    1eca:	60 e5       	ldi	r22, 0x50	; 80
    1ecc:	8a e0       	ldi	r24, 0x0A	; 10
    1ece:	0e 94 69 05 	call	0xad2	; 0xad2 <gfx_mono_generic_draw_circle>
		gfx_mono_generic_draw_filled_circle(40, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    1ed2:	21 e0       	ldi	r18, 0x01	; 1
    1ed4:	4a e0       	ldi	r20, 0x0A	; 10
    1ed6:	60 e5       	ldi	r22, 0x50	; 80
    1ed8:	88 e2       	ldi	r24, 0x28	; 40
    1eda:	0e 94 27 06 	call	0xc4e	; 0xc4e <gfx_mono_generic_draw_filled_circle>
	}

	if (pattern_bm & (1 << 6)) {
    1ede:	f6 fe       	sbrs	r15, 6
    1ee0:	07 c0       	rjmp	.+14     	; 0x1ef0 <lcd_test+0x104>
		// TEST 7
		gfx_mono_draw_string("DF4IAH Smart-LCD", 70, 32, &sysfont);
    1ee2:	21 e0       	ldi	r18, 0x01	; 1
    1ee4:	31 e0       	ldi	r19, 0x01	; 1
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	66 e4       	ldi	r22, 0x46	; 70
    1eea:	88 e0       	ldi	r24, 0x08	; 8
    1eec:	91 e0       	ldi	r25, 0x01	; 1
    1eee:	35 d8       	rcall	.-3990   	; 0xf5a <gfx_mono_draw_string>
	}

	if (pattern_bm & (1 << 7)) {
    1ef0:	ff 20       	and	r15, r15
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <lcd_test+0x112>
		// TEST 8
		lcd_animation_prepare();
    1ef4:	72 dd       	rcall	.-1308   	; 0x19da <lcd_animation_prepare>

		g_animation_on = true;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <g_animation_on>
		lcd_animation_loop();
    1efc:	18 de       	rcall	.-976    	; 0x1b2e <lcd_animation_loop>
	}
}
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	08 95       	ret

00001f0a <lcd_10mhz_ref_osc_show_clk_state>:

void lcd_10mhz_ref_osc_show_clk_state(uint8_t clk_state)
{
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "ClkState: 0x%1X", clk_state);
    1f0a:	1f 92       	push	r1
    1f0c:	8f 93       	push	r24
    1f0e:	89 e1       	ldi	r24, 0x19	; 25
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	9f 93       	push	r25
    1f14:	8f 93       	push	r24
    1f16:	1f 92       	push	r1
    1f18:	80 e3       	ldi	r24, 0x30	; 48
    1f1a:	8f 93       	push	r24
    1f1c:	8a ef       	ldi	r24, 0xFA	; 250
    1f1e:	92 e0       	ldi	r25, 0x02	; 2
    1f20:	9f 93       	push	r25
    1f22:	8f 93       	push	r24
    1f24:	0e 94 34 18 	call	0x3068	; 0x3068 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 8,  16, &sysfont);
    1f28:	21 e0       	ldi	r18, 0x01	; 1
    1f2a:	31 e0       	ldi	r19, 0x01	; 1
    1f2c:	40 e1       	ldi	r20, 0x10	; 16
    1f2e:	68 e0       	ldi	r22, 0x08	; 8
    1f30:	8a ef       	ldi	r24, 0xFA	; 250
    1f32:	92 e0       	ldi	r25, 0x02	; 2
    1f34:	12 d8       	rcall	.-4060   	; 0xf5a <gfx_mono_draw_string>
    1f36:	8d b7       	in	r24, 0x3d	; 61
    1f38:	9e b7       	in	r25, 0x3e	; 62
    1f3a:	08 96       	adiw	r24, 0x08	; 8
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	9e bf       	out	0x3e, r25	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	8d bf       	out	0x3d, r24	; 61
    1f46:	08 95       	ret

00001f48 <lcd_10mhz_ref_osc_show_date>:
}

void lcd_10mhz_ref_osc_show_date(uint16_t year, int8_t month, uint8_t day)
{
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Date    : %02d.%02d.%04d", day, month, year);
    1f48:	9f 93       	push	r25
    1f4a:	8f 93       	push	r24
    1f4c:	86 2f       	mov	r24, r22
    1f4e:	06 2e       	mov	r0, r22
    1f50:	00 0c       	add	r0, r0
    1f52:	99 0b       	sbc	r25, r25
    1f54:	9f 93       	push	r25
    1f56:	6f 93       	push	r22
    1f58:	1f 92       	push	r1
    1f5a:	4f 93       	push	r20
    1f5c:	89 e2       	ldi	r24, 0x29	; 41
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	9f 93       	push	r25
    1f62:	8f 93       	push	r24
    1f64:	1f 92       	push	r1
    1f66:	80 e3       	ldi	r24, 0x30	; 48
    1f68:	8f 93       	push	r24
    1f6a:	8a ef       	ldi	r24, 0xFA	; 250
    1f6c:	92 e0       	ldi	r25, 0x02	; 2
    1f6e:	9f 93       	push	r25
    1f70:	8f 93       	push	r24
    1f72:	0e 94 34 18 	call	0x3068	; 0x3068 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 8,  24, &sysfont);
    1f76:	21 e0       	ldi	r18, 0x01	; 1
    1f78:	31 e0       	ldi	r19, 0x01	; 1
    1f7a:	48 e1       	ldi	r20, 0x18	; 24
    1f7c:	68 e0       	ldi	r22, 0x08	; 8
    1f7e:	8a ef       	ldi	r24, 0xFA	; 250
    1f80:	92 e0       	ldi	r25, 0x02	; 2
    1f82:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    1f86:	8d b7       	in	r24, 0x3d	; 61
    1f88:	9e b7       	in	r25, 0x3e	; 62
    1f8a:	0c 96       	adiw	r24, 0x0c	; 12
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	9e bf       	out	0x3e, r25	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	8d bf       	out	0x3d, r24	; 61
    1f96:	08 95       	ret

00001f98 <lcd_10mhz_ref_osc_show_time>:
}

void lcd_10mhz_ref_osc_show_time(uint8_t hour, int8_t minute, uint8_t second)
{
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "UTC     : %02d:%02d.%02d", hour, minute, second);
    1f98:	1f 92       	push	r1
    1f9a:	4f 93       	push	r20
    1f9c:	26 2f       	mov	r18, r22
    1f9e:	06 2e       	mov	r0, r22
    1fa0:	00 0c       	add	r0, r0
    1fa2:	33 0b       	sbc	r19, r19
    1fa4:	3f 93       	push	r19
    1fa6:	6f 93       	push	r22
    1fa8:	1f 92       	push	r1
    1faa:	8f 93       	push	r24
    1fac:	82 e4       	ldi	r24, 0x42	; 66
    1fae:	91 e0       	ldi	r25, 0x01	; 1
    1fb0:	9f 93       	push	r25
    1fb2:	8f 93       	push	r24
    1fb4:	1f 92       	push	r1
    1fb6:	80 e3       	ldi	r24, 0x30	; 48
    1fb8:	8f 93       	push	r24
    1fba:	8a ef       	ldi	r24, 0xFA	; 250
    1fbc:	92 e0       	ldi	r25, 0x02	; 2
    1fbe:	9f 93       	push	r25
    1fc0:	8f 93       	push	r24
    1fc2:	0e 94 34 18 	call	0x3068	; 0x3068 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 8,  32, &sysfont);
    1fc6:	21 e0       	ldi	r18, 0x01	; 1
    1fc8:	31 e0       	ldi	r19, 0x01	; 1
    1fca:	40 e2       	ldi	r20, 0x20	; 32
    1fcc:	68 e0       	ldi	r22, 0x08	; 8
    1fce:	8a ef       	ldi	r24, 0xFA	; 250
    1fd0:	92 e0       	ldi	r25, 0x02	; 2
    1fd2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    1fd6:	8d b7       	in	r24, 0x3d	; 61
    1fd8:	9e b7       	in	r25, 0x3e	; 62
    1fda:	0c 96       	adiw	r24, 0x0c	; 12
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	9e bf       	out	0x3e, r25	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	8d bf       	out	0x3d, r24	; 61
    1fe6:	08 95       	ret

00001fe8 <lcd_10mhz_ref_osc_show_ppm>:
}

void lcd_10mhz_ref_osc_show_ppm(int16_t ppm_int, uint16_t ppm_frac1000)
{
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Precis. : %-3i.%04d ppm", ppm_int, ppm_frac1000);
    1fe8:	7f 93       	push	r23
    1fea:	6f 93       	push	r22
    1fec:	9f 93       	push	r25
    1fee:	8f 93       	push	r24
    1ff0:	8b e5       	ldi	r24, 0x5B	; 91
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
    1ff4:	9f 93       	push	r25
    1ff6:	8f 93       	push	r24
    1ff8:	1f 92       	push	r1
    1ffa:	80 e3       	ldi	r24, 0x30	; 48
    1ffc:	8f 93       	push	r24
    1ffe:	8a ef       	ldi	r24, 0xFA	; 250
    2000:	92 e0       	ldi	r25, 0x02	; 2
    2002:	9f 93       	push	r25
    2004:	8f 93       	push	r24
    2006:	0e 94 34 18 	call	0x3068	; 0x3068 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 8,  40, &sysfont);
    200a:	21 e0       	ldi	r18, 0x01	; 1
    200c:	31 e0       	ldi	r19, 0x01	; 1
    200e:	48 e2       	ldi	r20, 0x28	; 40
    2010:	68 e0       	ldi	r22, 0x08	; 8
    2012:	8a ef       	ldi	r24, 0xFA	; 250
    2014:	92 e0       	ldi	r25, 0x02	; 2
    2016:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    201a:	8d b7       	in	r24, 0x3d	; 61
    201c:	9e b7       	in	r25, 0x3e	; 62
    201e:	0a 96       	adiw	r24, 0x0a	; 10
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	9e bf       	out	0x3e, r25	; 62
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	8d bf       	out	0x3d, r24	; 61
    202a:	08 95       	ret

0000202c <lcd_10mhz_ref_osc_show_pwm>:
}

void lcd_10mhz_ref_osc_show_pwm(uint8_t pwm_int, uint8_t pwm_frac1000)
{
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "PWM     : %3d.%03d / 256 %%", pwm_int, pwm_frac1000);
    202c:	1f 92       	push	r1
    202e:	6f 93       	push	r22
    2030:	1f 92       	push	r1
    2032:	8f 93       	push	r24
    2034:	83 e7       	ldi	r24, 0x73	; 115
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	9f 93       	push	r25
    203a:	8f 93       	push	r24
    203c:	1f 92       	push	r1
    203e:	80 e3       	ldi	r24, 0x30	; 48
    2040:	8f 93       	push	r24
    2042:	8a ef       	ldi	r24, 0xFA	; 250
    2044:	92 e0       	ldi	r25, 0x02	; 2
    2046:	9f 93       	push	r25
    2048:	8f 93       	push	r24
    204a:	0e 94 34 18 	call	0x3068	; 0x3068 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 8,  48, &sysfont);
    204e:	21 e0       	ldi	r18, 0x01	; 1
    2050:	31 e0       	ldi	r19, 0x01	; 1
    2052:	40 e3       	ldi	r20, 0x30	; 48
    2054:	68 e0       	ldi	r22, 0x08	; 8
    2056:	8a ef       	ldi	r24, 0xFA	; 250
    2058:	92 e0       	ldi	r25, 0x02	; 2
    205a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    205e:	8d b7       	in	r24, 0x3d	; 61
    2060:	9e b7       	in	r25, 0x3e	; 62
    2062:	0a 96       	adiw	r24, 0x0a	; 10
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	9e bf       	out	0x3e, r25	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	8d bf       	out	0x3d, r24	; 61
    206e:	08 95       	ret

00002070 <lcd_10mhz_ref_osc_show_pv>:
}

void lcd_10mhz_ref_osc_show_pv(uint8_t pv_int, uint16_t pv_frac1000)
{
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "PullVolt: %1d.%03d V", pv_int, pv_frac1000);
    2070:	7f 93       	push	r23
    2072:	6f 93       	push	r22
    2074:	1f 92       	push	r1
    2076:	8f 93       	push	r24
    2078:	8f e8       	ldi	r24, 0x8F	; 143
    207a:	91 e0       	ldi	r25, 0x01	; 1
    207c:	9f 93       	push	r25
    207e:	8f 93       	push	r24
    2080:	1f 92       	push	r1
    2082:	80 e3       	ldi	r24, 0x30	; 48
    2084:	8f 93       	push	r24
    2086:	8a ef       	ldi	r24, 0xFA	; 250
    2088:	92 e0       	ldi	r25, 0x02	; 2
    208a:	9f 93       	push	r25
    208c:	8f 93       	push	r24
    208e:	ec d7       	rcall	.+4056   	; 0x3068 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 8,  56, &sysfont);
    2090:	21 e0       	ldi	r18, 0x01	; 1
    2092:	31 e0       	ldi	r19, 0x01	; 1
    2094:	48 e3       	ldi	r20, 0x38	; 56
    2096:	68 e0       	ldi	r22, 0x08	; 8
    2098:	8a ef       	ldi	r24, 0xFA	; 250
    209a:	92 e0       	ldi	r25, 0x02	; 2
    209c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    20a0:	8d b7       	in	r24, 0x3d	; 61
    20a2:	9e b7       	in	r25, 0x3e	; 62
    20a4:	0a 96       	adiw	r24, 0x0a	; 10
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	9e bf       	out	0x3e, r25	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	8d bf       	out	0x3d, r24	; 61
    20b0:	08 95       	ret

000020b2 <lcd_10mhz_ref_osc_show_sat_use>:
}

void lcd_10mhz_ref_osc_show_sat_use(uint8_t sat_west, uint8_t sat_east, uint8_t sat_used)
{
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "SatUse  : W=%02d E=%02d U=%02d sats", sat_west, sat_east, sat_used);
    20b2:	1f 92       	push	r1
    20b4:	4f 93       	push	r20
    20b6:	1f 92       	push	r1
    20b8:	6f 93       	push	r22
    20ba:	1f 92       	push	r1
    20bc:	8f 93       	push	r24
    20be:	84 ea       	ldi	r24, 0xA4	; 164
    20c0:	91 e0       	ldi	r25, 0x01	; 1
    20c2:	9f 93       	push	r25
    20c4:	8f 93       	push	r24
    20c6:	1f 92       	push	r1
    20c8:	80 e3       	ldi	r24, 0x30	; 48
    20ca:	8f 93       	push	r24
    20cc:	8a ef       	ldi	r24, 0xFA	; 250
    20ce:	92 e0       	ldi	r25, 0x02	; 2
    20d0:	9f 93       	push	r25
    20d2:	8f 93       	push	r24
    20d4:	c9 d7       	rcall	.+3986   	; 0x3068 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 8,  64, &sysfont);
    20d6:	21 e0       	ldi	r18, 0x01	; 1
    20d8:	31 e0       	ldi	r19, 0x01	; 1
    20da:	40 e4       	ldi	r20, 0x40	; 64
    20dc:	68 e0       	ldi	r22, 0x08	; 8
    20de:	8a ef       	ldi	r24, 0xFA	; 250
    20e0:	92 e0       	ldi	r25, 0x02	; 2
    20e2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    20e6:	8d b7       	in	r24, 0x3d	; 61
    20e8:	9e b7       	in	r25, 0x3e	; 62
    20ea:	0c 96       	adiw	r24, 0x0c	; 12
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	9e bf       	out	0x3e, r25	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	8d bf       	out	0x3d, r24	; 61
    20f6:	08 95       	ret

000020f8 <lcd_10mhz_ref_osc_show_sat_dop>:
}

void lcd_10mhz_ref_osc_show_sat_dop(uint16_t sat_dop100)
{
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat DOP : %2.3f", sat_dop100 / 100.0f);
    20f8:	bc 01       	movw	r22, r24
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	6e d6       	rcall	.+3292   	; 0x2ddc <__floatunsisf>
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	48 ec       	ldi	r20, 0xC8	; 200
    2106:	52 e4       	ldi	r21, 0x42	; 66
    2108:	d0 d5       	rcall	.+2976   	; 0x2caa <__divsf3>
    210a:	9f 93       	push	r25
    210c:	8f 93       	push	r24
    210e:	7f 93       	push	r23
    2110:	6f 93       	push	r22
    2112:	88 ec       	ldi	r24, 0xC8	; 200
    2114:	91 e0       	ldi	r25, 0x01	; 1
    2116:	9f 93       	push	r25
    2118:	8f 93       	push	r24
    211a:	1f 92       	push	r1
    211c:	80 e3       	ldi	r24, 0x30	; 48
    211e:	8f 93       	push	r24
    2120:	8a ef       	ldi	r24, 0xFA	; 250
    2122:	92 e0       	ldi	r25, 0x02	; 2
    2124:	9f 93       	push	r25
    2126:	8f 93       	push	r24
    2128:	9f d7       	rcall	.+3902   	; 0x3068 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 8,  72, &sysfont);
    212a:	21 e0       	ldi	r18, 0x01	; 1
    212c:	31 e0       	ldi	r19, 0x01	; 1
    212e:	48 e4       	ldi	r20, 0x48	; 72
    2130:	68 e0       	ldi	r22, 0x08	; 8
    2132:	8a ef       	ldi	r24, 0xFA	; 250
    2134:	92 e0       	ldi	r25, 0x02	; 2
    2136:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    213a:	8d b7       	in	r24, 0x3d	; 61
    213c:	9e b7       	in	r25, 0x3e	; 62
    213e:	0a 96       	adiw	r24, 0x0a	; 10
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	9e bf       	out	0x3e, r25	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	8d bf       	out	0x3d, r24	; 61
    214a:	08 95       	ret

0000214c <lcd_10mhz_ref_osc_show_pos_state>:
}

void lcd_10mhz_ref_osc_show_pos_state(uint8_t state_fi, uint8_t state_m2)
{
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "SatState: FI=%1d M2=%1d", state_fi, state_m2);
    214c:	1f 92       	push	r1
    214e:	6f 93       	push	r22
    2150:	1f 92       	push	r1
    2152:	8f 93       	push	r24
    2154:	88 ed       	ldi	r24, 0xD8	; 216
    2156:	91 e0       	ldi	r25, 0x01	; 1
    2158:	9f 93       	push	r25
    215a:	8f 93       	push	r24
    215c:	1f 92       	push	r1
    215e:	80 e3       	ldi	r24, 0x30	; 48
    2160:	8f 93       	push	r24
    2162:	8a ef       	ldi	r24, 0xFA	; 250
    2164:	92 e0       	ldi	r25, 0x02	; 2
    2166:	9f 93       	push	r25
    2168:	8f 93       	push	r24
    216a:	7e d7       	rcall	.+3836   	; 0x3068 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 8,  80, &sysfont);
    216c:	21 e0       	ldi	r18, 0x01	; 1
    216e:	31 e0       	ldi	r19, 0x01	; 1
    2170:	40 e5       	ldi	r20, 0x50	; 80
    2172:	68 e0       	ldi	r22, 0x08	; 8
    2174:	8a ef       	ldi	r24, 0xFA	; 250
    2176:	92 e0       	ldi	r25, 0x02	; 2
    2178:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    217c:	8d b7       	in	r24, 0x3d	; 61
    217e:	9e b7       	in	r25, 0x3e	; 62
    2180:	0a 96       	adiw	r24, 0x0a	; 10
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	9e bf       	out	0x3e, r25	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	8d bf       	out	0x3d, r24	; 61
    218c:	08 95       	ret

0000218e <lcd_10mhz_ref_osc_show_pos_lat>:
}

void lcd_10mhz_ref_osc_show_pos_lat(uint8_t lat_sgn, uint8_t lat_deg, uint8_t lat_min_int, uint16_t lat_min_frac10000)
{
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat Lat : %c  %02d^%02d.%04d'", lat_sgn, lat_deg, lat_min_int, lat_min_frac10000);
    218e:	3f 93       	push	r19
    2190:	2f 93       	push	r18
    2192:	1f 92       	push	r1
    2194:	4f 93       	push	r20
    2196:	1f 92       	push	r1
    2198:	6f 93       	push	r22
    219a:	1f 92       	push	r1
    219c:	8f 93       	push	r24
    219e:	80 ef       	ldi	r24, 0xF0	; 240
    21a0:	91 e0       	ldi	r25, 0x01	; 1
    21a2:	9f 93       	push	r25
    21a4:	8f 93       	push	r24
    21a6:	1f 92       	push	r1
    21a8:	80 e3       	ldi	r24, 0x30	; 48
    21aa:	8f 93       	push	r24
    21ac:	8a ef       	ldi	r24, 0xFA	; 250
    21ae:	92 e0       	ldi	r25, 0x02	; 2
    21b0:	9f 93       	push	r25
    21b2:	8f 93       	push	r24
    21b4:	59 d7       	rcall	.+3762   	; 0x3068 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 8,  88, &sysfont);
    21b6:	21 e0       	ldi	r18, 0x01	; 1
    21b8:	31 e0       	ldi	r19, 0x01	; 1
    21ba:	48 e5       	ldi	r20, 0x58	; 88
    21bc:	68 e0       	ldi	r22, 0x08	; 8
    21be:	8a ef       	ldi	r24, 0xFA	; 250
    21c0:	92 e0       	ldi	r25, 0x02	; 2
    21c2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    21c6:	8d b7       	in	r24, 0x3d	; 61
    21c8:	9e b7       	in	r25, 0x3e	; 62
    21ca:	0e 96       	adiw	r24, 0x0e	; 14
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	9e bf       	out	0x3e, r25	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	8d bf       	out	0x3d, r24	; 61
    21d6:	08 95       	ret

000021d8 <lcd_10mhz_ref_osc_show_pos_lon>:
}

void lcd_10mhz_ref_osc_show_pos_lon(uint8_t lon_sgn, uint8_t lon_deg, uint8_t lon_min_int, uint16_t lon_min_frac10000)
{
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat Lon : %c %03d^%02d.%04d'", lon_sgn, lon_deg, lon_min_int, lon_min_frac10000);
    21d8:	3f 93       	push	r19
    21da:	2f 93       	push	r18
    21dc:	1f 92       	push	r1
    21de:	4f 93       	push	r20
    21e0:	1f 92       	push	r1
    21e2:	6f 93       	push	r22
    21e4:	1f 92       	push	r1
    21e6:	8f 93       	push	r24
    21e8:	8e e0       	ldi	r24, 0x0E	; 14
    21ea:	92 e0       	ldi	r25, 0x02	; 2
    21ec:	9f 93       	push	r25
    21ee:	8f 93       	push	r24
    21f0:	1f 92       	push	r1
    21f2:	80 e3       	ldi	r24, 0x30	; 48
    21f4:	8f 93       	push	r24
    21f6:	8a ef       	ldi	r24, 0xFA	; 250
    21f8:	92 e0       	ldi	r25, 0x02	; 2
    21fa:	9f 93       	push	r25
    21fc:	8f 93       	push	r24
    21fe:	34 d7       	rcall	.+3688   	; 0x3068 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 8,  96, &sysfont);
    2200:	21 e0       	ldi	r18, 0x01	; 1
    2202:	31 e0       	ldi	r19, 0x01	; 1
    2204:	40 e6       	ldi	r20, 0x60	; 96
    2206:	68 e0       	ldi	r22, 0x08	; 8
    2208:	8a ef       	ldi	r24, 0xFA	; 250
    220a:	92 e0       	ldi	r25, 0x02	; 2
    220c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    2210:	8d b7       	in	r24, 0x3d	; 61
    2212:	9e b7       	in	r25, 0x3e	; 62
    2214:	0e 96       	adiw	r24, 0x0e	; 14
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	9e bf       	out	0x3e, r25	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	8d bf       	out	0x3d, r24	; 61
    2220:	08 95       	ret

00002222 <lcd_10mhz_ref_osc_show_pos_height>:
}

void lcd_10mhz_ref_osc_show_pos_height(uint16_t height)
{
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat Hgt : %5d m", height);
    2222:	9f 93       	push	r25
    2224:	8f 93       	push	r24
    2226:	8b e2       	ldi	r24, 0x2B	; 43
    2228:	92 e0       	ldi	r25, 0x02	; 2
    222a:	9f 93       	push	r25
    222c:	8f 93       	push	r24
    222e:	1f 92       	push	r1
    2230:	80 e3       	ldi	r24, 0x30	; 48
    2232:	8f 93       	push	r24
    2234:	8a ef       	ldi	r24, 0xFA	; 250
    2236:	92 e0       	ldi	r25, 0x02	; 2
    2238:	9f 93       	push	r25
    223a:	8f 93       	push	r24
    223c:	15 d7       	rcall	.+3626   	; 0x3068 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 8, 104, &sysfont);
    223e:	21 e0       	ldi	r18, 0x01	; 1
    2240:	31 e0       	ldi	r19, 0x01	; 1
    2242:	48 e6       	ldi	r20, 0x68	; 104
    2244:	68 e0       	ldi	r22, 0x08	; 8
    2246:	8a ef       	ldi	r24, 0xFA	; 250
    2248:	92 e0       	ldi	r25, 0x02	; 2
    224a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    224e:	8d b7       	in	r24, 0x3d	; 61
    2250:	9e b7       	in	r25, 0x3e	; 62
    2252:	08 96       	adiw	r24, 0x08	; 8
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	9e bf       	out	0x3e, r25	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	8d bf       	out	0x3d, r24	; 61
    225e:	08 95       	ret

00002260 <lcd_get_sysfont>:


const void* lcd_get_sysfont(void)
{
	return &sysfont;
}
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	91 e0       	ldi	r25, 0x01	; 1
    2264:	08 95       	ret

00002266 <lcd_init>:
uint8_t lcd_init(void)
{
	uint8_t data;

	/* INIT sequence */
	lcd_bus_write_cmd(0b11100010);									// Reset display
    2266:	82 ee       	ldi	r24, 0xE2	; 226
    2268:	09 db       	rcall	.-2542   	; 0x187c <lcd_bus_write_cmd>
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
		barrier();
    226e:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2270:	8b 32       	cpi	r24, 0x2B	; 43
    2272:	28 e6       	ldi	r18, 0x68	; 104
    2274:	92 07       	cpc	r25, r18
    2276:	d9 f7       	brne	.-10     	; 0x226e <lcd_init+0x8>
	delay_ms(20);													// Wait for the panel to get ready in case one is attached to the bus

	data = lcd_bus_read_status();									// Get current status
    2278:	eb da       	rcall	.-2602   	; 0x1850 <lcd_bus_read_status>
	if (!(data & C_LCD_STATUS_M)) {
    227a:	88 23       	and	r24, r24
    227c:	2c f0       	brlt	.+10     	; 0x2288 <lcd_init+0x22>
		/* LCD panel reacts correctly - resume with INIT sequence */
		lcd_enable(true);
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	46 db       	rcall	.-2420   	; 0x190e <lcd_enable>
		lcd_cls();													// Clear screen
    2282:	92 db       	rcall	.-2268   	; 0x19a8 <lcd_cls>
		return 0;													// Return OK
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	08 95       	ret

	} else {
		return 1;													// Return failure
    2288:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    228a:	08 95       	ret

0000228c <lcd_shutdown>:

void lcd_shutdown(void)
{
	lcd_bus_write_cmd(0b11100010);									// Reset display
    228c:	82 ee       	ldi	r24, 0xE2	; 226
    228e:	f6 da       	rcall	.-2580   	; 0x187c <lcd_bus_write_cmd>
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
		barrier();
    2294:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2296:	8b 36       	cpi	r24, 0x6B	; 107
    2298:	2a e0       	ldi	r18, 0x0A	; 10
    229a:	92 07       	cpc	r25, r18
    229c:	d9 f7       	brne	.-10     	; 0x2294 <lcd_shutdown+0x8>
	delay_ms(2);													// Wait for the energy to dissipate
}
    229e:	08 95       	ret

000022a0 <s_twi_tx_done>:
#endif

static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
    22a0:	20 91 43 03 	lds	r18, 0x0343	; 0x800343 <s_tx_next_len>
    22a4:	22 23       	and	r18, r18
    22a6:	71 f0       	breq	.+28     	; 0x22c4 <s_twi_tx_done+0x24>
    22a8:	e2 2f       	mov	r30, r18
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	e6 5c       	subi	r30, 0xC6	; 198
    22ae:	fc 4f       	sbci	r31, 0xFC	; 252
    22b0:	89 e3       	ldi	r24, 0x39	; 57
    22b2:	93 e0       	ldi	r25, 0x03	; 3
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
			s_tx_d[idx] = s_tx_next_d[idx];
    22b4:	12 92       	st	-Z, r1
static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
    22b6:	e8 17       	cp	r30, r24
    22b8:	f9 07       	cpc	r31, r25
    22ba:	e1 f7       	brne	.-8      	; 0x22b4 <s_twi_tx_done+0x14>
			s_tx_d[idx] = s_tx_next_d[idx];
		}
		s_tx_len = s_tx_next_len;
    22bc:	20 93 41 03 	sts	0x0341, r18	; 0x800341 <s_tx_len>
		s_tx_next_len = 0;
    22c0:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <s_tx_next_len>
    22c4:	08 95       	ret

000022c6 <s_twi_rcvd_command_closed_form>:
	// TODO: implementation
	return err;
}

static void s_twi_rcvd_command_closed_form(uint8_t data[], uint8_t cnt)
{
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <s_twi_rcvd_command_closed_form+0x6>
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <s_twi_rcvd_command_closed_form+0x8>
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	fc 01       	movw	r30, r24
	uint8_t isGCA	= !data[0];
	uint8_t cmd		=  data[1];
    22d4:	91 81       	ldd	r25, Z+1	; 0x01

	if (isGCA) {
    22d6:	80 81       	ld	r24, Z
    22d8:	88 23       	and	r24, r24
    22da:	09 f4       	brne	.+2      	; 0x22de <s_twi_rcvd_command_closed_form+0x18>
    22dc:	8f c0       	rjmp	.+286    	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>
		}

	} else {
		uint8_t prepareBuf[4];

		switch (cmd) {
    22de:	95 38       	cpi	r25, 0x85	; 133
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <s_twi_rcvd_command_closed_form+0x1e>
    22e2:	55 c0       	rjmp	.+170    	; 0x238e <s_twi_rcvd_command_closed_form+0xc8>
    22e4:	60 f4       	brcc	.+24     	; 0x22fe <s_twi_rcvd_command_closed_form+0x38>
    22e6:	91 38       	cpi	r25, 0x81	; 129
    22e8:	89 f1       	breq	.+98     	; 0x234c <s_twi_rcvd_command_closed_form+0x86>
    22ea:	28 f4       	brcc	.+10     	; 0x22f6 <s_twi_rcvd_command_closed_form+0x30>
    22ec:	91 30       	cpi	r25, 0x01	; 1
    22ee:	d9 f0       	breq	.+54     	; 0x2326 <s_twi_rcvd_command_closed_form+0x60>
    22f0:	90 38       	cpi	r25, 0x80	; 128
    22f2:	49 f1       	breq	.+82     	; 0x2346 <s_twi_rcvd_command_closed_form+0x80>
    22f4:	83 c0       	rjmp	.+262    	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>
    22f6:	93 38       	cpi	r25, 0x83	; 131
    22f8:	c1 f1       	breq	.+112    	; 0x236a <s_twi_rcvd_command_closed_form+0xa4>
    22fa:	90 f1       	brcs	.+100    	; 0x2360 <s_twi_rcvd_command_closed_form+0x9a>
    22fc:	44 c0       	rjmp	.+136    	; 0x2386 <s_twi_rcvd_command_closed_form+0xc0>
    22fe:	9a 38       	cpi	r25, 0x8A	; 138
    2300:	09 f4       	brne	.+2      	; 0x2304 <s_twi_rcvd_command_closed_form+0x3e>
    2302:	5b c0       	rjmp	.+182    	; 0x23ba <s_twi_rcvd_command_closed_form+0xf4>
    2304:	38 f4       	brcc	.+14     	; 0x2314 <s_twi_rcvd_command_closed_form+0x4e>
    2306:	98 38       	cpi	r25, 0x88	; 136
    2308:	09 f4       	brne	.+2      	; 0x230c <s_twi_rcvd_command_closed_form+0x46>
    230a:	4a c0       	rjmp	.+148    	; 0x23a0 <s_twi_rcvd_command_closed_form+0xda>
    230c:	99 38       	cpi	r25, 0x89	; 137
    230e:	09 f4       	brne	.+2      	; 0x2312 <s_twi_rcvd_command_closed_form+0x4c>
    2310:	4c c0       	rjmp	.+152    	; 0x23aa <s_twi_rcvd_command_closed_form+0xe4>
    2312:	74 c0       	rjmp	.+232    	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>
    2314:	9c 38       	cpi	r25, 0x8C	; 140
    2316:	09 f4       	brne	.+2      	; 0x231a <s_twi_rcvd_command_closed_form+0x54>
    2318:	5f c0       	rjmp	.+190    	; 0x23d8 <s_twi_rcvd_command_closed_form+0x112>
    231a:	08 f4       	brcc	.+2      	; 0x231e <s_twi_rcvd_command_closed_form+0x58>
    231c:	52 c0       	rjmp	.+164    	; 0x23c2 <s_twi_rcvd_command_closed_form+0xfc>
    231e:	9d 38       	cpi	r25, 0x8D	; 141
    2320:	09 f4       	brne	.+2      	; 0x2324 <s_twi_rcvd_command_closed_form+0x5e>
    2322:	65 c0       	rjmp	.+202    	; 0x23ee <s_twi_rcvd_command_closed_form+0x128>
    2324:	6b c0       	rjmp	.+214    	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>
}

static void s_twi_rx_prepare(uint8_t msgCnt, uint8_t msg[])
{
	if (msgCnt && msg) {
		if (!s_rx_lock) {
    2326:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <s_rx_lock>
    232a:	81 11       	cpse	r24, r1
    232c:	09 c0       	rjmp	.+18     	; 0x2340 <s_twi_rcvd_command_closed_form+0x7a>
			// Prepare master message buffer
			for (int idx = msgCnt; idx >= 0; --idx) {
				s_rx_d[idx] = msg[idx];
    232e:	e0 e3       	ldi	r30, 0x30	; 48
    2330:	f3 e0       	ldi	r31, 0x03	; 3
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	81 83       	std	Z+1, r24	; 0x01
    2336:	80 e1       	ldi	r24, 0x10	; 16
    2338:	80 83       	st	Z, r24
			}
			s_rx_len = msgCnt;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <s_rx_len>

		switch (cmd) {
			case TWI_SMART_LCD_CMD_GETVER:
			prepareBuf[0] = VERSION;
			s_twi_rx_prepare(1, prepareBuf);
			g_animation_on = false;				// stop animation demo
    2340:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <g_animation_on>
			break;
    2344:	5b c0       	rjmp	.+182    	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>

			case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
			lcd_10mhz_ref_osc_show_clk_state(data[2]);
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	e0 dd       	rcall	.-1088   	; 0x1f0a <lcd_10mhz_ref_osc_show_clk_state>
			break;
    234a:	58 c0       	rjmp	.+176    	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>

			case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
			lcd_10mhz_ref_osc_show_date(data[2] | (data[3] << 8), data[4], data[5]);
    234c:	83 81       	ldd	r24, Z+3	; 0x03
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	98 2f       	mov	r25, r24
    2352:	88 27       	eor	r24, r24
    2354:	22 81       	ldd	r18, Z+2	; 0x02
    2356:	45 81       	ldd	r20, Z+5	; 0x05
    2358:	64 81       	ldd	r22, Z+4	; 0x04
    235a:	82 2b       	or	r24, r18
    235c:	f5 dd       	rcall	.-1046   	; 0x1f48 <lcd_10mhz_ref_osc_show_date>
			break;
    235e:	4e c0       	rjmp	.+156    	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>

			case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
			lcd_10mhz_ref_osc_show_time(data[2], data[3], data[4]);
    2360:	44 81       	ldd	r20, Z+4	; 0x04
    2362:	63 81       	ldd	r22, Z+3	; 0x03
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	18 de       	rcall	.-976    	; 0x1f98 <lcd_10mhz_ref_osc_show_time>
			break;
    2368:	49 c0       	rjmp	.+146    	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>

			case TWI_SMART_LCD_CMD_SHOW_PPM:
			lcd_10mhz_ref_osc_show_ppm((int16_t) (data[2] | (data[3] << 8)), data[4] | (data[5] << 8));
    236a:	65 81       	ldd	r22, Z+5	; 0x05
    236c:	70 e0       	ldi	r23, 0x00	; 0
    236e:	76 2f       	mov	r23, r22
    2370:	66 27       	eor	r22, r22
    2372:	84 81       	ldd	r24, Z+4	; 0x04
    2374:	68 2b       	or	r22, r24
    2376:	83 81       	ldd	r24, Z+3	; 0x03
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	98 2f       	mov	r25, r24
    237c:	88 27       	eor	r24, r24
    237e:	22 81       	ldd	r18, Z+2	; 0x02
    2380:	82 2b       	or	r24, r18
    2382:	32 de       	rcall	.-924    	; 0x1fe8 <lcd_10mhz_ref_osc_show_ppm>
			break;
    2384:	3b c0       	rjmp	.+118    	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>

			case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
			lcd_10mhz_ref_osc_show_pwm(data[2], data[3]);
    2386:	63 81       	ldd	r22, Z+3	; 0x03
    2388:	82 81       	ldd	r24, Z+2	; 0x02
    238a:	50 de       	rcall	.-864    	; 0x202c <lcd_10mhz_ref_osc_show_pwm>
			break;
    238c:	37 c0       	rjmp	.+110    	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>

			case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
			lcd_10mhz_ref_osc_show_pv(data[2], data[3] | (data[4] << 8));
    238e:	64 81       	ldd	r22, Z+4	; 0x04
    2390:	70 e0       	ldi	r23, 0x00	; 0
    2392:	76 2f       	mov	r23, r22
    2394:	66 27       	eor	r22, r22
    2396:	83 81       	ldd	r24, Z+3	; 0x03
    2398:	68 2b       	or	r22, r24
    239a:	82 81       	ldd	r24, Z+2	; 0x02
    239c:	69 de       	rcall	.-814    	; 0x2070 <lcd_10mhz_ref_osc_show_pv>
			break;
    239e:	2e c0       	rjmp	.+92     	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>

			case TWI_SMART_LCD_CMD_SHOW_SATS:
			lcd_10mhz_ref_osc_show_sat_use(data[2], data[3], data[4]);
    23a0:	44 81       	ldd	r20, Z+4	; 0x04
    23a2:	63 81       	ldd	r22, Z+3	; 0x03
    23a4:	82 81       	ldd	r24, Z+2	; 0x02
    23a6:	85 de       	rcall	.-758    	; 0x20b2 <lcd_10mhz_ref_osc_show_sat_use>
			break;
    23a8:	29 c0       	rjmp	.+82     	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>

			case TWI_SMART_LCD_CMD_SHOW_DOP:
			lcd_10mhz_ref_osc_show_sat_dop(data[2] | (data[3] << 8));
    23aa:	83 81       	ldd	r24, Z+3	; 0x03
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	98 2f       	mov	r25, r24
    23b0:	88 27       	eor	r24, r24
    23b2:	22 81       	ldd	r18, Z+2	; 0x02
    23b4:	82 2b       	or	r24, r18
    23b6:	a0 de       	rcall	.-704    	; 0x20f8 <lcd_10mhz_ref_osc_show_sat_dop>
			break;
    23b8:	21 c0       	rjmp	.+66     	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>

			case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
			lcd_10mhz_ref_osc_show_pos_state(data[2], data[3]);
    23ba:	63 81       	ldd	r22, Z+3	; 0x03
    23bc:	82 81       	ldd	r24, Z+2	; 0x02
    23be:	c6 de       	rcall	.-628    	; 0x214c <lcd_10mhz_ref_osc_show_pos_state>
			break;
    23c0:	1d c0       	rjmp	.+58     	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>

			case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
			lcd_10mhz_ref_osc_show_pos_lat(data[2], data[3], data[4], data[5] | (data[6] << 8));
    23c2:	26 81       	ldd	r18, Z+6	; 0x06
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	32 2f       	mov	r19, r18
    23c8:	22 27       	eor	r18, r18
    23ca:	85 81       	ldd	r24, Z+5	; 0x05
    23cc:	28 2b       	or	r18, r24
    23ce:	44 81       	ldd	r20, Z+4	; 0x04
    23d0:	63 81       	ldd	r22, Z+3	; 0x03
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	dc de       	rcall	.-584    	; 0x218e <lcd_10mhz_ref_osc_show_pos_lat>
			break;
    23d6:	12 c0       	rjmp	.+36     	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>

			case TWI_SMART_LCD_CMD_SHOW_POS_LON:
			lcd_10mhz_ref_osc_show_pos_lon(data[2], data[3], data[4], data[5] | (data[6] << 8));
    23d8:	26 81       	ldd	r18, Z+6	; 0x06
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	32 2f       	mov	r19, r18
    23de:	22 27       	eor	r18, r18
    23e0:	85 81       	ldd	r24, Z+5	; 0x05
    23e2:	28 2b       	or	r18, r24
    23e4:	44 81       	ldd	r20, Z+4	; 0x04
    23e6:	63 81       	ldd	r22, Z+3	; 0x03
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	f6 de       	rcall	.-532    	; 0x21d8 <lcd_10mhz_ref_osc_show_pos_lon>
			break;
    23ec:	07 c0       	rjmp	.+14     	; 0x23fc <s_twi_rcvd_command_closed_form+0x136>

			case TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT:
			lcd_10mhz_ref_osc_show_pos_height(data[2] | (data[3] << 8));
    23ee:	83 81       	ldd	r24, Z+3	; 0x03
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	98 2f       	mov	r25, r24
    23f4:	88 27       	eor	r24, r24
    23f6:	22 81       	ldd	r18, Z+2	; 0x02
    23f8:	82 2b       	or	r24, r18
    23fa:	13 df       	rcall	.-474    	; 0x2222 <lcd_10mhz_ref_osc_show_pos_height>
			{
				// do nothing
			}
		}
	}
}
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	08 95       	ret

0000240a <__vector_24__bottom>:


uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur)
{
    240a:	0f 93       	push	r16
    240c:	1f 93       	push	r17
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	d6 2f       	mov	r29, r22
    2414:	c4 2f       	mov	r28, r20
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur;

	switch(tws) {
    2416:	08 2f       	mov	r16, r24
    2418:	10 e0       	ldi	r17, 0x00	; 0
    241a:	f8 01       	movw	r30, r16
    241c:	38 97       	sbiw	r30, 0x08	; 8
    241e:	e1 3c       	cpi	r30, 0xC1	; 193
    2420:	f1 05       	cpc	r31, r1
    2422:	08 f0       	brcs	.+2      	; 0x2426 <__vector_24__bottom+0x1c>
    2424:	ed c0       	rjmp	.+474    	; 0x2600 <__vector_24__bottom+0x1f6>
    2426:	ec 5c       	subi	r30, 0xCC	; 204
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	04 c6       	rjmp	.+3080   	; 0x3034 <__tablejump2__>

	/* Master Transmitter Mode */

	case 0x08:									// Start condition transmitted
		s_tx_lock = 1;
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <s_tx_lock>
		pos_o = 0;
    2432:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <pos_o.2594>

		cnt_o = 2;								// TEST
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <cnt_o.2596>
		s_tx_d[0] = (0x12 << TWD1) | (0b0 << TWD0);	// TEST
    243c:	e9 e3       	ldi	r30, 0x39	; 57
    243e:	f3 e0       	ldi	r31, 0x03	; 3
    2440:	84 e2       	ldi	r24, 0x24	; 36
    2442:	80 83       	st	Z, r24
		s_tx_d[1] = 0x34;						// TEST
    2444:	84 e3       	ldi	r24, 0x34	; 52
    2446:	81 83       	std	Z+1, r24	; 0x01
		s_tx_d[2] = 0x56;						// TEST
    2448:	86 e5       	ldi	r24, 0x56	; 86
    244a:	82 83       	std	Z+2, r24	; 0x02
		s_tx_d[3] = 0x78;						// TEST
    244c:	88 e7       	ldi	r24, 0x78	; 120
    244e:	83 83       	std	Z+3, r24	; 0x03
		s_tx_d[4] = 0x9a;						// TEST
    2450:	8a e9       	ldi	r24, 0x9A	; 154
    2452:	84 83       	std	Z+4, r24	; 0x04

		//twcr_new &= ~_BV(TWSTA);	// TODO: self-clearing?
		// fall-through.
	case 0x10:									// Repeated start condition transmitted
		nop();
    2454:	00 00       	nop
		// fall-through.
	case 0x18:									// SLA+W transmitted and ACK received
		TWDR = s_tx_d[pos_o++];
    2456:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <pos_o.2594>
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	8e 0f       	add	r24, r30
    245e:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <pos_o.2594>
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	e7 5c       	subi	r30, 0xC7	; 199
    2466:	fc 4f       	sbci	r31, 0xFC	; 252
    2468:	80 81       	ld	r24, Z
    246a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		break;
    246e:	c9 c0       	rjmp	.+402    	; 0x2602 <__vector_24__bottom+0x1f8>

	case 0x20:									// SLA+W transmitted and NACK received
		twcr_new |= _BV(TWSTO);					// Send STOP
    2470:	c0 61       	ori	r28, 0x10	; 16
		break;
    2472:	c7 c0       	rjmp	.+398    	; 0x2602 <__vector_24__bottom+0x1f8>

	case 0x28:									// Data byte sent and ACK received
		if (pos_o < cnt_o) {
    2474:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <pos_o.2594>
    2478:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <cnt_o.2596>
    247c:	e8 17       	cp	r30, r24
    247e:	58 f4       	brcc	.+22     	; 0x2496 <__vector_24__bottom+0x8c>
			TWDR = s_tx_d[pos_o++];				// Send new data byte
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	8e 0f       	add	r24, r30
    2484:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <pos_o.2594>
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	e7 5c       	subi	r30, 0xC7	; 199
    248c:	fc 4f       	sbci	r31, 0xFC	; 252
    248e:	80 81       	ld	r24, Z
    2490:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2494:	b6 c0       	rjmp	.+364    	; 0x2602 <__vector_24__bottom+0x1f8>
		} else {
			twcr_new |= _BV(TWSTO);				// Send STOP - no more data available
    2496:	c0 61       	ori	r28, 0x10	; 16
			s_tx_lock = 0;
    2498:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <s_tx_lock>
			s_twi_tx_done();					// Message sent
    249c:	01 df       	rcall	.-510    	; 0x22a0 <s_twi_tx_done>
    249e:	b1 c0       	rjmp	.+354    	; 0x2602 <__vector_24__bottom+0x1f8>
		}
		break;

	case 0x30:									// Data byte sent and NACK received
		twcr_new |= _BV(TWSTO);					// Send STOP - due to an error or slave not ready situation
    24a0:	c0 61       	ori	r28, 0x10	; 16
		s_tx_lock = 0;
    24a2:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <s_tx_lock>
		s_twi_tx_done();						// Message failure
    24a6:	fc de       	rcall	.-520    	; 0x22a0 <s_twi_tx_done>
		break;
    24a8:	ac c0       	rjmp	.+344    	; 0x2602 <__vector_24__bottom+0x1f8>

	case 0x38:									// Arbitration lost
		twcr_new |= _BV(TWSTA);					// Send START (again)
    24aa:	c0 62       	ori	r28, 0x20	; 32
		break;
    24ac:	aa c0       	rjmp	.+340    	; 0x2602 <__vector_24__bottom+0x1f8>


	/* Slave Receiver Mode */

	case 0x60:									// SLA+W received and ACK sent
		nop();
    24ae:	00 00       	nop
		// fall-through.
	case 0x68:
		s_rx_lock = 1;
    24b0:	11 e0       	ldi	r17, 0x01	; 1
    24b2:	10 93 38 03 	sts	0x0338, r17	; 0x800338 <s_rx_lock>
		mem_set(s_rx_d, 8, 0x00);
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	68 e0       	ldi	r22, 0x08	; 8
    24ba:	80 e3       	ldi	r24, 0x30	; 48
    24bc:	93 e0       	ldi	r25, 0x03	; 3
    24be:	f0 d0       	rcall	.+480    	; 0x26a0 <mem_set>
		s_rx_d[0] = twd;						// Target address
    24c0:	d0 93 30 03 	sts	0x0330, r29	; 0x800330 <s_rx_d>
		pos_i = 1;								// Starting of reception
    24c4:	10 93 2c 03 	sts	0x032C, r17	; 0x80032c <pos_i.2593>
		twcr_new |= _BV(TWEA);					// Send after next coming data byte ACK
    24c8:	c0 64       	ori	r28, 0x40	; 64
		break;
    24ca:	9b c0       	rjmp	.+310    	; 0x2602 <__vector_24__bottom+0x1f8>

	case 0x70:									// GCA received and ACK sent
		nop();
    24cc:	00 00       	nop
		// fall-through.
	case 0x78:
		s_rx_lock = 1;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <s_rx_lock>
		s_rx_d[0] = twd;						// GCA
    24d4:	d0 93 30 03 	sts	0x0330, r29	; 0x800330 <s_rx_d>
		pos_i = 1;								// Starting of reception
    24d8:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <pos_i.2593>
		twcr_new |= _BV(TWEA);					// Send after next coming data byte ACK
    24dc:	c0 64       	ori	r28, 0x40	; 64
		break;
    24de:	91 c0       	rjmp	.+290    	; 0x2602 <__vector_24__bottom+0x1f8>

	case 0x80:									// Data after SLA+W received
		nop();
    24e0:	00 00       	nop
		// fall-through.
	case 0x90:
		if (cnt_i != 0b111) {					// Closed parameter form
    24e2:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <cnt_i.2595>
    24e6:	87 30       	cpi	r24, 0x07	; 7
    24e8:	b1 f0       	breq	.+44     	; 0x2516 <__vector_24__bottom+0x10c>
			if (pos_i <= 0b111) {
    24ea:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <pos_i.2593>
    24ee:	88 30       	cpi	r24, 0x08	; 8
    24f0:	28 f4       	brcc	.+10     	; 0x24fc <__vector_24__bottom+0xf2>
				s_rx_d[pos_i] = twd;
    24f2:	e8 2f       	mov	r30, r24
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	e0 5d       	subi	r30, 0xD0	; 208
    24f8:	fc 4f       	sbci	r31, 0xFC	; 252
    24fa:	d0 83       	st	Z, r29
			}
			if (pos_i == 1) {
    24fc:	81 30       	cpi	r24, 0x01	; 1
    24fe:	21 f4       	brne	.+8      	; 0x2508 <__vector_24__bottom+0xfe>
						cnt_i = 2;
						break;
#endif

					default:
						cnt_i = 3;
    2500:	93 e0       	ldi	r25, 0x03	; 3
    2502:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <cnt_i.2595>
    2506:	02 c0       	rjmp	.+4      	; 0x250c <__vector_24__bottom+0x102>
				}
			}
			if (pos_i < 0b111) {
    2508:	87 30       	cpi	r24, 0x07	; 7
    250a:	18 f4       	brcc	.+6      	; 0x2512 <__vector_24__bottom+0x108>
				++pos_i;
    250c:	8f 5f       	subi	r24, 0xFF	; 255
    250e:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <pos_i.2593>

			if (pos_i <= cnt_i) {
				twcr_new |= _BV(TWEA);			// Send after next coming data byte ACK
			} else {
				//twcr_new &= ~_BV(TWEA);			// Send after next coming data byte NACK
				twcr_new |= _BV(TWEA); // TEST
    2512:	c0 64       	ori	r28, 0x40	; 64
    2514:	76 c0       	rjmp	.+236    	; 0x2602 <__vector_24__bottom+0x1f8>
			}

		} else {								// Open parameter form
			s_rx_d[2] = twd;
    2516:	d0 93 32 03 	sts	0x0332, r29	; 0x800332 <s_rx_d+0x2>
			if (!s_twi_rcvd_command_open_form(s_rx_d, ++pos_i)) {
				twcr_new |= _BV(TWEA);			// Send after next coming data byte ACK
			} else {
				twcr_new &= ~_BV(TWEA);			// Send after next coming data byte NACK
    251a:	cf 7b       	andi	r28, 0xBF	; 191
				pos_i = 0;
    251c:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <pos_i.2593>
    2520:	70 c0       	rjmp	.+224    	; 0x2602 <__vector_24__bottom+0x1f8>
			}
		}
		break;

	case 0x88:									// NACK after last data byte sent
		nop();
    2522:	00 00       	nop
		// fall-through.
	case 0x98:
		s_rx_lock = 0;
    2524:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <s_rx_lock>
		if (cnt_i != 0b111) {
    2528:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <cnt_i.2595>
    252c:	87 30       	cpi	r24, 0x07	; 7
    252e:	29 f0       	breq	.+10     	; 0x253a <__vector_24__bottom+0x130>
			s_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    2530:	60 91 2c 03 	lds	r22, 0x032C	; 0x80032c <pos_i.2593>
    2534:	80 e3       	ldi	r24, 0x30	; 48
    2536:	93 e0       	ldi	r25, 0x03	; 3
    2538:	c6 de       	rcall	.-628    	; 0x22c6 <s_twi_rcvd_command_closed_form>
		} else {
			s_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    253a:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <pos_i.2593>
		cnt_i = 0;
    253e:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <cnt_i.2595>
		mem_set(s_rx_d, 8, 0x00);
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	68 e0       	ldi	r22, 0x08	; 8
    2546:	80 e3       	ldi	r24, 0x30	; 48
    2548:	93 e0       	ldi	r25, 0x03	; 3
    254a:	aa d0       	rcall	.+340    	; 0x26a0 <mem_set>
		s_rx_lock = 0;
    254c:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <s_rx_lock>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    2550:	c0 64       	ori	r28, 0x40	; 64
		break;
    2552:	57 c0       	rjmp	.+174    	; 0x2602 <__vector_24__bottom+0x1f8>

	case 0xA0:									// STOP or RESTART received while still addressed as slave
		s_rx_lock = 0;
    2554:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <s_rx_lock>
		if (cnt_i != 0b111) {
    2558:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <cnt_i.2595>
    255c:	87 30       	cpi	r24, 0x07	; 7
    255e:	29 f0       	breq	.+10     	; 0x256a <__vector_24__bottom+0x160>
			s_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    2560:	60 91 2c 03 	lds	r22, 0x032C	; 0x80032c <pos_i.2593>
    2564:	80 e3       	ldi	r24, 0x30	; 48
    2566:	93 e0       	ldi	r25, 0x03	; 3
    2568:	ae de       	rcall	.-676    	; 0x22c6 <s_twi_rcvd_command_closed_form>
		} else {
			s_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    256a:	c0 64       	ori	r28, 0x40	; 64
		pos_i = 0;
    256c:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <pos_i.2593>
		break;
    2570:	48 c0       	rjmp	.+144    	; 0x2602 <__vector_24__bottom+0x1f8>


	/* Slave Transmitter Mode */

	case 0xA8:									// SLA+R received and ACK has been returned
		nop();
    2572:	00 00       	nop
		// fall-through.
	case 0xB0:
		s_rx_lock = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <s_rx_lock>
		pos_o = 0;
    257a:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <pos_o.2594>
		cnt_o = s_rx_len;
    257e:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <s_rx_len>
    2582:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <cnt_o.2596>
		TWDR = cnt_o > pos_o ?  s_rx_d[pos_o++] : 0;
    2586:	88 23       	and	r24, r24
    2588:	31 f0       	breq	.+12     	; 0x2596 <__vector_24__bottom+0x18c>
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <pos_o.2594>
    2590:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <s_rx_d>
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <__vector_24__bottom+0x18e>
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

		if (cnt_o > pos_o) {
    259c:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <cnt_o.2596>
    25a0:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <pos_o.2594>
    25a4:	89 17       	cp	r24, r25
    25a6:	10 f4       	brcc	.+4      	; 0x25ac <__vector_24__bottom+0x1a2>
			twcr_new |= _BV(TWEA);				// More data to send ACK
    25a8:	c0 64       	ori	r28, 0x40	; 64
    25aa:	2b c0       	rjmp	.+86     	; 0x2602 <__vector_24__bottom+0x1f8>
		} else {
			twcr_new &= ~_BV(TWEA);				// No more data to send NACK
    25ac:	cf 7b       	andi	r28, 0xBF	; 191
    25ae:	29 c0       	rjmp	.+82     	; 0x2602 <__vector_24__bottom+0x1f8>
		}
		break;

	case 0xB8:									// Data sent and ACK has been returned
		TWDR = cnt_o > pos_o ?  s_rx_d[pos_o++] : 0;
    25b0:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <pos_o.2594>
    25b4:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <cnt_o.2596>
    25b8:	e8 17       	cp	r30, r24
    25ba:	48 f4       	brcc	.+18     	; 0x25ce <__vector_24__bottom+0x1c4>
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	8e 0f       	add	r24, r30
    25c0:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <pos_o.2594>
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	e0 5d       	subi	r30, 0xD0	; 208
    25c8:	fc 4f       	sbci	r31, 0xFC	; 252
    25ca:	80 81       	ld	r24, Z
    25cc:	01 c0       	rjmp	.+2      	; 0x25d0 <__vector_24__bottom+0x1c6>
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		if (cnt_o > pos_o) {
    25d4:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <cnt_o.2596>
    25d8:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <pos_o.2594>
    25dc:	89 17       	cp	r24, r25
    25de:	10 f4       	brcc	.+4      	; 0x25e4 <__vector_24__bottom+0x1da>
			twcr_new |= _BV(TWEA);				// More data to send ACK
    25e0:	c0 64       	ori	r28, 0x40	; 64
    25e2:	0f c0       	rjmp	.+30     	; 0x2602 <__vector_24__bottom+0x1f8>
			} else {
			twcr_new &= ~_BV(TWEA);				// No more data to send NACK
    25e4:	cf 7b       	andi	r28, 0xBF	; 191
    25e6:	0d c0       	rjmp	.+26     	; 0x2602 <__vector_24__bottom+0x1f8>
		}
		break;

	case 0xC0:									// Data sent and NACK has been returned
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    25e8:	c0 64       	ori	r28, 0x40	; 64
		pos_o = 0;
    25ea:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <pos_o.2594>
		cnt_o = 0;
    25ee:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <cnt_o.2596>
		s_rx_lock = 0;
    25f2:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <s_rx_lock>
		break;
    25f6:	05 c0       	rjmp	.+10     	; 0x2602 <__vector_24__bottom+0x1f8>

	case 0xC8:									// Last data sent and ACK has been returned
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    25f8:	c0 64       	ori	r28, 0x40	; 64
		s_rx_lock = 0;
    25fa:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <s_rx_lock>
		/* message transmitted successfully in slave mode */
		break;
    25fe:	01 c0       	rjmp	.+2      	; 0x2602 <__vector_24__bottom+0x1f8>
		
	default:
		nop();
    2600:	00 00       	nop
	}

	return twcr_new;
}
    2602:	8c 2f       	mov	r24, r28
    2604:	df 91       	pop	r29
    2606:	cf 91       	pop	r28
    2608:	1f 91       	pop	r17
    260a:	0f 91       	pop	r16
    260c:	08 95       	ret

0000260e <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    260e:	08 95       	ret

00002610 <get_abs_time>:
/* MAIN section */

void halt(void)
{
	/* MAIN Loop Shutdown */
	runmode = 0;
    2610:	8f 92       	push	r8
    2612:	9f 92       	push	r9
    2614:	af 92       	push	r10
    2616:	bf 92       	push	r11
    2618:	cf 92       	push	r12
    261a:	df 92       	push	r13
    261c:	ef 92       	push	r14
    261e:	ff 92       	push	r15
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	1f 92       	push	r1
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	8f b7       	in	r24, 0x3f	; 63
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	f8 94       	cli
    2630:	99 81       	ldd	r25, Y+1	; 0x01
    2632:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2636:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    263a:	c0 90 70 03 	lds	r12, 0x0370	; 0x800370 <g_timer_abs_msb>
    263e:	d0 90 71 03 	lds	r13, 0x0371	; 0x800371 <g_timer_abs_msb+0x1>
    2642:	e0 90 72 03 	lds	r14, 0x0372	; 0x800372 <g_timer_abs_msb+0x2>
    2646:	f0 90 73 03 	lds	r15, 0x0373	; 0x800373 <g_timer_abs_msb+0x3>
    264a:	9f bf       	out	0x3f, r25	; 63
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	92 2b       	or	r25, r18
    2650:	bc 01       	movw	r22, r24
    2652:	99 0f       	add	r25, r25
    2654:	88 0b       	sbc	r24, r24
    2656:	99 0b       	sbc	r25, r25
    2658:	c3 d3       	rcall	.+1926   	; 0x2de0 <__floatsisf>
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	34 e2       	ldi	r19, 0x24	; 36
    265e:	44 ef       	ldi	r20, 0xF4	; 244
    2660:	5a e4       	ldi	r21, 0x4A	; 74
    2662:	23 d3       	rcall	.+1606   	; 0x2caa <__divsf3>
    2664:	4b 01       	movw	r8, r22
    2666:	5c 01       	movw	r10, r24
    2668:	c7 01       	movw	r24, r14
    266a:	b6 01       	movw	r22, r12
    266c:	b7 d3       	rcall	.+1902   	; 0x2ddc <__floatunsisf>
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e0       	ldi	r20, 0x00	; 0
    2674:	54 e4       	ldi	r21, 0x44	; 68
    2676:	68 d4       	rcall	.+2256   	; 0x2f48 <__mulsf3>
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	34 e2       	ldi	r19, 0x24	; 36
    267c:	44 ef       	ldi	r20, 0xF4	; 244
    267e:	5a e4       	ldi	r21, 0x4A	; 74
    2680:	14 d3       	rcall	.+1576   	; 0x2caa <__divsf3>
    2682:	a5 01       	movw	r20, r10
    2684:	94 01       	movw	r18, r8
    2686:	a9 d2       	rcall	.+1362   	; 0x2bda <__addsf3>
    2688:	0f 90       	pop	r0
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	ff 90       	pop	r15
    2690:	ef 90       	pop	r14
    2692:	df 90       	pop	r13
    2694:	cf 90       	pop	r12
    2696:	bf 90       	pop	r11
    2698:	af 90       	pop	r10
    269a:	9f 90       	pop	r9
    269c:	8f 90       	pop	r8
    269e:	08 95       	ret

000026a0 <mem_set>:
    26a0:	66 23       	and	r22, r22
    26a2:	39 f0       	breq	.+14     	; 0x26b2 <mem_set+0x12>
    26a4:	fc 01       	movw	r30, r24
    26a6:	86 0f       	add	r24, r22
    26a8:	91 1d       	adc	r25, r1
    26aa:	41 93       	st	Z+, r20
    26ac:	e8 17       	cp	r30, r24
    26ae:	f9 07       	cpc	r31, r25
    26b0:	e1 f7       	brne	.-8      	; 0x26aa <mem_set+0xa>
    26b2:	08 95       	ret

000026b4 <s_task>:
    26b4:	4f 92       	push	r4
    26b6:	5f 92       	push	r5
    26b8:	6f 92       	push	r6
    26ba:	7f 92       	push	r7
    26bc:	8f 92       	push	r8
    26be:	9f 92       	push	r9
    26c0:	af 92       	push	r10
    26c2:	bf 92       	push	r11
    26c4:	cf 92       	push	r12
    26c6:	df 92       	push	r13
    26c8:	ef 92       	push	r14
    26ca:	ff 92       	push	r15
    26cc:	0f 93       	push	r16
    26ce:	1f 93       	push	r17
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	ac 97       	sbiw	r28, 0x2c	; 44
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	8f b7       	in	r24, 0x3f	; 63
    26e6:	88 a7       	std	Y+40, r24	; 0x28
    26e8:	f8 94       	cli
    26ea:	88 a5       	ldd	r24, Y+40	; 0x28
    26ec:	c0 90 6b 03 	lds	r12, 0x036B	; 0x80036b <g_adc_ldr>
    26f0:	d0 90 6c 03 	lds	r13, 0x036C	; 0x80036c <g_adc_ldr+0x1>
    26f4:	e0 90 6d 03 	lds	r14, 0x036D	; 0x80036d <g_adc_ldr+0x2>
    26f8:	f0 90 6e 03 	lds	r15, 0x036E	; 0x80036e <g_adc_ldr+0x3>
    26fc:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <g_adc_ldr_last>
    2700:	30 91 68 03 	lds	r19, 0x0368	; 0x800368 <g_adc_ldr_last+0x1>
    2704:	40 91 69 03 	lds	r20, 0x0369	; 0x800369 <g_adc_ldr_last+0x2>
    2708:	50 91 6a 03 	lds	r21, 0x036A	; 0x80036a <g_adc_ldr_last+0x3>
    270c:	80 90 63 03 	lds	r8, 0x0363	; 0x800363 <g_adc_temp>
    2710:	90 90 64 03 	lds	r9, 0x0364	; 0x800364 <g_adc_temp+0x1>
    2714:	a0 90 65 03 	lds	r10, 0x0365	; 0x800365 <g_adc_temp+0x2>
    2718:	b0 90 66 03 	lds	r11, 0x0366	; 0x800366 <g_adc_temp+0x3>
    271c:	40 90 5f 03 	lds	r4, 0x035F	; 0x80035f <g_adc_temp_last>
    2720:	50 90 60 03 	lds	r5, 0x0360	; 0x800360 <g_adc_temp_last+0x1>
    2724:	60 90 61 03 	lds	r6, 0x0361	; 0x800361 <g_adc_temp_last+0x2>
    2728:	70 90 62 03 	lds	r7, 0x0362	; 0x800362 <g_adc_temp_last+0x3>
    272c:	8f bf       	out	0x3f, r24	; 63
    272e:	c7 01       	movw	r24, r14
    2730:	b6 01       	movw	r22, r12
    2732:	52 d2       	rcall	.+1188   	; 0x2bd8 <__subsf3>
    2734:	69 a7       	std	Y+41, r22	; 0x29
    2736:	7a a7       	std	Y+42, r23	; 0x2a
    2738:	8b a7       	std	Y+43, r24	; 0x2b
    273a:	9c a7       	std	Y+44, r25	; 0x2c
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	5f eb       	ldi	r21, 0xBF	; 191
    2744:	ae d2       	rcall	.+1372   	; 0x2ca2 <__cmpsf2>
    2746:	18 16       	cp	r1, r24
    2748:	64 f4       	brge	.+24     	; 0x2762 <s_task+0xae>
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	5f e3       	ldi	r21, 0x3F	; 63
    2752:	69 a5       	ldd	r22, Y+41	; 0x29
    2754:	7a a5       	ldd	r23, Y+42	; 0x2a
    2756:	8b a5       	ldd	r24, Y+43	; 0x2b
    2758:	9c a5       	ldd	r25, Y+44	; 0x2c
    275a:	f2 d3       	rcall	.+2020   	; 0x2f40 <__gesf2>
    275c:	88 23       	and	r24, r24
    275e:	0c f4       	brge	.+2      	; 0x2762 <s_task+0xae>
    2760:	6f c0       	rjmp	.+222    	; 0x2840 <s_task+0x18c>
    2762:	c7 01       	movw	r24, r14
    2764:	b6 01       	movw	r22, r12
    2766:	0e d3       	rcall	.+1564   	; 0x2d84 <__fixunssfsi>
    2768:	69 a7       	std	Y+41, r22	; 0x29
    276a:	7a a7       	std	Y+42, r23	; 0x2a
    276c:	8b a7       	std	Y+43, r24	; 0x2b
    276e:	9c a7       	std	Y+44, r25	; 0x2c
    2770:	29 a5       	ldd	r18, Y+41	; 0x29
    2772:	3a a5       	ldd	r19, Y+42	; 0x2a
    2774:	26 3b       	cpi	r18, 0xB6	; 182
    2776:	83 e0       	ldi	r24, 0x03	; 3
    2778:	38 07       	cpc	r19, r24
    277a:	08 f5       	brcc	.+66     	; 0x27be <s_task+0x10a>
    277c:	b9 01       	movw	r22, r18
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	2c d3       	rcall	.+1624   	; 0x2ddc <__floatunsisf>
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e2       	ldi	r20, 0x20	; 32
    278a:	51 e4       	ldi	r21, 0x41	; 65
    278c:	25 d2       	rcall	.+1098   	; 0x2bd8 <__subsf3>
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e8       	ldi	r19, 0x80	; 128
    2792:	4d e6       	ldi	r20, 0x6D	; 109
    2794:	54 e4       	ldi	r21, 0x44	; 68
    2796:	89 d2       	rcall	.+1298   	; 0x2caa <__divsf3>
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	45 e7       	ldi	r20, 0x75	; 117
    279e:	53 e4       	ldi	r21, 0x43	; 67
    27a0:	d3 d3       	rcall	.+1958   	; 0x2f48 <__mulsf3>
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e2       	ldi	r20, 0x20	; 32
    27a8:	51 e4       	ldi	r21, 0x41	; 65
    27aa:	17 d2       	rcall	.+1070   	; 0x2bda <__addsf3>
    27ac:	eb d2       	rcall	.+1494   	; 0x2d84 <__fixunssfsi>
    27ae:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    27b2:	e0 eb       	ldi	r30, 0xB0	; 176
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	80 68       	ori	r24, 0x80	; 128
    27ba:	80 83       	st	Z, r24
    27bc:	07 c0       	rjmp	.+14     	; 0x27cc <s_task+0x118>
    27be:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    27c2:	e0 eb       	ldi	r30, 0xB0	; 176
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	8f 73       	andi	r24, 0x3F	; 63
    27ca:	80 83       	st	Z, r24
    27cc:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <g_animation_on>
    27d0:	88 23       	and	r24, r24
    27d2:	49 f1       	breq	.+82     	; 0x2826 <s_task+0x172>
    27d4:	04 e4       	ldi	r16, 0x44	; 68
    27d6:	13 e0       	ldi	r17, 0x03	; 3
    27d8:	89 e0       	ldi	r24, 0x09	; 9
    27da:	eb e3       	ldi	r30, 0x3B	; 59
    27dc:	f2 e0       	ldi	r31, 0x02	; 2
    27de:	d8 01       	movw	r26, r16
    27e0:	01 90       	ld	r0, Z+
    27e2:	0d 92       	st	X+, r0
    27e4:	8a 95       	dec	r24
    27e6:	e1 f7       	brne	.-8      	; 0x27e0 <s_task+0x12c>
    27e8:	3b dd       	rcall	.-1418   	; 0x2260 <lcd_get_sysfont>
    27ea:	9c 01       	movw	r18, r24
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	68 ec       	ldi	r22, 0xC8	; 200
    27f0:	c8 01       	movw	r24, r16
    27f2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    27f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f8:	9f 93       	push	r25
    27fa:	29 a5       	ldd	r18, Y+41	; 0x29
    27fc:	2f 93       	push	r18
    27fe:	84 e4       	ldi	r24, 0x44	; 68
    2800:	92 e0       	ldi	r25, 0x02	; 2
    2802:	9f 93       	push	r25
    2804:	8f 93       	push	r24
    2806:	1f 93       	push	r17
    2808:	0f 93       	push	r16
    280a:	5b d4       	rcall	.+2230   	; 0x30c2 <sprintf>
    280c:	29 dd       	rcall	.-1454   	; 0x2260 <lcd_get_sysfont>
    280e:	9c 01       	movw	r18, r24
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	68 ec       	ldi	r22, 0xC8	; 200
    2814:	c8 01       	movw	r24, r16
    2816:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	8f b7       	in	r24, 0x3f	; 63
    2828:	8f a3       	std	Y+39, r24	; 0x27
    282a:	f8 94       	cli
    282c:	8f a1       	ldd	r24, Y+39	; 0x27
    282e:	c0 92 67 03 	sts	0x0367, r12	; 0x800367 <g_adc_ldr_last>
    2832:	d0 92 68 03 	sts	0x0368, r13	; 0x800368 <g_adc_ldr_last+0x1>
    2836:	e0 92 69 03 	sts	0x0369, r14	; 0x800369 <g_adc_ldr_last+0x2>
    283a:	f0 92 6a 03 	sts	0x036A, r15	; 0x80036a <g_adc_ldr_last+0x3>
    283e:	8f bf       	out	0x3f, r24	; 63
    2840:	a3 01       	movw	r20, r6
    2842:	92 01       	movw	r18, r4
    2844:	c5 01       	movw	r24, r10
    2846:	b4 01       	movw	r22, r8
    2848:	c7 d1       	rcall	.+910    	; 0x2bd8 <__subsf3>
    284a:	6b 01       	movw	r12, r22
    284c:	7c 01       	movw	r14, r24
    284e:	2a e0       	ldi	r18, 0x0A	; 10
    2850:	37 ed       	ldi	r19, 0xD7	; 215
    2852:	43 ea       	ldi	r20, 0xA3	; 163
    2854:	5b eb       	ldi	r21, 0xBB	; 187
    2856:	25 d2       	rcall	.+1098   	; 0x2ca2 <__cmpsf2>
    2858:	18 16       	cp	r1, r24
    285a:	4c f4       	brge	.+18     	; 0x286e <s_task+0x1ba>
    285c:	2a e0       	ldi	r18, 0x0A	; 10
    285e:	37 ed       	ldi	r19, 0xD7	; 215
    2860:	43 ea       	ldi	r20, 0xA3	; 163
    2862:	5b e3       	ldi	r21, 0x3B	; 59
    2864:	c7 01       	movw	r24, r14
    2866:	b6 01       	movw	r22, r12
    2868:	6b d3       	rcall	.+1750   	; 0x2f40 <__gesf2>
    286a:	88 23       	and	r24, r24
    286c:	34 f1       	brlt	.+76     	; 0x28ba <s_task+0x206>
    286e:	8f b7       	in	r24, 0x3f	; 63
    2870:	8e a3       	std	Y+38, r24	; 0x26
    2872:	f8 94       	cli
    2874:	1e a1       	ldd	r17, Y+38	; 0x26
    2876:	29 e1       	ldi	r18, 0x19	; 25
    2878:	37 ec       	ldi	r19, 0xC7	; 199
    287a:	4f ea       	ldi	r20, 0xAF	; 175
    287c:	53 e4       	ldi	r21, 0x43	; 67
    287e:	c5 01       	movw	r24, r10
    2880:	b4 01       	movw	r22, r8
    2882:	aa d1       	rcall	.+852    	; 0x2bd8 <__subsf3>
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 ea       	ldi	r19, 0xA0	; 160
    2888:	47 e8       	ldi	r20, 0x87	; 135
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	5d d3       	rcall	.+1722   	; 0x2f48 <__mulsf3>
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	48 ec       	ldi	r20, 0xC8	; 200
    2894:	51 e4       	ldi	r21, 0x41	; 65
    2896:	a1 d1       	rcall	.+834    	; 0x2bda <__addsf3>
    2898:	60 93 5b 03 	sts	0x035B, r22	; 0x80035b <g_temp>
    289c:	70 93 5c 03 	sts	0x035C, r23	; 0x80035c <g_temp+0x1>
    28a0:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <g_temp+0x2>
    28a4:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <g_temp+0x3>
    28a8:	80 92 5f 03 	sts	0x035F, r8	; 0x80035f <g_adc_temp_last>
    28ac:	90 92 60 03 	sts	0x0360, r9	; 0x800360 <g_adc_temp_last+0x1>
    28b0:	a0 92 61 03 	sts	0x0361, r10	; 0x800361 <g_adc_temp_last+0x2>
    28b4:	b0 92 62 03 	sts	0x0362, r11	; 0x800362 <g_adc_temp_last+0x3>
    28b8:	1f bf       	out	0x3f, r17	; 63
    28ba:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <g_animation_on>
    28be:	88 23       	and	r24, r24
    28c0:	11 f0       	breq	.+4      	; 0x28c6 <s_task+0x212>
    28c2:	35 d9       	rcall	.-3478   	; 0x1b2e <lcd_animation_loop>
    28c4:	18 c0       	rjmp	.+48     	; 0x28f6 <s_task+0x242>
    28c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    28ca:	88 23       	and	r24, r24
    28cc:	a1 f0       	breq	.+40     	; 0x28f6 <s_task+0x242>
    28ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
    28d2:	6a d8       	rcall	.-3884   	; 0x19a8 <lcd_cls>
    28d4:	85 e2       	ldi	r24, 0x25	; 37
    28d6:	ed e4       	ldi	r30, 0x4D	; 77
    28d8:	f2 e0       	ldi	r31, 0x02	; 2
    28da:	de 01       	movw	r26, r28
    28dc:	11 96       	adiw	r26, 0x01	; 1
    28de:	01 90       	ld	r0, Z+
    28e0:	0d 92       	st	X+, r0
    28e2:	8a 95       	dec	r24
    28e4:	e1 f7       	brne	.-8      	; 0x28de <s_task+0x22a>
    28e6:	bc dc       	rcall	.-1672   	; 0x2260 <lcd_get_sysfont>
    28e8:	9c 01       	movw	r18, r24
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	68 e0       	ldi	r22, 0x08	; 8
    28ee:	ce 01       	movw	r24, r28
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    28f6:	ac 96       	adiw	r28, 0x2c	; 44
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	1f 91       	pop	r17
    2908:	0f 91       	pop	r16
    290a:	ff 90       	pop	r15
    290c:	ef 90       	pop	r14
    290e:	df 90       	pop	r13
    2910:	cf 90       	pop	r12
    2912:	bf 90       	pop	r11
    2914:	af 90       	pop	r10
    2916:	9f 90       	pop	r9
    2918:	8f 90       	pop	r8
    291a:	7f 90       	pop	r7
    291c:	6f 90       	pop	r6
    291e:	5f 90       	pop	r5
    2920:	4f 90       	pop	r4
    2922:	08 95       	ret

00002924 <main>:
}

int main (void)
{
    2924:	ef 92       	push	r14
    2926:	ff 92       	push	r15
    2928:	0f 93       	push	r16
    292a:	1f 93       	push	r17
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
    2930:	00 d0       	rcall	.+0      	; 0x2932 <main+0xe>
    2932:	00 d0       	rcall	.+0      	; 0x2934 <main+0x10>
    2934:	1f 92       	push	r1
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts,
	 * most critical pins are handled first.
	 */

	PORTC = 0b01111110;		// PC0: LDR-ADC in-NoPU, PC1: SW_I in-PU, PC2: SW_Q in-PU, PC3: LCD-CS out-HI
    293a:	8e e7       	ldi	r24, 0x7E	; 126
    293c:	88 b9       	out	0x08, r24	; 8
	DDRC  = 0b00001000;		// PC4: I2C-SDA in-PU-AF-TWI, PC5: I2C-SCL in-PU-AF-TWI, PC6: RESET in-PU, PC7: -
    293e:	88 e0       	ldi	r24, 0x08	; 8
    2940:	87 b9       	out	0x07, r24	; 7

	PORTB = 0b00010100;		// PB0: LCD-CD out-LO, PB1: AUDIO out-AF-OC1A, PB2: SW_P in-PU, PB3: LCDBL out-AF-OC2A,
    2942:	84 e1       	ldi	r24, 0x14	; 20
    2944:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0b11111011;		// PB4: LCD-R/!W out-HI, PB5: LCD-EN out-LO, PB6: LEDRD out-LO, LEDGN out-LO
    2946:	8b ef       	ldi	r24, 0xFB	; 251
    2948:	84 b9       	out	0x04, r24	; 4

	PORTD = 0xff;			// PD0..PD7: LCD-D0..LCD-D7 in-PU
    294a:	8f ef       	ldi	r24, 0xFF	; 255
    294c:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x00;
    294e:	1a b8       	out	0x0a, r1	; 10

	// Analog input: Digital Disable Register
	DIDR0 = 0b00000001;		// PC0: LDR-ADC
    2950:	0f 2e       	mov	r0, r31
    2952:	fe e7       	ldi	r31, 0x7E	; 126
    2954:	ef 2e       	mov	r14, r31
    2956:	f1 2c       	mov	r15, r1
    2958:	f0 2d       	mov	r31, r0
    295a:	11 e0       	ldi	r17, 0x01	; 1
    295c:	f7 01       	movw	r30, r14
    295e:	10 83       	st	Z, r17

	/* Rapid I/O settings */
	s_io_preinit();

	/* Init of sub-modules */
	sysclk_init();	PRR = 0b11101011;			// For debugging this module has to be powered on, again
    2960:	0e 94 a4 03 	call	0x748	; 0x748 <sysclk_init>
    2964:	8b ee       	ldi	r24, 0xEB	; 235
    2966:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
static void s_tc_init(void)
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts. */

	/* Timer Synchronous Mode - prepare for  s_tc_start(void) */
	GTCCR = _BV(TSM)							// Timer Synchronous Mode active
    296a:	03 e8       	ldi	r16, 0x83	; 131
    296c:	03 bd       	out	0x23, r16	; 35
	{
	}

	/* TC1 - OC1A: Audio output @ 16-bit counter PWM, used: 10-bit resolution - overflows with 15625 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    296e:	68 e0       	ldi	r22, 0x08	; 8
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	0e 94 bd 03 	call	0x77a	; 0x77a <sysclk_enable_module>

		TCCR1A  = (0b10  << COM1A0)		 		// HI --> LO when compare value is reached - non-inverted PWM mode
    2976:	82 e8       	ldi	r24, 0x82	; 130
    2978:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				| (0b10  << WGM10);				// WGM: 0b0110 = Fast PWM 9 bit

		TCCR1B  = ( 0b01 << WGM12)
    297c:	89 e0       	ldi	r24, 0x09	; 9
    297e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
				| (0b001 << CS10);				// CLKio DIV1 = 8 MHz

		TCNT1H  = 0b00000000           ;		// Clear current value for synchronous start (when restarting without reset)
    2982:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		barrier();
		TCNT1L	=            0b00000000;
    2986:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

		OCR1AH  =        0b1           ;		// Mid-range compare value for zero audio output
    298a:	10 93 89 00 	sts	0x0089, r17	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL  =            0b00000000;
    298e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

		TIMSK1  = _BV(TOIE1);					// TOIE1 interrupt
    2992:	10 93 6f 00 	sts	0x006F, r17	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		TIFR1   = 0b00100111;					// Clear all flags (when restarting without reset)
    2996:	87 e2       	ldi	r24, 0x27	; 39
    2998:	86 bb       	out	0x16, r24	; 22
	}

	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    299a:	60 e4       	ldi	r22, 0x40	; 64
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	0e 94 bd 03 	call	0x77a	; 0x77a <sysclk_enable_module>

		TCCR2A  = (0b10  << COM2A0)				// HI --> LO when compare value is reached - non-inverted PWM mode
    29a2:	00 93 b0 00 	sts	0x00B0, r16	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				| (0b11  << WGM20);				// WGM: 0b011 = Fast PWM mode 8 bit

		TCCR2B  = ( 0b0  << WGM22)
    29a6:	85 e0       	ldi	r24, 0x05	; 5
    29a8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
				| (0b101 << CS20);				// CLKio DIV 128 = 62500 Hz --> / 2**8 = 244 Hz looping rate

		TCNT2   = 0;							// Clear current value for synchronous start (when restarting without reset)
    29ac:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

		OCR2A   = 0x00;							// LCD backlight dimmed down
    29b0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

		TIMSK2  = 0b00000000;					// No interrupts
    29b4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		TIFR2   = 0b00000111;					// Clear all flags
    29b8:	87 e0       	ldi	r24, 0x07	; 7
    29ba:	87 bb       	out	0x17, r24	; 23

		ASSR    = 0;							// No async. TOSC1 mode
    29bc:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
}


static void s_adc_init(void)
{
	sysclk_enable_module(POWER_RED_REG0, PRADC_bm);	// enable ADC sub-module
    29c0:	61 e0       	ldi	r22, 0x01	; 1
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	0e 94 bd 03 	call	0x77a	; 0x77a <sysclk_enable_module>
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    29c8:	f7 01       	movw	r30, r14
    29ca:	10 83       	st	Z, r17
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    29cc:	ea e7       	ldi	r30, 0x7A	; 122
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	87 e8       	ldi	r24, 0x87	; 135
    29d2:	80 83       	st	Z, r24
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    29d4:	80 ec       	ldi	r24, 0xC0	; 192
    29d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	adc_disable_digital_inputs(_BV(ADC0D));		// disable the digital input on the ADC0 port

	adc_init(ADC_PRESCALER_DIV128);
	adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);

	ADCSRA |= _BV(ADIF);						// clear interrupt status bit by setting it to clear
    29da:	80 81       	ld	r24, Z
    29dc:	80 61       	ori	r24, 0x10	; 16
    29de:	80 83       	st	Z, r24
}

/*  \brief Enable ADC interrupt */
static inline void adc_enable_interrupt(void)
{
	ADCSRA |= (1 << ADIE);
    29e0:	80 81       	ld	r24, Z
    29e2:	88 60       	ori	r24, 0x08	; 8
    29e4:	80 83       	st	Z, r24
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    29e6:	ab e7       	ldi	r26, 0x7B	; 123
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	8c 91       	ld	r24, X
    29ec:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
    29ee:	86 60       	ori	r24, 0x06	; 6
	ADC_ADTS_REG = temp;
    29f0:	8c 93       	st	X, r24
}

/*  \brief Enable ADC Auto Trigger */
static inline void adc_enable_autotrigger(void)
{
	ADCSRA |= (1 << ADATE);
    29f2:	80 81       	ld	r24, Z
    29f4:	80 62       	ori	r24, 0x20	; 32
    29f6:	80 83       	st	Z, r24
	ioport_init();
	s_tc_init();
	s_adc_init();

	/* I/O pins go active here */
	board_init();
    29f8:	0a de       	rcall	.-1004   	; 0x260e <board_init>
//@}
static inline reset_cause_t reset_cause_get_causes(void)
{
#if (MEGA_XX4 ||MEGA_XX4_A || MEGA_XX8 || MEGA_XX8_A || \
	MEGA_XX || MEGA_XX_UN2 || MEGA_XX0_1 || MEGA_RF || MEGA_UNCATEGORIZED) && !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t temp_mcsr = MCUSR ;
    29fa:	84 b7       	in	r24, 0x34	; 52
    29fc:	98 2f       	mov	r25, r24
    29fe:	97 70       	andi	r25, 0x07	; 7

	reset_cause_t rc = reset_cause_get_causes();
	if (rc & CHIP_RESET_CAUSE_EXTRST	||
		rc & CHIP_RESET_CAUSE_BOD_CPU	||
    2a00:	11 f4       	brne	.+4      	; 0x2a06 <main+0xe2>
		rc & CHIP_RESET_CAUSE_POR		||
    2a02:	81 11       	cpse	r24, r1
    2a04:	39 c0       	rjmp	.+114    	; 0x2a78 <main+0x154>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2a06:	8f b7       	in	r24, 0x3f	; 63
    2a08:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    2a0a:	f8 94       	cli
	return flags;
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05

static void s_reset_global_vars(void)
{
	irqflags_t flags	= cpu_irq_save();

	g_adc_state			= ADC_STATE_PRE_LDR;
    2a0e:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <g_adc_state>
	g_adc_ldr			= 0.f;
    2a12:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <g_adc_ldr>
    2a16:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <g_adc_ldr+0x1>
    2a1a:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <g_adc_ldr+0x2>
    2a1e:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <g_adc_ldr+0x3>
	g_adc_ldr_last		= 0.f;
    2a22:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <g_adc_ldr_last>
    2a26:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <g_adc_ldr_last+0x1>
    2a2a:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <g_adc_ldr_last+0x2>
    2a2e:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <g_adc_ldr_last+0x3>
	g_adc_temp			= 0.f;
    2a32:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <g_adc_temp>
    2a36:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <g_adc_temp+0x1>
    2a3a:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <g_adc_temp+0x2>
    2a3e:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <g_adc_temp+0x3>
	g_adc_temp_last		= 0.f;
    2a42:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <g_adc_temp_last>
    2a46:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <g_adc_temp_last+0x1>
    2a4a:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <g_adc_temp_last+0x2>
    2a4e:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <g_adc_temp_last+0x3>

	g_temp				= 25.f;
    2a52:	40 e0       	ldi	r20, 0x00	; 0
    2a54:	50 e0       	ldi	r21, 0x00	; 0
    2a56:	68 ec       	ldi	r22, 0xC8	; 200
    2a58:	71 e4       	ldi	r23, 0x41	; 65
    2a5a:	40 93 5b 03 	sts	0x035B, r20	; 0x80035b <g_temp>
    2a5e:	50 93 5c 03 	sts	0x035C, r21	; 0x80035c <g_temp+0x1>
    2a62:	60 93 5d 03 	sts	0x035D, r22	; 0x80035d <g_temp+0x2>
    2a66:	70 93 5e 03 	sts	0x035E, r23	; 0x80035e <g_temp+0x3>
	g_lcdbl_dimmer		= 64;
    2a6a:	90 e4       	ldi	r25, 0x40	; 64
    2a6c:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <g_lcdbl_dimmer>

	g_animation_on		= false;
    2a70:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <g_animation_on>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a74:	8f bf       	out	0x3f, r24	; 63
    2a76:	0d c0       	rjmp	.+26     	; 0x2a92 <main+0x16e>
		rc & CHIP_RESET_CAUSE_POR		||
		!rc) {
		s_reset_global_vars();
	} else {
		/* DEBUG */
		g_u32_DEBUG21 = rc;
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	a0 e0       	ldi	r26, 0x00	; 0
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <g_u32_DEBUG21>
    2a82:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <g_u32_DEBUG21+0x1>
    2a86:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <g_u32_DEBUG21+0x2>
    2a8a:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <g_u32_DEBUG21+0x3>
		asm_break();
    2a8e:	0e 94 d6 07 	call	0xfac	; 0xfac <asm_break>
	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
}

static void s_twi_init(void)
{
	sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    2a92:	60 e8       	ldi	r22, 0x80	; 128
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	0e 94 bd 03 	call	0x77a	; 0x77a <sysclk_enable_module>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2a9a:	8f b7       	in	r24, 0x3f	; 63
    2a9c:	8c 83       	std	Y+4, r24	; 0x04
	cpu_irq_disable();
    2a9e:	f8 94       	cli
	return flags;
    2aa0:	8c 81       	ldd	r24, Y+4	; 0x04

	irqflags_t flags = cpu_irq_save();

	TWSR = (0b00 << TWPS0);						// Prescaler value = 1
    2aa2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 2;									// TWI bit-rate = 400 kBit/sec @ 8 MHz when master mode active
    2aa6:	92 e0       	ldi	r25, 0x02	; 2
    2aa8:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	TWAR  = (TWI_SLAVE_ADDR    << 1) /* | (TWI_SLAVE_ADDR_GCE << TWGCE)*/ ;
    2aac:	94 e4       	ldi	r25, 0x44	; 68
    2aae:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	TWAMR = (TWI_SLAVE_ADDR_BM << 1);
    2ab2:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__TEXT_REGION_LENGTH__+0x7e00bd>

	TWCR = _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// Enable Acknowledge, ENable TWI port, Interrupt Enable, no START or STOP bit
    2ab6:	95 e4       	ldi	r25, 0x45	; 69
    2ab8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2abc:	8f bf       	out	0x3f, r24	; 63

	/* I2C interface */
	s_twi_init();

	/* All interrupt sources prepared here - IRQ activation */
	cpu_irq_enable();
    2abe:	78 94       	sei
	/* TC0: not in use */
	/* TC1: Audio output @ 16-bit counter PWM, used: 10-bit resolution */
	/* TC2: LCD backlight w/ 8-bit resolution */
	{
		/* Timer Synchronous Mode - trigger */
		GTCCR = 0;								// trigger the sync for all counters
    2ac0:	13 bc       	out	0x23, r1	; 35

	/* Start of sub-modules */
	s_tc_start();								// All clocks and PWM timers start here

	/* Initialize external components */
	lcd_init();
    2ac2:	d1 db       	rcall	.-2142   	; 0x2266 <lcd_init>
	lcd_test(0b11110001);						// Debugging purposes
    2ac4:	81 ef       	ldi	r24, 0xF1	; 241
    2ac6:	92 d9       	rcall	.-3292   	; 0x1dec <lcd_test>


	/* main loop */
	runmode = 1;
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <runmode>
	}
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    2ace:	11 e0       	ldi	r17, 0x01	; 1


	/* main loop */
	runmode = 1;
    while (runmode) {
	    s_task();
    2ad0:	f1 dd       	rcall	.-1054   	; 0x26b4 <s_task>
	}
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    2ad2:	13 bf       	out	0x33, r17	; 51
		  | _BV(SE);							// enable sleep command

	__asm__ __volatile__ ("sleep" ::: "memory");
    2ad4:	88 95       	sleep

	SMCR &= ~(_BV(SE));							// disable sleep command
    2ad6:	83 b7       	in	r24, 0x33	; 51
    2ad8:	8e 7f       	andi	r24, 0xFE	; 254
    2ada:	83 bf       	out	0x33, r24	; 51
	lcd_test(0b11110001);						// Debugging purposes


	/* main loop */
	runmode = 1;
    while (runmode) {
    2adc:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <runmode>
    2ae0:	81 11       	cpse	r24, r1
    2ae2:	f6 cf       	rjmp	.-20     	; 0x2ad0 <main+0x1ac>
	    s_enter_sleep(SLEEP_MODE_IDLE);
    }


	/* Shutdown external components */
	lcd_shutdown();
    2ae4:	d3 db       	rcall	.-2138   	; 0x228c <lcd_shutdown>

	cpu_irq_disable();
    2ae6:	f8 94       	cli

	/* disable sub-modules */
	ACSR |= _BV(ACD);							// disable AnalogCompare sub-module
    2ae8:	80 b7       	in	r24, 0x30	; 48
    2aea:	80 68       	ori	r24, 0x80	; 128
    2aec:	80 bf       	out	0x30, r24	; 48

	sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    2aee:	64 e0       	ldi	r22, 0x04	; 4
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>
	sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    2af6:	62 e0       	ldi	r22, 0x02	; 2
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2afe:	8f b7       	in	r24, 0x3f	; 63
    2b00:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
    2b02:	f8 94       	cli
	return flags;
    2b04:	8b 81       	ldd	r24, Y+3	; 0x03

static void s_twi_disable(void)
{
	irqflags_t flags = cpu_irq_save();

	TWCR = _BV(TWEN);							// disable the interrupt source
    2b06:	ec eb       	ldi	r30, 0xBC	; 188
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	94 e0       	ldi	r25, 0x04	; 4
    2b0c:	90 83       	st	Z, r25
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    2b0e:	3c 98       	cbi	0x07, 4	; 7
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
    2b10:	44 9a       	sbi	0x08, 4	; 8
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    2b12:	3d 98       	cbi	0x07, 5	; 7
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
    2b14:	45 9a       	sbi	0x08, 5	; 8
	ioport_set_pin_mode(SDA_GPIO, IOPORT_MODE_PULLUP);

	ioport_set_pin_dir(SCL_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(SCL_GPIO, IOPORT_MODE_PULLUP);

	TWCR = 0;									// disable the TWI port
    2b16:	10 82       	st	Z, r1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2b18:	8f bf       	out	0x3f, r24	; 63

	cpu_irq_restore(flags);

	sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    2b1a:	60 e8       	ldi	r22, 0x80	; 128
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>
}

/*  \brief Disable ADC interrupt */
static inline void adc_disable_interrupt(void)
{
	ADCSRA &= ~(1 << ADIE);
    2b22:	ea e7       	ldi	r30, 0x7A	; 122
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	87 7f       	andi	r24, 0xF7	; 247
    2b2a:	80 83       	st	Z, r24
}

/*  \brief Disable ADC Auto Trigger */
static inline void adc_disable_autotrigger(void)
{
	ADCSRA &= ~(1 << ADATE);
    2b2c:	80 81       	ld	r24, Z
    2b2e:	8f 7d       	andi	r24, 0xDF	; 223
    2b30:	80 83       	st	Z, r24
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    2b32:	eb e7       	ldi	r30, 0x7B	; 123
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
	ADC_ADTS_REG = temp;
    2b3a:	80 83       	st	Z, r24
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    2b3c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    2b40:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	adc_disable_autotrigger();
	adc_set_autotrigger_source(0);
	adc_set_admux(0);
	adc_disable_digital_inputs(0);

	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
    2b44:	61 e0       	ldi	r22, 0x01	; 1
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2b4c:	8f b7       	in	r24, 0x3f	; 63
    2b4e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2b50:	f8 94       	cli
	return flags;
    2b52:	19 81       	ldd	r17, Y+1	; 0x01
{
	irqflags_t flags = cpu_irq_save();

	/* TC0: not in use */
	{
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    2b54:	60 e2       	ldi	r22, 0x20	; 32
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    2b5c:	21 98       	cbi	0x04, 1	; 4
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
    2b5e:	29 98       	cbi	0x05, 1	; 5
	{
		// bring pin to high Z mode to reduce audible plop noise
		ioport_set_pin_dir(AUDIO_PWM, IOPORT_DIR_INPUT);
		ioport_set_pin_mode(AUDIO_PWM, IOPORT_MODE_PULLDOWN);

		TCCR1A  = 0;							// release alternate port function
    2b60:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1B  = 0;
    2b64:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		TCCR1C  = 0;
    2b68:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>

		TIMSK1  = 0;							// no interrupts
    2b6c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    2b70:	68 e0       	ldi	r22, 0x08	; 8
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
    2b78:	23 9a       	sbi	0x04, 3	; 4
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    2b7a:	2b 98       	cbi	0x05, 3	; 5
	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		ioport_set_pin_dir(LCDBL_PWM, IOPORT_DIR_OUTPUT);
		ioport_set_pin_level(LCDBL_PWM, false);	// turn backlight off

		TCCR2A  = 0;							// release alternate port function
    2b7c:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B  = 0;
    2b80:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

		TIMSK2  = 0;							// no interrupts
    2b84:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>

		ASSR    = 0;							// no async TOSC1 mode
    2b88:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>

		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    2b8c:	60 e4       	ldi	r22, 0x40	; 64
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2b94:	8f b7       	in	r24, 0x3f	; 63
    2b96:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2b98:	f8 94       	cli
	return flags;
    2b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9c:	5f 93       	push	r21
    2b9e:	50 e8       	ldi	r21, 0x80	; 128
    2ba0:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    2ba4:	50 e0       	ldi	r21, 0x00	; 0
    2ba6:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    2baa:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2bac:	8f bf       	out	0x3f, r24	; 63
    2bae:	1f bf       	out	0x3f, r17	; 63
	}
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    2bb0:	89 e0       	ldi	r24, 0x09	; 9
    2bb2:	83 bf       	out	0x33, r24	; 51
		  | _BV(SE);							// enable sleep command

	__asm__ __volatile__ ("sleep" ::: "memory");
    2bb4:	88 95       	sleep

	SMCR &= ~(_BV(SE));							// disable sleep command
    2bb6:	83 b7       	in	r24, 0x33	; 51
    2bb8:	8e 7f       	andi	r24, 0xFE	; 254
    2bba:	83 bf       	out	0x33, r24	; 51
	s_tc_disable();

    s_enter_sleep(SLEEP_MODE_PWR_DOWN);

    return retcode;								// should never be reached
}
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	ff 90       	pop	r15
    2bd4:	ef 90       	pop	r14
    2bd6:	08 95       	ret

00002bd8 <__subsf3>:
    2bd8:	50 58       	subi	r21, 0x80	; 128

00002bda <__addsf3>:
    2bda:	bb 27       	eor	r27, r27
    2bdc:	aa 27       	eor	r26, r26
    2bde:	0e d0       	rcall	.+28     	; 0x2bfc <__addsf3x>
    2be0:	75 c1       	rjmp	.+746    	; 0x2ecc <__fp_round>
    2be2:	66 d1       	rcall	.+716    	; 0x2eb0 <__fp_pscA>
    2be4:	30 f0       	brcs	.+12     	; 0x2bf2 <__addsf3+0x18>
    2be6:	6b d1       	rcall	.+726    	; 0x2ebe <__fp_pscB>
    2be8:	20 f0       	brcs	.+8      	; 0x2bf2 <__addsf3+0x18>
    2bea:	31 f4       	brne	.+12     	; 0x2bf8 <__addsf3+0x1e>
    2bec:	9f 3f       	cpi	r25, 0xFF	; 255
    2bee:	11 f4       	brne	.+4      	; 0x2bf4 <__addsf3+0x1a>
    2bf0:	1e f4       	brtc	.+6      	; 0x2bf8 <__addsf3+0x1e>
    2bf2:	5b c1       	rjmp	.+694    	; 0x2eaa <__fp_nan>
    2bf4:	0e f4       	brtc	.+2      	; 0x2bf8 <__addsf3+0x1e>
    2bf6:	e0 95       	com	r30
    2bf8:	e7 fb       	bst	r30, 7
    2bfa:	51 c1       	rjmp	.+674    	; 0x2e9e <__fp_inf>

00002bfc <__addsf3x>:
    2bfc:	e9 2f       	mov	r30, r25
    2bfe:	77 d1       	rcall	.+750    	; 0x2eee <__fp_split3>
    2c00:	80 f3       	brcs	.-32     	; 0x2be2 <__addsf3+0x8>
    2c02:	ba 17       	cp	r27, r26
    2c04:	62 07       	cpc	r22, r18
    2c06:	73 07       	cpc	r23, r19
    2c08:	84 07       	cpc	r24, r20
    2c0a:	95 07       	cpc	r25, r21
    2c0c:	18 f0       	brcs	.+6      	; 0x2c14 <__addsf3x+0x18>
    2c0e:	71 f4       	brne	.+28     	; 0x2c2c <__addsf3x+0x30>
    2c10:	9e f5       	brtc	.+102    	; 0x2c78 <__addsf3x+0x7c>
    2c12:	8f c1       	rjmp	.+798    	; 0x2f32 <__fp_zero>
    2c14:	0e f4       	brtc	.+2      	; 0x2c18 <__addsf3x+0x1c>
    2c16:	e0 95       	com	r30
    2c18:	0b 2e       	mov	r0, r27
    2c1a:	ba 2f       	mov	r27, r26
    2c1c:	a0 2d       	mov	r26, r0
    2c1e:	0b 01       	movw	r0, r22
    2c20:	b9 01       	movw	r22, r18
    2c22:	90 01       	movw	r18, r0
    2c24:	0c 01       	movw	r0, r24
    2c26:	ca 01       	movw	r24, r20
    2c28:	a0 01       	movw	r20, r0
    2c2a:	11 24       	eor	r1, r1
    2c2c:	ff 27       	eor	r31, r31
    2c2e:	59 1b       	sub	r21, r25
    2c30:	99 f0       	breq	.+38     	; 0x2c58 <__addsf3x+0x5c>
    2c32:	59 3f       	cpi	r21, 0xF9	; 249
    2c34:	50 f4       	brcc	.+20     	; 0x2c4a <__addsf3x+0x4e>
    2c36:	50 3e       	cpi	r21, 0xE0	; 224
    2c38:	68 f1       	brcs	.+90     	; 0x2c94 <__addsf3x+0x98>
    2c3a:	1a 16       	cp	r1, r26
    2c3c:	f0 40       	sbci	r31, 0x00	; 0
    2c3e:	a2 2f       	mov	r26, r18
    2c40:	23 2f       	mov	r18, r19
    2c42:	34 2f       	mov	r19, r20
    2c44:	44 27       	eor	r20, r20
    2c46:	58 5f       	subi	r21, 0xF8	; 248
    2c48:	f3 cf       	rjmp	.-26     	; 0x2c30 <__addsf3x+0x34>
    2c4a:	46 95       	lsr	r20
    2c4c:	37 95       	ror	r19
    2c4e:	27 95       	ror	r18
    2c50:	a7 95       	ror	r26
    2c52:	f0 40       	sbci	r31, 0x00	; 0
    2c54:	53 95       	inc	r21
    2c56:	c9 f7       	brne	.-14     	; 0x2c4a <__addsf3x+0x4e>
    2c58:	7e f4       	brtc	.+30     	; 0x2c78 <__addsf3x+0x7c>
    2c5a:	1f 16       	cp	r1, r31
    2c5c:	ba 0b       	sbc	r27, r26
    2c5e:	62 0b       	sbc	r22, r18
    2c60:	73 0b       	sbc	r23, r19
    2c62:	84 0b       	sbc	r24, r20
    2c64:	ba f0       	brmi	.+46     	; 0x2c94 <__addsf3x+0x98>
    2c66:	91 50       	subi	r25, 0x01	; 1
    2c68:	a1 f0       	breq	.+40     	; 0x2c92 <__addsf3x+0x96>
    2c6a:	ff 0f       	add	r31, r31
    2c6c:	bb 1f       	adc	r27, r27
    2c6e:	66 1f       	adc	r22, r22
    2c70:	77 1f       	adc	r23, r23
    2c72:	88 1f       	adc	r24, r24
    2c74:	c2 f7       	brpl	.-16     	; 0x2c66 <__addsf3x+0x6a>
    2c76:	0e c0       	rjmp	.+28     	; 0x2c94 <__addsf3x+0x98>
    2c78:	ba 0f       	add	r27, r26
    2c7a:	62 1f       	adc	r22, r18
    2c7c:	73 1f       	adc	r23, r19
    2c7e:	84 1f       	adc	r24, r20
    2c80:	48 f4       	brcc	.+18     	; 0x2c94 <__addsf3x+0x98>
    2c82:	87 95       	ror	r24
    2c84:	77 95       	ror	r23
    2c86:	67 95       	ror	r22
    2c88:	b7 95       	ror	r27
    2c8a:	f7 95       	ror	r31
    2c8c:	9e 3f       	cpi	r25, 0xFE	; 254
    2c8e:	08 f0       	brcs	.+2      	; 0x2c92 <__addsf3x+0x96>
    2c90:	b3 cf       	rjmp	.-154    	; 0x2bf8 <__addsf3+0x1e>
    2c92:	93 95       	inc	r25
    2c94:	88 0f       	add	r24, r24
    2c96:	08 f0       	brcs	.+2      	; 0x2c9a <__addsf3x+0x9e>
    2c98:	99 27       	eor	r25, r25
    2c9a:	ee 0f       	add	r30, r30
    2c9c:	97 95       	ror	r25
    2c9e:	87 95       	ror	r24
    2ca0:	08 95       	ret

00002ca2 <__cmpsf2>:
    2ca2:	d9 d0       	rcall	.+434    	; 0x2e56 <__fp_cmp>
    2ca4:	08 f4       	brcc	.+2      	; 0x2ca8 <__cmpsf2+0x6>
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	08 95       	ret

00002caa <__divsf3>:
    2caa:	0c d0       	rcall	.+24     	; 0x2cc4 <__divsf3x>
    2cac:	0f c1       	rjmp	.+542    	; 0x2ecc <__fp_round>
    2cae:	07 d1       	rcall	.+526    	; 0x2ebe <__fp_pscB>
    2cb0:	40 f0       	brcs	.+16     	; 0x2cc2 <__divsf3+0x18>
    2cb2:	fe d0       	rcall	.+508    	; 0x2eb0 <__fp_pscA>
    2cb4:	30 f0       	brcs	.+12     	; 0x2cc2 <__divsf3+0x18>
    2cb6:	21 f4       	brne	.+8      	; 0x2cc0 <__divsf3+0x16>
    2cb8:	5f 3f       	cpi	r21, 0xFF	; 255
    2cba:	19 f0       	breq	.+6      	; 0x2cc2 <__divsf3+0x18>
    2cbc:	f0 c0       	rjmp	.+480    	; 0x2e9e <__fp_inf>
    2cbe:	51 11       	cpse	r21, r1
    2cc0:	39 c1       	rjmp	.+626    	; 0x2f34 <__fp_szero>
    2cc2:	f3 c0       	rjmp	.+486    	; 0x2eaa <__fp_nan>

00002cc4 <__divsf3x>:
    2cc4:	14 d1       	rcall	.+552    	; 0x2eee <__fp_split3>
    2cc6:	98 f3       	brcs	.-26     	; 0x2cae <__divsf3+0x4>

00002cc8 <__divsf3_pse>:
    2cc8:	99 23       	and	r25, r25
    2cca:	c9 f3       	breq	.-14     	; 0x2cbe <__divsf3+0x14>
    2ccc:	55 23       	and	r21, r21
    2cce:	b1 f3       	breq	.-20     	; 0x2cbc <__divsf3+0x12>
    2cd0:	95 1b       	sub	r25, r21
    2cd2:	55 0b       	sbc	r21, r21
    2cd4:	bb 27       	eor	r27, r27
    2cd6:	aa 27       	eor	r26, r26
    2cd8:	62 17       	cp	r22, r18
    2cda:	73 07       	cpc	r23, r19
    2cdc:	84 07       	cpc	r24, r20
    2cde:	38 f0       	brcs	.+14     	; 0x2cee <__divsf3_pse+0x26>
    2ce0:	9f 5f       	subi	r25, 0xFF	; 255
    2ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce4:	22 0f       	add	r18, r18
    2ce6:	33 1f       	adc	r19, r19
    2ce8:	44 1f       	adc	r20, r20
    2cea:	aa 1f       	adc	r26, r26
    2cec:	a9 f3       	breq	.-22     	; 0x2cd8 <__divsf3_pse+0x10>
    2cee:	33 d0       	rcall	.+102    	; 0x2d56 <__divsf3_pse+0x8e>
    2cf0:	0e 2e       	mov	r0, r30
    2cf2:	3a f0       	brmi	.+14     	; 0x2d02 <__divsf3_pse+0x3a>
    2cf4:	e0 e8       	ldi	r30, 0x80	; 128
    2cf6:	30 d0       	rcall	.+96     	; 0x2d58 <__divsf3_pse+0x90>
    2cf8:	91 50       	subi	r25, 0x01	; 1
    2cfa:	50 40       	sbci	r21, 0x00	; 0
    2cfc:	e6 95       	lsr	r30
    2cfe:	00 1c       	adc	r0, r0
    2d00:	ca f7       	brpl	.-14     	; 0x2cf4 <__divsf3_pse+0x2c>
    2d02:	29 d0       	rcall	.+82     	; 0x2d56 <__divsf3_pse+0x8e>
    2d04:	fe 2f       	mov	r31, r30
    2d06:	27 d0       	rcall	.+78     	; 0x2d56 <__divsf3_pse+0x8e>
    2d08:	66 0f       	add	r22, r22
    2d0a:	77 1f       	adc	r23, r23
    2d0c:	88 1f       	adc	r24, r24
    2d0e:	bb 1f       	adc	r27, r27
    2d10:	26 17       	cp	r18, r22
    2d12:	37 07       	cpc	r19, r23
    2d14:	48 07       	cpc	r20, r24
    2d16:	ab 07       	cpc	r26, r27
    2d18:	b0 e8       	ldi	r27, 0x80	; 128
    2d1a:	09 f0       	breq	.+2      	; 0x2d1e <__divsf3_pse+0x56>
    2d1c:	bb 0b       	sbc	r27, r27
    2d1e:	80 2d       	mov	r24, r0
    2d20:	bf 01       	movw	r22, r30
    2d22:	ff 27       	eor	r31, r31
    2d24:	93 58       	subi	r25, 0x83	; 131
    2d26:	5f 4f       	sbci	r21, 0xFF	; 255
    2d28:	2a f0       	brmi	.+10     	; 0x2d34 <__divsf3_pse+0x6c>
    2d2a:	9e 3f       	cpi	r25, 0xFE	; 254
    2d2c:	51 05       	cpc	r21, r1
    2d2e:	68 f0       	brcs	.+26     	; 0x2d4a <__divsf3_pse+0x82>
    2d30:	b6 c0       	rjmp	.+364    	; 0x2e9e <__fp_inf>
    2d32:	00 c1       	rjmp	.+512    	; 0x2f34 <__fp_szero>
    2d34:	5f 3f       	cpi	r21, 0xFF	; 255
    2d36:	ec f3       	brlt	.-6      	; 0x2d32 <__divsf3_pse+0x6a>
    2d38:	98 3e       	cpi	r25, 0xE8	; 232
    2d3a:	dc f3       	brlt	.-10     	; 0x2d32 <__divsf3_pse+0x6a>
    2d3c:	86 95       	lsr	r24
    2d3e:	77 95       	ror	r23
    2d40:	67 95       	ror	r22
    2d42:	b7 95       	ror	r27
    2d44:	f7 95       	ror	r31
    2d46:	9f 5f       	subi	r25, 0xFF	; 255
    2d48:	c9 f7       	brne	.-14     	; 0x2d3c <__divsf3_pse+0x74>
    2d4a:	88 0f       	add	r24, r24
    2d4c:	91 1d       	adc	r25, r1
    2d4e:	96 95       	lsr	r25
    2d50:	87 95       	ror	r24
    2d52:	97 f9       	bld	r25, 7
    2d54:	08 95       	ret
    2d56:	e1 e0       	ldi	r30, 0x01	; 1
    2d58:	66 0f       	add	r22, r22
    2d5a:	77 1f       	adc	r23, r23
    2d5c:	88 1f       	adc	r24, r24
    2d5e:	bb 1f       	adc	r27, r27
    2d60:	62 17       	cp	r22, r18
    2d62:	73 07       	cpc	r23, r19
    2d64:	84 07       	cpc	r24, r20
    2d66:	ba 07       	cpc	r27, r26
    2d68:	20 f0       	brcs	.+8      	; 0x2d72 <__divsf3_pse+0xaa>
    2d6a:	62 1b       	sub	r22, r18
    2d6c:	73 0b       	sbc	r23, r19
    2d6e:	84 0b       	sbc	r24, r20
    2d70:	ba 0b       	sbc	r27, r26
    2d72:	ee 1f       	adc	r30, r30
    2d74:	88 f7       	brcc	.-30     	; 0x2d58 <__divsf3_pse+0x90>
    2d76:	e0 95       	com	r30
    2d78:	08 95       	ret

00002d7a <__fixsfsi>:
    2d7a:	04 d0       	rcall	.+8      	; 0x2d84 <__fixunssfsi>
    2d7c:	68 94       	set
    2d7e:	b1 11       	cpse	r27, r1
    2d80:	d9 c0       	rjmp	.+434    	; 0x2f34 <__fp_szero>
    2d82:	08 95       	ret

00002d84 <__fixunssfsi>:
    2d84:	bc d0       	rcall	.+376    	; 0x2efe <__fp_splitA>
    2d86:	88 f0       	brcs	.+34     	; 0x2daa <__fixunssfsi+0x26>
    2d88:	9f 57       	subi	r25, 0x7F	; 127
    2d8a:	90 f0       	brcs	.+36     	; 0x2db0 <__fixunssfsi+0x2c>
    2d8c:	b9 2f       	mov	r27, r25
    2d8e:	99 27       	eor	r25, r25
    2d90:	b7 51       	subi	r27, 0x17	; 23
    2d92:	a0 f0       	brcs	.+40     	; 0x2dbc <__fixunssfsi+0x38>
    2d94:	d1 f0       	breq	.+52     	; 0x2dca <__fixunssfsi+0x46>
    2d96:	66 0f       	add	r22, r22
    2d98:	77 1f       	adc	r23, r23
    2d9a:	88 1f       	adc	r24, r24
    2d9c:	99 1f       	adc	r25, r25
    2d9e:	1a f0       	brmi	.+6      	; 0x2da6 <__fixunssfsi+0x22>
    2da0:	ba 95       	dec	r27
    2da2:	c9 f7       	brne	.-14     	; 0x2d96 <__fixunssfsi+0x12>
    2da4:	12 c0       	rjmp	.+36     	; 0x2dca <__fixunssfsi+0x46>
    2da6:	b1 30       	cpi	r27, 0x01	; 1
    2da8:	81 f0       	breq	.+32     	; 0x2dca <__fixunssfsi+0x46>
    2daa:	c3 d0       	rcall	.+390    	; 0x2f32 <__fp_zero>
    2dac:	b1 e0       	ldi	r27, 0x01	; 1
    2dae:	08 95       	ret
    2db0:	c0 c0       	rjmp	.+384    	; 0x2f32 <__fp_zero>
    2db2:	67 2f       	mov	r22, r23
    2db4:	78 2f       	mov	r23, r24
    2db6:	88 27       	eor	r24, r24
    2db8:	b8 5f       	subi	r27, 0xF8	; 248
    2dba:	39 f0       	breq	.+14     	; 0x2dca <__fixunssfsi+0x46>
    2dbc:	b9 3f       	cpi	r27, 0xF9	; 249
    2dbe:	cc f3       	brlt	.-14     	; 0x2db2 <__fixunssfsi+0x2e>
    2dc0:	86 95       	lsr	r24
    2dc2:	77 95       	ror	r23
    2dc4:	67 95       	ror	r22
    2dc6:	b3 95       	inc	r27
    2dc8:	d9 f7       	brne	.-10     	; 0x2dc0 <__fixunssfsi+0x3c>
    2dca:	3e f4       	brtc	.+14     	; 0x2dda <__fixunssfsi+0x56>
    2dcc:	90 95       	com	r25
    2dce:	80 95       	com	r24
    2dd0:	70 95       	com	r23
    2dd2:	61 95       	neg	r22
    2dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dda:	08 95       	ret

00002ddc <__floatunsisf>:
    2ddc:	e8 94       	clt
    2dde:	09 c0       	rjmp	.+18     	; 0x2df2 <__floatsisf+0x12>

00002de0 <__floatsisf>:
    2de0:	97 fb       	bst	r25, 7
    2de2:	3e f4       	brtc	.+14     	; 0x2df2 <__floatsisf+0x12>
    2de4:	90 95       	com	r25
    2de6:	80 95       	com	r24
    2de8:	70 95       	com	r23
    2dea:	61 95       	neg	r22
    2dec:	7f 4f       	sbci	r23, 0xFF	; 255
    2dee:	8f 4f       	sbci	r24, 0xFF	; 255
    2df0:	9f 4f       	sbci	r25, 0xFF	; 255
    2df2:	99 23       	and	r25, r25
    2df4:	a9 f0       	breq	.+42     	; 0x2e20 <__floatsisf+0x40>
    2df6:	f9 2f       	mov	r31, r25
    2df8:	96 e9       	ldi	r25, 0x96	; 150
    2dfa:	bb 27       	eor	r27, r27
    2dfc:	93 95       	inc	r25
    2dfe:	f6 95       	lsr	r31
    2e00:	87 95       	ror	r24
    2e02:	77 95       	ror	r23
    2e04:	67 95       	ror	r22
    2e06:	b7 95       	ror	r27
    2e08:	f1 11       	cpse	r31, r1
    2e0a:	f8 cf       	rjmp	.-16     	; 0x2dfc <__floatsisf+0x1c>
    2e0c:	fa f4       	brpl	.+62     	; 0x2e4c <__floatsisf+0x6c>
    2e0e:	bb 0f       	add	r27, r27
    2e10:	11 f4       	brne	.+4      	; 0x2e16 <__floatsisf+0x36>
    2e12:	60 ff       	sbrs	r22, 0
    2e14:	1b c0       	rjmp	.+54     	; 0x2e4c <__floatsisf+0x6c>
    2e16:	6f 5f       	subi	r22, 0xFF	; 255
    2e18:	7f 4f       	sbci	r23, 0xFF	; 255
    2e1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1e:	16 c0       	rjmp	.+44     	; 0x2e4c <__floatsisf+0x6c>
    2e20:	88 23       	and	r24, r24
    2e22:	11 f0       	breq	.+4      	; 0x2e28 <__floatsisf+0x48>
    2e24:	96 e9       	ldi	r25, 0x96	; 150
    2e26:	11 c0       	rjmp	.+34     	; 0x2e4a <__floatsisf+0x6a>
    2e28:	77 23       	and	r23, r23
    2e2a:	21 f0       	breq	.+8      	; 0x2e34 <__floatsisf+0x54>
    2e2c:	9e e8       	ldi	r25, 0x8E	; 142
    2e2e:	87 2f       	mov	r24, r23
    2e30:	76 2f       	mov	r23, r22
    2e32:	05 c0       	rjmp	.+10     	; 0x2e3e <__floatsisf+0x5e>
    2e34:	66 23       	and	r22, r22
    2e36:	71 f0       	breq	.+28     	; 0x2e54 <__floatsisf+0x74>
    2e38:	96 e8       	ldi	r25, 0x86	; 134
    2e3a:	86 2f       	mov	r24, r22
    2e3c:	70 e0       	ldi	r23, 0x00	; 0
    2e3e:	60 e0       	ldi	r22, 0x00	; 0
    2e40:	2a f0       	brmi	.+10     	; 0x2e4c <__floatsisf+0x6c>
    2e42:	9a 95       	dec	r25
    2e44:	66 0f       	add	r22, r22
    2e46:	77 1f       	adc	r23, r23
    2e48:	88 1f       	adc	r24, r24
    2e4a:	da f7       	brpl	.-10     	; 0x2e42 <__floatsisf+0x62>
    2e4c:	88 0f       	add	r24, r24
    2e4e:	96 95       	lsr	r25
    2e50:	87 95       	ror	r24
    2e52:	97 f9       	bld	r25, 7
    2e54:	08 95       	ret

00002e56 <__fp_cmp>:
    2e56:	99 0f       	add	r25, r25
    2e58:	00 08       	sbc	r0, r0
    2e5a:	55 0f       	add	r21, r21
    2e5c:	aa 0b       	sbc	r26, r26
    2e5e:	e0 e8       	ldi	r30, 0x80	; 128
    2e60:	fe ef       	ldi	r31, 0xFE	; 254
    2e62:	16 16       	cp	r1, r22
    2e64:	17 06       	cpc	r1, r23
    2e66:	e8 07       	cpc	r30, r24
    2e68:	f9 07       	cpc	r31, r25
    2e6a:	c0 f0       	brcs	.+48     	; 0x2e9c <__fp_cmp+0x46>
    2e6c:	12 16       	cp	r1, r18
    2e6e:	13 06       	cpc	r1, r19
    2e70:	e4 07       	cpc	r30, r20
    2e72:	f5 07       	cpc	r31, r21
    2e74:	98 f0       	brcs	.+38     	; 0x2e9c <__fp_cmp+0x46>
    2e76:	62 1b       	sub	r22, r18
    2e78:	73 0b       	sbc	r23, r19
    2e7a:	84 0b       	sbc	r24, r20
    2e7c:	95 0b       	sbc	r25, r21
    2e7e:	39 f4       	brne	.+14     	; 0x2e8e <__fp_cmp+0x38>
    2e80:	0a 26       	eor	r0, r26
    2e82:	61 f0       	breq	.+24     	; 0x2e9c <__fp_cmp+0x46>
    2e84:	23 2b       	or	r18, r19
    2e86:	24 2b       	or	r18, r20
    2e88:	25 2b       	or	r18, r21
    2e8a:	21 f4       	brne	.+8      	; 0x2e94 <__fp_cmp+0x3e>
    2e8c:	08 95       	ret
    2e8e:	0a 26       	eor	r0, r26
    2e90:	09 f4       	brne	.+2      	; 0x2e94 <__fp_cmp+0x3e>
    2e92:	a1 40       	sbci	r26, 0x01	; 1
    2e94:	a6 95       	lsr	r26
    2e96:	8f ef       	ldi	r24, 0xFF	; 255
    2e98:	81 1d       	adc	r24, r1
    2e9a:	81 1d       	adc	r24, r1
    2e9c:	08 95       	ret

00002e9e <__fp_inf>:
    2e9e:	97 f9       	bld	r25, 7
    2ea0:	9f 67       	ori	r25, 0x7F	; 127
    2ea2:	80 e8       	ldi	r24, 0x80	; 128
    2ea4:	70 e0       	ldi	r23, 0x00	; 0
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	08 95       	ret

00002eaa <__fp_nan>:
    2eaa:	9f ef       	ldi	r25, 0xFF	; 255
    2eac:	80 ec       	ldi	r24, 0xC0	; 192
    2eae:	08 95       	ret

00002eb0 <__fp_pscA>:
    2eb0:	00 24       	eor	r0, r0
    2eb2:	0a 94       	dec	r0
    2eb4:	16 16       	cp	r1, r22
    2eb6:	17 06       	cpc	r1, r23
    2eb8:	18 06       	cpc	r1, r24
    2eba:	09 06       	cpc	r0, r25
    2ebc:	08 95       	ret

00002ebe <__fp_pscB>:
    2ebe:	00 24       	eor	r0, r0
    2ec0:	0a 94       	dec	r0
    2ec2:	12 16       	cp	r1, r18
    2ec4:	13 06       	cpc	r1, r19
    2ec6:	14 06       	cpc	r1, r20
    2ec8:	05 06       	cpc	r0, r21
    2eca:	08 95       	ret

00002ecc <__fp_round>:
    2ecc:	09 2e       	mov	r0, r25
    2ece:	03 94       	inc	r0
    2ed0:	00 0c       	add	r0, r0
    2ed2:	11 f4       	brne	.+4      	; 0x2ed8 <__fp_round+0xc>
    2ed4:	88 23       	and	r24, r24
    2ed6:	52 f0       	brmi	.+20     	; 0x2eec <__fp_round+0x20>
    2ed8:	bb 0f       	add	r27, r27
    2eda:	40 f4       	brcc	.+16     	; 0x2eec <__fp_round+0x20>
    2edc:	bf 2b       	or	r27, r31
    2ede:	11 f4       	brne	.+4      	; 0x2ee4 <__fp_round+0x18>
    2ee0:	60 ff       	sbrs	r22, 0
    2ee2:	04 c0       	rjmp	.+8      	; 0x2eec <__fp_round+0x20>
    2ee4:	6f 5f       	subi	r22, 0xFF	; 255
    2ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee8:	8f 4f       	sbci	r24, 0xFF	; 255
    2eea:	9f 4f       	sbci	r25, 0xFF	; 255
    2eec:	08 95       	ret

00002eee <__fp_split3>:
    2eee:	57 fd       	sbrc	r21, 7
    2ef0:	90 58       	subi	r25, 0x80	; 128
    2ef2:	44 0f       	add	r20, r20
    2ef4:	55 1f       	adc	r21, r21
    2ef6:	59 f0       	breq	.+22     	; 0x2f0e <__fp_splitA+0x10>
    2ef8:	5f 3f       	cpi	r21, 0xFF	; 255
    2efa:	71 f0       	breq	.+28     	; 0x2f18 <__fp_splitA+0x1a>
    2efc:	47 95       	ror	r20

00002efe <__fp_splitA>:
    2efe:	88 0f       	add	r24, r24
    2f00:	97 fb       	bst	r25, 7
    2f02:	99 1f       	adc	r25, r25
    2f04:	61 f0       	breq	.+24     	; 0x2f1e <__fp_splitA+0x20>
    2f06:	9f 3f       	cpi	r25, 0xFF	; 255
    2f08:	79 f0       	breq	.+30     	; 0x2f28 <__fp_splitA+0x2a>
    2f0a:	87 95       	ror	r24
    2f0c:	08 95       	ret
    2f0e:	12 16       	cp	r1, r18
    2f10:	13 06       	cpc	r1, r19
    2f12:	14 06       	cpc	r1, r20
    2f14:	55 1f       	adc	r21, r21
    2f16:	f2 cf       	rjmp	.-28     	; 0x2efc <__fp_split3+0xe>
    2f18:	46 95       	lsr	r20
    2f1a:	f1 df       	rcall	.-30     	; 0x2efe <__fp_splitA>
    2f1c:	08 c0       	rjmp	.+16     	; 0x2f2e <__fp_splitA+0x30>
    2f1e:	16 16       	cp	r1, r22
    2f20:	17 06       	cpc	r1, r23
    2f22:	18 06       	cpc	r1, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	f1 cf       	rjmp	.-30     	; 0x2f0a <__fp_splitA+0xc>
    2f28:	86 95       	lsr	r24
    2f2a:	71 05       	cpc	r23, r1
    2f2c:	61 05       	cpc	r22, r1
    2f2e:	08 94       	sec
    2f30:	08 95       	ret

00002f32 <__fp_zero>:
    2f32:	e8 94       	clt

00002f34 <__fp_szero>:
    2f34:	bb 27       	eor	r27, r27
    2f36:	66 27       	eor	r22, r22
    2f38:	77 27       	eor	r23, r23
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	97 f9       	bld	r25, 7
    2f3e:	08 95       	ret

00002f40 <__gesf2>:
    2f40:	8a df       	rcall	.-236    	; 0x2e56 <__fp_cmp>
    2f42:	08 f4       	brcc	.+2      	; 0x2f46 <__gesf2+0x6>
    2f44:	8f ef       	ldi	r24, 0xFF	; 255
    2f46:	08 95       	ret

00002f48 <__mulsf3>:
    2f48:	0b d0       	rcall	.+22     	; 0x2f60 <__mulsf3x>
    2f4a:	c0 cf       	rjmp	.-128    	; 0x2ecc <__fp_round>
    2f4c:	b1 df       	rcall	.-158    	; 0x2eb0 <__fp_pscA>
    2f4e:	28 f0       	brcs	.+10     	; 0x2f5a <__mulsf3+0x12>
    2f50:	b6 df       	rcall	.-148    	; 0x2ebe <__fp_pscB>
    2f52:	18 f0       	brcs	.+6      	; 0x2f5a <__mulsf3+0x12>
    2f54:	95 23       	and	r25, r21
    2f56:	09 f0       	breq	.+2      	; 0x2f5a <__mulsf3+0x12>
    2f58:	a2 cf       	rjmp	.-188    	; 0x2e9e <__fp_inf>
    2f5a:	a7 cf       	rjmp	.-178    	; 0x2eaa <__fp_nan>
    2f5c:	11 24       	eor	r1, r1
    2f5e:	ea cf       	rjmp	.-44     	; 0x2f34 <__fp_szero>

00002f60 <__mulsf3x>:
    2f60:	c6 df       	rcall	.-116    	; 0x2eee <__fp_split3>
    2f62:	a0 f3       	brcs	.-24     	; 0x2f4c <__mulsf3+0x4>

00002f64 <__mulsf3_pse>:
    2f64:	95 9f       	mul	r25, r21
    2f66:	d1 f3       	breq	.-12     	; 0x2f5c <__mulsf3+0x14>
    2f68:	95 0f       	add	r25, r21
    2f6a:	50 e0       	ldi	r21, 0x00	; 0
    2f6c:	55 1f       	adc	r21, r21
    2f6e:	62 9f       	mul	r22, r18
    2f70:	f0 01       	movw	r30, r0
    2f72:	72 9f       	mul	r23, r18
    2f74:	bb 27       	eor	r27, r27
    2f76:	f0 0d       	add	r31, r0
    2f78:	b1 1d       	adc	r27, r1
    2f7a:	63 9f       	mul	r22, r19
    2f7c:	aa 27       	eor	r26, r26
    2f7e:	f0 0d       	add	r31, r0
    2f80:	b1 1d       	adc	r27, r1
    2f82:	aa 1f       	adc	r26, r26
    2f84:	64 9f       	mul	r22, r20
    2f86:	66 27       	eor	r22, r22
    2f88:	b0 0d       	add	r27, r0
    2f8a:	a1 1d       	adc	r26, r1
    2f8c:	66 1f       	adc	r22, r22
    2f8e:	82 9f       	mul	r24, r18
    2f90:	22 27       	eor	r18, r18
    2f92:	b0 0d       	add	r27, r0
    2f94:	a1 1d       	adc	r26, r1
    2f96:	62 1f       	adc	r22, r18
    2f98:	73 9f       	mul	r23, r19
    2f9a:	b0 0d       	add	r27, r0
    2f9c:	a1 1d       	adc	r26, r1
    2f9e:	62 1f       	adc	r22, r18
    2fa0:	83 9f       	mul	r24, r19
    2fa2:	a0 0d       	add	r26, r0
    2fa4:	61 1d       	adc	r22, r1
    2fa6:	22 1f       	adc	r18, r18
    2fa8:	74 9f       	mul	r23, r20
    2faa:	33 27       	eor	r19, r19
    2fac:	a0 0d       	add	r26, r0
    2fae:	61 1d       	adc	r22, r1
    2fb0:	23 1f       	adc	r18, r19
    2fb2:	84 9f       	mul	r24, r20
    2fb4:	60 0d       	add	r22, r0
    2fb6:	21 1d       	adc	r18, r1
    2fb8:	82 2f       	mov	r24, r18
    2fba:	76 2f       	mov	r23, r22
    2fbc:	6a 2f       	mov	r22, r26
    2fbe:	11 24       	eor	r1, r1
    2fc0:	9f 57       	subi	r25, 0x7F	; 127
    2fc2:	50 40       	sbci	r21, 0x00	; 0
    2fc4:	8a f0       	brmi	.+34     	; 0x2fe8 <__mulsf3_pse+0x84>
    2fc6:	e1 f0       	breq	.+56     	; 0x3000 <__mulsf3_pse+0x9c>
    2fc8:	88 23       	and	r24, r24
    2fca:	4a f0       	brmi	.+18     	; 0x2fde <__mulsf3_pse+0x7a>
    2fcc:	ee 0f       	add	r30, r30
    2fce:	ff 1f       	adc	r31, r31
    2fd0:	bb 1f       	adc	r27, r27
    2fd2:	66 1f       	adc	r22, r22
    2fd4:	77 1f       	adc	r23, r23
    2fd6:	88 1f       	adc	r24, r24
    2fd8:	91 50       	subi	r25, 0x01	; 1
    2fda:	50 40       	sbci	r21, 0x00	; 0
    2fdc:	a9 f7       	brne	.-22     	; 0x2fc8 <__mulsf3_pse+0x64>
    2fde:	9e 3f       	cpi	r25, 0xFE	; 254
    2fe0:	51 05       	cpc	r21, r1
    2fe2:	70 f0       	brcs	.+28     	; 0x3000 <__mulsf3_pse+0x9c>
    2fe4:	5c cf       	rjmp	.-328    	; 0x2e9e <__fp_inf>
    2fe6:	a6 cf       	rjmp	.-180    	; 0x2f34 <__fp_szero>
    2fe8:	5f 3f       	cpi	r21, 0xFF	; 255
    2fea:	ec f3       	brlt	.-6      	; 0x2fe6 <__mulsf3_pse+0x82>
    2fec:	98 3e       	cpi	r25, 0xE8	; 232
    2fee:	dc f3       	brlt	.-10     	; 0x2fe6 <__mulsf3_pse+0x82>
    2ff0:	86 95       	lsr	r24
    2ff2:	77 95       	ror	r23
    2ff4:	67 95       	ror	r22
    2ff6:	b7 95       	ror	r27
    2ff8:	f7 95       	ror	r31
    2ffa:	e7 95       	ror	r30
    2ffc:	9f 5f       	subi	r25, 0xFF	; 255
    2ffe:	c1 f7       	brne	.-16     	; 0x2ff0 <__mulsf3_pse+0x8c>
    3000:	fe 2b       	or	r31, r30
    3002:	88 0f       	add	r24, r24
    3004:	91 1d       	adc	r25, r1
    3006:	96 95       	lsr	r25
    3008:	87 95       	ror	r24
    300a:	97 f9       	bld	r25, 7
    300c:	08 95       	ret

0000300e <__divmodhi4>:
    300e:	97 fb       	bst	r25, 7
    3010:	07 2e       	mov	r0, r23
    3012:	16 f4       	brtc	.+4      	; 0x3018 <__divmodhi4+0xa>
    3014:	00 94       	com	r0
    3016:	06 d0       	rcall	.+12     	; 0x3024 <__divmodhi4_neg1>
    3018:	77 fd       	sbrc	r23, 7
    301a:	08 d0       	rcall	.+16     	; 0x302c <__divmodhi4_neg2>
    301c:	11 d0       	rcall	.+34     	; 0x3040 <__udivmodhi4>
    301e:	07 fc       	sbrc	r0, 7
    3020:	05 d0       	rcall	.+10     	; 0x302c <__divmodhi4_neg2>
    3022:	3e f4       	brtc	.+14     	; 0x3032 <__divmodhi4_exit>

00003024 <__divmodhi4_neg1>:
    3024:	90 95       	com	r25
    3026:	81 95       	neg	r24
    3028:	9f 4f       	sbci	r25, 0xFF	; 255
    302a:	08 95       	ret

0000302c <__divmodhi4_neg2>:
    302c:	70 95       	com	r23
    302e:	61 95       	neg	r22
    3030:	7f 4f       	sbci	r23, 0xFF	; 255

00003032 <__divmodhi4_exit>:
    3032:	08 95       	ret

00003034 <__tablejump2__>:
    3034:	ee 0f       	add	r30, r30
    3036:	ff 1f       	adc	r31, r31
    3038:	05 90       	lpm	r0, Z+
    303a:	f4 91       	lpm	r31, Z
    303c:	e0 2d       	mov	r30, r0
    303e:	09 94       	ijmp

00003040 <__udivmodhi4>:
    3040:	aa 1b       	sub	r26, r26
    3042:	bb 1b       	sub	r27, r27
    3044:	51 e1       	ldi	r21, 0x11	; 17
    3046:	07 c0       	rjmp	.+14     	; 0x3056 <__udivmodhi4_ep>

00003048 <__udivmodhi4_loop>:
    3048:	aa 1f       	adc	r26, r26
    304a:	bb 1f       	adc	r27, r27
    304c:	a6 17       	cp	r26, r22
    304e:	b7 07       	cpc	r27, r23
    3050:	10 f0       	brcs	.+4      	; 0x3056 <__udivmodhi4_ep>
    3052:	a6 1b       	sub	r26, r22
    3054:	b7 0b       	sbc	r27, r23

00003056 <__udivmodhi4_ep>:
    3056:	88 1f       	adc	r24, r24
    3058:	99 1f       	adc	r25, r25
    305a:	5a 95       	dec	r21
    305c:	a9 f7       	brne	.-22     	; 0x3048 <__udivmodhi4_loop>
    305e:	80 95       	com	r24
    3060:	90 95       	com	r25
    3062:	bc 01       	movw	r22, r24
    3064:	cd 01       	movw	r24, r26
    3066:	08 95       	ret

00003068 <snprintf>:
    3068:	ae e0       	ldi	r26, 0x0E	; 14
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	e9 e3       	ldi	r30, 0x39	; 57
    306e:	f8 e1       	ldi	r31, 0x18	; 24
    3070:	c5 c2       	rjmp	.+1418   	; 0x35fc <__prologue_saves__+0x1c>
    3072:	0d 89       	ldd	r16, Y+21	; 0x15
    3074:	1e 89       	ldd	r17, Y+22	; 0x16
    3076:	8f 89       	ldd	r24, Y+23	; 0x17
    3078:	98 8d       	ldd	r25, Y+24	; 0x18
    307a:	26 e0       	ldi	r18, 0x06	; 6
    307c:	2c 83       	std	Y+4, r18	; 0x04
    307e:	1a 83       	std	Y+2, r17	; 0x02
    3080:	09 83       	std	Y+1, r16	; 0x01
    3082:	97 ff       	sbrs	r25, 7
    3084:	02 c0       	rjmp	.+4      	; 0x308a <snprintf+0x22>
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e8       	ldi	r25, 0x80	; 128
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	9e 83       	std	Y+6, r25	; 0x06
    308e:	8d 83       	std	Y+5, r24	; 0x05
    3090:	ae 01       	movw	r20, r28
    3092:	45 5e       	subi	r20, 0xE5	; 229
    3094:	5f 4f       	sbci	r21, 0xFF	; 255
    3096:	69 8d       	ldd	r22, Y+25	; 0x19
    3098:	7a 8d       	ldd	r23, Y+26	; 0x1a
    309a:	ce 01       	movw	r24, r28
    309c:	01 96       	adiw	r24, 0x01	; 1
    309e:	31 d0       	rcall	.+98     	; 0x3102 <vfprintf>
    30a0:	4d 81       	ldd	r20, Y+5	; 0x05
    30a2:	5e 81       	ldd	r21, Y+6	; 0x06
    30a4:	57 fd       	sbrc	r21, 7
    30a6:	0a c0       	rjmp	.+20     	; 0x30bc <snprintf+0x54>
    30a8:	2f 81       	ldd	r18, Y+7	; 0x07
    30aa:	38 85       	ldd	r19, Y+8	; 0x08
    30ac:	42 17       	cp	r20, r18
    30ae:	53 07       	cpc	r21, r19
    30b0:	0c f4       	brge	.+2      	; 0x30b4 <snprintf+0x4c>
    30b2:	9a 01       	movw	r18, r20
    30b4:	f8 01       	movw	r30, r16
    30b6:	e2 0f       	add	r30, r18
    30b8:	f3 1f       	adc	r31, r19
    30ba:	10 82       	st	Z, r1
    30bc:	2e 96       	adiw	r28, 0x0e	; 14
    30be:	e4 e0       	ldi	r30, 0x04	; 4
    30c0:	b9 c2       	rjmp	.+1394   	; 0x3634 <__epilogue_restores__+0x1c>

000030c2 <sprintf>:
    30c2:	ae e0       	ldi	r26, 0x0E	; 14
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	e6 e6       	ldi	r30, 0x66	; 102
    30c8:	f8 e1       	ldi	r31, 0x18	; 24
    30ca:	98 c2       	rjmp	.+1328   	; 0x35fc <__prologue_saves__+0x1c>
    30cc:	0d 89       	ldd	r16, Y+21	; 0x15
    30ce:	1e 89       	ldd	r17, Y+22	; 0x16
    30d0:	86 e0       	ldi	r24, 0x06	; 6
    30d2:	8c 83       	std	Y+4, r24	; 0x04
    30d4:	1a 83       	std	Y+2, r17	; 0x02
    30d6:	09 83       	std	Y+1, r16	; 0x01
    30d8:	8f ef       	ldi	r24, 0xFF	; 255
    30da:	9f e7       	ldi	r25, 0x7F	; 127
    30dc:	9e 83       	std	Y+6, r25	; 0x06
    30de:	8d 83       	std	Y+5, r24	; 0x05
    30e0:	ae 01       	movw	r20, r28
    30e2:	47 5e       	subi	r20, 0xE7	; 231
    30e4:	5f 4f       	sbci	r21, 0xFF	; 255
    30e6:	6f 89       	ldd	r22, Y+23	; 0x17
    30e8:	78 8d       	ldd	r23, Y+24	; 0x18
    30ea:	ce 01       	movw	r24, r28
    30ec:	01 96       	adiw	r24, 0x01	; 1
    30ee:	09 d0       	rcall	.+18     	; 0x3102 <vfprintf>
    30f0:	2f 81       	ldd	r18, Y+7	; 0x07
    30f2:	38 85       	ldd	r19, Y+8	; 0x08
    30f4:	f8 01       	movw	r30, r16
    30f6:	e2 0f       	add	r30, r18
    30f8:	f3 1f       	adc	r31, r19
    30fa:	10 82       	st	Z, r1
    30fc:	2e 96       	adiw	r28, 0x0e	; 14
    30fe:	e4 e0       	ldi	r30, 0x04	; 4
    3100:	99 c2       	rjmp	.+1330   	; 0x3634 <__epilogue_restores__+0x1c>

00003102 <vfprintf>:
    3102:	ac e0       	ldi	r26, 0x0C	; 12
    3104:	b0 e0       	ldi	r27, 0x00	; 0
    3106:	e6 e8       	ldi	r30, 0x86	; 134
    3108:	f8 e1       	ldi	r31, 0x18	; 24
    310a:	6a c2       	rjmp	.+1236   	; 0x35e0 <__prologue_saves__>
    310c:	7c 01       	movw	r14, r24
    310e:	6b 01       	movw	r12, r22
    3110:	8a 01       	movw	r16, r20
    3112:	fc 01       	movw	r30, r24
    3114:	17 82       	std	Z+7, r1	; 0x07
    3116:	16 82       	std	Z+6, r1	; 0x06
    3118:	83 81       	ldd	r24, Z+3	; 0x03
    311a:	81 ff       	sbrs	r24, 1
    311c:	b0 c1       	rjmp	.+864    	; 0x347e <vfprintf+0x37c>
    311e:	ce 01       	movw	r24, r28
    3120:	01 96       	adiw	r24, 0x01	; 1
    3122:	4c 01       	movw	r8, r24
    3124:	f7 01       	movw	r30, r14
    3126:	93 81       	ldd	r25, Z+3	; 0x03
    3128:	f6 01       	movw	r30, r12
    312a:	93 fd       	sbrc	r25, 3
    312c:	85 91       	lpm	r24, Z+
    312e:	93 ff       	sbrs	r25, 3
    3130:	81 91       	ld	r24, Z+
    3132:	6f 01       	movw	r12, r30
    3134:	88 23       	and	r24, r24
    3136:	09 f4       	brne	.+2      	; 0x313a <vfprintf+0x38>
    3138:	9e c1       	rjmp	.+828    	; 0x3476 <vfprintf+0x374>
    313a:	85 32       	cpi	r24, 0x25	; 37
    313c:	39 f4       	brne	.+14     	; 0x314c <vfprintf+0x4a>
    313e:	93 fd       	sbrc	r25, 3
    3140:	85 91       	lpm	r24, Z+
    3142:	93 ff       	sbrs	r25, 3
    3144:	81 91       	ld	r24, Z+
    3146:	6f 01       	movw	r12, r30
    3148:	85 32       	cpi	r24, 0x25	; 37
    314a:	21 f4       	brne	.+8      	; 0x3154 <vfprintf+0x52>
    314c:	b7 01       	movw	r22, r14
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	b1 d1       	rcall	.+866    	; 0x34b4 <fputc>
    3152:	e8 cf       	rjmp	.-48     	; 0x3124 <vfprintf+0x22>
    3154:	51 2c       	mov	r5, r1
    3156:	31 2c       	mov	r3, r1
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	20 32       	cpi	r18, 0x20	; 32
    315c:	a0 f4       	brcc	.+40     	; 0x3186 <vfprintf+0x84>
    315e:	8b 32       	cpi	r24, 0x2B	; 43
    3160:	69 f0       	breq	.+26     	; 0x317c <vfprintf+0x7a>
    3162:	30 f4       	brcc	.+12     	; 0x3170 <vfprintf+0x6e>
    3164:	80 32       	cpi	r24, 0x20	; 32
    3166:	59 f0       	breq	.+22     	; 0x317e <vfprintf+0x7c>
    3168:	83 32       	cpi	r24, 0x23	; 35
    316a:	69 f4       	brne	.+26     	; 0x3186 <vfprintf+0x84>
    316c:	20 61       	ori	r18, 0x10	; 16
    316e:	2c c0       	rjmp	.+88     	; 0x31c8 <vfprintf+0xc6>
    3170:	8d 32       	cpi	r24, 0x2D	; 45
    3172:	39 f0       	breq	.+14     	; 0x3182 <vfprintf+0x80>
    3174:	80 33       	cpi	r24, 0x30	; 48
    3176:	39 f4       	brne	.+14     	; 0x3186 <vfprintf+0x84>
    3178:	21 60       	ori	r18, 0x01	; 1
    317a:	26 c0       	rjmp	.+76     	; 0x31c8 <vfprintf+0xc6>
    317c:	22 60       	ori	r18, 0x02	; 2
    317e:	24 60       	ori	r18, 0x04	; 4
    3180:	23 c0       	rjmp	.+70     	; 0x31c8 <vfprintf+0xc6>
    3182:	28 60       	ori	r18, 0x08	; 8
    3184:	21 c0       	rjmp	.+66     	; 0x31c8 <vfprintf+0xc6>
    3186:	27 fd       	sbrc	r18, 7
    3188:	27 c0       	rjmp	.+78     	; 0x31d8 <vfprintf+0xd6>
    318a:	30 ed       	ldi	r19, 0xD0	; 208
    318c:	38 0f       	add	r19, r24
    318e:	3a 30       	cpi	r19, 0x0A	; 10
    3190:	78 f4       	brcc	.+30     	; 0x31b0 <vfprintf+0xae>
    3192:	26 ff       	sbrs	r18, 6
    3194:	06 c0       	rjmp	.+12     	; 0x31a2 <vfprintf+0xa0>
    3196:	fa e0       	ldi	r31, 0x0A	; 10
    3198:	5f 9e       	mul	r5, r31
    319a:	30 0d       	add	r19, r0
    319c:	11 24       	eor	r1, r1
    319e:	53 2e       	mov	r5, r19
    31a0:	13 c0       	rjmp	.+38     	; 0x31c8 <vfprintf+0xc6>
    31a2:	8a e0       	ldi	r24, 0x0A	; 10
    31a4:	38 9e       	mul	r3, r24
    31a6:	30 0d       	add	r19, r0
    31a8:	11 24       	eor	r1, r1
    31aa:	33 2e       	mov	r3, r19
    31ac:	20 62       	ori	r18, 0x20	; 32
    31ae:	0c c0       	rjmp	.+24     	; 0x31c8 <vfprintf+0xc6>
    31b0:	8e 32       	cpi	r24, 0x2E	; 46
    31b2:	21 f4       	brne	.+8      	; 0x31bc <vfprintf+0xba>
    31b4:	26 fd       	sbrc	r18, 6
    31b6:	5f c1       	rjmp	.+702    	; 0x3476 <vfprintf+0x374>
    31b8:	20 64       	ori	r18, 0x40	; 64
    31ba:	06 c0       	rjmp	.+12     	; 0x31c8 <vfprintf+0xc6>
    31bc:	8c 36       	cpi	r24, 0x6C	; 108
    31be:	11 f4       	brne	.+4      	; 0x31c4 <vfprintf+0xc2>
    31c0:	20 68       	ori	r18, 0x80	; 128
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <vfprintf+0xc6>
    31c4:	88 36       	cpi	r24, 0x68	; 104
    31c6:	41 f4       	brne	.+16     	; 0x31d8 <vfprintf+0xd6>
    31c8:	f6 01       	movw	r30, r12
    31ca:	93 fd       	sbrc	r25, 3
    31cc:	85 91       	lpm	r24, Z+
    31ce:	93 ff       	sbrs	r25, 3
    31d0:	81 91       	ld	r24, Z+
    31d2:	6f 01       	movw	r12, r30
    31d4:	81 11       	cpse	r24, r1
    31d6:	c1 cf       	rjmp	.-126    	; 0x315a <vfprintf+0x58>
    31d8:	98 2f       	mov	r25, r24
    31da:	9f 7d       	andi	r25, 0xDF	; 223
    31dc:	95 54       	subi	r25, 0x45	; 69
    31de:	93 30       	cpi	r25, 0x03	; 3
    31e0:	28 f4       	brcc	.+10     	; 0x31ec <vfprintf+0xea>
    31e2:	0c 5f       	subi	r16, 0xFC	; 252
    31e4:	1f 4f       	sbci	r17, 0xFF	; 255
    31e6:	ff e3       	ldi	r31, 0x3F	; 63
    31e8:	f9 83       	std	Y+1, r31	; 0x01
    31ea:	0d c0       	rjmp	.+26     	; 0x3206 <vfprintf+0x104>
    31ec:	83 36       	cpi	r24, 0x63	; 99
    31ee:	31 f0       	breq	.+12     	; 0x31fc <vfprintf+0xfa>
    31f0:	83 37       	cpi	r24, 0x73	; 115
    31f2:	71 f0       	breq	.+28     	; 0x3210 <vfprintf+0x10e>
    31f4:	83 35       	cpi	r24, 0x53	; 83
    31f6:	09 f0       	breq	.+2      	; 0x31fa <vfprintf+0xf8>
    31f8:	57 c0       	rjmp	.+174    	; 0x32a8 <vfprintf+0x1a6>
    31fa:	21 c0       	rjmp	.+66     	; 0x323e <vfprintf+0x13c>
    31fc:	f8 01       	movw	r30, r16
    31fe:	80 81       	ld	r24, Z
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	0e 5f       	subi	r16, 0xFE	; 254
    3204:	1f 4f       	sbci	r17, 0xFF	; 255
    3206:	44 24       	eor	r4, r4
    3208:	43 94       	inc	r4
    320a:	51 2c       	mov	r5, r1
    320c:	54 01       	movw	r10, r8
    320e:	14 c0       	rjmp	.+40     	; 0x3238 <vfprintf+0x136>
    3210:	38 01       	movw	r6, r16
    3212:	f2 e0       	ldi	r31, 0x02	; 2
    3214:	6f 0e       	add	r6, r31
    3216:	71 1c       	adc	r7, r1
    3218:	f8 01       	movw	r30, r16
    321a:	a0 80       	ld	r10, Z
    321c:	b1 80       	ldd	r11, Z+1	; 0x01
    321e:	26 ff       	sbrs	r18, 6
    3220:	03 c0       	rjmp	.+6      	; 0x3228 <vfprintf+0x126>
    3222:	65 2d       	mov	r22, r5
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	02 c0       	rjmp	.+4      	; 0x322c <vfprintf+0x12a>
    3228:	6f ef       	ldi	r22, 0xFF	; 255
    322a:	7f ef       	ldi	r23, 0xFF	; 255
    322c:	c5 01       	movw	r24, r10
    322e:	2c 87       	std	Y+12, r18	; 0x0c
    3230:	36 d1       	rcall	.+620    	; 0x349e <strnlen>
    3232:	2c 01       	movw	r4, r24
    3234:	83 01       	movw	r16, r6
    3236:	2c 85       	ldd	r18, Y+12	; 0x0c
    3238:	2f 77       	andi	r18, 0x7F	; 127
    323a:	22 2e       	mov	r2, r18
    323c:	16 c0       	rjmp	.+44     	; 0x326a <vfprintf+0x168>
    323e:	38 01       	movw	r6, r16
    3240:	f2 e0       	ldi	r31, 0x02	; 2
    3242:	6f 0e       	add	r6, r31
    3244:	71 1c       	adc	r7, r1
    3246:	f8 01       	movw	r30, r16
    3248:	a0 80       	ld	r10, Z
    324a:	b1 80       	ldd	r11, Z+1	; 0x01
    324c:	26 ff       	sbrs	r18, 6
    324e:	03 c0       	rjmp	.+6      	; 0x3256 <vfprintf+0x154>
    3250:	65 2d       	mov	r22, r5
    3252:	70 e0       	ldi	r23, 0x00	; 0
    3254:	02 c0       	rjmp	.+4      	; 0x325a <vfprintf+0x158>
    3256:	6f ef       	ldi	r22, 0xFF	; 255
    3258:	7f ef       	ldi	r23, 0xFF	; 255
    325a:	c5 01       	movw	r24, r10
    325c:	2c 87       	std	Y+12, r18	; 0x0c
    325e:	14 d1       	rcall	.+552    	; 0x3488 <strnlen_P>
    3260:	2c 01       	movw	r4, r24
    3262:	2c 85       	ldd	r18, Y+12	; 0x0c
    3264:	20 68       	ori	r18, 0x80	; 128
    3266:	22 2e       	mov	r2, r18
    3268:	83 01       	movw	r16, r6
    326a:	23 fc       	sbrc	r2, 3
    326c:	19 c0       	rjmp	.+50     	; 0x32a0 <vfprintf+0x19e>
    326e:	83 2d       	mov	r24, r3
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	48 16       	cp	r4, r24
    3274:	59 06       	cpc	r5, r25
    3276:	a0 f4       	brcc	.+40     	; 0x32a0 <vfprintf+0x19e>
    3278:	b7 01       	movw	r22, r14
    327a:	80 e2       	ldi	r24, 0x20	; 32
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	1a d1       	rcall	.+564    	; 0x34b4 <fputc>
    3280:	3a 94       	dec	r3
    3282:	f5 cf       	rjmp	.-22     	; 0x326e <vfprintf+0x16c>
    3284:	f5 01       	movw	r30, r10
    3286:	27 fc       	sbrc	r2, 7
    3288:	85 91       	lpm	r24, Z+
    328a:	27 fe       	sbrs	r2, 7
    328c:	81 91       	ld	r24, Z+
    328e:	5f 01       	movw	r10, r30
    3290:	b7 01       	movw	r22, r14
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	0f d1       	rcall	.+542    	; 0x34b4 <fputc>
    3296:	31 10       	cpse	r3, r1
    3298:	3a 94       	dec	r3
    329a:	f1 e0       	ldi	r31, 0x01	; 1
    329c:	4f 1a       	sub	r4, r31
    329e:	51 08       	sbc	r5, r1
    32a0:	41 14       	cp	r4, r1
    32a2:	51 04       	cpc	r5, r1
    32a4:	79 f7       	brne	.-34     	; 0x3284 <vfprintf+0x182>
    32a6:	de c0       	rjmp	.+444    	; 0x3464 <vfprintf+0x362>
    32a8:	84 36       	cpi	r24, 0x64	; 100
    32aa:	11 f0       	breq	.+4      	; 0x32b0 <vfprintf+0x1ae>
    32ac:	89 36       	cpi	r24, 0x69	; 105
    32ae:	31 f5       	brne	.+76     	; 0x32fc <vfprintf+0x1fa>
    32b0:	f8 01       	movw	r30, r16
    32b2:	27 ff       	sbrs	r18, 7
    32b4:	07 c0       	rjmp	.+14     	; 0x32c4 <vfprintf+0x1c2>
    32b6:	60 81       	ld	r22, Z
    32b8:	71 81       	ldd	r23, Z+1	; 0x01
    32ba:	82 81       	ldd	r24, Z+2	; 0x02
    32bc:	93 81       	ldd	r25, Z+3	; 0x03
    32be:	0c 5f       	subi	r16, 0xFC	; 252
    32c0:	1f 4f       	sbci	r17, 0xFF	; 255
    32c2:	08 c0       	rjmp	.+16     	; 0x32d4 <vfprintf+0x1d2>
    32c4:	60 81       	ld	r22, Z
    32c6:	71 81       	ldd	r23, Z+1	; 0x01
    32c8:	07 2e       	mov	r0, r23
    32ca:	00 0c       	add	r0, r0
    32cc:	88 0b       	sbc	r24, r24
    32ce:	99 0b       	sbc	r25, r25
    32d0:	0e 5f       	subi	r16, 0xFE	; 254
    32d2:	1f 4f       	sbci	r17, 0xFF	; 255
    32d4:	2f 76       	andi	r18, 0x6F	; 111
    32d6:	72 2e       	mov	r7, r18
    32d8:	97 ff       	sbrs	r25, 7
    32da:	09 c0       	rjmp	.+18     	; 0x32ee <vfprintf+0x1ec>
    32dc:	90 95       	com	r25
    32de:	80 95       	com	r24
    32e0:	70 95       	com	r23
    32e2:	61 95       	neg	r22
    32e4:	7f 4f       	sbci	r23, 0xFF	; 255
    32e6:	8f 4f       	sbci	r24, 0xFF	; 255
    32e8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ea:	20 68       	ori	r18, 0x80	; 128
    32ec:	72 2e       	mov	r7, r18
    32ee:	2a e0       	ldi	r18, 0x0A	; 10
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	a4 01       	movw	r20, r8
    32f4:	17 d1       	rcall	.+558    	; 0x3524 <__ultoa_invert>
    32f6:	a8 2e       	mov	r10, r24
    32f8:	a8 18       	sub	r10, r8
    32fa:	43 c0       	rjmp	.+134    	; 0x3382 <vfprintf+0x280>
    32fc:	85 37       	cpi	r24, 0x75	; 117
    32fe:	29 f4       	brne	.+10     	; 0x330a <vfprintf+0x208>
    3300:	2f 7e       	andi	r18, 0xEF	; 239
    3302:	b2 2e       	mov	r11, r18
    3304:	2a e0       	ldi	r18, 0x0A	; 10
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	25 c0       	rjmp	.+74     	; 0x3354 <vfprintf+0x252>
    330a:	f2 2f       	mov	r31, r18
    330c:	f9 7f       	andi	r31, 0xF9	; 249
    330e:	bf 2e       	mov	r11, r31
    3310:	8f 36       	cpi	r24, 0x6F	; 111
    3312:	c1 f0       	breq	.+48     	; 0x3344 <vfprintf+0x242>
    3314:	18 f4       	brcc	.+6      	; 0x331c <vfprintf+0x21a>
    3316:	88 35       	cpi	r24, 0x58	; 88
    3318:	79 f0       	breq	.+30     	; 0x3338 <vfprintf+0x236>
    331a:	ad c0       	rjmp	.+346    	; 0x3476 <vfprintf+0x374>
    331c:	80 37       	cpi	r24, 0x70	; 112
    331e:	19 f0       	breq	.+6      	; 0x3326 <vfprintf+0x224>
    3320:	88 37       	cpi	r24, 0x78	; 120
    3322:	21 f0       	breq	.+8      	; 0x332c <vfprintf+0x22a>
    3324:	a8 c0       	rjmp	.+336    	; 0x3476 <vfprintf+0x374>
    3326:	2f 2f       	mov	r18, r31
    3328:	20 61       	ori	r18, 0x10	; 16
    332a:	b2 2e       	mov	r11, r18
    332c:	b4 fe       	sbrs	r11, 4
    332e:	0d c0       	rjmp	.+26     	; 0x334a <vfprintf+0x248>
    3330:	8b 2d       	mov	r24, r11
    3332:	84 60       	ori	r24, 0x04	; 4
    3334:	b8 2e       	mov	r11, r24
    3336:	09 c0       	rjmp	.+18     	; 0x334a <vfprintf+0x248>
    3338:	24 ff       	sbrs	r18, 4
    333a:	0a c0       	rjmp	.+20     	; 0x3350 <vfprintf+0x24e>
    333c:	9f 2f       	mov	r25, r31
    333e:	96 60       	ori	r25, 0x06	; 6
    3340:	b9 2e       	mov	r11, r25
    3342:	06 c0       	rjmp	.+12     	; 0x3350 <vfprintf+0x24e>
    3344:	28 e0       	ldi	r18, 0x08	; 8
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	05 c0       	rjmp	.+10     	; 0x3354 <vfprintf+0x252>
    334a:	20 e1       	ldi	r18, 0x10	; 16
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	02 c0       	rjmp	.+4      	; 0x3354 <vfprintf+0x252>
    3350:	20 e1       	ldi	r18, 0x10	; 16
    3352:	32 e0       	ldi	r19, 0x02	; 2
    3354:	f8 01       	movw	r30, r16
    3356:	b7 fe       	sbrs	r11, 7
    3358:	07 c0       	rjmp	.+14     	; 0x3368 <vfprintf+0x266>
    335a:	60 81       	ld	r22, Z
    335c:	71 81       	ldd	r23, Z+1	; 0x01
    335e:	82 81       	ldd	r24, Z+2	; 0x02
    3360:	93 81       	ldd	r25, Z+3	; 0x03
    3362:	0c 5f       	subi	r16, 0xFC	; 252
    3364:	1f 4f       	sbci	r17, 0xFF	; 255
    3366:	06 c0       	rjmp	.+12     	; 0x3374 <vfprintf+0x272>
    3368:	60 81       	ld	r22, Z
    336a:	71 81       	ldd	r23, Z+1	; 0x01
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	0e 5f       	subi	r16, 0xFE	; 254
    3372:	1f 4f       	sbci	r17, 0xFF	; 255
    3374:	a4 01       	movw	r20, r8
    3376:	d6 d0       	rcall	.+428    	; 0x3524 <__ultoa_invert>
    3378:	a8 2e       	mov	r10, r24
    337a:	a8 18       	sub	r10, r8
    337c:	fb 2d       	mov	r31, r11
    337e:	ff 77       	andi	r31, 0x7F	; 127
    3380:	7f 2e       	mov	r7, r31
    3382:	76 fe       	sbrs	r7, 6
    3384:	0b c0       	rjmp	.+22     	; 0x339c <vfprintf+0x29a>
    3386:	37 2d       	mov	r19, r7
    3388:	3e 7f       	andi	r19, 0xFE	; 254
    338a:	a5 14       	cp	r10, r5
    338c:	50 f4       	brcc	.+20     	; 0x33a2 <vfprintf+0x2a0>
    338e:	74 fe       	sbrs	r7, 4
    3390:	0a c0       	rjmp	.+20     	; 0x33a6 <vfprintf+0x2a4>
    3392:	72 fc       	sbrc	r7, 2
    3394:	08 c0       	rjmp	.+16     	; 0x33a6 <vfprintf+0x2a4>
    3396:	37 2d       	mov	r19, r7
    3398:	3e 7e       	andi	r19, 0xEE	; 238
    339a:	05 c0       	rjmp	.+10     	; 0x33a6 <vfprintf+0x2a4>
    339c:	ba 2c       	mov	r11, r10
    339e:	37 2d       	mov	r19, r7
    33a0:	03 c0       	rjmp	.+6      	; 0x33a8 <vfprintf+0x2a6>
    33a2:	ba 2c       	mov	r11, r10
    33a4:	01 c0       	rjmp	.+2      	; 0x33a8 <vfprintf+0x2a6>
    33a6:	b5 2c       	mov	r11, r5
    33a8:	34 ff       	sbrs	r19, 4
    33aa:	0d c0       	rjmp	.+26     	; 0x33c6 <vfprintf+0x2c4>
    33ac:	fe 01       	movw	r30, r28
    33ae:	ea 0d       	add	r30, r10
    33b0:	f1 1d       	adc	r31, r1
    33b2:	80 81       	ld	r24, Z
    33b4:	80 33       	cpi	r24, 0x30	; 48
    33b6:	11 f4       	brne	.+4      	; 0x33bc <vfprintf+0x2ba>
    33b8:	39 7e       	andi	r19, 0xE9	; 233
    33ba:	09 c0       	rjmp	.+18     	; 0x33ce <vfprintf+0x2cc>
    33bc:	32 ff       	sbrs	r19, 2
    33be:	06 c0       	rjmp	.+12     	; 0x33cc <vfprintf+0x2ca>
    33c0:	b3 94       	inc	r11
    33c2:	b3 94       	inc	r11
    33c4:	04 c0       	rjmp	.+8      	; 0x33ce <vfprintf+0x2cc>
    33c6:	83 2f       	mov	r24, r19
    33c8:	86 78       	andi	r24, 0x86	; 134
    33ca:	09 f0       	breq	.+2      	; 0x33ce <vfprintf+0x2cc>
    33cc:	b3 94       	inc	r11
    33ce:	33 fd       	sbrc	r19, 3
    33d0:	12 c0       	rjmp	.+36     	; 0x33f6 <vfprintf+0x2f4>
    33d2:	30 ff       	sbrs	r19, 0
    33d4:	06 c0       	rjmp	.+12     	; 0x33e2 <vfprintf+0x2e0>
    33d6:	5a 2c       	mov	r5, r10
    33d8:	b3 14       	cp	r11, r3
    33da:	18 f4       	brcc	.+6      	; 0x33e2 <vfprintf+0x2e0>
    33dc:	53 0c       	add	r5, r3
    33de:	5b 18       	sub	r5, r11
    33e0:	b3 2c       	mov	r11, r3
    33e2:	b3 14       	cp	r11, r3
    33e4:	60 f4       	brcc	.+24     	; 0x33fe <vfprintf+0x2fc>
    33e6:	b7 01       	movw	r22, r14
    33e8:	80 e2       	ldi	r24, 0x20	; 32
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	3c 87       	std	Y+12, r19	; 0x0c
    33ee:	62 d0       	rcall	.+196    	; 0x34b4 <fputc>
    33f0:	b3 94       	inc	r11
    33f2:	3c 85       	ldd	r19, Y+12	; 0x0c
    33f4:	f6 cf       	rjmp	.-20     	; 0x33e2 <vfprintf+0x2e0>
    33f6:	b3 14       	cp	r11, r3
    33f8:	10 f4       	brcc	.+4      	; 0x33fe <vfprintf+0x2fc>
    33fa:	3b 18       	sub	r3, r11
    33fc:	01 c0       	rjmp	.+2      	; 0x3400 <vfprintf+0x2fe>
    33fe:	31 2c       	mov	r3, r1
    3400:	34 ff       	sbrs	r19, 4
    3402:	11 c0       	rjmp	.+34     	; 0x3426 <vfprintf+0x324>
    3404:	b7 01       	movw	r22, r14
    3406:	80 e3       	ldi	r24, 0x30	; 48
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	3c 87       	std	Y+12, r19	; 0x0c
    340c:	53 d0       	rcall	.+166    	; 0x34b4 <fputc>
    340e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3410:	32 ff       	sbrs	r19, 2
    3412:	16 c0       	rjmp	.+44     	; 0x3440 <vfprintf+0x33e>
    3414:	31 fd       	sbrc	r19, 1
    3416:	03 c0       	rjmp	.+6      	; 0x341e <vfprintf+0x31c>
    3418:	88 e7       	ldi	r24, 0x78	; 120
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <vfprintf+0x320>
    341e:	88 e5       	ldi	r24, 0x58	; 88
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	b7 01       	movw	r22, r14
    3424:	0c c0       	rjmp	.+24     	; 0x343e <vfprintf+0x33c>
    3426:	83 2f       	mov	r24, r19
    3428:	86 78       	andi	r24, 0x86	; 134
    342a:	51 f0       	breq	.+20     	; 0x3440 <vfprintf+0x33e>
    342c:	31 ff       	sbrs	r19, 1
    342e:	02 c0       	rjmp	.+4      	; 0x3434 <vfprintf+0x332>
    3430:	8b e2       	ldi	r24, 0x2B	; 43
    3432:	01 c0       	rjmp	.+2      	; 0x3436 <vfprintf+0x334>
    3434:	80 e2       	ldi	r24, 0x20	; 32
    3436:	37 fd       	sbrc	r19, 7
    3438:	8d e2       	ldi	r24, 0x2D	; 45
    343a:	b7 01       	movw	r22, r14
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	3a d0       	rcall	.+116    	; 0x34b4 <fputc>
    3440:	a5 14       	cp	r10, r5
    3442:	30 f4       	brcc	.+12     	; 0x3450 <vfprintf+0x34e>
    3444:	b7 01       	movw	r22, r14
    3446:	80 e3       	ldi	r24, 0x30	; 48
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	34 d0       	rcall	.+104    	; 0x34b4 <fputc>
    344c:	5a 94       	dec	r5
    344e:	f8 cf       	rjmp	.-16     	; 0x3440 <vfprintf+0x33e>
    3450:	aa 94       	dec	r10
    3452:	f4 01       	movw	r30, r8
    3454:	ea 0d       	add	r30, r10
    3456:	f1 1d       	adc	r31, r1
    3458:	80 81       	ld	r24, Z
    345a:	b7 01       	movw	r22, r14
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	2a d0       	rcall	.+84     	; 0x34b4 <fputc>
    3460:	a1 10       	cpse	r10, r1
    3462:	f6 cf       	rjmp	.-20     	; 0x3450 <vfprintf+0x34e>
    3464:	33 20       	and	r3, r3
    3466:	09 f4       	brne	.+2      	; 0x346a <vfprintf+0x368>
    3468:	5d ce       	rjmp	.-838    	; 0x3124 <vfprintf+0x22>
    346a:	b7 01       	movw	r22, r14
    346c:	80 e2       	ldi	r24, 0x20	; 32
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	21 d0       	rcall	.+66     	; 0x34b4 <fputc>
    3472:	3a 94       	dec	r3
    3474:	f7 cf       	rjmp	.-18     	; 0x3464 <vfprintf+0x362>
    3476:	f7 01       	movw	r30, r14
    3478:	86 81       	ldd	r24, Z+6	; 0x06
    347a:	97 81       	ldd	r25, Z+7	; 0x07
    347c:	02 c0       	rjmp	.+4      	; 0x3482 <vfprintf+0x380>
    347e:	8f ef       	ldi	r24, 0xFF	; 255
    3480:	9f ef       	ldi	r25, 0xFF	; 255
    3482:	2c 96       	adiw	r28, 0x0c	; 12
    3484:	e2 e1       	ldi	r30, 0x12	; 18
    3486:	c8 c0       	rjmp	.+400    	; 0x3618 <__epilogue_restores__>

00003488 <strnlen_P>:
    3488:	fc 01       	movw	r30, r24
    348a:	05 90       	lpm	r0, Z+
    348c:	61 50       	subi	r22, 0x01	; 1
    348e:	70 40       	sbci	r23, 0x00	; 0
    3490:	01 10       	cpse	r0, r1
    3492:	d8 f7       	brcc	.-10     	; 0x348a <strnlen_P+0x2>
    3494:	80 95       	com	r24
    3496:	90 95       	com	r25
    3498:	8e 0f       	add	r24, r30
    349a:	9f 1f       	adc	r25, r31
    349c:	08 95       	ret

0000349e <strnlen>:
    349e:	fc 01       	movw	r30, r24
    34a0:	61 50       	subi	r22, 0x01	; 1
    34a2:	70 40       	sbci	r23, 0x00	; 0
    34a4:	01 90       	ld	r0, Z+
    34a6:	01 10       	cpse	r0, r1
    34a8:	d8 f7       	brcc	.-10     	; 0x34a0 <strnlen+0x2>
    34aa:	80 95       	com	r24
    34ac:	90 95       	com	r25
    34ae:	8e 0f       	add	r24, r30
    34b0:	9f 1f       	adc	r25, r31
    34b2:	08 95       	ret

000034b4 <fputc>:
    34b4:	0f 93       	push	r16
    34b6:	1f 93       	push	r17
    34b8:	cf 93       	push	r28
    34ba:	df 93       	push	r29
    34bc:	fb 01       	movw	r30, r22
    34be:	23 81       	ldd	r18, Z+3	; 0x03
    34c0:	21 fd       	sbrc	r18, 1
    34c2:	03 c0       	rjmp	.+6      	; 0x34ca <fputc+0x16>
    34c4:	8f ef       	ldi	r24, 0xFF	; 255
    34c6:	9f ef       	ldi	r25, 0xFF	; 255
    34c8:	28 c0       	rjmp	.+80     	; 0x351a <fputc+0x66>
    34ca:	22 ff       	sbrs	r18, 2
    34cc:	16 c0       	rjmp	.+44     	; 0x34fa <fputc+0x46>
    34ce:	46 81       	ldd	r20, Z+6	; 0x06
    34d0:	57 81       	ldd	r21, Z+7	; 0x07
    34d2:	24 81       	ldd	r18, Z+4	; 0x04
    34d4:	35 81       	ldd	r19, Z+5	; 0x05
    34d6:	42 17       	cp	r20, r18
    34d8:	53 07       	cpc	r21, r19
    34da:	44 f4       	brge	.+16     	; 0x34ec <fputc+0x38>
    34dc:	a0 81       	ld	r26, Z
    34de:	b1 81       	ldd	r27, Z+1	; 0x01
    34e0:	9d 01       	movw	r18, r26
    34e2:	2f 5f       	subi	r18, 0xFF	; 255
    34e4:	3f 4f       	sbci	r19, 0xFF	; 255
    34e6:	31 83       	std	Z+1, r19	; 0x01
    34e8:	20 83       	st	Z, r18
    34ea:	8c 93       	st	X, r24
    34ec:	26 81       	ldd	r18, Z+6	; 0x06
    34ee:	37 81       	ldd	r19, Z+7	; 0x07
    34f0:	2f 5f       	subi	r18, 0xFF	; 255
    34f2:	3f 4f       	sbci	r19, 0xFF	; 255
    34f4:	37 83       	std	Z+7, r19	; 0x07
    34f6:	26 83       	std	Z+6, r18	; 0x06
    34f8:	10 c0       	rjmp	.+32     	; 0x351a <fputc+0x66>
    34fa:	eb 01       	movw	r28, r22
    34fc:	09 2f       	mov	r16, r25
    34fe:	18 2f       	mov	r17, r24
    3500:	00 84       	ldd	r0, Z+8	; 0x08
    3502:	f1 85       	ldd	r31, Z+9	; 0x09
    3504:	e0 2d       	mov	r30, r0
    3506:	09 95       	icall
    3508:	89 2b       	or	r24, r25
    350a:	e1 f6       	brne	.-72     	; 0x34c4 <fputc+0x10>
    350c:	8e 81       	ldd	r24, Y+6	; 0x06
    350e:	9f 81       	ldd	r25, Y+7	; 0x07
    3510:	01 96       	adiw	r24, 0x01	; 1
    3512:	9f 83       	std	Y+7, r25	; 0x07
    3514:	8e 83       	std	Y+6, r24	; 0x06
    3516:	81 2f       	mov	r24, r17
    3518:	90 2f       	mov	r25, r16
    351a:	df 91       	pop	r29
    351c:	cf 91       	pop	r28
    351e:	1f 91       	pop	r17
    3520:	0f 91       	pop	r16
    3522:	08 95       	ret

00003524 <__ultoa_invert>:
    3524:	fa 01       	movw	r30, r20
    3526:	aa 27       	eor	r26, r26
    3528:	28 30       	cpi	r18, 0x08	; 8
    352a:	51 f1       	breq	.+84     	; 0x3580 <__ultoa_invert+0x5c>
    352c:	20 31       	cpi	r18, 0x10	; 16
    352e:	81 f1       	breq	.+96     	; 0x3590 <__ultoa_invert+0x6c>
    3530:	e8 94       	clt
    3532:	6f 93       	push	r22
    3534:	6e 7f       	andi	r22, 0xFE	; 254
    3536:	6e 5f       	subi	r22, 0xFE	; 254
    3538:	7f 4f       	sbci	r23, 0xFF	; 255
    353a:	8f 4f       	sbci	r24, 0xFF	; 255
    353c:	9f 4f       	sbci	r25, 0xFF	; 255
    353e:	af 4f       	sbci	r26, 0xFF	; 255
    3540:	b1 e0       	ldi	r27, 0x01	; 1
    3542:	3e d0       	rcall	.+124    	; 0x35c0 <__ultoa_invert+0x9c>
    3544:	b4 e0       	ldi	r27, 0x04	; 4
    3546:	3c d0       	rcall	.+120    	; 0x35c0 <__ultoa_invert+0x9c>
    3548:	67 0f       	add	r22, r23
    354a:	78 1f       	adc	r23, r24
    354c:	89 1f       	adc	r24, r25
    354e:	9a 1f       	adc	r25, r26
    3550:	a1 1d       	adc	r26, r1
    3552:	68 0f       	add	r22, r24
    3554:	79 1f       	adc	r23, r25
    3556:	8a 1f       	adc	r24, r26
    3558:	91 1d       	adc	r25, r1
    355a:	a1 1d       	adc	r26, r1
    355c:	6a 0f       	add	r22, r26
    355e:	71 1d       	adc	r23, r1
    3560:	81 1d       	adc	r24, r1
    3562:	91 1d       	adc	r25, r1
    3564:	a1 1d       	adc	r26, r1
    3566:	20 d0       	rcall	.+64     	; 0x35a8 <__ultoa_invert+0x84>
    3568:	09 f4       	brne	.+2      	; 0x356c <__ultoa_invert+0x48>
    356a:	68 94       	set
    356c:	3f 91       	pop	r19
    356e:	2a e0       	ldi	r18, 0x0A	; 10
    3570:	26 9f       	mul	r18, r22
    3572:	11 24       	eor	r1, r1
    3574:	30 19       	sub	r19, r0
    3576:	30 5d       	subi	r19, 0xD0	; 208
    3578:	31 93       	st	Z+, r19
    357a:	de f6       	brtc	.-74     	; 0x3532 <__ultoa_invert+0xe>
    357c:	cf 01       	movw	r24, r30
    357e:	08 95       	ret
    3580:	46 2f       	mov	r20, r22
    3582:	47 70       	andi	r20, 0x07	; 7
    3584:	40 5d       	subi	r20, 0xD0	; 208
    3586:	41 93       	st	Z+, r20
    3588:	b3 e0       	ldi	r27, 0x03	; 3
    358a:	0f d0       	rcall	.+30     	; 0x35aa <__ultoa_invert+0x86>
    358c:	c9 f7       	brne	.-14     	; 0x3580 <__ultoa_invert+0x5c>
    358e:	f6 cf       	rjmp	.-20     	; 0x357c <__ultoa_invert+0x58>
    3590:	46 2f       	mov	r20, r22
    3592:	4f 70       	andi	r20, 0x0F	; 15
    3594:	40 5d       	subi	r20, 0xD0	; 208
    3596:	4a 33       	cpi	r20, 0x3A	; 58
    3598:	18 f0       	brcs	.+6      	; 0x35a0 <__ultoa_invert+0x7c>
    359a:	49 5d       	subi	r20, 0xD9	; 217
    359c:	31 fd       	sbrc	r19, 1
    359e:	40 52       	subi	r20, 0x20	; 32
    35a0:	41 93       	st	Z+, r20
    35a2:	02 d0       	rcall	.+4      	; 0x35a8 <__ultoa_invert+0x84>
    35a4:	a9 f7       	brne	.-22     	; 0x3590 <__ultoa_invert+0x6c>
    35a6:	ea cf       	rjmp	.-44     	; 0x357c <__ultoa_invert+0x58>
    35a8:	b4 e0       	ldi	r27, 0x04	; 4
    35aa:	a6 95       	lsr	r26
    35ac:	97 95       	ror	r25
    35ae:	87 95       	ror	r24
    35b0:	77 95       	ror	r23
    35b2:	67 95       	ror	r22
    35b4:	ba 95       	dec	r27
    35b6:	c9 f7       	brne	.-14     	; 0x35aa <__ultoa_invert+0x86>
    35b8:	00 97       	sbiw	r24, 0x00	; 0
    35ba:	61 05       	cpc	r22, r1
    35bc:	71 05       	cpc	r23, r1
    35be:	08 95       	ret
    35c0:	9b 01       	movw	r18, r22
    35c2:	ac 01       	movw	r20, r24
    35c4:	0a 2e       	mov	r0, r26
    35c6:	06 94       	lsr	r0
    35c8:	57 95       	ror	r21
    35ca:	47 95       	ror	r20
    35cc:	37 95       	ror	r19
    35ce:	27 95       	ror	r18
    35d0:	ba 95       	dec	r27
    35d2:	c9 f7       	brne	.-14     	; 0x35c6 <__ultoa_invert+0xa2>
    35d4:	62 0f       	add	r22, r18
    35d6:	73 1f       	adc	r23, r19
    35d8:	84 1f       	adc	r24, r20
    35da:	95 1f       	adc	r25, r21
    35dc:	a0 1d       	adc	r26, r0
    35de:	08 95       	ret

000035e0 <__prologue_saves__>:
    35e0:	2f 92       	push	r2
    35e2:	3f 92       	push	r3
    35e4:	4f 92       	push	r4
    35e6:	5f 92       	push	r5
    35e8:	6f 92       	push	r6
    35ea:	7f 92       	push	r7
    35ec:	8f 92       	push	r8
    35ee:	9f 92       	push	r9
    35f0:	af 92       	push	r10
    35f2:	bf 92       	push	r11
    35f4:	cf 92       	push	r12
    35f6:	df 92       	push	r13
    35f8:	ef 92       	push	r14
    35fa:	ff 92       	push	r15
    35fc:	0f 93       	push	r16
    35fe:	1f 93       	push	r17
    3600:	cf 93       	push	r28
    3602:	df 93       	push	r29
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	ca 1b       	sub	r28, r26
    360a:	db 0b       	sbc	r29, r27
    360c:	0f b6       	in	r0, 0x3f	; 63
    360e:	f8 94       	cli
    3610:	de bf       	out	0x3e, r29	; 62
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	cd bf       	out	0x3d, r28	; 61
    3616:	09 94       	ijmp

00003618 <__epilogue_restores__>:
    3618:	2a 88       	ldd	r2, Y+18	; 0x12
    361a:	39 88       	ldd	r3, Y+17	; 0x11
    361c:	48 88       	ldd	r4, Y+16	; 0x10
    361e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3620:	6e 84       	ldd	r6, Y+14	; 0x0e
    3622:	7d 84       	ldd	r7, Y+13	; 0x0d
    3624:	8c 84       	ldd	r8, Y+12	; 0x0c
    3626:	9b 84       	ldd	r9, Y+11	; 0x0b
    3628:	aa 84       	ldd	r10, Y+10	; 0x0a
    362a:	b9 84       	ldd	r11, Y+9	; 0x09
    362c:	c8 84       	ldd	r12, Y+8	; 0x08
    362e:	df 80       	ldd	r13, Y+7	; 0x07
    3630:	ee 80       	ldd	r14, Y+6	; 0x06
    3632:	fd 80       	ldd	r15, Y+5	; 0x05
    3634:	0c 81       	ldd	r16, Y+4	; 0x04
    3636:	1b 81       	ldd	r17, Y+3	; 0x03
    3638:	aa 81       	ldd	r26, Y+2	; 0x02
    363a:	b9 81       	ldd	r27, Y+1	; 0x01
    363c:	ce 0f       	add	r28, r30
    363e:	d1 1d       	adc	r29, r1
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	ed 01       	movw	r28, r26
    364c:	08 95       	ret

0000364e <_exit>:
    364e:	f8 94       	cli

00003650 <__stop_program>:
    3650:	ff cf       	rjmp	.-2      	; 0x3650 <__stop_program>
