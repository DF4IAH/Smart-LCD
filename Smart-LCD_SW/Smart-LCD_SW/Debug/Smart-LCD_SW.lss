
Smart-LCD_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000030c8  0000315c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c0  00800120  00800120  0000317c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000317c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000031d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00003218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005bdc  00000000  00000000  00003568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019cf  00000000  00000000  00009144  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004d9b  00000000  00000000  0000ab13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000110c  00000000  00000000  0000f8b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000139c1  00000000  00000000  000109bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004def  00000000  00000000  0002437d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0002916c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000019f1  00000000  00000000  0002942c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	86 c3       	rjmp	.+1804   	; 0x70e <__ctors_end>
       2:	00 00       	nop
       4:	d6 c7       	rjmp	.+4012   	; 0xfb2 <__vector_1>
       6:	00 00       	nop
       8:	f7 c7       	rjmp	.+4078   	; 0xff8 <__vector_2>
       a:	00 00       	nop
       c:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__vector_3>
      10:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__vector_4>
      14:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__vector_5>
      18:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__vector_6>
      1c:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__vector_7>
      20:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__vector_8>
      24:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_9>
      28:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_10>
      2c:	0c 94 37 09 	jmp	0x126e	; 0x126e <__vector_11>
      30:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__vector_12>
      34:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_13>
      38:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_14>
      3c:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_15>
      40:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__vector_16>
      44:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_17>
      48:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__vector_18>
      4c:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__vector_19>
      50:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__vector_20>
      54:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__vector_21>
      58:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__vector_22>
      5c:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_23>
      60:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__vector_24>
      64:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__vector_25>
      68:	a9 0f       	add	r26, r25
      6a:	a1 10       	cpse	r10, r1
      6c:	a1 10       	cpse	r10, r1
      6e:	a1 10       	cpse	r10, r1
      70:	a1 10       	cpse	r10, r1
      72:	a1 10       	cpse	r10, r1
      74:	a1 10       	cpse	r10, r1
      76:	a1 10       	cpse	r10, r1
      78:	bd 0f       	add	r27, r29
      7a:	a1 10       	cpse	r10, r1
      7c:	a1 10       	cpse	r10, r1
      7e:	a1 10       	cpse	r10, r1
      80:	a1 10       	cpse	r10, r1
      82:	a1 10       	cpse	r10, r1
      84:	a1 10       	cpse	r10, r1
      86:	a1 10       	cpse	r10, r1
      88:	be 0f       	add	r27, r30
      8a:	a1 10       	cpse	r10, r1
      8c:	a1 10       	cpse	r10, r1
      8e:	a1 10       	cpse	r10, r1
      90:	a1 10       	cpse	r10, r1
      92:	a1 10       	cpse	r10, r1
      94:	a1 10       	cpse	r10, r1
      96:	a1 10       	cpse	r10, r1
      98:	cb 0f       	add	r28, r27
      9a:	a1 10       	cpse	r10, r1
      9c:	a1 10       	cpse	r10, r1
      9e:	a1 10       	cpse	r10, r1
      a0:	a1 10       	cpse	r10, r1
      a2:	a1 10       	cpse	r10, r1
      a4:	a1 10       	cpse	r10, r1
      a6:	a1 10       	cpse	r10, r1
      a8:	cd 0f       	add	r28, r29
      aa:	a1 10       	cpse	r10, r1
      ac:	a1 10       	cpse	r10, r1
      ae:	a1 10       	cpse	r10, r1
      b0:	a1 10       	cpse	r10, r1
      b2:	a1 10       	cpse	r10, r1
      b4:	a1 10       	cpse	r10, r1
      b6:	a1 10       	cpse	r10, r1
      b8:	e3 0f       	add	r30, r19
      ba:	a1 10       	cpse	r10, r1
      bc:	a1 10       	cpse	r10, r1
      be:	a1 10       	cpse	r10, r1
      c0:	a1 10       	cpse	r10, r1
      c2:	a1 10       	cpse	r10, r1
      c4:	a1 10       	cpse	r10, r1
      c6:	a1 10       	cpse	r10, r1
      c8:	e8 0f       	add	r30, r24
      ca:	a1 10       	cpse	r10, r1
      cc:	a1 10       	cpse	r10, r1
      ce:	a1 10       	cpse	r10, r1
      d0:	a1 10       	cpse	r10, r1
      d2:	a1 10       	cpse	r10, r1
      d4:	a1 10       	cpse	r10, r1
      d6:	a1 10       	cpse	r10, r1
      d8:	a1 10       	cpse	r10, r1
      da:	a1 10       	cpse	r10, r1
      dc:	a1 10       	cpse	r10, r1
      de:	a1 10       	cpse	r10, r1
      e0:	a1 10       	cpse	r10, r1
      e2:	a1 10       	cpse	r10, r1
      e4:	a1 10       	cpse	r10, r1
      e6:	a1 10       	cpse	r10, r1
      e8:	a1 10       	cpse	r10, r1
      ea:	a1 10       	cpse	r10, r1
      ec:	a1 10       	cpse	r10, r1
      ee:	a1 10       	cpse	r10, r1
      f0:	a1 10       	cpse	r10, r1
      f2:	a1 10       	cpse	r10, r1
      f4:	a1 10       	cpse	r10, r1
      f6:	a1 10       	cpse	r10, r1
      f8:	a1 10       	cpse	r10, r1
      fa:	a1 10       	cpse	r10, r1
      fc:	a1 10       	cpse	r10, r1
      fe:	a1 10       	cpse	r10, r1
     100:	a1 10       	cpse	r10, r1
     102:	a1 10       	cpse	r10, r1
     104:	a1 10       	cpse	r10, r1
     106:	a1 10       	cpse	r10, r1
     108:	a1 10       	cpse	r10, r1
     10a:	a1 10       	cpse	r10, r1
     10c:	a1 10       	cpse	r10, r1
     10e:	a1 10       	cpse	r10, r1
     110:	a1 10       	cpse	r10, r1
     112:	a1 10       	cpse	r10, r1
     114:	a1 10       	cpse	r10, r1
     116:	a1 10       	cpse	r10, r1
     118:	ea 0f       	add	r30, r26
     11a:	a1 10       	cpse	r10, r1
     11c:	a1 10       	cpse	r10, r1
     11e:	a1 10       	cpse	r10, r1
     120:	a1 10       	cpse	r10, r1
     122:	a1 10       	cpse	r10, r1
     124:	a1 10       	cpse	r10, r1
     126:	a1 10       	cpse	r10, r1
     128:	eb 0f       	add	r30, r27
     12a:	a1 10       	cpse	r10, r1
     12c:	a1 10       	cpse	r10, r1
     12e:	a1 10       	cpse	r10, r1
     130:	a1 10       	cpse	r10, r1
     132:	a1 10       	cpse	r10, r1
     134:	a1 10       	cpse	r10, r1
     136:	a1 10       	cpse	r10, r1
     138:	f9 0f       	add	r31, r25
     13a:	a1 10       	cpse	r10, r1
     13c:	a1 10       	cpse	r10, r1
     13e:	a1 10       	cpse	r10, r1
     140:	a1 10       	cpse	r10, r1
     142:	a1 10       	cpse	r10, r1
     144:	a1 10       	cpse	r10, r1
     146:	a1 10       	cpse	r10, r1
     148:	fa 0f       	add	r31, r26
     14a:	a1 10       	cpse	r10, r1
     14c:	a1 10       	cpse	r10, r1
     14e:	a1 10       	cpse	r10, r1
     150:	a1 10       	cpse	r10, r1
     152:	a1 10       	cpse	r10, r1
     154:	a1 10       	cpse	r10, r1
     156:	a1 10       	cpse	r10, r1
     158:	03 10       	cpse	r0, r3
     15a:	a1 10       	cpse	r10, r1
     15c:	a1 10       	cpse	r10, r1
     15e:	a1 10       	cpse	r10, r1
     160:	a1 10       	cpse	r10, r1
     162:	a1 10       	cpse	r10, r1
     164:	a1 10       	cpse	r10, r1
     166:	a1 10       	cpse	r10, r1
     168:	2b 10       	cpse	r2, r11
     16a:	a1 10       	cpse	r10, r1
     16c:	a1 10       	cpse	r10, r1
     16e:	a1 10       	cpse	r10, r1
     170:	a1 10       	cpse	r10, r1
     172:	a1 10       	cpse	r10, r1
     174:	a1 10       	cpse	r10, r1
     176:	a1 10       	cpse	r10, r1
     178:	04 10       	cpse	r0, r4
     17a:	a1 10       	cpse	r10, r1
     17c:	a1 10       	cpse	r10, r1
     17e:	a1 10       	cpse	r10, r1
     180:	a1 10       	cpse	r10, r1
     182:	a1 10       	cpse	r10, r1
     184:	a1 10       	cpse	r10, r1
     186:	a1 10       	cpse	r10, r1
     188:	2c 10       	cpse	r2, r12
     18a:	a1 10       	cpse	r10, r1
     18c:	a1 10       	cpse	r10, r1
     18e:	a1 10       	cpse	r10, r1
     190:	a1 10       	cpse	r10, r1
     192:	a1 10       	cpse	r10, r1
     194:	a1 10       	cpse	r10, r1
     196:	a1 10       	cpse	r10, r1
     198:	44 10       	cpse	r4, r4
     19a:	a1 10       	cpse	r10, r1
     19c:	a1 10       	cpse	r10, r1
     19e:	a1 10       	cpse	r10, r1
     1a0:	a1 10       	cpse	r10, r1
     1a2:	a1 10       	cpse	r10, r1
     1a4:	a1 10       	cpse	r10, r1
     1a6:	a1 10       	cpse	r10, r1
     1a8:	5c 10       	cpse	r5, r12
     1aa:	a1 10       	cpse	r10, r1
     1ac:	a1 10       	cpse	r10, r1
     1ae:	a1 10       	cpse	r10, r1
     1b0:	a1 10       	cpse	r10, r1
     1b2:	a1 10       	cpse	r10, r1
     1b4:	a1 10       	cpse	r10, r1
     1b6:	a1 10       	cpse	r10, r1
     1b8:	5d 10       	cpse	r5, r13
     1ba:	a1 10       	cpse	r10, r1
     1bc:	a1 10       	cpse	r10, r1
     1be:	a1 10       	cpse	r10, r1
     1c0:	a1 10       	cpse	r10, r1
     1c2:	a1 10       	cpse	r10, r1
     1c4:	a1 10       	cpse	r10, r1
     1c6:	a1 10       	cpse	r10, r1
     1c8:	79 10       	cpse	r7, r9
     1ca:	a1 10       	cpse	r10, r1
     1cc:	a1 10       	cpse	r10, r1
     1ce:	a1 10       	cpse	r10, r1
     1d0:	a1 10       	cpse	r10, r1
     1d2:	a1 10       	cpse	r10, r1
     1d4:	a1 10       	cpse	r10, r1
     1d6:	a1 10       	cpse	r10, r1
     1d8:	95 10       	cpse	r9, r5
     1da:	a1 10       	cpse	r10, r1
     1dc:	a1 10       	cpse	r10, r1
     1de:	a1 10       	cpse	r10, r1
     1e0:	a1 10       	cpse	r10, r1
     1e2:	a1 10       	cpse	r10, r1
     1e4:	a1 10       	cpse	r10, r1
     1e6:	a1 10       	cpse	r10, r1
     1e8:	9d 10       	cpse	r9, r13

000001ea <__trampolines_end>:
     1ea:	00 00       	nop
     1ec:	00 00       	nop
     1ee:	00 00       	nop
     1f0:	00 20       	and	r0, r0
     1f2:	20 20       	and	r2, r0
     1f4:	20 20       	and	r2, r0
     1f6:	00 20       	and	r0, r0
     1f8:	50 50       	subi	r21, 0x00	; 0
     1fa:	50 00       	.word	0x0050	; ????
     1fc:	00 00       	nop
     1fe:	00 50       	subi	r16, 0x00	; 0
     200:	50 f8       	bld	r5, 0
     202:	50 f8       	bld	r5, 0
     204:	50 50       	subi	r21, 0x00	; 0
     206:	20 78       	andi	r18, 0x80	; 128
     208:	a0 70       	andi	r26, 0x00	; 0
     20a:	28 f0       	brcs	.+10     	; 0x216 <__trampolines_end+0x2c>
     20c:	20 c0       	rjmp	.+64     	; 0x24e <__trampolines_end+0x64>
     20e:	c8 10       	cpse	r12, r8
     210:	20 40       	sbci	r18, 0x00	; 0
     212:	98 18       	sub	r9, r8
     214:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x3ec0>
     218:	a8 90       	.word	0x90a8	; ????
     21a:	68 60       	ori	r22, 0x08	; 8
     21c:	20 40       	sbci	r18, 0x00	; 0
     21e:	00 00       	nop
     220:	00 00       	nop
     222:	10 20       	and	r1, r0
     224:	40 40       	sbci	r20, 0x00	; 0
     226:	40 20       	and	r4, r0
     228:	10 40       	sbci	r17, 0x00	; 0
     22a:	20 10       	cpse	r2, r0
     22c:	10 10       	cpse	r1, r0
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 50       	subi	r16, 0x00	; 0
     232:	20 f8       	bld	r2, 0
     234:	20 50       	subi	r18, 0x00	; 0
     236:	00 00       	nop
     238:	20 20       	and	r2, r0
     23a:	f8 20       	and	r15, r8
     23c:	20 00       	.word	0x0020	; ????
     23e:	00 00       	nop
     240:	00 00       	nop
     242:	60 20       	and	r6, r0
     244:	40 00       	.word	0x0040	; ????
     246:	00 00       	nop
     248:	f8 00       	.word	0x00f8	; ????
     24a:	00 00       	nop
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 60       	ori	r16, 0x00	; 0
     252:	60 00       	.word	0x0060	; ????
     254:	08 10       	cpse	r0, r8
     256:	20 40       	sbci	r18, 0x00	; 0
     258:	80 00       	.word	0x0080	; ????
     25a:	70 88       	ldd	r7, Z+16	; 0x10
     25c:	98 a8       	ldd	r9, Y+48	; 0x30
     25e:	c8 88       	ldd	r12, Y+16	; 0x10
     260:	70 20       	and	r7, r0
     262:	60 20       	and	r6, r0
     264:	20 20       	and	r2, r0
     266:	20 70       	andi	r18, 0x00	; 0
     268:	70 88       	ldd	r7, Z+16	; 0x10
     26a:	08 10       	cpse	r0, r8
     26c:	20 40       	sbci	r18, 0x00	; 0
     26e:	f8 f8       	.word	0xf8f8	; ????
     270:	10 20       	and	r1, r0
     272:	10 08       	sbc	r1, r0
     274:	88 70       	andi	r24, 0x08	; 8
     276:	10 30       	cpi	r17, 0x00	; 0
     278:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__bss_end+0xf18>
     27c:	10 f8       	bld	r1, 0
     27e:	80 f0       	brcs	.+32     	; 0x2a0 <__trampolines_end+0xb6>
     280:	08 08       	sbc	r0, r8
     282:	88 70       	andi	r24, 0x08	; 8
     284:	30 40       	sbci	r19, 0x00	; 0
     286:	80 f0       	brcs	.+32     	; 0x2a8 <__trampolines_end+0xbe>
     288:	88 88       	ldd	r8, Y+16	; 0x10
     28a:	70 f8       	bld	r7, 0
     28c:	08 10       	cpse	r0, r8
     28e:	20 40       	sbci	r18, 0x00	; 0
     290:	40 40       	sbci	r20, 0x00	; 0
     292:	70 88       	ldd	r7, Z+16	; 0x10
     294:	88 70       	andi	r24, 0x08	; 8
     296:	88 88       	ldd	r8, Y+16	; 0x10
     298:	70 70       	andi	r23, 0x00	; 0
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	78 08       	sbc	r7, r8
     29e:	10 60       	ori	r17, 0x00	; 0
     2a0:	00 60       	ori	r16, 0x00	; 0
     2a2:	60 00       	.word	0x0060	; ????
     2a4:	60 60       	ori	r22, 0x00	; 0
     2a6:	00 00       	nop
     2a8:	60 60       	ori	r22, 0x00	; 0
     2aa:	00 60       	ori	r16, 0x00	; 0
     2ac:	20 40       	sbci	r18, 0x00	; 0
     2ae:	08 10       	cpse	r0, r8
     2b0:	20 40       	sbci	r18, 0x00	; 0
     2b2:	20 10       	cpse	r2, r0
     2b4:	08 00       	.word	0x0008	; ????
     2b6:	00 f8       	bld	r0, 0
     2b8:	00 f8       	bld	r0, 0
     2ba:	00 00       	nop
     2bc:	80 40       	sbci	r24, 0x00	; 0
     2be:	20 10       	cpse	r2, r0
     2c0:	20 40       	sbci	r18, 0x00	; 0
     2c2:	80 70       	andi	r24, 0x00	; 0
     2c4:	88 08       	sbc	r8, r8
     2c6:	10 20       	and	r1, r0
     2c8:	00 20       	and	r0, r0
     2ca:	70 88       	ldd	r7, Z+16	; 0x10
     2cc:	08 68       	ori	r16, 0x88	; 136
     2ce:	a8 a8       	ldd	r10, Y+48	; 0x30
     2d0:	70 70       	andi	r23, 0x00	; 0
     2d2:	88 88       	ldd	r8, Y+16	; 0x10
     2d4:	88 f8       	.word	0xf888	; ????
     2d6:	88 88       	ldd	r8, Y+16	; 0x10
     2d8:	f0 88       	ldd	r15, Z+16	; 0x10
     2da:	88 f0       	brcs	.+34     	; 0x2fe <__trampolines_end+0x114>
     2dc:	88 88       	ldd	r8, Y+16	; 0x10
     2de:	f0 70       	andi	r31, 0x00	; 0
     2e0:	88 80       	ld	r8, Y
     2e2:	80 80       	ld	r8, Z
     2e4:	88 70       	andi	r24, 0x08	; 8
     2e6:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x86a8>
     2ea:	88 90       	.word	0x9088	; ????
     2ec:	e0 f8       	bld	r14, 0
     2ee:	80 80       	ld	r8, Z
     2f0:	f0 80       	ld	r15, Z
     2f2:	80 f8       	bld	r8, 0
     2f4:	f8 80       	ld	r15, Y
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	80 80       	ld	r8, Z
     2fa:	80 70       	andi	r24, 0x00	; 0
     2fc:	88 80       	ld	r8, Y
     2fe:	80 98       	cbi	0x10, 0	; 16
     300:	88 70       	andi	r24, 0x08	; 8
     302:	88 88       	ldd	r8, Y+16	; 0x10
     304:	88 f8       	.word	0xf888	; ????
     306:	88 88       	ldd	r8, Y+16	; 0x10
     308:	88 70       	andi	r24, 0x08	; 8
     30a:	20 20       	and	r2, r0
     30c:	20 20       	and	r2, r0
     30e:	20 70       	andi	r18, 0x00	; 0
     310:	38 10       	cpse	r3, r8
     312:	10 10       	cpse	r1, r0
     314:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x8680>
     318:	90 a0       	ldd	r9, Z+32	; 0x20
     31a:	c0 a0       	ldd	r12, Z+32	; 0x20
     31c:	90 88       	ldd	r9, Z+16	; 0x10
     31e:	80 80       	ld	r8, Z
     320:	80 80       	ld	r8, Z
     322:	80 80       	ld	r8, Z
     324:	f8 88       	ldd	r15, Y+16	; 0x10
     326:	d8 a8       	ldd	r13, Y+48	; 0x30
     328:	88 88       	ldd	r8, Y+16	; 0x10
     32a:	88 88       	ldd	r8, Y+16	; 0x10
     32c:	88 88       	ldd	r8, Y+16	; 0x10
     32e:	c8 a8       	ldd	r12, Y+48	; 0x30
     330:	98 88       	ldd	r9, Y+16	; 0x10
     332:	88 70       	andi	r24, 0x08	; 8
     334:	88 88       	ldd	r8, Y+16	; 0x10
     336:	88 88       	ldd	r8, Y+16	; 0x10
     338:	88 70       	andi	r24, 0x08	; 8
     33a:	f0 88       	ldd	r15, Z+16	; 0x10
     33c:	88 f0       	brcs	.+34     	; 0x360 <__trampolines_end+0x176>
     33e:	80 80       	ld	r8, Z
     340:	80 70       	andi	r24, 0x00	; 0
     342:	88 88       	ldd	r8, Y+16	; 0x10
     344:	88 a8       	ldd	r8, Y+48	; 0x30
     346:	90 68       	ori	r25, 0x80	; 128
     348:	f0 88       	ldd	r15, Z+16	; 0x10
     34a:	88 f0       	brcs	.+34     	; 0x36e <__trampolines_end+0x184>
     34c:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x76a8>
     350:	80 80       	ld	r8, Z
     352:	70 08       	sbc	r7, r0
     354:	08 f0       	brcs	.+2      	; 0x358 <__trampolines_end+0x16e>
     356:	f8 20       	and	r15, r8
     358:	20 20       	and	r2, r0
     35a:	20 20       	and	r2, r0
     35c:	20 88       	ldd	r2, Z+16	; 0x10
     35e:	88 88       	ldd	r8, Y+16	; 0x10
     360:	88 88       	ldd	r8, Y+16	; 0x10
     362:	88 70       	andi	r24, 0x08	; 8
     364:	88 88       	ldd	r8, Y+16	; 0x10
     366:	88 88       	ldd	r8, Y+16	; 0x10
     368:	88 50       	subi	r24, 0x08	; 8
     36a:	20 88       	ldd	r2, Z+16	; 0x10
     36c:	88 88       	ldd	r8, Y+16	; 0x10
     36e:	a8 a8       	ldd	r10, Y+48	; 0x30
     370:	d8 88       	ldd	r13, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	50 20       	and	r5, r0
     376:	50 88       	ldd	r5, Z+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 20       	and	r2, r0
     37e:	20 20       	and	r2, r0
     380:	f8 08       	sbc	r15, r8
     382:	10 20       	and	r1, r0
     384:	40 80       	ld	r4, Z
     386:	f8 38       	cpi	r31, 0x88	; 136
     388:	20 20       	and	r2, r0
     38a:	20 20       	and	r2, r0
     38c:	20 38       	cpi	r18, 0x80	; 128
     38e:	00 80       	ld	r0, Z
     390:	40 20       	and	r4, r0
     392:	10 08       	sbc	r1, r0
     394:	00 e0       	ldi	r16, 0x00	; 0
     396:	20 20       	and	r2, r0
     398:	20 20       	and	r2, r0
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	20 50       	subi	r18, 0x00	; 0
     39e:	88 00       	.word	0x0088	; ????
	...
     3a8:	00 f8       	bld	r0, 0
     3aa:	40 20       	and	r4, r0
     3ac:	10 00       	.word	0x0010	; ????
     3ae:	00 00       	nop
     3b0:	00 00       	nop
     3b2:	00 70       	andi	r16, 0x00	; 0
     3b4:	08 78       	andi	r16, 0x88	; 136
     3b6:	88 78       	andi	r24, 0x88	; 136
     3b8:	80 80       	ld	r8, Z
     3ba:	b0 c8       	rjmp	.-3744   	; 0xfffff51c <__eeprom_end+0xff7ef51c>
     3bc:	88 88       	ldd	r8, Y+16	; 0x10
     3be:	f0 00       	.word	0x00f0	; ????
     3c0:	00 70       	andi	r16, 0x00	; 0
     3c2:	80 80       	ld	r8, Z
     3c4:	88 70       	andi	r24, 0x08	; 8
     3c6:	08 08       	sbc	r0, r8
     3c8:	68 98       	cbi	0x0d, 0	; 13
     3ca:	88 88       	ldd	r8, Y+16	; 0x10
     3cc:	78 00       	.word	0x0078	; ????
     3ce:	00 70       	andi	r16, 0x00	; 0
     3d0:	88 f8       	.word	0xf888	; ????
     3d2:	80 70       	andi	r24, 0x00	; 0
     3d4:	30 48       	sbci	r19, 0x80	; 128
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	40 40       	sbci	r20, 0x00	; 0
     3da:	40 00       	.word	0x0040	; ????
     3dc:	00 78       	andi	r16, 0x80	; 128
     3de:	88 78       	andi	r24, 0x88	; 136
     3e0:	08 30       	cpi	r16, 0x08	; 8
     3e2:	80 80       	ld	r8, Z
     3e4:	b0 c8       	rjmp	.-3744   	; 0xfffff546 <__eeprom_end+0xff7ef546>
     3e6:	88 88       	ldd	r8, Y+16	; 0x10
     3e8:	88 20       	and	r8, r8
     3ea:	00 60       	ori	r16, 0x00	; 0
     3ec:	20 20       	and	r2, r0
     3ee:	20 70       	andi	r18, 0x00	; 0
     3f0:	10 00       	.word	0x0010	; ????
     3f2:	30 10       	cpse	r3, r0
     3f4:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x3e80>
     3f8:	40 48       	sbci	r20, 0x80	; 128
     3fa:	50 60       	ori	r21, 0x00	; 0
     3fc:	50 48       	sbci	r21, 0x80	; 128
     3fe:	60 20       	and	r6, r0
     400:	20 20       	and	r2, r0
     402:	20 20       	and	r2, r0
     404:	70 00       	.word	0x0070	; ????
     406:	00 d0       	rcall	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     408:	a8 a8       	ldd	r10, Y+48	; 0x30
     40a:	88 88       	ldd	r8, Y+16	; 0x10
     40c:	00 00       	nop
     40e:	b0 c8       	rjmp	.-3744   	; 0xfffff570 <__eeprom_end+0xff7ef570>
     410:	88 88       	ldd	r8, Y+16	; 0x10
     412:	88 00       	.word	0x0088	; ????
     414:	00 70       	andi	r16, 0x00	; 0
     416:	88 88       	ldd	r8, Y+16	; 0x10
     418:	88 70       	andi	r24, 0x08	; 8
     41a:	00 00       	nop
     41c:	f0 88       	ldd	r15, Z+16	; 0x10
     41e:	f0 80       	ld	r15, Z
     420:	80 00       	.word	0x0080	; ????
     422:	00 68       	ori	r16, 0x80	; 128
     424:	98 78       	andi	r25, 0x88	; 136
     426:	08 08       	sbc	r0, r8
     428:	00 00       	nop
     42a:	b0 c8       	rjmp	.-3744   	; 0xfffff58c <__eeprom_end+0xff7ef58c>
     42c:	80 80       	ld	r8, Z
     42e:	80 00       	.word	0x0080	; ????
     430:	00 70       	andi	r16, 0x00	; 0
     432:	80 70       	andi	r24, 0x00	; 0
     434:	08 f0       	brcs	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     436:	40 40       	sbci	r20, 0x00	; 0
     438:	e0 40       	sbci	r30, 0x00	; 0
     43a:	40 48       	sbci	r20, 0x80	; 128
     43c:	30 00       	.word	0x0030	; ????
     43e:	00 88       	ldd	r0, Z+16	; 0x10
     440:	88 88       	ldd	r8, Y+16	; 0x10
     442:	98 68       	ori	r25, 0x88	; 136
     444:	00 00       	nop
     446:	88 88       	ldd	r8, Y+16	; 0x10
     448:	88 50       	subi	r24, 0x08	; 8
     44a:	20 00       	.word	0x0020	; ????
     44c:	00 88       	ldd	r0, Z+16	; 0x10
     44e:	88 a8       	ldd	r8, Y+48	; 0x30
     450:	a8 50       	subi	r26, 0x08	; 8
     452:	00 00       	nop
     454:	88 50       	subi	r24, 0x08	; 8
     456:	20 50       	subi	r18, 0x00	; 0
     458:	88 00       	.word	0x0088	; ????
     45a:	00 88       	ldd	r0, Z+16	; 0x10
     45c:	88 78       	andi	r24, 0x88	; 136
     45e:	08 70       	andi	r16, 0x08	; 8
     460:	00 00       	nop
     462:	f8 10       	cpse	r15, r8
     464:	20 40       	sbci	r18, 0x00	; 0
     466:	f8 10       	cpse	r15, r8
     468:	20 20       	and	r2, r0
     46a:	40 20       	and	r4, r0
     46c:	20 10       	cpse	r2, r0
     46e:	20 20       	and	r2, r0
     470:	20 20       	and	r2, r0
     472:	20 20       	and	r2, r0
     474:	20 40       	sbci	r18, 0x00	; 0
     476:	20 20       	and	r2, r0
     478:	10 20       	and	r1, r0
     47a:	20 40       	sbci	r18, 0x00	; 0

0000047c <sysfont_glyphs>:
     47c:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     48c:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     49c:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     4ac:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     4bc:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     4cc:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     4dc:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     4ec:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     4fc:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     50c:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     51c:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     52c:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     53c:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     54c:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     55c:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     56c:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     57c:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     58c:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     59c:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     5ac:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     5bc:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     5cc:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     5dc:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     5ec:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     5fc:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     60c:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     61c:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     62c:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     63c:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     64c:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     65c:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     66c:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     67c:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     68c:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     69c:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     6ac:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     6bc:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     6cc:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     6dc:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     6ec:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     6fc:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     70c:	20 40                                                @

0000070e <__ctors_end>:
     70e:	11 24       	eor	r1, r1
     710:	1f be       	out	0x3f, r1	; 63
     712:	cf ef       	ldi	r28, 0xFF	; 255
     714:	d8 e0       	ldi	r29, 0x08	; 8
     716:	de bf       	out	0x3e, r29	; 62
     718:	cd bf       	out	0x3d, r28	; 61

0000071a <__do_copy_data>:
     71a:	11 e0       	ldi	r17, 0x01	; 1
     71c:	a0 e0       	ldi	r26, 0x00	; 0
     71e:	b1 e0       	ldi	r27, 0x01	; 1
     720:	e8 ec       	ldi	r30, 0xC8	; 200
     722:	f0 e3       	ldi	r31, 0x30	; 48
     724:	02 c0       	rjmp	.+4      	; 0x72a <__do_copy_data+0x10>
     726:	05 90       	lpm	r0, Z+
     728:	0d 92       	st	X+, r0
     72a:	a0 32       	cpi	r26, 0x20	; 32
     72c:	b1 07       	cpc	r27, r17
     72e:	d9 f7       	brne	.-10     	; 0x726 <__do_copy_data+0xc>

00000730 <__do_clear_bss>:
     730:	21 e0       	ldi	r18, 0x01	; 1
     732:	a0 e2       	ldi	r26, 0x20	; 32
     734:	b1 e0       	ldi	r27, 0x01	; 1
     736:	01 c0       	rjmp	.+2      	; 0x73a <.do_clear_bss_start>

00000738 <.do_clear_bss_loop>:
     738:	1d 92       	st	X+, r1

0000073a <.do_clear_bss_start>:
     73a:	a0 3e       	cpi	r26, 0xE0	; 224
     73c:	b2 07       	cpc	r27, r18
     73e:	e1 f7       	brne	.-8      	; 0x738 <.do_clear_bss_loop>
     740:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <main>
     744:	0c 94 62 18 	jmp	0x30c4	; 0x30c4 <_exit>

00000748 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	1f 92       	push	r1
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     752:	8f ef       	ldi	r24, 0xFF	; 255
     754:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     758:	8f b7       	in	r24, 0x3f	; 63
     75a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     75c:	f8 94       	cli
	return flags;
     75e:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     760:	5f 93       	push	r21
     762:	50 e8       	ldi	r21, 0x80	; 128
     764:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     76e:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     770:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     772:	0f 90       	pop	r0
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	1f 92       	push	r1
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     784:	9f b7       	in	r25, 0x3f	; 63
     786:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     788:	f8 94       	cli
	return flags;
     78a:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     78c:	81 11       	cpse	r24, r1
     78e:	06 c0       	rjmp	.+12     	; 0x79c <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
     790:	e4 e6       	ldi	r30, 0x64	; 100
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	60 95       	com	r22
     796:	80 81       	ld	r24, Z
     798:	68 23       	and	r22, r24
     79a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     79c:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     79e:	0f 90       	pop	r0
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	1f 92       	push	r1
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7b0:	9f b7       	in	r25, 0x3f	; 63
     7b2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     7b4:	f8 94       	cli
	return flags;
     7b6:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     7b8:	81 11       	cpse	r24, r1
     7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <sysclk_disable_module+0x20>
		*(reg + port) |= id;
     7bc:	e4 e6       	ldi	r30, 0x64	; 100
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 81       	ld	r24, Z
     7c2:	68 2b       	or	r22, r24
     7c4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7c6:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     7c8:	0f 90       	pop	r0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <gfx_mono_generic_draw_horizontal_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     7d0:	ff 92       	push	r15
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     7da:	e4 2f       	mov	r30, r20
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	e8 0f       	add	r30, r24
     7e0:	f1 1d       	adc	r31, r1
     7e2:	e1 3f       	cpi	r30, 0xF1	; 241
     7e4:	f1 05       	cpc	r31, r1
     7e6:	1c f0       	brlt	.+6      	; 0x7ee <gfx_mono_generic_draw_horizontal_line+0x1e>
		length = GFX_MONO_LCD_WIDTH - x;
     7e8:	c0 ef       	ldi	r28, 0xF0	; 240
     7ea:	4c 2f       	mov	r20, r28
     7ec:	48 1b       	sub	r20, r24
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     7ee:	44 23       	and	r20, r20
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <gfx_mono_generic_draw_horizontal_line+0x24>
     7f2:	53 c0       	rjmp	.+166    	; 0x89a <gfx_mono_generic_draw_horizontal_line+0xca>
	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
		length = GFX_MONO_LCD_WIDTH - x;
	}

	page = y / 8;
     7f4:	d6 2f       	mov	r29, r22
     7f6:	d6 95       	lsr	r29
     7f8:	d6 95       	lsr	r29
     7fa:	d6 95       	lsr	r29
	pixelmask = (1 << (y - (page * 8)));
     7fc:	ed 2f       	mov	r30, r29
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	f1 95       	neg	r31
     802:	e1 95       	neg	r30
     804:	f1 09       	sbc	r31, r1
     806:	ee 0f       	add	r30, r30
     808:	ff 1f       	adc	r31, r31
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	df 01       	movw	r26, r30
     814:	a6 0f       	add	r26, r22
     816:	b1 1d       	adc	r27, r1
     818:	bd 01       	movw	r22, r26
     81a:	e1 e0       	ldi	r30, 0x01	; 1
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	df 01       	movw	r26, r30
     820:	02 c0       	rjmp	.+4      	; 0x826 <gfx_mono_generic_draw_horizontal_line+0x56>
     822:	aa 0f       	add	r26, r26
     824:	bb 1f       	adc	r27, r27
     826:	6a 95       	dec	r22
     828:	e2 f7       	brpl	.-8      	; 0x822 <gfx_mono_generic_draw_horizontal_line+0x52>
     82a:	fa 2e       	mov	r15, r26
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     82c:	21 30       	cpi	r18, 0x01	; 1
     82e:	21 f0       	breq	.+8      	; 0x838 <gfx_mono_generic_draw_horizontal_line+0x68>
     830:	98 f0       	brcs	.+38     	; 0x858 <gfx_mono_generic_draw_horizontal_line+0x88>
     832:	22 30       	cpi	r18, 0x02	; 2
     834:	19 f1       	breq	.+70     	; 0x87c <gfx_mono_generic_draw_horizontal_line+0xac>
     836:	31 c0       	rjmp	.+98     	; 0x89a <gfx_mono_generic_draw_horizontal_line+0xca>
     838:	c4 2f       	mov	r28, r20
     83a:	1f ef       	ldi	r17, 0xFF	; 255
     83c:	18 0f       	add	r17, r24
     83e:	01 2f       	mov	r16, r17
     840:	0c 0f       	add	r16, r28
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     842:	60 2f       	mov	r22, r16
     844:	8d 2f       	mov	r24, r29
     846:	e0 d2       	rcall	.+1472   	; 0xe08 <gfx_mono_lcd_uc1608_get_byte>
			temp |= pixelmask;
     848:	48 2f       	mov	r20, r24
     84a:	4f 29       	or	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     84c:	60 2f       	mov	r22, r16
     84e:	8d 2f       	mov	r24, r29
     850:	cb d2       	rcall	.+1430   	; 0xde8 <gfx_mono_lcd_uc1608_put_byte>
     852:	c1 50       	subi	r28, 0x01	; 1
		return;
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
     854:	a1 f7       	brne	.-24     	; 0x83e <gfx_mono_generic_draw_horizontal_line+0x6e>
     856:	21 c0       	rjmp	.+66     	; 0x89a <gfx_mono_generic_draw_horizontal_line+0xca>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     858:	c4 2f       	mov	r28, r20
     85a:	1f ef       	ldi	r17, 0xFF	; 255
     85c:	18 0f       	add	r17, r24
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
			temp &= ~pixelmask;
     85e:	fa 2e       	mov	r15, r26
     860:	f0 94       	com	r15
     862:	01 2f       	mov	r16, r17
     864:	0c 0f       	add	r16, r28
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     866:	60 2f       	mov	r22, r16
     868:	8d 2f       	mov	r24, r29
     86a:	ce d2       	rcall	.+1436   	; 0xe08 <gfx_mono_lcd_uc1608_get_byte>
			temp &= ~pixelmask;
     86c:	48 2f       	mov	r20, r24
     86e:	4f 21       	and	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     870:	60 2f       	mov	r22, r16
     872:	8d 2f       	mov	r24, r29
     874:	b9 d2       	rcall	.+1394   	; 0xde8 <gfx_mono_lcd_uc1608_put_byte>
     876:	c1 50       	subi	r28, 0x01	; 1
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
     878:	a1 f7       	brne	.-24     	; 0x862 <gfx_mono_generic_draw_horizontal_line+0x92>
     87a:	0f c0       	rjmp	.+30     	; 0x89a <gfx_mono_generic_draw_horizontal_line+0xca>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     87c:	c4 2f       	mov	r28, r20
     87e:	1f ef       	ldi	r17, 0xFF	; 255
     880:	18 0f       	add	r17, r24
     882:	01 2f       	mov	r16, r17
     884:	0c 0f       	add	r16, r28
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     886:	60 2f       	mov	r22, r16
     888:	8d 2f       	mov	r24, r29
     88a:	be d2       	rcall	.+1404   	; 0xe08 <gfx_mono_lcd_uc1608_get_byte>
			temp ^= pixelmask;
     88c:	48 2f       	mov	r20, r24
     88e:	4f 25       	eor	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     890:	60 2f       	mov	r22, r16
     892:	8d 2f       	mov	r24, r29
     894:	a9 d2       	rcall	.+1362   	; 0xde8 <gfx_mono_lcd_uc1608_put_byte>
     896:	c1 50       	subi	r28, 0x01	; 1
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
     898:	a1 f7       	brne	.-24     	; 0x882 <gfx_mono_generic_draw_horizontal_line+0xb2>
		break;

	default:
		break;
	}
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	08 95       	ret

000008a6 <gfx_mono_generic_draw_vertical_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
	if (length == 0) {
     8b2:	44 23       	and	r20, r20
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <gfx_mono_generic_draw_vertical_line+0x12>
     8b6:	46 c0       	rjmp	.+140    	; 0x944 <__stack+0x45>
     8b8:	12 2f       	mov	r17, r18
     8ba:	d8 2f       	mov	r29, r24
     8bc:	9f ef       	ldi	r25, 0xFF	; 255
     8be:	96 0f       	add	r25, r22
		return;
	}

	gfx_coord_t y2 = y + length - 1;
     8c0:	94 0f       	add	r25, r20

	if (y == y2) {
     8c2:	69 13       	cpse	r22, r25
     8c4:	03 c0       	rjmp	.+6      	; 0x8cc <gfx_mono_generic_draw_vertical_line+0x26>
		gfx_mono_draw_pixel(x, y, color);
     8c6:	42 2f       	mov	r20, r18
     8c8:	d2 d2       	rcall	.+1444   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     8ca:	3c c0       	rjmp	.+120    	; 0x944 <__stack+0x45>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
     8cc:	9f 37       	cpi	r25, 0x7F	; 127
     8ce:	08 f0       	brcs	.+2      	; 0x8d2 <gfx_mono_generic_draw_vertical_line+0x2c>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
     8d0:	9f e7       	ldi	r25, 0x7F	; 127
	}

	gfx_coord_t y1page = y / 8;
     8d2:	c6 2f       	mov	r28, r22
     8d4:	c6 95       	lsr	r28
     8d6:	c6 95       	lsr	r28
     8d8:	c6 95       	lsr	r28
	gfx_coord_t y2page = y2 / 8;
     8da:	09 2f       	mov	r16, r25
     8dc:	06 95       	lsr	r16
     8de:	06 95       	lsr	r16
     8e0:	06 95       	lsr	r16

	uint8_t y1bitpos = y & 0x07;
     8e2:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
     8e4:	2f ef       	ldi	r18, 0xFF	; 255
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	a9 01       	movw	r20, r18
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <gfx_mono_generic_draw_vertical_line+0x4a>
     8ec:	44 0f       	add	r20, r20
     8ee:	55 1f       	adc	r21, r21
     8f0:	6a 95       	dec	r22
     8f2:	e2 f7       	brpl	.-8      	; 0x8ec <gfx_mono_generic_draw_vertical_line+0x46>

	gfx_coord_t y1page = y / 8;
	gfx_coord_t y2page = y2 / 8;

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;
     8f4:	97 70       	andi	r25, 0x07	; 7

	uint8_t y1pixelmask = 0xFF << y1bitpos;
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
     8f6:	67 e0       	ldi	r22, 0x07	; 7
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	fb 01       	movw	r30, r22
     8fc:	e9 1b       	sub	r30, r25
     8fe:	f1 09       	sbc	r31, r1
     900:	79 01       	movw	r14, r18
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0x9>
     904:	f5 94       	asr	r15
     906:	e7 94       	ror	r14
     908:	ea 95       	dec	r30
     90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0x5>

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     90c:	c0 13       	cpse	r28, r16
     90e:	06 c0       	rjmp	.+12     	; 0x91c <__stack+0x1d>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
     910:	4e 21       	and	r20, r14
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
     912:	21 2f       	mov	r18, r17
     914:	6d 2f       	mov	r22, r29
     916:	8c 2f       	mov	r24, r28
     918:	87 d2       	rcall	.+1294   	; 0xe28 <gfx_mono_lcd_uc1608_mask_byte>
     91a:	14 c0       	rjmp	.+40     	; 0x944 <__stack+0x45>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
     91c:	21 2f       	mov	r18, r17
     91e:	6d 2f       	mov	r22, r29
     920:	8c 2f       	mov	r24, r28
     922:	82 d2       	rcall	.+1284   	; 0xe28 <gfx_mono_lcd_uc1608_mask_byte>

		while (++y1page < y2page) {
     924:	cf 5f       	subi	r28, 0xFF	; 255
     926:	c0 17       	cp	r28, r16
     928:	40 f4       	brcc	.+16     	; 0x93a <__stack+0x3b>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     92a:	21 2f       	mov	r18, r17
     92c:	4f ef       	ldi	r20, 0xFF	; 255
     92e:	6d 2f       	mov	r22, r29
     930:	8c 2f       	mov	r24, r28
     932:	7a d2       	rcall	.+1268   	; 0xe28 <gfx_mono_lcd_uc1608_mask_byte>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     934:	cf 5f       	subi	r28, 0xFF	; 255
     936:	c0 17       	cp	r28, r16
     938:	c0 f3       	brcs	.-16     	; 0x92a <__stack+0x2b>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     93a:	21 2f       	mov	r18, r17
     93c:	4e 2d       	mov	r20, r14
     93e:	6d 2f       	mov	r22, r29
     940:	80 2f       	mov	r24, r16
     942:	72 d2       	rcall	.+1252   	; 0xe28 <gfx_mono_lcd_uc1608_mask_byte>
	}
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	08 95       	ret

00000952 <gfx_mono_generic_draw_line>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
     952:	8f 92       	push	r8
     954:	9f 92       	push	r9
     956:	af 92       	push	r10
     958:	bf 92       	push	r11
     95a:	cf 92       	push	r12
     95c:	df 92       	push	r13
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	c8 2f       	mov	r28, r24
     96c:	d6 2f       	mov	r29, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     96e:	48 17       	cp	r20, r24
     970:	28 f4       	brcc	.+10     	; 0x97c <gfx_mono_generic_draw_line+0x2a>
		dx = x1;
		x1 = x2;
		x2 = dx;
		dy = y1;
		y1 = y2;
     972:	d2 2f       	mov	r29, r18
		y2 = dy;
     974:	26 2f       	mov	r18, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     976:	8c 2f       	mov	r24, r28
		dx = x1;
		x1 = x2;
     978:	c4 2f       	mov	r28, r20
		x2 = dx;
     97a:	48 2f       	mov	r20, r24
		dy = y1;
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
     97c:	e4 2e       	mov	r14, r20
     97e:	f1 2c       	mov	r15, r1
     980:	ec 1a       	sub	r14, r28
     982:	f1 08       	sbc	r15, r1
	dy = y2 - y1;
     984:	a2 2e       	mov	r10, r18
     986:	b1 2c       	mov	r11, r1
     988:	ad 1a       	sub	r10, r29
     98a:	b1 08       	sbc	r11, r1

	x = x1;
	y = y1;

	if (dx < 0) {
     98c:	ff 20       	and	r15, r15
     98e:	2c f4       	brge	.+10     	; 0x99a <gfx_mono_generic_draw_line+0x48>
		xinc = -1;
		dx = -dx;
     990:	f1 94       	neg	r15
     992:	e1 94       	neg	r14
     994:	f1 08       	sbc	r15, r1

	x = x1;
	y = y1;

	if (dx < 0) {
		xinc = -1;
     996:	1f ef       	ldi	r17, 0xFF	; 255
     998:	01 c0       	rjmp	.+2      	; 0x99c <gfx_mono_generic_draw_line+0x4a>
		dx = -dx;
	} else {
		xinc = 1;
     99a:	11 e0       	ldi	r17, 0x01	; 1
	}

	if (dy < 0) {
     99c:	bb 20       	and	r11, r11
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <gfx_mono_generic_draw_line+0x50>
     9a0:	48 c0       	rjmp	.+144    	; 0xa32 <gfx_mono_generic_draw_line+0xe0>
		yinc = -1;
		dy = -dy;
     9a2:	88 24       	eor	r8, r8
     9a4:	99 24       	eor	r9, r9
     9a6:	8a 18       	sub	r8, r10
     9a8:	9b 08       	sbc	r9, r11
	} else {
		yinc = 1;
	}

	if (dx > dy) {
     9aa:	8e 14       	cp	r8, r14
     9ac:	9f 04       	cpc	r9, r15
     9ae:	fc f4       	brge	.+62     	; 0x9ee <gfx_mono_generic_draw_line+0x9c>
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
		dy = -dy;
     9b0:	54 01       	movw	r10, r8
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     9b2:	88 24       	eor	r8, r8
     9b4:	8a 94       	dec	r8
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <gfx_mono_generic_draw_line+0x6a>
		dy = -dy;
	} else {
		yinc = 1;
     9b8:	88 24       	eor	r8, r8
     9ba:	83 94       	inc	r8
	}

	if (dx > dy) {
		e = dy - dx;
     9bc:	65 01       	movw	r12, r10
     9be:	ce 18       	sub	r12, r14
     9c0:	df 08       	sbc	r13, r15
		for (i = 0; i <= dx; i++) {
     9c2:	ff 20       	and	r15, r15
     9c4:	dc f1       	brlt	.+118    	; 0xa3c <gfx_mono_generic_draw_line+0xea>
     9c6:	91 2c       	mov	r9, r1
			gfx_mono_draw_pixel(x, y, color);
     9c8:	40 2f       	mov	r20, r16
     9ca:	6d 2f       	mov	r22, r29
     9cc:	8c 2f       	mov	r24, r28
     9ce:	4f d2       	rcall	.+1182   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     9d0:	dd 20       	and	r13, r13
     9d2:	1c f0       	brlt	.+6      	; 0x9da <gfx_mono_generic_draw_line+0x88>
				e -= dx;
     9d4:	ce 18       	sub	r12, r14
     9d6:	df 08       	sbc	r13, r15
				y += yinc;
     9d8:	d8 0d       	add	r29, r8
			}

			e += dy;
     9da:	ca 0c       	add	r12, r10
     9dc:	db 1c       	adc	r13, r11
     9de:	c1 0f       	add	r28, r17
		yinc = 1;
	}

	if (dx > dy) {
		e = dy - dx;
		for (i = 0; i <= dx; i++) {
     9e0:	93 94       	inc	r9
     9e2:	89 2d       	mov	r24, r9
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	e8 16       	cp	r14, r24
     9e8:	f9 06       	cpc	r15, r25
     9ea:	74 f7       	brge	.-36     	; 0x9c8 <gfx_mono_generic_draw_line+0x76>
     9ec:	27 c0       	rjmp	.+78     	; 0xa3c <gfx_mono_generic_draw_line+0xea>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     9ee:	67 01       	movw	r12, r14
     9f0:	ca 0c       	add	r12, r10
     9f2:	db 1c       	adc	r13, r11
		for (i = 0; i <= dy; i++) {
     9f4:	99 20       	and	r9, r9
     9f6:	14 f1       	brlt	.+68     	; 0xa3c <gfx_mono_generic_draw_line+0xea>
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     9f8:	aa 24       	eor	r10, r10
     9fa:	aa 94       	dec	r10
		dy = -dy;
	} else {
		yinc = 1;
     9fc:	b1 2c       	mov	r11, r1
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
			gfx_mono_draw_pixel(x, y, color);
     9fe:	40 2f       	mov	r20, r16
     a00:	6d 2f       	mov	r22, r29
     a02:	8c 2f       	mov	r24, r28
     a04:	34 d2       	rcall	.+1128   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     a06:	dd 20       	and	r13, r13
     a08:	1c f0       	brlt	.+6      	; 0xa10 <gfx_mono_generic_draw_line+0xbe>
				e -= dy;
     a0a:	c8 18       	sub	r12, r8
     a0c:	d9 08       	sbc	r13, r9
				x += xinc;
     a0e:	c1 0f       	add	r28, r17
			}

			e += dx;
     a10:	ce 0c       	add	r12, r14
     a12:	df 1c       	adc	r13, r15
     a14:	da 0d       	add	r29, r10
			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
     a16:	b3 94       	inc	r11
     a18:	8b 2d       	mov	r24, r11
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	88 16       	cp	r8, r24
     a1e:	99 06       	cpc	r9, r25
     a20:	74 f7       	brge	.-36     	; 0x9fe <gfx_mono_generic_draw_line+0xac>
     a22:	0c c0       	rjmp	.+24     	; 0xa3c <gfx_mono_generic_draw_line+0xea>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     a24:	67 01       	movw	r12, r14
     a26:	ca 18       	sub	r12, r10
     a28:	db 08       	sbc	r13, r11
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
	dy = y2 - y1;
     a2a:	45 01       	movw	r8, r10

	if (dy < 0) {
		yinc = -1;
		dy = -dy;
	} else {
		yinc = 1;
     a2c:	aa 24       	eor	r10, r10
     a2e:	a3 94       	inc	r10
     a30:	e5 cf       	rjmp	.-54     	; 0x9fc <gfx_mono_generic_draw_line+0xaa>
	}

	if (dx > dy) {
     a32:	ae 14       	cp	r10, r14
     a34:	bf 04       	cpc	r11, r15
     a36:	0c f4       	brge	.+2      	; 0xa3a <gfx_mono_generic_draw_line+0xe8>
     a38:	bf cf       	rjmp	.-130    	; 0x9b8 <gfx_mono_generic_draw_line+0x66>
     a3a:	f4 cf       	rjmp	.-24     	; 0xa24 <gfx_mono_generic_draw_line+0xd2>

			e += dx;
			y += yinc;
		}
	}
}
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	bf 90       	pop	r11
     a4e:	af 90       	pop	r10
     a50:	9f 90       	pop	r9
     a52:	8f 90       	pop	r8
     a54:	08 95       	ret

00000a56 <gfx_mono_generic_draw_rect>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     a56:	ff 92       	push	r15
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	d8 2f       	mov	r29, r24
     a62:	16 2f       	mov	r17, r22
     a64:	c4 2f       	mov	r28, r20
     a66:	f2 2e       	mov	r15, r18
	gfx_mono_draw_horizontal_line(x, y, width, color);
     a68:	20 2f       	mov	r18, r16
     a6a:	b2 de       	rcall	.-668    	; 0x7d0 <gfx_mono_generic_draw_horizontal_line>
     a6c:	6f ef       	ldi	r22, 0xFF	; 255
     a6e:	6f 0d       	add	r22, r15
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
     a70:	61 0f       	add	r22, r17
     a72:	20 2f       	mov	r18, r16
     a74:	4c 2f       	mov	r20, r28
     a76:	8d 2f       	mov	r24, r29
     a78:	ab de       	rcall	.-682    	; 0x7d0 <gfx_mono_generic_draw_horizontal_line>

	gfx_mono_draw_vertical_line(x, y, height, color);
     a7a:	20 2f       	mov	r18, r16
     a7c:	4f 2d       	mov	r20, r15
     a7e:	61 2f       	mov	r22, r17
     a80:	8d 2f       	mov	r24, r29
     a82:	11 df       	rcall	.-478    	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
     a84:	8f ef       	ldi	r24, 0xFF	; 255
     a86:	8c 0f       	add	r24, r28
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     a88:	20 2f       	mov	r18, r16
     a8a:	4f 2d       	mov	r20, r15
     a8c:	61 2f       	mov	r22, r17
     a8e:	8d 0f       	add	r24, r29
     a90:	0a df       	rcall	.-492    	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	08 95       	ret

00000a9e <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
	if (height == 0) {
     aa8:	22 23       	and	r18, r18
     aaa:	69 f0       	breq	.+26     	; 0xac6 <gfx_mono_generic_draw_filled_rect+0x28>
     aac:	c2 2f       	mov	r28, r18
     aae:	f4 2e       	mov	r15, r20
     ab0:	18 2f       	mov	r17, r24
     ab2:	df ef       	ldi	r29, 0xFF	; 255
     ab4:	d6 0f       	add	r29, r22
     ab6:	6d 2f       	mov	r22, r29
     ab8:	6c 0f       	add	r22, r28
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     aba:	20 2f       	mov	r18, r16
     abc:	4f 2d       	mov	r20, r15
     abe:	81 2f       	mov	r24, r17
     ac0:	87 de       	rcall	.-754    	; 0x7d0 <gfx_mono_generic_draw_horizontal_line>
     ac2:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     ac4:	c1 f7       	brne	.-16     	; 0xab6 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	ff 90       	pop	r15
     ad0:	08 95       	ret

00000ad2 <gfx_mono_generic_draw_circle>:
 * \param  octant_mask Bitmask indicating which octants to draw.
 */
void gfx_mono_generic_draw_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t octant_mask)
{
     ad2:	2f 92       	push	r2
     ad4:	3f 92       	push	r3
     ad6:	4f 92       	push	r4
     ad8:	5f 92       	push	r5
     ada:	6f 92       	push	r6
     adc:	7f 92       	push	r7
     ade:	8f 92       	push	r8
     ae0:	9f 92       	push	r9
     ae2:	af 92       	push	r10
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <gfx_mono_generic_draw_circle+0x26>
     af8:	1f 92       	push	r1
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	88 2e       	mov	r8, r24
     b00:	96 2e       	mov	r9, r22
     b02:	4a 83       	std	Y+2, r20	; 0x02
     b04:	a2 2e       	mov	r10, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     b06:	41 11       	cpse	r20, r1
     b08:	03 c0       	rjmp	.+6      	; 0xb10 <gfx_mono_generic_draw_circle+0x3e>
		gfx_mono_draw_pixel(x, y, color);
     b0a:	42 2f       	mov	r20, r18
     b0c:	b0 d1       	rcall	.+864    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     b0e:	89 c0       	rjmp	.+274    	; 0xc22 <gfx_mono_generic_draw_circle+0x150>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     b10:	2a 81       	ldd	r18, Y+2	; 0x02
     b12:	e2 2e       	mov	r14, r18
     b14:	f1 2c       	mov	r15, r1
     b16:	ee 0c       	add	r14, r14
     b18:	ff 1c       	adc	r15, r15
     b1a:	f1 94       	neg	r15
     b1c:	e1 94       	neg	r14
     b1e:	f1 08       	sbc	r15, r1
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	e8 0e       	add	r14, r24
     b24:	f1 1c       	adc	r15, r1
     b26:	c6 2e       	mov	r12, r22
     b28:	d8 2c       	mov	r13, r8
     b2a:	18 2d       	mov	r17, r8
     b2c:	b6 2e       	mov	r11, r22
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     b2e:	1b 82       	std	Y+3, r1	; 0x03
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     b30:	90 2f       	mov	r25, r16
     b32:	91 70       	andi	r25, 0x01	; 1
     b34:	29 2e       	mov	r2, r25
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT1) {
     b36:	e0 2f       	mov	r30, r16
     b38:	e2 70       	andi	r30, 0x02	; 2
     b3a:	3e 2e       	mov	r3, r30
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT2) {
     b3c:	f0 2f       	mov	r31, r16
     b3e:	f4 70       	andi	r31, 0x04	; 4
     b40:	4f 2e       	mov	r4, r31
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT3) {
     b42:	20 2f       	mov	r18, r16
     b44:	28 70       	andi	r18, 0x08	; 8
     b46:	52 2e       	mov	r5, r18
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT4) {
     b48:	80 2f       	mov	r24, r16
     b4a:	80 71       	andi	r24, 0x10	; 16
     b4c:	68 2e       	mov	r6, r24
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
		}

		if (octant_mask & GFX_OCTANT5) {
     b4e:	90 2f       	mov	r25, r16
     b50:	90 72       	andi	r25, 0x20	; 32
     b52:	79 2e       	mov	r7, r25
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
		}

		if (octant_mask & GFX_OCTANT6) {
     b54:	e0 2f       	mov	r30, r16
     b56:	e0 74       	andi	r30, 0x40	; 64
     b58:	e9 83       	std	Y+1, r30	; 0x01
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     b5a:	22 20       	and	r2, r2
     b5c:	29 f0       	breq	.+10     	; 0xb68 <gfx_mono_generic_draw_circle+0x96>
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
     b5e:	4a 2d       	mov	r20, r10
     b60:	6c 2d       	mov	r22, r12
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	88 0d       	add	r24, r8
     b66:	83 d1       	rcall	.+774    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT1) {
     b68:	33 20       	and	r3, r3
     b6a:	31 f0       	breq	.+12     	; 0xb78 <gfx_mono_generic_draw_circle+0xa6>
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
     b6c:	4a 2d       	mov	r20, r10
     b6e:	69 2d       	mov	r22, r9
     b70:	fa 81       	ldd	r31, Y+2	; 0x02
     b72:	6f 1b       	sub	r22, r31
     b74:	81 2f       	mov	r24, r17
     b76:	7b d1       	rcall	.+758    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT2) {
     b78:	44 20       	and	r4, r4
     b7a:	31 f0       	breq	.+12     	; 0xb88 <gfx_mono_generic_draw_circle+0xb6>
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
     b7c:	4a 2d       	mov	r20, r10
     b7e:	69 2d       	mov	r22, r9
     b80:	2a 81       	ldd	r18, Y+2	; 0x02
     b82:	62 1b       	sub	r22, r18
     b84:	8d 2d       	mov	r24, r13
     b86:	73 d1       	rcall	.+742    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT3) {
     b88:	55 20       	and	r5, r5
     b8a:	31 f0       	breq	.+12     	; 0xb98 <gfx_mono_generic_draw_circle+0xc6>
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
     b8c:	4a 2d       	mov	r20, r10
     b8e:	6c 2d       	mov	r22, r12
     b90:	88 2d       	mov	r24, r8
     b92:	9a 81       	ldd	r25, Y+2	; 0x02
     b94:	89 1b       	sub	r24, r25
     b96:	6b d1       	rcall	.+726    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT4) {
     b98:	66 20       	and	r6, r6
     b9a:	31 f0       	breq	.+12     	; 0xba8 <gfx_mono_generic_draw_circle+0xd6>
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
     b9c:	4a 2d       	mov	r20, r10
     b9e:	6b 2d       	mov	r22, r11
     ba0:	88 2d       	mov	r24, r8
     ba2:	ea 81       	ldd	r30, Y+2	; 0x02
     ba4:	8e 1b       	sub	r24, r30
     ba6:	63 d1       	rcall	.+710    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT5) {
     ba8:	77 20       	and	r7, r7
     baa:	29 f0       	breq	.+10     	; 0xbb6 <gfx_mono_generic_draw_circle+0xe4>
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
     bac:	4a 2d       	mov	r20, r10
     bae:	6a 81       	ldd	r22, Y+2	; 0x02
     bb0:	69 0d       	add	r22, r9
     bb2:	8d 2d       	mov	r24, r13
     bb4:	5c d1       	rcall	.+696    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT6) {
     bb6:	f9 81       	ldd	r31, Y+1	; 0x01
     bb8:	ff 23       	and	r31, r31
     bba:	29 f0       	breq	.+10     	; 0xbc6 <gfx_mono_generic_draw_circle+0xf4>
			gfx_mono_draw_pixel(x + offset_x, y + offset_y, color);
     bbc:	4a 2d       	mov	r20, r10
     bbe:	6a 81       	ldd	r22, Y+2	; 0x02
     bc0:	69 0d       	add	r22, r9
     bc2:	81 2f       	mov	r24, r17
     bc4:	54 d1       	rcall	.+680    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT7) {
     bc6:	00 23       	and	r16, r16
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <gfx_mono_generic_draw_circle+0x102>
			gfx_mono_draw_pixel(x + offset_y, y + offset_x, color);
     bca:	4a 2d       	mov	r20, r10
     bcc:	6b 2d       	mov	r22, r11
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	88 0d       	add	r24, r8
     bd2:	4d d1       	rcall	.+666    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     bd4:	ff 20       	and	r15, r15
     bd6:	5c f4       	brge	.+22     	; 0xbee <gfx_mono_generic_draw_circle+0x11c>
			error += ((offset_x << 2) + 6);
     bd8:	2b 81       	ldd	r18, Y+3	; 0x03
     bda:	82 2f       	mov	r24, r18
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	06 96       	adiw	r24, 0x06	; 6
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0f c0       	rjmp	.+30     	; 0xc0c <gfx_mono_generic_draw_circle+0x13a>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     bee:	eb 81       	ldd	r30, Y+3	; 0x03
     bf0:	8e 2f       	mov	r24, r30
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	fa 81       	ldd	r31, Y+2	; 0x02
     bf6:	8f 1b       	sub	r24, r31
     bf8:	91 09       	sbc	r25, r1
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	0a 96       	adiw	r24, 0x0a	; 10
     c04:	e8 0e       	add	r14, r24
     c06:	f9 1e       	adc	r15, r25
			--offset_y;
     c08:	f1 50       	subi	r31, 0x01	; 1
     c0a:	fa 83       	std	Y+2, r31	; 0x02
		}

		/* Next X. */
		++offset_x;
     c0c:	2b 81       	ldd	r18, Y+3	; 0x03
     c0e:	2f 5f       	subi	r18, 0xFF	; 255
     c10:	2b 83       	std	Y+3, r18	; 0x03
     c12:	b3 94       	inc	r11
     c14:	1f 5f       	subi	r17, 0xFF	; 255
     c16:	da 94       	dec	r13
     c18:	ca 94       	dec	r12
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	82 17       	cp	r24, r18
     c1e:	08 f0       	brcs	.+2      	; 0xc22 <gfx_mono_generic_draw_circle+0x150>
     c20:	9c cf       	rjmp	.-200    	; 0xb5a <gfx_mono_generic_draw_circle+0x88>
		}

		/* Next X. */
		++offset_x;
	}
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	df 90       	pop	r13
     c36:	cf 90       	pop	r12
     c38:	bf 90       	pop	r11
     c3a:	af 90       	pop	r10
     c3c:	9f 90       	pop	r9
     c3e:	8f 90       	pop	r8
     c40:	7f 90       	pop	r7
     c42:	6f 90       	pop	r6
     c44:	5f 90       	pop	r5
     c46:	4f 90       	pop	r4
     c48:	3f 90       	pop	r3
     c4a:	2f 90       	pop	r2
     c4c:	08 95       	ret

00000c4e <gfx_mono_generic_draw_filled_circle>:
 * \param  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
     c4e:	5f 92       	push	r5
     c50:	6f 92       	push	r6
     c52:	7f 92       	push	r7
     c54:	8f 92       	push	r8
     c56:	9f 92       	push	r9
     c58:	af 92       	push	r10
     c5a:	bf 92       	push	r11
     c5c:	cf 92       	push	r12
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	88 2e       	mov	r8, r24
     c6e:	96 2e       	mov	r9, r22
     c70:	c4 2f       	mov	r28, r20
     c72:	a2 2e       	mov	r10, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     c74:	41 11       	cpse	r20, r1
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <gfx_mono_generic_draw_filled_circle+0x30>
		gfx_mono_draw_pixel(x, y, color);
     c78:	42 2f       	mov	r20, r18
     c7a:	f9 d0       	rcall	.+498    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     c7c:	73 c0       	rjmp	.+230    	; 0xd64 <gfx_mono_generic_draw_filled_circle+0x116>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     c7e:	e4 2e       	mov	r14, r20
     c80:	f1 2c       	mov	r15, r1
     c82:	ee 0c       	add	r14, r14
     c84:	ff 1c       	adc	r15, r15
     c86:	f1 94       	neg	r15
     c88:	e1 94       	neg	r14
     c8a:	f1 08       	sbc	r15, r1
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	e8 0e       	add	r14, r24
     c90:	f1 1c       	adc	r15, r1
     c92:	b6 2e       	mov	r11, r22
     c94:	c8 2c       	mov	r12, r8
     c96:	d8 2c       	mov	r13, r8
     c98:	11 e0       	ldi	r17, 0x01	; 1
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     c9a:	d0 e0       	ldi	r29, 0x00	; 0
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     c9c:	80 2f       	mov	r24, r16
     c9e:	83 70       	andi	r24, 0x03	; 3
     ca0:	58 2e       	mov	r5, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     ca2:	80 2f       	mov	r24, r16
     ca4:	8c 70       	andi	r24, 0x0C	; 12
     ca6:	68 2e       	mov	r6, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     ca8:	80 2f       	mov	r24, r16
     caa:	80 73       	andi	r24, 0x30	; 48
     cac:	78 2e       	mov	r7, r24
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     cae:	00 7c       	andi	r16, 0xC0	; 192
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     cb0:	55 20       	and	r5, r5
     cb2:	69 f0       	breq	.+26     	; 0xcce <gfx_mono_generic_draw_filled_circle+0x80>
			gfx_mono_draw_vertical_line(x + offset_y,
     cb4:	2a 2d       	mov	r18, r10
     cb6:	41 2f       	mov	r20, r17
     cb8:	6b 2d       	mov	r22, r11
     cba:	8c 2f       	mov	r24, r28
     cbc:	88 0d       	add	r24, r8
     cbe:	f3 dd       	rcall	.-1050   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     cc0:	2a 2d       	mov	r18, r10
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	4c 0f       	add	r20, r28
     cc6:	69 2d       	mov	r22, r9
     cc8:	6c 1b       	sub	r22, r28
     cca:	8d 2d       	mov	r24, r13
     ccc:	ec dd       	rcall	.-1064   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     cce:	66 20       	and	r6, r6
     cd0:	69 f0       	breq	.+26     	; 0xcec <gfx_mono_generic_draw_filled_circle+0x9e>
			gfx_mono_draw_vertical_line(x - offset_y,
     cd2:	2a 2d       	mov	r18, r10
     cd4:	41 2f       	mov	r20, r17
     cd6:	6b 2d       	mov	r22, r11
     cd8:	88 2d       	mov	r24, r8
     cda:	8c 1b       	sub	r24, r28
     cdc:	e4 dd       	rcall	.-1080   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     cde:	2a 2d       	mov	r18, r10
     ce0:	41 e0       	ldi	r20, 0x01	; 1
     ce2:	4c 0f       	add	r20, r28
     ce4:	69 2d       	mov	r22, r9
     ce6:	6c 1b       	sub	r22, r28
     ce8:	8c 2d       	mov	r24, r12
     cea:	dd dd       	rcall	.-1094   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     cec:	77 20       	and	r7, r7
     cee:	61 f0       	breq	.+24     	; 0xd08 <gfx_mono_generic_draw_filled_circle+0xba>
			gfx_mono_draw_vertical_line(x - offset_y,
     cf0:	2a 2d       	mov	r18, r10
     cf2:	41 2f       	mov	r20, r17
     cf4:	69 2d       	mov	r22, r9
     cf6:	88 2d       	mov	r24, r8
     cf8:	8c 1b       	sub	r24, r28
     cfa:	d5 dd       	rcall	.-1110   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     cfc:	2a 2d       	mov	r18, r10
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	4c 0f       	add	r20, r28
     d02:	69 2d       	mov	r22, r9
     d04:	8c 2d       	mov	r24, r12
     d06:	cf dd       	rcall	.-1122   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     d08:	00 23       	and	r16, r16
     d0a:	61 f0       	breq	.+24     	; 0xd24 <gfx_mono_generic_draw_filled_circle+0xd6>
			gfx_mono_draw_vertical_line(x + offset_y,
     d0c:	2a 2d       	mov	r18, r10
     d0e:	41 2f       	mov	r20, r17
     d10:	69 2d       	mov	r22, r9
     d12:	8c 2f       	mov	r24, r28
     d14:	88 0d       	add	r24, r8
     d16:	c7 dd       	rcall	.-1138   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     d18:	2a 2d       	mov	r18, r10
     d1a:	41 e0       	ldi	r20, 0x01	; 1
     d1c:	4c 0f       	add	r20, r28
     d1e:	69 2d       	mov	r22, r9
     d20:	8d 2d       	mov	r24, r13
     d22:	c1 dd       	rcall	.-1150   	; 0x8a6 <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     d24:	ff 20       	and	r15, r15
     d26:	54 f4       	brge	.+20     	; 0xd3c <gfx_mono_generic_draw_filled_circle+0xee>
			error += ((offset_x << 2) + 6);
     d28:	8d 2f       	mov	r24, r29
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	06 96       	adiw	r24, 0x06	; 6
     d36:	e8 0e       	add	r14, r24
     d38:	f9 1e       	adc	r15, r25
     d3a:	0c c0       	rjmp	.+24     	; 0xd54 <gfx_mono_generic_draw_filled_circle+0x106>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     d3c:	ed 2f       	mov	r30, r29
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	ec 1b       	sub	r30, r28
     d42:	f1 09       	sbc	r31, r1
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	ee 0f       	add	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	3a 96       	adiw	r30, 0x0a	; 10
     d4e:	ee 0e       	add	r14, r30
     d50:	ff 1e       	adc	r15, r31
			--offset_y;
     d52:	c1 50       	subi	r28, 0x01	; 1
		}

		/* Next X. */
		++offset_x;
     d54:	df 5f       	subi	r29, 0xFF	; 255
     d56:	1f 5f       	subi	r17, 0xFF	; 255
     d58:	d3 94       	inc	r13
     d5a:	ca 94       	dec	r12
     d5c:	ba 94       	dec	r11
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
     d5e:	cd 17       	cp	r28, r29
     d60:	08 f0       	brcs	.+2      	; 0xd64 <gfx_mono_generic_draw_filled_circle+0x116>
     d62:	a6 cf       	rjmp	.-180    	; 0xcb0 <gfx_mono_generic_draw_filled_circle+0x62>
		}

		/* Next X. */
		++offset_x;
	}
}
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	df 90       	pop	r13
     d72:	cf 90       	pop	r12
     d74:	bf 90       	pop	r11
     d76:	af 90       	pop	r10
     d78:	9f 90       	pop	r9
     d7a:	8f 90       	pop	r8
     d7c:	7f 90       	pop	r7
     d7e:	6f 90       	pop	r6
     d80:	5f 90       	pop	r5
     d82:	08 95       	ret

00000d84 <gfx_mono_lcd_uc1608_put_page>:
		uint8_t				byte = gfx_mono_lcd_uc1608_get_byte(page, x);

		isSet = (byte & pixel_mask) ?  GFX_PIXEL_SET : GFX_PIXEL_CLR;
	}
	return isSet;
}
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	7c 01       	movw	r14, r24
     d92:	c4 2f       	mov	r28, r20
     d94:	12 2f       	mov	r17, r18
     d96:	89 2b       	or	r24, r25
     d98:	01 f1       	breq	.+64     	; 0xdda <gfx_mono_lcd_uc1608_put_page+0x56>
     d9a:	60 31       	cpi	r22, 0x10	; 16
     d9c:	f0 f4       	brcc	.+60     	; 0xdda <gfx_mono_lcd_uc1608_put_page+0x56>
     d9e:	40 3f       	cpi	r20, 0xF0	; 240
     da0:	e0 f4       	brcc	.+56     	; 0xdda <gfx_mono_lcd_uc1608_put_page+0x56>
     da2:	86 2f       	mov	r24, r22
     da4:	df d5       	rcall	.+3006   	; 0x1964 <lcd_page_set>
     da6:	8c 2f       	mov	r24, r28
     da8:	e3 d5       	rcall	.+3014   	; 0x1970 <lcd_col_set>
     daa:	81 2f       	mov	r24, r17
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	8c 0f       	add	r24, r28
     db0:	91 1d       	adc	r25, r1
     db2:	81 3f       	cpi	r24, 0xF1	; 241
     db4:	91 05       	cpc	r25, r1
     db6:	14 f0       	brlt	.+4      	; 0xdbc <gfx_mono_lcd_uc1608_put_page+0x38>
     db8:	10 ef       	ldi	r17, 0xF0	; 240
     dba:	1c 1b       	sub	r17, r28
     dbc:	11 23       	and	r17, r17
     dbe:	69 f0       	breq	.+26     	; 0xdda <gfx_mono_lcd_uc1608_put_page+0x56>
     dc0:	e7 01       	movw	r28, r14
     dc2:	11 50       	subi	r17, 0x01	; 1
     dc4:	01 2f       	mov	r16, r17
     dc6:	10 e0       	ldi	r17, 0x00	; 0
     dc8:	0f 5f       	subi	r16, 0xFF	; 255
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	0e 0d       	add	r16, r14
     dce:	1f 1d       	adc	r17, r15
     dd0:	89 91       	ld	r24, Y+
     dd2:	69 d5       	rcall	.+2770   	; 0x18a6 <lcd_bus_write_ram>
     dd4:	c0 17       	cp	r28, r16
     dd6:	d1 07       	cpc	r29, r17
     dd8:	d9 f7       	brne	.-10     	; 0xdd0 <gfx_mono_lcd_uc1608_put_page+0x4c>
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	08 95       	ret

00000de8 <gfx_mono_lcd_uc1608_put_byte>:
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	80 31       	cpi	r24, 0x10	; 16
     dee:	48 f4       	brcc	.+18     	; 0xe02 <gfx_mono_lcd_uc1608_put_byte+0x1a>
     df0:	60 3f       	cpi	r22, 0xF0	; 240
     df2:	38 f4       	brcc	.+14     	; 0xe02 <gfx_mono_lcd_uc1608_put_byte+0x1a>
     df4:	d4 2f       	mov	r29, r20
     df6:	c6 2f       	mov	r28, r22
     df8:	b5 d5       	rcall	.+2922   	; 0x1964 <lcd_page_set>
     dfa:	8c 2f       	mov	r24, r28
     dfc:	b9 d5       	rcall	.+2930   	; 0x1970 <lcd_col_set>
     dfe:	8d 2f       	mov	r24, r29
     e00:	52 d5       	rcall	.+2724   	; 0x18a6 <lcd_bus_write_ram>
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <gfx_mono_lcd_uc1608_get_byte>:
     e08:	cf 93       	push	r28
     e0a:	80 31       	cpi	r24, 0x10	; 16
     e0c:	40 f4       	brcc	.+16     	; 0xe1e <gfx_mono_lcd_uc1608_get_byte+0x16>
     e0e:	60 3f       	cpi	r22, 0xF0	; 240
     e10:	40 f4       	brcc	.+16     	; 0xe22 <gfx_mono_lcd_uc1608_get_byte+0x1a>
     e12:	c6 2f       	mov	r28, r22
     e14:	a7 d5       	rcall	.+2894   	; 0x1964 <lcd_page_set>
     e16:	8c 2f       	mov	r24, r28
     e18:	ab d5       	rcall	.+2902   	; 0x1970 <lcd_col_set>
     e1a:	5a d5       	rcall	.+2740   	; 0x18d0 <lcd_bus_read_ram>
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <gfx_mono_lcd_uc1608_get_byte+0x1c>
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <gfx_mono_lcd_uc1608_get_byte+0x1c>
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	cf 91       	pop	r28
     e26:	08 95       	ret

00000e28 <gfx_mono_lcd_uc1608_mask_byte>:
 * \param column     Page offset (x coordinate)
 * \param pixel_mask Mask for pixel operation
 * \param color      Pixel operation
 */
void gfx_mono_lcd_uc1608_mask_byte(gfx_coord_t page, gfx_coord_t column, gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
	uint8_t data = 0;

	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
     e30:	80 31       	cpi	r24, 0x10	; 16
     e32:	c0 f4       	brcc	.+48     	; 0xe64 <gfx_mono_lcd_uc1608_mask_byte+0x3c>
     e34:	60 3f       	cpi	r22, 0xF0	; 240
     e36:	b0 f4       	brcc	.+44     	; 0xe64 <gfx_mono_lcd_uc1608_mask_byte+0x3c>
     e38:	d2 2f       	mov	r29, r18
     e3a:	14 2f       	mov	r17, r20
     e3c:	c6 2f       	mov	r28, r22
		data = gfx_mono_lcd_uc1608_get_byte(page, column);
     e3e:	e4 df       	rcall	.-56     	; 0xe08 <gfx_mono_lcd_uc1608_get_byte>
     e40:	08 2f       	mov	r16, r24

		switch (color) {
     e42:	d1 30       	cpi	r29, 0x01	; 1
     e44:	41 f0       	breq	.+16     	; 0xe56 <gfx_mono_lcd_uc1608_mask_byte+0x2e>
     e46:	18 f0       	brcs	.+6      	; 0xe4e <gfx_mono_lcd_uc1608_mask_byte+0x26>
     e48:	d2 30       	cpi	r29, 0x02	; 2
     e4a:	39 f0       	breq	.+14     	; 0xe5a <gfx_mono_lcd_uc1608_mask_byte+0x32>
     e4c:	07 c0       	rjmp	.+14     	; 0xe5c <gfx_mono_lcd_uc1608_mask_byte+0x34>
			case GFX_PIXEL_CLR:
				data &= ~pixel_mask;
     e4e:	41 2f       	mov	r20, r17
     e50:	40 95       	com	r20
     e52:	04 23       	and	r16, r20
				break;
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <gfx_mono_lcd_uc1608_mask_byte+0x34>

			case GFX_PIXEL_SET:
				data |= pixel_mask;
     e56:	01 2b       	or	r16, r17
				break;
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <gfx_mono_lcd_uc1608_mask_byte+0x34>

			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
     e5a:	01 27       	eor	r16, r17
				break;
		}

		lcd_col_set(column);
     e5c:	8c 2f       	mov	r24, r28
     e5e:	88 d5       	rcall	.+2832   	; 0x1970 <lcd_col_set>
		lcd_bus_write_ram(data);										// Write byte slice to RAM
     e60:	80 2f       	mov	r24, r16
     e62:	21 d5       	rcall	.+2626   	; 0x18a6 <lcd_bus_write_ram>
	}
}
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	08 95       	ret

00000e6e <gfx_mono_lcd_uc1608_draw_pixel>:
 * \param y         Y coordinate of the pixel
 * \param color     Pixel operation.
 */
void gfx_mono_lcd_uc1608_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_mono_color_t color)
{
	if ((x < GFX_MONO_LCD_WIDTH) && (y < GFX_MONO_LCD_HEIGHT)) {
     e6e:	80 3f       	cpi	r24, 0xF0	; 240
     e70:	98 f4       	brcc	.+38     	; 0xe98 <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     e72:	66 23       	and	r22, r22
     e74:	8c f0       	brlt	.+34     	; 0xe98 <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     e76:	24 2f       	mov	r18, r20
     e78:	96 2f       	mov	r25, r22
     e7a:	68 2f       	mov	r22, r24
		gfx_coord_t			page		= y / GFX_MONO_LCD_PIXELS_PER_BYTE;
		gfx_mono_color_t	pixel_mask	= 1 << (y % GFX_MONO_LCD_PIXELS_PER_BYTE);
     e7c:	89 2f       	mov	r24, r25
     e7e:	87 70       	andi	r24, 0x07	; 7
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <gfx_mono_lcd_uc1608_draw_pixel+0x1c>
     e86:	44 0f       	add	r20, r20
     e88:	55 1f       	adc	r21, r21
     e8a:	8a 95       	dec	r24
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <gfx_mono_lcd_uc1608_draw_pixel+0x18>

		gfx_mono_lcd_uc1608_mask_byte(page, x, pixel_mask, color);
     e8e:	89 2f       	mov	r24, r25
     e90:	86 95       	lsr	r24
     e92:	86 95       	lsr	r24
     e94:	86 95       	lsr	r24
     e96:	c8 cf       	rjmp	.-112    	; 0xe28 <gfx_mono_lcd_uc1608_mask_byte>
     e98:	08 95       	ret

00000e9a <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     e9a:	9f 92       	push	r9
     e9c:	af 92       	push	r10
     e9e:	bf 92       	push	r11
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	c8 2f       	mov	r28, r24
     eb2:	e6 2e       	mov	r14, r22
     eb4:	b4 2e       	mov	r11, r20
     eb6:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     eb8:	00 e0       	ldi	r16, 0x00	; 0
     eba:	f9 01       	movw	r30, r18
     ebc:	24 81       	ldd	r18, Z+4	; 0x04
     ebe:	43 81       	ldd	r20, Z+3	; 0x03
     ec0:	6b 2d       	mov	r22, r11
     ec2:	8e 2d       	mov	r24, r14
     ec4:	ec dd       	rcall	.-1064   	; 0xa9e <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     ec6:	f6 01       	movw	r30, r12
     ec8:	80 81       	ld	r24, Z
     eca:	81 11       	cpse	r24, r1
     ecc:	3a c0       	rjmp	.+116    	; 0xf42 <gfx_mono_draw_char+0xa8>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     ece:	83 81       	ldd	r24, Z+3	; 0x03
     ed0:	28 2f       	mov	r18, r24
     ed2:	26 95       	lsr	r18
     ed4:	26 95       	lsr	r18
     ed6:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     ed8:	87 70       	andi	r24, 0x07	; 7
     eda:	09 f0       	breq	.+2      	; 0xede <gfx_mono_draw_char+0x44>
		char_row_size++;
     edc:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     ede:	f6 01       	movw	r30, r12
     ee0:	a4 80       	ldd	r10, Z+4	; 0x04
     ee2:	2a 9d       	mul	r18, r10
     ee4:	90 01       	movw	r18, r0
     ee6:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
     ee8:	8c 2f       	mov	r24, r28
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	45 81       	ldd	r20, Z+5	; 0x05
     eee:	84 1b       	sub	r24, r20
     ef0:	91 09       	sbc	r25, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
     ef2:	28 9f       	mul	r18, r24
     ef4:	a0 01       	movw	r20, r0
     ef6:	29 9f       	mul	r18, r25
     ef8:	50 0d       	add	r21, r0
     efa:	38 9f       	mul	r19, r24
     efc:	50 0d       	add	r21, r0
     efe:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     f00:	01 81       	ldd	r16, Z+1	; 0x01
     f02:	12 81       	ldd	r17, Z+2	; 0x02
     f04:	04 0f       	add	r16, r20
     f06:	15 1f       	adc	r17, r21

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     f08:	91 2c       	mov	r9, r1
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     f0a:	f6 01       	movw	r30, r12
     f0c:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     f0e:	ff 20       	and	r15, r15
     f10:	a1 f0       	breq	.+40     	; 0xf3a <gfx_mono_draw_char+0xa0>
     f12:	d9 2d       	mov	r29, r9
     f14:	c9 2d       	mov	r28, r9
     f16:	8c 2f       	mov	r24, r28
     f18:	8e 0d       	add	r24, r14
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     f1a:	9c 2f       	mov	r25, r28
     f1c:	97 70       	andi	r25, 0x07	; 7
     f1e:	21 f4       	brne	.+8      	; 0xf28 <gfx_mono_draw_char+0x8e>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     f20:	f8 01       	movw	r30, r16
     f22:	d4 91       	lpm	r29, Z
				glyph_data++;
     f24:	0f 5f       	subi	r16, 0xFF	; 255
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     f28:	dd 23       	and	r29, r29
     f2a:	1c f4       	brge	.+6      	; 0xf32 <gfx_mono_draw_char+0x98>
				gfx_mono_draw_pixel(inc_x, inc_y,
     f2c:	41 e0       	ldi	r20, 0x01	; 1
     f2e:	6b 2d       	mov	r22, r11
     f30:	9e df       	rcall	.-196    	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     f32:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     f34:	cf 5f       	subi	r28, 0xFF	; 255
     f36:	cf 11       	cpse	r28, r15
     f38:	ee cf       	rjmp	.-36     	; 0xf16 <gfx_mono_draw_char+0x7c>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     f3a:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     f3c:	aa 94       	dec	r10
	} while (rows_left > 0);
     f3e:	a1 10       	cpse	r10, r1
     f40:	e4 cf       	rjmp	.-56     	; 0xf0a <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	08 95       	ret

00000f5a <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	04 2f       	mov	r16, r20
     f6a:	79 01       	movw	r14, r18
     f6c:	ec 01       	movw	r28, r24
     f6e:	16 2f       	mov	r17, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     f70:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     f72:	89 91       	ld	r24, Y+
     f74:	8a 30       	cpi	r24, 0x0A	; 10
     f76:	31 f4       	brne	.+12     	; 0xf84 <gfx_mono_draw_string+0x2a>
     f78:	f7 01       	movw	r30, r14
     f7a:	84 81       	ldd	r24, Z+4	; 0x04
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
     f7e:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     f80:	1d 2d       	mov	r17, r13
     f82:	09 c0       	rjmp	.+18     	; 0xf96 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     f84:	8d 30       	cpi	r24, 0x0D	; 13
     f86:	39 f0       	breq	.+14     	; 0xf96 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     f88:	97 01       	movw	r18, r14
     f8a:	40 2f       	mov	r20, r16
     f8c:	61 2f       	mov	r22, r17
     f8e:	85 df       	rcall	.-246    	; 0xe9a <gfx_mono_draw_char>
			x += font->width;
     f90:	f7 01       	movw	r30, r14
     f92:	83 81       	ldd	r24, Z+3	; 0x03
     f94:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     f96:	88 81       	ld	r24, Y
     f98:	81 11       	cpse	r24, r1
     f9a:	eb cf       	rjmp	.-42     	; 0xf72 <gfx_mono_draw_string+0x18>
}
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	df 90       	pop	r13
     faa:	08 95       	ret

00000fac <asm_break>:

/* Helper functions */

void asm_break(void)
{
	__asm__ __volatile__ ("break" ::: "memory");
     fac:	98 95       	break
	nop();
     fae:	00 00       	nop
     fb0:	08 95       	ret

00000fb2 <__vector_1>:
	asm_break();
}


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
     fb2:	1f 92       	push	r1
     fb4:	0f 92       	push	r0
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	0f 92       	push	r0
     fba:	11 24       	eor	r1, r1
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     fd4:	eb df       	rcall	.-42     	; 0xfac <asm_break>


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
	s_bad_interrupt();
}
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	bf 91       	pop	r27
     fdc:	af 91       	pop	r26
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	7f 91       	pop	r23
     fe4:	6f 91       	pop	r22
     fe6:	5f 91       	pop	r21
     fe8:	4f 91       	pop	r20
     fea:	3f 91       	pop	r19
     fec:	2f 91       	pop	r18
     fee:	0f 90       	pop	r0
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	0f 90       	pop	r0
     ff4:	1f 90       	pop	r1
     ff6:	18 95       	reti

00000ff8 <__vector_2>:

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
     ff8:	1f 92       	push	r1
     ffa:	0f 92       	push	r0
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	0f 92       	push	r0
    1000:	11 24       	eor	r1, r1
    1002:	2f 93       	push	r18
    1004:	3f 93       	push	r19
    1006:	4f 93       	push	r20
    1008:	5f 93       	push	r21
    100a:	6f 93       	push	r22
    100c:	7f 93       	push	r23
    100e:	8f 93       	push	r24
    1010:	9f 93       	push	r25
    1012:	af 93       	push	r26
    1014:	bf 93       	push	r27
    1016:	ef 93       	push	r30
    1018:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    101a:	c8 df       	rcall	.-112    	; 0xfac <asm_break>
}

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
	s_bad_interrupt();
}
    101c:	ff 91       	pop	r31
    101e:	ef 91       	pop	r30
    1020:	bf 91       	pop	r27
    1022:	af 91       	pop	r26
    1024:	9f 91       	pop	r25
    1026:	8f 91       	pop	r24
    1028:	7f 91       	pop	r23
    102a:	6f 91       	pop	r22
    102c:	5f 91       	pop	r21
    102e:	4f 91       	pop	r20
    1030:	3f 91       	pop	r19
    1032:	2f 91       	pop	r18
    1034:	0f 90       	pop	r0
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	0f 90       	pop	r0
    103a:	1f 90       	pop	r1
    103c:	18 95       	reti

0000103e <__vector_3>:

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
    103e:	1f 92       	push	r1
    1040:	0f 92       	push	r0
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	0f 92       	push	r0
    1046:	11 24       	eor	r1, r1
    1048:	2f 93       	push	r18
    104a:	3f 93       	push	r19
    104c:	4f 93       	push	r20
    104e:	5f 93       	push	r21
    1050:	6f 93       	push	r22
    1052:	7f 93       	push	r23
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
    1058:	af 93       	push	r26
    105a:	bf 93       	push	r27
    105c:	ef 93       	push	r30
    105e:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1060:	a5 df       	rcall	.-182    	; 0xfac <asm_break>
}

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
	s_bad_interrupt();
}
    1062:	ff 91       	pop	r31
    1064:	ef 91       	pop	r30
    1066:	bf 91       	pop	r27
    1068:	af 91       	pop	r26
    106a:	9f 91       	pop	r25
    106c:	8f 91       	pop	r24
    106e:	7f 91       	pop	r23
    1070:	6f 91       	pop	r22
    1072:	5f 91       	pop	r21
    1074:	4f 91       	pop	r20
    1076:	3f 91       	pop	r19
    1078:	2f 91       	pop	r18
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	0f 90       	pop	r0
    1080:	1f 90       	pop	r1
    1082:	18 95       	reti

00001084 <__vector_4>:

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
    1084:	1f 92       	push	r1
    1086:	0f 92       	push	r0
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	0f 92       	push	r0
    108c:	11 24       	eor	r1, r1
    108e:	2f 93       	push	r18
    1090:	3f 93       	push	r19
    1092:	4f 93       	push	r20
    1094:	5f 93       	push	r21
    1096:	6f 93       	push	r22
    1098:	7f 93       	push	r23
    109a:	8f 93       	push	r24
    109c:	9f 93       	push	r25
    109e:	af 93       	push	r26
    10a0:	bf 93       	push	r27
    10a2:	ef 93       	push	r30
    10a4:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    10a6:	82 df       	rcall	.-252    	; 0xfac <asm_break>
}

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
	s_bad_interrupt();
}
    10a8:	ff 91       	pop	r31
    10aa:	ef 91       	pop	r30
    10ac:	bf 91       	pop	r27
    10ae:	af 91       	pop	r26
    10b0:	9f 91       	pop	r25
    10b2:	8f 91       	pop	r24
    10b4:	7f 91       	pop	r23
    10b6:	6f 91       	pop	r22
    10b8:	5f 91       	pop	r21
    10ba:	4f 91       	pop	r20
    10bc:	3f 91       	pop	r19
    10be:	2f 91       	pop	r18
    10c0:	0f 90       	pop	r0
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	0f 90       	pop	r0
    10c6:	1f 90       	pop	r1
    10c8:	18 95       	reti

000010ca <__vector_5>:

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
    10ca:	1f 92       	push	r1
    10cc:	0f 92       	push	r0
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	0f 92       	push	r0
    10d2:	11 24       	eor	r1, r1
    10d4:	2f 93       	push	r18
    10d6:	3f 93       	push	r19
    10d8:	4f 93       	push	r20
    10da:	5f 93       	push	r21
    10dc:	6f 93       	push	r22
    10de:	7f 93       	push	r23
    10e0:	8f 93       	push	r24
    10e2:	9f 93       	push	r25
    10e4:	af 93       	push	r26
    10e6:	bf 93       	push	r27
    10e8:	ef 93       	push	r30
    10ea:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    10ec:	5f df       	rcall	.-322    	; 0xfac <asm_break>
}

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
	s_bad_interrupt();
}
    10ee:	ff 91       	pop	r31
    10f0:	ef 91       	pop	r30
    10f2:	bf 91       	pop	r27
    10f4:	af 91       	pop	r26
    10f6:	9f 91       	pop	r25
    10f8:	8f 91       	pop	r24
    10fa:	7f 91       	pop	r23
    10fc:	6f 91       	pop	r22
    10fe:	5f 91       	pop	r21
    1100:	4f 91       	pop	r20
    1102:	3f 91       	pop	r19
    1104:	2f 91       	pop	r18
    1106:	0f 90       	pop	r0
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	0f 90       	pop	r0
    110c:	1f 90       	pop	r1
    110e:	18 95       	reti

00001110 <__vector_6>:

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
    1110:	1f 92       	push	r1
    1112:	0f 92       	push	r0
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	0f 92       	push	r0
    1118:	11 24       	eor	r1, r1
    111a:	2f 93       	push	r18
    111c:	3f 93       	push	r19
    111e:	4f 93       	push	r20
    1120:	5f 93       	push	r21
    1122:	6f 93       	push	r22
    1124:	7f 93       	push	r23
    1126:	8f 93       	push	r24
    1128:	9f 93       	push	r25
    112a:	af 93       	push	r26
    112c:	bf 93       	push	r27
    112e:	ef 93       	push	r30
    1130:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1132:	3c df       	rcall	.-392    	; 0xfac <asm_break>
}

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
	s_bad_interrupt();
}
    1134:	ff 91       	pop	r31
    1136:	ef 91       	pop	r30
    1138:	bf 91       	pop	r27
    113a:	af 91       	pop	r26
    113c:	9f 91       	pop	r25
    113e:	8f 91       	pop	r24
    1140:	7f 91       	pop	r23
    1142:	6f 91       	pop	r22
    1144:	5f 91       	pop	r21
    1146:	4f 91       	pop	r20
    1148:	3f 91       	pop	r19
    114a:	2f 91       	pop	r18
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

00001156 <__vector_7>:

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
    1156:	1f 92       	push	r1
    1158:	0f 92       	push	r0
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	0f 92       	push	r0
    115e:	11 24       	eor	r1, r1
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	ef 93       	push	r30
    1176:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1178:	19 df       	rcall	.-462    	; 0xfac <asm_break>
}

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
	s_bad_interrupt();
}
    117a:	ff 91       	pop	r31
    117c:	ef 91       	pop	r30
    117e:	bf 91       	pop	r27
    1180:	af 91       	pop	r26
    1182:	9f 91       	pop	r25
    1184:	8f 91       	pop	r24
    1186:	7f 91       	pop	r23
    1188:	6f 91       	pop	r22
    118a:	5f 91       	pop	r21
    118c:	4f 91       	pop	r20
    118e:	3f 91       	pop	r19
    1190:	2f 91       	pop	r18
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	0f 90       	pop	r0
    1198:	1f 90       	pop	r1
    119a:	18 95       	reti

0000119c <__vector_8>:

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
    119c:	1f 92       	push	r1
    119e:	0f 92       	push	r0
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	0f 92       	push	r0
    11a4:	11 24       	eor	r1, r1
    11a6:	2f 93       	push	r18
    11a8:	3f 93       	push	r19
    11aa:	4f 93       	push	r20
    11ac:	5f 93       	push	r21
    11ae:	6f 93       	push	r22
    11b0:	7f 93       	push	r23
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    11be:	f6 de       	rcall	.-532    	; 0xfac <asm_break>
}

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
	s_bad_interrupt();
}
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	bf 91       	pop	r27
    11c6:	af 91       	pop	r26
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	7f 91       	pop	r23
    11ce:	6f 91       	pop	r22
    11d0:	5f 91       	pop	r21
    11d2:	4f 91       	pop	r20
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <__vector_9>:

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	ef 93       	push	r30
    1202:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1204:	d3 de       	rcall	.-602    	; 0xfac <asm_break>
}

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
	s_bad_interrupt();
}
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	7f 91       	pop	r23
    1214:	6f 91       	pop	r22
    1216:	5f 91       	pop	r21
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <__vector_10>:

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    124a:	b0 de       	rcall	.-672    	; 0xfac <asm_break>
}

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
	s_bad_interrupt();
}
    124c:	ff 91       	pop	r31
    124e:	ef 91       	pop	r30
    1250:	bf 91       	pop	r27
    1252:	af 91       	pop	r26
    1254:	9f 91       	pop	r25
    1256:	8f 91       	pop	r24
    1258:	7f 91       	pop	r23
    125a:	6f 91       	pop	r22
    125c:	5f 91       	pop	r21
    125e:	4f 91       	pop	r20
    1260:	3f 91       	pop	r19
    1262:	2f 91       	pop	r18
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	0f 90       	pop	r0
    126a:	1f 90       	pop	r1
    126c:	18 95       	reti

0000126e <__vector_11>:

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
    126e:	1f 92       	push	r1
    1270:	0f 92       	push	r0
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	0f 92       	push	r0
    1276:	11 24       	eor	r1, r1
    1278:	2f 93       	push	r18
    127a:	3f 93       	push	r19
    127c:	4f 93       	push	r20
    127e:	5f 93       	push	r21
    1280:	6f 93       	push	r22
    1282:	7f 93       	push	r23
    1284:	8f 93       	push	r24
    1286:	9f 93       	push	r25
    1288:	af 93       	push	r26
    128a:	bf 93       	push	r27
    128c:	ef 93       	push	r30
    128e:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1290:	8d de       	rcall	.-742    	; 0xfac <asm_break>
}

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
	s_bad_interrupt();
}
    1292:	ff 91       	pop	r31
    1294:	ef 91       	pop	r30
    1296:	bf 91       	pop	r27
    1298:	af 91       	pop	r26
    129a:	9f 91       	pop	r25
    129c:	8f 91       	pop	r24
    129e:	7f 91       	pop	r23
    12a0:	6f 91       	pop	r22
    12a2:	5f 91       	pop	r21
    12a4:	4f 91       	pop	r20
    12a6:	3f 91       	pop	r19
    12a8:	2f 91       	pop	r18
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	0f 90       	pop	r0
    12b0:	1f 90       	pop	r1
    12b2:	18 95       	reti

000012b4 <__vector_12>:

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
    12b4:	1f 92       	push	r1
    12b6:	0f 92       	push	r0
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	0f 92       	push	r0
    12bc:	11 24       	eor	r1, r1
    12be:	2f 93       	push	r18
    12c0:	3f 93       	push	r19
    12c2:	4f 93       	push	r20
    12c4:	5f 93       	push	r21
    12c6:	6f 93       	push	r22
    12c8:	7f 93       	push	r23
    12ca:	8f 93       	push	r24
    12cc:	9f 93       	push	r25
    12ce:	af 93       	push	r26
    12d0:	bf 93       	push	r27
    12d2:	ef 93       	push	r30
    12d4:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    12d6:	6a de       	rcall	.-812    	; 0xfac <asm_break>
}

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
	s_bad_interrupt();
}
    12d8:	ff 91       	pop	r31
    12da:	ef 91       	pop	r30
    12dc:	bf 91       	pop	r27
    12de:	af 91       	pop	r26
    12e0:	9f 91       	pop	r25
    12e2:	8f 91       	pop	r24
    12e4:	7f 91       	pop	r23
    12e6:	6f 91       	pop	r22
    12e8:	5f 91       	pop	r21
    12ea:	4f 91       	pop	r20
    12ec:	3f 91       	pop	r19
    12ee:	2f 91       	pop	r18
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <__vector_13>:

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	8f 93       	push	r24
    1306:	9f 93       	push	r25
    1308:	af 93       	push	r26
    130a:	bf 93       	push	r27
	++g_timer_abs_msb;
    130c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <g_timer_abs_msb>
    1310:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <g_timer_abs_msb+0x1>
    1314:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <g_timer_abs_msb+0x2>
    1318:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <g_timer_abs_msb+0x3>
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	a1 1d       	adc	r26, r1
    1320:	b1 1d       	adc	r27, r1
    1322:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <g_timer_abs_msb>
    1326:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <g_timer_abs_msb+0x1>
    132a:	a0 93 de 01 	sts	0x01DE, r26	; 0x8001de <g_timer_abs_msb+0x2>
    132e:	b0 93 df 01 	sts	0x01DF, r27	; 0x8001df <g_timer_abs_msb+0x3>
}
    1332:	bf 91       	pop	r27
    1334:	af 91       	pop	r26
    1336:	9f 91       	pop	r25
    1338:	8f 91       	pop	r24
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <__vector_14>:

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	2f 93       	push	r18
    1350:	3f 93       	push	r19
    1352:	4f 93       	push	r20
    1354:	5f 93       	push	r21
    1356:	6f 93       	push	r22
    1358:	7f 93       	push	r23
    135a:	8f 93       	push	r24
    135c:	9f 93       	push	r25
    135e:	af 93       	push	r26
    1360:	bf 93       	push	r27
    1362:	ef 93       	push	r30
    1364:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1366:	22 de       	rcall	.-956    	; 0xfac <asm_break>
}

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
	s_bad_interrupt();
}
    1368:	ff 91       	pop	r31
    136a:	ef 91       	pop	r30
    136c:	bf 91       	pop	r27
    136e:	af 91       	pop	r26
    1370:	9f 91       	pop	r25
    1372:	8f 91       	pop	r24
    1374:	7f 91       	pop	r23
    1376:	6f 91       	pop	r22
    1378:	5f 91       	pop	r21
    137a:	4f 91       	pop	r20
    137c:	3f 91       	pop	r19
    137e:	2f 91       	pop	r18
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_15>:

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	2f 93       	push	r18
    1396:	3f 93       	push	r19
    1398:	4f 93       	push	r20
    139a:	5f 93       	push	r21
    139c:	6f 93       	push	r22
    139e:	7f 93       	push	r23
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	af 93       	push	r26
    13a6:	bf 93       	push	r27
    13a8:	ef 93       	push	r30
    13aa:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    13ac:	ff dd       	rcall	.-1026   	; 0xfac <asm_break>
}

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
	s_bad_interrupt();
}
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	0f 90       	pop	r0
    13cc:	1f 90       	pop	r1
    13ce:	18 95       	reti

000013d0 <__vector_16>:

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
    13d0:	1f 92       	push	r1
    13d2:	0f 92       	push	r0
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	0f 92       	push	r0
    13d8:	11 24       	eor	r1, r1
    13da:	2f 93       	push	r18
    13dc:	3f 93       	push	r19
    13de:	4f 93       	push	r20
    13e0:	5f 93       	push	r21
    13e2:	6f 93       	push	r22
    13e4:	7f 93       	push	r23
    13e6:	8f 93       	push	r24
    13e8:	9f 93       	push	r25
    13ea:	af 93       	push	r26
    13ec:	bf 93       	push	r27
    13ee:	ef 93       	push	r30
    13f0:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    13f2:	dc dd       	rcall	.-1096   	; 0xfac <asm_break>
}

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
	s_bad_interrupt();
}
    13f4:	ff 91       	pop	r31
    13f6:	ef 91       	pop	r30
    13f8:	bf 91       	pop	r27
    13fa:	af 91       	pop	r26
    13fc:	9f 91       	pop	r25
    13fe:	8f 91       	pop	r24
    1400:	7f 91       	pop	r23
    1402:	6f 91       	pop	r22
    1404:	5f 91       	pop	r21
    1406:	4f 91       	pop	r20
    1408:	3f 91       	pop	r19
    140a:	2f 91       	pop	r18
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <__vector_17>:

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	2f 93       	push	r18
    1422:	3f 93       	push	r19
    1424:	4f 93       	push	r20
    1426:	5f 93       	push	r21
    1428:	6f 93       	push	r22
    142a:	7f 93       	push	r23
    142c:	8f 93       	push	r24
    142e:	9f 93       	push	r25
    1430:	af 93       	push	r26
    1432:	bf 93       	push	r27
    1434:	ef 93       	push	r30
    1436:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1438:	b9 dd       	rcall	.-1166   	; 0xfac <asm_break>
}

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
	s_bad_interrupt();
}
    143a:	ff 91       	pop	r31
    143c:	ef 91       	pop	r30
    143e:	bf 91       	pop	r27
    1440:	af 91       	pop	r26
    1442:	9f 91       	pop	r25
    1444:	8f 91       	pop	r24
    1446:	7f 91       	pop	r23
    1448:	6f 91       	pop	r22
    144a:	5f 91       	pop	r21
    144c:	4f 91       	pop	r20
    144e:	3f 91       	pop	r19
    1450:	2f 91       	pop	r18
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	0f 90       	pop	r0
    1458:	1f 90       	pop	r1
    145a:	18 95       	reti

0000145c <__vector_18>:

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
    145c:	1f 92       	push	r1
    145e:	0f 92       	push	r0
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	0f 92       	push	r0
    1464:	11 24       	eor	r1, r1
    1466:	2f 93       	push	r18
    1468:	3f 93       	push	r19
    146a:	4f 93       	push	r20
    146c:	5f 93       	push	r21
    146e:	6f 93       	push	r22
    1470:	7f 93       	push	r23
    1472:	8f 93       	push	r24
    1474:	9f 93       	push	r25
    1476:	af 93       	push	r26
    1478:	bf 93       	push	r27
    147a:	ef 93       	push	r30
    147c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    147e:	96 dd       	rcall	.-1236   	; 0xfac <asm_break>
}

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
	s_bad_interrupt();
}
    1480:	ff 91       	pop	r31
    1482:	ef 91       	pop	r30
    1484:	bf 91       	pop	r27
    1486:	af 91       	pop	r26
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	7f 91       	pop	r23
    148e:	6f 91       	pop	r22
    1490:	5f 91       	pop	r21
    1492:	4f 91       	pop	r20
    1494:	3f 91       	pop	r19
    1496:	2f 91       	pop	r18
    1498:	0f 90       	pop	r0
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	0f 90       	pop	r0
    149e:	1f 90       	pop	r1
    14a0:	18 95       	reti

000014a2 <__vector_19>:

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
    14a2:	1f 92       	push	r1
    14a4:	0f 92       	push	r0
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	0f 92       	push	r0
    14aa:	11 24       	eor	r1, r1
    14ac:	2f 93       	push	r18
    14ae:	3f 93       	push	r19
    14b0:	4f 93       	push	r20
    14b2:	5f 93       	push	r21
    14b4:	6f 93       	push	r22
    14b6:	7f 93       	push	r23
    14b8:	8f 93       	push	r24
    14ba:	9f 93       	push	r25
    14bc:	af 93       	push	r26
    14be:	bf 93       	push	r27
    14c0:	ef 93       	push	r30
    14c2:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    14c4:	73 dd       	rcall	.-1306   	; 0xfac <asm_break>
}

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
	s_bad_interrupt();
}
    14c6:	ff 91       	pop	r31
    14c8:	ef 91       	pop	r30
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	7f 91       	pop	r23
    14d4:	6f 91       	pop	r22
    14d6:	5f 91       	pop	r21
    14d8:	4f 91       	pop	r20
    14da:	3f 91       	pop	r19
    14dc:	2f 91       	pop	r18
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0
    14e4:	1f 90       	pop	r1
    14e6:	18 95       	reti

000014e8 <__vector_20>:

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
    14e8:	1f 92       	push	r1
    14ea:	0f 92       	push	r0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	0f 92       	push	r0
    14f0:	11 24       	eor	r1, r1
    14f2:	2f 93       	push	r18
    14f4:	3f 93       	push	r19
    14f6:	4f 93       	push	r20
    14f8:	5f 93       	push	r21
    14fa:	6f 93       	push	r22
    14fc:	7f 93       	push	r23
    14fe:	8f 93       	push	r24
    1500:	9f 93       	push	r25
    1502:	af 93       	push	r26
    1504:	bf 93       	push	r27
    1506:	ef 93       	push	r30
    1508:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    150a:	50 dd       	rcall	.-1376   	; 0xfac <asm_break>
}

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
	s_bad_interrupt();
}
    150c:	ff 91       	pop	r31
    150e:	ef 91       	pop	r30
    1510:	bf 91       	pop	r27
    1512:	af 91       	pop	r26
    1514:	9f 91       	pop	r25
    1516:	8f 91       	pop	r24
    1518:	7f 91       	pop	r23
    151a:	6f 91       	pop	r22
    151c:	5f 91       	pop	r21
    151e:	4f 91       	pop	r20
    1520:	3f 91       	pop	r19
    1522:	2f 91       	pop	r18
    1524:	0f 90       	pop	r0
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	0f 90       	pop	r0
    152a:	1f 90       	pop	r1
    152c:	18 95       	reti

0000152e <__vector_21__bottom>:
	__vector_21__bottom(reason, adc_val, adc_ldr_last, adc_temp_last);
}

/* do not static this function to avoid code inlining that would inherit many push operations in the critical section */
void __vector_21__bottom(uint8_t reason, uint16_t adc_val, uint16_t adc_ldr_last, uint16_t adc_temp_last)
{
    152e:	cf 92       	push	r12
    1530:	df 92       	push	r13
    1532:	ef 92       	push	r14
    1534:	ff 92       	push	r15
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	eb 01       	movw	r28, r22
	/* Low pass filtering and enhancing the data depth */
	if (reason == ADC_STATE_VLD_LDR) {
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	e1 f5       	brne	.+120    	; 0x15b8 <__vector_21__bottom+0x8a>
		float calc = g_adc_ldr ?  0.90f * g_adc_ldr + 0.10f * adc_val : adc_val;			// load with initial value if none is set before
    1540:	c0 90 d7 01 	lds	r12, 0x01D7	; 0x8001d7 <g_adc_ldr>
    1544:	d0 90 d8 01 	lds	r13, 0x01D8	; 0x8001d8 <g_adc_ldr+0x1>
    1548:	e0 90 d9 01 	lds	r14, 0x01D9	; 0x8001d9 <g_adc_ldr+0x2>
    154c:	f0 90 da 01 	lds	r15, 0x01DA	; 0x8001da <g_adc_ldr+0x3>
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	a9 01       	movw	r20, r18
    1556:	c7 01       	movw	r24, r14
    1558:	b6 01       	movw	r22, r12
    155a:	0e 94 b9 13 	call	0x2772	; 0x2772 <__cmpsf2>
    155e:	88 23       	and	r24, r24
    1560:	e1 f0       	breq	.+56     	; 0x159a <__vector_21__bottom+0x6c>
    1562:	26 e6       	ldi	r18, 0x66	; 102
    1564:	36 e6       	ldi	r19, 0x66	; 102
    1566:	46 e6       	ldi	r20, 0x66	; 102
    1568:	5f e3       	ldi	r21, 0x3F	; 63
    156a:	c7 01       	movw	r24, r14
    156c:	b6 01       	movw	r22, r12
    156e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__mulsf3>
    1572:	6b 01       	movw	r12, r22
    1574:	7c 01       	movw	r14, r24
    1576:	be 01       	movw	r22, r28
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 56 14 	call	0x28ac	; 0x28ac <__floatunsisf>
    1580:	2d ec       	ldi	r18, 0xCD	; 205
    1582:	3c ec       	ldi	r19, 0xCC	; 204
    1584:	4c ec       	ldi	r20, 0xCC	; 204
    1586:	5d e3       	ldi	r21, 0x3D	; 61
    1588:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__mulsf3>
    158c:	9b 01       	movw	r18, r22
    158e:	ac 01       	movw	r20, r24
    1590:	c7 01       	movw	r24, r14
    1592:	b6 01       	movw	r22, r12
    1594:	0e 94 55 13 	call	0x26aa	; 0x26aa <__addsf3>
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <__vector_21__bottom+0x76>
    159a:	be 01       	movw	r22, r28
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 56 14 	call	0x28ac	; 0x28ac <__floatunsisf>

		cli();
    15a4:	f8 94       	cli
		g_adc_ldr = calc;
    15a6:	60 93 d7 01 	sts	0x01D7, r22	; 0x8001d7 <g_adc_ldr>
    15aa:	70 93 d8 01 	sts	0x01D8, r23	; 0x8001d8 <g_adc_ldr+0x1>
    15ae:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <g_adc_ldr+0x2>
    15b2:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <g_adc_ldr+0x3>
    15b6:	3d c0       	rjmp	.+122    	; 0x1632 <__vector_21__bottom+0x104>

	} else if (reason == ADC_STATE_VLD_TEMP) {
    15b8:	83 30       	cpi	r24, 0x03	; 3
    15ba:	d9 f5       	brne	.+118    	; 0x1632 <__vector_21__bottom+0x104>
		float calc = g_adc_temp ?  0.9995f * g_adc_temp + 0.0005f * adc_val : adc_val;		// load with initial value if none is set before
    15bc:	c0 90 cf 01 	lds	r12, 0x01CF	; 0x8001cf <g_adc_temp>
    15c0:	d0 90 d0 01 	lds	r13, 0x01D0	; 0x8001d0 <g_adc_temp+0x1>
    15c4:	e0 90 d1 01 	lds	r14, 0x01D1	; 0x8001d1 <g_adc_temp+0x2>
    15c8:	f0 90 d2 01 	lds	r15, 0x01D2	; 0x8001d2 <g_adc_temp+0x3>
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	a9 01       	movw	r20, r18
    15d2:	c7 01       	movw	r24, r14
    15d4:	b6 01       	movw	r22, r12
    15d6:	0e 94 b9 13 	call	0x2772	; 0x2772 <__cmpsf2>
    15da:	88 23       	and	r24, r24
    15dc:	e1 f0       	breq	.+56     	; 0x1616 <__vector_21__bottom+0xe8>
    15de:	2b e3       	ldi	r18, 0x3B	; 59
    15e0:	3f ed       	ldi	r19, 0xDF	; 223
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	c7 01       	movw	r24, r14
    15e8:	b6 01       	movw	r22, r12
    15ea:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__mulsf3>
    15ee:	6b 01       	movw	r12, r22
    15f0:	7c 01       	movw	r14, r24
    15f2:	be 01       	movw	r22, r28
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 56 14 	call	0x28ac	; 0x28ac <__floatunsisf>
    15fc:	2f e6       	ldi	r18, 0x6F	; 111
    15fe:	32 e1       	ldi	r19, 0x12	; 18
    1600:	43 e0       	ldi	r20, 0x03	; 3
    1602:	5a e3       	ldi	r21, 0x3A	; 58
    1604:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__mulsf3>
    1608:	9b 01       	movw	r18, r22
    160a:	ac 01       	movw	r20, r24
    160c:	c7 01       	movw	r24, r14
    160e:	b6 01       	movw	r22, r12
    1610:	0e 94 55 13 	call	0x26aa	; 0x26aa <__addsf3>
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <__vector_21__bottom+0xf2>
    1616:	be 01       	movw	r22, r28
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 56 14 	call	0x28ac	; 0x28ac <__floatunsisf>

		cli();
    1620:	f8 94       	cli
		g_adc_temp = calc;
    1622:	60 93 cf 01 	sts	0x01CF, r22	; 0x8001cf <g_adc_temp>
    1626:	70 93 d0 01 	sts	0x01D0, r23	; 0x8001d0 <g_adc_temp+0x1>
    162a:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <g_adc_temp+0x2>
    162e:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <g_adc_temp+0x3>
	}
}
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	08 95       	ret

00001640 <__vector_21>:
{	/* USART, TX - Complete */
	s_bad_interrupt();
}

ISR(__vector_21, ISR_BLOCK)
{	/* ADC */
    1640:	1f 92       	push	r1
    1642:	0f 92       	push	r0
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	0f 92       	push	r0
    1648:	11 24       	eor	r1, r1
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	1f 93       	push	r17
    1654:	2f 93       	push	r18
    1656:	3f 93       	push	r19
    1658:	4f 93       	push	r20
    165a:	5f 93       	push	r21
    165c:	6f 93       	push	r22
    165e:	7f 93       	push	r23
    1660:	8f 93       	push	r24
    1662:	9f 93       	push	r25
    1664:	af 93       	push	r26
    1666:	bf 93       	push	r27
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	ef 93       	push	r30
    166e:	ff 93       	push	r31
	uint16_t adc_val;
	uint8_t  reason = g_adc_state;
    1670:	10 91 db 01 	lds	r17, 0x01DB	; 0x8001db <g_adc_state>

	/* CLI part */
	adc_val  = ADCL;
    1674:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	adc_val |= ADCH << 8;
    1678:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    167c:	d0 e0       	ldi	r29, 0x00	; 0
    167e:	d8 2b       	or	r29, r24

	//TIFR1 |= _BV(TOV1);							// Reset Timer1 overflow status bit (no ISR for TOV1 activated!)

	switch (g_adc_state) {
    1680:	11 30       	cpi	r17, 0x01	; 1
    1682:	41 f0       	breq	.+16     	; 0x1694 <__vector_21+0x54>
    1684:	18 f0       	brcs	.+6      	; 0x168c <__vector_21+0x4c>
    1686:	12 30       	cpi	r17, 0x02	; 2
    1688:	61 f0       	breq	.+24     	; 0x16a2 <__vector_21+0x62>
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <__vector_21+0x6a>
		case ADC_STATE_PRE_LDR:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_LDR;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <g_adc_state>
		break;
    1692:	10 c0       	rjmp	.+32     	; 0x16b4 <__vector_21+0x74>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    1694:	88 ec       	ldi	r24, 0xC8	; 200
    1696:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		case ADC_STATE_VLD_LDR:
		adc_set_admux(ADC_MUX_TEMPSENSE | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_TEMP;
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <g_adc_state>
		break;
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <__vector_21+0x74>

		case ADC_STATE_PRE_TEMP:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_TEMP;
    16a2:	83 e0       	ldi	r24, 0x03	; 3
    16a4:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <g_adc_state>
		break;
    16a8:	05 c0       	rjmp	.+10     	; 0x16b4 <__vector_21+0x74>
    16aa:	80 ec       	ldi	r24, 0xC0	; 192
    16ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		case ADC_STATE_VLD_TEMP:
		// fall-through

		default:
		adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_LDR;
    16b0:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <g_adc_state>
	}

	uint16_t adc_ldr_last  = g_adc_ldr;
    16b4:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <g_adc_ldr>
    16b8:	70 91 d8 01 	lds	r23, 0x01D8	; 0x8001d8 <g_adc_ldr+0x1>
    16bc:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <g_adc_ldr+0x2>
    16c0:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <g_adc_ldr+0x3>
    16c4:	0e 94 2a 14 	call	0x2854	; 0x2854 <__fixunssfsi>
    16c8:	6b 01       	movw	r12, r22
    16ca:	7c 01       	movw	r14, r24
	uint16_t adc_temp_last = g_adc_temp;
    16cc:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <g_adc_temp>
    16d0:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <g_adc_temp+0x1>
    16d4:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <g_adc_temp+0x2>
    16d8:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <g_adc_temp+0x3>
    16dc:	0e 94 2a 14 	call	0x2854	; 0x2854 <__fixunssfsi>

	/* SEI part */
	sei();
    16e0:	78 94       	sei

	__vector_21__bottom(reason, adc_val, adc_ldr_last, adc_temp_last);
    16e2:	9b 01       	movw	r18, r22
    16e4:	a6 01       	movw	r20, r12
    16e6:	be 01       	movw	r22, r28
    16e8:	81 2f       	mov	r24, r17
    16ea:	21 df       	rcall	.-446    	; 0x152e <__vector_21__bottom>
}
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	bf 91       	pop	r27
    16f6:	af 91       	pop	r26
    16f8:	9f 91       	pop	r25
    16fa:	8f 91       	pop	r24
    16fc:	7f 91       	pop	r23
    16fe:	6f 91       	pop	r22
    1700:	5f 91       	pop	r21
    1702:	4f 91       	pop	r20
    1704:	3f 91       	pop	r19
    1706:	2f 91       	pop	r18
    1708:	1f 91       	pop	r17
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	df 90       	pop	r13
    1710:	cf 90       	pop	r12
    1712:	0f 90       	pop	r0
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	0f 90       	pop	r0
    1718:	1f 90       	pop	r1
    171a:	18 95       	reti

0000171c <__vector_22>:
		g_adc_temp = calc;
	}
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
    171c:	1f 92       	push	r1
    171e:	0f 92       	push	r0
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	0f 92       	push	r0
    1724:	11 24       	eor	r1, r1
    1726:	2f 93       	push	r18
    1728:	3f 93       	push	r19
    172a:	4f 93       	push	r20
    172c:	5f 93       	push	r21
    172e:	6f 93       	push	r22
    1730:	7f 93       	push	r23
    1732:	8f 93       	push	r24
    1734:	9f 93       	push	r25
    1736:	af 93       	push	r26
    1738:	bf 93       	push	r27
    173a:	ef 93       	push	r30
    173c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    173e:	36 dc       	rcall	.-1940   	; 0xfac <asm_break>
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
	s_bad_interrupt();
}
    1740:	ff 91       	pop	r31
    1742:	ef 91       	pop	r30
    1744:	bf 91       	pop	r27
    1746:	af 91       	pop	r26
    1748:	9f 91       	pop	r25
    174a:	8f 91       	pop	r24
    174c:	7f 91       	pop	r23
    174e:	6f 91       	pop	r22
    1750:	5f 91       	pop	r21
    1752:	4f 91       	pop	r20
    1754:	3f 91       	pop	r19
    1756:	2f 91       	pop	r18
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	0f 90       	pop	r0
    175e:	1f 90       	pop	r1
    1760:	18 95       	reti

00001762 <__vector_23>:

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	2f 93       	push	r18
    176e:	3f 93       	push	r19
    1770:	4f 93       	push	r20
    1772:	5f 93       	push	r21
    1774:	6f 93       	push	r22
    1776:	7f 93       	push	r23
    1778:	8f 93       	push	r24
    177a:	9f 93       	push	r25
    177c:	af 93       	push	r26
    177e:	bf 93       	push	r27
    1780:	ef 93       	push	r30
    1782:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1784:	13 dc       	rcall	.-2010   	; 0xfac <asm_break>
}

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
	s_bad_interrupt();
}
    1786:	ff 91       	pop	r31
    1788:	ef 91       	pop	r30
    178a:	bf 91       	pop	r27
    178c:	af 91       	pop	r26
    178e:	9f 91       	pop	r25
    1790:	8f 91       	pop	r24
    1792:	7f 91       	pop	r23
    1794:	6f 91       	pop	r22
    1796:	5f 91       	pop	r21
    1798:	4f 91       	pop	r20
    179a:	3f 91       	pop	r19
    179c:	2f 91       	pop	r18
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	0f 90       	pop	r0
    17a4:	1f 90       	pop	r1
    17a6:	18 95       	reti

000017a8 <__vector_24>:

ISR(__vector_24, ISR_BLOCK)
{	/* TWI */
    17a8:	1f 92       	push	r1
    17aa:	0f 92       	push	r0
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	0f 92       	push	r0
    17b0:	11 24       	eor	r1, r1
    17b2:	2f 93       	push	r18
    17b4:	3f 93       	push	r19
    17b6:	4f 93       	push	r20
    17b8:	5f 93       	push	r21
    17ba:	6f 93       	push	r22
    17bc:	7f 93       	push	r23
    17be:	8f 93       	push	r24
    17c0:	9f 93       	push	r25
    17c2:	af 93       	push	r26
    17c4:	bf 93       	push	r27
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b11111 << TWS3);
    17ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	uint8_t twd = TWDR;
    17d2:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	uint8_t twcr_cur = TWCR;
    17d6:	cc eb       	ldi	r28, 0xBC	; 188
    17d8:	d0 e0       	ldi	r29, 0x00	; 0
    17da:	48 81       	ld	r20, Y

	uint8_t twcr_new = __vector_24__bottom(tws, twd, twcr_cur);
    17dc:	88 7f       	andi	r24, 0xF8	; 248
    17de:	a8 d3       	rcall	.+1872   	; 0x1f30 <__vector_24__bottom>
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
    17e0:	85 68       	ori	r24, 0x85	; 133
    17e2:	88 83       	st	Y, r24
}
    17e4:	ff 91       	pop	r31
    17e6:	ef 91       	pop	r30
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	bf 91       	pop	r27
    17ee:	af 91       	pop	r26
    17f0:	9f 91       	pop	r25
    17f2:	8f 91       	pop	r24
    17f4:	7f 91       	pop	r23
    17f6:	6f 91       	pop	r22
    17f8:	5f 91       	pop	r21
    17fa:	4f 91       	pop	r20
    17fc:	3f 91       	pop	r19
    17fe:	2f 91       	pop	r18
    1800:	0f 90       	pop	r0
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	0f 90       	pop	r0
    1806:	1f 90       	pop	r1
    1808:	18 95       	reti

0000180a <__vector_25>:

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
    180a:	1f 92       	push	r1
    180c:	0f 92       	push	r0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	0f 92       	push	r0
    1812:	11 24       	eor	r1, r1
    1814:	2f 93       	push	r18
    1816:	3f 93       	push	r19
    1818:	4f 93       	push	r20
    181a:	5f 93       	push	r21
    181c:	6f 93       	push	r22
    181e:	7f 93       	push	r23
    1820:	8f 93       	push	r24
    1822:	9f 93       	push	r25
    1824:	af 93       	push	r26
    1826:	bf 93       	push	r27
    1828:	ef 93       	push	r30
    182a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    182c:	bf db       	rcall	.-2178   	; 0xfac <asm_break>
}

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
	s_bad_interrupt();
}
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	bf 91       	pop	r27
    1834:	af 91       	pop	r26
    1836:	9f 91       	pop	r25
    1838:	8f 91       	pop	r24
    183a:	7f 91       	pop	r23
    183c:	6f 91       	pop	r22
    183e:	5f 91       	pop	r21
    1840:	4f 91       	pop	r20
    1842:	3f 91       	pop	r19
    1844:	2f 91       	pop	r18
    1846:	0f 90       	pop	r0
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	0f 90       	pop	r0
    184c:	1f 90       	pop	r1
    184e:	18 95       	reti

00001850 <lcd_bus_read_status>:
		} else if (y >= GFX_MONO_LCD_HEIGHT) {
		return (uint8_t) GFX_MONO_LCD_HEIGHT - 1;
		} else {
		return (uint8_t) y;
	}
}
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	1f 92       	push	r1
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	8f b7       	in	r24, 0x3f	; 63
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	f8 94       	cli
    1860:	99 81       	ldd	r25, Y+1	; 0x01
    1862:	8f ef       	ldi	r24, 0xFF	; 255
    1864:	8b b9       	out	0x0b, r24	; 11
    1866:	1a b8       	out	0x0a, r1	; 10
    1868:	28 98       	cbi	0x05, 0	; 5
    186a:	2c 9a       	sbi	0x05, 4	; 5
    186c:	2d 9a       	sbi	0x05, 5	; 5
    186e:	2d 98       	cbi	0x05, 5	; 5
    1870:	89 b1       	in	r24, 0x09	; 9
    1872:	9f bf       	out	0x3f, r25	; 63
    1874:	0f 90       	pop	r0
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	08 95       	ret

0000187c <lcd_bus_write_cmd>:
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	1f 92       	push	r1
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	9f b7       	in	r25, 0x3f	; 63
    1888:	99 83       	std	Y+1, r25	; 0x01
    188a:	f8 94       	cli
    188c:	99 81       	ldd	r25, Y+1	; 0x01
    188e:	8b b9       	out	0x0b, r24	; 11
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	8a b9       	out	0x0a, r24	; 10
    1894:	28 98       	cbi	0x05, 0	; 5
    1896:	2c 98       	cbi	0x05, 4	; 5
    1898:	2d 9a       	sbi	0x05, 5	; 5
    189a:	2d 98       	cbi	0x05, 5	; 5
    189c:	9f bf       	out	0x3f, r25	; 63
    189e:	0f 90       	pop	r0
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <lcd_bus_write_ram>:
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	1f 92       	push	r1
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	9f b7       	in	r25, 0x3f	; 63
    18b2:	99 83       	std	Y+1, r25	; 0x01
    18b4:	f8 94       	cli
    18b6:	99 81       	ldd	r25, Y+1	; 0x01
    18b8:	8b b9       	out	0x0b, r24	; 11
    18ba:	8f ef       	ldi	r24, 0xFF	; 255
    18bc:	8a b9       	out	0x0a, r24	; 10
    18be:	28 9a       	sbi	0x05, 0	; 5
    18c0:	2c 98       	cbi	0x05, 4	; 5
    18c2:	2d 9a       	sbi	0x05, 5	; 5
    18c4:	2d 98       	cbi	0x05, 5	; 5
    18c6:	9f bf       	out	0x3f, r25	; 63
    18c8:	0f 90       	pop	r0
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <lcd_bus_read_ram>:
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	1f 92       	push	r1
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	8f b7       	in	r24, 0x3f	; 63
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	f8 94       	cli
    18e0:	99 81       	ldd	r25, Y+1	; 0x01
    18e2:	8f ef       	ldi	r24, 0xFF	; 255
    18e4:	8b b9       	out	0x0b, r24	; 11
    18e6:	1a b8       	out	0x0a, r1	; 10
    18e8:	28 9a       	sbi	0x05, 0	; 5
    18ea:	2c 9a       	sbi	0x05, 4	; 5
    18ec:	2d 9a       	sbi	0x05, 5	; 5
    18ee:	2d 98       	cbi	0x05, 5	; 5
    18f0:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <s_lcd_ram_read_nonvalid>
    18f4:	88 23       	and	r24, r24
    18f6:	19 f0       	breq	.+6      	; 0x18fe <lcd_bus_read_ram+0x2e>
    18f8:	89 b1       	in	r24, 0x09	; 9
    18fa:	2d 9a       	sbi	0x05, 5	; 5
    18fc:	2d 98       	cbi	0x05, 5	; 5
    18fe:	89 b1       	in	r24, 0x09	; 9
    1900:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <s_lcd_ram_read_nonvalid>
    1904:	9f bf       	out	0x3f, r25	; 63
    1906:	0f 90       	pop	r0
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	08 95       	ret

0000190e <lcd_enable>:


void lcd_enable(uint8_t on)
{
	if (!on) {
    190e:	81 11       	cpse	r24, r1
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <lcd_enable+0xa>
		lcd_bus_write_cmd(0b10101110);									// Disable DC[2] (Display)
    1912:	8e ea       	ldi	r24, 0xAE	; 174
    1914:	b3 cf       	rjmp	.-154    	; 0x187c <lcd_bus_write_cmd>
    1916:	08 95       	ret

	} else {
		lcd_bus_write_cmd(0b00101000 | C_LCD_PWR_CTRL);					// Set Power Control
    1918:	8d e2       	ldi	r24, 0x2D	; 45
    191a:	b0 df       	rcall	.-160    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00100000 | C_LCD_MR_TC);					// Set MR and TC
    191c:	84 e2       	ldi	r24, 0x24	; 36
    191e:	ae df       	rcall	.-164    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b11101000 | C_LCD_BIASRATIO);				// Set Bias Ratio
    1920:	8a ee       	ldi	r24, 0xEA	; 234
    1922:	ac df       	rcall	.-168    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10000001);									// Set Gain and PM (A)
    1924:	81 e8       	ldi	r24, 0x81	; 129
    1926:	aa df       	rcall	.-172    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(C_LCD_GAIN_PM);								// Set Gain and PM (B)
    1928:	8c e9       	ldi	r24, 0x9C	; 156
    192a:	a8 df       	rcall	.-176    	; 0x187c <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b11000000 | C_LCD_MAPPING);					// Set Mapping
    192c:	88 ec       	ldi	r24, 0xC8	; 200
    192e:	a6 df       	rcall	.-180    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10001000 | C_LCD_AC);						// Set RAM Address Control
    1930:	88 e8       	ldi	r24, 0x88	; 136
    1932:	a4 df       	rcall	.-184    	; 0x187c <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b01000000);									// Set Start Line (0)
    1934:	80 e4       	ldi	r24, 0x40	; 64
    1936:	a2 df       	rcall	.-188    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10010000);									// Set Fixed Lines (0)
    1938:	80 e9       	ldi	r24, 0x90	; 144
    193a:	a0 df       	rcall	.-192    	; 0x187c <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b10110000);									// Set Page Address (0)
    193c:	80 eb       	ldi	r24, 0xB0	; 176
    193e:	9e df       	rcall	.-196    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00000000);									// Set Column Address LSB (0)
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	9c df       	rcall	.-200    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000);									// Set Column Address MSB (0)
    1944:	80 e1       	ldi	r24, 0x10	; 16
    1946:	9a df       	rcall	.-204    	; 0x187c <lcd_bus_write_cmd>
		s_lcd_ram_read_nonvalid = true;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <s_lcd_ram_read_nonvalid>

		lcd_bus_write_cmd(0b11101111);									// Set Cursor Mode
    194e:	8f ee       	ldi	r24, 0xEF	; 239
    1950:	95 df       	rcall	.-214    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b11101110);									// Reset Cursor Mode (now CR := CA)
    1952:	8e ee       	ldi	r24, 0xEE	; 238
    1954:	93 df       	rcall	.-218    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10100100);									// Disable DC[1] (all pixel on)
    1956:	84 ea       	ldi	r24, 0xA4	; 164
    1958:	91 df       	rcall	.-222    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10100110);									// Disable DC[0] (all pixel inverse)
    195a:	86 ea       	ldi	r24, 0xA6	; 166
    195c:	8f df       	rcall	.-226    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10101111);									// Enable  DC[2] (Display)
    195e:	8f ea       	ldi	r24, 0xAF	; 175
    1960:	8d cf       	rjmp	.-230    	; 0x187c <lcd_bus_write_cmd>
    1962:	08 95       	ret

00001964 <lcd_page_set>:
}

void lcd_page_set(uint8_t page)
{
	if ((0 <= page && page) < (GFX_MONO_LCD_PAGES)) {
		lcd_bus_write_cmd(0b10110000 | page);					// Set Page Address
    1964:	80 6b       	ori	r24, 0xB0	; 176
    1966:	8a df       	rcall	.-236    	; 0x187c <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <s_lcd_ram_read_nonvalid>
    196e:	08 95       	ret

00001970 <lcd_col_set>:
	}
}

void lcd_col_set(uint8_t col)
{
    1970:	cf 93       	push	r28
	if ((0 <= col) && (col < GFX_MONO_LCD_WIDTH)) {
    1972:	80 3f       	cpi	r24, 0xF0	; 240
    1974:	58 f4       	brcc	.+22     	; 0x198c <lcd_col_set+0x1c>
    1976:	c8 2f       	mov	r28, r24
		lcd_bus_write_cmd(0b00000000 | ( col       & 0x0f));	// Set Column Address LSB
    1978:	8f 70       	andi	r24, 0x0F	; 15
    197a:	80 df       	rcall	.-256    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000 | ((col >> 4) & 0x0f));	// Set Column Address MSB
    197c:	8c 2f       	mov	r24, r28
    197e:	82 95       	swap	r24
    1980:	8f 70       	andi	r24, 0x0F	; 15
    1982:	80 61       	ori	r24, 0x10	; 16
    1984:	7b df       	rcall	.-266    	; 0x187c <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <s_lcd_ram_read_nonvalid>
	}
}
    198c:	cf 91       	pop	r28
    198e:	08 95       	ret

00001990 <lcd_cr>:

void lcd_cr(void)
{
	lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	74 df       	rcall	.-280    	; 0x187c <lcd_bus_write_cmd>
	lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    1994:	80 e1       	ldi	r24, 0x10	; 16
    1996:	72 df       	rcall	.-284    	; 0x187c <lcd_bus_write_cmd>

	s_lcd_ram_read_nonvalid = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <s_lcd_ram_read_nonvalid>
    199e:	08 95       	ret

000019a0 <lcd_home>:
}

void lcd_home(void)
{
	lcd_bus_write_cmd(0b10110000);								// Set Page Address (0)
    19a0:	80 eb       	ldi	r24, 0xB0	; 176
    19a2:	6c df       	rcall	.-296    	; 0x187c <lcd_bus_write_cmd>
	lcd_cr();
    19a4:	f5 cf       	rjmp	.-22     	; 0x1990 <lcd_cr>
    19a6:	08 95       	ret

000019a8 <lcd_cls>:
}

void lcd_cls(void)
{
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    19ae:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    19b0:	10 ef       	ldi	r17, 0xF0	; 240

void lcd_cls(void)
{
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
    19b2:	8d 2f       	mov	r24, r29
    19b4:	80 6b       	ori	r24, 0xB0	; 176
    19b6:	62 df       	rcall	.-316    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	60 df       	rcall	.-320    	; 0x187c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    19bc:	80 e1       	ldi	r24, 0x10	; 16
    19be:	5e df       	rcall	.-324    	; 0x187c <lcd_bus_write_cmd>
    19c0:	c1 2f       	mov	r28, r17

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
			lcd_bus_write_ram(0);
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	70 df       	rcall	.-288    	; 0x18a6 <lcd_bus_write_ram>
    19c6:	c1 50       	subi	r28, 0x01	; 1
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
    19c8:	e1 f7       	brne	.-8      	; 0x19c2 <lcd_cls+0x1a>
}

void lcd_cls(void)
{
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    19ca:	df 5f       	subi	r29, 0xFF	; 255
    19cc:	d0 31       	cpi	r29, 0x10	; 16
    19ce:	89 f7       	brne	.-30     	; 0x19b2 <lcd_cls+0xa>
			lcd_bus_write_ram(0);
		}
	}	

	/* Set cursor to home position */
	lcd_home();
    19d0:	e7 df       	rcall	.-50     	; 0x19a0 <lcd_home>
}
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	08 95       	ret

000019da <lcd_animation_prepare>:

	gfx_mono_draw_string(buf, 120, 65, &sysfont);
}

void lcd_animation_prepare(void)
{
    19da:	cf 92       	push	r12
    19dc:	df 92       	push	r13
    19de:	ef 92       	push	r14
    19e0:	ff 92       	push	r15
    19e2:	0f 93       	push	r16
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
	int idx;

	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
    19ea:	83 ec       	ldi	r24, 0xC3	; 195
    19ec:	9f ef       	ldi	r25, 0xFF	; 255
    19ee:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <s_animation_train_origin+0x1>
    19f2:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <s_animation_train_origin>
	s_animation_dx = 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <s_animation_dx>

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
			s_animation_train_left[  idx] = 0b11111000;

		} else if (idx == ANIMATION_TRAIN_BLANK_LEN - 1) {
			s_animation_train_left[  idx] = 0;

		} else if (!((idx - 16) % 11)) {
    1a00:	0f 2e       	mov	r0, r31
    1a02:	fb e0       	ldi	r31, 0x0B	; 11
    1a04:	ef 2e       	mov	r14, r31
    1a06:	f1 2c       	mov	r15, r1
    1a08:	f0 2d       	mov	r31, r0
			s_animation_train_left[  idx] = 0b01000000;
    1a0a:	68 94       	set
    1a0c:	dd 24       	eor	r13, r13
    1a0e:	d6 f8       	bld	r13, 6
			s_animation_train_left[++idx] = 0b01000000;
			s_animation_train_left[++idx] = 0b01000000;
			s_animation_train_left[++idx] = 0b11111000;
    1a10:	f8 ef       	ldi	r31, 0xF8	; 248
			s_animation_train_left[++idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11001000;
    1a12:	0f 2e       	mov	r0, r31
    1a14:	f8 ec       	ldi	r31, 0xC8	; 200
    1a16:	cf 2e       	mov	r12, r31
    1a18:	f0 2d       	mov	r31, r0
			s_animation_train_left[  idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11011000;
		} else if (idx <  5) {
			s_animation_train_left[  idx] = 0b11011111;
		} else if (idx < 11) {
			s_animation_train_left[  idx] = 0b11011000;
    1a1a:	18 ed       	ldi	r17, 0xD8	; 216

		} else if (idx < 3) {
			s_animation_train_left[  idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11011000;
		} else if (idx <  5) {
			s_animation_train_left[  idx] = 0b11011111;
    1a1c:	0f ed       	ldi	r16, 0xDF	; 223
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
		if (!idx) {
			s_animation_train_left[idx] = 0;
    1a1e:	c0 e6       	ldi	r28, 0x60	; 96
    1a20:	d1 e0       	ldi	r29, 0x01	; 1
	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    1a22:	e1 e0       	ldi	r30, 0x01	; 1
    1a24:	40 e0       	ldi	r20, 0x00	; 0
		if (!idx) {
    1a26:	21 15       	cp	r18, r1
    1a28:	31 05       	cpc	r19, r1
    1a2a:	21 f4       	brne	.+8      	; 0x1a34 <lcd_animation_prepare+0x5a>
			s_animation_train_left[idx] = 0;
    1a2c:	18 82       	st	Y, r1
	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    1a2e:	2e 2f       	mov	r18, r30
    1a30:	34 2f       	mov	r19, r20
    1a32:	f9 cf       	rjmp	.-14     	; 0x1a26 <lcd_animation_prepare+0x4c>
		if (!idx) {
			s_animation_train_left[idx] = 0;

		} else if (idx < 3) {
    1a34:	23 30       	cpi	r18, 0x03	; 3
    1a36:	31 05       	cpc	r19, r1
    1a38:	5c f4       	brge	.+22     	; 0x1a50 <lcd_animation_prepare+0x76>
			s_animation_train_left[  idx] = 0b11111000;
    1a3a:	d9 01       	movw	r26, r18
    1a3c:	a0 5a       	subi	r26, 0xA0	; 160
    1a3e:	be 4f       	sbci	r27, 0xFE	; 254
    1a40:	fc 93       	st	X, r31
			s_animation_train_left[++idx] = 0b11011000;
    1a42:	2f 5f       	subi	r18, 0xFF	; 255
    1a44:	3f 4f       	sbci	r19, 0xFF	; 255
    1a46:	d9 01       	movw	r26, r18
    1a48:	a0 5a       	subi	r26, 0xA0	; 160
    1a4a:	be 4f       	sbci	r27, 0xFE	; 254
    1a4c:	1c 93       	st	X, r17
    1a4e:	4e c0       	rjmp	.+156    	; 0x1aec <lcd_animation_prepare+0x112>
		} else if (idx <  5) {
    1a50:	25 30       	cpi	r18, 0x05	; 5
    1a52:	31 05       	cpc	r19, r1
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <lcd_animation_prepare+0x86>
			s_animation_train_left[  idx] = 0b11011111;
    1a56:	d9 01       	movw	r26, r18
    1a58:	a0 5a       	subi	r26, 0xA0	; 160
    1a5a:	be 4f       	sbci	r27, 0xFE	; 254
    1a5c:	0c 93       	st	X, r16
    1a5e:	46 c0       	rjmp	.+140    	; 0x1aec <lcd_animation_prepare+0x112>
		} else if (idx < 11) {
    1a60:	2b 30       	cpi	r18, 0x0B	; 11
    1a62:	31 05       	cpc	r19, r1
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <lcd_animation_prepare+0x96>
			s_animation_train_left[  idx] = 0b11011000;
    1a66:	d9 01       	movw	r26, r18
    1a68:	a0 5a       	subi	r26, 0xA0	; 160
    1a6a:	be 4f       	sbci	r27, 0xFE	; 254
    1a6c:	1c 93       	st	X, r17
    1a6e:	3e c0       	rjmp	.+124    	; 0x1aec <lcd_animation_prepare+0x112>
		} else if (idx < 16) {
    1a70:	20 31       	cpi	r18, 0x10	; 16
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <lcd_animation_prepare+0xa6>
			s_animation_train_left[  idx] = 0b11111000;
    1a76:	d9 01       	movw	r26, r18
    1a78:	a0 5a       	subi	r26, 0xA0	; 160
    1a7a:	be 4f       	sbci	r27, 0xFE	; 254
    1a7c:	fc 93       	st	X, r31
    1a7e:	36 c0       	rjmp	.+108    	; 0x1aec <lcd_animation_prepare+0x112>

		} else if (idx == ANIMATION_TRAIN_BLANK_LEN - 1) {
    1a80:	2c 33       	cpi	r18, 0x3C	; 60
    1a82:	31 05       	cpc	r19, r1
    1a84:	19 f4       	brne	.+6      	; 0x1a8c <lcd_animation_prepare+0xb2>
			s_animation_train_left[  idx] = 0;
    1a86:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <s_animation_train_left+0x3c>
    1a8a:	36 c0       	rjmp	.+108    	; 0x1af8 <lcd_animation_prepare+0x11e>

		} else if (!((idx - 16) % 11)) {
    1a8c:	c9 01       	movw	r24, r18
    1a8e:	40 97       	sbiw	r24, 0x10	; 16
    1a90:	b7 01       	movw	r22, r14
    1a92:	0e 94 6f 15 	call	0x2ade	; 0x2ade <__divmodhi4>
    1a96:	89 2b       	or	r24, r25
    1a98:	29 f5       	brne	.+74     	; 0x1ae4 <lcd_animation_prepare+0x10a>
			s_animation_train_left[  idx] = 0b01000000;
    1a9a:	d9 01       	movw	r26, r18
    1a9c:	a0 5a       	subi	r26, 0xA0	; 160
    1a9e:	be 4f       	sbci	r27, 0xFE	; 254
    1aa0:	dc 92       	st	X, r13
			s_animation_train_left[++idx] = 0b01000000;
    1aa2:	11 96       	adiw	r26, 0x01	; 1
    1aa4:	dc 92       	st	X, r13
    1aa6:	11 97       	sbiw	r26, 0x01	; 1
			s_animation_train_left[++idx] = 0b01000000;
    1aa8:	12 96       	adiw	r26, 0x02	; 2
    1aaa:	dc 92       	st	X, r13
    1aac:	12 97       	sbiw	r26, 0x02	; 2
			s_animation_train_left[++idx] = 0b11111000;
    1aae:	13 96       	adiw	r26, 0x03	; 3
    1ab0:	fc 93       	st	X, r31
    1ab2:	13 97       	sbiw	r26, 0x03	; 3
			s_animation_train_left[++idx] = 0b11111000;
    1ab4:	14 96       	adiw	r26, 0x04	; 4
    1ab6:	fc 93       	st	X, r31
    1ab8:	14 97       	sbiw	r26, 0x04	; 4
			s_animation_train_left[++idx] = 0b11001000;
    1aba:	15 96       	adiw	r26, 0x05	; 5
    1abc:	cc 92       	st	X, r12
    1abe:	15 97       	sbiw	r26, 0x05	; 5
			s_animation_train_left[++idx] = 0b11111000;
    1ac0:	16 96       	adiw	r26, 0x06	; 6
    1ac2:	fc 93       	st	X, r31
    1ac4:	16 97       	sbiw	r26, 0x06	; 6
			s_animation_train_left[++idx] = 0b11111000;
    1ac6:	17 96       	adiw	r26, 0x07	; 7
    1ac8:	fc 93       	st	X, r31
    1aca:	17 97       	sbiw	r26, 0x07	; 7
			s_animation_train_left[++idx] = 0b11001000;
    1acc:	18 96       	adiw	r26, 0x08	; 8
    1ace:	cc 92       	st	X, r12
    1ad0:	18 97       	sbiw	r26, 0x08	; 8
			s_animation_train_left[++idx] = 0b11111000;
    1ad2:	19 96       	adiw	r26, 0x09	; 9
    1ad4:	fc 93       	st	X, r31
			s_animation_train_left[++idx] = 0b11111000;
    1ad6:	26 5f       	subi	r18, 0xF6	; 246
    1ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ada:	d9 01       	movw	r26, r18
    1adc:	a0 5a       	subi	r26, 0xA0	; 160
    1ade:	be 4f       	sbci	r27, 0xFE	; 254
    1ae0:	fc 93       	st	X, r31
    1ae2:	04 c0       	rjmp	.+8      	; 0x1aec <lcd_animation_prepare+0x112>
		} else {
			s_animation_train_left[idx] = 0;
    1ae4:	d9 01       	movw	r26, r18
    1ae6:	a0 5a       	subi	r26, 0xA0	; 160
    1ae8:	be 4f       	sbci	r27, 0xFE	; 254
    1aea:	1c 92       	st	X, r1
	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    1aec:	2f 5f       	subi	r18, 0xFF	; 255
    1aee:	3f 4f       	sbci	r19, 0xFF	; 255
    1af0:	2d 33       	cpi	r18, 0x3D	; 61
    1af2:	31 05       	cpc	r19, r1
    1af4:	0c f4       	brge	.+2      	; 0x1af8 <lcd_animation_prepare+0x11e>
    1af6:	97 cf       	rjmp	.-210    	; 0x1a26 <lcd_animation_prepare+0x4c>
    1af8:	a0 e6       	ldi	r26, 0x60	; 96
    1afa:	b1 e0       	ldi	r27, 0x01	; 1
    1afc:	e0 e6       	ldi	r30, 0x60	; 96
    1afe:	f1 e0       	ldi	r31, 0x01	; 1
    1b00:	23 e2       	ldi	r18, 0x23	; 35
    1b02:	31 e0       	ldi	r19, 0x01	; 1
			s_animation_train_left[idx] = 0;
		}
	}

	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
		s_animation_train_right[ANIMATION_TRAIN_BLANK_LEN - idx - 1] = s_animation_train_left[idx];		// x-mirror
    1b04:	8d 91       	ld	r24, X+
    1b06:	82 93       	st	-Z, r24
		} else {
			s_animation_train_left[idx] = 0;
		}
	}

	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    1b08:	e2 17       	cp	r30, r18
    1b0a:	f3 07       	cpc	r31, r19
    1b0c:	d9 f7       	brne	.-10     	; 0x1b04 <lcd_animation_prepare+0x12a>
		s_animation_train_right[ANIMATION_TRAIN_BLANK_LEN - idx - 1] = s_animation_train_left[idx];		// x-mirror
	}

	/* prepare free line for train */
	gfx_mono_generic_draw_filled_rect(0, (GFX_MONO_LCD_PAGES - 1) * GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_PIXEL_CLR);
    1b0e:	00 e0       	ldi	r16, 0x00	; 0
    1b10:	28 e0       	ldi	r18, 0x08	; 8
    1b12:	40 ef       	ldi	r20, 0xF0	; 240
    1b14:	68 e7       	ldi	r22, 0x78	; 120
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	0e 94 4f 05 	call	0xa9e	; 0xa9e <gfx_mono_generic_draw_filled_rect>
}
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	08 95       	ret

00001b2e <lcd_animation_loop>:

void lcd_animation_loop(void)
{
    1b2e:	cf 92       	push	r12
    1b30:	df 92       	push	r13
    1b32:	ef 92       	push	r14
    1b34:	ff 92       	push	r15
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	28 97       	sbiw	r28, 0x08	; 8
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
	if (s_animation_dx) {
    1b4e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <s_animation_dx>
    1b52:	88 23       	and	r24, r24
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <lcd_animation_loop+0x2a>
    1b56:	23 c1       	rjmp	.+582    	; 0x1d9e <lcd_animation_loop+0x270>
		float now = get_abs_time();
    1b58:	fc d2       	rcall	.+1528   	; 0x2152 <get_abs_time>
    1b5a:	6b 01       	movw	r12, r22
    1b5c:	7c 01       	movw	r14, r24

		if ((now - s_animation_time_last_train) >= 0.04f) {  // 25x per sec
    1b5e:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <s_animation_time_last_train>
    1b62:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <s_animation_time_last_train+0x1>
    1b66:	40 91 9f 01 	lds	r20, 0x019F	; 0x80019f <s_animation_time_last_train+0x2>
    1b6a:	50 91 a0 01 	lds	r21, 0x01A0	; 0x8001a0 <s_animation_time_last_train+0x3>
    1b6e:	9c d5       	rcall	.+2872   	; 0x26a8 <__subsf3>
    1b70:	2a e0       	ldi	r18, 0x0A	; 10
    1b72:	37 ed       	ldi	r19, 0xD7	; 215
    1b74:	43 e2       	ldi	r20, 0x23	; 35
    1b76:	5d e3       	ldi	r21, 0x3D	; 61
    1b78:	4b d7       	rcall	.+3734   	; 0x2a10 <__gesf2>
    1b7a:	88 23       	and	r24, r24
    1b7c:	0c f4       	brge	.+2      	; 0x1b80 <lcd_animation_loop+0x52>
    1b7e:	58 c0       	rjmp	.+176    	; 0x1c30 <lcd_animation_loop+0x102>
			s_animation_time_last_train = now;
    1b80:	c0 92 9d 01 	sts	0x019D, r12	; 0x80019d <s_animation_time_last_train>
    1b84:	d0 92 9e 01 	sts	0x019E, r13	; 0x80019e <s_animation_time_last_train+0x1>
    1b88:	e0 92 9f 01 	sts	0x019F, r14	; 0x80019f <s_animation_time_last_train+0x2>
    1b8c:	f0 92 a0 01 	sts	0x01A0, r15	; 0x8001a0 <s_animation_time_last_train+0x3>
			s_animation_train_origin += s_animation_dx;
    1b90:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <s_animation_dx>
    1b94:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <s_animation_train_origin>
    1b98:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <s_animation_train_origin+0x1>
    1b9c:	e8 0f       	add	r30, r24
    1b9e:	f1 1d       	adc	r31, r1
    1ba0:	87 fd       	sbrc	r24, 7
    1ba2:	fa 95       	dec	r31
    1ba4:	f0 93 a7 01 	sts	0x01A7, r31	; 0x8001a7 <s_animation_train_origin+0x1>
    1ba8:	e0 93 a6 01 	sts	0x01A6, r30	; 0x8001a6 <s_animation_train_origin>

			if (s_animation_train_origin <= (-10 - ANIMATION_TRAIN_BLANK_LEN)) {
    1bac:	ea 3b       	cpi	r30, 0xBA	; 186
    1bae:	2f ef       	ldi	r18, 0xFF	; 255
    1bb0:	f2 07       	cpc	r31, r18
    1bb2:	24 f4       	brge	.+8      	; 0x1bbc <lcd_animation_loop+0x8e>
				s_animation_dx = 1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <s_animation_dx>
    1bba:	23 c0       	rjmp	.+70     	; 0x1c02 <lcd_animation_loop+0xd4>
				} else if (s_animation_train_origin >= (GFX_MONO_LCD_WIDTH + 10)) {
    1bbc:	ea 3f       	cpi	r30, 0xFA	; 250
    1bbe:	f1 05       	cpc	r31, r1
    1bc0:	24 f0       	brlt	.+8      	; 0x1bca <lcd_animation_loop+0x9c>
				s_animation_dx = -1;
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <s_animation_dx>
    1bc8:	04 c0       	rjmp	.+8      	; 0x1bd2 <lcd_animation_loop+0xa4>
			}

			if (s_animation_dx < 0) {
    1bca:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <s_animation_dx>
    1bce:	88 23       	and	r24, r24
    1bd0:	c4 f4       	brge	.+48     	; 0x1c02 <lcd_animation_loop+0xd4>
				// Draw train left
				if (s_animation_train_origin >= 0 && s_animation_train_origin < GFX_MONO_LCD_WIDTH) {
    1bd2:	e0 3f       	cpi	r30, 0xF0	; 240
    1bd4:	f1 05       	cpc	r31, r1
    1bd6:	38 f4       	brcc	.+14     	; 0x1be6 <lcd_animation_loop+0xb8>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_left, GFX_MONO_LCD_PAGES - 1, s_animation_train_origin, ANIMATION_TRAIN_BLANK_LEN);				// full width
    1bd8:	2d e3       	ldi	r18, 0x3D	; 61
    1bda:	4e 2f       	mov	r20, r30
    1bdc:	6f e0       	ldi	r22, 0x0F	; 15
    1bde:	80 e6       	ldi	r24, 0x60	; 96
    1be0:	91 e0       	ldi	r25, 0x01	; 1
    1be2:	d0 d8       	rcall	.-3680   	; 0xd84 <gfx_mono_lcd_uc1608_put_page>
    1be4:	25 c0       	rjmp	.+74     	; 0x1c30 <lcd_animation_loop+0x102>
					} else if (-ANIMATION_TRAIN_BLANK_LEN < s_animation_train_origin && s_animation_train_origin < 0) {
    1be6:	cf 01       	movw	r24, r30
    1be8:	cc 96       	adiw	r24, 0x3c	; 60
    1bea:	cc 97       	sbiw	r24, 0x3c	; 60
    1bec:	08 f5       	brcc	.+66     	; 0x1c30 <lcd_animation_loop+0x102>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_left - s_animation_train_origin, GFX_MONO_LCD_PAGES - 1, 0, ANIMATION_TRAIN_BLANK_LEN + s_animation_train_origin);	// left: reduced width
    1bee:	2d e3       	ldi	r18, 0x3D	; 61
    1bf0:	2e 0f       	add	r18, r30
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	6f e0       	ldi	r22, 0x0F	; 15
    1bf6:	80 e6       	ldi	r24, 0x60	; 96
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	8e 1b       	sub	r24, r30
    1bfc:	9f 0b       	sbc	r25, r31
    1bfe:	c2 d8       	rcall	.-3708   	; 0xd84 <gfx_mono_lcd_uc1608_put_page>
    1c00:	17 c0       	rjmp	.+46     	; 0x1c30 <lcd_animation_loop+0x102>
				}

				} else {
				// Draw train right
				if (s_animation_train_origin >= 0 && s_animation_train_origin < GFX_MONO_LCD_WIDTH) {
    1c02:	e0 3f       	cpi	r30, 0xF0	; 240
    1c04:	f1 05       	cpc	r31, r1
    1c06:	38 f4       	brcc	.+14     	; 0x1c16 <lcd_animation_loop+0xe8>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_right, GFX_MONO_LCD_PAGES - 1, s_animation_train_origin, ANIMATION_TRAIN_BLANK_LEN);				// full width
    1c08:	2d e3       	ldi	r18, 0x3D	; 61
    1c0a:	4e 2f       	mov	r20, r30
    1c0c:	6f e0       	ldi	r22, 0x0F	; 15
    1c0e:	83 e2       	ldi	r24, 0x23	; 35
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	b8 d8       	rcall	.-3728   	; 0xd84 <gfx_mono_lcd_uc1608_put_page>
    1c14:	0d c0       	rjmp	.+26     	; 0x1c30 <lcd_animation_loop+0x102>
					} else if (-ANIMATION_TRAIN_BLANK_LEN < s_animation_train_origin && s_animation_train_origin < 0) {
    1c16:	cf 01       	movw	r24, r30
    1c18:	cc 96       	adiw	r24, 0x3c	; 60
    1c1a:	cc 97       	sbiw	r24, 0x3c	; 60
    1c1c:	48 f4       	brcc	.+18     	; 0x1c30 <lcd_animation_loop+0x102>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_right - s_animation_train_origin, GFX_MONO_LCD_PAGES - 1, 0, ANIMATION_TRAIN_BLANK_LEN + s_animation_train_origin);	// left: reduced width
    1c1e:	2d e3       	ldi	r18, 0x3D	; 61
    1c20:	2e 0f       	add	r18, r30
    1c22:	40 e0       	ldi	r20, 0x00	; 0
    1c24:	6f e0       	ldi	r22, 0x0F	; 15
    1c26:	83 e2       	ldi	r24, 0x23	; 35
    1c28:	91 e0       	ldi	r25, 0x01	; 1
    1c2a:	8e 1b       	sub	r24, r30
    1c2c:	9f 0b       	sbc	r25, r31
    1c2e:	aa d8       	rcall	.-3756   	; 0xd84 <gfx_mono_lcd_uc1608_put_page>
				}
			}
		}

		if ((now - s_animation_time_last_temp) >= 0.50f) {  // 2x per sec
    1c30:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <s_animation_time_last_temp>
    1c34:	30 91 a2 01 	lds	r19, 0x01A2	; 0x8001a2 <s_animation_time_last_temp+0x1>
    1c38:	40 91 a3 01 	lds	r20, 0x01A3	; 0x8001a3 <s_animation_time_last_temp+0x2>
    1c3c:	50 91 a4 01 	lds	r21, 0x01A4	; 0x8001a4 <s_animation_time_last_temp+0x3>
    1c40:	c7 01       	movw	r24, r14
    1c42:	b6 01       	movw	r22, r12
    1c44:	31 d5       	rcall	.+2658   	; 0x26a8 <__subsf3>
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	e0 d6       	rcall	.+3520   	; 0x2a10 <__gesf2>
    1c50:	88 23       	and	r24, r24
    1c52:	0c f4       	brge	.+2      	; 0x1c56 <lcd_animation_loop+0x128>
    1c54:	5e c0       	rjmp	.+188    	; 0x1d12 <lcd_animation_loop+0x1e4>
			s_animation_time_last_temp = now;
    1c56:	c0 92 a1 01 	sts	0x01A1, r12	; 0x8001a1 <s_animation_time_last_temp>
    1c5a:	d0 92 a2 01 	sts	0x01A2, r13	; 0x8001a2 <s_animation_time_last_temp+0x1>
    1c5e:	e0 92 a3 01 	sts	0x01A3, r14	; 0x8001a3 <s_animation_time_last_temp+0x2>
    1c62:	f0 92 a4 01 	sts	0x01A4, r15	; 0x8001a4 <s_animation_time_last_temp+0x3>
static void s_lcd_test_temp(void)
{
	char	buf[7];
	float	t;

	s_task();
    1c66:	c7 d2       	rcall	.+1422   	; 0x21f6 <s_task>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1c68:	8f b7       	in	r24, 0x3f	; 63
    1c6a:	88 87       	std	Y+8, r24	; 0x08
	cpu_irq_disable();
    1c6c:	f8 94       	cli
	return flags;
    1c6e:	88 85       	ldd	r24, Y+8	; 0x08

	irqflags_t flags = cpu_irq_save();
	t = g_temp;
    1c70:	c0 90 c7 01 	lds	r12, 0x01C7	; 0x8001c7 <g_temp>
    1c74:	d0 90 c8 01 	lds	r13, 0x01C8	; 0x8001c8 <g_temp+0x1>
    1c78:	e0 90 c9 01 	lds	r14, 0x01C9	; 0x8001c9 <g_temp+0x2>
    1c7c:	f0 90 ca 01 	lds	r15, 0x01CA	; 0x8001ca <g_temp+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c80:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	if (t < 0.f) {
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	a9 01       	movw	r20, r18
    1c88:	c7 01       	movw	r24, r14
    1c8a:	b6 01       	movw	r22, r12
    1c8c:	72 d5       	rcall	.+2788   	; 0x2772 <__cmpsf2>
    1c8e:	88 23       	and	r24, r24
    1c90:	1c f4       	brge	.+6      	; 0x1c98 <lcd_animation_loop+0x16a>
		t = 0.f;
    1c92:	c1 2c       	mov	r12, r1
    1c94:	d1 2c       	mov	r13, r1
    1c96:	76 01       	movw	r14, r12
	}

	buf[0] = '0' + (uint8_t)(((int)(t /  10.f)) % 10);
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e2       	ldi	r20, 0x20	; 32
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	c7 01       	movw	r24, r14
    1ca2:	b6 01       	movw	r22, r12
    1ca4:	6a d5       	rcall	.+2772   	; 0x277a <__divsf3>
    1ca6:	d1 d5       	rcall	.+2978   	; 0x284a <__fixsfsi>
    1ca8:	0a e0       	ldi	r16, 0x0A	; 10
    1caa:	10 e0       	ldi	r17, 0x00	; 0
    1cac:	cb 01       	movw	r24, r22
    1cae:	b8 01       	movw	r22, r16
    1cb0:	16 d7       	rcall	.+3628   	; 0x2ade <__divmodhi4>
    1cb2:	80 5d       	subi	r24, 0xD0	; 208
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = '0' + (uint8_t)(((int) t         ) % 10);
    1cb6:	c7 01       	movw	r24, r14
    1cb8:	b6 01       	movw	r22, r12
    1cba:	c7 d5       	rcall	.+2958   	; 0x284a <__fixsfsi>
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	b8 01       	movw	r22, r16
    1cc0:	0e d7       	rcall	.+3612   	; 0x2ade <__divmodhi4>
    1cc2:	80 5d       	subi	r24, 0xD0	; 208
    1cc4:	8a 83       	std	Y+2, r24	; 0x02
	buf[2] = ',';
    1cc6:	8c e2       	ldi	r24, 0x2C	; 44
    1cc8:	8b 83       	std	Y+3, r24	; 0x03
	buf[3] = '0' + (uint8_t)(((int)(t *  10.f)) % 10);
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e2       	ldi	r20, 0x20	; 32
    1cd0:	51 e4       	ldi	r21, 0x41	; 65
    1cd2:	c7 01       	movw	r24, r14
    1cd4:	b6 01       	movw	r22, r12
    1cd6:	a0 d6       	rcall	.+3392   	; 0x2a18 <__mulsf3>
    1cd8:	b8 d5       	rcall	.+2928   	; 0x284a <__fixsfsi>
    1cda:	cb 01       	movw	r24, r22
    1cdc:	b8 01       	movw	r22, r16
    1cde:	ff d6       	rcall	.+3582   	; 0x2ade <__divmodhi4>
    1ce0:	80 5d       	subi	r24, 0xD0	; 208
    1ce2:	8c 83       	std	Y+4, r24	; 0x04
	buf[4] = '0' + (uint8_t)(((int)(t * 100.f)) % 10);
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	48 ec       	ldi	r20, 0xC8	; 200
    1cea:	52 e4       	ldi	r21, 0x42	; 66
    1cec:	c7 01       	movw	r24, r14
    1cee:	b6 01       	movw	r22, r12
    1cf0:	93 d6       	rcall	.+3366   	; 0x2a18 <__mulsf3>
    1cf2:	ab d5       	rcall	.+2902   	; 0x284a <__fixsfsi>
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	b8 01       	movw	r22, r16
    1cf8:	f2 d6       	rcall	.+3556   	; 0x2ade <__divmodhi4>
    1cfa:	80 5d       	subi	r24, 0xD0	; 208
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
	buf[5] = 'C';
    1cfe:	83 e4       	ldi	r24, 0x43	; 67
    1d00:	8e 83       	std	Y+6, r24	; 0x06
	buf[6] = 0;
    1d02:	1f 82       	std	Y+7, r1	; 0x07

	gfx_mono_draw_string(buf, 120, 65, &sysfont);
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	31 e0       	ldi	r19, 0x01	; 1
    1d08:	41 e4       	ldi	r20, 0x41	; 65
    1d0a:	68 e7       	ldi	r22, 0x78	; 120
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	24 d9       	rcall	.-3512   	; 0xf5a <gfx_mono_draw_string>
	const int w = GFX_MONO_LCD_WIDTH;

	static int loop = 0;
	static uint8_t sw = 0;

	if (loop++ < h) {
    1d12:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <loop.2714>
    1d16:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <loop.2714+0x1>
    1d1a:	c9 01       	movw	r24, r18
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <loop.2714+0x1>
    1d22:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <loop.2714>
    1d26:	22 31       	cpi	r18, 0x12	; 18
    1d28:	31 05       	cpc	r19, r1
    1d2a:	a4 f4       	brge	.+40     	; 0x1d54 <lcd_animation_loop+0x226>
		uint8_t y11 = oy + loop;
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);
    1d2c:	00 91 20 01 	lds	r16, 0x0120	; 0x800120 <__data_end>
    1d30:	9b ea       	ldi	r25, 0xAB	; 171
    1d32:	09 9f       	mul	r16, r25
    1d34:	91 2d       	mov	r25, r1
    1d36:	11 24       	eor	r1, r1
    1d38:	96 95       	lsr	r25
    1d3a:	29 2f       	mov	r18, r25
    1d3c:	22 0f       	add	r18, r18
    1d3e:	92 0f       	add	r25, r18
    1d40:	09 1b       	sub	r16, r25
	static int loop = 0;
	static uint8_t sw = 0;

	if (loop++ < h) {
		uint8_t y11 = oy + loop;
		uint8_t y12 = oy + h - loop - 1;
    1d42:	2b e1       	ldi	r18, 0x1B	; 27
    1d44:	28 1b       	sub	r18, r24

	static int loop = 0;
	static uint8_t sw = 0;

	if (loop++ < h) {
		uint8_t y11 = oy + loop;
    1d46:	6a e0       	ldi	r22, 0x0A	; 10
    1d48:	68 0f       	add	r22, r24
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);
    1d4a:	4f ee       	ldi	r20, 0xEF	; 239
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	0e 94 a9 04 	call	0x952	; 0x952 <gfx_mono_generic_draw_line>
    1d52:	25 c0       	rjmp	.+74     	; 0x1d9e <lcd_animation_loop+0x270>

	} else if (loop < (h + w)) {
    1d54:	82 30       	cpi	r24, 0x02	; 2
    1d56:	21 e0       	ldi	r18, 0x01	; 1
    1d58:	92 07       	cpc	r25, r18
    1d5a:	9c f4       	brge	.+38     	; 0x1d82 <lcd_animation_loop+0x254>
		uint8_t x21 = (loop - h);
		uint8_t x22 = w - (loop - h) - 1;
		gfx_mono_generic_draw_line (x21, oy + h - 1, x22, oy, sw % 3);
    1d5c:	00 91 20 01 	lds	r16, 0x0120	; 0x800120 <__data_end>
    1d60:	9b ea       	ldi	r25, 0xAB	; 171
    1d62:	09 9f       	mul	r16, r25
    1d64:	91 2d       	mov	r25, r1
    1d66:	11 24       	eor	r1, r1
    1d68:	96 95       	lsr	r25
    1d6a:	29 2f       	mov	r18, r25
    1d6c:	22 0f       	add	r18, r18
    1d6e:	92 0f       	add	r25, r18
    1d70:	09 1b       	sub	r16, r25
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);

	} else if (loop < (h + w)) {
		uint8_t x21 = (loop - h);
		uint8_t x22 = w - (loop - h) - 1;
    1d72:	41 e0       	ldi	r20, 0x01	; 1
    1d74:	48 1b       	sub	r20, r24
		gfx_mono_generic_draw_line (x21, oy + h - 1, x22, oy, sw % 3);
    1d76:	2a e0       	ldi	r18, 0x0A	; 10
    1d78:	6b e1       	ldi	r22, 0x1B	; 27
    1d7a:	82 51       	subi	r24, 0x12	; 18
    1d7c:	0e 94 a9 04 	call	0x952	; 0x952 <gfx_mono_generic_draw_line>
    1d80:	0e c0       	rjmp	.+28     	; 0x1d9e <lcd_animation_loop+0x270>

	} else {
		loop = 0;
    1d82:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <loop.2714+0x1>
    1d86:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <loop.2714>
		if (++sw >= 3) {
    1d8a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	83 30       	cpi	r24, 0x03	; 3
    1d92:	18 f4       	brcc	.+6      	; 0x1d9a <lcd_animation_loop+0x26c>
    1d94:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <lcd_animation_loop+0x270>
			sw = 0;
    1d9a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
			s_lcd_test_temp();
		}

		s_lcd_test_lines();  // Every cycle
	}	
}
    1d9e:	28 96       	adiw	r28, 0x08	; 8
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	ff 90       	pop	r15
    1db4:	ef 90       	pop	r14
    1db6:	df 90       	pop	r13
    1db8:	cf 90       	pop	r12
    1dba:	08 95       	ret

00001dbc <lcd_test>:

void lcd_test(uint8_t pattern_bm)
{
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	f8 2e       	mov	r15, r24
	if (pattern_bm & (1 << 0)) {
    1dc8:	80 ff       	sbrs	r24, 0
    1dca:	06 c0       	rjmp	.+12     	; 0x1dd8 <lcd_test+0x1c>
    1dcc:	c0 e0       	ldi	r28, 0x00	; 0
		// TEST 1
		for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
			lcd_bus_write_ram(i);
    1dce:	8c 2f       	mov	r24, r28
    1dd0:	6a dd       	rcall	.-1324   	; 0x18a6 <lcd_bus_write_ram>
    1dd2:	cf 5f       	subi	r28, 0xFF	; 255

void lcd_test(uint8_t pattern_bm)
{
	if (pattern_bm & (1 << 0)) {
		// TEST 1
		for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
    1dd4:	c0 3f       	cpi	r28, 0xF0	; 240
    1dd6:	d9 f7       	brne	.-10     	; 0x1dce <lcd_test+0x12>
			lcd_bus_write_ram(i);
		}
	}

	if (pattern_bm & (1 << 1)) {
    1dd8:	f1 fe       	sbrs	r15, 1
    1dda:	17 c0       	rjmp	.+46     	; 0x1e0a <lcd_test+0x4e>
		// TEST 2
		lcd_page_set(2);
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	c2 dd       	rcall	.-1148   	; 0x1964 <lcd_page_set>
		lcd_cr();
    1de0:	d7 dd       	rcall	.-1106   	; 0x1990 <lcd_cr>
		for (int i = 0, pos = 231; i < GFX_MONO_LCD_WIDTH; ++i, ++pos) {
    1de2:	c0 e0       	ldi	r28, 0x00	; 0
    1de4:	d0 e0       	ldi	r29, 0x00	; 0
			if (!(i % 7)) {
    1de6:	07 e0       	ldi	r16, 0x07	; 7
    1de8:	10 e0       	ldi	r17, 0x00	; 0
    1dea:	ce 01       	movw	r24, r28
    1dec:	b8 01       	movw	r22, r16
    1dee:	77 d6       	rcall	.+3310   	; 0x2ade <__divmodhi4>
    1df0:	89 2b       	or	r24, r25
    1df2:	11 f4       	brne	.+4      	; 0x1df8 <lcd_test+0x3c>
				lcd_bus_write_ram(0);
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	57 dd       	rcall	.-1362   	; 0x18a6 <lcd_bus_write_ram>
    1df8:	fe 01       	movw	r30, r28
    1dfa:	ed 59       	subi	r30, 0x9D	; 157
    1dfc:	fa 4f       	sbci	r31, 0xFA	; 250
			}
			lcd_bus_write_ram(PROGMEM_READ_BYTE(&(sysfont_glyphs[pos])));
    1dfe:	84 91       	lpm	r24, Z
    1e00:	52 dd       	rcall	.-1372   	; 0x18a6 <lcd_bus_write_ram>

	if (pattern_bm & (1 << 1)) {
		// TEST 2
		lcd_page_set(2);
		lcd_cr();
		for (int i = 0, pos = 231; i < GFX_MONO_LCD_WIDTH; ++i, ++pos) {
    1e02:	21 96       	adiw	r28, 0x01	; 1
    1e04:	c0 3f       	cpi	r28, 0xF0	; 240
    1e06:	d1 05       	cpc	r29, r1
    1e08:	81 f7       	brne	.-32     	; 0x1dea <lcd_test+0x2e>
			}
			lcd_bus_write_ram(PROGMEM_READ_BYTE(&(sysfont_glyphs[pos])));
		}
	}

	if (pattern_bm & (1 << 2)) {
    1e0a:	f2 fe       	sbrs	r15, 2
    1e0c:	24 c0       	rjmp	.+72     	; 0x1e56 <lcd_test+0x9a>
		// TEST 3
		gfx_mono_draw_pixel(4 + 0, 40 + 0, GFX_PIXEL_SET);
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	68 e2       	ldi	r22, 0x28	; 40
    1e12:	84 e0       	ldi	r24, 0x04	; 4
    1e14:	2c d8       	rcall	.-4008   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 1, 40 + 1, GFX_PIXEL_SET);
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	69 e2       	ldi	r22, 0x29	; 41
    1e1a:	85 e0       	ldi	r24, 0x05	; 5
    1e1c:	28 d8       	rcall	.-4016   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 2, GFX_PIXEL_SET);
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	6a e2       	ldi	r22, 0x2A	; 42
    1e22:	86 e0       	ldi	r24, 0x06	; 6
    1e24:	24 d8       	rcall	.-4024   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 3, 40 + 3, GFX_PIXEL_SET);
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	6b e2       	ldi	r22, 0x2B	; 43
    1e2a:	87 e0       	ldi	r24, 0x07	; 7
    1e2c:	20 d8       	rcall	.-4032   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 4, GFX_PIXEL_SET);
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	6c e2       	ldi	r22, 0x2C	; 44
    1e32:	86 e0       	ldi	r24, 0x06	; 6
    1e34:	1c d8       	rcall	.-4040   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 1, 40 + 5, GFX_PIXEL_SET);
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	6d e2       	ldi	r22, 0x2D	; 45
    1e3a:	85 e0       	ldi	r24, 0x05	; 5
    1e3c:	18 d8       	rcall	.-4048   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 6, GFX_PIXEL_SET);
    1e3e:	41 e0       	ldi	r20, 0x01	; 1
    1e40:	6e e2       	ldi	r22, 0x2E	; 46
    1e42:	86 e0       	ldi	r24, 0x06	; 6
    1e44:	14 d8       	rcall	.-4056   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 3, 40 + 7, GFX_PIXEL_SET);
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	6f e2       	ldi	r22, 0x2F	; 47
    1e4a:	87 e0       	ldi	r24, 0x07	; 7
    1e4c:	10 d8       	rcall	.-4064   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 4, 40 + 8, GFX_PIXEL_SET);
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	60 e3       	ldi	r22, 0x30	; 48
    1e52:	88 e0       	ldi	r24, 0x08	; 8
    1e54:	0c d8       	rcall	.-4072   	; 0xe6e <gfx_mono_lcd_uc1608_draw_pixel>
	}

	if (pattern_bm & (1 << 3)) {
    1e56:	f3 fe       	sbrs	r15, 3
    1e58:	07 c0       	rjmp	.+14     	; 0x1e68 <lcd_test+0xac>
		// TEST 4
		gfx_mono_generic_draw_line (0, 16, 239, 31, GFX_PIXEL_SET);
    1e5a:	01 e0       	ldi	r16, 0x01	; 1
    1e5c:	2f e1       	ldi	r18, 0x1F	; 31
    1e5e:	4f ee       	ldi	r20, 0xEF	; 239
    1e60:	60 e1       	ldi	r22, 0x10	; 16
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	0e 94 a9 04 	call	0x952	; 0x952 <gfx_mono_generic_draw_line>
	}

	if (pattern_bm & (1 << 4)) {
    1e68:	f4 fe       	sbrs	r15, 4
    1e6a:	0d c0       	rjmp	.+26     	; 0x1e86 <lcd_test+0xca>
		// TEST 5
		gfx_mono_generic_draw_rect(        70, 48, 40, 40, GFX_PIXEL_SET);
    1e6c:	01 e0       	ldi	r16, 0x01	; 1
    1e6e:	28 e2       	ldi	r18, 0x28	; 40
    1e70:	48 e2       	ldi	r20, 0x28	; 40
    1e72:	60 e3       	ldi	r22, 0x30	; 48
    1e74:	86 e4       	ldi	r24, 0x46	; 70
    1e76:	0e 94 2b 05 	call	0xa56	; 0xa56 <gfx_mono_generic_draw_rect>
		gfx_mono_generic_draw_filled_rect(170, 48, 40, 40, GFX_PIXEL_SET);
    1e7a:	28 e2       	ldi	r18, 0x28	; 40
    1e7c:	48 e2       	ldi	r20, 0x28	; 40
    1e7e:	60 e3       	ldi	r22, 0x30	; 48
    1e80:	8a ea       	ldi	r24, 0xAA	; 170
    1e82:	0e 94 4f 05 	call	0xa9e	; 0xa9e <gfx_mono_generic_draw_filled_rect>
	}

	if (pattern_bm & (1 << 5)) {
    1e86:	f5 fe       	sbrs	r15, 5
    1e88:	0d c0       	rjmp	.+26     	; 0x1ea4 <lcd_test+0xe8>
		// TEST 6
		gfx_mono_generic_draw_circle(       10, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    1e8a:	0f ef       	ldi	r16, 0xFF	; 255
    1e8c:	21 e0       	ldi	r18, 0x01	; 1
    1e8e:	4a e0       	ldi	r20, 0x0A	; 10
    1e90:	60 e5       	ldi	r22, 0x50	; 80
    1e92:	8a e0       	ldi	r24, 0x0A	; 10
    1e94:	0e 94 69 05 	call	0xad2	; 0xad2 <gfx_mono_generic_draw_circle>
		gfx_mono_generic_draw_filled_circle(40, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    1e98:	21 e0       	ldi	r18, 0x01	; 1
    1e9a:	4a e0       	ldi	r20, 0x0A	; 10
    1e9c:	60 e5       	ldi	r22, 0x50	; 80
    1e9e:	88 e2       	ldi	r24, 0x28	; 40
    1ea0:	0e 94 27 06 	call	0xc4e	; 0xc4e <gfx_mono_generic_draw_filled_circle>
	}

	if (pattern_bm & (1 << 6)) {
    1ea4:	f6 fe       	sbrs	r15, 6
    1ea6:	07 c0       	rjmp	.+14     	; 0x1eb6 <lcd_test+0xfa>
		// TEST 7
		gfx_mono_draw_string("DF4IAH Smart-LCD", 70, 32, &sysfont);
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	31 e0       	ldi	r19, 0x01	; 1
    1eac:	40 e2       	ldi	r20, 0x20	; 32
    1eae:	66 e4       	ldi	r22, 0x46	; 70
    1eb0:	87 e0       	ldi	r24, 0x07	; 7
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	52 d8       	rcall	.-3932   	; 0xf5a <gfx_mono_draw_string>
	}

	if (pattern_bm & (1 << 7)) {
    1eb6:	ff 20       	and	r15, r15
    1eb8:	14 f4       	brge	.+4      	; 0x1ebe <lcd_test+0x102>
		// TEST 8
		lcd_animation_prepare();
    1eba:	8f dd       	rcall	.-1250   	; 0x19da <lcd_animation_prepare>
		lcd_animation_loop();
    1ebc:	38 de       	rcall	.-912    	; 0x1b2e <lcd_animation_loop>
	}
}
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	1f 91       	pop	r17
    1ec4:	0f 91       	pop	r16
    1ec6:	ff 90       	pop	r15
    1ec8:	08 95       	ret

00001eca <lcd_get_sysfont>:

const void* lcd_get_sysfont(void)
{
	return &sysfont;
}
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	91 e0       	ldi	r25, 0x01	; 1
    1ece:	08 95       	ret

00001ed0 <lcd_init>:
uint8_t lcd_init(void)
{
	uint8_t data;

	/* INIT sequence */
	lcd_bus_write_cmd(0b11100010);									// Reset display
    1ed0:	82 ee       	ldi	r24, 0xE2	; 226
    1ed2:	d4 dc       	rcall	.-1624   	; 0x187c <lcd_bus_write_cmd>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
		barrier();
    1ed8:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1eda:	8b 32       	cpi	r24, 0x2B	; 43
    1edc:	28 e6       	ldi	r18, 0x68	; 104
    1ede:	92 07       	cpc	r25, r18
    1ee0:	d9 f7       	brne	.-10     	; 0x1ed8 <lcd_init+0x8>
	delay_ms(20);													// Wait for the panel to get ready in case one is attached to the bus

	data = lcd_bus_read_status();									// Get current status
    1ee2:	b6 dc       	rcall	.-1684   	; 0x1850 <lcd_bus_read_status>
	if (!(data & C_LCD_STATUS_M)) {
    1ee4:	88 23       	and	r24, r24
    1ee6:	2c f0       	brlt	.+10     	; 0x1ef2 <lcd_init+0x22>
		/* LCD panel reacts correctly - resume with INIT sequence */
		lcd_enable(true);
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	11 dd       	rcall	.-1502   	; 0x190e <lcd_enable>
		lcd_cls();													// Clear screen
    1eec:	5d dd       	rcall	.-1350   	; 0x19a8 <lcd_cls>
		return 0;													// Return OK
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	08 95       	ret

	} else {
		return 1;													// Return failure
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    1ef4:	08 95       	ret

00001ef6 <lcd_shutdown>:

void lcd_shutdown(void)
{
	lcd_bus_write_cmd(0b11100010);									// Reset display
    1ef6:	82 ee       	ldi	r24, 0xE2	; 226
    1ef8:	c1 dc       	rcall	.-1662   	; 0x187c <lcd_bus_write_cmd>
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
		barrier();
    1efe:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1f00:	8b 36       	cpi	r24, 0x6B	; 107
    1f02:	2a e0       	ldi	r18, 0x0A	; 10
    1f04:	92 07       	cpc	r25, r18
    1f06:	d9 f7       	brne	.-10     	; 0x1efe <lcd_shutdown+0x8>
	delay_ms(2);													// Wait for the energy to dissipate
}
    1f08:	08 95       	ret

00001f0a <s_twi_tx_done>:
}

static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
    1f0a:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <s_tx_next_len>
    1f0e:	22 23       	and	r18, r18
    1f10:	71 f0       	breq	.+28     	; 0x1f2e <s_twi_tx_done+0x24>
    1f12:	e2 2f       	mov	r30, r18
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	e9 54       	subi	r30, 0x49	; 73
    1f18:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1a:	86 eb       	ldi	r24, 0xB6	; 182
    1f1c:	91 e0       	ldi	r25, 0x01	; 1
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
			s_tx_d[idx] = s_tx_next_d[idx];
    1f1e:	12 92       	st	-Z, r1
static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
    1f20:	e8 17       	cp	r30, r24
    1f22:	f9 07       	cpc	r31, r25
    1f24:	e1 f7       	brne	.-8      	; 0x1f1e <s_twi_tx_done+0x14>
			s_tx_d[idx] = s_tx_next_d[idx];
		}
		s_tx_len = s_tx_next_len;
    1f26:	20 93 be 01 	sts	0x01BE, r18	; 0x8001be <s_tx_len>
		s_tx_next_len = 0;
    1f2a:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <s_tx_next_len>
    1f2e:	08 95       	ret

00001f30 <__vector_24__bottom>:
	}
}


uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur)
{
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	d6 2f       	mov	r29, r22
    1f3a:	c4 2f       	mov	r28, r20
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur;

	switch(tws) {
    1f3c:	08 2f       	mov	r16, r24
    1f3e:	10 e0       	ldi	r17, 0x00	; 0
    1f40:	f8 01       	movw	r30, r16
    1f42:	38 97       	sbiw	r30, 0x08	; 8
    1f44:	e1 3c       	cpi	r30, 0xC1	; 193
    1f46:	f1 05       	cpc	r31, r1
    1f48:	08 f0       	brcs	.+2      	; 0x1f4c <__vector_24__bottom+0x1c>
    1f4a:	fb c0       	rjmp	.+502    	; 0x2142 <__vector_24__bottom+0x212>
    1f4c:	ec 5c       	subi	r30, 0xCC	; 204
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	d9 c5       	rjmp	.+2994   	; 0x2b04 <__tablejump2__>

	/* Master Transmitter Mode */

	case 0x08:									// Start condition transmitted
		s_tx_lock = 1;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <s_tx_lock>
		pos_o = 0;
    1f58:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <pos_o.2507>

		cnt_o = 2;								// TEST
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <cnt_o.2509>
		s_tx_d[0] = (0x12 << TWD1) | (0b0 << TWD0);	// TEST
    1f62:	e6 eb       	ldi	r30, 0xB6	; 182
    1f64:	f1 e0       	ldi	r31, 0x01	; 1
    1f66:	84 e2       	ldi	r24, 0x24	; 36
    1f68:	80 83       	st	Z, r24
		s_tx_d[1] = 0x34;						// TEST
    1f6a:	84 e3       	ldi	r24, 0x34	; 52
    1f6c:	81 83       	std	Z+1, r24	; 0x01
		s_tx_d[2] = 0x56;						// TEST
    1f6e:	86 e5       	ldi	r24, 0x56	; 86
    1f70:	82 83       	std	Z+2, r24	; 0x02
		s_tx_d[3] = 0x78;						// TEST
    1f72:	88 e7       	ldi	r24, 0x78	; 120
    1f74:	83 83       	std	Z+3, r24	; 0x03
		s_tx_d[4] = 0x9a;						// TEST
    1f76:	8a e9       	ldi	r24, 0x9A	; 154
    1f78:	84 83       	std	Z+4, r24	; 0x04

		//twcr_new &= ~_BV(TWSTA);	// TODO: self-clearing?
		// fall-through.
	case 0x10:									// Repeated start condition transmitted
		nop();
    1f7a:	00 00       	nop
		// fall-through.
	case 0x18:									// SLA+W transmitted and ACK received
		TWDR = s_tx_d[pos_o++];
    1f7c:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <pos_o.2507>
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	8e 0f       	add	r24, r30
    1f84:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <pos_o.2507>
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	ea 54       	subi	r30, 0x4A	; 74
    1f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8e:	80 81       	ld	r24, Z
    1f90:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		break;
    1f94:	d7 c0       	rjmp	.+430    	; 0x2144 <__vector_24__bottom+0x214>

	case 0x20:									// SLA+W transmitted and NACK received
		twcr_new |= _BV(TWSTO);					// Send STOP
    1f96:	c0 61       	ori	r28, 0x10	; 16
		break;
    1f98:	d5 c0       	rjmp	.+426    	; 0x2144 <__vector_24__bottom+0x214>

	case 0x28:									// Data byte sent and ACK received
		if (pos_o < cnt_o) {
    1f9a:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <pos_o.2507>
    1f9e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <cnt_o.2509>
    1fa2:	e8 17       	cp	r30, r24
    1fa4:	58 f4       	brcc	.+22     	; 0x1fbc <__vector_24__bottom+0x8c>
			TWDR = s_tx_d[pos_o++];				// Send new data byte
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	8e 0f       	add	r24, r30
    1faa:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <pos_o.2507>
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	ea 54       	subi	r30, 0x4A	; 74
    1fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb4:	80 81       	ld	r24, Z
    1fb6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1fba:	c4 c0       	rjmp	.+392    	; 0x2144 <__vector_24__bottom+0x214>
		} else {
			twcr_new |= _BV(TWSTO);				// Send STOP - no more data available
    1fbc:	c0 61       	ori	r28, 0x10	; 16
			s_tx_lock = 0;
    1fbe:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <s_tx_lock>
			s_twi_tx_done();					// Message sent
    1fc2:	a3 df       	rcall	.-186    	; 0x1f0a <s_twi_tx_done>
    1fc4:	bf c0       	rjmp	.+382    	; 0x2144 <__vector_24__bottom+0x214>
		}
		break;

	case 0x30:									// Data byte sent and NACK received
		twcr_new |= _BV(TWSTO);					// Send STOP - due to an error or slave not ready situation
    1fc6:	c0 61       	ori	r28, 0x10	; 16
		s_tx_lock = 0;
    1fc8:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <s_tx_lock>
		s_twi_tx_done();						// Message failure
    1fcc:	9e df       	rcall	.-196    	; 0x1f0a <s_twi_tx_done>
		break;
    1fce:	ba c0       	rjmp	.+372    	; 0x2144 <__vector_24__bottom+0x214>

	case 0x38:									// Arbitration lost
		twcr_new |= _BV(TWSTA);					// Send START (again)
    1fd0:	c0 62       	ori	r28, 0x20	; 32
		break;
    1fd2:	b8 c0       	rjmp	.+368    	; 0x2144 <__vector_24__bottom+0x214>


	/* Slave Receiver Mode */

	case 0x60:									// SLA+W received and ACK sent
		nop();
    1fd4:	00 00       	nop
		// fall-through.
	case 0x68:
		s_rx_lock = 1;
    1fd6:	11 e0       	ldi	r17, 0x01	; 1
    1fd8:	10 93 b5 01 	sts	0x01B5, r17	; 0x8001b5 <s_rx_lock>
		mem_set(s_rx_d, 8, 0x00);
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	68 e0       	ldi	r22, 0x08	; 8
    1fe0:	8d ea       	ldi	r24, 0xAD	; 173
    1fe2:	91 e0       	ldi	r25, 0x01	; 1
    1fe4:	fe d0       	rcall	.+508    	; 0x21e2 <mem_set>
		s_rx_d[0] = twd;						// Target address
    1fe6:	d0 93 ad 01 	sts	0x01AD, r29	; 0x8001ad <s_rx_d>
		pos_i = 1;								// Starting of reception
    1fea:	10 93 aa 01 	sts	0x01AA, r17	; 0x8001aa <pos_i.2506>
		twcr_new |= _BV(TWEA);					// Send after next coming data byte ACK
    1fee:	c0 64       	ori	r28, 0x40	; 64
		break;
    1ff0:	a9 c0       	rjmp	.+338    	; 0x2144 <__vector_24__bottom+0x214>

	case 0x70:									// GCA received and ACK sent
		nop();
    1ff2:	00 00       	nop
		// fall-through.
	case 0x78:
		s_rx_lock = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <s_rx_lock>
		s_rx_d[0] = twd;						// GCA
    1ffa:	d0 93 ad 01 	sts	0x01AD, r29	; 0x8001ad <s_rx_d>
		pos_i = 1;								// Starting of reception
    1ffe:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <pos_i.2506>
		twcr_new |= _BV(TWEA);					// Send after next coming data byte ACK
    2002:	c0 64       	ori	r28, 0x40	; 64
		break;
    2004:	9f c0       	rjmp	.+318    	; 0x2144 <__vector_24__bottom+0x214>

	case 0x80:									// Data after SLA+W received
		nop();
    2006:	00 00       	nop
		// fall-through.
	case 0x90:
		if (cnt_i != 0b111) {					// Closed parameter form
    2008:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <cnt_i.2508>
    200c:	87 30       	cpi	r24, 0x07	; 7
    200e:	b1 f0       	breq	.+44     	; 0x203c <__vector_24__bottom+0x10c>
			if (pos_i <= 0b111) {
    2010:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <pos_i.2506>
    2014:	88 30       	cpi	r24, 0x08	; 8
    2016:	28 f4       	brcc	.+10     	; 0x2022 <__vector_24__bottom+0xf2>
				s_rx_d[pos_i] = twd;
    2018:	e8 2f       	mov	r30, r24
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	e3 55       	subi	r30, 0x53	; 83
    201e:	fe 4f       	sbci	r31, 0xFE	; 254
    2020:	d0 83       	st	Z, r29
			}
			if (pos_i == 1) {
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	21 f4       	brne	.+8      	; 0x202e <__vector_24__bottom+0xfe>
						break;
#endif

					default:
						//cnt_i = 3;
						cnt_i = 13;
    2026:	9d e0       	ldi	r25, 0x0D	; 13
    2028:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <cnt_i.2508>
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <__vector_24__bottom+0x102>
				}
			}
			if (pos_i < 0b111) {
    202e:	87 30       	cpi	r24, 0x07	; 7
    2030:	18 f4       	brcc	.+6      	; 0x2038 <__vector_24__bottom+0x108>
				++pos_i;
    2032:	8f 5f       	subi	r24, 0xFF	; 255
    2034:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <pos_i.2506>

			if (pos_i <= cnt_i) {
				twcr_new |= _BV(TWEA);			// Send after next coming data byte ACK
			} else {
				//twcr_new &= ~_BV(TWEA);			// Send after next coming data byte NACK
				twcr_new |= _BV(TWEA); // TEST
    2038:	c0 64       	ori	r28, 0x40	; 64
    203a:	84 c0       	rjmp	.+264    	; 0x2144 <__vector_24__bottom+0x214>
			}

		} else {								// Open parameter form
			s_rx_d[2] = twd;
    203c:	d0 93 af 01 	sts	0x01AF, r29	; 0x8001af <s_rx_d+0x2>
			if (!s_twi_rcvd_command_open_form(s_rx_d, ++pos_i)) {
				twcr_new |= _BV(TWEA);			// Send after next coming data byte ACK
			} else {
				//twcr_new &= ~_BV(TWEA);			// Send after next coming data byte NACK
				twcr_new |= _BV(TWEA); // TEST
    2040:	c0 64       	ori	r28, 0x40	; 64
				pos_i = 0;
    2042:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <pos_i.2506>
				cnt_i = 0;
    2046:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <cnt_i.2508>
				mem_set(s_rx_d, 8, 0x00);
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	68 e0       	ldi	r22, 0x08	; 8
    204e:	8d ea       	ldi	r24, 0xAD	; 173
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	c7 d0       	rcall	.+398    	; 0x21e2 <mem_set>
    2054:	77 c0       	rjmp	.+238    	; 0x2144 <__vector_24__bottom+0x214>
			}
		}
		break;

	case 0x88:									// NACK after last data byte sent
		nop();
    2056:	00 00       	nop
		// fall-through.
	case 0x98:
		if (cnt_i != 0b111) {
    2058:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <cnt_i.2508>
    205c:	87 30       	cpi	r24, 0x07	; 7
    205e:	39 f0       	breq	.+14     	; 0x206e <__vector_24__bottom+0x13e>
static void s_twi_rcvd_command_closed_form(uint8_t data[], uint8_t cnt)
{
	uint8_t isGCA	= !data[0];
	uint8_t cmd		=  data[1];

	if (isGCA) {
    2060:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <s_rx_d>
    2064:	81 11       	cpse	r24, r1
    2066:	02 c0       	rjmp	.+4      	; 0x206c <__vector_24__bottom+0x13c>
		nop();
    2068:	00 00       	nop
    206a:	01 c0       	rjmp	.+2      	; 0x206e <__vector_24__bottom+0x13e>
				// do nothing
			}
		}

	} else {
		nop();
    206c:	00 00       	nop
		if (cnt_i != 0b111) {
			s_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
		} else {
			s_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    206e:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <pos_i.2506>
		cnt_i = 0;
    2072:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <cnt_i.2508>
		mem_set(s_rx_d, 8, 0x00);
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	68 e0       	ldi	r22, 0x08	; 8
    207a:	8d ea       	ldi	r24, 0xAD	; 173
    207c:	91 e0       	ldi	r25, 0x01	; 1
    207e:	b1 d0       	rcall	.+354    	; 0x21e2 <mem_set>
		s_rx_lock = 0;
    2080:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <s_rx_lock>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    2084:	c0 64       	ori	r28, 0x40	; 64
		break;
    2086:	5e c0       	rjmp	.+188    	; 0x2144 <__vector_24__bottom+0x214>

	case 0xA0:									// STOP or RESTART received while still addressed as slave
		if (cnt_i != 0b111) {
    2088:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <cnt_i.2508>
    208c:	87 30       	cpi	r24, 0x07	; 7
    208e:	39 f0       	breq	.+14     	; 0x209e <__vector_24__bottom+0x16e>
static void s_twi_rcvd_command_closed_form(uint8_t data[], uint8_t cnt)
{
	uint8_t isGCA	= !data[0];
	uint8_t cmd		=  data[1];

	if (isGCA) {
    2090:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <s_rx_d>
    2094:	81 11       	cpse	r24, r1
    2096:	02 c0       	rjmp	.+4      	; 0x209c <__vector_24__bottom+0x16c>
		nop();
    2098:	00 00       	nop
    209a:	01 c0       	rjmp	.+2      	; 0x209e <__vector_24__bottom+0x16e>
				// do nothing
			}
		}

	} else {
		nop();
    209c:	00 00       	nop
		if (cnt_i != 0b111) {
			s_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
		} else {
			s_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    209e:	c0 64       	ori	r28, 0x40	; 64
		pos_i = 0;
    20a0:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <pos_i.2506>
		cnt_i = 0;
    20a4:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <cnt_i.2508>
		mem_set(s_rx_d, 8, 0x00);
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	68 e0       	ldi	r22, 0x08	; 8
    20ac:	8d ea       	ldi	r24, 0xAD	; 173
    20ae:	91 e0       	ldi	r25, 0x01	; 1
    20b0:	98 d0       	rcall	.+304    	; 0x21e2 <mem_set>
		s_rx_lock = 0;
    20b2:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <s_rx_lock>
		break;
    20b6:	46 c0       	rjmp	.+140    	; 0x2144 <__vector_24__bottom+0x214>


	/* Slave Transmitter Mode */

	case 0xA8:									// SLA+R received and ACK has been returned
		nop();
    20b8:	00 00       	nop
		// fall-through.
	case 0xB0:
		s_rx_lock = 1;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <s_rx_lock>
		pos_o = 0;
    20c0:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <pos_o.2507>
		TWDR = cnt_o > pos_o ?  s_rx_d[pos_o++] : 0;
    20c4:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <cnt_o.2509>
    20c8:	88 23       	and	r24, r24
    20ca:	31 f0       	breq	.+12     	; 0x20d8 <__vector_24__bottom+0x1a8>
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <pos_o.2507>
    20d2:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <s_rx_d>
    20d6:	01 c0       	rjmp	.+2      	; 0x20da <__vector_24__bottom+0x1aa>
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

		if (cnt_o > pos_o) {
    20de:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <cnt_o.2509>
    20e2:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <pos_o.2507>
    20e6:	89 17       	cp	r24, r25
    20e8:	10 f4       	brcc	.+4      	; 0x20ee <__vector_24__bottom+0x1be>
			twcr_new |= _BV(TWEA);				// More data to send ACK
    20ea:	c0 64       	ori	r28, 0x40	; 64
    20ec:	2b c0       	rjmp	.+86     	; 0x2144 <__vector_24__bottom+0x214>
		} else {
			twcr_new &= ~_BV(TWEA);				// No more data to send NACK
    20ee:	cf 7b       	andi	r28, 0xBF	; 191
    20f0:	29 c0       	rjmp	.+82     	; 0x2144 <__vector_24__bottom+0x214>
		}
		break;

	case 0xB8:									// Data sent and ACK has been returned
		TWDR = cnt_o > pos_o ?  s_rx_d[pos_o++] : 0;
    20f2:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <pos_o.2507>
    20f6:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <cnt_o.2509>
    20fa:	e8 17       	cp	r30, r24
    20fc:	48 f4       	brcc	.+18     	; 0x2110 <__vector_24__bottom+0x1e0>
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	8e 0f       	add	r24, r30
    2102:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <pos_o.2507>
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	e3 55       	subi	r30, 0x53	; 83
    210a:	fe 4f       	sbci	r31, 0xFE	; 254
    210c:	80 81       	ld	r24, Z
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <__vector_24__bottom+0x1e2>
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		if (cnt_o > pos_o) {
    2116:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <cnt_o.2509>
    211a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <pos_o.2507>
    211e:	89 17       	cp	r24, r25
    2120:	10 f4       	brcc	.+4      	; 0x2126 <__vector_24__bottom+0x1f6>
			twcr_new |= _BV(TWEA);				// More data to send ACK
    2122:	c0 64       	ori	r28, 0x40	; 64
    2124:	0f c0       	rjmp	.+30     	; 0x2144 <__vector_24__bottom+0x214>
			} else {
			twcr_new &= ~_BV(TWEA);				// No more data to send NACK
    2126:	cf 7b       	andi	r28, 0xBF	; 191
    2128:	0d c0       	rjmp	.+26     	; 0x2144 <__vector_24__bottom+0x214>
		}
		break;

	case 0xC0:									// Data sent and NACK has been returned
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    212a:	c0 64       	ori	r28, 0x40	; 64
		pos_o = 0;
    212c:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <pos_o.2507>
		cnt_o = 0;
    2130:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <cnt_o.2509>
		s_rx_lock = 0;
    2134:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <s_rx_lock>
		break;
    2138:	05 c0       	rjmp	.+10     	; 0x2144 <__vector_24__bottom+0x214>

	case 0xC8:									// Last data sent and ACK has been returned
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    213a:	c0 64       	ori	r28, 0x40	; 64
		s_rx_lock = 0;
    213c:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <s_rx_lock>
		/* message transmitted successfully in slave mode */
		break;
    2140:	01 c0       	rjmp	.+2      	; 0x2144 <__vector_24__bottom+0x214>
		
	default:
		nop();
    2142:	00 00       	nop
	}

	return twcr_new;
}
    2144:	8c 2f       	mov	r24, r28
    2146:	df 91       	pop	r29
    2148:	cf 91       	pop	r28
    214a:	1f 91       	pop	r17
    214c:	0f 91       	pop	r16
    214e:	08 95       	ret

00002150 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    2150:	08 95       	ret

00002152 <get_abs_time>:
/* MAIN section */

void halt(void)
{
	/* MAIN Loop Shutdown */
	runmode = 0;
    2152:	8f 92       	push	r8
    2154:	9f 92       	push	r9
    2156:	af 92       	push	r10
    2158:	bf 92       	push	r11
    215a:	cf 92       	push	r12
    215c:	df 92       	push	r13
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	1f 92       	push	r1
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	8f b7       	in	r24, 0x3f	; 63
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	f8 94       	cli
    2172:	99 81       	ldd	r25, Y+1	; 0x01
    2174:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2178:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    217c:	c0 90 dc 01 	lds	r12, 0x01DC	; 0x8001dc <g_timer_abs_msb>
    2180:	d0 90 dd 01 	lds	r13, 0x01DD	; 0x8001dd <g_timer_abs_msb+0x1>
    2184:	e0 90 de 01 	lds	r14, 0x01DE	; 0x8001de <g_timer_abs_msb+0x2>
    2188:	f0 90 df 01 	lds	r15, 0x01DF	; 0x8001df <g_timer_abs_msb+0x3>
    218c:	9f bf       	out	0x3f, r25	; 63
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	92 2b       	or	r25, r18
    2192:	bc 01       	movw	r22, r24
    2194:	99 0f       	add	r25, r25
    2196:	88 0b       	sbc	r24, r24
    2198:	99 0b       	sbc	r25, r25
    219a:	8a d3       	rcall	.+1812   	; 0x28b0 <__floatsisf>
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	34 e2       	ldi	r19, 0x24	; 36
    21a0:	44 ef       	ldi	r20, 0xF4	; 244
    21a2:	5a e4       	ldi	r21, 0x4A	; 74
    21a4:	ea d2       	rcall	.+1492   	; 0x277a <__divsf3>
    21a6:	4b 01       	movw	r8, r22
    21a8:	5c 01       	movw	r10, r24
    21aa:	c7 01       	movw	r24, r14
    21ac:	b6 01       	movw	r22, r12
    21ae:	7e d3       	rcall	.+1788   	; 0x28ac <__floatunsisf>
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	54 e4       	ldi	r21, 0x44	; 68
    21b8:	2f d4       	rcall	.+2142   	; 0x2a18 <__mulsf3>
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	34 e2       	ldi	r19, 0x24	; 36
    21be:	44 ef       	ldi	r20, 0xF4	; 244
    21c0:	5a e4       	ldi	r21, 0x4A	; 74
    21c2:	db d2       	rcall	.+1462   	; 0x277a <__divsf3>
    21c4:	a5 01       	movw	r20, r10
    21c6:	94 01       	movw	r18, r8
    21c8:	70 d2       	rcall	.+1248   	; 0x26aa <__addsf3>
    21ca:	0f 90       	pop	r0
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	ff 90       	pop	r15
    21d2:	ef 90       	pop	r14
    21d4:	df 90       	pop	r13
    21d6:	cf 90       	pop	r12
    21d8:	bf 90       	pop	r11
    21da:	af 90       	pop	r10
    21dc:	9f 90       	pop	r9
    21de:	8f 90       	pop	r8
    21e0:	08 95       	ret

000021e2 <mem_set>:
    21e2:	66 23       	and	r22, r22
    21e4:	39 f0       	breq	.+14     	; 0x21f4 <mem_set+0x12>
    21e6:	fc 01       	movw	r30, r24
    21e8:	86 0f       	add	r24, r22
    21ea:	91 1d       	adc	r25, r1
    21ec:	41 93       	st	Z+, r20
    21ee:	e8 17       	cp	r30, r24
    21f0:	f9 07       	cpc	r31, r25
    21f2:	e1 f7       	brne	.-8      	; 0x21ec <mem_set+0xa>
    21f4:	08 95       	ret

000021f6 <s_task>:
    21f6:	4f 92       	push	r4
    21f8:	5f 92       	push	r5
    21fa:	6f 92       	push	r6
    21fc:	7f 92       	push	r7
    21fe:	8f 92       	push	r8
    2200:	9f 92       	push	r9
    2202:	af 92       	push	r10
    2204:	bf 92       	push	r11
    2206:	cf 92       	push	r12
    2208:	df 92       	push	r13
    220a:	ef 92       	push	r14
    220c:	ff 92       	push	r15
    220e:	0f 93       	push	r16
    2210:	1f 93       	push	r17
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	66 97       	sbiw	r28, 0x16	; 22
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	8f b7       	in	r24, 0x3f	; 63
    2228:	8a 8b       	std	Y+18, r24	; 0x12
    222a:	f8 94       	cli
    222c:	8a 89       	ldd	r24, Y+18	; 0x12
    222e:	40 90 d7 01 	lds	r4, 0x01D7	; 0x8001d7 <g_adc_ldr>
    2232:	50 90 d8 01 	lds	r5, 0x01D8	; 0x8001d8 <g_adc_ldr+0x1>
    2236:	60 90 d9 01 	lds	r6, 0x01D9	; 0x8001d9 <g_adc_ldr+0x2>
    223a:	70 90 da 01 	lds	r7, 0x01DA	; 0x8001da <g_adc_ldr+0x3>
    223e:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <g_adc_ldr_last>
    2242:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <g_adc_ldr_last+0x1>
    2246:	40 91 d5 01 	lds	r20, 0x01D5	; 0x8001d5 <g_adc_ldr_last+0x2>
    224a:	50 91 d6 01 	lds	r21, 0x01D6	; 0x8001d6 <g_adc_ldr_last+0x3>
    224e:	c0 90 cf 01 	lds	r12, 0x01CF	; 0x8001cf <g_adc_temp>
    2252:	d0 90 d0 01 	lds	r13, 0x01D0	; 0x8001d0 <g_adc_temp+0x1>
    2256:	e0 90 d1 01 	lds	r14, 0x01D1	; 0x8001d1 <g_adc_temp+0x2>
    225a:	f0 90 d2 01 	lds	r15, 0x01D2	; 0x8001d2 <g_adc_temp+0x3>
    225e:	80 90 cb 01 	lds	r8, 0x01CB	; 0x8001cb <g_adc_temp_last>
    2262:	90 90 cc 01 	lds	r9, 0x01CC	; 0x8001cc <g_adc_temp_last+0x1>
    2266:	a0 90 cd 01 	lds	r10, 0x01CD	; 0x8001cd <g_adc_temp_last+0x2>
    226a:	b0 90 ce 01 	lds	r11, 0x01CE	; 0x8001ce <g_adc_temp_last+0x3>
    226e:	8b 8a       	std	Y+19, r8	; 0x13
    2270:	9c 8a       	std	Y+20, r9	; 0x14
    2272:	ad 8a       	std	Y+21, r10	; 0x15
    2274:	be 8a       	std	Y+22, r11	; 0x16
    2276:	8f bf       	out	0x3f, r24	; 63
    2278:	c3 01       	movw	r24, r6
    227a:	b2 01       	movw	r22, r4
    227c:	15 d2       	rcall	.+1066   	; 0x26a8 <__subsf3>
    227e:	4b 01       	movw	r8, r22
    2280:	5c 01       	movw	r10, r24
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	48 ec       	ldi	r20, 0xC8	; 200
    2288:	51 ec       	ldi	r21, 0xC1	; 193
    228a:	73 d2       	rcall	.+1254   	; 0x2772 <__cmpsf2>
    228c:	18 16       	cp	r1, r24
    228e:	54 f4       	brge	.+20     	; 0x22a4 <s_task+0xae>
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	48 ec       	ldi	r20, 0xC8	; 200
    2296:	51 e4       	ldi	r21, 0x41	; 65
    2298:	c5 01       	movw	r24, r10
    229a:	b4 01       	movw	r22, r8
    229c:	b9 d3       	rcall	.+1906   	; 0x2a10 <__gesf2>
    229e:	88 23       	and	r24, r24
    22a0:	0c f4       	brge	.+2      	; 0x22a4 <s_task+0xae>
    22a2:	53 c0       	rjmp	.+166    	; 0x234a <s_task+0x154>
    22a4:	a3 01       	movw	r20, r6
    22a6:	92 01       	movw	r18, r4
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	70 ec       	ldi	r23, 0xC0	; 192
    22ac:	8f e7       	ldi	r24, 0x7F	; 127
    22ae:	94 e4       	ldi	r25, 0x44	; 68
    22b0:	fb d1       	rcall	.+1014   	; 0x26a8 <__subsf3>
    22b2:	d0 d2       	rcall	.+1440   	; 0x2854 <__fixunssfsi>
    22b4:	4b 01       	movw	r8, r22
    22b6:	5c 01       	movw	r10, r24
    22b8:	86 eb       	ldi	r24, 0xB6	; 182
    22ba:	88 16       	cp	r8, r24
    22bc:	83 e0       	ldi	r24, 0x03	; 3
    22be:	98 06       	cpc	r9, r24
    22c0:	b8 f4       	brcc	.+46     	; 0x22f0 <s_task+0xfa>
    22c2:	b4 01       	movw	r22, r8
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	f1 d2       	rcall	.+1506   	; 0x28ac <__floatunsisf>
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e4       	ldi	r19, 0x40	; 64
    22ce:	4d e6       	ldi	r20, 0x6D	; 109
    22d0:	54 e4       	ldi	r21, 0x44	; 68
    22d2:	53 d2       	rcall	.+1190   	; 0x277a <__divsf3>
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	53 e4       	ldi	r21, 0x43	; 67
    22dc:	9d d3       	rcall	.+1850   	; 0x2a18 <__mulsf3>
    22de:	ba d2       	rcall	.+1396   	; 0x2854 <__fixunssfsi>
    22e0:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    22e4:	e0 eb       	ldi	r30, 0xB0	; 176
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	80 68       	ori	r24, 0x80	; 128
    22ec:	80 83       	st	Z, r24
    22ee:	07 c0       	rjmp	.+14     	; 0x22fe <s_task+0x108>
    22f0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    22f4:	e0 eb       	ldi	r30, 0xB0	; 176
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	8f 73       	andi	r24, 0x3F	; 63
    22fc:	80 83       	st	Z, r24
    22fe:	9f 92       	push	r9
    2300:	8f 92       	push	r8
    2302:	88 e1       	ldi	r24, 0x18	; 24
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	9f 93       	push	r25
    2308:	8f 93       	push	r24
    230a:	8e 01       	movw	r16, r28
    230c:	0f 5f       	subi	r16, 0xFF	; 255
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	1f 93       	push	r17
    2312:	0f 93       	push	r16
    2314:	11 d4       	rcall	.+2082   	; 0x2b38 <sprintf>
    2316:	d9 dd       	rcall	.-1102   	; 0x1eca <lcd_get_sysfont>
    2318:	9c 01       	movw	r18, r24
    231a:	41 e5       	ldi	r20, 0x51	; 81
    231c:	68 e7       	ldi	r22, 0x78	; 120
    231e:	c8 01       	movw	r24, r16
    2320:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gfx_mono_draw_string>
    2324:	8f b7       	in	r24, 0x3f	; 63
    2326:	89 8b       	std	Y+17, r24	; 0x11
    2328:	f8 94       	cli
    232a:	89 89       	ldd	r24, Y+17	; 0x11
    232c:	40 92 d3 01 	sts	0x01D3, r4	; 0x8001d3 <g_adc_ldr_last>
    2330:	50 92 d4 01 	sts	0x01D4, r5	; 0x8001d4 <g_adc_ldr_last+0x1>
    2334:	60 92 d5 01 	sts	0x01D5, r6	; 0x8001d5 <g_adc_ldr_last+0x2>
    2338:	70 92 d6 01 	sts	0x01D6, r7	; 0x8001d6 <g_adc_ldr_last+0x3>
    233c:	8f bf       	out	0x3f, r24	; 63
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	2b 89       	ldd	r18, Y+19	; 0x13
    234c:	3c 89       	ldd	r19, Y+20	; 0x14
    234e:	4d 89       	ldd	r20, Y+21	; 0x15
    2350:	5e 89       	ldd	r21, Y+22	; 0x16
    2352:	c7 01       	movw	r24, r14
    2354:	b6 01       	movw	r22, r12
    2356:	a8 d1       	rcall	.+848    	; 0x26a8 <__subsf3>
    2358:	4b 01       	movw	r8, r22
    235a:	5c 01       	movw	r10, r24
    235c:	2a e0       	ldi	r18, 0x0A	; 10
    235e:	37 ed       	ldi	r19, 0xD7	; 215
    2360:	43 ea       	ldi	r20, 0xA3	; 163
    2362:	5b eb       	ldi	r21, 0xBB	; 187
    2364:	06 d2       	rcall	.+1036   	; 0x2772 <__cmpsf2>
    2366:	18 16       	cp	r1, r24
    2368:	4c f4       	brge	.+18     	; 0x237c <s_task+0x186>
    236a:	2a e0       	ldi	r18, 0x0A	; 10
    236c:	37 ed       	ldi	r19, 0xD7	; 215
    236e:	43 ea       	ldi	r20, 0xA3	; 163
    2370:	5b e3       	ldi	r21, 0x3B	; 59
    2372:	c5 01       	movw	r24, r10
    2374:	b4 01       	movw	r22, r8
    2376:	4c d3       	rcall	.+1688   	; 0x2a10 <__gesf2>
    2378:	88 23       	and	r24, r24
    237a:	34 f1       	brlt	.+76     	; 0x23c8 <s_task+0x1d2>
    237c:	8f b7       	in	r24, 0x3f	; 63
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	f8 94       	cli
    2382:	19 81       	ldd	r17, Y+1	; 0x01
    2384:	29 e1       	ldi	r18, 0x19	; 25
    2386:	37 ec       	ldi	r19, 0xC7	; 199
    2388:	4f ea       	ldi	r20, 0xAF	; 175
    238a:	53 e4       	ldi	r21, 0x43	; 67
    238c:	c7 01       	movw	r24, r14
    238e:	b6 01       	movw	r22, r12
    2390:	8b d1       	rcall	.+790    	; 0x26a8 <__subsf3>
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 ea       	ldi	r19, 0xA0	; 160
    2396:	47 e8       	ldi	r20, 0x87	; 135
    2398:	5f e3       	ldi	r21, 0x3F	; 63
    239a:	3e d3       	rcall	.+1660   	; 0x2a18 <__mulsf3>
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	48 ec       	ldi	r20, 0xC8	; 200
    23a2:	51 e4       	ldi	r21, 0x41	; 65
    23a4:	82 d1       	rcall	.+772    	; 0x26aa <__addsf3>
    23a6:	60 93 c7 01 	sts	0x01C7, r22	; 0x8001c7 <g_temp>
    23aa:	70 93 c8 01 	sts	0x01C8, r23	; 0x8001c8 <g_temp+0x1>
    23ae:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <g_temp+0x2>
    23b2:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <g_temp+0x3>
    23b6:	c0 92 cb 01 	sts	0x01CB, r12	; 0x8001cb <g_adc_temp_last>
    23ba:	d0 92 cc 01 	sts	0x01CC, r13	; 0x8001cc <g_adc_temp_last+0x1>
    23be:	e0 92 cd 01 	sts	0x01CD, r14	; 0x8001cd <g_adc_temp_last+0x2>
    23c2:	f0 92 ce 01 	sts	0x01CE, r15	; 0x8001ce <g_adc_temp_last+0x3>
    23c6:	1f bf       	out	0x3f, r17	; 63
    23c8:	b2 db       	rcall	.-2204   	; 0x1b2e <lcd_animation_loop>
    23ca:	66 96       	adiw	r28, 0x16	; 22
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	ff 90       	pop	r15
    23e0:	ef 90       	pop	r14
    23e2:	df 90       	pop	r13
    23e4:	cf 90       	pop	r12
    23e6:	bf 90       	pop	r11
    23e8:	af 90       	pop	r10
    23ea:	9f 90       	pop	r9
    23ec:	8f 90       	pop	r8
    23ee:	7f 90       	pop	r7
    23f0:	6f 90       	pop	r6
    23f2:	5f 90       	pop	r5
    23f4:	4f 90       	pop	r4
    23f6:	08 95       	ret

000023f8 <main>:
}

int main (void)
{
    23f8:	ef 92       	push	r14
    23fa:	ff 92       	push	r15
    23fc:	0f 93       	push	r16
    23fe:	1f 93       	push	r17
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	00 d0       	rcall	.+0      	; 0x2406 <main+0xe>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <main+0x10>
    2408:	1f 92       	push	r1
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts,
	 * most critical pins are handled first.
	 */

	PORTC = 0b01111110;		// PC0: LDR-ADC in-NoPU, PC1: SW_I in-PU, PC2: SW_Q in-PU, PC3: LCD-CS out-HI
    240e:	8e e7       	ldi	r24, 0x7E	; 126
    2410:	88 b9       	out	0x08, r24	; 8
	DDRC  = 0b00001000;		// PC4: I2C-SDA in-PU-AF-TWI, PC5: I2C-SCL in-PU-AF-TWI, PC6: RESET in-PU, PC7: -
    2412:	88 e0       	ldi	r24, 0x08	; 8
    2414:	87 b9       	out	0x07, r24	; 7

	PORTB = 0b00010100;		// PB0: LCD-CD out-LO, PB1: AUDIO out-AF-OC1A, PB2: SW_P in-PU, PB3: LCDBL out-AF-OC2A,
    2416:	84 e1       	ldi	r24, 0x14	; 20
    2418:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0b11111011;		// PB4: LCD-R/!W out-HI, PB5: LCD-EN out-LO, PB6: LEDRD out-LO, LEDGN out-LO
    241a:	8b ef       	ldi	r24, 0xFB	; 251
    241c:	84 b9       	out	0x04, r24	; 4

	PORTD = 0xff;			// PD0..PD7: LCD-D0..LCD-D7 in-PU
    241e:	8f ef       	ldi	r24, 0xFF	; 255
    2420:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x00;
    2422:	1a b8       	out	0x0a, r1	; 10

	// Analog input: Digital Disable Register
	DIDR0 = 0b00000001;		// PC0: LDR-ADC
    2424:	0f 2e       	mov	r0, r31
    2426:	fe e7       	ldi	r31, 0x7E	; 126
    2428:	ef 2e       	mov	r14, r31
    242a:	f1 2c       	mov	r15, r1
    242c:	f0 2d       	mov	r31, r0
    242e:	11 e0       	ldi	r17, 0x01	; 1
    2430:	f7 01       	movw	r30, r14
    2432:	10 83       	st	Z, r17

	/* Rapid I/O settings */
	s_io_preinit();

	/* Init of sub-modules */
	sysclk_init();	PRR = 0b11101011;			// For debugging this module has to be powered on, again
    2434:	0e 94 a4 03 	call	0x748	; 0x748 <sysclk_init>
    2438:	8b ee       	ldi	r24, 0xEB	; 235
    243a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
static void s_tc_init(void)
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts. */

	/* Timer Synchronous Mode - prepare for  s_tc_start(void) */
	GTCCR = _BV(TSM)							// Timer Synchronous Mode active
    243e:	03 e8       	ldi	r16, 0x83	; 131
    2440:	03 bd       	out	0x23, r16	; 35
	{
	}

	/* TC1 - OC1A: Audio output @ 16-bit counter PWM, used: 10-bit resolution - overflows with 15625 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    2442:	68 e0       	ldi	r22, 0x08	; 8
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	0e 94 bd 03 	call	0x77a	; 0x77a <sysclk_enable_module>

		TCCR1A  = (0b10  << COM1A0)		 		// HI --> LO when compare value is reached - non-inverted PWM mode
    244a:	82 e8       	ldi	r24, 0x82	; 130
    244c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				| (0b10  << WGM10);				// WGM: 0b0110 = Fast PWM 9 bit

		TCCR1B  = ( 0b01 << WGM12)
    2450:	89 e0       	ldi	r24, 0x09	; 9
    2452:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
				| (0b001 << CS10);				// CLKio DIV1 = 8 MHz

		TCNT1H  = 0b00000000           ;		// Clear current value for synchronous start (when restarting without reset)
    2456:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		barrier();
		TCNT1L	=            0b00000000;
    245a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

		OCR1AH  =        0b1           ;		// Mid-range compare value for zero audio output
    245e:	10 93 89 00 	sts	0x0089, r17	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL  =            0b00000000;
    2462:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

		TIMSK1  = _BV(TOIE1);					// TOIE1 interrupt
    2466:	10 93 6f 00 	sts	0x006F, r17	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		TIFR1   = 0b00100111;					// Clear all flags (when restarting without reset)
    246a:	87 e2       	ldi	r24, 0x27	; 39
    246c:	86 bb       	out	0x16, r24	; 22
	}

	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    246e:	60 e4       	ldi	r22, 0x40	; 64
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	0e 94 bd 03 	call	0x77a	; 0x77a <sysclk_enable_module>

		TCCR2A  = (0b10  << COM2A0)				// HI --> LO when compare value is reached - non-inverted PWM mode
    2476:	00 93 b0 00 	sts	0x00B0, r16	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				| (0b11  << WGM20);				// WGM: 0b011 = Fast PWM mode 8 bit

		TCCR2B  = ( 0b0  << WGM22)
    247a:	85 e0       	ldi	r24, 0x05	; 5
    247c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
				| (0b101 << CS20);				// CLKio DIV 128 = 62500 Hz --> / 2**8 = 244 Hz looping rate

		TCNT2   = 0;							// Clear current value for synchronous start (when restarting without reset)
    2480:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

		OCR2A   = 0x00;							// LCD backlight dimmed down
    2484:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

		TIMSK2  = 0b00000000;					// No interrupts
    2488:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		TIFR2   = 0b00000111;					// Clear all flags
    248c:	87 e0       	ldi	r24, 0x07	; 7
    248e:	87 bb       	out	0x17, r24	; 23

		ASSR    = 0;							// No async. TOSC1 mode
    2490:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
}


static void s_adc_init(void)
{
	sysclk_enable_module(POWER_RED_REG0, PRADC_bm);	// enable ADC sub-module
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	0e 94 bd 03 	call	0x77a	; 0x77a <sysclk_enable_module>
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    249c:	f7 01       	movw	r30, r14
    249e:	10 83       	st	Z, r17
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    24a0:	ea e7       	ldi	r30, 0x7A	; 122
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	87 e8       	ldi	r24, 0x87	; 135
    24a6:	80 83       	st	Z, r24
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    24a8:	80 ec       	ldi	r24, 0xC0	; 192
    24aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	adc_disable_digital_inputs(_BV(ADC0D));		// disable the digital input on the ADC0 port

	adc_init(ADC_PRESCALER_DIV128);
	adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);

	ADCSRA |= _BV(ADIF);						// clear interrupt status bit by setting it to clear
    24ae:	80 81       	ld	r24, Z
    24b0:	80 61       	ori	r24, 0x10	; 16
    24b2:	80 83       	st	Z, r24
}

/*  \brief Enable ADC interrupt */
static inline void adc_enable_interrupt(void)
{
	ADCSRA |= (1 << ADIE);
    24b4:	80 81       	ld	r24, Z
    24b6:	88 60       	ori	r24, 0x08	; 8
    24b8:	80 83       	st	Z, r24
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    24ba:	ab e7       	ldi	r26, 0x7B	; 123
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	8c 91       	ld	r24, X
    24c0:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
    24c2:	86 60       	ori	r24, 0x06	; 6
	ADC_ADTS_REG = temp;
    24c4:	8c 93       	st	X, r24
}

/*  \brief Enable ADC Auto Trigger */
static inline void adc_enable_autotrigger(void)
{
	ADCSRA |= (1 << ADATE);
    24c6:	80 81       	ld	r24, Z
    24c8:	80 62       	ori	r24, 0x20	; 32
    24ca:	80 83       	st	Z, r24
	ioport_init();
	s_tc_init();
	s_adc_init();

	/* I/O pins go active here */
	board_init();
    24cc:	41 de       	rcall	.-894    	; 0x2150 <board_init>
//@}
static inline reset_cause_t reset_cause_get_causes(void)
{
#if (MEGA_XX4 ||MEGA_XX4_A || MEGA_XX8 || MEGA_XX8_A || \
	MEGA_XX || MEGA_XX_UN2 || MEGA_XX0_1 || MEGA_RF || MEGA_UNCATEGORIZED) && !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t temp_mcsr = MCUSR ;
    24ce:	84 b7       	in	r24, 0x34	; 52
    24d0:	98 2f       	mov	r25, r24
    24d2:	97 70       	andi	r25, 0x07	; 7

	reset_cause_t rc = reset_cause_get_causes();
	if (rc & CHIP_RESET_CAUSE_EXTRST	||
		rc & CHIP_RESET_CAUSE_BOD_CPU	||
    24d4:	11 f4       	brne	.+4      	; 0x24da <main+0xe2>
		rc & CHIP_RESET_CAUSE_POR		||
    24d6:	81 11       	cpse	r24, r1
    24d8:	37 c0       	rjmp	.+110    	; 0x2548 <main+0x150>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    24da:	8f b7       	in	r24, 0x3f	; 63
    24dc:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    24de:	f8 94       	cli
	return flags;
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05

static void s_reset_global_vars(void)
{
	irqflags_t flags	= cpu_irq_save();

	g_adc_state			= ADC_STATE_PRE_LDR;
    24e2:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <g_adc_state>
	g_adc_ldr			= 0.f;
    24e6:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <g_adc_ldr>
    24ea:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <g_adc_ldr+0x1>
    24ee:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <g_adc_ldr+0x2>
    24f2:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <g_adc_ldr+0x3>
	g_adc_ldr_last		= 0.f;
    24f6:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <g_adc_ldr_last>
    24fa:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <g_adc_ldr_last+0x1>
    24fe:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <g_adc_ldr_last+0x2>
    2502:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <g_adc_ldr_last+0x3>
	g_adc_temp			= 0.f;
    2506:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <g_adc_temp>
    250a:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <g_adc_temp+0x1>
    250e:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <g_adc_temp+0x2>
    2512:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <g_adc_temp+0x3>
	g_adc_temp_last		= 0.f;
    2516:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <g_adc_temp_last>
    251a:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <g_adc_temp_last+0x1>
    251e:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <g_adc_temp_last+0x2>
    2522:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <g_adc_temp_last+0x3>

	g_temp				= 25.f;
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	68 ec       	ldi	r22, 0xC8	; 200
    252c:	71 e4       	ldi	r23, 0x41	; 65
    252e:	40 93 c7 01 	sts	0x01C7, r20	; 0x8001c7 <g_temp>
    2532:	50 93 c8 01 	sts	0x01C8, r21	; 0x8001c8 <g_temp+0x1>
    2536:	60 93 c9 01 	sts	0x01C9, r22	; 0x8001c9 <g_temp+0x2>
    253a:	70 93 ca 01 	sts	0x01CA, r23	; 0x8001ca <g_temp+0x3>
	g_lcdbl_dimmer		= 64;
    253e:	90 e4       	ldi	r25, 0x40	; 64
    2540:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <g_lcdbl_dimmer>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2544:	8f bf       	out	0x3f, r24	; 63
    2546:	0d c0       	rjmp	.+26     	; 0x2562 <main+0x16a>
		rc & CHIP_RESET_CAUSE_POR		||
		!rc) {
		s_reset_global_vars();
	} else {
		/* DEBUG */
		g_u32_DEBUG21 = rc;
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	a0 e0       	ldi	r26, 0x00	; 0
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <g_u32_DEBUG21>
    2552:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <g_u32_DEBUG21+0x1>
    2556:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <g_u32_DEBUG21+0x2>
    255a:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <g_u32_DEBUG21+0x3>
		asm_break();
    255e:	0e 94 d6 07 	call	0xfac	; 0xfac <asm_break>
	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
}

static void s_twi_init(void)
{
	sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    2562:	60 e8       	ldi	r22, 0x80	; 128
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	0e 94 bd 03 	call	0x77a	; 0x77a <sysclk_enable_module>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    256a:	8f b7       	in	r24, 0x3f	; 63
    256c:	8c 83       	std	Y+4, r24	; 0x04
	cpu_irq_disable();
    256e:	f8 94       	cli
	return flags;
    2570:	8c 81       	ldd	r24, Y+4	; 0x04

	irqflags_t flags = cpu_irq_save();

	TWSR = (0b00 << TWPS0);						// Prescaler value = 1
    2572:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 2;									// TWI bit-rate = 400 kBit/sec @ 8 MHz when master mode active
    2576:	92 e0       	ldi	r25, 0x02	; 2
    2578:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	TWAR  = (TWI_SLAVE_ADDR    << TWA0) /* | (TWI_SLAVE_ADDR_GCE << TWGCE)*/ ;
    257c:	94 e4       	ldi	r25, 0x44	; 68
    257e:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	TWAMR = (TWI_SLAVE_ADDR_BM << TWAM0);
    2582:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__TEXT_REGION_LENGTH__+0x7e00bd>

	TWCR = _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// Enable Acknowledge, ENable TWI port, Interrupt Enable, no START or STOP bit
    2586:	95 e4       	ldi	r25, 0x45	; 69
    2588:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    258c:	8f bf       	out	0x3f, r24	; 63

	/* I2C interface */
	s_twi_init();

	/* All interrupt sources prepared here - IRQ activation */
	cpu_irq_enable();
    258e:	78 94       	sei
	/* TC0: not in use */
	/* TC1: Audio output @ 16-bit counter PWM, used: 10-bit resolution */
	/* TC2: LCD backlight w/ 8-bit resolution */
	{
		/* Timer Synchronous Mode - trigger */
		GTCCR = 0;								// trigger the sync for all counters
    2590:	13 bc       	out	0x23, r1	; 35

	/* Start of sub-modules */
	s_tc_start();								// All clocks and PWM timers start here

	/* Initialize external components */
	lcd_init();
    2592:	9e dc       	rcall	.-1732   	; 0x1ed0 <lcd_init>
	lcd_test(0b11110001);						// Debugging purposes
    2594:	81 ef       	ldi	r24, 0xF1	; 241
    2596:	12 dc       	rcall	.-2012   	; 0x1dbc <lcd_test>


	/* main loop */
	runmode = 1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <runmode>
	lcd_animation_loop();
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    259e:	11 e0       	ldi	r17, 0x01	; 1


	/* main loop */
	runmode = 1;
    while (runmode) {
	    s_task();
    25a0:	2a de       	rcall	.-940    	; 0x21f6 <s_task>
	lcd_animation_loop();
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    25a2:	13 bf       	out	0x33, r17	; 51
		  | _BV(SE);							// enable sleep command

	__asm__ __volatile__ ("sleep" ::: "memory");
    25a4:	88 95       	sleep

	SMCR &= ~(_BV(SE));							// disable sleep command
    25a6:	83 b7       	in	r24, 0x33	; 51
    25a8:	8e 7f       	andi	r24, 0xFE	; 254
    25aa:	83 bf       	out	0x33, r24	; 51
	lcd_test(0b11110001);						// Debugging purposes


	/* main loop */
	runmode = 1;
    while (runmode) {
    25ac:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <runmode>
    25b0:	81 11       	cpse	r24, r1
    25b2:	f6 cf       	rjmp	.-20     	; 0x25a0 <main+0x1a8>
	    s_enter_sleep(SLEEP_MODE_IDLE);
    }


	/* Shutdown external components */
	lcd_shutdown();
    25b4:	a0 dc       	rcall	.-1728   	; 0x1ef6 <lcd_shutdown>

	cpu_irq_disable();
    25b6:	f8 94       	cli

	/* disable sub-modules */
	ACSR |= _BV(ACD);							// disable AnalogCompare sub-module
    25b8:	80 b7       	in	r24, 0x30	; 48
    25ba:	80 68       	ori	r24, 0x80	; 128
    25bc:	80 bf       	out	0x30, r24	; 48

	sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    25be:	64 e0       	ldi	r22, 0x04	; 4
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>
	sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    25c6:	62 e0       	ldi	r22, 0x02	; 2
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    25ce:	8f b7       	in	r24, 0x3f	; 63
    25d0:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
    25d2:	f8 94       	cli
	return flags;
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03

static void s_twi_disable(void)
{
	irqflags_t flags = cpu_irq_save();

	TWCR = _BV(TWEN);							// disable the interrupt source
    25d6:	ec eb       	ldi	r30, 0xBC	; 188
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	94 e0       	ldi	r25, 0x04	; 4
    25dc:	90 83       	st	Z, r25
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    25de:	3c 98       	cbi	0x07, 4	; 7
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
    25e0:	44 9a       	sbi	0x08, 4	; 8
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    25e2:	3d 98       	cbi	0x07, 5	; 7
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
    25e4:	45 9a       	sbi	0x08, 5	; 8
	ioport_set_pin_mode(SDA_GPIO, IOPORT_MODE_PULLUP);

	ioport_set_pin_dir(SCL_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(SCL_GPIO, IOPORT_MODE_PULLUP);

	TWCR = 0;									// disable the TWI port
    25e6:	10 82       	st	Z, r1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    25e8:	8f bf       	out	0x3f, r24	; 63

	cpu_irq_restore(flags);

	sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    25ea:	60 e8       	ldi	r22, 0x80	; 128
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>
}

/*  \brief Disable ADC interrupt */
static inline void adc_disable_interrupt(void)
{
	ADCSRA &= ~(1 << ADIE);
    25f2:	ea e7       	ldi	r30, 0x7A	; 122
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	87 7f       	andi	r24, 0xF7	; 247
    25fa:	80 83       	st	Z, r24
}

/*  \brief Disable ADC Auto Trigger */
static inline void adc_disable_autotrigger(void)
{
	ADCSRA &= ~(1 << ADATE);
    25fc:	80 81       	ld	r24, Z
    25fe:	8f 7d       	andi	r24, 0xDF	; 223
    2600:	80 83       	st	Z, r24
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    2602:	eb e7       	ldi	r30, 0x7B	; 123
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
	ADC_ADTS_REG = temp;
    260a:	80 83       	st	Z, r24
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    260c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    2610:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	adc_disable_autotrigger();
	adc_set_autotrigger_source(0);
	adc_set_admux(0);
	adc_disable_digital_inputs(0);

	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
    2614:	61 e0       	ldi	r22, 0x01	; 1
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    261c:	8f b7       	in	r24, 0x3f	; 63
    261e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2620:	f8 94       	cli
	return flags;
    2622:	19 81       	ldd	r17, Y+1	; 0x01
{
	irqflags_t flags = cpu_irq_save();

	/* TC0: not in use */
	{
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    2624:	60 e2       	ldi	r22, 0x20	; 32
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    262c:	21 98       	cbi	0x04, 1	; 4
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
    262e:	29 98       	cbi	0x05, 1	; 5
	{
		// bring pin to high Z mode to reduce audible plop noise
		ioport_set_pin_dir(AUDIO_PWM, IOPORT_DIR_INPUT);
		ioport_set_pin_mode(AUDIO_PWM, IOPORT_MODE_PULLDOWN);

		TCCR1A  = 0;							// release alternate port function
    2630:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1B  = 0;
    2634:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		TCCR1C  = 0;
    2638:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>

		TIMSK1  = 0;							// no interrupts
    263c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    2640:	68 e0       	ldi	r22, 0x08	; 8
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
    2648:	23 9a       	sbi	0x04, 3	; 4
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    264a:	2b 98       	cbi	0x05, 3	; 5
	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		ioport_set_pin_dir(LCDBL_PWM, IOPORT_DIR_OUTPUT);
		ioport_set_pin_level(LCDBL_PWM, false);	// turn backlight off

		TCCR2A  = 0;							// release alternate port function
    264c:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B  = 0;
    2650:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

		TIMSK2  = 0;							// no interrupts
    2654:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>

		ASSR    = 0;							// no async TOSC1 mode
    2658:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>

		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    265c:	60 e4       	ldi	r22, 0x40	; 64
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <sysclk_disable_module>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2664:	8f b7       	in	r24, 0x3f	; 63
    2666:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2668:	f8 94       	cli
	return flags;
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	5f 93       	push	r21
    266e:	50 e8       	ldi	r21, 0x80	; 128
    2670:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    2674:	50 e0       	ldi	r21, 0x00	; 0
    2676:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    267a:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    267c:	8f bf       	out	0x3f, r24	; 63
    267e:	1f bf       	out	0x3f, r17	; 63
	lcd_animation_loop();
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    2680:	89 e0       	ldi	r24, 0x09	; 9
    2682:	83 bf       	out	0x33, r24	; 51
		  | _BV(SE);							// enable sleep command

	__asm__ __volatile__ ("sleep" ::: "memory");
    2684:	88 95       	sleep

	SMCR &= ~(_BV(SE));							// disable sleep command
    2686:	83 b7       	in	r24, 0x33	; 51
    2688:	8e 7f       	andi	r24, 0xFE	; 254
    268a:	83 bf       	out	0x33, r24	; 51
	s_tc_disable();

    s_enter_sleep(SLEEP_MODE_PWR_DOWN);

    return retcode;								// should never be reached
}
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	ff 90       	pop	r15
    26a4:	ef 90       	pop	r14
    26a6:	08 95       	ret

000026a8 <__subsf3>:
    26a8:	50 58       	subi	r21, 0x80	; 128

000026aa <__addsf3>:
    26aa:	bb 27       	eor	r27, r27
    26ac:	aa 27       	eor	r26, r26
    26ae:	0e d0       	rcall	.+28     	; 0x26cc <__addsf3x>
    26b0:	75 c1       	rjmp	.+746    	; 0x299c <__fp_round>
    26b2:	66 d1       	rcall	.+716    	; 0x2980 <__fp_pscA>
    26b4:	30 f0       	brcs	.+12     	; 0x26c2 <__addsf3+0x18>
    26b6:	6b d1       	rcall	.+726    	; 0x298e <__fp_pscB>
    26b8:	20 f0       	brcs	.+8      	; 0x26c2 <__addsf3+0x18>
    26ba:	31 f4       	brne	.+12     	; 0x26c8 <__addsf3+0x1e>
    26bc:	9f 3f       	cpi	r25, 0xFF	; 255
    26be:	11 f4       	brne	.+4      	; 0x26c4 <__addsf3+0x1a>
    26c0:	1e f4       	brtc	.+6      	; 0x26c8 <__addsf3+0x1e>
    26c2:	5b c1       	rjmp	.+694    	; 0x297a <__fp_nan>
    26c4:	0e f4       	brtc	.+2      	; 0x26c8 <__addsf3+0x1e>
    26c6:	e0 95       	com	r30
    26c8:	e7 fb       	bst	r30, 7
    26ca:	51 c1       	rjmp	.+674    	; 0x296e <__fp_inf>

000026cc <__addsf3x>:
    26cc:	e9 2f       	mov	r30, r25
    26ce:	77 d1       	rcall	.+750    	; 0x29be <__fp_split3>
    26d0:	80 f3       	brcs	.-32     	; 0x26b2 <__addsf3+0x8>
    26d2:	ba 17       	cp	r27, r26
    26d4:	62 07       	cpc	r22, r18
    26d6:	73 07       	cpc	r23, r19
    26d8:	84 07       	cpc	r24, r20
    26da:	95 07       	cpc	r25, r21
    26dc:	18 f0       	brcs	.+6      	; 0x26e4 <__addsf3x+0x18>
    26de:	71 f4       	brne	.+28     	; 0x26fc <__addsf3x+0x30>
    26e0:	9e f5       	brtc	.+102    	; 0x2748 <__addsf3x+0x7c>
    26e2:	8f c1       	rjmp	.+798    	; 0x2a02 <__fp_zero>
    26e4:	0e f4       	brtc	.+2      	; 0x26e8 <__addsf3x+0x1c>
    26e6:	e0 95       	com	r30
    26e8:	0b 2e       	mov	r0, r27
    26ea:	ba 2f       	mov	r27, r26
    26ec:	a0 2d       	mov	r26, r0
    26ee:	0b 01       	movw	r0, r22
    26f0:	b9 01       	movw	r22, r18
    26f2:	90 01       	movw	r18, r0
    26f4:	0c 01       	movw	r0, r24
    26f6:	ca 01       	movw	r24, r20
    26f8:	a0 01       	movw	r20, r0
    26fa:	11 24       	eor	r1, r1
    26fc:	ff 27       	eor	r31, r31
    26fe:	59 1b       	sub	r21, r25
    2700:	99 f0       	breq	.+38     	; 0x2728 <__addsf3x+0x5c>
    2702:	59 3f       	cpi	r21, 0xF9	; 249
    2704:	50 f4       	brcc	.+20     	; 0x271a <__addsf3x+0x4e>
    2706:	50 3e       	cpi	r21, 0xE0	; 224
    2708:	68 f1       	brcs	.+90     	; 0x2764 <__addsf3x+0x98>
    270a:	1a 16       	cp	r1, r26
    270c:	f0 40       	sbci	r31, 0x00	; 0
    270e:	a2 2f       	mov	r26, r18
    2710:	23 2f       	mov	r18, r19
    2712:	34 2f       	mov	r19, r20
    2714:	44 27       	eor	r20, r20
    2716:	58 5f       	subi	r21, 0xF8	; 248
    2718:	f3 cf       	rjmp	.-26     	; 0x2700 <__addsf3x+0x34>
    271a:	46 95       	lsr	r20
    271c:	37 95       	ror	r19
    271e:	27 95       	ror	r18
    2720:	a7 95       	ror	r26
    2722:	f0 40       	sbci	r31, 0x00	; 0
    2724:	53 95       	inc	r21
    2726:	c9 f7       	brne	.-14     	; 0x271a <__addsf3x+0x4e>
    2728:	7e f4       	brtc	.+30     	; 0x2748 <__addsf3x+0x7c>
    272a:	1f 16       	cp	r1, r31
    272c:	ba 0b       	sbc	r27, r26
    272e:	62 0b       	sbc	r22, r18
    2730:	73 0b       	sbc	r23, r19
    2732:	84 0b       	sbc	r24, r20
    2734:	ba f0       	brmi	.+46     	; 0x2764 <__addsf3x+0x98>
    2736:	91 50       	subi	r25, 0x01	; 1
    2738:	a1 f0       	breq	.+40     	; 0x2762 <__addsf3x+0x96>
    273a:	ff 0f       	add	r31, r31
    273c:	bb 1f       	adc	r27, r27
    273e:	66 1f       	adc	r22, r22
    2740:	77 1f       	adc	r23, r23
    2742:	88 1f       	adc	r24, r24
    2744:	c2 f7       	brpl	.-16     	; 0x2736 <__addsf3x+0x6a>
    2746:	0e c0       	rjmp	.+28     	; 0x2764 <__addsf3x+0x98>
    2748:	ba 0f       	add	r27, r26
    274a:	62 1f       	adc	r22, r18
    274c:	73 1f       	adc	r23, r19
    274e:	84 1f       	adc	r24, r20
    2750:	48 f4       	brcc	.+18     	; 0x2764 <__addsf3x+0x98>
    2752:	87 95       	ror	r24
    2754:	77 95       	ror	r23
    2756:	67 95       	ror	r22
    2758:	b7 95       	ror	r27
    275a:	f7 95       	ror	r31
    275c:	9e 3f       	cpi	r25, 0xFE	; 254
    275e:	08 f0       	brcs	.+2      	; 0x2762 <__addsf3x+0x96>
    2760:	b3 cf       	rjmp	.-154    	; 0x26c8 <__addsf3+0x1e>
    2762:	93 95       	inc	r25
    2764:	88 0f       	add	r24, r24
    2766:	08 f0       	brcs	.+2      	; 0x276a <__addsf3x+0x9e>
    2768:	99 27       	eor	r25, r25
    276a:	ee 0f       	add	r30, r30
    276c:	97 95       	ror	r25
    276e:	87 95       	ror	r24
    2770:	08 95       	ret

00002772 <__cmpsf2>:
    2772:	d9 d0       	rcall	.+434    	; 0x2926 <__fp_cmp>
    2774:	08 f4       	brcc	.+2      	; 0x2778 <__cmpsf2+0x6>
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	08 95       	ret

0000277a <__divsf3>:
    277a:	0c d0       	rcall	.+24     	; 0x2794 <__divsf3x>
    277c:	0f c1       	rjmp	.+542    	; 0x299c <__fp_round>
    277e:	07 d1       	rcall	.+526    	; 0x298e <__fp_pscB>
    2780:	40 f0       	brcs	.+16     	; 0x2792 <__divsf3+0x18>
    2782:	fe d0       	rcall	.+508    	; 0x2980 <__fp_pscA>
    2784:	30 f0       	brcs	.+12     	; 0x2792 <__divsf3+0x18>
    2786:	21 f4       	brne	.+8      	; 0x2790 <__divsf3+0x16>
    2788:	5f 3f       	cpi	r21, 0xFF	; 255
    278a:	19 f0       	breq	.+6      	; 0x2792 <__divsf3+0x18>
    278c:	f0 c0       	rjmp	.+480    	; 0x296e <__fp_inf>
    278e:	51 11       	cpse	r21, r1
    2790:	39 c1       	rjmp	.+626    	; 0x2a04 <__fp_szero>
    2792:	f3 c0       	rjmp	.+486    	; 0x297a <__fp_nan>

00002794 <__divsf3x>:
    2794:	14 d1       	rcall	.+552    	; 0x29be <__fp_split3>
    2796:	98 f3       	brcs	.-26     	; 0x277e <__divsf3+0x4>

00002798 <__divsf3_pse>:
    2798:	99 23       	and	r25, r25
    279a:	c9 f3       	breq	.-14     	; 0x278e <__divsf3+0x14>
    279c:	55 23       	and	r21, r21
    279e:	b1 f3       	breq	.-20     	; 0x278c <__divsf3+0x12>
    27a0:	95 1b       	sub	r25, r21
    27a2:	55 0b       	sbc	r21, r21
    27a4:	bb 27       	eor	r27, r27
    27a6:	aa 27       	eor	r26, r26
    27a8:	62 17       	cp	r22, r18
    27aa:	73 07       	cpc	r23, r19
    27ac:	84 07       	cpc	r24, r20
    27ae:	38 f0       	brcs	.+14     	; 0x27be <__divsf3_pse+0x26>
    27b0:	9f 5f       	subi	r25, 0xFF	; 255
    27b2:	5f 4f       	sbci	r21, 0xFF	; 255
    27b4:	22 0f       	add	r18, r18
    27b6:	33 1f       	adc	r19, r19
    27b8:	44 1f       	adc	r20, r20
    27ba:	aa 1f       	adc	r26, r26
    27bc:	a9 f3       	breq	.-22     	; 0x27a8 <__divsf3_pse+0x10>
    27be:	33 d0       	rcall	.+102    	; 0x2826 <__divsf3_pse+0x8e>
    27c0:	0e 2e       	mov	r0, r30
    27c2:	3a f0       	brmi	.+14     	; 0x27d2 <__divsf3_pse+0x3a>
    27c4:	e0 e8       	ldi	r30, 0x80	; 128
    27c6:	30 d0       	rcall	.+96     	; 0x2828 <__divsf3_pse+0x90>
    27c8:	91 50       	subi	r25, 0x01	; 1
    27ca:	50 40       	sbci	r21, 0x00	; 0
    27cc:	e6 95       	lsr	r30
    27ce:	00 1c       	adc	r0, r0
    27d0:	ca f7       	brpl	.-14     	; 0x27c4 <__divsf3_pse+0x2c>
    27d2:	29 d0       	rcall	.+82     	; 0x2826 <__divsf3_pse+0x8e>
    27d4:	fe 2f       	mov	r31, r30
    27d6:	27 d0       	rcall	.+78     	; 0x2826 <__divsf3_pse+0x8e>
    27d8:	66 0f       	add	r22, r22
    27da:	77 1f       	adc	r23, r23
    27dc:	88 1f       	adc	r24, r24
    27de:	bb 1f       	adc	r27, r27
    27e0:	26 17       	cp	r18, r22
    27e2:	37 07       	cpc	r19, r23
    27e4:	48 07       	cpc	r20, r24
    27e6:	ab 07       	cpc	r26, r27
    27e8:	b0 e8       	ldi	r27, 0x80	; 128
    27ea:	09 f0       	breq	.+2      	; 0x27ee <__divsf3_pse+0x56>
    27ec:	bb 0b       	sbc	r27, r27
    27ee:	80 2d       	mov	r24, r0
    27f0:	bf 01       	movw	r22, r30
    27f2:	ff 27       	eor	r31, r31
    27f4:	93 58       	subi	r25, 0x83	; 131
    27f6:	5f 4f       	sbci	r21, 0xFF	; 255
    27f8:	2a f0       	brmi	.+10     	; 0x2804 <__divsf3_pse+0x6c>
    27fa:	9e 3f       	cpi	r25, 0xFE	; 254
    27fc:	51 05       	cpc	r21, r1
    27fe:	68 f0       	brcs	.+26     	; 0x281a <__divsf3_pse+0x82>
    2800:	b6 c0       	rjmp	.+364    	; 0x296e <__fp_inf>
    2802:	00 c1       	rjmp	.+512    	; 0x2a04 <__fp_szero>
    2804:	5f 3f       	cpi	r21, 0xFF	; 255
    2806:	ec f3       	brlt	.-6      	; 0x2802 <__divsf3_pse+0x6a>
    2808:	98 3e       	cpi	r25, 0xE8	; 232
    280a:	dc f3       	brlt	.-10     	; 0x2802 <__divsf3_pse+0x6a>
    280c:	86 95       	lsr	r24
    280e:	77 95       	ror	r23
    2810:	67 95       	ror	r22
    2812:	b7 95       	ror	r27
    2814:	f7 95       	ror	r31
    2816:	9f 5f       	subi	r25, 0xFF	; 255
    2818:	c9 f7       	brne	.-14     	; 0x280c <__divsf3_pse+0x74>
    281a:	88 0f       	add	r24, r24
    281c:	91 1d       	adc	r25, r1
    281e:	96 95       	lsr	r25
    2820:	87 95       	ror	r24
    2822:	97 f9       	bld	r25, 7
    2824:	08 95       	ret
    2826:	e1 e0       	ldi	r30, 0x01	; 1
    2828:	66 0f       	add	r22, r22
    282a:	77 1f       	adc	r23, r23
    282c:	88 1f       	adc	r24, r24
    282e:	bb 1f       	adc	r27, r27
    2830:	62 17       	cp	r22, r18
    2832:	73 07       	cpc	r23, r19
    2834:	84 07       	cpc	r24, r20
    2836:	ba 07       	cpc	r27, r26
    2838:	20 f0       	brcs	.+8      	; 0x2842 <__divsf3_pse+0xaa>
    283a:	62 1b       	sub	r22, r18
    283c:	73 0b       	sbc	r23, r19
    283e:	84 0b       	sbc	r24, r20
    2840:	ba 0b       	sbc	r27, r26
    2842:	ee 1f       	adc	r30, r30
    2844:	88 f7       	brcc	.-30     	; 0x2828 <__divsf3_pse+0x90>
    2846:	e0 95       	com	r30
    2848:	08 95       	ret

0000284a <__fixsfsi>:
    284a:	04 d0       	rcall	.+8      	; 0x2854 <__fixunssfsi>
    284c:	68 94       	set
    284e:	b1 11       	cpse	r27, r1
    2850:	d9 c0       	rjmp	.+434    	; 0x2a04 <__fp_szero>
    2852:	08 95       	ret

00002854 <__fixunssfsi>:
    2854:	bc d0       	rcall	.+376    	; 0x29ce <__fp_splitA>
    2856:	88 f0       	brcs	.+34     	; 0x287a <__fixunssfsi+0x26>
    2858:	9f 57       	subi	r25, 0x7F	; 127
    285a:	90 f0       	brcs	.+36     	; 0x2880 <__fixunssfsi+0x2c>
    285c:	b9 2f       	mov	r27, r25
    285e:	99 27       	eor	r25, r25
    2860:	b7 51       	subi	r27, 0x17	; 23
    2862:	a0 f0       	brcs	.+40     	; 0x288c <__fixunssfsi+0x38>
    2864:	d1 f0       	breq	.+52     	; 0x289a <__fixunssfsi+0x46>
    2866:	66 0f       	add	r22, r22
    2868:	77 1f       	adc	r23, r23
    286a:	88 1f       	adc	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	1a f0       	brmi	.+6      	; 0x2876 <__fixunssfsi+0x22>
    2870:	ba 95       	dec	r27
    2872:	c9 f7       	brne	.-14     	; 0x2866 <__fixunssfsi+0x12>
    2874:	12 c0       	rjmp	.+36     	; 0x289a <__fixunssfsi+0x46>
    2876:	b1 30       	cpi	r27, 0x01	; 1
    2878:	81 f0       	breq	.+32     	; 0x289a <__fixunssfsi+0x46>
    287a:	c3 d0       	rcall	.+390    	; 0x2a02 <__fp_zero>
    287c:	b1 e0       	ldi	r27, 0x01	; 1
    287e:	08 95       	ret
    2880:	c0 c0       	rjmp	.+384    	; 0x2a02 <__fp_zero>
    2882:	67 2f       	mov	r22, r23
    2884:	78 2f       	mov	r23, r24
    2886:	88 27       	eor	r24, r24
    2888:	b8 5f       	subi	r27, 0xF8	; 248
    288a:	39 f0       	breq	.+14     	; 0x289a <__fixunssfsi+0x46>
    288c:	b9 3f       	cpi	r27, 0xF9	; 249
    288e:	cc f3       	brlt	.-14     	; 0x2882 <__fixunssfsi+0x2e>
    2890:	86 95       	lsr	r24
    2892:	77 95       	ror	r23
    2894:	67 95       	ror	r22
    2896:	b3 95       	inc	r27
    2898:	d9 f7       	brne	.-10     	; 0x2890 <__fixunssfsi+0x3c>
    289a:	3e f4       	brtc	.+14     	; 0x28aa <__fixunssfsi+0x56>
    289c:	90 95       	com	r25
    289e:	80 95       	com	r24
    28a0:	70 95       	com	r23
    28a2:	61 95       	neg	r22
    28a4:	7f 4f       	sbci	r23, 0xFF	; 255
    28a6:	8f 4f       	sbci	r24, 0xFF	; 255
    28a8:	9f 4f       	sbci	r25, 0xFF	; 255
    28aa:	08 95       	ret

000028ac <__floatunsisf>:
    28ac:	e8 94       	clt
    28ae:	09 c0       	rjmp	.+18     	; 0x28c2 <__floatsisf+0x12>

000028b0 <__floatsisf>:
    28b0:	97 fb       	bst	r25, 7
    28b2:	3e f4       	brtc	.+14     	; 0x28c2 <__floatsisf+0x12>
    28b4:	90 95       	com	r25
    28b6:	80 95       	com	r24
    28b8:	70 95       	com	r23
    28ba:	61 95       	neg	r22
    28bc:	7f 4f       	sbci	r23, 0xFF	; 255
    28be:	8f 4f       	sbci	r24, 0xFF	; 255
    28c0:	9f 4f       	sbci	r25, 0xFF	; 255
    28c2:	99 23       	and	r25, r25
    28c4:	a9 f0       	breq	.+42     	; 0x28f0 <__floatsisf+0x40>
    28c6:	f9 2f       	mov	r31, r25
    28c8:	96 e9       	ldi	r25, 0x96	; 150
    28ca:	bb 27       	eor	r27, r27
    28cc:	93 95       	inc	r25
    28ce:	f6 95       	lsr	r31
    28d0:	87 95       	ror	r24
    28d2:	77 95       	ror	r23
    28d4:	67 95       	ror	r22
    28d6:	b7 95       	ror	r27
    28d8:	f1 11       	cpse	r31, r1
    28da:	f8 cf       	rjmp	.-16     	; 0x28cc <__floatsisf+0x1c>
    28dc:	fa f4       	brpl	.+62     	; 0x291c <__floatsisf+0x6c>
    28de:	bb 0f       	add	r27, r27
    28e0:	11 f4       	brne	.+4      	; 0x28e6 <__floatsisf+0x36>
    28e2:	60 ff       	sbrs	r22, 0
    28e4:	1b c0       	rjmp	.+54     	; 0x291c <__floatsisf+0x6c>
    28e6:	6f 5f       	subi	r22, 0xFF	; 255
    28e8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ea:	8f 4f       	sbci	r24, 0xFF	; 255
    28ec:	9f 4f       	sbci	r25, 0xFF	; 255
    28ee:	16 c0       	rjmp	.+44     	; 0x291c <__floatsisf+0x6c>
    28f0:	88 23       	and	r24, r24
    28f2:	11 f0       	breq	.+4      	; 0x28f8 <__floatsisf+0x48>
    28f4:	96 e9       	ldi	r25, 0x96	; 150
    28f6:	11 c0       	rjmp	.+34     	; 0x291a <__floatsisf+0x6a>
    28f8:	77 23       	and	r23, r23
    28fa:	21 f0       	breq	.+8      	; 0x2904 <__floatsisf+0x54>
    28fc:	9e e8       	ldi	r25, 0x8E	; 142
    28fe:	87 2f       	mov	r24, r23
    2900:	76 2f       	mov	r23, r22
    2902:	05 c0       	rjmp	.+10     	; 0x290e <__floatsisf+0x5e>
    2904:	66 23       	and	r22, r22
    2906:	71 f0       	breq	.+28     	; 0x2924 <__floatsisf+0x74>
    2908:	96 e8       	ldi	r25, 0x86	; 134
    290a:	86 2f       	mov	r24, r22
    290c:	70 e0       	ldi	r23, 0x00	; 0
    290e:	60 e0       	ldi	r22, 0x00	; 0
    2910:	2a f0       	brmi	.+10     	; 0x291c <__floatsisf+0x6c>
    2912:	9a 95       	dec	r25
    2914:	66 0f       	add	r22, r22
    2916:	77 1f       	adc	r23, r23
    2918:	88 1f       	adc	r24, r24
    291a:	da f7       	brpl	.-10     	; 0x2912 <__floatsisf+0x62>
    291c:	88 0f       	add	r24, r24
    291e:	96 95       	lsr	r25
    2920:	87 95       	ror	r24
    2922:	97 f9       	bld	r25, 7
    2924:	08 95       	ret

00002926 <__fp_cmp>:
    2926:	99 0f       	add	r25, r25
    2928:	00 08       	sbc	r0, r0
    292a:	55 0f       	add	r21, r21
    292c:	aa 0b       	sbc	r26, r26
    292e:	e0 e8       	ldi	r30, 0x80	; 128
    2930:	fe ef       	ldi	r31, 0xFE	; 254
    2932:	16 16       	cp	r1, r22
    2934:	17 06       	cpc	r1, r23
    2936:	e8 07       	cpc	r30, r24
    2938:	f9 07       	cpc	r31, r25
    293a:	c0 f0       	brcs	.+48     	; 0x296c <__fp_cmp+0x46>
    293c:	12 16       	cp	r1, r18
    293e:	13 06       	cpc	r1, r19
    2940:	e4 07       	cpc	r30, r20
    2942:	f5 07       	cpc	r31, r21
    2944:	98 f0       	brcs	.+38     	; 0x296c <__fp_cmp+0x46>
    2946:	62 1b       	sub	r22, r18
    2948:	73 0b       	sbc	r23, r19
    294a:	84 0b       	sbc	r24, r20
    294c:	95 0b       	sbc	r25, r21
    294e:	39 f4       	brne	.+14     	; 0x295e <__fp_cmp+0x38>
    2950:	0a 26       	eor	r0, r26
    2952:	61 f0       	breq	.+24     	; 0x296c <__fp_cmp+0x46>
    2954:	23 2b       	or	r18, r19
    2956:	24 2b       	or	r18, r20
    2958:	25 2b       	or	r18, r21
    295a:	21 f4       	brne	.+8      	; 0x2964 <__fp_cmp+0x3e>
    295c:	08 95       	ret
    295e:	0a 26       	eor	r0, r26
    2960:	09 f4       	brne	.+2      	; 0x2964 <__fp_cmp+0x3e>
    2962:	a1 40       	sbci	r26, 0x01	; 1
    2964:	a6 95       	lsr	r26
    2966:	8f ef       	ldi	r24, 0xFF	; 255
    2968:	81 1d       	adc	r24, r1
    296a:	81 1d       	adc	r24, r1
    296c:	08 95       	ret

0000296e <__fp_inf>:
    296e:	97 f9       	bld	r25, 7
    2970:	9f 67       	ori	r25, 0x7F	; 127
    2972:	80 e8       	ldi	r24, 0x80	; 128
    2974:	70 e0       	ldi	r23, 0x00	; 0
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	08 95       	ret

0000297a <__fp_nan>:
    297a:	9f ef       	ldi	r25, 0xFF	; 255
    297c:	80 ec       	ldi	r24, 0xC0	; 192
    297e:	08 95       	ret

00002980 <__fp_pscA>:
    2980:	00 24       	eor	r0, r0
    2982:	0a 94       	dec	r0
    2984:	16 16       	cp	r1, r22
    2986:	17 06       	cpc	r1, r23
    2988:	18 06       	cpc	r1, r24
    298a:	09 06       	cpc	r0, r25
    298c:	08 95       	ret

0000298e <__fp_pscB>:
    298e:	00 24       	eor	r0, r0
    2990:	0a 94       	dec	r0
    2992:	12 16       	cp	r1, r18
    2994:	13 06       	cpc	r1, r19
    2996:	14 06       	cpc	r1, r20
    2998:	05 06       	cpc	r0, r21
    299a:	08 95       	ret

0000299c <__fp_round>:
    299c:	09 2e       	mov	r0, r25
    299e:	03 94       	inc	r0
    29a0:	00 0c       	add	r0, r0
    29a2:	11 f4       	brne	.+4      	; 0x29a8 <__fp_round+0xc>
    29a4:	88 23       	and	r24, r24
    29a6:	52 f0       	brmi	.+20     	; 0x29bc <__fp_round+0x20>
    29a8:	bb 0f       	add	r27, r27
    29aa:	40 f4       	brcc	.+16     	; 0x29bc <__fp_round+0x20>
    29ac:	bf 2b       	or	r27, r31
    29ae:	11 f4       	brne	.+4      	; 0x29b4 <__fp_round+0x18>
    29b0:	60 ff       	sbrs	r22, 0
    29b2:	04 c0       	rjmp	.+8      	; 0x29bc <__fp_round+0x20>
    29b4:	6f 5f       	subi	r22, 0xFF	; 255
    29b6:	7f 4f       	sbci	r23, 0xFF	; 255
    29b8:	8f 4f       	sbci	r24, 0xFF	; 255
    29ba:	9f 4f       	sbci	r25, 0xFF	; 255
    29bc:	08 95       	ret

000029be <__fp_split3>:
    29be:	57 fd       	sbrc	r21, 7
    29c0:	90 58       	subi	r25, 0x80	; 128
    29c2:	44 0f       	add	r20, r20
    29c4:	55 1f       	adc	r21, r21
    29c6:	59 f0       	breq	.+22     	; 0x29de <__fp_splitA+0x10>
    29c8:	5f 3f       	cpi	r21, 0xFF	; 255
    29ca:	71 f0       	breq	.+28     	; 0x29e8 <__fp_splitA+0x1a>
    29cc:	47 95       	ror	r20

000029ce <__fp_splitA>:
    29ce:	88 0f       	add	r24, r24
    29d0:	97 fb       	bst	r25, 7
    29d2:	99 1f       	adc	r25, r25
    29d4:	61 f0       	breq	.+24     	; 0x29ee <__fp_splitA+0x20>
    29d6:	9f 3f       	cpi	r25, 0xFF	; 255
    29d8:	79 f0       	breq	.+30     	; 0x29f8 <__fp_splitA+0x2a>
    29da:	87 95       	ror	r24
    29dc:	08 95       	ret
    29de:	12 16       	cp	r1, r18
    29e0:	13 06       	cpc	r1, r19
    29e2:	14 06       	cpc	r1, r20
    29e4:	55 1f       	adc	r21, r21
    29e6:	f2 cf       	rjmp	.-28     	; 0x29cc <__fp_split3+0xe>
    29e8:	46 95       	lsr	r20
    29ea:	f1 df       	rcall	.-30     	; 0x29ce <__fp_splitA>
    29ec:	08 c0       	rjmp	.+16     	; 0x29fe <__fp_splitA+0x30>
    29ee:	16 16       	cp	r1, r22
    29f0:	17 06       	cpc	r1, r23
    29f2:	18 06       	cpc	r1, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	f1 cf       	rjmp	.-30     	; 0x29da <__fp_splitA+0xc>
    29f8:	86 95       	lsr	r24
    29fa:	71 05       	cpc	r23, r1
    29fc:	61 05       	cpc	r22, r1
    29fe:	08 94       	sec
    2a00:	08 95       	ret

00002a02 <__fp_zero>:
    2a02:	e8 94       	clt

00002a04 <__fp_szero>:
    2a04:	bb 27       	eor	r27, r27
    2a06:	66 27       	eor	r22, r22
    2a08:	77 27       	eor	r23, r23
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	97 f9       	bld	r25, 7
    2a0e:	08 95       	ret

00002a10 <__gesf2>:
    2a10:	8a df       	rcall	.-236    	; 0x2926 <__fp_cmp>
    2a12:	08 f4       	brcc	.+2      	; 0x2a16 <__gesf2+0x6>
    2a14:	8f ef       	ldi	r24, 0xFF	; 255
    2a16:	08 95       	ret

00002a18 <__mulsf3>:
    2a18:	0b d0       	rcall	.+22     	; 0x2a30 <__mulsf3x>
    2a1a:	c0 cf       	rjmp	.-128    	; 0x299c <__fp_round>
    2a1c:	b1 df       	rcall	.-158    	; 0x2980 <__fp_pscA>
    2a1e:	28 f0       	brcs	.+10     	; 0x2a2a <__mulsf3+0x12>
    2a20:	b6 df       	rcall	.-148    	; 0x298e <__fp_pscB>
    2a22:	18 f0       	brcs	.+6      	; 0x2a2a <__mulsf3+0x12>
    2a24:	95 23       	and	r25, r21
    2a26:	09 f0       	breq	.+2      	; 0x2a2a <__mulsf3+0x12>
    2a28:	a2 cf       	rjmp	.-188    	; 0x296e <__fp_inf>
    2a2a:	a7 cf       	rjmp	.-178    	; 0x297a <__fp_nan>
    2a2c:	11 24       	eor	r1, r1
    2a2e:	ea cf       	rjmp	.-44     	; 0x2a04 <__fp_szero>

00002a30 <__mulsf3x>:
    2a30:	c6 df       	rcall	.-116    	; 0x29be <__fp_split3>
    2a32:	a0 f3       	brcs	.-24     	; 0x2a1c <__mulsf3+0x4>

00002a34 <__mulsf3_pse>:
    2a34:	95 9f       	mul	r25, r21
    2a36:	d1 f3       	breq	.-12     	; 0x2a2c <__mulsf3+0x14>
    2a38:	95 0f       	add	r25, r21
    2a3a:	50 e0       	ldi	r21, 0x00	; 0
    2a3c:	55 1f       	adc	r21, r21
    2a3e:	62 9f       	mul	r22, r18
    2a40:	f0 01       	movw	r30, r0
    2a42:	72 9f       	mul	r23, r18
    2a44:	bb 27       	eor	r27, r27
    2a46:	f0 0d       	add	r31, r0
    2a48:	b1 1d       	adc	r27, r1
    2a4a:	63 9f       	mul	r22, r19
    2a4c:	aa 27       	eor	r26, r26
    2a4e:	f0 0d       	add	r31, r0
    2a50:	b1 1d       	adc	r27, r1
    2a52:	aa 1f       	adc	r26, r26
    2a54:	64 9f       	mul	r22, r20
    2a56:	66 27       	eor	r22, r22
    2a58:	b0 0d       	add	r27, r0
    2a5a:	a1 1d       	adc	r26, r1
    2a5c:	66 1f       	adc	r22, r22
    2a5e:	82 9f       	mul	r24, r18
    2a60:	22 27       	eor	r18, r18
    2a62:	b0 0d       	add	r27, r0
    2a64:	a1 1d       	adc	r26, r1
    2a66:	62 1f       	adc	r22, r18
    2a68:	73 9f       	mul	r23, r19
    2a6a:	b0 0d       	add	r27, r0
    2a6c:	a1 1d       	adc	r26, r1
    2a6e:	62 1f       	adc	r22, r18
    2a70:	83 9f       	mul	r24, r19
    2a72:	a0 0d       	add	r26, r0
    2a74:	61 1d       	adc	r22, r1
    2a76:	22 1f       	adc	r18, r18
    2a78:	74 9f       	mul	r23, r20
    2a7a:	33 27       	eor	r19, r19
    2a7c:	a0 0d       	add	r26, r0
    2a7e:	61 1d       	adc	r22, r1
    2a80:	23 1f       	adc	r18, r19
    2a82:	84 9f       	mul	r24, r20
    2a84:	60 0d       	add	r22, r0
    2a86:	21 1d       	adc	r18, r1
    2a88:	82 2f       	mov	r24, r18
    2a8a:	76 2f       	mov	r23, r22
    2a8c:	6a 2f       	mov	r22, r26
    2a8e:	11 24       	eor	r1, r1
    2a90:	9f 57       	subi	r25, 0x7F	; 127
    2a92:	50 40       	sbci	r21, 0x00	; 0
    2a94:	8a f0       	brmi	.+34     	; 0x2ab8 <__mulsf3_pse+0x84>
    2a96:	e1 f0       	breq	.+56     	; 0x2ad0 <__mulsf3_pse+0x9c>
    2a98:	88 23       	and	r24, r24
    2a9a:	4a f0       	brmi	.+18     	; 0x2aae <__mulsf3_pse+0x7a>
    2a9c:	ee 0f       	add	r30, r30
    2a9e:	ff 1f       	adc	r31, r31
    2aa0:	bb 1f       	adc	r27, r27
    2aa2:	66 1f       	adc	r22, r22
    2aa4:	77 1f       	adc	r23, r23
    2aa6:	88 1f       	adc	r24, r24
    2aa8:	91 50       	subi	r25, 0x01	; 1
    2aaa:	50 40       	sbci	r21, 0x00	; 0
    2aac:	a9 f7       	brne	.-22     	; 0x2a98 <__mulsf3_pse+0x64>
    2aae:	9e 3f       	cpi	r25, 0xFE	; 254
    2ab0:	51 05       	cpc	r21, r1
    2ab2:	70 f0       	brcs	.+28     	; 0x2ad0 <__mulsf3_pse+0x9c>
    2ab4:	5c cf       	rjmp	.-328    	; 0x296e <__fp_inf>
    2ab6:	a6 cf       	rjmp	.-180    	; 0x2a04 <__fp_szero>
    2ab8:	5f 3f       	cpi	r21, 0xFF	; 255
    2aba:	ec f3       	brlt	.-6      	; 0x2ab6 <__mulsf3_pse+0x82>
    2abc:	98 3e       	cpi	r25, 0xE8	; 232
    2abe:	dc f3       	brlt	.-10     	; 0x2ab6 <__mulsf3_pse+0x82>
    2ac0:	86 95       	lsr	r24
    2ac2:	77 95       	ror	r23
    2ac4:	67 95       	ror	r22
    2ac6:	b7 95       	ror	r27
    2ac8:	f7 95       	ror	r31
    2aca:	e7 95       	ror	r30
    2acc:	9f 5f       	subi	r25, 0xFF	; 255
    2ace:	c1 f7       	brne	.-16     	; 0x2ac0 <__mulsf3_pse+0x8c>
    2ad0:	fe 2b       	or	r31, r30
    2ad2:	88 0f       	add	r24, r24
    2ad4:	91 1d       	adc	r25, r1
    2ad6:	96 95       	lsr	r25
    2ad8:	87 95       	ror	r24
    2ada:	97 f9       	bld	r25, 7
    2adc:	08 95       	ret

00002ade <__divmodhi4>:
    2ade:	97 fb       	bst	r25, 7
    2ae0:	07 2e       	mov	r0, r23
    2ae2:	16 f4       	brtc	.+4      	; 0x2ae8 <__divmodhi4+0xa>
    2ae4:	00 94       	com	r0
    2ae6:	06 d0       	rcall	.+12     	; 0x2af4 <__divmodhi4_neg1>
    2ae8:	77 fd       	sbrc	r23, 7
    2aea:	08 d0       	rcall	.+16     	; 0x2afc <__divmodhi4_neg2>
    2aec:	11 d0       	rcall	.+34     	; 0x2b10 <__udivmodhi4>
    2aee:	07 fc       	sbrc	r0, 7
    2af0:	05 d0       	rcall	.+10     	; 0x2afc <__divmodhi4_neg2>
    2af2:	3e f4       	brtc	.+14     	; 0x2b02 <__divmodhi4_exit>

00002af4 <__divmodhi4_neg1>:
    2af4:	90 95       	com	r25
    2af6:	81 95       	neg	r24
    2af8:	9f 4f       	sbci	r25, 0xFF	; 255
    2afa:	08 95       	ret

00002afc <__divmodhi4_neg2>:
    2afc:	70 95       	com	r23
    2afe:	61 95       	neg	r22
    2b00:	7f 4f       	sbci	r23, 0xFF	; 255

00002b02 <__divmodhi4_exit>:
    2b02:	08 95       	ret

00002b04 <__tablejump2__>:
    2b04:	ee 0f       	add	r30, r30
    2b06:	ff 1f       	adc	r31, r31
    2b08:	05 90       	lpm	r0, Z+
    2b0a:	f4 91       	lpm	r31, Z
    2b0c:	e0 2d       	mov	r30, r0
    2b0e:	09 94       	ijmp

00002b10 <__udivmodhi4>:
    2b10:	aa 1b       	sub	r26, r26
    2b12:	bb 1b       	sub	r27, r27
    2b14:	51 e1       	ldi	r21, 0x11	; 17
    2b16:	07 c0       	rjmp	.+14     	; 0x2b26 <__udivmodhi4_ep>

00002b18 <__udivmodhi4_loop>:
    2b18:	aa 1f       	adc	r26, r26
    2b1a:	bb 1f       	adc	r27, r27
    2b1c:	a6 17       	cp	r26, r22
    2b1e:	b7 07       	cpc	r27, r23
    2b20:	10 f0       	brcs	.+4      	; 0x2b26 <__udivmodhi4_ep>
    2b22:	a6 1b       	sub	r26, r22
    2b24:	b7 0b       	sbc	r27, r23

00002b26 <__udivmodhi4_ep>:
    2b26:	88 1f       	adc	r24, r24
    2b28:	99 1f       	adc	r25, r25
    2b2a:	5a 95       	dec	r21
    2b2c:	a9 f7       	brne	.-22     	; 0x2b18 <__udivmodhi4_loop>
    2b2e:	80 95       	com	r24
    2b30:	90 95       	com	r25
    2b32:	bc 01       	movw	r22, r24
    2b34:	cd 01       	movw	r24, r26
    2b36:	08 95       	ret

00002b38 <sprintf>:
    2b38:	ae e0       	ldi	r26, 0x0E	; 14
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	e1 ea       	ldi	r30, 0xA1	; 161
    2b3e:	f5 e1       	ldi	r31, 0x15	; 21
    2b40:	98 c2       	rjmp	.+1328   	; 0x3072 <__prologue_saves__+0x1c>
    2b42:	0d 89       	ldd	r16, Y+21	; 0x15
    2b44:	1e 89       	ldd	r17, Y+22	; 0x16
    2b46:	86 e0       	ldi	r24, 0x06	; 6
    2b48:	8c 83       	std	Y+4, r24	; 0x04
    2b4a:	1a 83       	std	Y+2, r17	; 0x02
    2b4c:	09 83       	std	Y+1, r16	; 0x01
    2b4e:	8f ef       	ldi	r24, 0xFF	; 255
    2b50:	9f e7       	ldi	r25, 0x7F	; 127
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	ae 01       	movw	r20, r28
    2b58:	47 5e       	subi	r20, 0xE7	; 231
    2b5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b5c:	6f 89       	ldd	r22, Y+23	; 0x17
    2b5e:	78 8d       	ldd	r23, Y+24	; 0x18
    2b60:	ce 01       	movw	r24, r28
    2b62:	01 96       	adiw	r24, 0x01	; 1
    2b64:	09 d0       	rcall	.+18     	; 0x2b78 <vfprintf>
    2b66:	2f 81       	ldd	r18, Y+7	; 0x07
    2b68:	38 85       	ldd	r19, Y+8	; 0x08
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	e2 0f       	add	r30, r18
    2b6e:	f3 1f       	adc	r31, r19
    2b70:	10 82       	st	Z, r1
    2b72:	2e 96       	adiw	r28, 0x0e	; 14
    2b74:	e4 e0       	ldi	r30, 0x04	; 4
    2b76:	99 c2       	rjmp	.+1330   	; 0x30aa <__epilogue_restores__+0x1c>

00002b78 <vfprintf>:
    2b78:	ac e0       	ldi	r26, 0x0C	; 12
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	e1 ec       	ldi	r30, 0xC1	; 193
    2b7e:	f5 e1       	ldi	r31, 0x15	; 21
    2b80:	6a c2       	rjmp	.+1236   	; 0x3056 <__prologue_saves__>
    2b82:	7c 01       	movw	r14, r24
    2b84:	6b 01       	movw	r12, r22
    2b86:	8a 01       	movw	r16, r20
    2b88:	fc 01       	movw	r30, r24
    2b8a:	17 82       	std	Z+7, r1	; 0x07
    2b8c:	16 82       	std	Z+6, r1	; 0x06
    2b8e:	83 81       	ldd	r24, Z+3	; 0x03
    2b90:	81 ff       	sbrs	r24, 1
    2b92:	b0 c1       	rjmp	.+864    	; 0x2ef4 <vfprintf+0x37c>
    2b94:	ce 01       	movw	r24, r28
    2b96:	01 96       	adiw	r24, 0x01	; 1
    2b98:	4c 01       	movw	r8, r24
    2b9a:	f7 01       	movw	r30, r14
    2b9c:	93 81       	ldd	r25, Z+3	; 0x03
    2b9e:	f6 01       	movw	r30, r12
    2ba0:	93 fd       	sbrc	r25, 3
    2ba2:	85 91       	lpm	r24, Z+
    2ba4:	93 ff       	sbrs	r25, 3
    2ba6:	81 91       	ld	r24, Z+
    2ba8:	6f 01       	movw	r12, r30
    2baa:	88 23       	and	r24, r24
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <vfprintf+0x38>
    2bae:	9e c1       	rjmp	.+828    	; 0x2eec <vfprintf+0x374>
    2bb0:	85 32       	cpi	r24, 0x25	; 37
    2bb2:	39 f4       	brne	.+14     	; 0x2bc2 <vfprintf+0x4a>
    2bb4:	93 fd       	sbrc	r25, 3
    2bb6:	85 91       	lpm	r24, Z+
    2bb8:	93 ff       	sbrs	r25, 3
    2bba:	81 91       	ld	r24, Z+
    2bbc:	6f 01       	movw	r12, r30
    2bbe:	85 32       	cpi	r24, 0x25	; 37
    2bc0:	21 f4       	brne	.+8      	; 0x2bca <vfprintf+0x52>
    2bc2:	b7 01       	movw	r22, r14
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	b1 d1       	rcall	.+866    	; 0x2f2a <fputc>
    2bc8:	e8 cf       	rjmp	.-48     	; 0x2b9a <vfprintf+0x22>
    2bca:	51 2c       	mov	r5, r1
    2bcc:	31 2c       	mov	r3, r1
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	20 32       	cpi	r18, 0x20	; 32
    2bd2:	a0 f4       	brcc	.+40     	; 0x2bfc <vfprintf+0x84>
    2bd4:	8b 32       	cpi	r24, 0x2B	; 43
    2bd6:	69 f0       	breq	.+26     	; 0x2bf2 <vfprintf+0x7a>
    2bd8:	30 f4       	brcc	.+12     	; 0x2be6 <vfprintf+0x6e>
    2bda:	80 32       	cpi	r24, 0x20	; 32
    2bdc:	59 f0       	breq	.+22     	; 0x2bf4 <vfprintf+0x7c>
    2bde:	83 32       	cpi	r24, 0x23	; 35
    2be0:	69 f4       	brne	.+26     	; 0x2bfc <vfprintf+0x84>
    2be2:	20 61       	ori	r18, 0x10	; 16
    2be4:	2c c0       	rjmp	.+88     	; 0x2c3e <vfprintf+0xc6>
    2be6:	8d 32       	cpi	r24, 0x2D	; 45
    2be8:	39 f0       	breq	.+14     	; 0x2bf8 <vfprintf+0x80>
    2bea:	80 33       	cpi	r24, 0x30	; 48
    2bec:	39 f4       	brne	.+14     	; 0x2bfc <vfprintf+0x84>
    2bee:	21 60       	ori	r18, 0x01	; 1
    2bf0:	26 c0       	rjmp	.+76     	; 0x2c3e <vfprintf+0xc6>
    2bf2:	22 60       	ori	r18, 0x02	; 2
    2bf4:	24 60       	ori	r18, 0x04	; 4
    2bf6:	23 c0       	rjmp	.+70     	; 0x2c3e <vfprintf+0xc6>
    2bf8:	28 60       	ori	r18, 0x08	; 8
    2bfa:	21 c0       	rjmp	.+66     	; 0x2c3e <vfprintf+0xc6>
    2bfc:	27 fd       	sbrc	r18, 7
    2bfe:	27 c0       	rjmp	.+78     	; 0x2c4e <vfprintf+0xd6>
    2c00:	30 ed       	ldi	r19, 0xD0	; 208
    2c02:	38 0f       	add	r19, r24
    2c04:	3a 30       	cpi	r19, 0x0A	; 10
    2c06:	78 f4       	brcc	.+30     	; 0x2c26 <vfprintf+0xae>
    2c08:	26 ff       	sbrs	r18, 6
    2c0a:	06 c0       	rjmp	.+12     	; 0x2c18 <vfprintf+0xa0>
    2c0c:	fa e0       	ldi	r31, 0x0A	; 10
    2c0e:	5f 9e       	mul	r5, r31
    2c10:	30 0d       	add	r19, r0
    2c12:	11 24       	eor	r1, r1
    2c14:	53 2e       	mov	r5, r19
    2c16:	13 c0       	rjmp	.+38     	; 0x2c3e <vfprintf+0xc6>
    2c18:	8a e0       	ldi	r24, 0x0A	; 10
    2c1a:	38 9e       	mul	r3, r24
    2c1c:	30 0d       	add	r19, r0
    2c1e:	11 24       	eor	r1, r1
    2c20:	33 2e       	mov	r3, r19
    2c22:	20 62       	ori	r18, 0x20	; 32
    2c24:	0c c0       	rjmp	.+24     	; 0x2c3e <vfprintf+0xc6>
    2c26:	8e 32       	cpi	r24, 0x2E	; 46
    2c28:	21 f4       	brne	.+8      	; 0x2c32 <vfprintf+0xba>
    2c2a:	26 fd       	sbrc	r18, 6
    2c2c:	5f c1       	rjmp	.+702    	; 0x2eec <vfprintf+0x374>
    2c2e:	20 64       	ori	r18, 0x40	; 64
    2c30:	06 c0       	rjmp	.+12     	; 0x2c3e <vfprintf+0xc6>
    2c32:	8c 36       	cpi	r24, 0x6C	; 108
    2c34:	11 f4       	brne	.+4      	; 0x2c3a <vfprintf+0xc2>
    2c36:	20 68       	ori	r18, 0x80	; 128
    2c38:	02 c0       	rjmp	.+4      	; 0x2c3e <vfprintf+0xc6>
    2c3a:	88 36       	cpi	r24, 0x68	; 104
    2c3c:	41 f4       	brne	.+16     	; 0x2c4e <vfprintf+0xd6>
    2c3e:	f6 01       	movw	r30, r12
    2c40:	93 fd       	sbrc	r25, 3
    2c42:	85 91       	lpm	r24, Z+
    2c44:	93 ff       	sbrs	r25, 3
    2c46:	81 91       	ld	r24, Z+
    2c48:	6f 01       	movw	r12, r30
    2c4a:	81 11       	cpse	r24, r1
    2c4c:	c1 cf       	rjmp	.-126    	; 0x2bd0 <vfprintf+0x58>
    2c4e:	98 2f       	mov	r25, r24
    2c50:	9f 7d       	andi	r25, 0xDF	; 223
    2c52:	95 54       	subi	r25, 0x45	; 69
    2c54:	93 30       	cpi	r25, 0x03	; 3
    2c56:	28 f4       	brcc	.+10     	; 0x2c62 <vfprintf+0xea>
    2c58:	0c 5f       	subi	r16, 0xFC	; 252
    2c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5c:	ff e3       	ldi	r31, 0x3F	; 63
    2c5e:	f9 83       	std	Y+1, r31	; 0x01
    2c60:	0d c0       	rjmp	.+26     	; 0x2c7c <vfprintf+0x104>
    2c62:	83 36       	cpi	r24, 0x63	; 99
    2c64:	31 f0       	breq	.+12     	; 0x2c72 <vfprintf+0xfa>
    2c66:	83 37       	cpi	r24, 0x73	; 115
    2c68:	71 f0       	breq	.+28     	; 0x2c86 <vfprintf+0x10e>
    2c6a:	83 35       	cpi	r24, 0x53	; 83
    2c6c:	09 f0       	breq	.+2      	; 0x2c70 <vfprintf+0xf8>
    2c6e:	57 c0       	rjmp	.+174    	; 0x2d1e <vfprintf+0x1a6>
    2c70:	21 c0       	rjmp	.+66     	; 0x2cb4 <vfprintf+0x13c>
    2c72:	f8 01       	movw	r30, r16
    2c74:	80 81       	ld	r24, Z
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	0e 5f       	subi	r16, 0xFE	; 254
    2c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7c:	44 24       	eor	r4, r4
    2c7e:	43 94       	inc	r4
    2c80:	51 2c       	mov	r5, r1
    2c82:	54 01       	movw	r10, r8
    2c84:	14 c0       	rjmp	.+40     	; 0x2cae <vfprintf+0x136>
    2c86:	38 01       	movw	r6, r16
    2c88:	f2 e0       	ldi	r31, 0x02	; 2
    2c8a:	6f 0e       	add	r6, r31
    2c8c:	71 1c       	adc	r7, r1
    2c8e:	f8 01       	movw	r30, r16
    2c90:	a0 80       	ld	r10, Z
    2c92:	b1 80       	ldd	r11, Z+1	; 0x01
    2c94:	26 ff       	sbrs	r18, 6
    2c96:	03 c0       	rjmp	.+6      	; 0x2c9e <vfprintf+0x126>
    2c98:	65 2d       	mov	r22, r5
    2c9a:	70 e0       	ldi	r23, 0x00	; 0
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <vfprintf+0x12a>
    2c9e:	6f ef       	ldi	r22, 0xFF	; 255
    2ca0:	7f ef       	ldi	r23, 0xFF	; 255
    2ca2:	c5 01       	movw	r24, r10
    2ca4:	2c 87       	std	Y+12, r18	; 0x0c
    2ca6:	36 d1       	rcall	.+620    	; 0x2f14 <strnlen>
    2ca8:	2c 01       	movw	r4, r24
    2caa:	83 01       	movw	r16, r6
    2cac:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cae:	2f 77       	andi	r18, 0x7F	; 127
    2cb0:	22 2e       	mov	r2, r18
    2cb2:	16 c0       	rjmp	.+44     	; 0x2ce0 <vfprintf+0x168>
    2cb4:	38 01       	movw	r6, r16
    2cb6:	f2 e0       	ldi	r31, 0x02	; 2
    2cb8:	6f 0e       	add	r6, r31
    2cba:	71 1c       	adc	r7, r1
    2cbc:	f8 01       	movw	r30, r16
    2cbe:	a0 80       	ld	r10, Z
    2cc0:	b1 80       	ldd	r11, Z+1	; 0x01
    2cc2:	26 ff       	sbrs	r18, 6
    2cc4:	03 c0       	rjmp	.+6      	; 0x2ccc <vfprintf+0x154>
    2cc6:	65 2d       	mov	r22, r5
    2cc8:	70 e0       	ldi	r23, 0x00	; 0
    2cca:	02 c0       	rjmp	.+4      	; 0x2cd0 <vfprintf+0x158>
    2ccc:	6f ef       	ldi	r22, 0xFF	; 255
    2cce:	7f ef       	ldi	r23, 0xFF	; 255
    2cd0:	c5 01       	movw	r24, r10
    2cd2:	2c 87       	std	Y+12, r18	; 0x0c
    2cd4:	14 d1       	rcall	.+552    	; 0x2efe <strnlen_P>
    2cd6:	2c 01       	movw	r4, r24
    2cd8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cda:	20 68       	ori	r18, 0x80	; 128
    2cdc:	22 2e       	mov	r2, r18
    2cde:	83 01       	movw	r16, r6
    2ce0:	23 fc       	sbrc	r2, 3
    2ce2:	19 c0       	rjmp	.+50     	; 0x2d16 <vfprintf+0x19e>
    2ce4:	83 2d       	mov	r24, r3
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	48 16       	cp	r4, r24
    2cea:	59 06       	cpc	r5, r25
    2cec:	a0 f4       	brcc	.+40     	; 0x2d16 <vfprintf+0x19e>
    2cee:	b7 01       	movw	r22, r14
    2cf0:	80 e2       	ldi	r24, 0x20	; 32
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	1a d1       	rcall	.+564    	; 0x2f2a <fputc>
    2cf6:	3a 94       	dec	r3
    2cf8:	f5 cf       	rjmp	.-22     	; 0x2ce4 <vfprintf+0x16c>
    2cfa:	f5 01       	movw	r30, r10
    2cfc:	27 fc       	sbrc	r2, 7
    2cfe:	85 91       	lpm	r24, Z+
    2d00:	27 fe       	sbrs	r2, 7
    2d02:	81 91       	ld	r24, Z+
    2d04:	5f 01       	movw	r10, r30
    2d06:	b7 01       	movw	r22, r14
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0f d1       	rcall	.+542    	; 0x2f2a <fputc>
    2d0c:	31 10       	cpse	r3, r1
    2d0e:	3a 94       	dec	r3
    2d10:	f1 e0       	ldi	r31, 0x01	; 1
    2d12:	4f 1a       	sub	r4, r31
    2d14:	51 08       	sbc	r5, r1
    2d16:	41 14       	cp	r4, r1
    2d18:	51 04       	cpc	r5, r1
    2d1a:	79 f7       	brne	.-34     	; 0x2cfa <vfprintf+0x182>
    2d1c:	de c0       	rjmp	.+444    	; 0x2eda <vfprintf+0x362>
    2d1e:	84 36       	cpi	r24, 0x64	; 100
    2d20:	11 f0       	breq	.+4      	; 0x2d26 <vfprintf+0x1ae>
    2d22:	89 36       	cpi	r24, 0x69	; 105
    2d24:	31 f5       	brne	.+76     	; 0x2d72 <vfprintf+0x1fa>
    2d26:	f8 01       	movw	r30, r16
    2d28:	27 ff       	sbrs	r18, 7
    2d2a:	07 c0       	rjmp	.+14     	; 0x2d3a <vfprintf+0x1c2>
    2d2c:	60 81       	ld	r22, Z
    2d2e:	71 81       	ldd	r23, Z+1	; 0x01
    2d30:	82 81       	ldd	r24, Z+2	; 0x02
    2d32:	93 81       	ldd	r25, Z+3	; 0x03
    2d34:	0c 5f       	subi	r16, 0xFC	; 252
    2d36:	1f 4f       	sbci	r17, 0xFF	; 255
    2d38:	08 c0       	rjmp	.+16     	; 0x2d4a <vfprintf+0x1d2>
    2d3a:	60 81       	ld	r22, Z
    2d3c:	71 81       	ldd	r23, Z+1	; 0x01
    2d3e:	07 2e       	mov	r0, r23
    2d40:	00 0c       	add	r0, r0
    2d42:	88 0b       	sbc	r24, r24
    2d44:	99 0b       	sbc	r25, r25
    2d46:	0e 5f       	subi	r16, 0xFE	; 254
    2d48:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4a:	2f 76       	andi	r18, 0x6F	; 111
    2d4c:	72 2e       	mov	r7, r18
    2d4e:	97 ff       	sbrs	r25, 7
    2d50:	09 c0       	rjmp	.+18     	; 0x2d64 <vfprintf+0x1ec>
    2d52:	90 95       	com	r25
    2d54:	80 95       	com	r24
    2d56:	70 95       	com	r23
    2d58:	61 95       	neg	r22
    2d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d60:	20 68       	ori	r18, 0x80	; 128
    2d62:	72 2e       	mov	r7, r18
    2d64:	2a e0       	ldi	r18, 0x0A	; 10
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	a4 01       	movw	r20, r8
    2d6a:	17 d1       	rcall	.+558    	; 0x2f9a <__ultoa_invert>
    2d6c:	a8 2e       	mov	r10, r24
    2d6e:	a8 18       	sub	r10, r8
    2d70:	43 c0       	rjmp	.+134    	; 0x2df8 <vfprintf+0x280>
    2d72:	85 37       	cpi	r24, 0x75	; 117
    2d74:	29 f4       	brne	.+10     	; 0x2d80 <vfprintf+0x208>
    2d76:	2f 7e       	andi	r18, 0xEF	; 239
    2d78:	b2 2e       	mov	r11, r18
    2d7a:	2a e0       	ldi	r18, 0x0A	; 10
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	25 c0       	rjmp	.+74     	; 0x2dca <vfprintf+0x252>
    2d80:	f2 2f       	mov	r31, r18
    2d82:	f9 7f       	andi	r31, 0xF9	; 249
    2d84:	bf 2e       	mov	r11, r31
    2d86:	8f 36       	cpi	r24, 0x6F	; 111
    2d88:	c1 f0       	breq	.+48     	; 0x2dba <vfprintf+0x242>
    2d8a:	18 f4       	brcc	.+6      	; 0x2d92 <vfprintf+0x21a>
    2d8c:	88 35       	cpi	r24, 0x58	; 88
    2d8e:	79 f0       	breq	.+30     	; 0x2dae <vfprintf+0x236>
    2d90:	ad c0       	rjmp	.+346    	; 0x2eec <vfprintf+0x374>
    2d92:	80 37       	cpi	r24, 0x70	; 112
    2d94:	19 f0       	breq	.+6      	; 0x2d9c <vfprintf+0x224>
    2d96:	88 37       	cpi	r24, 0x78	; 120
    2d98:	21 f0       	breq	.+8      	; 0x2da2 <vfprintf+0x22a>
    2d9a:	a8 c0       	rjmp	.+336    	; 0x2eec <vfprintf+0x374>
    2d9c:	2f 2f       	mov	r18, r31
    2d9e:	20 61       	ori	r18, 0x10	; 16
    2da0:	b2 2e       	mov	r11, r18
    2da2:	b4 fe       	sbrs	r11, 4
    2da4:	0d c0       	rjmp	.+26     	; 0x2dc0 <vfprintf+0x248>
    2da6:	8b 2d       	mov	r24, r11
    2da8:	84 60       	ori	r24, 0x04	; 4
    2daa:	b8 2e       	mov	r11, r24
    2dac:	09 c0       	rjmp	.+18     	; 0x2dc0 <vfprintf+0x248>
    2dae:	24 ff       	sbrs	r18, 4
    2db0:	0a c0       	rjmp	.+20     	; 0x2dc6 <vfprintf+0x24e>
    2db2:	9f 2f       	mov	r25, r31
    2db4:	96 60       	ori	r25, 0x06	; 6
    2db6:	b9 2e       	mov	r11, r25
    2db8:	06 c0       	rjmp	.+12     	; 0x2dc6 <vfprintf+0x24e>
    2dba:	28 e0       	ldi	r18, 0x08	; 8
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	05 c0       	rjmp	.+10     	; 0x2dca <vfprintf+0x252>
    2dc0:	20 e1       	ldi	r18, 0x10	; 16
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	02 c0       	rjmp	.+4      	; 0x2dca <vfprintf+0x252>
    2dc6:	20 e1       	ldi	r18, 0x10	; 16
    2dc8:	32 e0       	ldi	r19, 0x02	; 2
    2dca:	f8 01       	movw	r30, r16
    2dcc:	b7 fe       	sbrs	r11, 7
    2dce:	07 c0       	rjmp	.+14     	; 0x2dde <vfprintf+0x266>
    2dd0:	60 81       	ld	r22, Z
    2dd2:	71 81       	ldd	r23, Z+1	; 0x01
    2dd4:	82 81       	ldd	r24, Z+2	; 0x02
    2dd6:	93 81       	ldd	r25, Z+3	; 0x03
    2dd8:	0c 5f       	subi	r16, 0xFC	; 252
    2dda:	1f 4f       	sbci	r17, 0xFF	; 255
    2ddc:	06 c0       	rjmp	.+12     	; 0x2dea <vfprintf+0x272>
    2dde:	60 81       	ld	r22, Z
    2de0:	71 81       	ldd	r23, Z+1	; 0x01
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	0e 5f       	subi	r16, 0xFE	; 254
    2de8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dea:	a4 01       	movw	r20, r8
    2dec:	d6 d0       	rcall	.+428    	; 0x2f9a <__ultoa_invert>
    2dee:	a8 2e       	mov	r10, r24
    2df0:	a8 18       	sub	r10, r8
    2df2:	fb 2d       	mov	r31, r11
    2df4:	ff 77       	andi	r31, 0x7F	; 127
    2df6:	7f 2e       	mov	r7, r31
    2df8:	76 fe       	sbrs	r7, 6
    2dfa:	0b c0       	rjmp	.+22     	; 0x2e12 <vfprintf+0x29a>
    2dfc:	37 2d       	mov	r19, r7
    2dfe:	3e 7f       	andi	r19, 0xFE	; 254
    2e00:	a5 14       	cp	r10, r5
    2e02:	50 f4       	brcc	.+20     	; 0x2e18 <vfprintf+0x2a0>
    2e04:	74 fe       	sbrs	r7, 4
    2e06:	0a c0       	rjmp	.+20     	; 0x2e1c <vfprintf+0x2a4>
    2e08:	72 fc       	sbrc	r7, 2
    2e0a:	08 c0       	rjmp	.+16     	; 0x2e1c <vfprintf+0x2a4>
    2e0c:	37 2d       	mov	r19, r7
    2e0e:	3e 7e       	andi	r19, 0xEE	; 238
    2e10:	05 c0       	rjmp	.+10     	; 0x2e1c <vfprintf+0x2a4>
    2e12:	ba 2c       	mov	r11, r10
    2e14:	37 2d       	mov	r19, r7
    2e16:	03 c0       	rjmp	.+6      	; 0x2e1e <vfprintf+0x2a6>
    2e18:	ba 2c       	mov	r11, r10
    2e1a:	01 c0       	rjmp	.+2      	; 0x2e1e <vfprintf+0x2a6>
    2e1c:	b5 2c       	mov	r11, r5
    2e1e:	34 ff       	sbrs	r19, 4
    2e20:	0d c0       	rjmp	.+26     	; 0x2e3c <vfprintf+0x2c4>
    2e22:	fe 01       	movw	r30, r28
    2e24:	ea 0d       	add	r30, r10
    2e26:	f1 1d       	adc	r31, r1
    2e28:	80 81       	ld	r24, Z
    2e2a:	80 33       	cpi	r24, 0x30	; 48
    2e2c:	11 f4       	brne	.+4      	; 0x2e32 <vfprintf+0x2ba>
    2e2e:	39 7e       	andi	r19, 0xE9	; 233
    2e30:	09 c0       	rjmp	.+18     	; 0x2e44 <vfprintf+0x2cc>
    2e32:	32 ff       	sbrs	r19, 2
    2e34:	06 c0       	rjmp	.+12     	; 0x2e42 <vfprintf+0x2ca>
    2e36:	b3 94       	inc	r11
    2e38:	b3 94       	inc	r11
    2e3a:	04 c0       	rjmp	.+8      	; 0x2e44 <vfprintf+0x2cc>
    2e3c:	83 2f       	mov	r24, r19
    2e3e:	86 78       	andi	r24, 0x86	; 134
    2e40:	09 f0       	breq	.+2      	; 0x2e44 <vfprintf+0x2cc>
    2e42:	b3 94       	inc	r11
    2e44:	33 fd       	sbrc	r19, 3
    2e46:	12 c0       	rjmp	.+36     	; 0x2e6c <vfprintf+0x2f4>
    2e48:	30 ff       	sbrs	r19, 0
    2e4a:	06 c0       	rjmp	.+12     	; 0x2e58 <vfprintf+0x2e0>
    2e4c:	5a 2c       	mov	r5, r10
    2e4e:	b3 14       	cp	r11, r3
    2e50:	18 f4       	brcc	.+6      	; 0x2e58 <vfprintf+0x2e0>
    2e52:	53 0c       	add	r5, r3
    2e54:	5b 18       	sub	r5, r11
    2e56:	b3 2c       	mov	r11, r3
    2e58:	b3 14       	cp	r11, r3
    2e5a:	60 f4       	brcc	.+24     	; 0x2e74 <vfprintf+0x2fc>
    2e5c:	b7 01       	movw	r22, r14
    2e5e:	80 e2       	ldi	r24, 0x20	; 32
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	3c 87       	std	Y+12, r19	; 0x0c
    2e64:	62 d0       	rcall	.+196    	; 0x2f2a <fputc>
    2e66:	b3 94       	inc	r11
    2e68:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e6a:	f6 cf       	rjmp	.-20     	; 0x2e58 <vfprintf+0x2e0>
    2e6c:	b3 14       	cp	r11, r3
    2e6e:	10 f4       	brcc	.+4      	; 0x2e74 <vfprintf+0x2fc>
    2e70:	3b 18       	sub	r3, r11
    2e72:	01 c0       	rjmp	.+2      	; 0x2e76 <vfprintf+0x2fe>
    2e74:	31 2c       	mov	r3, r1
    2e76:	34 ff       	sbrs	r19, 4
    2e78:	11 c0       	rjmp	.+34     	; 0x2e9c <vfprintf+0x324>
    2e7a:	b7 01       	movw	r22, r14
    2e7c:	80 e3       	ldi	r24, 0x30	; 48
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	3c 87       	std	Y+12, r19	; 0x0c
    2e82:	53 d0       	rcall	.+166    	; 0x2f2a <fputc>
    2e84:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e86:	32 ff       	sbrs	r19, 2
    2e88:	16 c0       	rjmp	.+44     	; 0x2eb6 <vfprintf+0x33e>
    2e8a:	31 fd       	sbrc	r19, 1
    2e8c:	03 c0       	rjmp	.+6      	; 0x2e94 <vfprintf+0x31c>
    2e8e:	88 e7       	ldi	r24, 0x78	; 120
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <vfprintf+0x320>
    2e94:	88 e5       	ldi	r24, 0x58	; 88
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	b7 01       	movw	r22, r14
    2e9a:	0c c0       	rjmp	.+24     	; 0x2eb4 <vfprintf+0x33c>
    2e9c:	83 2f       	mov	r24, r19
    2e9e:	86 78       	andi	r24, 0x86	; 134
    2ea0:	51 f0       	breq	.+20     	; 0x2eb6 <vfprintf+0x33e>
    2ea2:	31 ff       	sbrs	r19, 1
    2ea4:	02 c0       	rjmp	.+4      	; 0x2eaa <vfprintf+0x332>
    2ea6:	8b e2       	ldi	r24, 0x2B	; 43
    2ea8:	01 c0       	rjmp	.+2      	; 0x2eac <vfprintf+0x334>
    2eaa:	80 e2       	ldi	r24, 0x20	; 32
    2eac:	37 fd       	sbrc	r19, 7
    2eae:	8d e2       	ldi	r24, 0x2D	; 45
    2eb0:	b7 01       	movw	r22, r14
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	3a d0       	rcall	.+116    	; 0x2f2a <fputc>
    2eb6:	a5 14       	cp	r10, r5
    2eb8:	30 f4       	brcc	.+12     	; 0x2ec6 <vfprintf+0x34e>
    2eba:	b7 01       	movw	r22, r14
    2ebc:	80 e3       	ldi	r24, 0x30	; 48
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	34 d0       	rcall	.+104    	; 0x2f2a <fputc>
    2ec2:	5a 94       	dec	r5
    2ec4:	f8 cf       	rjmp	.-16     	; 0x2eb6 <vfprintf+0x33e>
    2ec6:	aa 94       	dec	r10
    2ec8:	f4 01       	movw	r30, r8
    2eca:	ea 0d       	add	r30, r10
    2ecc:	f1 1d       	adc	r31, r1
    2ece:	80 81       	ld	r24, Z
    2ed0:	b7 01       	movw	r22, r14
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	2a d0       	rcall	.+84     	; 0x2f2a <fputc>
    2ed6:	a1 10       	cpse	r10, r1
    2ed8:	f6 cf       	rjmp	.-20     	; 0x2ec6 <vfprintf+0x34e>
    2eda:	33 20       	and	r3, r3
    2edc:	09 f4       	brne	.+2      	; 0x2ee0 <vfprintf+0x368>
    2ede:	5d ce       	rjmp	.-838    	; 0x2b9a <vfprintf+0x22>
    2ee0:	b7 01       	movw	r22, r14
    2ee2:	80 e2       	ldi	r24, 0x20	; 32
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	21 d0       	rcall	.+66     	; 0x2f2a <fputc>
    2ee8:	3a 94       	dec	r3
    2eea:	f7 cf       	rjmp	.-18     	; 0x2eda <vfprintf+0x362>
    2eec:	f7 01       	movw	r30, r14
    2eee:	86 81       	ldd	r24, Z+6	; 0x06
    2ef0:	97 81       	ldd	r25, Z+7	; 0x07
    2ef2:	02 c0       	rjmp	.+4      	; 0x2ef8 <vfprintf+0x380>
    2ef4:	8f ef       	ldi	r24, 0xFF	; 255
    2ef6:	9f ef       	ldi	r25, 0xFF	; 255
    2ef8:	2c 96       	adiw	r28, 0x0c	; 12
    2efa:	e2 e1       	ldi	r30, 0x12	; 18
    2efc:	c8 c0       	rjmp	.+400    	; 0x308e <__epilogue_restores__>

00002efe <strnlen_P>:
    2efe:	fc 01       	movw	r30, r24
    2f00:	05 90       	lpm	r0, Z+
    2f02:	61 50       	subi	r22, 0x01	; 1
    2f04:	70 40       	sbci	r23, 0x00	; 0
    2f06:	01 10       	cpse	r0, r1
    2f08:	d8 f7       	brcc	.-10     	; 0x2f00 <strnlen_P+0x2>
    2f0a:	80 95       	com	r24
    2f0c:	90 95       	com	r25
    2f0e:	8e 0f       	add	r24, r30
    2f10:	9f 1f       	adc	r25, r31
    2f12:	08 95       	ret

00002f14 <strnlen>:
    2f14:	fc 01       	movw	r30, r24
    2f16:	61 50       	subi	r22, 0x01	; 1
    2f18:	70 40       	sbci	r23, 0x00	; 0
    2f1a:	01 90       	ld	r0, Z+
    2f1c:	01 10       	cpse	r0, r1
    2f1e:	d8 f7       	brcc	.-10     	; 0x2f16 <strnlen+0x2>
    2f20:	80 95       	com	r24
    2f22:	90 95       	com	r25
    2f24:	8e 0f       	add	r24, r30
    2f26:	9f 1f       	adc	r25, r31
    2f28:	08 95       	ret

00002f2a <fputc>:
    2f2a:	0f 93       	push	r16
    2f2c:	1f 93       	push	r17
    2f2e:	cf 93       	push	r28
    2f30:	df 93       	push	r29
    2f32:	fb 01       	movw	r30, r22
    2f34:	23 81       	ldd	r18, Z+3	; 0x03
    2f36:	21 fd       	sbrc	r18, 1
    2f38:	03 c0       	rjmp	.+6      	; 0x2f40 <fputc+0x16>
    2f3a:	8f ef       	ldi	r24, 0xFF	; 255
    2f3c:	9f ef       	ldi	r25, 0xFF	; 255
    2f3e:	28 c0       	rjmp	.+80     	; 0x2f90 <fputc+0x66>
    2f40:	22 ff       	sbrs	r18, 2
    2f42:	16 c0       	rjmp	.+44     	; 0x2f70 <fputc+0x46>
    2f44:	46 81       	ldd	r20, Z+6	; 0x06
    2f46:	57 81       	ldd	r21, Z+7	; 0x07
    2f48:	24 81       	ldd	r18, Z+4	; 0x04
    2f4a:	35 81       	ldd	r19, Z+5	; 0x05
    2f4c:	42 17       	cp	r20, r18
    2f4e:	53 07       	cpc	r21, r19
    2f50:	44 f4       	brge	.+16     	; 0x2f62 <fputc+0x38>
    2f52:	a0 81       	ld	r26, Z
    2f54:	b1 81       	ldd	r27, Z+1	; 0x01
    2f56:	9d 01       	movw	r18, r26
    2f58:	2f 5f       	subi	r18, 0xFF	; 255
    2f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5c:	31 83       	std	Z+1, r19	; 0x01
    2f5e:	20 83       	st	Z, r18
    2f60:	8c 93       	st	X, r24
    2f62:	26 81       	ldd	r18, Z+6	; 0x06
    2f64:	37 81       	ldd	r19, Z+7	; 0x07
    2f66:	2f 5f       	subi	r18, 0xFF	; 255
    2f68:	3f 4f       	sbci	r19, 0xFF	; 255
    2f6a:	37 83       	std	Z+7, r19	; 0x07
    2f6c:	26 83       	std	Z+6, r18	; 0x06
    2f6e:	10 c0       	rjmp	.+32     	; 0x2f90 <fputc+0x66>
    2f70:	eb 01       	movw	r28, r22
    2f72:	09 2f       	mov	r16, r25
    2f74:	18 2f       	mov	r17, r24
    2f76:	00 84       	ldd	r0, Z+8	; 0x08
    2f78:	f1 85       	ldd	r31, Z+9	; 0x09
    2f7a:	e0 2d       	mov	r30, r0
    2f7c:	09 95       	icall
    2f7e:	89 2b       	or	r24, r25
    2f80:	e1 f6       	brne	.-72     	; 0x2f3a <fputc+0x10>
    2f82:	8e 81       	ldd	r24, Y+6	; 0x06
    2f84:	9f 81       	ldd	r25, Y+7	; 0x07
    2f86:	01 96       	adiw	r24, 0x01	; 1
    2f88:	9f 83       	std	Y+7, r25	; 0x07
    2f8a:	8e 83       	std	Y+6, r24	; 0x06
    2f8c:	81 2f       	mov	r24, r17
    2f8e:	90 2f       	mov	r25, r16
    2f90:	df 91       	pop	r29
    2f92:	cf 91       	pop	r28
    2f94:	1f 91       	pop	r17
    2f96:	0f 91       	pop	r16
    2f98:	08 95       	ret

00002f9a <__ultoa_invert>:
    2f9a:	fa 01       	movw	r30, r20
    2f9c:	aa 27       	eor	r26, r26
    2f9e:	28 30       	cpi	r18, 0x08	; 8
    2fa0:	51 f1       	breq	.+84     	; 0x2ff6 <__ultoa_invert+0x5c>
    2fa2:	20 31       	cpi	r18, 0x10	; 16
    2fa4:	81 f1       	breq	.+96     	; 0x3006 <__ultoa_invert+0x6c>
    2fa6:	e8 94       	clt
    2fa8:	6f 93       	push	r22
    2faa:	6e 7f       	andi	r22, 0xFE	; 254
    2fac:	6e 5f       	subi	r22, 0xFE	; 254
    2fae:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb0:	8f 4f       	sbci	r24, 0xFF	; 255
    2fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb4:	af 4f       	sbci	r26, 0xFF	; 255
    2fb6:	b1 e0       	ldi	r27, 0x01	; 1
    2fb8:	3e d0       	rcall	.+124    	; 0x3036 <__ultoa_invert+0x9c>
    2fba:	b4 e0       	ldi	r27, 0x04	; 4
    2fbc:	3c d0       	rcall	.+120    	; 0x3036 <__ultoa_invert+0x9c>
    2fbe:	67 0f       	add	r22, r23
    2fc0:	78 1f       	adc	r23, r24
    2fc2:	89 1f       	adc	r24, r25
    2fc4:	9a 1f       	adc	r25, r26
    2fc6:	a1 1d       	adc	r26, r1
    2fc8:	68 0f       	add	r22, r24
    2fca:	79 1f       	adc	r23, r25
    2fcc:	8a 1f       	adc	r24, r26
    2fce:	91 1d       	adc	r25, r1
    2fd0:	a1 1d       	adc	r26, r1
    2fd2:	6a 0f       	add	r22, r26
    2fd4:	71 1d       	adc	r23, r1
    2fd6:	81 1d       	adc	r24, r1
    2fd8:	91 1d       	adc	r25, r1
    2fda:	a1 1d       	adc	r26, r1
    2fdc:	20 d0       	rcall	.+64     	; 0x301e <__ultoa_invert+0x84>
    2fde:	09 f4       	brne	.+2      	; 0x2fe2 <__ultoa_invert+0x48>
    2fe0:	68 94       	set
    2fe2:	3f 91       	pop	r19
    2fe4:	2a e0       	ldi	r18, 0x0A	; 10
    2fe6:	26 9f       	mul	r18, r22
    2fe8:	11 24       	eor	r1, r1
    2fea:	30 19       	sub	r19, r0
    2fec:	30 5d       	subi	r19, 0xD0	; 208
    2fee:	31 93       	st	Z+, r19
    2ff0:	de f6       	brtc	.-74     	; 0x2fa8 <__ultoa_invert+0xe>
    2ff2:	cf 01       	movw	r24, r30
    2ff4:	08 95       	ret
    2ff6:	46 2f       	mov	r20, r22
    2ff8:	47 70       	andi	r20, 0x07	; 7
    2ffa:	40 5d       	subi	r20, 0xD0	; 208
    2ffc:	41 93       	st	Z+, r20
    2ffe:	b3 e0       	ldi	r27, 0x03	; 3
    3000:	0f d0       	rcall	.+30     	; 0x3020 <__ultoa_invert+0x86>
    3002:	c9 f7       	brne	.-14     	; 0x2ff6 <__ultoa_invert+0x5c>
    3004:	f6 cf       	rjmp	.-20     	; 0x2ff2 <__ultoa_invert+0x58>
    3006:	46 2f       	mov	r20, r22
    3008:	4f 70       	andi	r20, 0x0F	; 15
    300a:	40 5d       	subi	r20, 0xD0	; 208
    300c:	4a 33       	cpi	r20, 0x3A	; 58
    300e:	18 f0       	brcs	.+6      	; 0x3016 <__ultoa_invert+0x7c>
    3010:	49 5d       	subi	r20, 0xD9	; 217
    3012:	31 fd       	sbrc	r19, 1
    3014:	40 52       	subi	r20, 0x20	; 32
    3016:	41 93       	st	Z+, r20
    3018:	02 d0       	rcall	.+4      	; 0x301e <__ultoa_invert+0x84>
    301a:	a9 f7       	brne	.-22     	; 0x3006 <__ultoa_invert+0x6c>
    301c:	ea cf       	rjmp	.-44     	; 0x2ff2 <__ultoa_invert+0x58>
    301e:	b4 e0       	ldi	r27, 0x04	; 4
    3020:	a6 95       	lsr	r26
    3022:	97 95       	ror	r25
    3024:	87 95       	ror	r24
    3026:	77 95       	ror	r23
    3028:	67 95       	ror	r22
    302a:	ba 95       	dec	r27
    302c:	c9 f7       	brne	.-14     	; 0x3020 <__ultoa_invert+0x86>
    302e:	00 97       	sbiw	r24, 0x00	; 0
    3030:	61 05       	cpc	r22, r1
    3032:	71 05       	cpc	r23, r1
    3034:	08 95       	ret
    3036:	9b 01       	movw	r18, r22
    3038:	ac 01       	movw	r20, r24
    303a:	0a 2e       	mov	r0, r26
    303c:	06 94       	lsr	r0
    303e:	57 95       	ror	r21
    3040:	47 95       	ror	r20
    3042:	37 95       	ror	r19
    3044:	27 95       	ror	r18
    3046:	ba 95       	dec	r27
    3048:	c9 f7       	brne	.-14     	; 0x303c <__ultoa_invert+0xa2>
    304a:	62 0f       	add	r22, r18
    304c:	73 1f       	adc	r23, r19
    304e:	84 1f       	adc	r24, r20
    3050:	95 1f       	adc	r25, r21
    3052:	a0 1d       	adc	r26, r0
    3054:	08 95       	ret

00003056 <__prologue_saves__>:
    3056:	2f 92       	push	r2
    3058:	3f 92       	push	r3
    305a:	4f 92       	push	r4
    305c:	5f 92       	push	r5
    305e:	6f 92       	push	r6
    3060:	7f 92       	push	r7
    3062:	8f 92       	push	r8
    3064:	9f 92       	push	r9
    3066:	af 92       	push	r10
    3068:	bf 92       	push	r11
    306a:	cf 92       	push	r12
    306c:	df 92       	push	r13
    306e:	ef 92       	push	r14
    3070:	ff 92       	push	r15
    3072:	0f 93       	push	r16
    3074:	1f 93       	push	r17
    3076:	cf 93       	push	r28
    3078:	df 93       	push	r29
    307a:	cd b7       	in	r28, 0x3d	; 61
    307c:	de b7       	in	r29, 0x3e	; 62
    307e:	ca 1b       	sub	r28, r26
    3080:	db 0b       	sbc	r29, r27
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	cd bf       	out	0x3d, r28	; 61
    308c:	09 94       	ijmp

0000308e <__epilogue_restores__>:
    308e:	2a 88       	ldd	r2, Y+18	; 0x12
    3090:	39 88       	ldd	r3, Y+17	; 0x11
    3092:	48 88       	ldd	r4, Y+16	; 0x10
    3094:	5f 84       	ldd	r5, Y+15	; 0x0f
    3096:	6e 84       	ldd	r6, Y+14	; 0x0e
    3098:	7d 84       	ldd	r7, Y+13	; 0x0d
    309a:	8c 84       	ldd	r8, Y+12	; 0x0c
    309c:	9b 84       	ldd	r9, Y+11	; 0x0b
    309e:	aa 84       	ldd	r10, Y+10	; 0x0a
    30a0:	b9 84       	ldd	r11, Y+9	; 0x09
    30a2:	c8 84       	ldd	r12, Y+8	; 0x08
    30a4:	df 80       	ldd	r13, Y+7	; 0x07
    30a6:	ee 80       	ldd	r14, Y+6	; 0x06
    30a8:	fd 80       	ldd	r15, Y+5	; 0x05
    30aa:	0c 81       	ldd	r16, Y+4	; 0x04
    30ac:	1b 81       	ldd	r17, Y+3	; 0x03
    30ae:	aa 81       	ldd	r26, Y+2	; 0x02
    30b0:	b9 81       	ldd	r27, Y+1	; 0x01
    30b2:	ce 0f       	add	r28, r30
    30b4:	d1 1d       	adc	r29, r1
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	ed 01       	movw	r28, r26
    30c2:	08 95       	ret

000030c4 <_exit>:
    30c4:	f8 94       	cli

000030c6 <__stop_program>:
    30c6:	ff cf       	rjmp	.-2      	; 0x30c6 <__stop_program>
