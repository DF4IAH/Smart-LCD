
Smart-LCD_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  00003e7e  00003f12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012e  00800298  00800298  000040aa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000040aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004108  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c0  00000000  00000000  00004148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000745c  00000000  00000000  00004508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b4f  00000000  00000000  0000b964  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005730  00000000  00000000  0000d4b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001234  00000000  00000000  00012be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000148b4  00000000  00000000  00013e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000557b  00000000  00000000  000286cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  0002dc47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001cac  00000000  00000000  0002dfd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	be c3       	rjmp	.+1916   	; 0x77e <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__vector_1>
       8:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__vector_2>
       c:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__vector_3>
      10:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__vector_4>
      14:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__vector_5>
      18:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_6>
      1c:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__vector_7>
      20:	0c 94 06 09 	jmp	0x120c	; 0x120c <__vector_8>
      24:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__vector_9>
      28:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_10>
      2c:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__vector_11>
      30:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__vector_12>
      34:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__vector_13>
      38:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__vector_14>
      3c:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <__vector_15>
      40:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__vector_16>
      44:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__vector_17>
      48:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__vector_18>
      4c:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__vector_19>
      50:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__vector_20>
      54:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_21>
      58:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__vector_22>
      5c:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <__vector_23>
      60:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__vector_24>
      64:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__vector_25>
      68:	55 17       	cp	r21, r21
      6a:	63 17       	cp	r22, r19
      6c:	63 17       	cp	r22, r19
      6e:	63 17       	cp	r22, r19
      70:	63 17       	cp	r22, r19
      72:	63 17       	cp	r22, r19
      74:	63 17       	cp	r22, r19
      76:	63 17       	cp	r22, r19
      78:	0f 16       	cp	r0, r31
      7a:	63 17       	cp	r22, r19
      7c:	63 17       	cp	r22, r19
      7e:	63 17       	cp	r22, r19
      80:	63 17       	cp	r22, r19
      82:	63 17       	cp	r22, r19
      84:	63 17       	cp	r22, r19
      86:	63 17       	cp	r22, r19
      88:	23 16       	cp	r2, r19
      8a:	63 17       	cp	r22, r19
      8c:	63 17       	cp	r22, r19
      8e:	63 17       	cp	r22, r19
      90:	63 17       	cp	r22, r19
      92:	63 17       	cp	r22, r19
      94:	63 17       	cp	r22, r19
      96:	63 17       	cp	r22, r19
      98:	24 16       	cp	r2, r20
      9a:	63 17       	cp	r22, r19
      9c:	63 17       	cp	r22, r19
      9e:	63 17       	cp	r22, r19
      a0:	63 17       	cp	r22, r19
      a2:	63 17       	cp	r22, r19
      a4:	63 17       	cp	r22, r19
      a6:	63 17       	cp	r22, r19
      a8:	31 16       	cp	r3, r17
      aa:	63 17       	cp	r22, r19
      ac:	63 17       	cp	r22, r19
      ae:	63 17       	cp	r22, r19
      b0:	63 17       	cp	r22, r19
      b2:	63 17       	cp	r22, r19
      b4:	63 17       	cp	r22, r19
      b6:	63 17       	cp	r22, r19
      b8:	33 16       	cp	r3, r19
      ba:	63 17       	cp	r22, r19
      bc:	63 17       	cp	r22, r19
      be:	63 17       	cp	r22, r19
      c0:	63 17       	cp	r22, r19
      c2:	63 17       	cp	r22, r19
      c4:	63 17       	cp	r22, r19
      c6:	63 17       	cp	r22, r19
      c8:	49 16       	cp	r4, r25
      ca:	63 17       	cp	r22, r19
      cc:	63 17       	cp	r22, r19
      ce:	63 17       	cp	r22, r19
      d0:	63 17       	cp	r22, r19
      d2:	63 17       	cp	r22, r19
      d4:	63 17       	cp	r22, r19
      d6:	63 17       	cp	r22, r19
      d8:	4e 16       	cp	r4, r30
      da:	63 17       	cp	r22, r19
      dc:	63 17       	cp	r22, r19
      de:	63 17       	cp	r22, r19
      e0:	63 17       	cp	r22, r19
      e2:	63 17       	cp	r22, r19
      e4:	63 17       	cp	r22, r19
      e6:	63 17       	cp	r22, r19
      e8:	50 16       	cp	r5, r16
      ea:	63 17       	cp	r22, r19
      ec:	63 17       	cp	r22, r19
      ee:	63 17       	cp	r22, r19
      f0:	63 17       	cp	r22, r19
      f2:	63 17       	cp	r22, r19
      f4:	63 17       	cp	r22, r19
      f6:	63 17       	cp	r22, r19
      f8:	52 16       	cp	r5, r18
      fa:	63 17       	cp	r22, r19
      fc:	63 17       	cp	r22, r19
      fe:	63 17       	cp	r22, r19
     100:	63 17       	cp	r22, r19
     102:	63 17       	cp	r22, r19
     104:	63 17       	cp	r22, r19
     106:	63 17       	cp	r22, r19
     108:	54 16       	cp	r5, r20
     10a:	63 17       	cp	r22, r19
     10c:	63 17       	cp	r22, r19
     10e:	63 17       	cp	r22, r19
     110:	63 17       	cp	r22, r19
     112:	63 17       	cp	r22, r19
     114:	63 17       	cp	r22, r19
     116:	63 17       	cp	r22, r19
     118:	56 16       	cp	r5, r22
     11a:	63 17       	cp	r22, r19
     11c:	63 17       	cp	r22, r19
     11e:	63 17       	cp	r22, r19
     120:	63 17       	cp	r22, r19
     122:	63 17       	cp	r22, r19
     124:	63 17       	cp	r22, r19
     126:	63 17       	cp	r22, r19
     128:	58 16       	cp	r5, r24
     12a:	63 17       	cp	r22, r19
     12c:	63 17       	cp	r22, r19
     12e:	63 17       	cp	r22, r19
     130:	63 17       	cp	r22, r19
     132:	63 17       	cp	r22, r19
     134:	63 17       	cp	r22, r19
     136:	63 17       	cp	r22, r19
     138:	59 16       	cp	r5, r25
     13a:	63 17       	cp	r22, r19
     13c:	63 17       	cp	r22, r19
     13e:	63 17       	cp	r22, r19
     140:	63 17       	cp	r22, r19
     142:	63 17       	cp	r22, r19
     144:	63 17       	cp	r22, r19
     146:	63 17       	cp	r22, r19
     148:	69 16       	cp	r6, r25
     14a:	63 17       	cp	r22, r19
     14c:	63 17       	cp	r22, r19
     14e:	63 17       	cp	r22, r19
     150:	63 17       	cp	r22, r19
     152:	63 17       	cp	r22, r19
     154:	63 17       	cp	r22, r19
     156:	63 17       	cp	r22, r19
     158:	6a 16       	cp	r6, r26
     15a:	63 17       	cp	r22, r19
     15c:	63 17       	cp	r22, r19
     15e:	63 17       	cp	r22, r19
     160:	63 17       	cp	r22, r19
     162:	63 17       	cp	r22, r19
     164:	63 17       	cp	r22, r19
     166:	63 17       	cp	r22, r19
     168:	75 16       	cp	r7, r21
     16a:	63 17       	cp	r22, r19
     16c:	63 17       	cp	r22, r19
     16e:	63 17       	cp	r22, r19
     170:	63 17       	cp	r22, r19
     172:	63 17       	cp	r22, r19
     174:	63 17       	cp	r22, r19
     176:	63 17       	cp	r22, r19
     178:	ea 16       	cp	r14, r26
     17a:	63 17       	cp	r22, r19
     17c:	63 17       	cp	r22, r19
     17e:	63 17       	cp	r22, r19
     180:	63 17       	cp	r22, r19
     182:	63 17       	cp	r22, r19
     184:	63 17       	cp	r22, r19
     186:	63 17       	cp	r22, r19
     188:	76 16       	cp	r7, r22
     18a:	63 17       	cp	r22, r19
     18c:	63 17       	cp	r22, r19
     18e:	63 17       	cp	r22, r19
     190:	63 17       	cp	r22, r19
     192:	63 17       	cp	r22, r19
     194:	63 17       	cp	r22, r19
     196:	63 17       	cp	r22, r19
     198:	eb 16       	cp	r14, r27
     19a:	63 17       	cp	r22, r19
     19c:	63 17       	cp	r22, r19
     19e:	63 17       	cp	r22, r19
     1a0:	63 17       	cp	r22, r19
     1a2:	63 17       	cp	r22, r19
     1a4:	63 17       	cp	r22, r19
     1a6:	63 17       	cp	r22, r19
     1a8:	03 17       	cp	r16, r19
     1aa:	63 17       	cp	r22, r19
     1ac:	63 17       	cp	r22, r19
     1ae:	63 17       	cp	r22, r19
     1b0:	63 17       	cp	r22, r19
     1b2:	63 17       	cp	r22, r19
     1b4:	63 17       	cp	r22, r19
     1b6:	63 17       	cp	r22, r19
     1b8:	12 17       	cp	r17, r18
     1ba:	63 17       	cp	r22, r19
     1bc:	63 17       	cp	r22, r19
     1be:	63 17       	cp	r22, r19
     1c0:	63 17       	cp	r22, r19
     1c2:	63 17       	cp	r22, r19
     1c4:	63 17       	cp	r22, r19
     1c6:	63 17       	cp	r22, r19
     1c8:	13 17       	cp	r17, r19
     1ca:	63 17       	cp	r22, r19
     1cc:	63 17       	cp	r22, r19
     1ce:	63 17       	cp	r22, r19
     1d0:	63 17       	cp	r22, r19
     1d2:	63 17       	cp	r22, r19
     1d4:	63 17       	cp	r22, r19
     1d6:	63 17       	cp	r22, r19
     1d8:	30 17       	cp	r19, r16
     1da:	63 17       	cp	r22, r19
     1dc:	63 17       	cp	r22, r19
     1de:	63 17       	cp	r22, r19
     1e0:	63 17       	cp	r22, r19
     1e2:	63 17       	cp	r22, r19
     1e4:	63 17       	cp	r22, r19
     1e6:	63 17       	cp	r22, r19
     1e8:	4d 17       	cp	r20, r29
     1ea:	63 17       	cp	r22, r19
     1ec:	63 17       	cp	r22, r19
     1ee:	63 17       	cp	r22, r19
     1f0:	63 17       	cp	r22, r19
     1f2:	63 17       	cp	r22, r19
     1f4:	63 17       	cp	r22, r19
     1f6:	63 17       	cp	r22, r19
     1f8:	51 17       	cp	r21, r17
     1fa:	63 17       	cp	r22, r19
     1fc:	63 17       	cp	r22, r19
     1fe:	63 17       	cp	r22, r19
     200:	63 17       	cp	r22, r19
     202:	63 17       	cp	r22, r19
     204:	63 17       	cp	r22, r19
     206:	63 17       	cp	r22, r19
     208:	63 17       	cp	r22, r19
     20a:	63 17       	cp	r22, r19
     20c:	63 17       	cp	r22, r19
     20e:	63 17       	cp	r22, r19
     210:	63 17       	cp	r22, r19
     212:	63 17       	cp	r22, r19
     214:	63 17       	cp	r22, r19
     216:	63 17       	cp	r22, r19
     218:	63 17       	cp	r22, r19
     21a:	63 17       	cp	r22, r19
     21c:	63 17       	cp	r22, r19
     21e:	63 17       	cp	r22, r19
     220:	63 17       	cp	r22, r19
     222:	63 17       	cp	r22, r19
     224:	63 17       	cp	r22, r19
     226:	63 17       	cp	r22, r19
     228:	63 17       	cp	r22, r19
     22a:	63 17       	cp	r22, r19
     22c:	63 17       	cp	r22, r19
     22e:	63 17       	cp	r22, r19
     230:	63 17       	cp	r22, r19
     232:	63 17       	cp	r22, r19
     234:	63 17       	cp	r22, r19
     236:	63 17       	cp	r22, r19
     238:	63 17       	cp	r22, r19
     23a:	63 17       	cp	r22, r19
     23c:	63 17       	cp	r22, r19
     23e:	63 17       	cp	r22, r19
     240:	63 17       	cp	r22, r19
     242:	63 17       	cp	r22, r19
     244:	63 17       	cp	r22, r19
     246:	63 17       	cp	r22, r19
     248:	63 17       	cp	r22, r19
     24a:	63 17       	cp	r22, r19
     24c:	63 17       	cp	r22, r19
     24e:	63 17       	cp	r22, r19
     250:	63 17       	cp	r22, r19
     252:	63 17       	cp	r22, r19
     254:	63 17       	cp	r22, r19
     256:	63 17       	cp	r22, r19
     258:	5c 17       	cp	r21, r28

0000025a <__trampolines_end>:
     25a:	00 00       	nop
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 20       	and	r0, r0
     262:	20 20       	and	r2, r0
     264:	20 20       	and	r2, r0
     266:	00 20       	and	r0, r0
     268:	50 50       	subi	r21, 0x00	; 0
     26a:	50 00       	.word	0x0050	; ????
     26c:	00 00       	nop
     26e:	00 50       	subi	r16, 0x00	; 0
     270:	50 f8       	bld	r5, 0
     272:	50 f8       	bld	r5, 0
     274:	50 50       	subi	r21, 0x00	; 0
     276:	20 78       	andi	r18, 0x80	; 128
     278:	a0 70       	andi	r26, 0x00	; 0
     27a:	28 f0       	brcs	.+10     	; 0x286 <__trampolines_end+0x2c>
     27c:	20 c0       	rjmp	.+64     	; 0x2be <__trampolines_end+0x64>
     27e:	c8 10       	cpse	r12, r8
     280:	20 40       	sbci	r18, 0x00	; 0
     282:	98 18       	sub	r9, r8
     284:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x3cda>
     288:	a8 90       	.word	0x90a8	; ????
     28a:	68 60       	ori	r22, 0x08	; 8
     28c:	20 40       	sbci	r18, 0x00	; 0
     28e:	00 00       	nop
     290:	00 00       	nop
     292:	10 20       	and	r1, r0
     294:	40 40       	sbci	r20, 0x00	; 0
     296:	40 20       	and	r4, r0
     298:	10 40       	sbci	r17, 0x00	; 0
     29a:	20 10       	cpse	r2, r0
     29c:	10 10       	cpse	r1, r0
     29e:	20 40       	sbci	r18, 0x00	; 0
     2a0:	00 50       	subi	r16, 0x00	; 0
     2a2:	20 f8       	bld	r2, 0
     2a4:	20 50       	subi	r18, 0x00	; 0
     2a6:	00 00       	nop
     2a8:	20 20       	and	r2, r0
     2aa:	f8 20       	and	r15, r8
     2ac:	20 00       	.word	0x0020	; ????
     2ae:	00 00       	nop
     2b0:	00 00       	nop
     2b2:	60 20       	and	r6, r0
     2b4:	40 00       	.word	0x0040	; ????
     2b6:	00 00       	nop
     2b8:	f8 00       	.word	0x00f8	; ????
     2ba:	00 00       	nop
     2bc:	00 00       	nop
     2be:	00 00       	nop
     2c0:	00 60       	ori	r16, 0x00	; 0
     2c2:	60 00       	.word	0x0060	; ????
     2c4:	08 10       	cpse	r0, r8
     2c6:	20 40       	sbci	r18, 0x00	; 0
     2c8:	80 00       	.word	0x0080	; ????
     2ca:	70 88       	ldd	r7, Z+16	; 0x10
     2cc:	98 a8       	ldd	r9, Y+48	; 0x30
     2ce:	c8 88       	ldd	r12, Y+16	; 0x10
     2d0:	70 20       	and	r7, r0
     2d2:	60 20       	and	r6, r0
     2d4:	20 20       	and	r2, r0
     2d6:	20 70       	andi	r18, 0x00	; 0
     2d8:	70 88       	ldd	r7, Z+16	; 0x10
     2da:	08 10       	cpse	r0, r8
     2dc:	20 40       	sbci	r18, 0x00	; 0
     2de:	f8 f8       	.word	0xf8f8	; ????
     2e0:	10 20       	and	r1, r0
     2e2:	10 08       	sbc	r1, r0
     2e4:	88 70       	andi	r24, 0x08	; 8
     2e6:	10 30       	cpi	r17, 0x00	; 0
     2e8:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__bss_end+0xd32>
     2ec:	10 f8       	bld	r1, 0
     2ee:	80 f0       	brcs	.+32     	; 0x310 <__trampolines_end+0xb6>
     2f0:	08 08       	sbc	r0, r8
     2f2:	88 70       	andi	r24, 0x08	; 8
     2f4:	30 40       	sbci	r19, 0x00	; 0
     2f6:	80 f0       	brcs	.+32     	; 0x318 <__trampolines_end+0xbe>
     2f8:	88 88       	ldd	r8, Y+16	; 0x10
     2fa:	70 f8       	bld	r7, 0
     2fc:	08 10       	cpse	r0, r8
     2fe:	20 40       	sbci	r18, 0x00	; 0
     300:	40 40       	sbci	r20, 0x00	; 0
     302:	70 88       	ldd	r7, Z+16	; 0x10
     304:	88 70       	andi	r24, 0x08	; 8
     306:	88 88       	ldd	r8, Y+16	; 0x10
     308:	70 70       	andi	r23, 0x00	; 0
     30a:	88 88       	ldd	r8, Y+16	; 0x10
     30c:	78 08       	sbc	r7, r8
     30e:	10 60       	ori	r17, 0x00	; 0
     310:	00 60       	ori	r16, 0x00	; 0
     312:	60 00       	.word	0x0060	; ????
     314:	60 60       	ori	r22, 0x00	; 0
     316:	00 00       	nop
     318:	60 60       	ori	r22, 0x00	; 0
     31a:	00 60       	ori	r16, 0x00	; 0
     31c:	20 40       	sbci	r18, 0x00	; 0
     31e:	08 10       	cpse	r0, r8
     320:	20 40       	sbci	r18, 0x00	; 0
     322:	20 10       	cpse	r2, r0
     324:	08 00       	.word	0x0008	; ????
     326:	00 f8       	bld	r0, 0
     328:	00 f8       	bld	r0, 0
     32a:	00 00       	nop
     32c:	80 40       	sbci	r24, 0x00	; 0
     32e:	20 10       	cpse	r2, r0
     330:	20 40       	sbci	r18, 0x00	; 0
     332:	80 70       	andi	r24, 0x00	; 0
     334:	88 08       	sbc	r8, r8
     336:	10 20       	and	r1, r0
     338:	00 20       	and	r0, r0
     33a:	70 88       	ldd	r7, Z+16	; 0x10
     33c:	08 68       	ori	r16, 0x88	; 136
     33e:	a8 a8       	ldd	r10, Y+48	; 0x30
     340:	70 70       	andi	r23, 0x00	; 0
     342:	88 88       	ldd	r8, Y+16	; 0x10
     344:	88 f8       	.word	0xf888	; ????
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	f0 88       	ldd	r15, Z+16	; 0x10
     34a:	88 f0       	brcs	.+34     	; 0x36e <__trampolines_end+0x114>
     34c:	88 88       	ldd	r8, Y+16	; 0x10
     34e:	f0 70       	andi	r31, 0x00	; 0
     350:	88 80       	ld	r8, Y
     352:	80 80       	ld	r8, Z
     354:	88 70       	andi	r24, 0x08	; 8
     356:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x84c2>
     35a:	88 90       	.word	0x9088	; ????
     35c:	e0 f8       	bld	r14, 0
     35e:	80 80       	ld	r8, Z
     360:	f0 80       	ld	r15, Z
     362:	80 f8       	bld	r8, 0
     364:	f8 80       	ld	r15, Y
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	80 80       	ld	r8, Z
     36a:	80 70       	andi	r24, 0x00	; 0
     36c:	88 80       	ld	r8, Y
     36e:	80 98       	cbi	0x10, 0	; 16
     370:	88 70       	andi	r24, 0x08	; 8
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 f8       	.word	0xf888	; ????
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 70       	andi	r24, 0x08	; 8
     37a:	20 20       	and	r2, r0
     37c:	20 20       	and	r2, r0
     37e:	20 70       	andi	r18, 0x00	; 0
     380:	38 10       	cpse	r3, r8
     382:	10 10       	cpse	r1, r0
     384:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x849a>
     388:	90 a0       	ldd	r9, Z+32	; 0x20
     38a:	c0 a0       	ldd	r12, Z+32	; 0x20
     38c:	90 88       	ldd	r9, Z+16	; 0x10
     38e:	80 80       	ld	r8, Z
     390:	80 80       	ld	r8, Z
     392:	80 80       	ld	r8, Z
     394:	f8 88       	ldd	r15, Y+16	; 0x10
     396:	d8 a8       	ldd	r13, Y+48	; 0x30
     398:	88 88       	ldd	r8, Y+16	; 0x10
     39a:	88 88       	ldd	r8, Y+16	; 0x10
     39c:	88 88       	ldd	r8, Y+16	; 0x10
     39e:	c8 a8       	ldd	r12, Y+48	; 0x30
     3a0:	98 88       	ldd	r9, Y+16	; 0x10
     3a2:	88 70       	andi	r24, 0x08	; 8
     3a4:	88 88       	ldd	r8, Y+16	; 0x10
     3a6:	88 88       	ldd	r8, Y+16	; 0x10
     3a8:	88 70       	andi	r24, 0x08	; 8
     3aa:	f0 88       	ldd	r15, Z+16	; 0x10
     3ac:	88 f0       	brcs	.+34     	; 0x3d0 <__trampolines_end+0x176>
     3ae:	80 80       	ld	r8, Z
     3b0:	80 70       	andi	r24, 0x00	; 0
     3b2:	88 88       	ldd	r8, Y+16	; 0x10
     3b4:	88 a8       	ldd	r8, Y+48	; 0x30
     3b6:	90 68       	ori	r25, 0x80	; 128
     3b8:	f0 88       	ldd	r15, Z+16	; 0x10
     3ba:	88 f0       	brcs	.+34     	; 0x3de <__trampolines_end+0x184>
     3bc:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x74c2>
     3c0:	80 80       	ld	r8, Z
     3c2:	70 08       	sbc	r7, r0
     3c4:	08 f0       	brcs	.+2      	; 0x3c8 <__trampolines_end+0x16e>
     3c6:	f8 20       	and	r15, r8
     3c8:	20 20       	and	r2, r0
     3ca:	20 20       	and	r2, r0
     3cc:	20 88       	ldd	r2, Z+16	; 0x10
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	88 88       	ldd	r8, Y+16	; 0x10
     3d2:	88 70       	andi	r24, 0x08	; 8
     3d4:	88 88       	ldd	r8, Y+16	; 0x10
     3d6:	88 88       	ldd	r8, Y+16	; 0x10
     3d8:	88 50       	subi	r24, 0x08	; 8
     3da:	20 88       	ldd	r2, Z+16	; 0x10
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	a8 a8       	ldd	r10, Y+48	; 0x30
     3e0:	d8 88       	ldd	r13, Y+16	; 0x10
     3e2:	88 88       	ldd	r8, Y+16	; 0x10
     3e4:	50 20       	and	r5, r0
     3e6:	50 88       	ldd	r5, Z+16	; 0x10
     3e8:	88 88       	ldd	r8, Y+16	; 0x10
     3ea:	88 50       	subi	r24, 0x08	; 8
     3ec:	20 20       	and	r2, r0
     3ee:	20 20       	and	r2, r0
     3f0:	f8 08       	sbc	r15, r8
     3f2:	10 20       	and	r1, r0
     3f4:	40 80       	ld	r4, Z
     3f6:	f8 38       	cpi	r31, 0x88	; 136
     3f8:	20 20       	and	r2, r0
     3fa:	20 20       	and	r2, r0
     3fc:	20 38       	cpi	r18, 0x80	; 128
     3fe:	00 80       	ld	r0, Z
     400:	40 20       	and	r4, r0
     402:	10 08       	sbc	r1, r0
     404:	00 e0       	ldi	r16, 0x00	; 0
     406:	20 20       	and	r2, r0
     408:	20 20       	and	r2, r0
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	20 50       	subi	r18, 0x00	; 0
     40e:	88 00       	.word	0x0088	; ????
	...
     418:	00 f8       	bld	r0, 0
     41a:	40 20       	and	r4, r0
     41c:	10 00       	.word	0x0010	; ????
     41e:	00 00       	nop
     420:	00 00       	nop
     422:	00 70       	andi	r16, 0x00	; 0
     424:	08 78       	andi	r16, 0x88	; 136
     426:	88 78       	andi	r24, 0x88	; 136
     428:	80 80       	ld	r8, Z
     42a:	b0 c8       	rjmp	.-3744   	; 0xfffff58c <__eeprom_end+0xff7ef58c>
     42c:	88 88       	ldd	r8, Y+16	; 0x10
     42e:	f0 00       	.word	0x00f0	; ????
     430:	00 70       	andi	r16, 0x00	; 0
     432:	80 80       	ld	r8, Z
     434:	88 70       	andi	r24, 0x08	; 8
     436:	08 08       	sbc	r0, r8
     438:	68 98       	cbi	0x0d, 0	; 13
     43a:	88 88       	ldd	r8, Y+16	; 0x10
     43c:	78 00       	.word	0x0078	; ????
     43e:	00 70       	andi	r16, 0x00	; 0
     440:	88 f8       	.word	0xf888	; ????
     442:	80 70       	andi	r24, 0x00	; 0
     444:	30 48       	sbci	r19, 0x80	; 128
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	40 00       	.word	0x0040	; ????
     44c:	00 78       	andi	r16, 0x80	; 128
     44e:	88 78       	andi	r24, 0x88	; 136
     450:	08 30       	cpi	r16, 0x08	; 8
     452:	80 80       	ld	r8, Z
     454:	b0 c8       	rjmp	.-3744   	; 0xfffff5b6 <__eeprom_end+0xff7ef5b6>
     456:	88 88       	ldd	r8, Y+16	; 0x10
     458:	88 20       	and	r8, r8
     45a:	00 60       	ori	r16, 0x00	; 0
     45c:	20 20       	and	r2, r0
     45e:	20 70       	andi	r18, 0x00	; 0
     460:	10 00       	.word	0x0010	; ????
     462:	30 10       	cpse	r3, r0
     464:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x3c9a>
     468:	40 48       	sbci	r20, 0x80	; 128
     46a:	50 60       	ori	r21, 0x00	; 0
     46c:	50 48       	sbci	r21, 0x80	; 128
     46e:	60 20       	and	r6, r0
     470:	20 20       	and	r2, r0
     472:	20 20       	and	r2, r0
     474:	70 00       	.word	0x0070	; ????
     476:	00 d0       	rcall	.+0      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     478:	a8 a8       	ldd	r10, Y+48	; 0x30
     47a:	88 88       	ldd	r8, Y+16	; 0x10
     47c:	00 00       	nop
     47e:	b0 c8       	rjmp	.-3744   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     480:	88 88       	ldd	r8, Y+16	; 0x10
     482:	88 00       	.word	0x0088	; ????
     484:	00 70       	andi	r16, 0x00	; 0
     486:	88 88       	ldd	r8, Y+16	; 0x10
     488:	88 70       	andi	r24, 0x08	; 8
     48a:	00 00       	nop
     48c:	f0 88       	ldd	r15, Z+16	; 0x10
     48e:	f0 80       	ld	r15, Z
     490:	80 00       	.word	0x0080	; ????
     492:	00 68       	ori	r16, 0x80	; 128
     494:	98 78       	andi	r25, 0x88	; 136
     496:	08 08       	sbc	r0, r8
     498:	00 00       	nop
     49a:	b0 c8       	rjmp	.-3744   	; 0xfffff5fc <__eeprom_end+0xff7ef5fc>
     49c:	80 80       	ld	r8, Z
     49e:	80 00       	.word	0x0080	; ????
     4a0:	00 70       	andi	r16, 0x00	; 0
     4a2:	80 70       	andi	r24, 0x00	; 0
     4a4:	08 f0       	brcs	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a6:	40 40       	sbci	r20, 0x00	; 0
     4a8:	e0 40       	sbci	r30, 0x00	; 0
     4aa:	40 48       	sbci	r20, 0x80	; 128
     4ac:	30 00       	.word	0x0030	; ????
     4ae:	00 88       	ldd	r0, Z+16	; 0x10
     4b0:	88 88       	ldd	r8, Y+16	; 0x10
     4b2:	98 68       	ori	r25, 0x88	; 136
     4b4:	00 00       	nop
     4b6:	88 88       	ldd	r8, Y+16	; 0x10
     4b8:	88 50       	subi	r24, 0x08	; 8
     4ba:	20 00       	.word	0x0020	; ????
     4bc:	00 88       	ldd	r0, Z+16	; 0x10
     4be:	88 a8       	ldd	r8, Y+48	; 0x30
     4c0:	a8 50       	subi	r26, 0x08	; 8
     4c2:	00 00       	nop
     4c4:	88 50       	subi	r24, 0x08	; 8
     4c6:	20 50       	subi	r18, 0x00	; 0
     4c8:	88 00       	.word	0x0088	; ????
     4ca:	00 88       	ldd	r0, Z+16	; 0x10
     4cc:	88 78       	andi	r24, 0x88	; 136
     4ce:	08 70       	andi	r16, 0x08	; 8
     4d0:	00 00       	nop
     4d2:	f8 10       	cpse	r15, r8
     4d4:	20 40       	sbci	r18, 0x00	; 0
     4d6:	f8 10       	cpse	r15, r8
     4d8:	20 20       	and	r2, r0
     4da:	40 20       	and	r4, r0
     4dc:	20 10       	cpse	r2, r0
     4de:	20 20       	and	r2, r0
     4e0:	20 20       	and	r2, r0
     4e2:	20 20       	and	r2, r0
     4e4:	20 40       	sbci	r18, 0x00	; 0
     4e6:	20 20       	and	r2, r0
     4e8:	10 20       	and	r1, r0
     4ea:	20 40       	sbci	r18, 0x00	; 0

000004ec <sysfont_glyphs>:
     4ec:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     4fc:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     50c:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     51c:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     52c:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     53c:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     54c:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     55c:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     56c:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     57c:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     58c:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     59c:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     5ac:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     5bc:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     5cc:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     5dc:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     5ec:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     5fc:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     60c:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     61c:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     62c:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     63c:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     64c:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     65c:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     66c:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     67c:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     68c:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     69c:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     6ac:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     6bc:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     6cc:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     6dc:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     6ec:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     6fc:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     70c:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     71c:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     72c:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     73c:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     74c:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     75c:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     76c:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     77c:	20 40                                                @

0000077e <__ctors_end>:
     77e:	11 24       	eor	r1, r1
     780:	1f be       	out	0x3f, r1	; 63
     782:	cf ef       	ldi	r28, 0xFF	; 255
     784:	d8 e0       	ldi	r29, 0x08	; 8
     786:	de bf       	out	0x3e, r29	; 62
     788:	cd bf       	out	0x3d, r28	; 61

0000078a <__do_copy_data>:
     78a:	12 e0       	ldi	r17, 0x02	; 2
     78c:	a0 e0       	ldi	r26, 0x00	; 0
     78e:	b1 e0       	ldi	r27, 0x01	; 1
     790:	ee e7       	ldi	r30, 0x7E	; 126
     792:	fe e3       	ldi	r31, 0x3E	; 62
     794:	02 c0       	rjmp	.+4      	; 0x79a <__do_copy_data+0x10>
     796:	05 90       	lpm	r0, Z+
     798:	0d 92       	st	X+, r0
     79a:	a8 39       	cpi	r26, 0x98	; 152
     79c:	b1 07       	cpc	r27, r17
     79e:	d9 f7       	brne	.-10     	; 0x796 <__do_copy_data+0xc>

000007a0 <__do_clear_bss>:
     7a0:	23 e0       	ldi	r18, 0x03	; 3
     7a2:	a8 e9       	ldi	r26, 0x98	; 152
     7a4:	b2 e0       	ldi	r27, 0x02	; 2
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <.do_clear_bss_start>

000007a8 <.do_clear_bss_loop>:
     7a8:	1d 92       	st	X+, r1

000007aa <.do_clear_bss_start>:
     7aa:	a6 3c       	cpi	r26, 0xC6	; 198
     7ac:	b2 07       	cpc	r27, r18
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <.do_clear_bss_loop>
     7b0:	0e 94 c3 18 	call	0x3186	; 0x3186 <main>
     7b4:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <_exit>

000007b8 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	1f 92       	push	r1
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7c8:	8f b7       	in	r24, 0x3f	; 63
     7ca:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     7cc:	f8 94       	cli
	return flags;
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     7d0:	5f 93       	push	r21
     7d2:	50 e8       	ldi	r21, 0x80	; 128
     7d4:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     7de:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7e0:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     7e2:	0f 90       	pop	r0
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	08 95       	ret

000007ea <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	1f 92       	push	r1
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7f4:	9f b7       	in	r25, 0x3f	; 63
     7f6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     7f8:	f8 94       	cli
	return flags;
     7fa:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     7fc:	81 11       	cpse	r24, r1
     7fe:	06 c0       	rjmp	.+12     	; 0x80c <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
     800:	e4 e6       	ldi	r30, 0x64	; 100
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	60 95       	com	r22
     806:	80 81       	ld	r24, Z
     808:	68 23       	and	r22, r24
     80a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     80c:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     80e:	0f 90       	pop	r0
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	1f 92       	push	r1
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     820:	9f b7       	in	r25, 0x3f	; 63
     822:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     824:	f8 94       	cli
	return flags;
     826:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     828:	81 11       	cpse	r24, r1
     82a:	05 c0       	rjmp	.+10     	; 0x836 <sysclk_disable_module+0x20>
		*(reg + port) |= id;
     82c:	e4 e6       	ldi	r30, 0x64	; 100
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	68 2b       	or	r22, r24
     834:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     836:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     838:	0f 90       	pop	r0
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	08 95       	ret

00000840 <gfx_mono_generic_draw_horizontal_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     84a:	e4 2f       	mov	r30, r20
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	e8 0f       	add	r30, r24
     850:	f1 1d       	adc	r31, r1
     852:	e1 3f       	cpi	r30, 0xF1	; 241
     854:	f1 05       	cpc	r31, r1
     856:	1c f0       	brlt	.+6      	; 0x85e <gfx_mono_generic_draw_horizontal_line+0x1e>
		length = GFX_MONO_LCD_WIDTH - x;
     858:	c0 ef       	ldi	r28, 0xF0	; 240
     85a:	4c 2f       	mov	r20, r28
     85c:	48 1b       	sub	r20, r24
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     85e:	44 23       	and	r20, r20
     860:	09 f4       	brne	.+2      	; 0x864 <gfx_mono_generic_draw_horizontal_line+0x24>
     862:	53 c0       	rjmp	.+166    	; 0x90a <__stack+0xb>
	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
		length = GFX_MONO_LCD_WIDTH - x;
	}

	page = y / 8;
     864:	d6 2f       	mov	r29, r22
     866:	d6 95       	lsr	r29
     868:	d6 95       	lsr	r29
     86a:	d6 95       	lsr	r29
	pixelmask = (1 << (y - (page * 8)));
     86c:	ed 2f       	mov	r30, r29
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	f1 95       	neg	r31
     872:	e1 95       	neg	r30
     874:	f1 09       	sbc	r31, r1
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	df 01       	movw	r26, r30
     884:	a6 0f       	add	r26, r22
     886:	b1 1d       	adc	r27, r1
     888:	bd 01       	movw	r22, r26
     88a:	e1 e0       	ldi	r30, 0x01	; 1
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	df 01       	movw	r26, r30
     890:	02 c0       	rjmp	.+4      	; 0x896 <gfx_mono_generic_draw_horizontal_line+0x56>
     892:	aa 0f       	add	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	6a 95       	dec	r22
     898:	e2 f7       	brpl	.-8      	; 0x892 <gfx_mono_generic_draw_horizontal_line+0x52>
     89a:	fa 2e       	mov	r15, r26
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     89c:	21 30       	cpi	r18, 0x01	; 1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <gfx_mono_generic_draw_horizontal_line+0x68>
     8a0:	98 f0       	brcs	.+38     	; 0x8c8 <gfx_mono_generic_draw_horizontal_line+0x88>
     8a2:	22 30       	cpi	r18, 0x02	; 2
     8a4:	19 f1       	breq	.+70     	; 0x8ec <gfx_mono_generic_draw_horizontal_line+0xac>
     8a6:	31 c0       	rjmp	.+98     	; 0x90a <__stack+0xb>
     8a8:	c4 2f       	mov	r28, r20
     8aa:	1f ef       	ldi	r17, 0xFF	; 255
     8ac:	18 0f       	add	r17, r24
     8ae:	01 2f       	mov	r16, r17
     8b0:	0c 0f       	add	r16, r28
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     8b2:	60 2f       	mov	r22, r16
     8b4:	8d 2f       	mov	r24, r29
     8b6:	e0 d2       	rcall	.+1472   	; 0xe78 <gfx_mono_lcd_uc1608_get_byte>
			temp |= pixelmask;
     8b8:	48 2f       	mov	r20, r24
     8ba:	4f 29       	or	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     8bc:	60 2f       	mov	r22, r16
     8be:	8d 2f       	mov	r24, r29
     8c0:	cb d2       	rcall	.+1430   	; 0xe58 <gfx_mono_lcd_uc1608_put_byte>
     8c2:	c1 50       	subi	r28, 0x01	; 1
		return;
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
     8c4:	a1 f7       	brne	.-24     	; 0x8ae <gfx_mono_generic_draw_horizontal_line+0x6e>
     8c6:	21 c0       	rjmp	.+66     	; 0x90a <__stack+0xb>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     8c8:	c4 2f       	mov	r28, r20
     8ca:	1f ef       	ldi	r17, 0xFF	; 255
     8cc:	18 0f       	add	r17, r24
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
			temp &= ~pixelmask;
     8ce:	fa 2e       	mov	r15, r26
     8d0:	f0 94       	com	r15
     8d2:	01 2f       	mov	r16, r17
     8d4:	0c 0f       	add	r16, r28
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     8d6:	60 2f       	mov	r22, r16
     8d8:	8d 2f       	mov	r24, r29
     8da:	ce d2       	rcall	.+1436   	; 0xe78 <gfx_mono_lcd_uc1608_get_byte>
			temp &= ~pixelmask;
     8dc:	48 2f       	mov	r20, r24
     8de:	4f 21       	and	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     8e0:	60 2f       	mov	r22, r16
     8e2:	8d 2f       	mov	r24, r29
     8e4:	b9 d2       	rcall	.+1394   	; 0xe58 <gfx_mono_lcd_uc1608_put_byte>
     8e6:	c1 50       	subi	r28, 0x01	; 1
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
     8e8:	a1 f7       	brne	.-24     	; 0x8d2 <gfx_mono_generic_draw_horizontal_line+0x92>
     8ea:	0f c0       	rjmp	.+30     	; 0x90a <__stack+0xb>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     8ec:	c4 2f       	mov	r28, r20
     8ee:	1f ef       	ldi	r17, 0xFF	; 255
     8f0:	18 0f       	add	r17, r24
     8f2:	01 2f       	mov	r16, r17
     8f4:	0c 0f       	add	r16, r28
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     8f6:	60 2f       	mov	r22, r16
     8f8:	8d 2f       	mov	r24, r29
     8fa:	be d2       	rcall	.+1404   	; 0xe78 <gfx_mono_lcd_uc1608_get_byte>
			temp ^= pixelmask;
     8fc:	48 2f       	mov	r20, r24
     8fe:	4f 25       	eor	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     900:	60 2f       	mov	r22, r16
     902:	8d 2f       	mov	r24, r29
     904:	a9 d2       	rcall	.+1362   	; 0xe58 <gfx_mono_lcd_uc1608_put_byte>
     906:	c1 50       	subi	r28, 0x01	; 1
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
     908:	a1 f7       	brne	.-24     	; 0x8f2 <gfx_mono_generic_draw_horizontal_line+0xb2>
		break;

	default:
		break;
	}
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	08 95       	ret

00000916 <gfx_mono_generic_draw_vertical_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
	if (length == 0) {
     922:	44 23       	and	r20, r20
     924:	09 f4       	brne	.+2      	; 0x928 <gfx_mono_generic_draw_vertical_line+0x12>
     926:	46 c0       	rjmp	.+140    	; 0x9b4 <gfx_mono_generic_draw_vertical_line+0x9e>
     928:	12 2f       	mov	r17, r18
     92a:	d8 2f       	mov	r29, r24
     92c:	9f ef       	ldi	r25, 0xFF	; 255
     92e:	96 0f       	add	r25, r22
		return;
	}

	gfx_coord_t y2 = y + length - 1;
     930:	94 0f       	add	r25, r20

	if (y == y2) {
     932:	69 13       	cpse	r22, r25
     934:	03 c0       	rjmp	.+6      	; 0x93c <gfx_mono_generic_draw_vertical_line+0x26>
		gfx_mono_draw_pixel(x, y, color);
     936:	42 2f       	mov	r20, r18
     938:	d2 d2       	rcall	.+1444   	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     93a:	3c c0       	rjmp	.+120    	; 0x9b4 <gfx_mono_generic_draw_vertical_line+0x9e>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
     93c:	9f 37       	cpi	r25, 0x7F	; 127
     93e:	08 f0       	brcs	.+2      	; 0x942 <gfx_mono_generic_draw_vertical_line+0x2c>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
     940:	9f e7       	ldi	r25, 0x7F	; 127
	}

	gfx_coord_t y1page = y / 8;
     942:	c6 2f       	mov	r28, r22
     944:	c6 95       	lsr	r28
     946:	c6 95       	lsr	r28
     948:	c6 95       	lsr	r28
	gfx_coord_t y2page = y2 / 8;
     94a:	09 2f       	mov	r16, r25
     94c:	06 95       	lsr	r16
     94e:	06 95       	lsr	r16
     950:	06 95       	lsr	r16

	uint8_t y1bitpos = y & 0x07;
     952:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
     954:	2f ef       	ldi	r18, 0xFF	; 255
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	a9 01       	movw	r20, r18
     95a:	02 c0       	rjmp	.+4      	; 0x960 <gfx_mono_generic_draw_vertical_line+0x4a>
     95c:	44 0f       	add	r20, r20
     95e:	55 1f       	adc	r21, r21
     960:	6a 95       	dec	r22
     962:	e2 f7       	brpl	.-8      	; 0x95c <gfx_mono_generic_draw_vertical_line+0x46>

	gfx_coord_t y1page = y / 8;
	gfx_coord_t y2page = y2 / 8;

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;
     964:	97 70       	andi	r25, 0x07	; 7

	uint8_t y1pixelmask = 0xFF << y1bitpos;
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
     966:	67 e0       	ldi	r22, 0x07	; 7
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	fb 01       	movw	r30, r22
     96c:	e9 1b       	sub	r30, r25
     96e:	f1 09       	sbc	r31, r1
     970:	79 01       	movw	r14, r18
     972:	02 c0       	rjmp	.+4      	; 0x978 <gfx_mono_generic_draw_vertical_line+0x62>
     974:	f5 94       	asr	r15
     976:	e7 94       	ror	r14
     978:	ea 95       	dec	r30
     97a:	e2 f7       	brpl	.-8      	; 0x974 <gfx_mono_generic_draw_vertical_line+0x5e>

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     97c:	c0 13       	cpse	r28, r16
     97e:	06 c0       	rjmp	.+12     	; 0x98c <gfx_mono_generic_draw_vertical_line+0x76>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
     980:	4e 21       	and	r20, r14
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
     982:	21 2f       	mov	r18, r17
     984:	6d 2f       	mov	r22, r29
     986:	8c 2f       	mov	r24, r28
     988:	87 d2       	rcall	.+1294   	; 0xe98 <gfx_mono_lcd_uc1608_mask_byte>
     98a:	14 c0       	rjmp	.+40     	; 0x9b4 <gfx_mono_generic_draw_vertical_line+0x9e>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
     98c:	21 2f       	mov	r18, r17
     98e:	6d 2f       	mov	r22, r29
     990:	8c 2f       	mov	r24, r28
     992:	82 d2       	rcall	.+1284   	; 0xe98 <gfx_mono_lcd_uc1608_mask_byte>

		while (++y1page < y2page) {
     994:	cf 5f       	subi	r28, 0xFF	; 255
     996:	c0 17       	cp	r28, r16
     998:	40 f4       	brcc	.+16     	; 0x9aa <gfx_mono_generic_draw_vertical_line+0x94>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     99a:	21 2f       	mov	r18, r17
     99c:	4f ef       	ldi	r20, 0xFF	; 255
     99e:	6d 2f       	mov	r22, r29
     9a0:	8c 2f       	mov	r24, r28
     9a2:	7a d2       	rcall	.+1268   	; 0xe98 <gfx_mono_lcd_uc1608_mask_byte>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     9a4:	cf 5f       	subi	r28, 0xFF	; 255
     9a6:	c0 17       	cp	r28, r16
     9a8:	c0 f3       	brcs	.-16     	; 0x99a <gfx_mono_generic_draw_vertical_line+0x84>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     9aa:	21 2f       	mov	r18, r17
     9ac:	4e 2d       	mov	r20, r14
     9ae:	6d 2f       	mov	r22, r29
     9b0:	80 2f       	mov	r24, r16
     9b2:	72 d2       	rcall	.+1252   	; 0xe98 <gfx_mono_lcd_uc1608_mask_byte>
	}
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	08 95       	ret

000009c2 <gfx_mono_generic_draw_line>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
     9c2:	8f 92       	push	r8
     9c4:	9f 92       	push	r9
     9c6:	af 92       	push	r10
     9c8:	bf 92       	push	r11
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	c8 2f       	mov	r28, r24
     9dc:	d6 2f       	mov	r29, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     9de:	48 17       	cp	r20, r24
     9e0:	28 f4       	brcc	.+10     	; 0x9ec <gfx_mono_generic_draw_line+0x2a>
		dx = x1;
		x1 = x2;
		x2 = dx;
		dy = y1;
		y1 = y2;
     9e2:	d2 2f       	mov	r29, r18
		y2 = dy;
     9e4:	26 2f       	mov	r18, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     9e6:	8c 2f       	mov	r24, r28
		dx = x1;
		x1 = x2;
     9e8:	c4 2f       	mov	r28, r20
		x2 = dx;
     9ea:	48 2f       	mov	r20, r24
		dy = y1;
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
     9ec:	e4 2e       	mov	r14, r20
     9ee:	f1 2c       	mov	r15, r1
     9f0:	ec 1a       	sub	r14, r28
     9f2:	f1 08       	sbc	r15, r1
	dy = y2 - y1;
     9f4:	a2 2e       	mov	r10, r18
     9f6:	b1 2c       	mov	r11, r1
     9f8:	ad 1a       	sub	r10, r29
     9fa:	b1 08       	sbc	r11, r1

	x = x1;
	y = y1;

	if (dx < 0) {
     9fc:	ff 20       	and	r15, r15
     9fe:	2c f4       	brge	.+10     	; 0xa0a <gfx_mono_generic_draw_line+0x48>
		xinc = -1;
		dx = -dx;
     a00:	f1 94       	neg	r15
     a02:	e1 94       	neg	r14
     a04:	f1 08       	sbc	r15, r1

	x = x1;
	y = y1;

	if (dx < 0) {
		xinc = -1;
     a06:	1f ef       	ldi	r17, 0xFF	; 255
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <gfx_mono_generic_draw_line+0x4a>
		dx = -dx;
	} else {
		xinc = 1;
     a0a:	11 e0       	ldi	r17, 0x01	; 1
	}

	if (dy < 0) {
     a0c:	bb 20       	and	r11, r11
     a0e:	0c f0       	brlt	.+2      	; 0xa12 <gfx_mono_generic_draw_line+0x50>
     a10:	48 c0       	rjmp	.+144    	; 0xaa2 <gfx_mono_generic_draw_line+0xe0>
		yinc = -1;
		dy = -dy;
     a12:	88 24       	eor	r8, r8
     a14:	99 24       	eor	r9, r9
     a16:	8a 18       	sub	r8, r10
     a18:	9b 08       	sbc	r9, r11
	} else {
		yinc = 1;
	}

	if (dx > dy) {
     a1a:	8e 14       	cp	r8, r14
     a1c:	9f 04       	cpc	r9, r15
     a1e:	fc f4       	brge	.+62     	; 0xa5e <gfx_mono_generic_draw_line+0x9c>
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
		dy = -dy;
     a20:	54 01       	movw	r10, r8
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     a22:	88 24       	eor	r8, r8
     a24:	8a 94       	dec	r8
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <gfx_mono_generic_draw_line+0x6a>
		dy = -dy;
	} else {
		yinc = 1;
     a28:	88 24       	eor	r8, r8
     a2a:	83 94       	inc	r8
	}

	if (dx > dy) {
		e = dy - dx;
     a2c:	65 01       	movw	r12, r10
     a2e:	ce 18       	sub	r12, r14
     a30:	df 08       	sbc	r13, r15
		for (i = 0; i <= dx; i++) {
     a32:	ff 20       	and	r15, r15
     a34:	dc f1       	brlt	.+118    	; 0xaac <gfx_mono_generic_draw_line+0xea>
     a36:	91 2c       	mov	r9, r1
			gfx_mono_draw_pixel(x, y, color);
     a38:	40 2f       	mov	r20, r16
     a3a:	6d 2f       	mov	r22, r29
     a3c:	8c 2f       	mov	r24, r28
     a3e:	4f d2       	rcall	.+1182   	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     a40:	dd 20       	and	r13, r13
     a42:	1c f0       	brlt	.+6      	; 0xa4a <gfx_mono_generic_draw_line+0x88>
				e -= dx;
     a44:	ce 18       	sub	r12, r14
     a46:	df 08       	sbc	r13, r15
				y += yinc;
     a48:	d8 0d       	add	r29, r8
			}

			e += dy;
     a4a:	ca 0c       	add	r12, r10
     a4c:	db 1c       	adc	r13, r11
     a4e:	c1 0f       	add	r28, r17
		yinc = 1;
	}

	if (dx > dy) {
		e = dy - dx;
		for (i = 0; i <= dx; i++) {
     a50:	93 94       	inc	r9
     a52:	89 2d       	mov	r24, r9
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	e8 16       	cp	r14, r24
     a58:	f9 06       	cpc	r15, r25
     a5a:	74 f7       	brge	.-36     	; 0xa38 <gfx_mono_generic_draw_line+0x76>
     a5c:	27 c0       	rjmp	.+78     	; 0xaac <gfx_mono_generic_draw_line+0xea>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     a5e:	67 01       	movw	r12, r14
     a60:	ca 0c       	add	r12, r10
     a62:	db 1c       	adc	r13, r11
		for (i = 0; i <= dy; i++) {
     a64:	99 20       	and	r9, r9
     a66:	14 f1       	brlt	.+68     	; 0xaac <gfx_mono_generic_draw_line+0xea>
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     a68:	aa 24       	eor	r10, r10
     a6a:	aa 94       	dec	r10
		dy = -dy;
	} else {
		yinc = 1;
     a6c:	b1 2c       	mov	r11, r1
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
			gfx_mono_draw_pixel(x, y, color);
     a6e:	40 2f       	mov	r20, r16
     a70:	6d 2f       	mov	r22, r29
     a72:	8c 2f       	mov	r24, r28
     a74:	34 d2       	rcall	.+1128   	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     a76:	dd 20       	and	r13, r13
     a78:	1c f0       	brlt	.+6      	; 0xa80 <gfx_mono_generic_draw_line+0xbe>
				e -= dy;
     a7a:	c8 18       	sub	r12, r8
     a7c:	d9 08       	sbc	r13, r9
				x += xinc;
     a7e:	c1 0f       	add	r28, r17
			}

			e += dx;
     a80:	ce 0c       	add	r12, r14
     a82:	df 1c       	adc	r13, r15
     a84:	da 0d       	add	r29, r10
			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
     a86:	b3 94       	inc	r11
     a88:	8b 2d       	mov	r24, r11
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	88 16       	cp	r8, r24
     a8e:	99 06       	cpc	r9, r25
     a90:	74 f7       	brge	.-36     	; 0xa6e <gfx_mono_generic_draw_line+0xac>
     a92:	0c c0       	rjmp	.+24     	; 0xaac <gfx_mono_generic_draw_line+0xea>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     a94:	67 01       	movw	r12, r14
     a96:	ca 18       	sub	r12, r10
     a98:	db 08       	sbc	r13, r11
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
	dy = y2 - y1;
     a9a:	45 01       	movw	r8, r10

	if (dy < 0) {
		yinc = -1;
		dy = -dy;
	} else {
		yinc = 1;
     a9c:	aa 24       	eor	r10, r10
     a9e:	a3 94       	inc	r10
     aa0:	e5 cf       	rjmp	.-54     	; 0xa6c <gfx_mono_generic_draw_line+0xaa>
	}

	if (dx > dy) {
     aa2:	ae 14       	cp	r10, r14
     aa4:	bf 04       	cpc	r11, r15
     aa6:	0c f4       	brge	.+2      	; 0xaaa <gfx_mono_generic_draw_line+0xe8>
     aa8:	bf cf       	rjmp	.-130    	; 0xa28 <gfx_mono_generic_draw_line+0x66>
     aaa:	f4 cf       	rjmp	.-24     	; 0xa94 <gfx_mono_generic_draw_line+0xd2>

			e += dx;
			y += yinc;
		}
	}
}
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
     abc:	bf 90       	pop	r11
     abe:	af 90       	pop	r10
     ac0:	9f 90       	pop	r9
     ac2:	8f 90       	pop	r8
     ac4:	08 95       	ret

00000ac6 <gfx_mono_generic_draw_rect>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	d8 2f       	mov	r29, r24
     ad2:	16 2f       	mov	r17, r22
     ad4:	c4 2f       	mov	r28, r20
     ad6:	f2 2e       	mov	r15, r18
	gfx_mono_draw_horizontal_line(x, y, width, color);
     ad8:	20 2f       	mov	r18, r16
     ada:	b2 de       	rcall	.-668    	; 0x840 <gfx_mono_generic_draw_horizontal_line>
     adc:	6f ef       	ldi	r22, 0xFF	; 255
     ade:	6f 0d       	add	r22, r15
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
     ae0:	61 0f       	add	r22, r17
     ae2:	20 2f       	mov	r18, r16
     ae4:	4c 2f       	mov	r20, r28
     ae6:	8d 2f       	mov	r24, r29
     ae8:	ab de       	rcall	.-682    	; 0x840 <gfx_mono_generic_draw_horizontal_line>

	gfx_mono_draw_vertical_line(x, y, height, color);
     aea:	20 2f       	mov	r18, r16
     aec:	4f 2d       	mov	r20, r15
     aee:	61 2f       	mov	r22, r17
     af0:	8d 2f       	mov	r24, r29
     af2:	11 df       	rcall	.-478    	; 0x916 <gfx_mono_generic_draw_vertical_line>
     af4:	8f ef       	ldi	r24, 0xFF	; 255
     af6:	8c 0f       	add	r24, r28
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     af8:	20 2f       	mov	r18, r16
     afa:	4f 2d       	mov	r20, r15
     afc:	61 2f       	mov	r22, r17
     afe:	8d 0f       	add	r24, r29
     b00:	0a df       	rcall	.-492    	; 0x916 <gfx_mono_generic_draw_vertical_line>
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	08 95       	ret

00000b0e <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
	if (height == 0) {
     b18:	22 23       	and	r18, r18
     b1a:	69 f0       	breq	.+26     	; 0xb36 <gfx_mono_generic_draw_filled_rect+0x28>
     b1c:	c2 2f       	mov	r28, r18
     b1e:	f4 2e       	mov	r15, r20
     b20:	18 2f       	mov	r17, r24
     b22:	df ef       	ldi	r29, 0xFF	; 255
     b24:	d6 0f       	add	r29, r22
     b26:	6d 2f       	mov	r22, r29
     b28:	6c 0f       	add	r22, r28
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     b2a:	20 2f       	mov	r18, r16
     b2c:	4f 2d       	mov	r20, r15
     b2e:	81 2f       	mov	r24, r17
     b30:	87 de       	rcall	.-754    	; 0x840 <gfx_mono_generic_draw_horizontal_line>
     b32:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     b34:	c1 f7       	brne	.-16     	; 0xb26 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	08 95       	ret

00000b42 <gfx_mono_generic_draw_circle>:
 * \param  octant_mask Bitmask indicating which octants to draw.
 */
void gfx_mono_generic_draw_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t octant_mask)
{
     b42:	2f 92       	push	r2
     b44:	3f 92       	push	r3
     b46:	4f 92       	push	r4
     b48:	5f 92       	push	r5
     b4a:	6f 92       	push	r6
     b4c:	7f 92       	push	r7
     b4e:	8f 92       	push	r8
     b50:	9f 92       	push	r9
     b52:	af 92       	push	r10
     b54:	bf 92       	push	r11
     b56:	cf 92       	push	r12
     b58:	df 92       	push	r13
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	00 d0       	rcall	.+0      	; 0xb68 <gfx_mono_generic_draw_circle+0x26>
     b68:	1f 92       	push	r1
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	88 2e       	mov	r8, r24
     b70:	96 2e       	mov	r9, r22
     b72:	4a 83       	std	Y+2, r20	; 0x02
     b74:	a2 2e       	mov	r10, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     b76:	41 11       	cpse	r20, r1
     b78:	03 c0       	rjmp	.+6      	; 0xb80 <gfx_mono_generic_draw_circle+0x3e>
		gfx_mono_draw_pixel(x, y, color);
     b7a:	42 2f       	mov	r20, r18
     b7c:	b0 d1       	rcall	.+864    	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     b7e:	89 c0       	rjmp	.+274    	; 0xc92 <gfx_mono_generic_draw_circle+0x150>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     b80:	2a 81       	ldd	r18, Y+2	; 0x02
     b82:	e2 2e       	mov	r14, r18
     b84:	f1 2c       	mov	r15, r1
     b86:	ee 0c       	add	r14, r14
     b88:	ff 1c       	adc	r15, r15
     b8a:	f1 94       	neg	r15
     b8c:	e1 94       	neg	r14
     b8e:	f1 08       	sbc	r15, r1
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	e8 0e       	add	r14, r24
     b94:	f1 1c       	adc	r15, r1
     b96:	c6 2e       	mov	r12, r22
     b98:	d8 2c       	mov	r13, r8
     b9a:	18 2d       	mov	r17, r8
     b9c:	b6 2e       	mov	r11, r22
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     b9e:	1b 82       	std	Y+3, r1	; 0x03
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     ba0:	90 2f       	mov	r25, r16
     ba2:	91 70       	andi	r25, 0x01	; 1
     ba4:	29 2e       	mov	r2, r25
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT1) {
     ba6:	e0 2f       	mov	r30, r16
     ba8:	e2 70       	andi	r30, 0x02	; 2
     baa:	3e 2e       	mov	r3, r30
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT2) {
     bac:	f0 2f       	mov	r31, r16
     bae:	f4 70       	andi	r31, 0x04	; 4
     bb0:	4f 2e       	mov	r4, r31
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT3) {
     bb2:	20 2f       	mov	r18, r16
     bb4:	28 70       	andi	r18, 0x08	; 8
     bb6:	52 2e       	mov	r5, r18
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT4) {
     bb8:	80 2f       	mov	r24, r16
     bba:	80 71       	andi	r24, 0x10	; 16
     bbc:	68 2e       	mov	r6, r24
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
		}

		if (octant_mask & GFX_OCTANT5) {
     bbe:	90 2f       	mov	r25, r16
     bc0:	90 72       	andi	r25, 0x20	; 32
     bc2:	79 2e       	mov	r7, r25
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
		}

		if (octant_mask & GFX_OCTANT6) {
     bc4:	e0 2f       	mov	r30, r16
     bc6:	e0 74       	andi	r30, 0x40	; 64
     bc8:	e9 83       	std	Y+1, r30	; 0x01
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     bca:	22 20       	and	r2, r2
     bcc:	29 f0       	breq	.+10     	; 0xbd8 <gfx_mono_generic_draw_circle+0x96>
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
     bce:	4a 2d       	mov	r20, r10
     bd0:	6c 2d       	mov	r22, r12
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	88 0d       	add	r24, r8
     bd6:	83 d1       	rcall	.+774    	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT1) {
     bd8:	33 20       	and	r3, r3
     bda:	31 f0       	breq	.+12     	; 0xbe8 <gfx_mono_generic_draw_circle+0xa6>
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
     bdc:	4a 2d       	mov	r20, r10
     bde:	69 2d       	mov	r22, r9
     be0:	fa 81       	ldd	r31, Y+2	; 0x02
     be2:	6f 1b       	sub	r22, r31
     be4:	81 2f       	mov	r24, r17
     be6:	7b d1       	rcall	.+758    	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT2) {
     be8:	44 20       	and	r4, r4
     bea:	31 f0       	breq	.+12     	; 0xbf8 <gfx_mono_generic_draw_circle+0xb6>
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
     bec:	4a 2d       	mov	r20, r10
     bee:	69 2d       	mov	r22, r9
     bf0:	2a 81       	ldd	r18, Y+2	; 0x02
     bf2:	62 1b       	sub	r22, r18
     bf4:	8d 2d       	mov	r24, r13
     bf6:	73 d1       	rcall	.+742    	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT3) {
     bf8:	55 20       	and	r5, r5
     bfa:	31 f0       	breq	.+12     	; 0xc08 <gfx_mono_generic_draw_circle+0xc6>
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
     bfc:	4a 2d       	mov	r20, r10
     bfe:	6c 2d       	mov	r22, r12
     c00:	88 2d       	mov	r24, r8
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	89 1b       	sub	r24, r25
     c06:	6b d1       	rcall	.+726    	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT4) {
     c08:	66 20       	and	r6, r6
     c0a:	31 f0       	breq	.+12     	; 0xc18 <gfx_mono_generic_draw_circle+0xd6>
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
     c0c:	4a 2d       	mov	r20, r10
     c0e:	6b 2d       	mov	r22, r11
     c10:	88 2d       	mov	r24, r8
     c12:	ea 81       	ldd	r30, Y+2	; 0x02
     c14:	8e 1b       	sub	r24, r30
     c16:	63 d1       	rcall	.+710    	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT5) {
     c18:	77 20       	and	r7, r7
     c1a:	29 f0       	breq	.+10     	; 0xc26 <gfx_mono_generic_draw_circle+0xe4>
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
     c1c:	4a 2d       	mov	r20, r10
     c1e:	6a 81       	ldd	r22, Y+2	; 0x02
     c20:	69 0d       	add	r22, r9
     c22:	8d 2d       	mov	r24, r13
     c24:	5c d1       	rcall	.+696    	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT6) {
     c26:	f9 81       	ldd	r31, Y+1	; 0x01
     c28:	ff 23       	and	r31, r31
     c2a:	29 f0       	breq	.+10     	; 0xc36 <gfx_mono_generic_draw_circle+0xf4>
			gfx_mono_draw_pixel(x + offset_x, y + offset_y, color);
     c2c:	4a 2d       	mov	r20, r10
     c2e:	6a 81       	ldd	r22, Y+2	; 0x02
     c30:	69 0d       	add	r22, r9
     c32:	81 2f       	mov	r24, r17
     c34:	54 d1       	rcall	.+680    	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT7) {
     c36:	00 23       	and	r16, r16
     c38:	2c f4       	brge	.+10     	; 0xc44 <gfx_mono_generic_draw_circle+0x102>
			gfx_mono_draw_pixel(x + offset_y, y + offset_x, color);
     c3a:	4a 2d       	mov	r20, r10
     c3c:	6b 2d       	mov	r22, r11
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	88 0d       	add	r24, r8
     c42:	4d d1       	rcall	.+666    	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     c44:	ff 20       	and	r15, r15
     c46:	5c f4       	brge	.+22     	; 0xc5e <gfx_mono_generic_draw_circle+0x11c>
			error += ((offset_x << 2) + 6);
     c48:	2b 81       	ldd	r18, Y+3	; 0x03
     c4a:	82 2f       	mov	r24, r18
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	06 96       	adiw	r24, 0x06	; 6
     c58:	e8 0e       	add	r14, r24
     c5a:	f9 1e       	adc	r15, r25
     c5c:	0f c0       	rjmp	.+30     	; 0xc7c <gfx_mono_generic_draw_circle+0x13a>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	8e 2f       	mov	r24, r30
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	fa 81       	ldd	r31, Y+2	; 0x02
     c66:	8f 1b       	sub	r24, r31
     c68:	91 09       	sbc	r25, r1
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 96       	adiw	r24, 0x0a	; 10
     c74:	e8 0e       	add	r14, r24
     c76:	f9 1e       	adc	r15, r25
			--offset_y;
     c78:	f1 50       	subi	r31, 0x01	; 1
     c7a:	fa 83       	std	Y+2, r31	; 0x02
		}

		/* Next X. */
		++offset_x;
     c7c:	2b 81       	ldd	r18, Y+3	; 0x03
     c7e:	2f 5f       	subi	r18, 0xFF	; 255
     c80:	2b 83       	std	Y+3, r18	; 0x03
     c82:	b3 94       	inc	r11
     c84:	1f 5f       	subi	r17, 0xFF	; 255
     c86:	da 94       	dec	r13
     c88:	ca 94       	dec	r12
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	82 17       	cp	r24, r18
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <gfx_mono_generic_draw_circle+0x150>
     c90:	9c cf       	rjmp	.-200    	; 0xbca <gfx_mono_generic_draw_circle+0x88>
		}

		/* Next X. */
		++offset_x;
	}
}
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	df 90       	pop	r13
     ca6:	cf 90       	pop	r12
     ca8:	bf 90       	pop	r11
     caa:	af 90       	pop	r10
     cac:	9f 90       	pop	r9
     cae:	8f 90       	pop	r8
     cb0:	7f 90       	pop	r7
     cb2:	6f 90       	pop	r6
     cb4:	5f 90       	pop	r5
     cb6:	4f 90       	pop	r4
     cb8:	3f 90       	pop	r3
     cba:	2f 90       	pop	r2
     cbc:	08 95       	ret

00000cbe <gfx_mono_generic_draw_filled_circle>:
 * \param  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
     cbe:	5f 92       	push	r5
     cc0:	6f 92       	push	r6
     cc2:	7f 92       	push	r7
     cc4:	8f 92       	push	r8
     cc6:	9f 92       	push	r9
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	88 2e       	mov	r8, r24
     cde:	96 2e       	mov	r9, r22
     ce0:	c4 2f       	mov	r28, r20
     ce2:	a2 2e       	mov	r10, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     ce4:	41 11       	cpse	r20, r1
     ce6:	03 c0       	rjmp	.+6      	; 0xcee <gfx_mono_generic_draw_filled_circle+0x30>
		gfx_mono_draw_pixel(x, y, color);
     ce8:	42 2f       	mov	r20, r18
     cea:	f9 d0       	rcall	.+498    	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		return;
     cec:	73 c0       	rjmp	.+230    	; 0xdd4 <gfx_mono_generic_draw_filled_circle+0x116>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     cee:	e4 2e       	mov	r14, r20
     cf0:	f1 2c       	mov	r15, r1
     cf2:	ee 0c       	add	r14, r14
     cf4:	ff 1c       	adc	r15, r15
     cf6:	f1 94       	neg	r15
     cf8:	e1 94       	neg	r14
     cfa:	f1 08       	sbc	r15, r1
     cfc:	83 e0       	ldi	r24, 0x03	; 3
     cfe:	e8 0e       	add	r14, r24
     d00:	f1 1c       	adc	r15, r1
     d02:	b6 2e       	mov	r11, r22
     d04:	c8 2c       	mov	r12, r8
     d06:	d8 2c       	mov	r13, r8
     d08:	11 e0       	ldi	r17, 0x01	; 1
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     d0a:	d0 e0       	ldi	r29, 0x00	; 0
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     d0c:	80 2f       	mov	r24, r16
     d0e:	83 70       	andi	r24, 0x03	; 3
     d10:	58 2e       	mov	r5, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     d12:	80 2f       	mov	r24, r16
     d14:	8c 70       	andi	r24, 0x0C	; 12
     d16:	68 2e       	mov	r6, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     d18:	80 2f       	mov	r24, r16
     d1a:	80 73       	andi	r24, 0x30	; 48
     d1c:	78 2e       	mov	r7, r24
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     d1e:	00 7c       	andi	r16, 0xC0	; 192
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     d20:	55 20       	and	r5, r5
     d22:	69 f0       	breq	.+26     	; 0xd3e <gfx_mono_generic_draw_filled_circle+0x80>
			gfx_mono_draw_vertical_line(x + offset_y,
     d24:	2a 2d       	mov	r18, r10
     d26:	41 2f       	mov	r20, r17
     d28:	6b 2d       	mov	r22, r11
     d2a:	8c 2f       	mov	r24, r28
     d2c:	88 0d       	add	r24, r8
     d2e:	f3 dd       	rcall	.-1050   	; 0x916 <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     d30:	2a 2d       	mov	r18, r10
     d32:	41 e0       	ldi	r20, 0x01	; 1
     d34:	4c 0f       	add	r20, r28
     d36:	69 2d       	mov	r22, r9
     d38:	6c 1b       	sub	r22, r28
     d3a:	8d 2d       	mov	r24, r13
     d3c:	ec dd       	rcall	.-1064   	; 0x916 <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     d3e:	66 20       	and	r6, r6
     d40:	69 f0       	breq	.+26     	; 0xd5c <gfx_mono_generic_draw_filled_circle+0x9e>
			gfx_mono_draw_vertical_line(x - offset_y,
     d42:	2a 2d       	mov	r18, r10
     d44:	41 2f       	mov	r20, r17
     d46:	6b 2d       	mov	r22, r11
     d48:	88 2d       	mov	r24, r8
     d4a:	8c 1b       	sub	r24, r28
     d4c:	e4 dd       	rcall	.-1080   	; 0x916 <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     d4e:	2a 2d       	mov	r18, r10
     d50:	41 e0       	ldi	r20, 0x01	; 1
     d52:	4c 0f       	add	r20, r28
     d54:	69 2d       	mov	r22, r9
     d56:	6c 1b       	sub	r22, r28
     d58:	8c 2d       	mov	r24, r12
     d5a:	dd dd       	rcall	.-1094   	; 0x916 <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     d5c:	77 20       	and	r7, r7
     d5e:	61 f0       	breq	.+24     	; 0xd78 <gfx_mono_generic_draw_filled_circle+0xba>
			gfx_mono_draw_vertical_line(x - offset_y,
     d60:	2a 2d       	mov	r18, r10
     d62:	41 2f       	mov	r20, r17
     d64:	69 2d       	mov	r22, r9
     d66:	88 2d       	mov	r24, r8
     d68:	8c 1b       	sub	r24, r28
     d6a:	d5 dd       	rcall	.-1110   	; 0x916 <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     d6c:	2a 2d       	mov	r18, r10
     d6e:	41 e0       	ldi	r20, 0x01	; 1
     d70:	4c 0f       	add	r20, r28
     d72:	69 2d       	mov	r22, r9
     d74:	8c 2d       	mov	r24, r12
     d76:	cf dd       	rcall	.-1122   	; 0x916 <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     d78:	00 23       	and	r16, r16
     d7a:	61 f0       	breq	.+24     	; 0xd94 <gfx_mono_generic_draw_filled_circle+0xd6>
			gfx_mono_draw_vertical_line(x + offset_y,
     d7c:	2a 2d       	mov	r18, r10
     d7e:	41 2f       	mov	r20, r17
     d80:	69 2d       	mov	r22, r9
     d82:	8c 2f       	mov	r24, r28
     d84:	88 0d       	add	r24, r8
     d86:	c7 dd       	rcall	.-1138   	; 0x916 <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     d88:	2a 2d       	mov	r18, r10
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	4c 0f       	add	r20, r28
     d8e:	69 2d       	mov	r22, r9
     d90:	8d 2d       	mov	r24, r13
     d92:	c1 dd       	rcall	.-1150   	; 0x916 <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     d94:	ff 20       	and	r15, r15
     d96:	54 f4       	brge	.+20     	; 0xdac <gfx_mono_generic_draw_filled_circle+0xee>
			error += ((offset_x << 2) + 6);
     d98:	8d 2f       	mov	r24, r29
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	06 96       	adiw	r24, 0x06	; 6
     da6:	e8 0e       	add	r14, r24
     da8:	f9 1e       	adc	r15, r25
     daa:	0c c0       	rjmp	.+24     	; 0xdc4 <gfx_mono_generic_draw_filled_circle+0x106>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     dac:	ed 2f       	mov	r30, r29
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	ec 1b       	sub	r30, r28
     db2:	f1 09       	sbc	r31, r1
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	ee 0f       	add	r30, r30
     dba:	ff 1f       	adc	r31, r31
     dbc:	3a 96       	adiw	r30, 0x0a	; 10
     dbe:	ee 0e       	add	r14, r30
     dc0:	ff 1e       	adc	r15, r31
			--offset_y;
     dc2:	c1 50       	subi	r28, 0x01	; 1
		}

		/* Next X. */
		++offset_x;
     dc4:	df 5f       	subi	r29, 0xFF	; 255
     dc6:	1f 5f       	subi	r17, 0xFF	; 255
     dc8:	d3 94       	inc	r13
     dca:	ca 94       	dec	r12
     dcc:	ba 94       	dec	r11
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
     dce:	cd 17       	cp	r28, r29
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <gfx_mono_generic_draw_filled_circle+0x116>
     dd2:	a6 cf       	rjmp	.-180    	; 0xd20 <gfx_mono_generic_draw_filled_circle+0x62>
		}

		/* Next X. */
		++offset_x;
	}
}
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	df 90       	pop	r13
     de2:	cf 90       	pop	r12
     de4:	bf 90       	pop	r11
     de6:	af 90       	pop	r10
     de8:	9f 90       	pop	r9
     dea:	8f 90       	pop	r8
     dec:	7f 90       	pop	r7
     dee:	6f 90       	pop	r6
     df0:	5f 90       	pop	r5
     df2:	08 95       	ret

00000df4 <gfx_mono_lcd_uc1608_put_page>:
		uint8_t				byte = gfx_mono_lcd_uc1608_get_byte(page, x);

		isSet = (byte & pixel_mask) ?  GFX_PIXEL_SET : GFX_PIXEL_CLR;
	}
	return isSet;
}
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	7c 01       	movw	r14, r24
     e02:	c4 2f       	mov	r28, r20
     e04:	12 2f       	mov	r17, r18
     e06:	89 2b       	or	r24, r25
     e08:	01 f1       	breq	.+64     	; 0xe4a <gfx_mono_lcd_uc1608_put_page+0x56>
     e0a:	60 31       	cpi	r22, 0x10	; 16
     e0c:	f0 f4       	brcc	.+60     	; 0xe4a <gfx_mono_lcd_uc1608_put_page+0x56>
     e0e:	40 3f       	cpi	r20, 0xF0	; 240
     e10:	e0 f4       	brcc	.+56     	; 0xe4a <gfx_mono_lcd_uc1608_put_page+0x56>
     e12:	86 2f       	mov	r24, r22
     e14:	77 d6       	rcall	.+3310   	; 0x1b04 <lcd_page_set>
     e16:	8c 2f       	mov	r24, r28
     e18:	7b d6       	rcall	.+3318   	; 0x1b10 <lcd_col_set>
     e1a:	81 2f       	mov	r24, r17
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	8c 0f       	add	r24, r28
     e20:	91 1d       	adc	r25, r1
     e22:	81 3f       	cpi	r24, 0xF1	; 241
     e24:	91 05       	cpc	r25, r1
     e26:	14 f0       	brlt	.+4      	; 0xe2c <gfx_mono_lcd_uc1608_put_page+0x38>
     e28:	10 ef       	ldi	r17, 0xF0	; 240
     e2a:	1c 1b       	sub	r17, r28
     e2c:	11 23       	and	r17, r17
     e2e:	69 f0       	breq	.+26     	; 0xe4a <gfx_mono_lcd_uc1608_put_page+0x56>
     e30:	e7 01       	movw	r28, r14
     e32:	11 50       	subi	r17, 0x01	; 1
     e34:	01 2f       	mov	r16, r17
     e36:	10 e0       	ldi	r17, 0x00	; 0
     e38:	0f 5f       	subi	r16, 0xFF	; 255
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
     e3c:	0e 0d       	add	r16, r14
     e3e:	1f 1d       	adc	r17, r15
     e40:	89 91       	ld	r24, Y+
     e42:	01 d6       	rcall	.+3074   	; 0x1a46 <lcd_bus_write_ram>
     e44:	c0 17       	cp	r28, r16
     e46:	d1 07       	cpc	r29, r17
     e48:	d9 f7       	brne	.-10     	; 0xe40 <gfx_mono_lcd_uc1608_put_page+0x4c>
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	08 95       	ret

00000e58 <gfx_mono_lcd_uc1608_put_byte>:
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	80 31       	cpi	r24, 0x10	; 16
     e5e:	48 f4       	brcc	.+18     	; 0xe72 <gfx_mono_lcd_uc1608_put_byte+0x1a>
     e60:	60 3f       	cpi	r22, 0xF0	; 240
     e62:	38 f4       	brcc	.+14     	; 0xe72 <gfx_mono_lcd_uc1608_put_byte+0x1a>
     e64:	d4 2f       	mov	r29, r20
     e66:	c6 2f       	mov	r28, r22
     e68:	4d d6       	rcall	.+3226   	; 0x1b04 <lcd_page_set>
     e6a:	8c 2f       	mov	r24, r28
     e6c:	51 d6       	rcall	.+3234   	; 0x1b10 <lcd_col_set>
     e6e:	8d 2f       	mov	r24, r29
     e70:	ea d5       	rcall	.+3028   	; 0x1a46 <lcd_bus_write_ram>
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <gfx_mono_lcd_uc1608_get_byte>:
     e78:	cf 93       	push	r28
     e7a:	80 31       	cpi	r24, 0x10	; 16
     e7c:	40 f4       	brcc	.+16     	; 0xe8e <gfx_mono_lcd_uc1608_get_byte+0x16>
     e7e:	60 3f       	cpi	r22, 0xF0	; 240
     e80:	40 f4       	brcc	.+16     	; 0xe92 <gfx_mono_lcd_uc1608_get_byte+0x1a>
     e82:	c6 2f       	mov	r28, r22
     e84:	3f d6       	rcall	.+3198   	; 0x1b04 <lcd_page_set>
     e86:	8c 2f       	mov	r24, r28
     e88:	43 d6       	rcall	.+3206   	; 0x1b10 <lcd_col_set>
     e8a:	f2 d5       	rcall	.+3044   	; 0x1a70 <lcd_bus_read_ram>
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <gfx_mono_lcd_uc1608_get_byte+0x1c>
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <gfx_mono_lcd_uc1608_get_byte+0x1c>
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <gfx_mono_lcd_uc1608_mask_byte>:
 * \param column     Page offset (x coordinate)
 * \param pixel_mask Mask for pixel operation
 * \param color      Pixel operation
 */
void gfx_mono_lcd_uc1608_mask_byte(gfx_coord_t page, gfx_coord_t column, gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
	uint8_t data = 0;

	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
     ea0:	80 31       	cpi	r24, 0x10	; 16
     ea2:	c0 f4       	brcc	.+48     	; 0xed4 <gfx_mono_lcd_uc1608_mask_byte+0x3c>
     ea4:	60 3f       	cpi	r22, 0xF0	; 240
     ea6:	b0 f4       	brcc	.+44     	; 0xed4 <gfx_mono_lcd_uc1608_mask_byte+0x3c>
     ea8:	d2 2f       	mov	r29, r18
     eaa:	14 2f       	mov	r17, r20
     eac:	c6 2f       	mov	r28, r22
		data = gfx_mono_lcd_uc1608_get_byte(page, column);
     eae:	e4 df       	rcall	.-56     	; 0xe78 <gfx_mono_lcd_uc1608_get_byte>
     eb0:	08 2f       	mov	r16, r24

		switch (color) {
     eb2:	d1 30       	cpi	r29, 0x01	; 1
     eb4:	41 f0       	breq	.+16     	; 0xec6 <gfx_mono_lcd_uc1608_mask_byte+0x2e>
     eb6:	18 f0       	brcs	.+6      	; 0xebe <gfx_mono_lcd_uc1608_mask_byte+0x26>
     eb8:	d2 30       	cpi	r29, 0x02	; 2
     eba:	39 f0       	breq	.+14     	; 0xeca <gfx_mono_lcd_uc1608_mask_byte+0x32>
     ebc:	07 c0       	rjmp	.+14     	; 0xecc <gfx_mono_lcd_uc1608_mask_byte+0x34>
			case GFX_PIXEL_CLR:
				data &= ~pixel_mask;
     ebe:	41 2f       	mov	r20, r17
     ec0:	40 95       	com	r20
     ec2:	04 23       	and	r16, r20
				break;
     ec4:	03 c0       	rjmp	.+6      	; 0xecc <gfx_mono_lcd_uc1608_mask_byte+0x34>

			case GFX_PIXEL_SET:
				data |= pixel_mask;
     ec6:	01 2b       	or	r16, r17
				break;
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <gfx_mono_lcd_uc1608_mask_byte+0x34>

			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
     eca:	01 27       	eor	r16, r17
				break;
		}

		lcd_col_set(column);
     ecc:	8c 2f       	mov	r24, r28
     ece:	20 d6       	rcall	.+3136   	; 0x1b10 <lcd_col_set>
		lcd_bus_write_ram(data);										// Write byte slice to RAM
     ed0:	80 2f       	mov	r24, r16
     ed2:	b9 d5       	rcall	.+2930   	; 0x1a46 <lcd_bus_write_ram>
	}
}
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	08 95       	ret

00000ede <gfx_mono_lcd_uc1608_draw_pixel>:
 * \param y         Y coordinate of the pixel
 * \param color     Pixel operation.
 */
void gfx_mono_lcd_uc1608_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_mono_color_t color)
{
	if ((x < GFX_MONO_LCD_WIDTH) && (y < GFX_MONO_LCD_HEIGHT)) {
     ede:	80 3f       	cpi	r24, 0xF0	; 240
     ee0:	98 f4       	brcc	.+38     	; 0xf08 <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     ee2:	66 23       	and	r22, r22
     ee4:	8c f0       	brlt	.+34     	; 0xf08 <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     ee6:	24 2f       	mov	r18, r20
     ee8:	96 2f       	mov	r25, r22
     eea:	68 2f       	mov	r22, r24
		gfx_coord_t			page		= y / GFX_MONO_LCD_PIXELS_PER_BYTE;
		gfx_mono_color_t	pixel_mask	= 1 << (y % GFX_MONO_LCD_PIXELS_PER_BYTE);
     eec:	89 2f       	mov	r24, r25
     eee:	87 70       	andi	r24, 0x07	; 7
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <gfx_mono_lcd_uc1608_draw_pixel+0x1c>
     ef6:	44 0f       	add	r20, r20
     ef8:	55 1f       	adc	r21, r21
     efa:	8a 95       	dec	r24
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <gfx_mono_lcd_uc1608_draw_pixel+0x18>

		gfx_mono_lcd_uc1608_mask_byte(page, x, pixel_mask, color);
     efe:	89 2f       	mov	r24, r25
     f00:	86 95       	lsr	r24
     f02:	86 95       	lsr	r24
     f04:	86 95       	lsr	r24
     f06:	c8 cf       	rjmp	.-112    	; 0xe98 <gfx_mono_lcd_uc1608_mask_byte>
     f08:	08 95       	ret

00000f0a <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     f0a:	9f 92       	push	r9
     f0c:	af 92       	push	r10
     f0e:	bf 92       	push	r11
     f10:	cf 92       	push	r12
     f12:	df 92       	push	r13
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	c8 2f       	mov	r28, r24
     f22:	e6 2e       	mov	r14, r22
     f24:	b4 2e       	mov	r11, r20
     f26:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     f28:	00 e0       	ldi	r16, 0x00	; 0
     f2a:	f9 01       	movw	r30, r18
     f2c:	24 81       	ldd	r18, Z+4	; 0x04
     f2e:	43 81       	ldd	r20, Z+3	; 0x03
     f30:	6b 2d       	mov	r22, r11
     f32:	8e 2d       	mov	r24, r14
     f34:	ec dd       	rcall	.-1064   	; 0xb0e <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     f36:	f6 01       	movw	r30, r12
     f38:	80 81       	ld	r24, Z
     f3a:	81 11       	cpse	r24, r1
     f3c:	3a c0       	rjmp	.+116    	; 0xfb2 <gfx_mono_draw_char+0xa8>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     f3e:	83 81       	ldd	r24, Z+3	; 0x03
     f40:	28 2f       	mov	r18, r24
     f42:	26 95       	lsr	r18
     f44:	26 95       	lsr	r18
     f46:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     f48:	87 70       	andi	r24, 0x07	; 7
     f4a:	09 f0       	breq	.+2      	; 0xf4e <gfx_mono_draw_char+0x44>
		char_row_size++;
     f4c:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     f4e:	f6 01       	movw	r30, r12
     f50:	a4 80       	ldd	r10, Z+4	; 0x04
     f52:	2a 9d       	mul	r18, r10
     f54:	90 01       	movw	r18, r0
     f56:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
     f58:	8c 2f       	mov	r24, r28
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	45 81       	ldd	r20, Z+5	; 0x05
     f5e:	84 1b       	sub	r24, r20
     f60:	91 09       	sbc	r25, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
     f62:	28 9f       	mul	r18, r24
     f64:	a0 01       	movw	r20, r0
     f66:	29 9f       	mul	r18, r25
     f68:	50 0d       	add	r21, r0
     f6a:	38 9f       	mul	r19, r24
     f6c:	50 0d       	add	r21, r0
     f6e:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     f70:	01 81       	ldd	r16, Z+1	; 0x01
     f72:	12 81       	ldd	r17, Z+2	; 0x02
     f74:	04 0f       	add	r16, r20
     f76:	15 1f       	adc	r17, r21

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     f78:	91 2c       	mov	r9, r1
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     f7a:	f6 01       	movw	r30, r12
     f7c:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     f7e:	ff 20       	and	r15, r15
     f80:	a1 f0       	breq	.+40     	; 0xfaa <gfx_mono_draw_char+0xa0>
     f82:	d9 2d       	mov	r29, r9
     f84:	c9 2d       	mov	r28, r9
     f86:	8c 2f       	mov	r24, r28
     f88:	8e 0d       	add	r24, r14
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     f8a:	9c 2f       	mov	r25, r28
     f8c:	97 70       	andi	r25, 0x07	; 7
     f8e:	21 f4       	brne	.+8      	; 0xf98 <gfx_mono_draw_char+0x8e>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     f90:	f8 01       	movw	r30, r16
     f92:	d4 91       	lpm	r29, Z
				glyph_data++;
     f94:	0f 5f       	subi	r16, 0xFF	; 255
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     f98:	dd 23       	and	r29, r29
     f9a:	1c f4       	brge	.+6      	; 0xfa2 <gfx_mono_draw_char+0x98>
				gfx_mono_draw_pixel(inc_x, inc_y,
     f9c:	41 e0       	ldi	r20, 0x01	; 1
     f9e:	6b 2d       	mov	r22, r11
     fa0:	9e df       	rcall	.-196    	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     fa2:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     fa4:	cf 5f       	subi	r28, 0xFF	; 255
     fa6:	cf 11       	cpse	r28, r15
     fa8:	ee cf       	rjmp	.-36     	; 0xf86 <gfx_mono_draw_char+0x7c>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     faa:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     fac:	aa 94       	dec	r10
	} while (rows_left > 0);
     fae:	a1 10       	cpse	r10, r1
     fb0:	e4 cf       	rjmp	.-56     	; 0xf7a <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
     fc2:	bf 90       	pop	r11
     fc4:	af 90       	pop	r10
     fc6:	9f 90       	pop	r9
     fc8:	08 95       	ret

00000fca <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	04 2f       	mov	r16, r20
     fda:	79 01       	movw	r14, r18
     fdc:	ec 01       	movw	r28, r24
     fde:	16 2f       	mov	r17, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     fe0:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     fe2:	89 91       	ld	r24, Y+
     fe4:	8a 30       	cpi	r24, 0x0A	; 10
     fe6:	31 f4       	brne	.+12     	; 0xff4 <gfx_mono_draw_string+0x2a>
     fe8:	f7 01       	movw	r30, r14
     fea:	84 81       	ldd	r24, Z+4	; 0x04
     fec:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
     fee:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     ff0:	1d 2d       	mov	r17, r13
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     ff4:	8d 30       	cpi	r24, 0x0D	; 13
     ff6:	39 f0       	breq	.+14     	; 0x1006 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     ff8:	97 01       	movw	r18, r14
     ffa:	40 2f       	mov	r20, r16
     ffc:	61 2f       	mov	r22, r17
     ffe:	85 df       	rcall	.-246    	; 0xf0a <gfx_mono_draw_char>
			x += font->width;
    1000:	f7 01       	movw	r30, r14
    1002:	83 81       	ldd	r24, Z+3	; 0x03
    1004:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    1006:	88 81       	ld	r24, Y
    1008:	81 11       	cpse	r24, r1
    100a:	eb cf       	rjmp	.-42     	; 0xfe2 <gfx_mono_draw_string+0x18>
}
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	df 90       	pop	r13
    101a:	08 95       	ret

0000101c <asm_break>:

/* Helper functions */

void asm_break(void)
{
	__asm__ __volatile__ ("break" ::: "memory");
    101c:	98 95       	break
	nop();
    101e:	00 00       	nop
    1020:	08 95       	ret

00001022 <__vector_1>:
	asm_break();
}


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	2f 93       	push	r18
    102e:	3f 93       	push	r19
    1030:	4f 93       	push	r20
    1032:	5f 93       	push	r21
    1034:	6f 93       	push	r22
    1036:	7f 93       	push	r23
    1038:	8f 93       	push	r24
    103a:	9f 93       	push	r25
    103c:	af 93       	push	r26
    103e:	bf 93       	push	r27
    1040:	ef 93       	push	r30
    1042:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1044:	eb df       	rcall	.-42     	; 0x101c <asm_break>


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
	s_bad_interrupt();
}
    1046:	ff 91       	pop	r31
    1048:	ef 91       	pop	r30
    104a:	bf 91       	pop	r27
    104c:	af 91       	pop	r26
    104e:	9f 91       	pop	r25
    1050:	8f 91       	pop	r24
    1052:	7f 91       	pop	r23
    1054:	6f 91       	pop	r22
    1056:	5f 91       	pop	r21
    1058:	4f 91       	pop	r20
    105a:	3f 91       	pop	r19
    105c:	2f 91       	pop	r18
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <__vector_2>:

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
    1068:	1f 92       	push	r1
    106a:	0f 92       	push	r0
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	0f 92       	push	r0
    1070:	11 24       	eor	r1, r1
    1072:	2f 93       	push	r18
    1074:	3f 93       	push	r19
    1076:	4f 93       	push	r20
    1078:	5f 93       	push	r21
    107a:	6f 93       	push	r22
    107c:	7f 93       	push	r23
    107e:	8f 93       	push	r24
    1080:	9f 93       	push	r25
    1082:	af 93       	push	r26
    1084:	bf 93       	push	r27
    1086:	ef 93       	push	r30
    1088:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    108a:	c8 df       	rcall	.-112    	; 0x101c <asm_break>
}

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
	s_bad_interrupt();
}
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <__vector_3>:

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	7f 93       	push	r23
    10c4:	8f 93       	push	r24
    10c6:	9f 93       	push	r25
    10c8:	af 93       	push	r26
    10ca:	bf 93       	push	r27
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    10d0:	a5 df       	rcall	.-182    	; 0x101c <asm_break>
}

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
	s_bad_interrupt();
}
    10d2:	ff 91       	pop	r31
    10d4:	ef 91       	pop	r30
    10d6:	bf 91       	pop	r27
    10d8:	af 91       	pop	r26
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	7f 91       	pop	r23
    10e0:	6f 91       	pop	r22
    10e2:	5f 91       	pop	r21
    10e4:	4f 91       	pop	r20
    10e6:	3f 91       	pop	r19
    10e8:	2f 91       	pop	r18
    10ea:	0f 90       	pop	r0
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	0f 90       	pop	r0
    10f0:	1f 90       	pop	r1
    10f2:	18 95       	reti

000010f4 <__vector_4>:

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
    10f4:	1f 92       	push	r1
    10f6:	0f 92       	push	r0
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	0f 92       	push	r0
    10fc:	11 24       	eor	r1, r1
    10fe:	2f 93       	push	r18
    1100:	3f 93       	push	r19
    1102:	4f 93       	push	r20
    1104:	5f 93       	push	r21
    1106:	6f 93       	push	r22
    1108:	7f 93       	push	r23
    110a:	8f 93       	push	r24
    110c:	9f 93       	push	r25
    110e:	af 93       	push	r26
    1110:	bf 93       	push	r27
    1112:	ef 93       	push	r30
    1114:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1116:	82 df       	rcall	.-252    	; 0x101c <asm_break>
}

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
	s_bad_interrupt();
}
    1118:	ff 91       	pop	r31
    111a:	ef 91       	pop	r30
    111c:	bf 91       	pop	r27
    111e:	af 91       	pop	r26
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	7f 91       	pop	r23
    1126:	6f 91       	pop	r22
    1128:	5f 91       	pop	r21
    112a:	4f 91       	pop	r20
    112c:	3f 91       	pop	r19
    112e:	2f 91       	pop	r18
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	0f 90       	pop	r0
    1136:	1f 90       	pop	r1
    1138:	18 95       	reti

0000113a <__vector_5>:

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
    113a:	1f 92       	push	r1
    113c:	0f 92       	push	r0
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	0f 92       	push	r0
    1142:	11 24       	eor	r1, r1
    1144:	2f 93       	push	r18
    1146:	3f 93       	push	r19
    1148:	4f 93       	push	r20
    114a:	5f 93       	push	r21
    114c:	6f 93       	push	r22
    114e:	7f 93       	push	r23
    1150:	8f 93       	push	r24
    1152:	9f 93       	push	r25
    1154:	af 93       	push	r26
    1156:	bf 93       	push	r27
    1158:	ef 93       	push	r30
    115a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    115c:	5f df       	rcall	.-322    	; 0x101c <asm_break>
}

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
	s_bad_interrupt();
}
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	bf 91       	pop	r27
    1164:	af 91       	pop	r26
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	7f 91       	pop	r23
    116c:	6f 91       	pop	r22
    116e:	5f 91       	pop	r21
    1170:	4f 91       	pop	r20
    1172:	3f 91       	pop	r19
    1174:	2f 91       	pop	r18
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <__vector_6>:

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    11a2:	3c df       	rcall	.-392    	; 0x101c <asm_break>
}

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
	s_bad_interrupt();
}
    11a4:	ff 91       	pop	r31
    11a6:	ef 91       	pop	r30
    11a8:	bf 91       	pop	r27
    11aa:	af 91       	pop	r26
    11ac:	9f 91       	pop	r25
    11ae:	8f 91       	pop	r24
    11b0:	7f 91       	pop	r23
    11b2:	6f 91       	pop	r22
    11b4:	5f 91       	pop	r21
    11b6:	4f 91       	pop	r20
    11b8:	3f 91       	pop	r19
    11ba:	2f 91       	pop	r18
    11bc:	0f 90       	pop	r0
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	0f 90       	pop	r0
    11c2:	1f 90       	pop	r1
    11c4:	18 95       	reti

000011c6 <__vector_7>:

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
    11c6:	1f 92       	push	r1
    11c8:	0f 92       	push	r0
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	0f 92       	push	r0
    11ce:	11 24       	eor	r1, r1
    11d0:	2f 93       	push	r18
    11d2:	3f 93       	push	r19
    11d4:	4f 93       	push	r20
    11d6:	5f 93       	push	r21
    11d8:	6f 93       	push	r22
    11da:	7f 93       	push	r23
    11dc:	8f 93       	push	r24
    11de:	9f 93       	push	r25
    11e0:	af 93       	push	r26
    11e2:	bf 93       	push	r27
    11e4:	ef 93       	push	r30
    11e6:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    11e8:	19 df       	rcall	.-462    	; 0x101c <asm_break>
}

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
	s_bad_interrupt();
}
    11ea:	ff 91       	pop	r31
    11ec:	ef 91       	pop	r30
    11ee:	bf 91       	pop	r27
    11f0:	af 91       	pop	r26
    11f2:	9f 91       	pop	r25
    11f4:	8f 91       	pop	r24
    11f6:	7f 91       	pop	r23
    11f8:	6f 91       	pop	r22
    11fa:	5f 91       	pop	r21
    11fc:	4f 91       	pop	r20
    11fe:	3f 91       	pop	r19
    1200:	2f 91       	pop	r18
    1202:	0f 90       	pop	r0
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	0f 90       	pop	r0
    1208:	1f 90       	pop	r1
    120a:	18 95       	reti

0000120c <__vector_8>:

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
    120c:	1f 92       	push	r1
    120e:	0f 92       	push	r0
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	0f 92       	push	r0
    1214:	11 24       	eor	r1, r1
    1216:	2f 93       	push	r18
    1218:	3f 93       	push	r19
    121a:	4f 93       	push	r20
    121c:	5f 93       	push	r21
    121e:	6f 93       	push	r22
    1220:	7f 93       	push	r23
    1222:	8f 93       	push	r24
    1224:	9f 93       	push	r25
    1226:	af 93       	push	r26
    1228:	bf 93       	push	r27
    122a:	ef 93       	push	r30
    122c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    122e:	f6 de       	rcall	.-532    	; 0x101c <asm_break>
}

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
	s_bad_interrupt();
}
    1230:	ff 91       	pop	r31
    1232:	ef 91       	pop	r30
    1234:	bf 91       	pop	r27
    1236:	af 91       	pop	r26
    1238:	9f 91       	pop	r25
    123a:	8f 91       	pop	r24
    123c:	7f 91       	pop	r23
    123e:	6f 91       	pop	r22
    1240:	5f 91       	pop	r21
    1242:	4f 91       	pop	r20
    1244:	3f 91       	pop	r19
    1246:	2f 91       	pop	r18
    1248:	0f 90       	pop	r0
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	0f 90       	pop	r0
    124e:	1f 90       	pop	r1
    1250:	18 95       	reti

00001252 <__vector_9>:

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
    1252:	1f 92       	push	r1
    1254:	0f 92       	push	r0
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	0f 92       	push	r0
    125a:	11 24       	eor	r1, r1
    125c:	2f 93       	push	r18
    125e:	3f 93       	push	r19
    1260:	8f 93       	push	r24
    1262:	9f 93       	push	r25
	static uint8_t state_old = 0;
	static uint8_t state_ctr = 0;
	static uint8_t second_old = 0;
	uint8_t cur = PORTB & 0x3f;
    1264:	85 b1       	in	r24, 0x05	; 5
    1266:	8f 73       	andi	r24, 0x3F	; 63

	/* signaling the grade of deviation */
	g_audio_out_loudness = 0;
	if (g_showData.clkState_clk_state < 0xf) {
    1268:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <g_showData+0x14>
    126c:	9f 30       	cpi	r25, 0x0F	; 15
    126e:	60 f4       	brcc	.+24     	; 0x1288 <__vector_9+0x36>
		cur |= _BV(PORTB6);  // LED = red
    1270:	80 64       	ori	r24, 0x40	; 64
		if (state_old != 0x02) {
    1272:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <state_old.2581>
    1276:	92 30       	cpi	r25, 0x02	; 2
    1278:	19 f0       	breq	.+6      	; 0x1280 <__vector_9+0x2e>
			state_ctr = 122;  // 1 sec
    127a:	9a e7       	ldi	r25, 0x7A	; 122
    127c:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <state_ctr.2582>
		}
		state_old = 0x02;
    1280:	92 e0       	ldi	r25, 0x02	; 2
    1282:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <state_old.2581>
    1286:	22 c0       	rjmp	.+68     	; 0x12cc <__vector_9+0x7a>

	} else if ((g_showData.clkState_clk_state == 0xf) && (-4 < g_showData.ppb_int) && (g_showData.ppb_int < 4)) {
    1288:	9f 30       	cpi	r25, 0x0F	; 15
    128a:	b1 f4       	brne	.+44     	; 0x12b8 <__vector_9+0x66>
    128c:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <g_showData+0x6>
    1290:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <g_showData+0x7>
    1294:	2d 5f       	subi	r18, 0xFD	; 253
    1296:	3f 4f       	sbci	r19, 0xFF	; 255
    1298:	27 30       	cpi	r18, 0x07	; 7
    129a:	31 05       	cpc	r19, r1
    129c:	68 f4       	brcc	.+26     	; 0x12b8 <__vector_9+0x66>
		cur |= _BV(PORTB7);  // LED = green
    129e:	80 68       	ori	r24, 0x80	; 128
		state_old = 0x00;
    12a0:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <state_old.2581>

		/* Acoustic phase tracker */
		if (g_showData.time_second != second_old) {
    12a4:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <g_showData+0x19>
    12a8:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <__data_end>
    12ac:	92 17       	cp	r25, r18
    12ae:	71 f0       	breq	.+28     	; 0x12cc <__vector_9+0x7a>
			second_old = g_showData.time_second;
    12b0:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <__data_end>
			state_ctr = 30;  // 1/4 sec
		}
		state_old = 0x01;
	}

	if (state_ctr) {
    12b4:	9c e0       	ldi	r25, 0x0C	; 12
    12b6:	0e c0       	rjmp	.+28     	; 0x12d4 <__vector_9+0x82>
			second_old = g_showData.time_second;
			state_ctr = 12;
		}

	} else {
		if (!state_old) {
    12b8:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <state_old.2581>
    12bc:	91 11       	cpse	r25, r1
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <__vector_9+0x74>
			state_ctr = 30;  // 1/4 sec
    12c0:	9e e1       	ldi	r25, 0x1E	; 30
    12c2:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <state_ctr.2582>
		}
		state_old = 0x01;
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <state_old.2581>
	}

	if (state_ctr) {
    12cc:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <state_ctr.2582>
    12d0:	99 23       	and	r25, r25
    12d2:	39 f0       	breq	.+14     	; 0x12e2 <__vector_9+0x90>
		--state_ctr;
    12d4:	91 50       	subi	r25, 0x01	; 1
    12d6:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <state_ctr.2582>
		g_audio_out_loudness = 9;  // max 9
    12da:	99 e0       	ldi	r25, 0x09	; 9
    12dc:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <g_audio_out_loudness>
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <__vector_9+0x94>
	} else {
		g_audio_out_loudness = 0;
    12e2:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <g_audio_out_loudness>
	}

	PORTB = cur;
    12e6:	85 b9       	out	0x05, r24	; 5
}
    12e8:	9f 91       	pop	r25
    12ea:	8f 91       	pop	r24
    12ec:	3f 91       	pop	r19
    12ee:	2f 91       	pop	r18
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <__vector_10>:

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	2f 93       	push	r18
    1306:	3f 93       	push	r19
    1308:	4f 93       	push	r20
    130a:	5f 93       	push	r21
    130c:	6f 93       	push	r22
    130e:	7f 93       	push	r23
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
    1314:	af 93       	push	r26
    1316:	bf 93       	push	r27
    1318:	ef 93       	push	r30
    131a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    131c:	7f de       	rcall	.-770    	; 0x101c <asm_break>
}

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
	s_bad_interrupt();
}
    131e:	ff 91       	pop	r31
    1320:	ef 91       	pop	r30
    1322:	bf 91       	pop	r27
    1324:	af 91       	pop	r26
    1326:	9f 91       	pop	r25
    1328:	8f 91       	pop	r24
    132a:	7f 91       	pop	r23
    132c:	6f 91       	pop	r22
    132e:	5f 91       	pop	r21
    1330:	4f 91       	pop	r20
    1332:	3f 91       	pop	r19
    1334:	2f 91       	pop	r18
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	0f 90       	pop	r0
    133c:	1f 90       	pop	r1
    133e:	18 95       	reti

00001340 <__vector_11>:

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	11 24       	eor	r1, r1
    134a:	2f 93       	push	r18
    134c:	3f 93       	push	r19
    134e:	4f 93       	push	r20
    1350:	5f 93       	push	r21
    1352:	6f 93       	push	r22
    1354:	7f 93       	push	r23
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	af 93       	push	r26
    135c:	bf 93       	push	r27
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1362:	5c de       	rcall	.-840    	; 0x101c <asm_break>
}

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
	s_bad_interrupt();
}
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	7f 91       	pop	r23
    1372:	6f 91       	pop	r22
    1374:	5f 91       	pop	r21
    1376:	4f 91       	pop	r20
    1378:	3f 91       	pop	r19
    137a:	2f 91       	pop	r18
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <__vector_12>:

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
    1386:	1f 92       	push	r1
    1388:	0f 92       	push	r0
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	0f 92       	push	r0
    138e:	11 24       	eor	r1, r1
    1390:	2f 93       	push	r18
    1392:	3f 93       	push	r19
    1394:	4f 93       	push	r20
    1396:	5f 93       	push	r21
    1398:	6f 93       	push	r22
    139a:	7f 93       	push	r23
    139c:	8f 93       	push	r24
    139e:	9f 93       	push	r25
    13a0:	af 93       	push	r26
    13a2:	bf 93       	push	r27
    13a4:	ef 93       	push	r30
    13a6:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    13a8:	39 de       	rcall	.-910    	; 0x101c <asm_break>
}

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
	s_bad_interrupt();
}
    13aa:	ff 91       	pop	r31
    13ac:	ef 91       	pop	r30
    13ae:	bf 91       	pop	r27
    13b0:	af 91       	pop	r26
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	7f 91       	pop	r23
    13b8:	6f 91       	pop	r22
    13ba:	5f 91       	pop	r21
    13bc:	4f 91       	pop	r20
    13be:	3f 91       	pop	r19
    13c0:	2f 91       	pop	r18
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	0f 90       	pop	r0
    13c8:	1f 90       	pop	r1
    13ca:	18 95       	reti

000013cc <__vector_13>:

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
    13cc:	1f 92       	push	r1
    13ce:	0f 92       	push	r0
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	0f 92       	push	r0
    13d4:	11 24       	eor	r1, r1
    13d6:	2f 93       	push	r18
    13d8:	3f 93       	push	r19
    13da:	4f 93       	push	r20
    13dc:	5f 93       	push	r21
    13de:	8f 93       	push	r24
    13e0:	9f 93       	push	r25
    13e2:	af 93       	push	r26
    13e4:	bf 93       	push	r27
	++g_timer_abs_msb;
    13e6:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <g_timer_abs_msb>
    13ea:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <g_timer_abs_msb+0x1>
    13ee:	a0 91 c4 03 	lds	r26, 0x03C4	; 0x8003c4 <g_timer_abs_msb+0x2>
    13f2:	b0 91 c5 03 	lds	r27, 0x03C5	; 0x8003c5 <g_timer_abs_msb+0x3>
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	a1 1d       	adc	r26, r1
    13fa:	b1 1d       	adc	r27, r1
    13fc:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <g_timer_abs_msb>
    1400:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <g_timer_abs_msb+0x1>
    1404:	a0 93 c4 03 	sts	0x03C4, r26	; 0x8003c4 <g_timer_abs_msb+0x2>
    1408:	b0 93 c5 03 	sts	0x03C5, r27	; 0x8003c5 <g_timer_abs_msb+0x3>

#if 0
	const int16_t l_audio_pwm_inc = 3691;				// (880 Hz / 15625 Hz) * 16384 Steps * 2
#else
	int16_t l_audio_pwm_inc = 3691 - (g_showData.clkState_phase100 >> 4);
    140c:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <g_showData+0x2>
    1410:	30 91 8a 03 	lds	r19, 0x038A	; 0x80038a <g_showData+0x3>
    1414:	35 95       	asr	r19
    1416:	27 95       	ror	r18
    1418:	35 95       	asr	r19
    141a:	27 95       	ror	r18
    141c:	35 95       	asr	r19
    141e:	27 95       	ror	r18
    1420:	35 95       	asr	r19
    1422:	27 95       	ror	r18
    1424:	8b e6       	ldi	r24, 0x6B	; 107
    1426:	9e e0       	ldi	r25, 0x0E	; 14
    1428:	82 1b       	sub	r24, r18
    142a:	93 0b       	sbc	r25, r19
#endif

	/* Generate triangle signal */
	if (g_audio_pwm_ramp_dwn) {
    142c:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <g_audio_pwm_ramp_dwn>
    1430:	22 23       	and	r18, r18
    1432:	e1 f0       	breq	.+56     	; 0x146c <__vector_13+0xa0>
		g_audio_pwm_accu -= l_audio_pwm_inc;
    1434:	20 91 b1 03 	lds	r18, 0x03B1	; 0x8003b1 <g_audio_pwm_accu>
    1438:	30 91 b2 03 	lds	r19, 0x03B2	; 0x8003b2 <g_audio_pwm_accu+0x1>
    143c:	a9 01       	movw	r20, r18
    143e:	48 1b       	sub	r20, r24
    1440:	59 0b       	sbc	r21, r25
    1442:	ca 01       	movw	r24, r20
    1444:	50 93 b2 03 	sts	0x03B2, r21	; 0x8003b2 <g_audio_pwm_accu+0x1>
    1448:	40 93 b1 03 	sts	0x03B1, r20	; 0x8003b1 <g_audio_pwm_accu>
		if (g_audio_pwm_accu <= -16383) {
    144c:	82 30       	cpi	r24, 0x02	; 2
    144e:	50 ec       	ldi	r21, 0xC0	; 192
    1450:	95 07       	cpc	r25, r21
    1452:	34 f5       	brge	.+76     	; 0x14a0 <__vector_13+0xd4>
			g_audio_pwm_ramp_dwn = false;
    1454:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <g_audio_pwm_ramp_dwn>
			int16_t residue = -g_audio_pwm_accu - 16383;
			g_audio_pwm_accu = -16383 + residue;
    1458:	22 e0       	ldi	r18, 0x02	; 2
    145a:	30 e8       	ldi	r19, 0x80	; 128
    145c:	a9 01       	movw	r20, r18
    145e:	48 1b       	sub	r20, r24
    1460:	59 0b       	sbc	r21, r25
    1462:	50 93 b2 03 	sts	0x03B2, r21	; 0x8003b2 <g_audio_pwm_accu+0x1>
    1466:	40 93 b1 03 	sts	0x03B1, r20	; 0x8003b1 <g_audio_pwm_accu>
    146a:	1a c0       	rjmp	.+52     	; 0x14a0 <__vector_13+0xd4>
		}
	} else {
		g_audio_pwm_accu += l_audio_pwm_inc;
    146c:	20 91 b1 03 	lds	r18, 0x03B1	; 0x8003b1 <g_audio_pwm_accu>
    1470:	30 91 b2 03 	lds	r19, 0x03B2	; 0x8003b2 <g_audio_pwm_accu+0x1>
    1474:	82 0f       	add	r24, r18
    1476:	93 1f       	adc	r25, r19
    1478:	90 93 b2 03 	sts	0x03B2, r25	; 0x8003b2 <g_audio_pwm_accu+0x1>
    147c:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <g_audio_pwm_accu>
		if (g_audio_pwm_accu >= +16383) {
    1480:	8f 3f       	cpi	r24, 0xFF	; 255
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	95 07       	cpc	r25, r21
    1486:	64 f0       	brlt	.+24     	; 0x14a0 <__vector_13+0xd4>
			g_audio_pwm_ramp_dwn = true;
    1488:	21 e0       	ldi	r18, 0x01	; 1
    148a:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <g_audio_pwm_ramp_dwn>
			int16_t residue = g_audio_pwm_accu - 16383;
			g_audio_pwm_accu = 16383 - residue;
    148e:	2e ef       	ldi	r18, 0xFE	; 254
    1490:	3f e7       	ldi	r19, 0x7F	; 127
    1492:	a9 01       	movw	r20, r18
    1494:	48 1b       	sub	r20, r24
    1496:	59 0b       	sbc	r21, r25
    1498:	50 93 b2 03 	sts	0x03B2, r21	; 0x8003b2 <g_audio_pwm_accu+0x1>
    149c:	40 93 b1 03 	sts	0x03B1, r20	; 0x8003b1 <g_audio_pwm_accu>
		}
	}

	int16_t audio_out = 256 + (g_audio_pwm_accu >> ((6 + 9) - g_audio_out_loudness));
    14a0:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <g_audio_out_loudness>
    14a4:	2f e0       	ldi	r18, 0x0F	; 15
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	28 1b       	sub	r18, r24
    14aa:	31 09       	sbc	r19, r1
    14ac:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <g_audio_pwm_accu>
    14b0:	90 91 b2 03 	lds	r25, 0x03B2	; 0x8003b2 <g_audio_pwm_accu+0x1>
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <__vector_13+0xee>
    14b6:	95 95       	asr	r25
    14b8:	87 95       	ror	r24
    14ba:	2a 95       	dec	r18
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <__vector_13+0xea>
    14be:	93 95       	inc	r25
	OCR1AH = (uint8_t) (audio_out >> 8);					// 9 bit
    14c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = (uint8_t) (audio_out & 0xff);
    14c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
}
    14c8:	bf 91       	pop	r27
    14ca:	af 91       	pop	r26
    14cc:	9f 91       	pop	r25
    14ce:	8f 91       	pop	r24
    14d0:	5f 91       	pop	r21
    14d2:	4f 91       	pop	r20
    14d4:	3f 91       	pop	r19
    14d6:	2f 91       	pop	r18
    14d8:	0f 90       	pop	r0
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	0f 90       	pop	r0
    14de:	1f 90       	pop	r1
    14e0:	18 95       	reti

000014e2 <__vector_14>:

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
    14e2:	1f 92       	push	r1
    14e4:	0f 92       	push	r0
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	0f 92       	push	r0
    14ea:	11 24       	eor	r1, r1
    14ec:	2f 93       	push	r18
    14ee:	3f 93       	push	r19
    14f0:	4f 93       	push	r20
    14f2:	5f 93       	push	r21
    14f4:	6f 93       	push	r22
    14f6:	7f 93       	push	r23
    14f8:	8f 93       	push	r24
    14fa:	9f 93       	push	r25
    14fc:	af 93       	push	r26
    14fe:	bf 93       	push	r27
    1500:	ef 93       	push	r30
    1502:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1504:	8b dd       	rcall	.-1258   	; 0x101c <asm_break>
}

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
	s_bad_interrupt();
}
    1506:	ff 91       	pop	r31
    1508:	ef 91       	pop	r30
    150a:	bf 91       	pop	r27
    150c:	af 91       	pop	r26
    150e:	9f 91       	pop	r25
    1510:	8f 91       	pop	r24
    1512:	7f 91       	pop	r23
    1514:	6f 91       	pop	r22
    1516:	5f 91       	pop	r21
    1518:	4f 91       	pop	r20
    151a:	3f 91       	pop	r19
    151c:	2f 91       	pop	r18
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	0f 90       	pop	r0
    1524:	1f 90       	pop	r1
    1526:	18 95       	reti

00001528 <__vector_15>:

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
    1528:	1f 92       	push	r1
    152a:	0f 92       	push	r0
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	0f 92       	push	r0
    1530:	11 24       	eor	r1, r1
    1532:	2f 93       	push	r18
    1534:	3f 93       	push	r19
    1536:	4f 93       	push	r20
    1538:	5f 93       	push	r21
    153a:	6f 93       	push	r22
    153c:	7f 93       	push	r23
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	af 93       	push	r26
    1544:	bf 93       	push	r27
    1546:	ef 93       	push	r30
    1548:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    154a:	68 dd       	rcall	.-1328   	; 0x101c <asm_break>
}

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
	s_bad_interrupt();
}
    154c:	ff 91       	pop	r31
    154e:	ef 91       	pop	r30
    1550:	bf 91       	pop	r27
    1552:	af 91       	pop	r26
    1554:	9f 91       	pop	r25
    1556:	8f 91       	pop	r24
    1558:	7f 91       	pop	r23
    155a:	6f 91       	pop	r22
    155c:	5f 91       	pop	r21
    155e:	4f 91       	pop	r20
    1560:	3f 91       	pop	r19
    1562:	2f 91       	pop	r18
    1564:	0f 90       	pop	r0
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	0f 90       	pop	r0
    156a:	1f 90       	pop	r1
    156c:	18 95       	reti

0000156e <__vector_16>:

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
    156e:	1f 92       	push	r1
    1570:	0f 92       	push	r0
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	0f 92       	push	r0
    1576:	11 24       	eor	r1, r1
    1578:	2f 93       	push	r18
    157a:	3f 93       	push	r19
    157c:	4f 93       	push	r20
    157e:	5f 93       	push	r21
    1580:	6f 93       	push	r22
    1582:	7f 93       	push	r23
    1584:	8f 93       	push	r24
    1586:	9f 93       	push	r25
    1588:	af 93       	push	r26
    158a:	bf 93       	push	r27
    158c:	ef 93       	push	r30
    158e:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1590:	45 dd       	rcall	.-1398   	; 0x101c <asm_break>
}

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
	s_bad_interrupt();
}
    1592:	ff 91       	pop	r31
    1594:	ef 91       	pop	r30
    1596:	bf 91       	pop	r27
    1598:	af 91       	pop	r26
    159a:	9f 91       	pop	r25
    159c:	8f 91       	pop	r24
    159e:	7f 91       	pop	r23
    15a0:	6f 91       	pop	r22
    15a2:	5f 91       	pop	r21
    15a4:	4f 91       	pop	r20
    15a6:	3f 91       	pop	r19
    15a8:	2f 91       	pop	r18
    15aa:	0f 90       	pop	r0
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	0f 90       	pop	r0
    15b0:	1f 90       	pop	r1
    15b2:	18 95       	reti

000015b4 <__vector_17>:

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
    15b4:	1f 92       	push	r1
    15b6:	0f 92       	push	r0
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	0f 92       	push	r0
    15bc:	11 24       	eor	r1, r1
    15be:	2f 93       	push	r18
    15c0:	3f 93       	push	r19
    15c2:	4f 93       	push	r20
    15c4:	5f 93       	push	r21
    15c6:	6f 93       	push	r22
    15c8:	7f 93       	push	r23
    15ca:	8f 93       	push	r24
    15cc:	9f 93       	push	r25
    15ce:	af 93       	push	r26
    15d0:	bf 93       	push	r27
    15d2:	ef 93       	push	r30
    15d4:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    15d6:	22 dd       	rcall	.-1468   	; 0x101c <asm_break>
}

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
	s_bad_interrupt();
}
    15d8:	ff 91       	pop	r31
    15da:	ef 91       	pop	r30
    15dc:	bf 91       	pop	r27
    15de:	af 91       	pop	r26
    15e0:	9f 91       	pop	r25
    15e2:	8f 91       	pop	r24
    15e4:	7f 91       	pop	r23
    15e6:	6f 91       	pop	r22
    15e8:	5f 91       	pop	r21
    15ea:	4f 91       	pop	r20
    15ec:	3f 91       	pop	r19
    15ee:	2f 91       	pop	r18
    15f0:	0f 90       	pop	r0
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	0f 90       	pop	r0
    15f6:	1f 90       	pop	r1
    15f8:	18 95       	reti

000015fa <__vector_18>:

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
    15fa:	1f 92       	push	r1
    15fc:	0f 92       	push	r0
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	0f 92       	push	r0
    1602:	11 24       	eor	r1, r1
    1604:	2f 93       	push	r18
    1606:	3f 93       	push	r19
    1608:	4f 93       	push	r20
    160a:	5f 93       	push	r21
    160c:	6f 93       	push	r22
    160e:	7f 93       	push	r23
    1610:	8f 93       	push	r24
    1612:	9f 93       	push	r25
    1614:	af 93       	push	r26
    1616:	bf 93       	push	r27
    1618:	ef 93       	push	r30
    161a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    161c:	ff dc       	rcall	.-1538   	; 0x101c <asm_break>
}

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
	s_bad_interrupt();
}
    161e:	ff 91       	pop	r31
    1620:	ef 91       	pop	r30
    1622:	bf 91       	pop	r27
    1624:	af 91       	pop	r26
    1626:	9f 91       	pop	r25
    1628:	8f 91       	pop	r24
    162a:	7f 91       	pop	r23
    162c:	6f 91       	pop	r22
    162e:	5f 91       	pop	r21
    1630:	4f 91       	pop	r20
    1632:	3f 91       	pop	r19
    1634:	2f 91       	pop	r18
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	0f 90       	pop	r0
    163c:	1f 90       	pop	r1
    163e:	18 95       	reti

00001640 <__vector_19>:

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
    1640:	1f 92       	push	r1
    1642:	0f 92       	push	r0
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	0f 92       	push	r0
    1648:	11 24       	eor	r1, r1
    164a:	2f 93       	push	r18
    164c:	3f 93       	push	r19
    164e:	4f 93       	push	r20
    1650:	5f 93       	push	r21
    1652:	6f 93       	push	r22
    1654:	7f 93       	push	r23
    1656:	8f 93       	push	r24
    1658:	9f 93       	push	r25
    165a:	af 93       	push	r26
    165c:	bf 93       	push	r27
    165e:	ef 93       	push	r30
    1660:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1662:	dc dc       	rcall	.-1608   	; 0x101c <asm_break>
}

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
	s_bad_interrupt();
}
    1664:	ff 91       	pop	r31
    1666:	ef 91       	pop	r30
    1668:	bf 91       	pop	r27
    166a:	af 91       	pop	r26
    166c:	9f 91       	pop	r25
    166e:	8f 91       	pop	r24
    1670:	7f 91       	pop	r23
    1672:	6f 91       	pop	r22
    1674:	5f 91       	pop	r21
    1676:	4f 91       	pop	r20
    1678:	3f 91       	pop	r19
    167a:	2f 91       	pop	r18
    167c:	0f 90       	pop	r0
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	0f 90       	pop	r0
    1682:	1f 90       	pop	r1
    1684:	18 95       	reti

00001686 <__vector_20>:

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
    1686:	1f 92       	push	r1
    1688:	0f 92       	push	r0
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	0f 92       	push	r0
    168e:	11 24       	eor	r1, r1
    1690:	2f 93       	push	r18
    1692:	3f 93       	push	r19
    1694:	4f 93       	push	r20
    1696:	5f 93       	push	r21
    1698:	6f 93       	push	r22
    169a:	7f 93       	push	r23
    169c:	8f 93       	push	r24
    169e:	9f 93       	push	r25
    16a0:	af 93       	push	r26
    16a2:	bf 93       	push	r27
    16a4:	ef 93       	push	r30
    16a6:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    16a8:	b9 dc       	rcall	.-1678   	; 0x101c <asm_break>
}

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
	s_bad_interrupt();
}
    16aa:	ff 91       	pop	r31
    16ac:	ef 91       	pop	r30
    16ae:	bf 91       	pop	r27
    16b0:	af 91       	pop	r26
    16b2:	9f 91       	pop	r25
    16b4:	8f 91       	pop	r24
    16b6:	7f 91       	pop	r23
    16b8:	6f 91       	pop	r22
    16ba:	5f 91       	pop	r21
    16bc:	4f 91       	pop	r20
    16be:	3f 91       	pop	r19
    16c0:	2f 91       	pop	r18
    16c2:	0f 90       	pop	r0
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	0f 90       	pop	r0
    16c8:	1f 90       	pop	r1
    16ca:	18 95       	reti

000016cc <__vector_21__bottom>:
	__vector_21__bottom(reason, adc_val, adc_ldr_last, adc_temp_last);
}

/* do not static this function to avoid code inlining that would inherit many push operations in the critical section */
void __vector_21__bottom(uint8_t reason, uint16_t adc_val, uint16_t adc_ldr_last, uint16_t adc_temp_last)
{
    16cc:	cf 92       	push	r12
    16ce:	df 92       	push	r13
    16d0:	ef 92       	push	r14
    16d2:	ff 92       	push	r15
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	eb 01       	movw	r28, r22
	/* Low pass filtering and enhancing the data depth */
	if (reason == ADC_STATE_VLD_LDR) {
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	e1 f5       	brne	.+120    	; 0x1756 <__vector_21__bottom+0x8a>
		float calc = g_adc_ldr ?  0.998f * g_adc_ldr + 0.002f * adc_val : adc_val;			// load with initial value if none is set before
    16de:	c0 90 bd 03 	lds	r12, 0x03BD	; 0x8003bd <g_adc_ldr>
    16e2:	d0 90 be 03 	lds	r13, 0x03BE	; 0x8003be <g_adc_ldr+0x1>
    16e6:	e0 90 bf 03 	lds	r14, 0x03BF	; 0x8003bf <g_adc_ldr+0x2>
    16ea:	f0 90 c0 03 	lds	r15, 0x03C0	; 0x8003c0 <g_adc_ldr+0x3>
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	a9 01       	movw	r20, r18
    16f4:	c7 01       	movw	r24, r14
    16f6:	b6 01       	movw	r22, r12
    16f8:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__cmpsf2>
    16fc:	88 23       	and	r24, r24
    16fe:	e1 f0       	breq	.+56     	; 0x1738 <__vector_21__bottom+0x6c>
    1700:	2e ee       	ldi	r18, 0xEE	; 238
    1702:	3c e7       	ldi	r19, 0x7C	; 124
    1704:	4f e7       	ldi	r20, 0x7F	; 127
    1706:	5f e3       	ldi	r21, 0x3F	; 63
    1708:	c7 01       	movw	r24, r14
    170a:	b6 01       	movw	r22, r12
    170c:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__mulsf3>
    1710:	6b 01       	movw	r12, r22
    1712:	7c 01       	movw	r14, r24
    1714:	be 01       	movw	r22, r28
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatunsisf>
    171e:	2f e6       	ldi	r18, 0x6F	; 111
    1720:	32 e1       	ldi	r19, 0x12	; 18
    1722:	43 e0       	ldi	r20, 0x03	; 3
    1724:	5b e3       	ldi	r21, 0x3B	; 59
    1726:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__mulsf3>
    172a:	9b 01       	movw	r18, r22
    172c:	ac 01       	movw	r20, r24
    172e:	c7 01       	movw	r24, r14
    1730:	b6 01       	movw	r22, r12
    1732:	0e 94 14 1a 	call	0x3428	; 0x3428 <__addsf3>
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <__vector_21__bottom+0x76>
    1738:	be 01       	movw	r22, r28
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatunsisf>

		cpu_irq_disable();
    1742:	f8 94       	cli
		g_adc_ldr = calc;
    1744:	60 93 bd 03 	sts	0x03BD, r22	; 0x8003bd <g_adc_ldr>
    1748:	70 93 be 03 	sts	0x03BE, r23	; 0x8003be <g_adc_ldr+0x1>
    174c:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <g_adc_ldr+0x2>
    1750:	90 93 c0 03 	sts	0x03C0, r25	; 0x8003c0 <g_adc_ldr+0x3>
    1754:	3d c0       	rjmp	.+122    	; 0x17d0 <__vector_21__bottom+0x104>

	} else if (reason == ADC_STATE_VLD_TEMP) {
    1756:	83 30       	cpi	r24, 0x03	; 3
    1758:	d9 f5       	brne	.+118    	; 0x17d0 <__vector_21__bottom+0x104>
		float calc = g_adc_temp ?  0.9995f * g_adc_temp + 0.0005f * adc_val : adc_val;		// load with initial value if none is set before
    175a:	c0 90 b9 03 	lds	r12, 0x03B9	; 0x8003b9 <g_adc_temp>
    175e:	d0 90 ba 03 	lds	r13, 0x03BA	; 0x8003ba <g_adc_temp+0x1>
    1762:	e0 90 bb 03 	lds	r14, 0x03BB	; 0x8003bb <g_adc_temp+0x2>
    1766:	f0 90 bc 03 	lds	r15, 0x03BC	; 0x8003bc <g_adc_temp+0x3>
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	a9 01       	movw	r20, r18
    1770:	c7 01       	movw	r24, r14
    1772:	b6 01       	movw	r22, r12
    1774:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__cmpsf2>
    1778:	88 23       	and	r24, r24
    177a:	e1 f0       	breq	.+56     	; 0x17b4 <__vector_21__bottom+0xe8>
    177c:	2b e3       	ldi	r18, 0x3B	; 59
    177e:	3f ed       	ldi	r19, 0xDF	; 223
    1780:	4f e7       	ldi	r20, 0x7F	; 127
    1782:	5f e3       	ldi	r21, 0x3F	; 63
    1784:	c7 01       	movw	r24, r14
    1786:	b6 01       	movw	r22, r12
    1788:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__mulsf3>
    178c:	6b 01       	movw	r12, r22
    178e:	7c 01       	movw	r14, r24
    1790:	be 01       	movw	r22, r28
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatunsisf>
    179a:	2f e6       	ldi	r18, 0x6F	; 111
    179c:	32 e1       	ldi	r19, 0x12	; 18
    179e:	43 e0       	ldi	r20, 0x03	; 3
    17a0:	5a e3       	ldi	r21, 0x3A	; 58
    17a2:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__mulsf3>
    17a6:	9b 01       	movw	r18, r22
    17a8:	ac 01       	movw	r20, r24
    17aa:	c7 01       	movw	r24, r14
    17ac:	b6 01       	movw	r22, r12
    17ae:	0e 94 14 1a 	call	0x3428	; 0x3428 <__addsf3>
    17b2:	05 c0       	rjmp	.+10     	; 0x17be <__vector_21__bottom+0xf2>
    17b4:	be 01       	movw	r22, r28
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatunsisf>

		cpu_irq_disable();
    17be:	f8 94       	cli
		g_adc_temp = calc;
    17c0:	60 93 b9 03 	sts	0x03B9, r22	; 0x8003b9 <g_adc_temp>
    17c4:	70 93 ba 03 	sts	0x03BA, r23	; 0x8003ba <g_adc_temp+0x1>
    17c8:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <g_adc_temp+0x2>
    17cc:	90 93 bc 03 	sts	0x03BC, r25	; 0x8003bc <g_adc_temp+0x3>
	}
}
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	ff 90       	pop	r15
    17d6:	ef 90       	pop	r14
    17d8:	df 90       	pop	r13
    17da:	cf 90       	pop	r12
    17dc:	08 95       	ret

000017de <__vector_21>:
{	/* USART, TX - Complete */
	s_bad_interrupt();
}

ISR(__vector_21, ISR_BLOCK)
{	/* ADC */
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	cf 92       	push	r12
    17ea:	df 92       	push	r13
    17ec:	ef 92       	push	r14
    17ee:	ff 92       	push	r15
    17f0:	1f 93       	push	r17
    17f2:	2f 93       	push	r18
    17f4:	3f 93       	push	r19
    17f6:	4f 93       	push	r20
    17f8:	5f 93       	push	r21
    17fa:	6f 93       	push	r22
    17fc:	7f 93       	push	r23
    17fe:	8f 93       	push	r24
    1800:	9f 93       	push	r25
    1802:	af 93       	push	r26
    1804:	bf 93       	push	r27
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
	uint16_t adc_val;
	uint8_t  reason = g_adc_state;
    180e:	10 91 c1 03 	lds	r17, 0x03C1	; 0x8003c1 <g_adc_state>

	/* CLI part */
	adc_val  = ADCL;
    1812:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	adc_val |= ADCH << 8;
    1816:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    181a:	d0 e0       	ldi	r29, 0x00	; 0
    181c:	d8 2b       	or	r29, r24

	//TIFR1 |= _BV(TOV1);							// Reset Timer1 overflow status bit (no ISR for TOV1 activated!)

	switch (g_adc_state) {
    181e:	11 30       	cpi	r17, 0x01	; 1
    1820:	41 f0       	breq	.+16     	; 0x1832 <__vector_21+0x54>
    1822:	18 f0       	brcs	.+6      	; 0x182a <__vector_21+0x4c>
    1824:	12 30       	cpi	r17, 0x02	; 2
    1826:	61 f0       	breq	.+24     	; 0x1840 <__vector_21+0x62>
    1828:	0f c0       	rjmp	.+30     	; 0x1848 <__vector_21+0x6a>
		case ADC_STATE_PRE_LDR:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_LDR;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <g_adc_state>
		break;
    1830:	10 c0       	rjmp	.+32     	; 0x1852 <__vector_21+0x74>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    1832:	88 ec       	ldi	r24, 0xC8	; 200
    1834:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		case ADC_STATE_VLD_LDR:
		adc_set_admux(ADC_MUX_TEMPSENSE | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_TEMP;
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <g_adc_state>
		break;
    183e:	09 c0       	rjmp	.+18     	; 0x1852 <__vector_21+0x74>

		case ADC_STATE_PRE_TEMP:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_TEMP;
    1840:	83 e0       	ldi	r24, 0x03	; 3
    1842:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <g_adc_state>
		break;
    1846:	05 c0       	rjmp	.+10     	; 0x1852 <__vector_21+0x74>
    1848:	80 ec       	ldi	r24, 0xC0	; 192
    184a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		case ADC_STATE_VLD_TEMP:
		// fall-through

		default:
		adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_LDR;
    184e:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <g_adc_state>
	}

	uint16_t adc_ldr_last  = g_adc_ldr;
    1852:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <g_adc_ldr>
    1856:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <g_adc_ldr+0x1>
    185a:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <g_adc_ldr+0x2>
    185e:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <g_adc_ldr+0x3>
    1862:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fixunssfsi>
    1866:	6b 01       	movw	r12, r22
    1868:	7c 01       	movw	r14, r24
	uint16_t adc_temp_last = g_adc_temp;
    186a:	60 91 b9 03 	lds	r22, 0x03B9	; 0x8003b9 <g_adc_temp>
    186e:	70 91 ba 03 	lds	r23, 0x03BA	; 0x8003ba <g_adc_temp+0x1>
    1872:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <g_adc_temp+0x2>
    1876:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <g_adc_temp+0x3>
    187a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fixunssfsi>

	/* SEI part */
	cpu_irq_enable();
    187e:	78 94       	sei

	__vector_21__bottom(reason, adc_val, adc_ldr_last, adc_temp_last);
    1880:	9b 01       	movw	r18, r22
    1882:	a6 01       	movw	r20, r12
    1884:	be 01       	movw	r22, r28
    1886:	81 2f       	mov	r24, r17
    1888:	21 df       	rcall	.-446    	; 0x16cc <__vector_21__bottom>
}
    188a:	ff 91       	pop	r31
    188c:	ef 91       	pop	r30
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	bf 91       	pop	r27
    1894:	af 91       	pop	r26
    1896:	9f 91       	pop	r25
    1898:	8f 91       	pop	r24
    189a:	7f 91       	pop	r23
    189c:	6f 91       	pop	r22
    189e:	5f 91       	pop	r21
    18a0:	4f 91       	pop	r20
    18a2:	3f 91       	pop	r19
    18a4:	2f 91       	pop	r18
    18a6:	1f 91       	pop	r17
    18a8:	ff 90       	pop	r15
    18aa:	ef 90       	pop	r14
    18ac:	df 90       	pop	r13
    18ae:	cf 90       	pop	r12
    18b0:	0f 90       	pop	r0
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	0f 90       	pop	r0
    18b6:	1f 90       	pop	r1
    18b8:	18 95       	reti

000018ba <__vector_22>:
		g_adc_temp = calc;
	}
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
    18ba:	1f 92       	push	r1
    18bc:	0f 92       	push	r0
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	0f 92       	push	r0
    18c2:	11 24       	eor	r1, r1
    18c4:	2f 93       	push	r18
    18c6:	3f 93       	push	r19
    18c8:	4f 93       	push	r20
    18ca:	5f 93       	push	r21
    18cc:	6f 93       	push	r22
    18ce:	7f 93       	push	r23
    18d0:	8f 93       	push	r24
    18d2:	9f 93       	push	r25
    18d4:	af 93       	push	r26
    18d6:	bf 93       	push	r27
    18d8:	ef 93       	push	r30
    18da:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    18dc:	9f db       	rcall	.-2242   	; 0x101c <asm_break>
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
	s_bad_interrupt();
}
    18de:	ff 91       	pop	r31
    18e0:	ef 91       	pop	r30
    18e2:	bf 91       	pop	r27
    18e4:	af 91       	pop	r26
    18e6:	9f 91       	pop	r25
    18e8:	8f 91       	pop	r24
    18ea:	7f 91       	pop	r23
    18ec:	6f 91       	pop	r22
    18ee:	5f 91       	pop	r21
    18f0:	4f 91       	pop	r20
    18f2:	3f 91       	pop	r19
    18f4:	2f 91       	pop	r18
    18f6:	0f 90       	pop	r0
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	0f 90       	pop	r0
    18fc:	1f 90       	pop	r1
    18fe:	18 95       	reti

00001900 <__vector_23>:

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
    1900:	1f 92       	push	r1
    1902:	0f 92       	push	r0
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	0f 92       	push	r0
    1908:	11 24       	eor	r1, r1
    190a:	2f 93       	push	r18
    190c:	3f 93       	push	r19
    190e:	4f 93       	push	r20
    1910:	5f 93       	push	r21
    1912:	6f 93       	push	r22
    1914:	7f 93       	push	r23
    1916:	8f 93       	push	r24
    1918:	9f 93       	push	r25
    191a:	af 93       	push	r26
    191c:	bf 93       	push	r27
    191e:	ef 93       	push	r30
    1920:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1922:	7c db       	rcall	.-2312   	; 0x101c <asm_break>
}

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
	s_bad_interrupt();
}
    1924:	ff 91       	pop	r31
    1926:	ef 91       	pop	r30
    1928:	bf 91       	pop	r27
    192a:	af 91       	pop	r26
    192c:	9f 91       	pop	r25
    192e:	8f 91       	pop	r24
    1930:	7f 91       	pop	r23
    1932:	6f 91       	pop	r22
    1934:	5f 91       	pop	r21
    1936:	4f 91       	pop	r20
    1938:	3f 91       	pop	r19
    193a:	2f 91       	pop	r18
    193c:	0f 90       	pop	r0
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	0f 90       	pop	r0
    1942:	1f 90       	pop	r1
    1944:	18 95       	reti

00001946 <__vector_24>:

ISR(__vector_24, ISR_BLOCK)
{	/* TWI */
    1946:	1f 92       	push	r1
    1948:	0f 92       	push	r0
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	0f 92       	push	r0
    194e:	11 24       	eor	r1, r1
    1950:	2f 93       	push	r18
    1952:	3f 93       	push	r19
    1954:	4f 93       	push	r20
    1956:	5f 93       	push	r21
    1958:	6f 93       	push	r22
    195a:	7f 93       	push	r23
    195c:	8f 93       	push	r24
    195e:	9f 93       	push	r25
    1960:	af 93       	push	r26
    1962:	bf 93       	push	r27
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	ef 93       	push	r30
    196a:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b11111 << TWS3);
    196c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	uint8_t twd = TWDR;
    1970:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	uint8_t twcr_cur = TWCR;
    1974:	cc eb       	ldi	r28, 0xBC	; 188
    1976:	d0 e0       	ldi	r29, 0x00	; 0
    1978:	48 81       	ld	r20, Y

	uint8_t twcr_new = __vector_24__bottom(tws, twd, twcr_cur);
    197a:	88 7f       	andi	r24, 0xF8	; 248
    197c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__vector_24__bottom>
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
    1980:	85 68       	ori	r24, 0x85	; 133
    1982:	88 83       	st	Y, r24
}
    1984:	ff 91       	pop	r31
    1986:	ef 91       	pop	r30
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	bf 91       	pop	r27
    198e:	af 91       	pop	r26
    1990:	9f 91       	pop	r25
    1992:	8f 91       	pop	r24
    1994:	7f 91       	pop	r23
    1996:	6f 91       	pop	r22
    1998:	5f 91       	pop	r21
    199a:	4f 91       	pop	r20
    199c:	3f 91       	pop	r19
    199e:	2f 91       	pop	r18
    19a0:	0f 90       	pop	r0
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	0f 90       	pop	r0
    19a6:	1f 90       	pop	r1
    19a8:	18 95       	reti

000019aa <__vector_25>:

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
    19aa:	1f 92       	push	r1
    19ac:	0f 92       	push	r0
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	0f 92       	push	r0
    19b2:	11 24       	eor	r1, r1
    19b4:	2f 93       	push	r18
    19b6:	3f 93       	push	r19
    19b8:	4f 93       	push	r20
    19ba:	5f 93       	push	r21
    19bc:	6f 93       	push	r22
    19be:	7f 93       	push	r23
    19c0:	8f 93       	push	r24
    19c2:	9f 93       	push	r25
    19c4:	af 93       	push	r26
    19c6:	bf 93       	push	r27
    19c8:	ef 93       	push	r30
    19ca:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    19cc:	27 db       	rcall	.-2482   	; 0x101c <asm_break>
}

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
	s_bad_interrupt();
}
    19ce:	ff 91       	pop	r31
    19d0:	ef 91       	pop	r30
    19d2:	bf 91       	pop	r27
    19d4:	af 91       	pop	r26
    19d6:	9f 91       	pop	r25
    19d8:	8f 91       	pop	r24
    19da:	7f 91       	pop	r23
    19dc:	6f 91       	pop	r22
    19de:	5f 91       	pop	r21
    19e0:	4f 91       	pop	r20
    19e2:	3f 91       	pop	r19
    19e4:	2f 91       	pop	r18
    19e6:	0f 90       	pop	r0
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	0f 90       	pop	r0
    19ec:	1f 90       	pop	r1
    19ee:	18 95       	reti

000019f0 <lcd_bus_read_status>:
		} else if (y >= GFX_MONO_LCD_HEIGHT) {
		return (uint8_t) GFX_MONO_LCD_HEIGHT - 1;
		} else {
		return (uint8_t) y;
	}
}
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	1f 92       	push	r1
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	8f b7       	in	r24, 0x3f	; 63
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	f8 94       	cli
    1a00:	99 81       	ldd	r25, Y+1	; 0x01
    1a02:	8f ef       	ldi	r24, 0xFF	; 255
    1a04:	8b b9       	out	0x0b, r24	; 11
    1a06:	1a b8       	out	0x0a, r1	; 10
    1a08:	28 98       	cbi	0x05, 0	; 5
    1a0a:	2c 9a       	sbi	0x05, 4	; 5
    1a0c:	2d 9a       	sbi	0x05, 5	; 5
    1a0e:	2d 98       	cbi	0x05, 5	; 5
    1a10:	89 b1       	in	r24, 0x09	; 9
    1a12:	9f bf       	out	0x3f, r25	; 63
    1a14:	0f 90       	pop	r0
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <lcd_bus_write_cmd>:
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	1f 92       	push	r1
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	9f b7       	in	r25, 0x3f	; 63
    1a28:	99 83       	std	Y+1, r25	; 0x01
    1a2a:	f8 94       	cli
    1a2c:	99 81       	ldd	r25, Y+1	; 0x01
    1a2e:	8b b9       	out	0x0b, r24	; 11
    1a30:	8f ef       	ldi	r24, 0xFF	; 255
    1a32:	8a b9       	out	0x0a, r24	; 10
    1a34:	28 98       	cbi	0x05, 0	; 5
    1a36:	2c 98       	cbi	0x05, 4	; 5
    1a38:	2d 9a       	sbi	0x05, 5	; 5
    1a3a:	2d 98       	cbi	0x05, 5	; 5
    1a3c:	9f bf       	out	0x3f, r25	; 63
    1a3e:	0f 90       	pop	r0
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	08 95       	ret

00001a46 <lcd_bus_write_ram>:
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	1f 92       	push	r1
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	9f b7       	in	r25, 0x3f	; 63
    1a52:	99 83       	std	Y+1, r25	; 0x01
    1a54:	f8 94       	cli
    1a56:	99 81       	ldd	r25, Y+1	; 0x01
    1a58:	8b b9       	out	0x0b, r24	; 11
    1a5a:	8f ef       	ldi	r24, 0xFF	; 255
    1a5c:	8a b9       	out	0x0a, r24	; 10
    1a5e:	28 9a       	sbi	0x05, 0	; 5
    1a60:	2c 98       	cbi	0x05, 4	; 5
    1a62:	2d 9a       	sbi	0x05, 5	; 5
    1a64:	2d 98       	cbi	0x05, 5	; 5
    1a66:	9f bf       	out	0x3f, r25	; 63
    1a68:	0f 90       	pop	r0
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	08 95       	ret

00001a70 <lcd_bus_read_ram>:
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	1f 92       	push	r1
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	8f b7       	in	r24, 0x3f	; 63
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	f8 94       	cli
    1a80:	99 81       	ldd	r25, Y+1	; 0x01
    1a82:	8f ef       	ldi	r24, 0xFF	; 255
    1a84:	8b b9       	out	0x0b, r24	; 11
    1a86:	1a b8       	out	0x0a, r1	; 10
    1a88:	28 9a       	sbi	0x05, 0	; 5
    1a8a:	2c 9a       	sbi	0x05, 4	; 5
    1a8c:	2d 9a       	sbi	0x05, 5	; 5
    1a8e:	2d 98       	cbi	0x05, 5	; 5
    1a90:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <s_lcd_ram_read_nonvalid>
    1a94:	88 23       	and	r24, r24
    1a96:	19 f0       	breq	.+6      	; 0x1a9e <lcd_bus_read_ram+0x2e>
    1a98:	89 b1       	in	r24, 0x09	; 9
    1a9a:	2d 9a       	sbi	0x05, 5	; 5
    1a9c:	2d 98       	cbi	0x05, 5	; 5
    1a9e:	89 b1       	in	r24, 0x09	; 9
    1aa0:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <s_lcd_ram_read_nonvalid>
    1aa4:	9f bf       	out	0x3f, r25	; 63
    1aa6:	0f 90       	pop	r0
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	08 95       	ret

00001aae <lcd_enable>:


void lcd_enable(uint8_t on)
{
	if (!on) {
    1aae:	81 11       	cpse	r24, r1
    1ab0:	03 c0       	rjmp	.+6      	; 0x1ab8 <lcd_enable+0xa>
		lcd_bus_write_cmd(0b10101110);									// Disable DC[2] (Display)
    1ab2:	8e ea       	ldi	r24, 0xAE	; 174
    1ab4:	b3 cf       	rjmp	.-154    	; 0x1a1c <lcd_bus_write_cmd>
    1ab6:	08 95       	ret

	} else {
		lcd_bus_write_cmd(0b00101000 | C_LCD_PWR_CTRL);					// Set Power Control
    1ab8:	8d e2       	ldi	r24, 0x2D	; 45
    1aba:	b0 df       	rcall	.-160    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00100000 | C_LCD_MR_TC);					// Set MR and TC
    1abc:	84 e2       	ldi	r24, 0x24	; 36
    1abe:	ae df       	rcall	.-164    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b11101000 | C_LCD_BIASRATIO);				// Set Bias Ratio
    1ac0:	8a ee       	ldi	r24, 0xEA	; 234
    1ac2:	ac df       	rcall	.-168    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10000001);									// Set Gain and PM (A)
    1ac4:	81 e8       	ldi	r24, 0x81	; 129
    1ac6:	aa df       	rcall	.-172    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(C_LCD_GAIN_PM);								// Set Gain and PM (B)
    1ac8:	8c e9       	ldi	r24, 0x9C	; 156
    1aca:	a8 df       	rcall	.-176    	; 0x1a1c <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b11000000 | C_LCD_MAPPING);					// Set Mapping
    1acc:	88 ec       	ldi	r24, 0xC8	; 200
    1ace:	a6 df       	rcall	.-180    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10001000 | C_LCD_AC);						// Set RAM Address Control
    1ad0:	88 e8       	ldi	r24, 0x88	; 136
    1ad2:	a4 df       	rcall	.-184    	; 0x1a1c <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b01000000);									// Set Start Line (0)
    1ad4:	80 e4       	ldi	r24, 0x40	; 64
    1ad6:	a2 df       	rcall	.-188    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10010000);									// Set Fixed Lines (0)
    1ad8:	80 e9       	ldi	r24, 0x90	; 144
    1ada:	a0 df       	rcall	.-192    	; 0x1a1c <lcd_bus_write_cmd>

		lcd_bus_write_cmd(0b10110000);									// Set Page Address (0)
    1adc:	80 eb       	ldi	r24, 0xB0	; 176
    1ade:	9e df       	rcall	.-196    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00000000);									// Set Column Address LSB (0)
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	9c df       	rcall	.-200    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000);									// Set Column Address MSB (0)
    1ae4:	80 e1       	ldi	r24, 0x10	; 16
    1ae6:	9a df       	rcall	.-204    	; 0x1a1c <lcd_bus_write_cmd>
		s_lcd_ram_read_nonvalid = true;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <s_lcd_ram_read_nonvalid>

		lcd_bus_write_cmd(0b11101111);									// Set Cursor Mode
    1aee:	8f ee       	ldi	r24, 0xEF	; 239
    1af0:	95 df       	rcall	.-214    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b11101110);									// Reset Cursor Mode (now CR := CA)
    1af2:	8e ee       	ldi	r24, 0xEE	; 238
    1af4:	93 df       	rcall	.-218    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10100100);									// Disable DC[1] (all pixel on)
    1af6:	84 ea       	ldi	r24, 0xA4	; 164
    1af8:	91 df       	rcall	.-222    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10100110);									// Disable DC[0] (all pixel inverse)
    1afa:	86 ea       	ldi	r24, 0xA6	; 166
    1afc:	8f df       	rcall	.-226    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b10101111);									// Enable  DC[2] (Display)
    1afe:	8f ea       	ldi	r24, 0xAF	; 175
    1b00:	8d cf       	rjmp	.-230    	; 0x1a1c <lcd_bus_write_cmd>
    1b02:	08 95       	ret

00001b04 <lcd_page_set>:
}

void lcd_page_set(uint8_t page)
{
	if ((0 <= page && page) < (GFX_MONO_LCD_PAGES)) {
		lcd_bus_write_cmd(0b10110000 | page);					// Set Page Address
    1b04:	80 6b       	ori	r24, 0xB0	; 176
    1b06:	8a df       	rcall	.-236    	; 0x1a1c <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <s_lcd_ram_read_nonvalid>
    1b0e:	08 95       	ret

00001b10 <lcd_col_set>:
	}
}

void lcd_col_set(uint8_t col)
{
    1b10:	cf 93       	push	r28
	if ((0 <= col) && (col < GFX_MONO_LCD_WIDTH)) {
    1b12:	80 3f       	cpi	r24, 0xF0	; 240
    1b14:	58 f4       	brcc	.+22     	; 0x1b2c <lcd_col_set+0x1c>
    1b16:	c8 2f       	mov	r28, r24
		lcd_bus_write_cmd(0b00000000 | ( col       & 0x0f));	// Set Column Address LSB
    1b18:	8f 70       	andi	r24, 0x0F	; 15
    1b1a:	80 df       	rcall	.-256    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000 | ((col >> 4) & 0x0f));	// Set Column Address MSB
    1b1c:	8c 2f       	mov	r24, r28
    1b1e:	82 95       	swap	r24
    1b20:	8f 70       	andi	r24, 0x0F	; 15
    1b22:	80 61       	ori	r24, 0x10	; 16
    1b24:	7b df       	rcall	.-266    	; 0x1a1c <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <s_lcd_ram_read_nonvalid>
	}
}
    1b2c:	cf 91       	pop	r28
    1b2e:	08 95       	ret

00001b30 <lcd_cr>:

void lcd_cr(void)
{
	lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	74 df       	rcall	.-280    	; 0x1a1c <lcd_bus_write_cmd>
	lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    1b34:	80 e1       	ldi	r24, 0x10	; 16
    1b36:	72 df       	rcall	.-284    	; 0x1a1c <lcd_bus_write_cmd>

	s_lcd_ram_read_nonvalid = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <s_lcd_ram_read_nonvalid>
    1b3e:	08 95       	ret

00001b40 <lcd_home>:
}

void lcd_home(void)
{
	lcd_bus_write_cmd(0b10110000);								// Set Page Address (0)
    1b40:	80 eb       	ldi	r24, 0xB0	; 176
    1b42:	6c df       	rcall	.-296    	; 0x1a1c <lcd_bus_write_cmd>
	lcd_cr();
    1b44:	f5 cf       	rjmp	.-22     	; 0x1b30 <lcd_cr>
    1b46:	08 95       	ret

00001b48 <lcd_cls>:
}

void lcd_cls(void)
{
    1b48:	1f 93       	push	r17
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    1b4e:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    1b50:	10 ef       	ldi	r17, 0xF0	; 240

void lcd_cls(void)
{
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
    1b52:	8d 2f       	mov	r24, r29
    1b54:	80 6b       	ori	r24, 0xB0	; 176
    1b56:	62 df       	rcall	.-316    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	60 df       	rcall	.-320    	; 0x1a1c <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    1b5c:	80 e1       	ldi	r24, 0x10	; 16
    1b5e:	5e df       	rcall	.-324    	; 0x1a1c <lcd_bus_write_cmd>
    1b60:	c1 2f       	mov	r28, r17

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
			lcd_bus_write_ram(0);
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	70 df       	rcall	.-288    	; 0x1a46 <lcd_bus_write_ram>
    1b66:	c1 50       	subi	r28, 0x01	; 1
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
    1b68:	e1 f7       	brne	.-8      	; 0x1b62 <lcd_cls+0x1a>
}

void lcd_cls(void)
{
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    1b6a:	df 5f       	subi	r29, 0xFF	; 255
    1b6c:	d0 31       	cpi	r29, 0x10	; 16
    1b6e:	89 f7       	brne	.-30     	; 0x1b52 <lcd_cls+0xa>
			lcd_bus_write_ram(0);
		}
	}	

	/* Set cursor to home position */
	lcd_home();
    1b70:	e7 df       	rcall	.-50     	; 0x1b40 <lcd_home>
}
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	08 95       	ret

00001b7a <lcd_show_new_data>:

	clk_state_old = clk_state;
}

uint8_t lcd_show_new_data(void)
{
    1b7a:	7f 92       	push	r7
    1b7c:	8f 92       	push	r8
    1b7e:	9f 92       	push	r9
    1b80:	af 92       	push	r10
    1b82:	bf 92       	push	r11
    1b84:	cf 92       	push	r12
    1b86:	df 92       	push	r13
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	1f 92       	push	r1
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b9a:	8f b7       	in	r24, 0x3f	; 63
    1b9c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1b9e:	f8 94       	cli
	return flags;
    1ba0:	19 81       	ldd	r17, Y+1	; 0x01
	static uint8_t idx = 1;

	/* First entries are showed first, when modified */

	irqflags_t flags = cpu_irq_save();
	cpu_irq_disable();
    1ba2:	f8 94       	cli

	/* Always */
	if (g_showData.newTime) {
    1ba4:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <g_showData>
    1ba8:	92 ff       	sbrs	r25, 2
    1baa:	2a c0       	rjmp	.+84     	; 0x1c00 <lcd_show_new_data+0x86>
		g_showData.newTime = false;
    1bac:	e7 e8       	ldi	r30, 0x87	; 135
    1bae:	f3 e0       	ldi	r31, 0x03	; 3
    1bb0:	89 2f       	mov	r24, r25
    1bb2:	8b 7f       	andi	r24, 0xFB	; 251
    1bb4:	80 83       	st	Z, r24
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "UTC     : %02d:%02d.%02d",
    1bb6:	81 8d       	ldd	r24, Z+25	; 0x19
    1bb8:	1f 92       	push	r1
    1bba:	8f 93       	push	r24
    1bbc:	80 8d       	ldd	r24, Z+24	; 0x18
    1bbe:	1f 92       	push	r1
    1bc0:	8f 93       	push	r24
    1bc2:	87 89       	ldd	r24, Z+23	; 0x17
    1bc4:	1f 92       	push	r1
    1bc6:	8f 93       	push	r24
    1bc8:	89 e0       	ldi	r24, 0x09	; 9
    1bca:	91 e0       	ldi	r25, 0x01	; 1
    1bcc:	9f 93       	push	r25
    1bce:	8f 93       	push	r24
    1bd0:	1f 92       	push	r1
    1bd2:	80 e3       	ldi	r24, 0x30	; 48
    1bd4:	8f 93       	push	r24
    1bd6:	88 e2       	ldi	r24, 0x28	; 40
    1bd8:	93 e0       	ldi	r25, 0x03	; 3
    1bda:	9f 93       	push	r25
    1bdc:	8f 93       	push	r24
    1bde:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <snprintf>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1be2:	1f bf       	out	0x3f, r17	; 63
		g_showData.time_hour, g_showData.time_minute, g_showData.time_second);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  2 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1be4:	22 e0       	ldi	r18, 0x02	; 2
    1be6:	31 e0       	ldi	r19, 0x01	; 1
    1be8:	4d e1       	ldi	r20, 0x1D	; 29
    1bea:	63 e0       	ldi	r22, 0x03	; 3
    1bec:	88 e2       	ldi	r24, 0x28	; 40
    1bee:	93 e0       	ldi	r25, 0x03	; 3
    1bf0:	ec d9       	rcall	.-3112   	; 0xfca <gfx_mono_draw_string>
		return 255;
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	69 c3       	rjmp	.+1746   	; 0x22d2 <lcd_show_new_data+0x758>
	}

	/* Always */
	if (g_showData.newDate) {
    1c00:	91 ff       	sbrs	r25, 1
    1c02:	2b c0       	rjmp	.+86     	; 0x1c5a <lcd_show_new_data+0xe0>
		g_showData.newDate = false;
    1c04:	e7 e8       	ldi	r30, 0x87	; 135
    1c06:	f3 e0       	ldi	r31, 0x03	; 3
    1c08:	80 81       	ld	r24, Z
    1c0a:	8d 7f       	andi	r24, 0xFD	; 253
    1c0c:	80 83       	st	Z, r24
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Date    : %02d.%02d.%04d",
    1c0e:	85 81       	ldd	r24, Z+5	; 0x05
    1c10:	8f 93       	push	r24
    1c12:	84 81       	ldd	r24, Z+4	; 0x04
    1c14:	8f 93       	push	r24
    1c16:	85 89       	ldd	r24, Z+21	; 0x15
    1c18:	1f 92       	push	r1
    1c1a:	8f 93       	push	r24
    1c1c:	86 89       	ldd	r24, Z+22	; 0x16
    1c1e:	1f 92       	push	r1
    1c20:	8f 93       	push	r24
    1c22:	82 e2       	ldi	r24, 0x22	; 34
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	9f 93       	push	r25
    1c28:	8f 93       	push	r24
    1c2a:	1f 92       	push	r1
    1c2c:	80 e3       	ldi	r24, 0x30	; 48
    1c2e:	8f 93       	push	r24
    1c30:	88 e2       	ldi	r24, 0x28	; 40
    1c32:	93 e0       	ldi	r25, 0x03	; 3
    1c34:	9f 93       	push	r25
    1c36:	8f 93       	push	r24
    1c38:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <snprintf>
    1c3c:	1f bf       	out	0x3f, r17	; 63
		g_showData.date_day, g_showData.date_month, g_showData.date_year);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  1 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1c3e:	22 e0       	ldi	r18, 0x02	; 2
    1c40:	31 e0       	ldi	r19, 0x01	; 1
    1c42:	44 e1       	ldi	r20, 0x14	; 20
    1c44:	63 e0       	ldi	r22, 0x03	; 3
    1c46:	88 e2       	ldi	r24, 0x28	; 40
    1c48:	93 e0       	ldi	r25, 0x03	; 3
    1c4a:	bf d9       	rcall	.-3202   	; 0xfca <gfx_mono_draw_string>
		return 254;
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	8e ef       	ldi	r24, 0xFE	; 254
    1c58:	3c c3       	rjmp	.+1656   	; 0x22d2 <lcd_show_new_data+0x758>
	}

	/* Always */
	if (g_showData.newClkState) {
    1c5a:	89 2f       	mov	r24, r25
    1c5c:	81 70       	andi	r24, 0x01	; 1
    1c5e:	90 ff       	sbrs	r25, 0
    1c60:	22 c1       	rjmp	.+580    	; 0x1ea6 <lcd_show_new_data+0x32c>
		g_showData.newClkState = false;
    1c62:	e7 e8       	ldi	r30, 0x87	; 135
    1c64:	f3 e0       	ldi	r31, 0x03	; 3
    1c66:	80 81       	ld	r24, Z
    1c68:	8e 7f       	andi	r24, 0xFE	; 254
    1c6a:	80 83       	st	Z, r24
    1c6c:	1f bf       	out	0x3f, r17	; 63
		cpu_irq_restore(flags);
		lcd_show_new_clk_state(g_showData.clkState_clk_state, g_showData.clkState_phase100);
    1c6e:	14 89       	ldd	r17, Z+20	; 0x14
    1c70:	62 81       	ldd	r22, Z+2	; 0x02
    1c72:	73 81       	ldd	r23, Z+3	; 0x03
    1c74:	60 3b       	cpi	r22, 0xB0	; 176
    1c76:	f9 eb       	ldi	r31, 0xB9	; 185
    1c78:	7f 07       	cpc	r23, r31
    1c7a:	14 f4       	brge	.+4      	; 0x1c80 <lcd_show_new_data+0x106>
    1c7c:	60 eb       	ldi	r22, 0xB0	; 176
    1c7e:	79 eb       	ldi	r23, 0xB9	; 185
    1c80:	61 35       	cpi	r22, 0x51	; 81
    1c82:	86 e4       	ldi	r24, 0x46	; 70
    1c84:	78 07       	cpc	r23, r24
    1c86:	14 f0       	brlt	.+4      	; 0x1c8c <lcd_show_new_data+0x112>
    1c88:	60 e5       	ldi	r22, 0x50	; 80
    1c8a:	76 e4       	ldi	r23, 0x46	; 70
		} else if (phase100 < -18000) {
		phase100 = -18000;
	}


	int diff = (int) ((float)maxdiff * (phase100 / -18000.0f));
    1c8c:	07 2e       	mov	r0, r23
    1c8e:	00 0c       	add	r0, r0
    1c90:	88 0b       	sbc	r24, r24
    1c92:	99 0b       	sbc	r25, r25
    1c94:	0e 94 17 1b 	call	0x362e	; 0x362e <__floatsisf>
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 ea       	ldi	r19, 0xA0	; 160
    1c9c:	4c e8       	ldi	r20, 0x8C	; 140
    1c9e:	56 ec       	ldi	r21, 0xC6	; 198
    1ca0:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__divsf3>
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	48 e9       	ldi	r20, 0x98	; 152
    1caa:	52 e4       	ldi	r21, 0x42	; 66
    1cac:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__mulsf3>
    1cb0:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__fixsfsi>
    1cb4:	6b 01       	movw	r12, r22
    1cb6:	7c 01       	movw	r14, r24
    1cb8:	5b 01       	movw	r10, r22
	int ldiff = diff < 0 ?  diff : 0;
	int rdiff = diff > 0 ?  diff : 0;

	uint8_t ox = mid_x;
	int dx = diff;
	if (dx < 0) {
    1cba:	77 23       	and	r23, r23
    1cbc:	54 f4       	brge	.+20     	; 0x1cd2 <lcd_show_new_data+0x158>
		ox += dx;
    1cbe:	0f 2e       	mov	r0, r31
    1cc0:	f6 e9       	ldi	r31, 0x96	; 150
    1cc2:	7f 2e       	mov	r7, r31
    1cc4:	f0 2d       	mov	r31, r0
    1cc6:	76 0e       	add	r7, r22
		dx = -dx;
    1cc8:	88 24       	eor	r8, r8
    1cca:	99 24       	eor	r9, r9
    1ccc:	86 1a       	sub	r8, r22
    1cce:	97 0a       	sbc	r9, r23
    1cd0:	05 c0       	rjmp	.+10     	; 0x1cdc <lcd_show_new_data+0x162>
	int diff = (int) ((float)maxdiff * (phase100 / -18000.0f));
	int ldiff = diff < 0 ?  diff : 0;
	int rdiff = diff > 0 ?  diff : 0;

	uint8_t ox = mid_x;
	int dx = diff;
    1cd2:	4b 01       	movw	r8, r22

	int diff = (int) ((float)maxdiff * (phase100 / -18000.0f));
	int ldiff = diff < 0 ?  diff : 0;
	int rdiff = diff > 0 ?  diff : 0;

	uint8_t ox = mid_x;
    1cd4:	0f 2e       	mov	r0, r31
    1cd6:	f6 e9       	ldi	r31, 0x96	; 150
    1cd8:	7f 2e       	mov	r7, r31
    1cda:	f0 2d       	mov	r31, r0
	if (dx < 0) {
		ox += dx;
		dx = -dx;
	}

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "ClkState: 0x%1X", clk_state);
    1cdc:	1f 92       	push	r1
    1cde:	1f 93       	push	r17
    1ce0:	2b e3       	ldi	r18, 0x3B	; 59
    1ce2:	31 e0       	ldi	r19, 0x01	; 1
    1ce4:	3f 93       	push	r19
    1ce6:	2f 93       	push	r18
    1ce8:	1f 92       	push	r1
    1cea:	80 e3       	ldi	r24, 0x30	; 48
    1cec:	8f 93       	push	r24
    1cee:	28 e2       	ldi	r18, 0x28	; 40
    1cf0:	33 e0       	ldi	r19, 0x03	; 3
    1cf2:	3f 93       	push	r19
    1cf4:	2f 93       	push	r18
    1cf6:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  0 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1cfa:	22 e0       	ldi	r18, 0x02	; 2
    1cfc:	31 e0       	ldi	r19, 0x01	; 1
    1cfe:	4b e0       	ldi	r20, 0x0B	; 11
    1d00:	63 e0       	ldi	r22, 0x03	; 3
    1d02:	88 e2       	ldi	r24, 0x28	; 40
    1d04:	93 e0       	ldi	r25, 0x03	; 3
    1d06:	61 d9       	rcall	.-3390   	; 0xfca <gfx_mono_draw_string>
	gfx_mono_draw_string("Phase   :", LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1d08:	22 e0       	ldi	r18, 0x02	; 2
    1d0a:	31 e0       	ldi	r19, 0x01	; 1
    1d0c:	47 e7       	ldi	r20, 0x77	; 119
    1d0e:	63 e0       	ldi	r22, 0x03	; 3
    1d10:	8b e4       	ldi	r24, 0x4B	; 75
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	5a d9       	rcall	.-3404   	; 0xfca <gfx_mono_draw_string>

	if ((clk_state_old != clk_state) || !dx) {
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <clk_state_old.3110>
    1d24:	18 13       	cpse	r17, r24
    1d26:	05 c0       	rjmp	.+10     	; 0x1d32 <lcd_show_new_data+0x1b8>
    1d28:	81 14       	cp	r8, r1
    1d2a:	91 04       	cpc	r9, r1
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <lcd_show_new_data+0x1b6>
    1d2e:	c9 c2       	rjmp	.+1426   	; 0x22c2 <lcd_show_new_data+0x748>
    1d30:	0b c0       	rjmp	.+22     	; 0x1d48 <lcd_show_new_data+0x1ce>
		gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  (maxdiff << 1) +8, 5, GFX_PIXEL_CLR);
    1d32:	00 e0       	ldi	r16, 0x00	; 0
    1d34:	25 e0       	ldi	r18, 0x05	; 5
    1d36:	40 ea       	ldi	r20, 0xA0	; 160
    1d38:	68 e7       	ldi	r22, 0x78	; 120
    1d3a:	86 e4       	ldi	r24, 0x46	; 70
    1d3c:	0e 94 87 05 	call	0xb0e	; 0xb0e <gfx_mono_generic_draw_filled_rect>
	}

	if (dx) {
    1d40:	81 14       	cp	r8, r1
    1d42:	91 04       	cpc	r9, r1
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <lcd_show_new_data+0x1ce>
    1d46:	a4 c0       	rjmp	.+328    	; 0x1e90 <lcd_show_new_data+0x316>
		phase100 = -18000;
	}


	int diff = (int) ((float)maxdiff * (phase100 / -18000.0f));
	int ldiff = diff < 0 ?  diff : 0;
    1d48:	4c 2d       	mov	r20, r12
    1d4a:	1a 14       	cp	r1, r10
    1d4c:	1b 04       	cpc	r1, r11
    1d4e:	0c f4       	brge	.+2      	; 0x1d52 <lcd_show_new_data+0x1d8>
    1d50:	40 e0       	ldi	r20, 0x00	; 0
	int rdiff = diff > 0 ?  diff : 0;
    1d52:	bb 20       	and	r11, r11
    1d54:	0c f4       	brge	.+2      	; 0x1d58 <lcd_show_new_data+0x1de>
    1d56:	c1 2c       	mov	r12, r1
	if ((clk_state_old != clk_state) || !dx) {
		gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  (maxdiff << 1) +8, 5, GFX_PIXEL_CLR);
	}

	if (dx) {
		switch (clk_state) {
    1d58:	17 30       	cpi	r17, 0x07	; 7
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <lcd_show_new_data+0x1e4>
    1d5c:	4e c0       	rjmp	.+156    	; 0x1dfa <lcd_show_new_data+0x280>
    1d5e:	30 f4       	brcc	.+12     	; 0x1d6c <lcd_show_new_data+0x1f2>
    1d60:	8f ef       	ldi	r24, 0xFF	; 255
    1d62:	81 0f       	add	r24, r17
    1d64:	83 30       	cpi	r24, 0x03	; 3
    1d66:	08 f4       	brcc	.+2      	; 0x1d6a <lcd_show_new_data+0x1f0>
    1d68:	8b c0       	rjmp	.+278    	; 0x1e80 <lcd_show_new_data+0x306>
    1d6a:	99 c0       	rjmp	.+306    	; 0x1e9e <lcd_show_new_data+0x324>
    1d6c:	1f 30       	cpi	r17, 0x0F	; 15
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <lcd_show_new_data+0x1f8>
    1d70:	96 c0       	rjmp	.+300    	; 0x1e9e <lcd_show_new_data+0x324>
			case 0xf:
			gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  maxdiff + ldiff +4, 5, GFX_PIXEL_CLR);
    1d72:	40 5b       	subi	r20, 0xB0	; 176
    1d74:	00 e0       	ldi	r16, 0x00	; 0
    1d76:	25 e0       	ldi	r18, 0x05	; 5
    1d78:	68 e7       	ldi	r22, 0x78	; 120
    1d7a:	86 e4       	ldi	r24, 0x46	; 70
    1d7c:	0e 94 87 05 	call	0xb0e	; 0xb0e <gfx_mono_generic_draw_filled_rect>
			if (diff < 0) {
    1d80:	bb 20       	and	r11, r11
    1d82:	94 f4       	brge	.+36     	; 0x1da8 <lcd_show_new_data+0x22e>
				gfx_mono_generic_draw_line(ox - 4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1d84:	01 e0       	ldi	r16, 0x01	; 1
    1d86:	28 e7       	ldi	r18, 0x78	; 120
    1d88:	47 2d       	mov	r20, r7
    1d8a:	6a e7       	ldi	r22, 0x7A	; 122
    1d8c:	0f 2e       	mov	r0, r31
    1d8e:	fc ef       	ldi	r31, 0xFC	; 252
    1d90:	ff 2e       	mov	r15, r31
    1d92:	f0 2d       	mov	r31, r0
    1d94:	f7 0c       	add	r15, r7
    1d96:	8f 2d       	mov	r24, r15
    1d98:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <gfx_mono_generic_draw_line>
										   ox,     LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,
										   GFX_PIXEL_SET);
				gfx_mono_generic_draw_line(ox - 4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1d9c:	2c e7       	ldi	r18, 0x7C	; 124
    1d9e:	47 2d       	mov	r20, r7
    1da0:	6a e7       	ldi	r22, 0x7A	; 122
    1da2:	8f 2d       	mov	r24, r15
    1da4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <gfx_mono_generic_draw_line>
										   ox,     LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 5,
										   GFX_PIXEL_SET);
			}
			gfx_mono_generic_draw_filled_rect(ox, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1, dx, 5, GFX_PIXEL_SET);
    1da8:	01 e0       	ldi	r16, 0x01	; 1
    1daa:	25 e0       	ldi	r18, 0x05	; 5
    1dac:	48 2d       	mov	r20, r8
    1dae:	68 e7       	ldi	r22, 0x78	; 120
    1db0:	87 2d       	mov	r24, r7
    1db2:	0e 94 87 05 	call	0xb0e	; 0xb0e <gfx_mono_generic_draw_filled_rect>
			gfx_mono_generic_draw_filled_rect(mid_x + rdiff, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  maxdiff - rdiff +4, 5, GFX_PIXEL_CLR);
    1db6:	40 e5       	ldi	r20, 0x50	; 80
    1db8:	4c 19       	sub	r20, r12
    1dba:	00 e0       	ldi	r16, 0x00	; 0
    1dbc:	25 e0       	ldi	r18, 0x05	; 5
    1dbe:	68 e7       	ldi	r22, 0x78	; 120
    1dc0:	86 e9       	ldi	r24, 0x96	; 150
    1dc2:	8c 0d       	add	r24, r12
    1dc4:	0e 94 87 05 	call	0xb0e	; 0xb0e <gfx_mono_generic_draw_filled_rect>
			if (diff > 0) {
    1dc8:	1a 14       	cp	r1, r10
    1dca:	1b 04       	cpc	r1, r11
    1dcc:	0c f0       	brlt	.+2      	; 0x1dd0 <lcd_show_new_data+0x256>
    1dce:	67 c0       	rjmp	.+206    	; 0x1e9e <lcd_show_new_data+0x324>
				gfx_mono_generic_draw_line(mid_x + rdiff + 3, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1dd0:	0f 2e       	mov	r0, r31
    1dd2:	f5 e9       	ldi	r31, 0x95	; 149
    1dd4:	ff 2e       	mov	r15, r31
    1dd6:	f0 2d       	mov	r31, r0
    1dd8:	fc 0c       	add	r15, r12
    1dda:	f9 e9       	ldi	r31, 0x99	; 153
    1ddc:	cf 0e       	add	r12, r31
    1dde:	01 e0       	ldi	r16, 0x01	; 1
    1de0:	28 e7       	ldi	r18, 0x78	; 120
    1de2:	4f 2d       	mov	r20, r15
    1de4:	6a e7       	ldi	r22, 0x7A	; 122
    1de6:	8c 2d       	mov	r24, r12
    1de8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <gfx_mono_generic_draw_line>
										   mid_x + rdiff - 1, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,
										   GFX_PIXEL_SET);
				gfx_mono_generic_draw_line(mid_x + rdiff + 3, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1dec:	2c e7       	ldi	r18, 0x7C	; 124
    1dee:	4f 2d       	mov	r20, r15
    1df0:	6a e7       	ldi	r22, 0x7A	; 122
    1df2:	8c 2d       	mov	r24, r12
    1df4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <gfx_mono_generic_draw_line>
    1df8:	52 c0       	rjmp	.+164    	; 0x1e9e <lcd_show_new_data+0x324>
										   GFX_PIXEL_SET);
			}
			break;

			case 0x7:
			gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,  maxdiff + ldiff +4, 3, GFX_PIXEL_CLR);
    1dfa:	40 5b       	subi	r20, 0xB0	; 176
    1dfc:	00 e0       	ldi	r16, 0x00	; 0
    1dfe:	23 e0       	ldi	r18, 0x03	; 3
    1e00:	69 e7       	ldi	r22, 0x79	; 121
    1e02:	86 e4       	ldi	r24, 0x46	; 70
    1e04:	0e 94 87 05 	call	0xb0e	; 0xb0e <gfx_mono_generic_draw_filled_rect>
			if (diff < 0) {
    1e08:	bb 20       	and	r11, r11
    1e0a:	94 f4       	brge	.+36     	; 0x1e30 <lcd_show_new_data+0x2b6>
				gfx_mono_generic_draw_line(ox - 4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1e0c:	01 e0       	ldi	r16, 0x01	; 1
    1e0e:	29 e7       	ldi	r18, 0x79	; 121
    1e10:	47 2d       	mov	r20, r7
    1e12:	6a e7       	ldi	r22, 0x7A	; 122
    1e14:	0f 2e       	mov	r0, r31
    1e16:	fc ef       	ldi	r31, 0xFC	; 252
    1e18:	ff 2e       	mov	r15, r31
    1e1a:	f0 2d       	mov	r31, r0
    1e1c:	f7 0c       	add	r15, r7
    1e1e:	8f 2d       	mov	r24, r15
    1e20:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <gfx_mono_generic_draw_line>
										   ox,     LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,
										   GFX_PIXEL_SET);
				gfx_mono_generic_draw_line(ox - 4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1e24:	2b e7       	ldi	r18, 0x7B	; 123
    1e26:	47 2d       	mov	r20, r7
    1e28:	6a e7       	ldi	r22, 0x7A	; 122
    1e2a:	8f 2d       	mov	r24, r15
    1e2c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <gfx_mono_generic_draw_line>
										   ox,     LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 4,
										   GFX_PIXEL_SET);
			}
			gfx_mono_generic_draw_filled_rect(ox, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,  dx, 3, GFX_PIXEL_SET);
    1e30:	01 e0       	ldi	r16, 0x01	; 1
    1e32:	23 e0       	ldi	r18, 0x03	; 3
    1e34:	48 2d       	mov	r20, r8
    1e36:	69 e7       	ldi	r22, 0x79	; 121
    1e38:	87 2d       	mov	r24, r7
    1e3a:	0e 94 87 05 	call	0xb0e	; 0xb0e <gfx_mono_generic_draw_filled_rect>
			gfx_mono_generic_draw_filled_rect(mid_x + rdiff, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,  maxdiff - rdiff +4, 3, GFX_PIXEL_CLR);
    1e3e:	40 e5       	ldi	r20, 0x50	; 80
    1e40:	4c 19       	sub	r20, r12
    1e42:	00 e0       	ldi	r16, 0x00	; 0
    1e44:	23 e0       	ldi	r18, 0x03	; 3
    1e46:	69 e7       	ldi	r22, 0x79	; 121
    1e48:	86 e9       	ldi	r24, 0x96	; 150
    1e4a:	8c 0d       	add	r24, r12
    1e4c:	0e 94 87 05 	call	0xb0e	; 0xb0e <gfx_mono_generic_draw_filled_rect>
			if (diff > 0) {
    1e50:	1a 14       	cp	r1, r10
    1e52:	1b 04       	cpc	r1, r11
    1e54:	24 f5       	brge	.+72     	; 0x1e9e <lcd_show_new_data+0x324>
				gfx_mono_generic_draw_line(mid_x + rdiff + 3, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1e56:	0f 2e       	mov	r0, r31
    1e58:	f5 e9       	ldi	r31, 0x95	; 149
    1e5a:	ff 2e       	mov	r15, r31
    1e5c:	f0 2d       	mov	r31, r0
    1e5e:	fc 0c       	add	r15, r12
    1e60:	89 e9       	ldi	r24, 0x99	; 153
    1e62:	c8 0e       	add	r12, r24
    1e64:	01 e0       	ldi	r16, 0x01	; 1
    1e66:	29 e7       	ldi	r18, 0x79	; 121
    1e68:	4f 2d       	mov	r20, r15
    1e6a:	6a e7       	ldi	r22, 0x7A	; 122
    1e6c:	8c 2d       	mov	r24, r12
    1e6e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <gfx_mono_generic_draw_line>
										   mid_x + rdiff - 1, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,
										   GFX_PIXEL_SET);
				gfx_mono_generic_draw_line(mid_x + rdiff + 3, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1e72:	2b e7       	ldi	r18, 0x7B	; 123
    1e74:	4f 2d       	mov	r20, r15
    1e76:	6a e7       	ldi	r22, 0x7A	; 122
    1e78:	8c 2d       	mov	r24, r12
    1e7a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <gfx_mono_generic_draw_line>
    1e7e:	0f c0       	rjmp	.+30     	; 0x1e9e <lcd_show_new_data+0x324>
			break;

			case 0x3:
			case 0x2:
			case 0x1:
			gfx_mono_generic_draw_filled_rect(mid_x - maxdiff, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,  maxdiff << 1, 1, GFX_PIXEL_SET);
    1e80:	01 e0       	ldi	r16, 0x01	; 1
    1e82:	21 e0       	ldi	r18, 0x01	; 1
    1e84:	48 e9       	ldi	r20, 0x98	; 152
    1e86:	6a e7       	ldi	r22, 0x7A	; 122
    1e88:	8a e4       	ldi	r24, 0x4A	; 74
    1e8a:	0e 94 87 05 	call	0xb0e	; 0xb0e <gfx_mono_generic_draw_filled_rect>
    1e8e:	07 c0       	rjmp	.+14     	; 0x1e9e <lcd_show_new_data+0x324>
			break;
		}

	} else {
		gfx_mono_generic_draw_line( mid_x, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,
    1e90:	01 e0       	ldi	r16, 0x01	; 1
    1e92:	2c e7       	ldi	r18, 0x7C	; 124
    1e94:	46 e9       	ldi	r20, 0x96	; 150
    1e96:	68 e7       	ldi	r22, 0x78	; 120
    1e98:	86 e9       	ldi	r24, 0x96	; 150
    1e9a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <gfx_mono_generic_draw_line>
									mid_x, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 5,
									GFX_PIXEL_SET);
	}

	clk_state_old = clk_state;
    1e9e:	10 93 a2 02 	sts	0x02A2, r17	; 0x8002a2 <clk_state_old.3110>
	/* Always */
	if (g_showData.newClkState) {
		g_showData.newClkState = false;
		cpu_irq_restore(flags);
		lcd_show_new_clk_state(g_showData.clkState_clk_state, g_showData.clkState_phase100);
		return 253;
    1ea2:	8d ef       	ldi	r24, 0xFD	; 253
    1ea4:	16 c2       	rjmp	.+1068   	; 0x22d2 <lcd_show_new_data+0x758>
	}


	/* Slot 1 */
	if (g_showData.newSatUse && (idx <= 1)) {
    1ea6:	96 ff       	sbrs	r25, 6
    1ea8:	31 c0       	rjmp	.+98     	; 0x1f0c <lcd_show_new_data+0x392>
    1eaa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1eae:	22 30       	cpi	r18, 0x02	; 2
    1eb0:	68 f5       	brcc	.+90     	; 0x1f0c <lcd_show_new_data+0x392>
		g_showData.newSatUse = false;
    1eb2:	e7 e8       	ldi	r30, 0x87	; 135
    1eb4:	f3 e0       	ldi	r31, 0x03	; 3
    1eb6:	80 81       	ld	r24, Z
    1eb8:	8f 7b       	andi	r24, 0xBF	; 191
    1eba:	80 83       	st	Z, r24
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "SatUse  : West=%02d East=%02d Used=%02d sats",
    1ebc:	87 8d       	ldd	r24, Z+31	; 0x1f
    1ebe:	1f 92       	push	r1
    1ec0:	8f 93       	push	r24
    1ec2:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ec4:	1f 92       	push	r1
    1ec6:	8f 93       	push	r24
    1ec8:	85 8d       	ldd	r24, Z+29	; 0x1d
    1eca:	1f 92       	push	r1
    1ecc:	8f 93       	push	r24
    1ece:	85 e5       	ldi	r24, 0x55	; 85
    1ed0:	91 e0       	ldi	r25, 0x01	; 1
    1ed2:	9f 93       	push	r25
    1ed4:	8f 93       	push	r24
    1ed6:	1f 92       	push	r1
    1ed8:	80 e3       	ldi	r24, 0x30	; 48
    1eda:	8f 93       	push	r24
    1edc:	88 e2       	ldi	r24, 0x28	; 40
    1ede:	93 e0       	ldi	r25, 0x03	; 3
    1ee0:	9f 93       	push	r25
    1ee2:	8f 93       	push	r24
    1ee4:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <snprintf>
    1ee8:	1f bf       	out	0x3f, r17	; 63
		g_showData.satUse_west, g_showData.satUse_east, g_showData.satUse_used);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  6 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1eea:	22 e0       	ldi	r18, 0x02	; 2
    1eec:	31 e0       	ldi	r19, 0x01	; 1
    1eee:	41 e4       	ldi	r20, 0x41	; 65
    1ef0:	63 e0       	ldi	r22, 0x03	; 3
    1ef2:	88 e2       	ldi	r24, 0x28	; 40
    1ef4:	93 e0       	ldi	r25, 0x03	; 3
    1ef6:	69 d8       	rcall	.-3886   	; 0xfca <gfx_mono_draw_string>
		idx = 2;
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		return 1;
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	e3 c1       	rjmp	.+966    	; 0x22d2 <lcd_show_new_data+0x758>
	}

	/* Slot 2 */
	if (g_showData.newSatDop && (idx <= 2)) {
    1f0c:	99 23       	and	r25, r25
    1f0e:	0c f0       	brlt	.+2      	; 0x1f12 <lcd_show_new_data+0x398>
    1f10:	50 c0       	rjmp	.+160    	; 0x1fb2 <lcd_show_new_data+0x438>
    1f12:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1f16:	23 30       	cpi	r18, 0x03	; 3
    1f18:	08 f0       	brcs	.+2      	; 0x1f1c <lcd_show_new_data+0x3a2>
    1f1a:	4b c0       	rjmp	.+150    	; 0x1fb2 <lcd_show_new_data+0x438>
		g_showData.newSatDop = false;
    1f1c:	e7 e8       	ldi	r30, 0x87	; 135
    1f1e:	f3 e0       	ldi	r31, 0x03	; 3
    1f20:	80 81       	ld	r24, Z
    1f22:	8f 77       	andi	r24, 0x7F	; 127
    1f24:	80 83       	st	Z, r24
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat DOP : %03d.%02d",
		(int) (g_showData.satDop_dop100 / 100.0f), g_showData.satDop_dop100 % 100);
    1f26:	44 85       	ldd	r20, Z+12	; 0x0c
    1f28:	55 85       	ldd	r21, Z+13	; 0x0d
	}

	/* Slot 2 */
	if (g_showData.newSatDop && (idx <= 2)) {
		g_showData.newSatDop = false;
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat DOP : %03d.%02d",
    1f2a:	9a 01       	movw	r18, r20
    1f2c:	36 95       	lsr	r19
    1f2e:	27 95       	ror	r18
    1f30:	36 95       	lsr	r19
    1f32:	27 95       	ror	r18
    1f34:	ab e7       	ldi	r26, 0x7B	; 123
    1f36:	b4 e1       	ldi	r27, 0x14	; 20
    1f38:	0e 94 47 1c 	call	0x388e	; 0x388e <__umulhisi3>
    1f3c:	96 95       	lsr	r25
    1f3e:	87 95       	ror	r24
    1f40:	64 e6       	ldi	r22, 0x64	; 100
    1f42:	68 9f       	mul	r22, r24
    1f44:	90 01       	movw	r18, r0
    1f46:	69 9f       	mul	r22, r25
    1f48:	30 0d       	add	r19, r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	ca 01       	movw	r24, r20
    1f4e:	82 1b       	sub	r24, r18
    1f50:	93 0b       	sbc	r25, r19
    1f52:	9f 93       	push	r25
    1f54:	8f 93       	push	r24
		(int) (g_showData.satDop_dop100 / 100.0f), g_showData.satDop_dop100 % 100);
    1f56:	ba 01       	movw	r22, r20
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 15 1b 	call	0x362a	; 0x362a <__floatunsisf>
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	48 ec       	ldi	r20, 0xC8	; 200
    1f66:	52 e4       	ldi	r21, 0x42	; 66
    1f68:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__divsf3>
	}

	/* Slot 2 */
	if (g_showData.newSatDop && (idx <= 2)) {
		g_showData.newSatDop = false;
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat DOP : %03d.%02d",
    1f6c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__fixsfsi>
    1f70:	7f 93       	push	r23
    1f72:	6f 93       	push	r22
    1f74:	82 e8       	ldi	r24, 0x82	; 130
    1f76:	91 e0       	ldi	r25, 0x01	; 1
    1f78:	9f 93       	push	r25
    1f7a:	8f 93       	push	r24
    1f7c:	1f 92       	push	r1
    1f7e:	80 e3       	ldi	r24, 0x30	; 48
    1f80:	8f 93       	push	r24
    1f82:	88 e2       	ldi	r24, 0x28	; 40
    1f84:	93 e0       	ldi	r25, 0x03	; 3
    1f86:	9f 93       	push	r25
    1f88:	8f 93       	push	r24
    1f8a:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <snprintf>
    1f8e:	1f bf       	out	0x3f, r17	; 63
		(int) (g_showData.satDop_dop100 / 100.0f), g_showData.satDop_dop100 % 100);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  7 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1f90:	22 e0       	ldi	r18, 0x02	; 2
    1f92:	31 e0       	ldi	r19, 0x01	; 1
    1f94:	4a e4       	ldi	r20, 0x4A	; 74
    1f96:	63 e0       	ldi	r22, 0x03	; 3
    1f98:	88 e2       	ldi	r24, 0x28	; 40
    1f9a:	93 e0       	ldi	r25, 0x03	; 3
    1f9c:	16 d8       	rcall	.-4052   	; 0xfca <gfx_mono_draw_string>
		idx = 3;
    1f9e:	83 e0       	ldi	r24, 0x03	; 3
    1fa0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		return 2;
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	90 c1       	rjmp	.+800    	; 0x22d2 <lcd_show_new_data+0x758>
	}

	/* Slot 3 */
	if (g_showData.newPosState && (idx <= 3)) {
    1fb2:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <g_showData+0x1>
    1fb6:	20 ff       	sbrs	r18, 0
    1fb8:	31 c0       	rjmp	.+98     	; 0x201c <lcd_show_new_data+0x4a2>
    1fba:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__data_start>
    1fbe:	34 30       	cpi	r19, 0x04	; 4
    1fc0:	68 f5       	brcc	.+90     	; 0x201c <lcd_show_new_data+0x4a2>
		g_showData.newPosState = false;
    1fc2:	e8 e8       	ldi	r30, 0x88	; 136
    1fc4:	f3 e0       	ldi	r31, 0x03	; 3
    1fc6:	82 2f       	mov	r24, r18
    1fc8:	8e 7f       	andi	r24, 0xFE	; 254
    1fca:	80 83       	st	Z, r24
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "SatState: FI=%1d M2=%1d",
		g_showData.posState_fi, g_showData.posState_m2);
    1fcc:	e7 e8       	ldi	r30, 0x87	; 135
    1fce:	f3 e0       	ldi	r31, 0x03	; 3
	}

	/* Slot 3 */
	if (g_showData.newPosState && (idx <= 3)) {
		g_showData.newPosState = false;
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "SatState: FI=%1d M2=%1d",
    1fd0:	81 a1       	ldd	r24, Z+33	; 0x21
    1fd2:	1f 92       	push	r1
    1fd4:	8f 93       	push	r24
    1fd6:	80 a1       	ldd	r24, Z+32	; 0x20
    1fd8:	1f 92       	push	r1
    1fda:	8f 93       	push	r24
    1fdc:	86 e9       	ldi	r24, 0x96	; 150
    1fde:	91 e0       	ldi	r25, 0x01	; 1
    1fe0:	9f 93       	push	r25
    1fe2:	8f 93       	push	r24
    1fe4:	1f 92       	push	r1
    1fe6:	80 e3       	ldi	r24, 0x30	; 48
    1fe8:	8f 93       	push	r24
    1fea:	88 e2       	ldi	r24, 0x28	; 40
    1fec:	93 e0       	ldi	r25, 0x03	; 3
    1fee:	9f 93       	push	r25
    1ff0:	8f 93       	push	r24
    1ff2:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <snprintf>
    1ff6:	1f bf       	out	0x3f, r17	; 63
		g_showData.posState_fi, g_showData.posState_m2);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  8 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1ff8:	22 e0       	ldi	r18, 0x02	; 2
    1ffa:	31 e0       	ldi	r19, 0x01	; 1
    1ffc:	43 e5       	ldi	r20, 0x53	; 83
    1ffe:	63 e0       	ldi	r22, 0x03	; 3
    2000:	88 e2       	ldi	r24, 0x28	; 40
    2002:	93 e0       	ldi	r25, 0x03	; 3
    2004:	0e 94 e5 07 	call	0xfca	; 0xfca <gfx_mono_draw_string>
		idx = 4;
    2008:	84 e0       	ldi	r24, 0x04	; 4
    200a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		return 3;
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	83 e0       	ldi	r24, 0x03	; 3
    201a:	5b c1       	rjmp	.+694    	; 0x22d2 <lcd_show_new_data+0x758>
	}

	/* Slot 4 */
	if (g_showData.newPosLat && (idx <= 4)) {
    201c:	21 ff       	sbrs	r18, 1
    201e:	38 c0       	rjmp	.+112    	; 0x2090 <lcd_show_new_data+0x516>
    2020:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__data_start>
    2024:	35 30       	cpi	r19, 0x05	; 5
    2026:	a0 f5       	brcc	.+104    	; 0x2090 <lcd_show_new_data+0x516>
		g_showData.newPosLat = false;
    2028:	e8 e8       	ldi	r30, 0x88	; 136
    202a:	f3 e0       	ldi	r31, 0x03	; 3
    202c:	80 81       	ld	r24, Z
    202e:	8d 7f       	andi	r24, 0xFD	; 253
    2030:	80 83       	st	Z, r24
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat Lat : %c  %02d^%02d.%04d'",
    2032:	e7 e8       	ldi	r30, 0x87	; 135
    2034:	f3 e0       	ldi	r31, 0x03	; 3
    2036:	87 85       	ldd	r24, Z+15	; 0x0f
    2038:	8f 93       	push	r24
    203a:	86 85       	ldd	r24, Z+14	; 0x0e
    203c:	8f 93       	push	r24
    203e:	84 a1       	ldd	r24, Z+36	; 0x24
    2040:	1f 92       	push	r1
    2042:	8f 93       	push	r24
    2044:	83 a1       	ldd	r24, Z+35	; 0x23
    2046:	1f 92       	push	r1
    2048:	8f 93       	push	r24
    204a:	82 a1       	ldd	r24, Z+34	; 0x22
    204c:	1f 92       	push	r1
    204e:	8f 93       	push	r24
    2050:	8e ea       	ldi	r24, 0xAE	; 174
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	9f 93       	push	r25
    2056:	8f 93       	push	r24
    2058:	1f 92       	push	r1
    205a:	80 e3       	ldi	r24, 0x30	; 48
    205c:	8f 93       	push	r24
    205e:	88 e2       	ldi	r24, 0x28	; 40
    2060:	93 e0       	ldi	r25, 0x03	; 3
    2062:	9f 93       	push	r25
    2064:	8f 93       	push	r24
    2066:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <snprintf>
    206a:	1f bf       	out	0x3f, r17	; 63
		g_showData.posLat_sgn, g_showData.posLat_deg, g_showData.posLat_min_int, g_showData.posLat_min_frac10000);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  9 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    206c:	22 e0       	ldi	r18, 0x02	; 2
    206e:	31 e0       	ldi	r19, 0x01	; 1
    2070:	4c e5       	ldi	r20, 0x5C	; 92
    2072:	63 e0       	ldi	r22, 0x03	; 3
    2074:	88 e2       	ldi	r24, 0x28	; 40
    2076:	93 e0       	ldi	r25, 0x03	; 3
    2078:	0e 94 e5 07 	call	0xfca	; 0xfca <gfx_mono_draw_string>
		idx = 5;
    207c:	85 e0       	ldi	r24, 0x05	; 5
    207e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		return 4;
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	84 e0       	ldi	r24, 0x04	; 4
    208e:	21 c1       	rjmp	.+578    	; 0x22d2 <lcd_show_new_data+0x758>
	}

	/* Slot 5 */
	if (g_showData.newPosLon && (idx <= 5)) {
    2090:	22 ff       	sbrs	r18, 2
    2092:	38 c0       	rjmp	.+112    	; 0x2104 <lcd_show_new_data+0x58a>
    2094:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__data_start>
    2098:	36 30       	cpi	r19, 0x06	; 6
    209a:	a0 f5       	brcc	.+104    	; 0x2104 <lcd_show_new_data+0x58a>
		g_showData.newPosLon = false;
    209c:	e8 e8       	ldi	r30, 0x88	; 136
    209e:	f3 e0       	ldi	r31, 0x03	; 3
    20a0:	80 81       	ld	r24, Z
    20a2:	8b 7f       	andi	r24, 0xFB	; 251
    20a4:	80 83       	st	Z, r24
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat Lon : %c %03d^%02d.%04d'",
    20a6:	e7 e8       	ldi	r30, 0x87	; 135
    20a8:	f3 e0       	ldi	r31, 0x03	; 3
    20aa:	81 89       	ldd	r24, Z+17	; 0x11
    20ac:	8f 93       	push	r24
    20ae:	80 89       	ldd	r24, Z+16	; 0x10
    20b0:	8f 93       	push	r24
    20b2:	87 a1       	ldd	r24, Z+39	; 0x27
    20b4:	1f 92       	push	r1
    20b6:	8f 93       	push	r24
    20b8:	86 a1       	ldd	r24, Z+38	; 0x26
    20ba:	1f 92       	push	r1
    20bc:	8f 93       	push	r24
    20be:	85 a1       	ldd	r24, Z+37	; 0x25
    20c0:	1f 92       	push	r1
    20c2:	8f 93       	push	r24
    20c4:	8c ec       	ldi	r24, 0xCC	; 204
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	9f 93       	push	r25
    20ca:	8f 93       	push	r24
    20cc:	1f 92       	push	r1
    20ce:	80 e3       	ldi	r24, 0x30	; 48
    20d0:	8f 93       	push	r24
    20d2:	88 e2       	ldi	r24, 0x28	; 40
    20d4:	93 e0       	ldi	r25, 0x03	; 3
    20d6:	9f 93       	push	r25
    20d8:	8f 93       	push	r24
    20da:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <snprintf>
    20de:	1f bf       	out	0x3f, r17	; 63
		g_showData.posLon_sgn, g_showData.posLon_deg, g_showData.posLon_min_int, g_showData.posLon_min_frac10000);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP + 10 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    20e0:	22 e0       	ldi	r18, 0x02	; 2
    20e2:	31 e0       	ldi	r19, 0x01	; 1
    20e4:	45 e6       	ldi	r20, 0x65	; 101
    20e6:	63 e0       	ldi	r22, 0x03	; 3
    20e8:	88 e2       	ldi	r24, 0x28	; 40
    20ea:	93 e0       	ldi	r25, 0x03	; 3
    20ec:	0e 94 e5 07 	call	0xfca	; 0xfca <gfx_mono_draw_string>
		idx = 6;
    20f0:	86 e0       	ldi	r24, 0x06	; 6
    20f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		return 5;
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	85 e0       	ldi	r24, 0x05	; 5
    2102:	e7 c0       	rjmp	.+462    	; 0x22d2 <lcd_show_new_data+0x758>
	}

	/* Slot 6 */
	if (g_showData.newPosHeight && (idx <= 6)) {
    2104:	23 ff       	sbrs	r18, 3
    2106:	2f c0       	rjmp	.+94     	; 0x2166 <lcd_show_new_data+0x5ec>
    2108:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    210c:	27 30       	cpi	r18, 0x07	; 7
    210e:	58 f5       	brcc	.+86     	; 0x2166 <lcd_show_new_data+0x5ec>
		g_showData.newPosHeight = false;
    2110:	e8 e8       	ldi	r30, 0x88	; 136
    2112:	f3 e0       	ldi	r31, 0x03	; 3
    2114:	80 81       	ld	r24, Z
    2116:	87 7f       	andi	r24, 0xF7	; 247
    2118:	80 83       	st	Z, r24
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat Hgt : %04d m",
    211a:	e7 e8       	ldi	r30, 0x87	; 135
    211c:	f3 e0       	ldi	r31, 0x03	; 3
    211e:	83 89       	ldd	r24, Z+19	; 0x13
    2120:	8f 93       	push	r24
    2122:	82 89       	ldd	r24, Z+18	; 0x12
    2124:	8f 93       	push	r24
    2126:	89 ee       	ldi	r24, 0xE9	; 233
    2128:	91 e0       	ldi	r25, 0x01	; 1
    212a:	9f 93       	push	r25
    212c:	8f 93       	push	r24
    212e:	1f 92       	push	r1
    2130:	80 e3       	ldi	r24, 0x30	; 48
    2132:	8f 93       	push	r24
    2134:	88 e2       	ldi	r24, 0x28	; 40
    2136:	93 e0       	ldi	r25, 0x03	; 3
    2138:	9f 93       	push	r25
    213a:	8f 93       	push	r24
    213c:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <snprintf>
    2140:	1f bf       	out	0x3f, r17	; 63
		g_showData.pos_heigth);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP + 11 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    2142:	22 e0       	ldi	r18, 0x02	; 2
    2144:	31 e0       	ldi	r19, 0x01	; 1
    2146:	4e e6       	ldi	r20, 0x6E	; 110
    2148:	63 e0       	ldi	r22, 0x03	; 3
    214a:	88 e2       	ldi	r24, 0x28	; 40
    214c:	93 e0       	ldi	r25, 0x03	; 3
    214e:	0e 94 e5 07 	call	0xfca	; 0xfca <gfx_mono_draw_string>
		idx = 7;
    2152:	87 e0       	ldi	r24, 0x07	; 7
    2154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		return 6;
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	86 e0       	ldi	r24, 0x06	; 6
    2164:	b6 c0       	rjmp	.+364    	; 0x22d2 <lcd_show_new_data+0x758>
	}

	/* Slot 7 */
	if (g_showData.newPpb && (idx <= 7)) {
    2166:	93 ff       	sbrs	r25, 3
    2168:	31 c0       	rjmp	.+98     	; 0x21cc <lcd_show_new_data+0x652>
    216a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    216e:	28 30       	cpi	r18, 0x08	; 8
    2170:	68 f5       	brcc	.+90     	; 0x21cc <lcd_show_new_data+0x652>
		g_showData.newPpb = false;
    2172:	e7 e8       	ldi	r30, 0x87	; 135
    2174:	f3 e0       	ldi	r31, 0x03	; 3
    2176:	80 81       	ld	r24, Z
    2178:	87 7f       	andi	r24, 0xF7	; 247
    217a:	80 83       	st	Z, r24
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Deviat. : %04d.%03d ppb ",
    217c:	81 85       	ldd	r24, Z+9	; 0x09
    217e:	8f 93       	push	r24
    2180:	80 85       	ldd	r24, Z+8	; 0x08
    2182:	8f 93       	push	r24
    2184:	87 81       	ldd	r24, Z+7	; 0x07
    2186:	8f 93       	push	r24
    2188:	86 81       	ldd	r24, Z+6	; 0x06
    218a:	8f 93       	push	r24
    218c:	8a ef       	ldi	r24, 0xFA	; 250
    218e:	91 e0       	ldi	r25, 0x01	; 1
    2190:	9f 93       	push	r25
    2192:	8f 93       	push	r24
    2194:	1f 92       	push	r1
    2196:	80 e3       	ldi	r24, 0x30	; 48
    2198:	8f 93       	push	r24
    219a:	88 e2       	ldi	r24, 0x28	; 40
    219c:	93 e0       	ldi	r25, 0x03	; 3
    219e:	9f 93       	push	r25
    21a0:	8f 93       	push	r24
    21a2:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <snprintf>
    21a6:	1f bf       	out	0x3f, r17	; 63
		g_showData.ppb_int, g_showData.ppb_frac1000);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  3 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    21a8:	22 e0       	ldi	r18, 0x02	; 2
    21aa:	31 e0       	ldi	r19, 0x01	; 1
    21ac:	46 e2       	ldi	r20, 0x26	; 38
    21ae:	63 e0       	ldi	r22, 0x03	; 3
    21b0:	88 e2       	ldi	r24, 0x28	; 40
    21b2:	93 e0       	ldi	r25, 0x03	; 3
    21b4:	0e 94 e5 07 	call	0xfca	; 0xfca <gfx_mono_draw_string>
		idx = 8;
    21b8:	88 e0       	ldi	r24, 0x08	; 8
    21ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		return 7;
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	87 e0       	ldi	r24, 0x07	; 7
    21ca:	83 c0       	rjmp	.+262    	; 0x22d2 <lcd_show_new_data+0x758>
	}

	/* Slot 8 */
	if (g_showData.newPwm && (idx <= 8)) {
    21cc:	94 ff       	sbrs	r25, 4
    21ce:	42 c0       	rjmp	.+132    	; 0x2254 <lcd_show_new_data+0x6da>
    21d0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    21d4:	29 30       	cpi	r18, 0x09	; 9
    21d6:	f0 f5       	brcc	.+124    	; 0x2254 <lcd_show_new_data+0x6da>
		g_showData.newPwm = false;
    21d8:	0f 2e       	mov	r0, r31
    21da:	f7 e8       	ldi	r31, 0x87	; 135
    21dc:	ef 2e       	mov	r14, r31
    21de:	f3 e0       	ldi	r31, 0x03	; 3
    21e0:	ff 2e       	mov	r15, r31
    21e2:	f0 2d       	mov	r31, r0
    21e4:	f7 01       	movw	r30, r14
    21e6:	80 81       	ld	r24, Z
    21e8:	8f 7e       	andi	r24, 0xEF	; 239
    21ea:	80 83       	st	Z, r24
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "PWM     : %3d.%03d / 256 %%",
		g_showData.pwm_int, (int) (g_showData.pwm_frac256 * (1000.0f / 256.0f)));
    21ec:	63 8d       	ldd	r22, Z+27	; 0x1b
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 17 1b 	call	0x362e	; 0x362e <__floatsisf>
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	4a e7       	ldi	r20, 0x7A	; 122
    21fe:	50 e4       	ldi	r21, 0x40	; 64
    2200:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__mulsf3>
	}

	/* Slot 8 */
	if (g_showData.newPwm && (idx <= 8)) {
		g_showData.newPwm = false;
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "PWM     : %3d.%03d / 256 %%",
    2204:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__fixsfsi>
    2208:	7f 93       	push	r23
    220a:	6f 93       	push	r22
    220c:	f7 01       	movw	r30, r14
    220e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2210:	1f 92       	push	r1
    2212:	8f 93       	push	r24
    2214:	83 e1       	ldi	r24, 0x13	; 19
    2216:	92 e0       	ldi	r25, 0x02	; 2
    2218:	9f 93       	push	r25
    221a:	8f 93       	push	r24
    221c:	1f 92       	push	r1
    221e:	80 e3       	ldi	r24, 0x30	; 48
    2220:	8f 93       	push	r24
    2222:	88 e2       	ldi	r24, 0x28	; 40
    2224:	93 e0       	ldi	r25, 0x03	; 3
    2226:	9f 93       	push	r25
    2228:	8f 93       	push	r24
    222a:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <snprintf>
    222e:	1f bf       	out	0x3f, r17	; 63
		g_showData.pwm_int, (int) (g_showData.pwm_frac256 * (1000.0f / 256.0f)));
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  4 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    2230:	22 e0       	ldi	r18, 0x02	; 2
    2232:	31 e0       	ldi	r19, 0x01	; 1
    2234:	4f e2       	ldi	r20, 0x2F	; 47
    2236:	63 e0       	ldi	r22, 0x03	; 3
    2238:	88 e2       	ldi	r24, 0x28	; 40
    223a:	93 e0       	ldi	r25, 0x03	; 3
    223c:	0e 94 e5 07 	call	0xfca	; 0xfca <gfx_mono_draw_string>
		idx = 9;
    2240:	89 e0       	ldi	r24, 0x09	; 9
    2242:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		return 8;
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	88 e0       	ldi	r24, 0x08	; 8
    2252:	3f c0       	rjmp	.+126    	; 0x22d2 <lcd_show_new_data+0x758>
	}

	/* Slot 9 */
	if (g_showData.newPv && (idx <= 9)) {
    2254:	95 ff       	sbrs	r25, 5
    2256:	30 c0       	rjmp	.+96     	; 0x22b8 <lcd_show_new_data+0x73e>
    2258:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    225c:	9a 30       	cpi	r25, 0x0A	; 10
    225e:	60 f5       	brcc	.+88     	; 0x22b8 <lcd_show_new_data+0x73e>
		g_showData.newPv = false;
    2260:	e7 e8       	ldi	r30, 0x87	; 135
    2262:	f3 e0       	ldi	r31, 0x03	; 3
    2264:	80 81       	ld	r24, Z
    2266:	8f 7d       	andi	r24, 0xDF	; 223
    2268:	80 83       	st	Z, r24
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "PullVolt: %1d.%03d V",
    226a:	83 85       	ldd	r24, Z+11	; 0x0b
    226c:	8f 93       	push	r24
    226e:	82 85       	ldd	r24, Z+10	; 0x0a
    2270:	8f 93       	push	r24
    2272:	84 8d       	ldd	r24, Z+28	; 0x1c
    2274:	1f 92       	push	r1
    2276:	8f 93       	push	r24
    2278:	8f e2       	ldi	r24, 0x2F	; 47
    227a:	92 e0       	ldi	r25, 0x02	; 2
    227c:	9f 93       	push	r25
    227e:	8f 93       	push	r24
    2280:	1f 92       	push	r1
    2282:	80 e3       	ldi	r24, 0x30	; 48
    2284:	8f 93       	push	r24
    2286:	88 e2       	ldi	r24, 0x28	; 40
    2288:	93 e0       	ldi	r25, 0x03	; 3
    228a:	9f 93       	push	r25
    228c:	8f 93       	push	r24
    228e:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <snprintf>
    2292:	1f bf       	out	0x3f, r17	; 63
		g_showData.pv_int, g_showData.pv_frac1000);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  5 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    2294:	22 e0       	ldi	r18, 0x02	; 2
    2296:	31 e0       	ldi	r19, 0x01	; 1
    2298:	48 e3       	ldi	r20, 0x38	; 56
    229a:	63 e0       	ldi	r22, 0x03	; 3
    229c:	88 e2       	ldi	r24, 0x28	; 40
    229e:	93 e0       	ldi	r25, 0x03	; 3
    22a0:	0e 94 e5 07 	call	0xfca	; 0xfca <gfx_mono_draw_string>
		idx = 10;
    22a4:	8a e0       	ldi	r24, 0x0A	; 10
    22a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		return 9;
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	89 e0       	ldi	r24, 0x09	; 9
    22b6:	0d c0       	rjmp	.+26     	; 0x22d2 <lcd_show_new_data+0x758>
	}

	/* When no updates are due, turn back to first position */
	idx = 1;
    22b8:	91 e0       	ldi	r25, 0x01	; 1
    22ba:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
    22be:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return 0;
    22c0:	08 c0       	rjmp	.+16     	; 0x22d2 <lcd_show_new_data+0x758>
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "ClkState: 0x%1X", clk_state);
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  0 * LCD_SHOW_LINE_HEIGHT, &sysfont);
	gfx_mono_draw_string("Phase   :", LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT, &sysfont);

	if ((clk_state_old != clk_state) || !dx) {
		gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  (maxdiff << 1) +8, 5, GFX_PIXEL_CLR);
    22c2:	00 e0       	ldi	r16, 0x00	; 0
    22c4:	25 e0       	ldi	r18, 0x05	; 5
    22c6:	40 ea       	ldi	r20, 0xA0	; 160
    22c8:	68 e7       	ldi	r22, 0x78	; 120
    22ca:	86 e4       	ldi	r24, 0x46	; 70
    22cc:	0e 94 87 05 	call	0xb0e	; 0xb0e <gfx_mono_generic_draw_filled_rect>
    22d0:	df cd       	rjmp	.-1090   	; 0x1e90 <lcd_show_new_data+0x316>
	/* When no updates are due, turn back to first position */
	idx = 1;

	cpu_irq_restore(flags);
	return 0;
}
    22d2:	0f 90       	pop	r0
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	ff 90       	pop	r15
    22de:	ef 90       	pop	r14
    22e0:	df 90       	pop	r13
    22e2:	cf 90       	pop	r12
    22e4:	bf 90       	pop	r11
    22e6:	af 90       	pop	r10
    22e8:	9f 90       	pop	r9
    22ea:	8f 90       	pop	r8
    22ec:	7f 90       	pop	r7
    22ee:	08 95       	ret

000022f0 <lcd_animation_prepare>:
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), " T=%2d.%02d^C ", (int) t, ((int) (t * 100.0f)) % 100);
	gfx_mono_draw_string(s_lcd_prepare_buf, 160, 105, &sysfont);
}

void lcd_animation_prepare(void)
{
    22f0:	cf 92       	push	r12
    22f2:	df 92       	push	r13
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
	int idx;

	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
    2300:	83 ec       	ldi	r24, 0xC3	; 195
    2302:	9f ef       	ldi	r25, 0xFF	; 255
    2304:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <s_animation_train_origin+0x1>
    2308:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <s_animation_train_origin>
	s_animation_dx = 1;
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <s_animation_dx>

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
			s_animation_train_left[  idx] = 0b11111000;

		} else if (idx == ANIMATION_TRAIN_BLANK_LEN - 1) {
			s_animation_train_left[  idx] = 0;

		} else if (!((idx - 16) % 11)) {
    2316:	0f 2e       	mov	r0, r31
    2318:	fb e0       	ldi	r31, 0x0B	; 11
    231a:	ef 2e       	mov	r14, r31
    231c:	f1 2c       	mov	r15, r1
    231e:	f0 2d       	mov	r31, r0
			s_animation_train_left[  idx] = 0b01000000;
    2320:	68 94       	set
    2322:	dd 24       	eor	r13, r13
    2324:	d6 f8       	bld	r13, 6
			s_animation_train_left[++idx] = 0b01000000;
			s_animation_train_left[++idx] = 0b01000000;
			s_animation_train_left[++idx] = 0b11111000;
    2326:	f8 ef       	ldi	r31, 0xF8	; 248
			s_animation_train_left[++idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11001000;
    2328:	0f 2e       	mov	r0, r31
    232a:	f8 ec       	ldi	r31, 0xC8	; 200
    232c:	cf 2e       	mov	r12, r31
    232e:	f0 2d       	mov	r31, r0
			s_animation_train_left[  idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11011000;
		} else if (idx <  5) {
			s_animation_train_left[  idx] = 0b11011111;
		} else if (idx < 11) {
			s_animation_train_left[  idx] = 0b11011000;
    2330:	18 ed       	ldi	r17, 0xD8	; 216

		} else if (idx < 3) {
			s_animation_train_left[  idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11011000;
		} else if (idx <  5) {
			s_animation_train_left[  idx] = 0b11011111;
    2332:	0f ed       	ldi	r16, 0xDF	; 223
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
		if (!idx) {
			s_animation_train_left[idx] = 0;
    2334:	c0 ee       	ldi	r28, 0xE0	; 224
    2336:	d2 e0       	ldi	r29, 0x02	; 2
	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    2338:	e1 e0       	ldi	r30, 0x01	; 1
    233a:	40 e0       	ldi	r20, 0x00	; 0
		if (!idx) {
    233c:	21 15       	cp	r18, r1
    233e:	31 05       	cpc	r19, r1
    2340:	21 f4       	brne	.+8      	; 0x234a <lcd_animation_prepare+0x5a>
			s_animation_train_left[idx] = 0;
    2342:	18 82       	st	Y, r1
	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    2344:	2e 2f       	mov	r18, r30
    2346:	34 2f       	mov	r19, r20
    2348:	f9 cf       	rjmp	.-14     	; 0x233c <lcd_animation_prepare+0x4c>
		if (!idx) {
			s_animation_train_left[idx] = 0;

		} else if (idx < 3) {
    234a:	23 30       	cpi	r18, 0x03	; 3
    234c:	31 05       	cpc	r19, r1
    234e:	5c f4       	brge	.+22     	; 0x2366 <lcd_animation_prepare+0x76>
			s_animation_train_left[  idx] = 0b11111000;
    2350:	d9 01       	movw	r26, r18
    2352:	a0 52       	subi	r26, 0x20	; 32
    2354:	bd 4f       	sbci	r27, 0xFD	; 253
    2356:	fc 93       	st	X, r31
			s_animation_train_left[++idx] = 0b11011000;
    2358:	2f 5f       	subi	r18, 0xFF	; 255
    235a:	3f 4f       	sbci	r19, 0xFF	; 255
    235c:	d9 01       	movw	r26, r18
    235e:	a0 52       	subi	r26, 0x20	; 32
    2360:	bd 4f       	sbci	r27, 0xFD	; 253
    2362:	1c 93       	st	X, r17
    2364:	4e c0       	rjmp	.+156    	; 0x2402 <lcd_animation_prepare+0x112>
		} else if (idx <  5) {
    2366:	25 30       	cpi	r18, 0x05	; 5
    2368:	31 05       	cpc	r19, r1
    236a:	2c f4       	brge	.+10     	; 0x2376 <lcd_animation_prepare+0x86>
			s_animation_train_left[  idx] = 0b11011111;
    236c:	d9 01       	movw	r26, r18
    236e:	a0 52       	subi	r26, 0x20	; 32
    2370:	bd 4f       	sbci	r27, 0xFD	; 253
    2372:	0c 93       	st	X, r16
    2374:	46 c0       	rjmp	.+140    	; 0x2402 <lcd_animation_prepare+0x112>
		} else if (idx < 11) {
    2376:	2b 30       	cpi	r18, 0x0B	; 11
    2378:	31 05       	cpc	r19, r1
    237a:	2c f4       	brge	.+10     	; 0x2386 <lcd_animation_prepare+0x96>
			s_animation_train_left[  idx] = 0b11011000;
    237c:	d9 01       	movw	r26, r18
    237e:	a0 52       	subi	r26, 0x20	; 32
    2380:	bd 4f       	sbci	r27, 0xFD	; 253
    2382:	1c 93       	st	X, r17
    2384:	3e c0       	rjmp	.+124    	; 0x2402 <lcd_animation_prepare+0x112>
		} else if (idx < 16) {
    2386:	20 31       	cpi	r18, 0x10	; 16
    2388:	31 05       	cpc	r19, r1
    238a:	2c f4       	brge	.+10     	; 0x2396 <lcd_animation_prepare+0xa6>
			s_animation_train_left[  idx] = 0b11111000;
    238c:	d9 01       	movw	r26, r18
    238e:	a0 52       	subi	r26, 0x20	; 32
    2390:	bd 4f       	sbci	r27, 0xFD	; 253
    2392:	fc 93       	st	X, r31
    2394:	36 c0       	rjmp	.+108    	; 0x2402 <lcd_animation_prepare+0x112>

		} else if (idx == ANIMATION_TRAIN_BLANK_LEN - 1) {
    2396:	2c 33       	cpi	r18, 0x3C	; 60
    2398:	31 05       	cpc	r19, r1
    239a:	19 f4       	brne	.+6      	; 0x23a2 <lcd_animation_prepare+0xb2>
			s_animation_train_left[  idx] = 0;
    239c:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <s_animation_train_left+0x3c>
    23a0:	36 c0       	rjmp	.+108    	; 0x240e <lcd_animation_prepare+0x11e>

		} else if (!((idx - 16) % 11)) {
    23a2:	c9 01       	movw	r24, r18
    23a4:	40 97       	sbiw	r24, 0x10	; 16
    23a6:	b7 01       	movw	r22, r14
    23a8:	0e 94 2e 1c 	call	0x385c	; 0x385c <__divmodhi4>
    23ac:	89 2b       	or	r24, r25
    23ae:	29 f5       	brne	.+74     	; 0x23fa <lcd_animation_prepare+0x10a>
			s_animation_train_left[  idx] = 0b01000000;
    23b0:	d9 01       	movw	r26, r18
    23b2:	a0 52       	subi	r26, 0x20	; 32
    23b4:	bd 4f       	sbci	r27, 0xFD	; 253
    23b6:	dc 92       	st	X, r13
			s_animation_train_left[++idx] = 0b01000000;
    23b8:	11 96       	adiw	r26, 0x01	; 1
    23ba:	dc 92       	st	X, r13
    23bc:	11 97       	sbiw	r26, 0x01	; 1
			s_animation_train_left[++idx] = 0b01000000;
    23be:	12 96       	adiw	r26, 0x02	; 2
    23c0:	dc 92       	st	X, r13
    23c2:	12 97       	sbiw	r26, 0x02	; 2
			s_animation_train_left[++idx] = 0b11111000;
    23c4:	13 96       	adiw	r26, 0x03	; 3
    23c6:	fc 93       	st	X, r31
    23c8:	13 97       	sbiw	r26, 0x03	; 3
			s_animation_train_left[++idx] = 0b11111000;
    23ca:	14 96       	adiw	r26, 0x04	; 4
    23cc:	fc 93       	st	X, r31
    23ce:	14 97       	sbiw	r26, 0x04	; 4
			s_animation_train_left[++idx] = 0b11001000;
    23d0:	15 96       	adiw	r26, 0x05	; 5
    23d2:	cc 92       	st	X, r12
    23d4:	15 97       	sbiw	r26, 0x05	; 5
			s_animation_train_left[++idx] = 0b11111000;
    23d6:	16 96       	adiw	r26, 0x06	; 6
    23d8:	fc 93       	st	X, r31
    23da:	16 97       	sbiw	r26, 0x06	; 6
			s_animation_train_left[++idx] = 0b11111000;
    23dc:	17 96       	adiw	r26, 0x07	; 7
    23de:	fc 93       	st	X, r31
    23e0:	17 97       	sbiw	r26, 0x07	; 7
			s_animation_train_left[++idx] = 0b11001000;
    23e2:	18 96       	adiw	r26, 0x08	; 8
    23e4:	cc 92       	st	X, r12
    23e6:	18 97       	sbiw	r26, 0x08	; 8
			s_animation_train_left[++idx] = 0b11111000;
    23e8:	19 96       	adiw	r26, 0x09	; 9
    23ea:	fc 93       	st	X, r31
			s_animation_train_left[++idx] = 0b11111000;
    23ec:	26 5f       	subi	r18, 0xF6	; 246
    23ee:	3f 4f       	sbci	r19, 0xFF	; 255
    23f0:	d9 01       	movw	r26, r18
    23f2:	a0 52       	subi	r26, 0x20	; 32
    23f4:	bd 4f       	sbci	r27, 0xFD	; 253
    23f6:	fc 93       	st	X, r31
    23f8:	04 c0       	rjmp	.+8      	; 0x2402 <lcd_animation_prepare+0x112>
		} else {
			s_animation_train_left[idx] = 0;
    23fa:	d9 01       	movw	r26, r18
    23fc:	a0 52       	subi	r26, 0x20	; 32
    23fe:	bd 4f       	sbci	r27, 0xFD	; 253
    2400:	1c 92       	st	X, r1
	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    2402:	2f 5f       	subi	r18, 0xFF	; 255
    2404:	3f 4f       	sbci	r19, 0xFF	; 255
    2406:	2d 33       	cpi	r18, 0x3D	; 61
    2408:	31 05       	cpc	r19, r1
    240a:	0c f4       	brge	.+2      	; 0x240e <lcd_animation_prepare+0x11e>
    240c:	97 cf       	rjmp	.-210    	; 0x233c <lcd_animation_prepare+0x4c>
    240e:	a0 ee       	ldi	r26, 0xE0	; 224
    2410:	b2 e0       	ldi	r27, 0x02	; 2
    2412:	e0 ee       	ldi	r30, 0xE0	; 224
    2414:	f2 e0       	ldi	r31, 0x02	; 2
    2416:	23 ea       	ldi	r18, 0xA3	; 163
    2418:	32 e0       	ldi	r19, 0x02	; 2
			s_animation_train_left[idx] = 0;
		}
	}

	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
		s_animation_train_right[ANIMATION_TRAIN_BLANK_LEN - idx - 1] = s_animation_train_left[idx];		// x-mirror
    241a:	8d 91       	ld	r24, X+
    241c:	82 93       	st	-Z, r24
		} else {
			s_animation_train_left[idx] = 0;
		}
	}

	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    241e:	e2 17       	cp	r30, r18
    2420:	f3 07       	cpc	r31, r19
    2422:	d9 f7       	brne	.-10     	; 0x241a <lcd_animation_prepare+0x12a>
		s_animation_train_right[ANIMATION_TRAIN_BLANK_LEN - idx - 1] = s_animation_train_left[idx];		// x-mirror
	}

	/* prepare free line for train */
	gfx_mono_generic_draw_filled_rect(0, (GFX_MONO_LCD_PAGES - 1) * GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_PIXEL_CLR);
    2424:	00 e0       	ldi	r16, 0x00	; 0
    2426:	28 e0       	ldi	r18, 0x08	; 8
    2428:	40 ef       	ldi	r20, 0xF0	; 240
    242a:	68 e7       	ldi	r22, 0x78	; 120
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	0e 94 87 05 	call	0xb0e	; 0xb0e <gfx_mono_generic_draw_filled_rect>
}
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	1f 91       	pop	r17
    2438:	0f 91       	pop	r16
    243a:	ff 90       	pop	r15
    243c:	ef 90       	pop	r14
    243e:	df 90       	pop	r13
    2440:	cf 90       	pop	r12
    2442:	08 95       	ret

00002444 <lcd_animation_loop>:

void lcd_animation_loop(void)
{
    2444:	cf 92       	push	r12
    2446:	df 92       	push	r13
    2448:	ef 92       	push	r14
    244a:	ff 92       	push	r15
    244c:	0f 93       	push	r16
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	1f 92       	push	r1
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
	if (s_animation_dx) {
    2458:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <s_animation_dx>
    245c:	88 23       	and	r24, r24
    245e:	09 f4       	brne	.+2      	; 0x2462 <lcd_animation_loop+0x1e>
    2460:	3a c1       	rjmp	.+628    	; 0x26d6 <lcd_animation_loop+0x292>
		float now = get_abs_time();
    2462:	3e d5       	rcall	.+2684   	; 0x2ee0 <get_abs_time>
    2464:	6b 01       	movw	r12, r22
    2466:	7c 01       	movw	r14, r24

		if ((now - s_animation_time_last_train) >= 0.04f) {  // 25x per sec
    2468:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <s_animation_time_last_train>
    246c:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <s_animation_time_last_train+0x1>
    2470:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <s_animation_time_last_train+0x2>
    2474:	50 91 20 03 	lds	r21, 0x0320	; 0x800320 <s_animation_time_last_train+0x3>
    2478:	d6 d7       	rcall	.+4012   	; 0x3426 <__subsf3>
    247a:	2a e0       	ldi	r18, 0x0A	; 10
    247c:	37 ed       	ldi	r19, 0xD7	; 215
    247e:	43 e2       	ldi	r20, 0x23	; 35
    2480:	5d e3       	ldi	r21, 0x3D	; 61
    2482:	0e 94 c7 1b 	call	0x378e	; 0x378e <__gesf2>
    2486:	88 23       	and	r24, r24
    2488:	0c f4       	brge	.+2      	; 0x248c <lcd_animation_loop+0x48>
    248a:	5c c0       	rjmp	.+184    	; 0x2544 <lcd_animation_loop+0x100>
			s_animation_time_last_train = now;
    248c:	c0 92 1d 03 	sts	0x031D, r12	; 0x80031d <s_animation_time_last_train>
    2490:	d0 92 1e 03 	sts	0x031E, r13	; 0x80031e <s_animation_time_last_train+0x1>
    2494:	e0 92 1f 03 	sts	0x031F, r14	; 0x80031f <s_animation_time_last_train+0x2>
    2498:	f0 92 20 03 	sts	0x0320, r15	; 0x800320 <s_animation_time_last_train+0x3>
			s_animation_train_origin += s_animation_dx;
    249c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <s_animation_dx>
    24a0:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <s_animation_train_origin>
    24a4:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <s_animation_train_origin+0x1>
    24a8:	e8 0f       	add	r30, r24
    24aa:	f1 1d       	adc	r31, r1
    24ac:	87 fd       	sbrc	r24, 7
    24ae:	fa 95       	dec	r31
    24b0:	f0 93 27 03 	sts	0x0327, r31	; 0x800327 <s_animation_train_origin+0x1>
    24b4:	e0 93 26 03 	sts	0x0326, r30	; 0x800326 <s_animation_train_origin>

			if (s_animation_train_origin <= (-10 - ANIMATION_TRAIN_BLANK_LEN)) {
    24b8:	ea 3b       	cpi	r30, 0xBA	; 186
    24ba:	2f ef       	ldi	r18, 0xFF	; 255
    24bc:	f2 07       	cpc	r31, r18
    24be:	24 f4       	brge	.+8      	; 0x24c8 <lcd_animation_loop+0x84>
				s_animation_dx = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <s_animation_dx>
    24c6:	25 c0       	rjmp	.+74     	; 0x2512 <lcd_animation_loop+0xce>
			} else if (s_animation_train_origin >= (GFX_MONO_LCD_WIDTH + 10)) {
    24c8:	ea 3f       	cpi	r30, 0xFA	; 250
    24ca:	f1 05       	cpc	r31, r1
    24cc:	24 f0       	brlt	.+8      	; 0x24d6 <lcd_animation_loop+0x92>
				s_animation_dx = -1;
    24ce:	8f ef       	ldi	r24, 0xFF	; 255
    24d0:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <s_animation_dx>
    24d4:	04 c0       	rjmp	.+8      	; 0x24de <lcd_animation_loop+0x9a>
			}

			if (s_animation_dx < 0) {
    24d6:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <s_animation_dx>
    24da:	88 23       	and	r24, r24
    24dc:	d4 f4       	brge	.+52     	; 0x2512 <lcd_animation_loop+0xce>
				// Draw train left
				if (s_animation_train_origin >= 0 && s_animation_train_origin < GFX_MONO_LCD_WIDTH) {
    24de:	e0 3f       	cpi	r30, 0xF0	; 240
    24e0:	f1 05       	cpc	r31, r1
    24e2:	40 f4       	brcc	.+16     	; 0x24f4 <lcd_animation_loop+0xb0>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_left, GFX_MONO_LCD_PAGES - 1, s_animation_train_origin, ANIMATION_TRAIN_BLANK_LEN);				// full width
    24e4:	2d e3       	ldi	r18, 0x3D	; 61
    24e6:	4e 2f       	mov	r20, r30
    24e8:	6f e0       	ldi	r22, 0x0F	; 15
    24ea:	80 ee       	ldi	r24, 0xE0	; 224
    24ec:	92 e0       	ldi	r25, 0x02	; 2
    24ee:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <gfx_mono_lcd_uc1608_put_page>
    24f2:	28 c0       	rjmp	.+80     	; 0x2544 <lcd_animation_loop+0x100>
				} else if (-ANIMATION_TRAIN_BLANK_LEN < s_animation_train_origin && s_animation_train_origin < 0) {
    24f4:	cf 01       	movw	r24, r30
    24f6:	cc 96       	adiw	r24, 0x3c	; 60
    24f8:	cc 97       	sbiw	r24, 0x3c	; 60
    24fa:	20 f5       	brcc	.+72     	; 0x2544 <lcd_animation_loop+0x100>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_left - s_animation_train_origin, GFX_MONO_LCD_PAGES - 1, 0, ANIMATION_TRAIN_BLANK_LEN + s_animation_train_origin);	// left: reduced width
    24fc:	2d e3       	ldi	r18, 0x3D	; 61
    24fe:	2e 0f       	add	r18, r30
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	6f e0       	ldi	r22, 0x0F	; 15
    2504:	80 ee       	ldi	r24, 0xE0	; 224
    2506:	92 e0       	ldi	r25, 0x02	; 2
    2508:	8e 1b       	sub	r24, r30
    250a:	9f 0b       	sbc	r25, r31
    250c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <gfx_mono_lcd_uc1608_put_page>
    2510:	19 c0       	rjmp	.+50     	; 0x2544 <lcd_animation_loop+0x100>
				}

				} else {
				// Draw train right
				if (s_animation_train_origin >= 0 && s_animation_train_origin < GFX_MONO_LCD_WIDTH) {
    2512:	e0 3f       	cpi	r30, 0xF0	; 240
    2514:	f1 05       	cpc	r31, r1
    2516:	40 f4       	brcc	.+16     	; 0x2528 <lcd_animation_loop+0xe4>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_right, GFX_MONO_LCD_PAGES - 1, s_animation_train_origin, ANIMATION_TRAIN_BLANK_LEN);				// full width
    2518:	2d e3       	ldi	r18, 0x3D	; 61
    251a:	4e 2f       	mov	r20, r30
    251c:	6f e0       	ldi	r22, 0x0F	; 15
    251e:	83 ea       	ldi	r24, 0xA3	; 163
    2520:	92 e0       	ldi	r25, 0x02	; 2
    2522:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <gfx_mono_lcd_uc1608_put_page>
    2526:	0e c0       	rjmp	.+28     	; 0x2544 <lcd_animation_loop+0x100>
				} else if (-ANIMATION_TRAIN_BLANK_LEN < s_animation_train_origin && s_animation_train_origin < 0) {
    2528:	cf 01       	movw	r24, r30
    252a:	cc 96       	adiw	r24, 0x3c	; 60
    252c:	cc 97       	sbiw	r24, 0x3c	; 60
    252e:	50 f4       	brcc	.+20     	; 0x2544 <lcd_animation_loop+0x100>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_right - s_animation_train_origin, GFX_MONO_LCD_PAGES - 1, 0, ANIMATION_TRAIN_BLANK_LEN + s_animation_train_origin);	// left: reduced width
    2530:	2d e3       	ldi	r18, 0x3D	; 61
    2532:	2e 0f       	add	r18, r30
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	6f e0       	ldi	r22, 0x0F	; 15
    2538:	83 ea       	ldi	r24, 0xA3	; 163
    253a:	92 e0       	ldi	r25, 0x02	; 2
    253c:	8e 1b       	sub	r24, r30
    253e:	9f 0b       	sbc	r25, r31
    2540:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <gfx_mono_lcd_uc1608_put_page>
				}
			}
		}

		if ((now - s_animation_time_last_temp) >= 0.50f) {  // 2x per sec
    2544:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <s_animation_time_last_temp>
    2548:	30 91 22 03 	lds	r19, 0x0322	; 0x800322 <s_animation_time_last_temp+0x1>
    254c:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <s_animation_time_last_temp+0x2>
    2550:	50 91 24 03 	lds	r21, 0x0324	; 0x800324 <s_animation_time_last_temp+0x3>
    2554:	c7 01       	movw	r24, r14
    2556:	b6 01       	movw	r22, r12
    2558:	66 d7       	rcall	.+3788   	; 0x3426 <__subsf3>
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e0       	ldi	r20, 0x00	; 0
    2560:	5f e3       	ldi	r21, 0x3F	; 63
    2562:	0e 94 c7 1b 	call	0x378e	; 0x378e <__gesf2>
    2566:	88 23       	and	r24, r24
    2568:	0c f4       	brge	.+2      	; 0x256c <lcd_animation_loop+0x128>
    256a:	6f c0       	rjmp	.+222    	; 0x264a <lcd_animation_loop+0x206>
			s_animation_time_last_temp = now;
    256c:	c0 92 21 03 	sts	0x0321, r12	; 0x800321 <s_animation_time_last_temp>
    2570:	d0 92 22 03 	sts	0x0322, r13	; 0x800322 <s_animation_time_last_temp+0x1>
    2574:	e0 92 23 03 	sts	0x0323, r14	; 0x800323 <s_animation_time_last_temp+0x2>
    2578:	f0 92 24 03 	sts	0x0324, r15	; 0x800324 <s_animation_time_last_temp+0x3>
static void s_lcd_test_temp(void)
{
	static float t_last = 0.0f;
	float	t;

	s_task();
    257c:	03 d5       	rcall	.+2566   	; 0x2f84 <s_task>

	if (!g_status.doAnimation) {
    257e:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <g_status>
    2582:	80 ff       	sbrs	r24, 0
    2584:	62 c0       	rjmp	.+196    	; 0x264a <lcd_animation_loop+0x206>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2586:	8f b7       	in	r24, 0x3f	; 63
    2588:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    258a:	f8 94       	cli
	return flags;
    258c:	89 81       	ldd	r24, Y+1	; 0x01
		return;
	}

	irqflags_t flags = cpu_irq_save();
	t = g_temp;
    258e:	c0 90 b5 03 	lds	r12, 0x03B5	; 0x8003b5 <g_temp>
    2592:	d0 90 b6 03 	lds	r13, 0x03B6	; 0x8003b6 <g_temp+0x1>
    2596:	e0 90 b7 03 	lds	r14, 0x03B7	; 0x8003b7 <g_temp+0x2>
    259a:	f0 90 b8 03 	lds	r15, 0x03B8	; 0x8003b8 <g_temp+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    259e:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	if (t < 0.f) {
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	a9 01       	movw	r20, r18
    25a6:	c7 01       	movw	r24, r14
    25a8:	b6 01       	movw	r22, r12
    25aa:	a2 d7       	rcall	.+3908   	; 0x34f0 <__cmpsf2>
    25ac:	88 23       	and	r24, r24
    25ae:	1c f4       	brge	.+6      	; 0x25b6 <lcd_animation_loop+0x172>
		t = 0.f;
    25b0:	c1 2c       	mov	r12, r1
    25b2:	d1 2c       	mov	r13, r1
    25b4:	76 01       	movw	r14, r12
	}

	if (fabs(t - t_last) < 0.01f) {
    25b6:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <t_last.3142>
    25ba:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <t_last.3142+0x1>
    25be:	40 91 a0 02 	lds	r20, 0x02A0	; 0x8002a0 <t_last.3142+0x2>
    25c2:	50 91 a1 02 	lds	r21, 0x02A1	; 0x8002a1 <t_last.3142+0x3>
    25c6:	c7 01       	movw	r24, r14
    25c8:	b6 01       	movw	r22, r12
    25ca:	2d d7       	rcall	.+3674   	; 0x3426 <__subsf3>
    25cc:	9f 77       	andi	r25, 0x7F	; 127
    25ce:	2a e0       	ldi	r18, 0x0A	; 10
    25d0:	37 ed       	ldi	r19, 0xD7	; 215
    25d2:	43 e2       	ldi	r20, 0x23	; 35
    25d4:	5c e3       	ldi	r21, 0x3C	; 60
    25d6:	8c d7       	rcall	.+3864   	; 0x34f0 <__cmpsf2>
    25d8:	88 23       	and	r24, r24
    25da:	bc f1       	brlt	.+110    	; 0x264a <lcd_animation_loop+0x206>
		return;
	}
	t_last = t;
    25dc:	c0 92 9e 02 	sts	0x029E, r12	; 0x80029e <t_last.3142>
    25e0:	d0 92 9f 02 	sts	0x029F, r13	; 0x80029f <t_last.3142+0x1>
    25e4:	e0 92 a0 02 	sts	0x02A0, r14	; 0x8002a0 <t_last.3142+0x2>
    25e8:	f0 92 a1 02 	sts	0x02A1, r15	; 0x8002a1 <t_last.3142+0x3>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), " T=%2d.%02d^C ", (int) t, ((int) (t * 100.0f)) % 100);
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	48 ec       	ldi	r20, 0xC8	; 200
    25f2:	52 e4       	ldi	r21, 0x42	; 66
    25f4:	c7 01       	movw	r24, r14
    25f6:	b6 01       	movw	r22, r12
    25f8:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__mulsf3>
    25fc:	e5 d7       	rcall	.+4042   	; 0x35c8 <__fixsfsi>
    25fe:	cb 01       	movw	r24, r22
    2600:	64 e6       	ldi	r22, 0x64	; 100
    2602:	70 e0       	ldi	r23, 0x00	; 0
    2604:	0e 94 2e 1c 	call	0x385c	; 0x385c <__divmodhi4>
    2608:	9f 93       	push	r25
    260a:	8f 93       	push	r24
    260c:	c7 01       	movw	r24, r14
    260e:	b6 01       	movw	r22, r12
    2610:	db d7       	rcall	.+4022   	; 0x35c8 <__fixsfsi>
    2612:	7f 93       	push	r23
    2614:	6f 93       	push	r22
    2616:	84 e4       	ldi	r24, 0x44	; 68
    2618:	92 e0       	ldi	r25, 0x02	; 2
    261a:	9f 93       	push	r25
    261c:	8f 93       	push	r24
    261e:	1f 92       	push	r1
    2620:	80 e3       	ldi	r24, 0x30	; 48
    2622:	8f 93       	push	r24
    2624:	88 e2       	ldi	r24, 0x28	; 40
    2626:	93 e0       	ldi	r25, 0x03	; 3
    2628:	9f 93       	push	r25
    262a:	8f 93       	push	r24
    262c:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 160, 105, &sysfont);
    2630:	22 e0       	ldi	r18, 0x02	; 2
    2632:	31 e0       	ldi	r19, 0x01	; 1
    2634:	49 e6       	ldi	r20, 0x69	; 105
    2636:	60 ea       	ldi	r22, 0xA0	; 160
    2638:	88 e2       	ldi	r24, 0x28	; 40
    263a:	93 e0       	ldi	r25, 0x03	; 3
    263c:	0e 94 e5 07 	call	0xfca	; 0xfca <gfx_mono_draw_string>
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
	const int w = GFX_MONO_LCD_WIDTH;

	static int loop = 0;
	static uint8_t sw = 0;

	if (loop++ < h) {
    264a:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <loop.3133>
    264e:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <loop.3133+0x1>
    2652:	c9 01       	movw	r24, r18
    2654:	01 96       	adiw	r24, 0x01	; 1
    2656:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <loop.3133+0x1>
    265a:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <loop.3133>
    265e:	22 31       	cpi	r18, 0x12	; 18
    2660:	31 05       	cpc	r19, r1
    2662:	a4 f4       	brge	.+40     	; 0x268c <lcd_animation_loop+0x248>
		uint8_t y11 = oy + loop;
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);
    2664:	00 91 9b 02 	lds	r16, 0x029B	; 0x80029b <sw.3134>
    2668:	9b ea       	ldi	r25, 0xAB	; 171
    266a:	09 9f       	mul	r16, r25
    266c:	91 2d       	mov	r25, r1
    266e:	11 24       	eor	r1, r1
    2670:	96 95       	lsr	r25
    2672:	29 2f       	mov	r18, r25
    2674:	22 0f       	add	r18, r18
    2676:	92 0f       	add	r25, r18
    2678:	09 1b       	sub	r16, r25
	static int loop = 0;
	static uint8_t sw = 0;

	if (loop++ < h) {
		uint8_t y11 = oy + loop;
		uint8_t y12 = oy + h - loop - 1;
    267a:	2b e1       	ldi	r18, 0x1B	; 27
    267c:	28 1b       	sub	r18, r24

	static int loop = 0;
	static uint8_t sw = 0;

	if (loop++ < h) {
		uint8_t y11 = oy + loop;
    267e:	6a e0       	ldi	r22, 0x0A	; 10
    2680:	68 0f       	add	r22, r24
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);
    2682:	4f ee       	ldi	r20, 0xEF	; 239
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <gfx_mono_generic_draw_line>
    268a:	25 c0       	rjmp	.+74     	; 0x26d6 <lcd_animation_loop+0x292>

	} else if (loop < (h + w)) {
    268c:	82 30       	cpi	r24, 0x02	; 2
    268e:	21 e0       	ldi	r18, 0x01	; 1
    2690:	92 07       	cpc	r25, r18
    2692:	9c f4       	brge	.+38     	; 0x26ba <lcd_animation_loop+0x276>
		uint8_t x21 = (loop - h);
		uint8_t x22 = w - (loop - h) - 1;
		gfx_mono_generic_draw_line (x21, oy + h - 1, x22, oy, sw % 3);
    2694:	00 91 9b 02 	lds	r16, 0x029B	; 0x80029b <sw.3134>
    2698:	9b ea       	ldi	r25, 0xAB	; 171
    269a:	09 9f       	mul	r16, r25
    269c:	91 2d       	mov	r25, r1
    269e:	11 24       	eor	r1, r1
    26a0:	96 95       	lsr	r25
    26a2:	29 2f       	mov	r18, r25
    26a4:	22 0f       	add	r18, r18
    26a6:	92 0f       	add	r25, r18
    26a8:	09 1b       	sub	r16, r25
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);

	} else if (loop < (h + w)) {
		uint8_t x21 = (loop - h);
		uint8_t x22 = w - (loop - h) - 1;
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	48 1b       	sub	r20, r24
		gfx_mono_generic_draw_line (x21, oy + h - 1, x22, oy, sw % 3);
    26ae:	2a e0       	ldi	r18, 0x0A	; 10
    26b0:	6b e1       	ldi	r22, 0x1B	; 27
    26b2:	82 51       	subi	r24, 0x12	; 18
    26b4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <gfx_mono_generic_draw_line>
    26b8:	0e c0       	rjmp	.+28     	; 0x26d6 <lcd_animation_loop+0x292>

	} else {
		loop = 0;
    26ba:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <loop.3133+0x1>
    26be:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <loop.3133>
		if (++sw >= 3) {
    26c2:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <sw.3134>
    26c6:	8f 5f       	subi	r24, 0xFF	; 255
    26c8:	83 30       	cpi	r24, 0x03	; 3
    26ca:	18 f4       	brcc	.+6      	; 0x26d2 <lcd_animation_loop+0x28e>
    26cc:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <sw.3134>
    26d0:	02 c0       	rjmp	.+4      	; 0x26d6 <lcd_animation_loop+0x292>
			sw = 0;
    26d2:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <sw.3134>
			s_lcd_test_temp();
		}

		s_lcd_test_lines();  // Every cycle
	}	
}
    26d6:	0f 90       	pop	r0
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	0f 91       	pop	r16
    26de:	ff 90       	pop	r15
    26e0:	ef 90       	pop	r14
    26e2:	df 90       	pop	r13
    26e4:	cf 90       	pop	r12
    26e6:	08 95       	ret

000026e8 <lcd_test>:

void lcd_test(uint8_t pattern_bm)
{
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	f8 2e       	mov	r15, r24
	if (pattern_bm & (1 << 0)) {
    26f4:	80 ff       	sbrs	r24, 0
    26f6:	06 c0       	rjmp	.+12     	; 0x2704 <lcd_test+0x1c>
    26f8:	c0 e0       	ldi	r28, 0x00	; 0
		// TEST 1
		for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
			lcd_bus_write_ram(i);
    26fa:	8c 2f       	mov	r24, r28
    26fc:	a4 d9       	rcall	.-3256   	; 0x1a46 <lcd_bus_write_ram>
    26fe:	cf 5f       	subi	r28, 0xFF	; 255

void lcd_test(uint8_t pattern_bm)
{
	if (pattern_bm & (1 << 0)) {
		// TEST 1
		for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
    2700:	c0 3f       	cpi	r28, 0xF0	; 240
    2702:	d9 f7       	brne	.-10     	; 0x26fa <lcd_test+0x12>
			lcd_bus_write_ram(i);
		}
	}

	if (pattern_bm & (1 << 1)) {
    2704:	f1 fe       	sbrs	r15, 1
    2706:	18 c0       	rjmp	.+48     	; 0x2738 <lcd_test+0x50>
		// TEST 2
		lcd_page_set(2);
    2708:	82 e0       	ldi	r24, 0x02	; 2
    270a:	fc d9       	rcall	.-3080   	; 0x1b04 <lcd_page_set>
		lcd_cr();
    270c:	11 da       	rcall	.-3038   	; 0x1b30 <lcd_cr>
		for (int i = 0, pos = 231; i < GFX_MONO_LCD_WIDTH; ++i, ++pos) {
    270e:	c0 e0       	ldi	r28, 0x00	; 0
    2710:	d0 e0       	ldi	r29, 0x00	; 0
			if (!(i % 7)) {
    2712:	07 e0       	ldi	r16, 0x07	; 7
    2714:	10 e0       	ldi	r17, 0x00	; 0
    2716:	ce 01       	movw	r24, r28
    2718:	b8 01       	movw	r22, r16
    271a:	0e 94 2e 1c 	call	0x385c	; 0x385c <__divmodhi4>
    271e:	89 2b       	or	r24, r25
    2720:	11 f4       	brne	.+4      	; 0x2726 <lcd_test+0x3e>
				lcd_bus_write_ram(0);
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 d9       	rcall	.-3296   	; 0x1a46 <lcd_bus_write_ram>
    2726:	fe 01       	movw	r30, r28
    2728:	ed 52       	subi	r30, 0x2D	; 45
    272a:	fa 4f       	sbci	r31, 0xFA	; 250
			}
			lcd_bus_write_ram(PROGMEM_READ_BYTE(&(sysfont_glyphs[pos])));
    272c:	84 91       	lpm	r24, Z
    272e:	8b d9       	rcall	.-3306   	; 0x1a46 <lcd_bus_write_ram>

	if (pattern_bm & (1 << 1)) {
		// TEST 2
		lcd_page_set(2);
		lcd_cr();
		for (int i = 0, pos = 231; i < GFX_MONO_LCD_WIDTH; ++i, ++pos) {
    2730:	21 96       	adiw	r28, 0x01	; 1
    2732:	c0 3f       	cpi	r28, 0xF0	; 240
    2734:	d1 05       	cpc	r29, r1
    2736:	79 f7       	brne	.-34     	; 0x2716 <lcd_test+0x2e>
			}
			lcd_bus_write_ram(PROGMEM_READ_BYTE(&(sysfont_glyphs[pos])));
		}
	}

	if (pattern_bm & (1 << 2)) {
    2738:	f2 fe       	sbrs	r15, 2
    273a:	2d c0       	rjmp	.+90     	; 0x2796 <lcd_test+0xae>
		// TEST 3
		gfx_mono_draw_pixel(4 + 0, 40 + 0, GFX_PIXEL_SET);
    273c:	41 e0       	ldi	r20, 0x01	; 1
    273e:	68 e2       	ldi	r22, 0x28	; 40
    2740:	84 e0       	ldi	r24, 0x04	; 4
    2742:	0e 94 6f 07 	call	0xede	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 1, 40 + 1, GFX_PIXEL_SET);
    2746:	41 e0       	ldi	r20, 0x01	; 1
    2748:	69 e2       	ldi	r22, 0x29	; 41
    274a:	85 e0       	ldi	r24, 0x05	; 5
    274c:	0e 94 6f 07 	call	0xede	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 2, GFX_PIXEL_SET);
    2750:	41 e0       	ldi	r20, 0x01	; 1
    2752:	6a e2       	ldi	r22, 0x2A	; 42
    2754:	86 e0       	ldi	r24, 0x06	; 6
    2756:	0e 94 6f 07 	call	0xede	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 3, 40 + 3, GFX_PIXEL_SET);
    275a:	41 e0       	ldi	r20, 0x01	; 1
    275c:	6b e2       	ldi	r22, 0x2B	; 43
    275e:	87 e0       	ldi	r24, 0x07	; 7
    2760:	0e 94 6f 07 	call	0xede	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 4, GFX_PIXEL_SET);
    2764:	41 e0       	ldi	r20, 0x01	; 1
    2766:	6c e2       	ldi	r22, 0x2C	; 44
    2768:	86 e0       	ldi	r24, 0x06	; 6
    276a:	0e 94 6f 07 	call	0xede	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 1, 40 + 5, GFX_PIXEL_SET);
    276e:	41 e0       	ldi	r20, 0x01	; 1
    2770:	6d e2       	ldi	r22, 0x2D	; 45
    2772:	85 e0       	ldi	r24, 0x05	; 5
    2774:	0e 94 6f 07 	call	0xede	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 6, GFX_PIXEL_SET);
    2778:	41 e0       	ldi	r20, 0x01	; 1
    277a:	6e e2       	ldi	r22, 0x2E	; 46
    277c:	86 e0       	ldi	r24, 0x06	; 6
    277e:	0e 94 6f 07 	call	0xede	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 3, 40 + 7, GFX_PIXEL_SET);
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	6f e2       	ldi	r22, 0x2F	; 47
    2786:	87 e0       	ldi	r24, 0x07	; 7
    2788:	0e 94 6f 07 	call	0xede	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 4, 40 + 8, GFX_PIXEL_SET);
    278c:	41 e0       	ldi	r20, 0x01	; 1
    278e:	60 e3       	ldi	r22, 0x30	; 48
    2790:	88 e0       	ldi	r24, 0x08	; 8
    2792:	0e 94 6f 07 	call	0xede	; 0xede <gfx_mono_lcd_uc1608_draw_pixel>
	}

	if (pattern_bm & (1 << 3)) {
    2796:	f3 fe       	sbrs	r15, 3
    2798:	07 c0       	rjmp	.+14     	; 0x27a8 <lcd_test+0xc0>
		// TEST 4
		gfx_mono_generic_draw_line (0, 16, 239, 31, GFX_PIXEL_SET);
    279a:	01 e0       	ldi	r16, 0x01	; 1
    279c:	2f e1       	ldi	r18, 0x1F	; 31
    279e:	4f ee       	ldi	r20, 0xEF	; 239
    27a0:	60 e1       	ldi	r22, 0x10	; 16
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <gfx_mono_generic_draw_line>
	}

	if (pattern_bm & (1 << 4)) {
    27a8:	f4 fe       	sbrs	r15, 4
    27aa:	0d c0       	rjmp	.+26     	; 0x27c6 <lcd_test+0xde>
		// TEST 5
		gfx_mono_generic_draw_rect(        70, 48, 40, 40, GFX_PIXEL_SET);
    27ac:	01 e0       	ldi	r16, 0x01	; 1
    27ae:	28 e2       	ldi	r18, 0x28	; 40
    27b0:	48 e2       	ldi	r20, 0x28	; 40
    27b2:	60 e3       	ldi	r22, 0x30	; 48
    27b4:	86 e4       	ldi	r24, 0x46	; 70
    27b6:	0e 94 63 05 	call	0xac6	; 0xac6 <gfx_mono_generic_draw_rect>
		gfx_mono_generic_draw_filled_rect(170, 48, 40, 40, GFX_PIXEL_SET);
    27ba:	28 e2       	ldi	r18, 0x28	; 40
    27bc:	48 e2       	ldi	r20, 0x28	; 40
    27be:	60 e3       	ldi	r22, 0x30	; 48
    27c0:	8a ea       	ldi	r24, 0xAA	; 170
    27c2:	0e 94 87 05 	call	0xb0e	; 0xb0e <gfx_mono_generic_draw_filled_rect>
	}

	if (pattern_bm & (1 << 5)) {
    27c6:	f5 fe       	sbrs	r15, 5
    27c8:	0d c0       	rjmp	.+26     	; 0x27e4 <lcd_test+0xfc>
		// TEST 6
		gfx_mono_generic_draw_circle(       10, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    27ca:	0f ef       	ldi	r16, 0xFF	; 255
    27cc:	21 e0       	ldi	r18, 0x01	; 1
    27ce:	4a e0       	ldi	r20, 0x0A	; 10
    27d0:	60 e5       	ldi	r22, 0x50	; 80
    27d2:	8a e0       	ldi	r24, 0x0A	; 10
    27d4:	0e 94 a1 05 	call	0xb42	; 0xb42 <gfx_mono_generic_draw_circle>
		gfx_mono_generic_draw_filled_circle(40, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    27d8:	21 e0       	ldi	r18, 0x01	; 1
    27da:	4a e0       	ldi	r20, 0x0A	; 10
    27dc:	60 e5       	ldi	r22, 0x50	; 80
    27de:	88 e2       	ldi	r24, 0x28	; 40
    27e0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <gfx_mono_generic_draw_filled_circle>
	}

	if (pattern_bm & (1 << 6)) {
    27e4:	f6 fe       	sbrs	r15, 6
    27e6:	08 c0       	rjmp	.+16     	; 0x27f8 <lcd_test+0x110>
		// TEST 7
		gfx_mono_draw_string("DF4IAH Smart-LCD", 70, 32, &sysfont);
    27e8:	22 e0       	ldi	r18, 0x02	; 2
    27ea:	31 e0       	ldi	r19, 0x01	; 1
    27ec:	40 e2       	ldi	r20, 0x20	; 32
    27ee:	66 e4       	ldi	r22, 0x46	; 70
    27f0:	83 e5       	ldi	r24, 0x53	; 83
    27f2:	92 e0       	ldi	r25, 0x02	; 2
    27f4:	0e 94 e5 07 	call	0xfca	; 0xfca <gfx_mono_draw_string>
	}

	if (pattern_bm & (1 << 7)) {
    27f8:	ff 20       	and	r15, r15
    27fa:	3c f4       	brge	.+14     	; 0x280a <lcd_test+0x122>
		// TEST 8
		lcd_animation_prepare();
    27fc:	79 dd       	rcall	.-1294   	; 0x22f0 <lcd_animation_prepare>

		g_status.doAnimation = true;
    27fe:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <g_status>
    2802:	81 60       	ori	r24, 0x01	; 1
    2804:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <g_status>
		lcd_animation_loop();
    2808:	1d de       	rcall	.-966    	; 0x2444 <lcd_animation_loop>
	}
}
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	1f 91       	pop	r17
    2810:	0f 91       	pop	r16
    2812:	ff 90       	pop	r15
    2814:	08 95       	ret

00002816 <isr_lcd_10mhz_ref_osc_show_clk_state>:
/* ISR - interrupt disabled functions called within the TWI interrupt handling */

void isr_lcd_10mhz_ref_osc_show_clk_state(uint8_t clk_state, int16_t phase100)
{
	// interrupt is already disabled, here
	if (g_showData.clkState_clk_state != clk_state ||
    2816:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <g_showData+0x14>
    281a:	98 13       	cpse	r25, r24
    281c:	07 c0       	rjmp	.+14     	; 0x282c <isr_lcd_10mhz_ref_osc_show_clk_state+0x16>
    281e:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <g_showData+0x2>
    2822:	30 91 8a 03 	lds	r19, 0x038A	; 0x80038a <g_showData+0x3>
    2826:	26 17       	cp	r18, r22
    2828:	37 07       	cpc	r19, r23
    282a:	41 f0       	breq	.+16     	; 0x283c <isr_lcd_10mhz_ref_osc_show_clk_state+0x26>
			g_showData.clkState_phase100 != phase100) {
		g_showData.newClkState = true;
    282c:	e7 e8       	ldi	r30, 0x87	; 135
    282e:	f3 e0       	ldi	r31, 0x03	; 3
    2830:	90 81       	ld	r25, Z
    2832:	91 60       	ori	r25, 0x01	; 1
    2834:	90 83       	st	Z, r25
		g_showData.clkState_clk_state = clk_state;
    2836:	84 8b       	std	Z+20, r24	; 0x14
		g_showData.clkState_phase100 = phase100;
    2838:	73 83       	std	Z+3, r23	; 0x03
    283a:	62 83       	std	Z+2, r22	; 0x02
    283c:	08 95       	ret

0000283e <isr_lcd_10mhz_ref_osc_show_date>:
}

void isr_lcd_10mhz_ref_osc_show_date(uint16_t year, int8_t month, uint8_t day)
{
	// interrupt is already disabled, here
	if (g_showData.date_year != year ||
    283e:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <g_showData+0x4>
    2842:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <g_showData+0x5>
    2846:	28 17       	cp	r18, r24
    2848:	39 07       	cpc	r19, r25
    284a:	71 f4       	brne	.+28     	; 0x2868 <isr_lcd_10mhz_ref_osc_show_date+0x2a>
			g_showData.date_month != month ||
    284c:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <g_showData+0x15>
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	e6 2f       	mov	r30, r22
    2854:	06 2e       	mov	r0, r22
    2856:	00 0c       	add	r0, r0
    2858:	ff 0b       	sbc	r31, r31
}

void isr_lcd_10mhz_ref_osc_show_date(uint16_t year, int8_t month, uint8_t day)
{
	// interrupt is already disabled, here
	if (g_showData.date_year != year ||
    285a:	2e 17       	cp	r18, r30
    285c:	3f 07       	cpc	r19, r31
    285e:	21 f4       	brne	.+8      	; 0x2868 <isr_lcd_10mhz_ref_osc_show_date+0x2a>
			g_showData.date_month != month ||
    2860:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <g_showData+0x16>
    2864:	24 17       	cp	r18, r20
    2866:	49 f0       	breq	.+18     	; 0x287a <isr_lcd_10mhz_ref_osc_show_date+0x3c>
			g_showData.date_day != day) {
		g_showData.newDate = true;
    2868:	e7 e8       	ldi	r30, 0x87	; 135
    286a:	f3 e0       	ldi	r31, 0x03	; 3
    286c:	20 81       	ld	r18, Z
    286e:	22 60       	ori	r18, 0x02	; 2
    2870:	20 83       	st	Z, r18
		g_showData.date_year = year;
    2872:	95 83       	std	Z+5, r25	; 0x05
    2874:	84 83       	std	Z+4, r24	; 0x04
		g_showData.date_month = month;
    2876:	65 8b       	std	Z+21, r22	; 0x15
		g_showData.date_day = day;
    2878:	46 8b       	std	Z+22, r20	; 0x16
    287a:	08 95       	ret

0000287c <isr_lcd_10mhz_ref_osc_show_time>:
}

void isr_lcd_10mhz_ref_osc_show_time(uint8_t hour, int8_t minute, uint8_t second)
{
	// interrupt is already disabled, here
	if (g_showData.time_hour != hour ||
    287c:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <g_showData+0x17>
    2880:	98 13       	cpse	r25, r24
    2882:	0e c0       	rjmp	.+28     	; 0x28a0 <isr_lcd_10mhz_ref_osc_show_time+0x24>
			g_showData.time_minute != minute ||
    2884:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <g_showData+0x18>
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	e6 2f       	mov	r30, r22
    288c:	06 2e       	mov	r0, r22
    288e:	00 0c       	add	r0, r0
    2890:	ff 0b       	sbc	r31, r31
}

void isr_lcd_10mhz_ref_osc_show_time(uint8_t hour, int8_t minute, uint8_t second)
{
	// interrupt is already disabled, here
	if (g_showData.time_hour != hour ||
    2892:	2e 17       	cp	r18, r30
    2894:	3f 07       	cpc	r19, r31
    2896:	21 f4       	brne	.+8      	; 0x28a0 <isr_lcd_10mhz_ref_osc_show_time+0x24>
			g_showData.time_minute != minute ||
    2898:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <g_showData+0x19>
    289c:	94 17       	cp	r25, r20
    289e:	41 f0       	breq	.+16     	; 0x28b0 <isr_lcd_10mhz_ref_osc_show_time+0x34>
			g_showData.time_second != second) {
		g_showData.newTime = true;
    28a0:	e7 e8       	ldi	r30, 0x87	; 135
    28a2:	f3 e0       	ldi	r31, 0x03	; 3
    28a4:	90 81       	ld	r25, Z
    28a6:	94 60       	ori	r25, 0x04	; 4
    28a8:	90 83       	st	Z, r25
		g_showData.time_hour = hour;
    28aa:	87 8b       	std	Z+23, r24	; 0x17
		g_showData.time_minute = minute;
    28ac:	60 8f       	std	Z+24, r22	; 0x18
		g_showData.time_second = second;
    28ae:	41 8f       	std	Z+25, r20	; 0x19
    28b0:	08 95       	ret

000028b2 <isr_lcd_10mhz_ref_osc_show_ppm>:
}

void isr_lcd_10mhz_ref_osc_show_ppm(int16_t ppm_int, uint16_t ppm_frac1000)
{
	// interrupt is already disabled, here
	if (g_showData.ppb_int != ppm_int ||
    28b2:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <g_showData+0x6>
    28b6:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <g_showData+0x7>
    28ba:	28 17       	cp	r18, r24
    28bc:	39 07       	cpc	r19, r25
    28be:	39 f4       	brne	.+14     	; 0x28ce <isr_lcd_10mhz_ref_osc_show_ppm+0x1c>
    28c0:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <g_showData+0x8>
    28c4:	30 91 90 03 	lds	r19, 0x0390	; 0x800390 <g_showData+0x9>
    28c8:	26 17       	cp	r18, r22
    28ca:	37 07       	cpc	r19, r23
    28cc:	49 f0       	breq	.+18     	; 0x28e0 <isr_lcd_10mhz_ref_osc_show_ppm+0x2e>
			g_showData.ppb_frac1000 != ppm_frac1000) {
		g_showData.newPpb = true;
    28ce:	e7 e8       	ldi	r30, 0x87	; 135
    28d0:	f3 e0       	ldi	r31, 0x03	; 3
    28d2:	20 81       	ld	r18, Z
    28d4:	28 60       	ori	r18, 0x08	; 8
    28d6:	20 83       	st	Z, r18
		g_showData.ppb_int = ppm_int;
    28d8:	97 83       	std	Z+7, r25	; 0x07
    28da:	86 83       	std	Z+6, r24	; 0x06
		g_showData.ppb_frac1000 = ppm_frac1000;
    28dc:	71 87       	std	Z+9, r23	; 0x09
    28de:	60 87       	std	Z+8, r22	; 0x08
    28e0:	08 95       	ret

000028e2 <isr_lcd_10mhz_ref_osc_show_pwm>:
}

void isr_lcd_10mhz_ref_osc_show_pwm(uint8_t pwm_int, uint8_t pwm_frac256)
{
	// interrupt is already disabled, here
	if (g_showData.pwm_int != pwm_int ||
    28e2:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <g_showData+0x1a>
    28e6:	98 13       	cpse	r25, r24
    28e8:	04 c0       	rjmp	.+8      	; 0x28f2 <isr_lcd_10mhz_ref_osc_show_pwm+0x10>
    28ea:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <g_showData+0x1b>
    28ee:	96 17       	cp	r25, r22
    28f0:	39 f0       	breq	.+14     	; 0x2900 <isr_lcd_10mhz_ref_osc_show_pwm+0x1e>
			g_showData.pwm_frac256 != pwm_frac256) {
		g_showData.newPwm = true;
    28f2:	e7 e8       	ldi	r30, 0x87	; 135
    28f4:	f3 e0       	ldi	r31, 0x03	; 3
    28f6:	90 81       	ld	r25, Z
    28f8:	90 61       	ori	r25, 0x10	; 16
    28fa:	90 83       	st	Z, r25
		g_showData.pwm_int = pwm_int;
    28fc:	82 8f       	std	Z+26, r24	; 0x1a
		g_showData.pwm_frac256 = pwm_frac256;
    28fe:	63 8f       	std	Z+27, r22	; 0x1b
    2900:	08 95       	ret

00002902 <isr_lcd_10mhz_ref_osc_show_pv>:
}

void isr_lcd_10mhz_ref_osc_show_pv(uint8_t pv_int, uint16_t pv_frac1000)
{
	// interrupt is already disabled, here
	if (g_showData.pv_int != pv_int ||
    2902:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <g_showData+0x1c>
    2906:	98 13       	cpse	r25, r24
    2908:	07 c0       	rjmp	.+14     	; 0x2918 <isr_lcd_10mhz_ref_osc_show_pv+0x16>
    290a:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <g_showData+0xa>
    290e:	30 91 92 03 	lds	r19, 0x0392	; 0x800392 <g_showData+0xb>
    2912:	26 17       	cp	r18, r22
    2914:	37 07       	cpc	r19, r23
    2916:	41 f0       	breq	.+16     	; 0x2928 <isr_lcd_10mhz_ref_osc_show_pv+0x26>
			g_showData.pv_frac1000 != pv_frac1000) {
		g_showData.newPv = true;
    2918:	e7 e8       	ldi	r30, 0x87	; 135
    291a:	f3 e0       	ldi	r31, 0x03	; 3
    291c:	90 81       	ld	r25, Z
    291e:	90 62       	ori	r25, 0x20	; 32
    2920:	90 83       	st	Z, r25
		g_showData.pv_int = pv_int;
    2922:	84 8f       	std	Z+28, r24	; 0x1c
		g_showData.pv_frac1000 = pv_frac1000;
    2924:	73 87       	std	Z+11, r23	; 0x0b
    2926:	62 87       	std	Z+10, r22	; 0x0a
    2928:	08 95       	ret

0000292a <isr_lcd_10mhz_ref_osc_show_sat_use>:
}

void isr_lcd_10mhz_ref_osc_show_sat_use(uint8_t sat_west, uint8_t sat_east, uint8_t sat_used)
{
	// interrupt is already disabled, here
	if (g_showData.satUse_west != sat_west ||
    292a:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <g_showData+0x1d>
    292e:	98 13       	cpse	r25, r24
    2930:	08 c0       	rjmp	.+16     	; 0x2942 <isr_lcd_10mhz_ref_osc_show_sat_use+0x18>
    2932:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <g_showData+0x1e>
    2936:	96 13       	cpse	r25, r22
    2938:	04 c0       	rjmp	.+8      	; 0x2942 <isr_lcd_10mhz_ref_osc_show_sat_use+0x18>
			g_showData.satUse_east != sat_east ||
    293a:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <g_showData+0x1f>
    293e:	94 17       	cp	r25, r20
    2940:	41 f0       	breq	.+16     	; 0x2952 <isr_lcd_10mhz_ref_osc_show_sat_use+0x28>
			g_showData.satUse_used != sat_used) {
		g_showData.newSatUse = true;
    2942:	e7 e8       	ldi	r30, 0x87	; 135
    2944:	f3 e0       	ldi	r31, 0x03	; 3
    2946:	90 81       	ld	r25, Z
    2948:	90 64       	ori	r25, 0x40	; 64
    294a:	90 83       	st	Z, r25
		g_showData.satUse_west = sat_west;
    294c:	85 8f       	std	Z+29, r24	; 0x1d
		g_showData.satUse_east = sat_east;
    294e:	66 8f       	std	Z+30, r22	; 0x1e
		g_showData.satUse_used = sat_used;
    2950:	47 8f       	std	Z+31, r20	; 0x1f
    2952:	08 95       	ret

00002954 <isr_lcd_10mhz_ref_osc_show_sat_dop>:
}

void isr_lcd_10mhz_ref_osc_show_sat_dop(uint16_t sat_dop100)
{
	// interrupt is already disabled, here
	if (g_showData.satDop_dop100 != sat_dop100) {
    2954:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <g_showData+0xc>
    2958:	30 91 94 03 	lds	r19, 0x0394	; 0x800394 <g_showData+0xd>
    295c:	28 17       	cp	r18, r24
    295e:	39 07       	cpc	r19, r25
    2960:	39 f0       	breq	.+14     	; 0x2970 <isr_lcd_10mhz_ref_osc_show_sat_dop+0x1c>
		g_showData.newSatDop = true;
    2962:	e7 e8       	ldi	r30, 0x87	; 135
    2964:	f3 e0       	ldi	r31, 0x03	; 3
    2966:	20 81       	ld	r18, Z
    2968:	20 68       	ori	r18, 0x80	; 128
    296a:	20 83       	st	Z, r18
		g_showData.satDop_dop100 = sat_dop100;
    296c:	95 87       	std	Z+13, r25	; 0x0d
    296e:	84 87       	std	Z+12, r24	; 0x0c
    2970:	08 95       	ret

00002972 <isr_lcd_10mhz_ref_osc_show_pos_state>:
}

void isr_lcd_10mhz_ref_osc_show_pos_state(uint8_t state_fi, uint8_t state_m2)
{
	// interrupt is already disabled, here
	if (g_showData.posState_fi != state_fi ||
    2972:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <g_showData+0x20>
    2976:	98 13       	cpse	r25, r24
    2978:	04 c0       	rjmp	.+8      	; 0x2982 <isr_lcd_10mhz_ref_osc_show_pos_state+0x10>
    297a:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <g_showData+0x21>
    297e:	96 17       	cp	r25, r22
    2980:	49 f0       	breq	.+18     	; 0x2994 <isr_lcd_10mhz_ref_osc_show_pos_state+0x22>
			g_showData.posState_m2 != state_m2) {
		g_showData.newPosState = true;
    2982:	e8 e8       	ldi	r30, 0x88	; 136
    2984:	f3 e0       	ldi	r31, 0x03	; 3
    2986:	90 81       	ld	r25, Z
    2988:	91 60       	ori	r25, 0x01	; 1
    298a:	90 83       	st	Z, r25
		g_showData.posState_fi = state_fi;
    298c:	e7 e8       	ldi	r30, 0x87	; 135
    298e:	f3 e0       	ldi	r31, 0x03	; 3
    2990:	80 a3       	std	Z+32, r24	; 0x20
		g_showData.posState_m2 = state_m2;
    2992:	61 a3       	std	Z+33, r22	; 0x21
    2994:	08 95       	ret

00002996 <isr_lcd_10mhz_ref_osc_show_pos_lat>:
}

void isr_lcd_10mhz_ref_osc_show_pos_lat(uint8_t lat_sgn, uint8_t lat_deg, uint8_t lat_min_int, uint16_t lat_min_frac10000)
{
	// interrupt is already disabled, here
	if (g_showData.posLat_sgn != lat_sgn ||
    2996:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <g_showData+0x22>
    299a:	98 13       	cpse	r25, r24
    299c:	0f c0       	rjmp	.+30     	; 0x29bc <isr_lcd_10mhz_ref_osc_show_pos_lat+0x26>
    299e:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <g_showData+0x23>
    29a2:	96 13       	cpse	r25, r22
    29a4:	0b c0       	rjmp	.+22     	; 0x29bc <isr_lcd_10mhz_ref_osc_show_pos_lat+0x26>
			g_showData.posLat_deg != lat_deg ||
			g_showData.posLat_min_int != lat_min_int ||
    29a6:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <g_showData+0x24>
    29aa:	94 13       	cpse	r25, r20
    29ac:	07 c0       	rjmp	.+14     	; 0x29bc <isr_lcd_10mhz_ref_osc_show_pos_lat+0x26>
			g_showData.posLat_min_int != lat_min_int ||
    29ae:	e0 91 95 03 	lds	r30, 0x0395	; 0x800395 <g_showData+0xe>
    29b2:	f0 91 96 03 	lds	r31, 0x0396	; 0x800396 <g_showData+0xf>
    29b6:	e2 17       	cp	r30, r18
    29b8:	f3 07       	cpc	r31, r19
    29ba:	61 f0       	breq	.+24     	; 0x29d4 <isr_lcd_10mhz_ref_osc_show_pos_lat+0x3e>
			g_showData.posLat_min_frac10000 != lat_min_frac10000) {
		g_showData.newPosLat = true;
    29bc:	e8 e8       	ldi	r30, 0x88	; 136
    29be:	f3 e0       	ldi	r31, 0x03	; 3
    29c0:	90 81       	ld	r25, Z
    29c2:	92 60       	ori	r25, 0x02	; 2
    29c4:	90 83       	st	Z, r25
		g_showData.posLat_sgn = lat_sgn;
    29c6:	e7 e8       	ldi	r30, 0x87	; 135
    29c8:	f3 e0       	ldi	r31, 0x03	; 3
    29ca:	82 a3       	std	Z+34, r24	; 0x22
		g_showData.posLat_deg = lat_deg;
    29cc:	63 a3       	std	Z+35, r22	; 0x23
		g_showData.posLat_min_int = lat_min_int;
    29ce:	44 a3       	std	Z+36, r20	; 0x24
		g_showData.posLat_min_frac10000 = lat_min_frac10000;
    29d0:	37 87       	std	Z+15, r19	; 0x0f
    29d2:	26 87       	std	Z+14, r18	; 0x0e
    29d4:	08 95       	ret

000029d6 <isr_lcd_10mhz_ref_osc_show_pos_lon>:
}

void isr_lcd_10mhz_ref_osc_show_pos_lon(uint8_t lon_sgn, uint8_t lon_deg, uint8_t lon_min_int, uint16_t lon_min_frac10000)
{
	// interrupt is already disabled, here
	if (g_showData.posLon_sgn != lon_sgn ||
    29d6:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <g_showData+0x25>
    29da:	98 13       	cpse	r25, r24
    29dc:	0f c0       	rjmp	.+30     	; 0x29fc <isr_lcd_10mhz_ref_osc_show_pos_lon+0x26>
			g_showData.posLon_deg != lon_deg ||
    29de:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <g_showData+0x26>
    29e2:	96 13       	cpse	r25, r22
    29e4:	0b c0       	rjmp	.+22     	; 0x29fc <isr_lcd_10mhz_ref_osc_show_pos_lon+0x26>
			g_showData.posLon_deg != lon_deg ||
    29e6:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <g_showData+0x27>
    29ea:	94 13       	cpse	r25, r20
    29ec:	07 c0       	rjmp	.+14     	; 0x29fc <isr_lcd_10mhz_ref_osc_show_pos_lon+0x26>
			g_showData.posLon_min_int != lon_min_int ||
    29ee:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <g_showData+0x10>
    29f2:	f0 91 98 03 	lds	r31, 0x0398	; 0x800398 <g_showData+0x11>
    29f6:	e2 17       	cp	r30, r18
    29f8:	f3 07       	cpc	r31, r19
    29fa:	61 f0       	breq	.+24     	; 0x2a14 <isr_lcd_10mhz_ref_osc_show_pos_lon+0x3e>
			g_showData.posLon_min_frac10000 != lon_min_frac10000) {
		g_showData.newPosLon = true;
    29fc:	e8 e8       	ldi	r30, 0x88	; 136
    29fe:	f3 e0       	ldi	r31, 0x03	; 3
    2a00:	90 81       	ld	r25, Z
    2a02:	94 60       	ori	r25, 0x04	; 4
    2a04:	90 83       	st	Z, r25
		g_showData.posLon_sgn = lon_sgn;
    2a06:	e7 e8       	ldi	r30, 0x87	; 135
    2a08:	f3 e0       	ldi	r31, 0x03	; 3
    2a0a:	85 a3       	std	Z+37, r24	; 0x25
		g_showData.posLon_deg = lon_deg;
    2a0c:	66 a3       	std	Z+38, r22	; 0x26
		g_showData.posLon_min_int = lon_min_int;
    2a0e:	47 a3       	std	Z+39, r20	; 0x27
		g_showData.posLon_min_frac10000 = lon_min_frac10000;
    2a10:	31 8b       	std	Z+17, r19	; 0x11
    2a12:	20 8b       	std	Z+16, r18	; 0x10
    2a14:	08 95       	ret

00002a16 <isr_lcd_10mhz_ref_osc_show_pos_height>:
}

void isr_lcd_10mhz_ref_osc_show_pos_height(int16_t height)
{
	// interrupt is already disabled, here
	if (g_showData.pos_heigth != height) {
    2a16:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <g_showData+0x12>
    2a1a:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <g_showData+0x13>
    2a1e:	28 17       	cp	r18, r24
    2a20:	39 07       	cpc	r19, r25
    2a22:	49 f0       	breq	.+18     	; 0x2a36 <isr_lcd_10mhz_ref_osc_show_pos_height+0x20>
		g_showData.newPosHeight = true;
    2a24:	e8 e8       	ldi	r30, 0x88	; 136
    2a26:	f3 e0       	ldi	r31, 0x03	; 3
    2a28:	20 81       	ld	r18, Z
    2a2a:	28 60       	ori	r18, 0x08	; 8
    2a2c:	20 83       	st	Z, r18
		g_showData.pos_heigth = height;
    2a2e:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <g_showData+0x13>
    2a32:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <g_showData+0x12>
    2a36:	08 95       	ret

00002a38 <lcd_get_sysfont>:


const void* lcd_get_sysfont(void)
{
	return &sysfont;
}
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	91 e0       	ldi	r25, 0x01	; 1
    2a3c:	08 95       	ret

00002a3e <lcd_init>:
uint8_t lcd_init(void)
{
	uint8_t data;

	/* INIT sequence */
	lcd_bus_write_cmd(0b11100010);									// Reset display
    2a3e:	82 ee       	ldi	r24, 0xE2	; 226
    2a40:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <lcd_bus_write_cmd>
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	90 e0       	ldi	r25, 0x00	; 0
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
		barrier();
    2a48:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2a4a:	8b 32       	cpi	r24, 0x2B	; 43
    2a4c:	28 e6       	ldi	r18, 0x68	; 104
    2a4e:	92 07       	cpc	r25, r18
    2a50:	d9 f7       	brne	.-10     	; 0x2a48 <lcd_init+0xa>
	delay_ms(20);													// Wait for the panel to get ready in case one is attached to the bus

	data = lcd_bus_read_status();									// Get current status
    2a52:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <lcd_bus_read_status>
	if (!(data & C_LCD_STATUS_M)) {
    2a56:	88 23       	and	r24, r24
    2a58:	2c f0       	brlt	.+10     	; 0x2a64 <lcd_init+0x26>
		/* LCD panel reacts correctly - resume with INIT sequence */
		lcd_enable(true);
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	28 d8       	rcall	.-4016   	; 0x1aae <lcd_enable>
		lcd_cls();													// Clear screen
    2a5e:	74 d8       	rcall	.-3864   	; 0x1b48 <lcd_cls>
		return 0;													// Return OK
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	08 95       	ret

	} else {
		return 1;													// Return failure
    2a64:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    2a66:	08 95       	ret

00002a68 <lcd_shutdown>:

void lcd_shutdown(void)
{
	lcd_bus_write_cmd(0b11100010);									// Reset display
    2a68:	82 ee       	ldi	r24, 0xE2	; 226
    2a6a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <lcd_bus_write_cmd>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
		barrier();
    2a72:	01 96       	adiw	r24, 0x01	; 1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2a74:	8b 36       	cpi	r24, 0x6B	; 107
    2a76:	2a e0       	ldi	r18, 0x0A	; 10
    2a78:	92 07       	cpc	r25, r18
    2a7a:	d9 f7       	brne	.-10     	; 0x2a72 <lcd_shutdown+0xa>
	delay_ms(2);													// Wait for the energy to dissipate
}
    2a7c:	08 95       	ret

00002a7e <s_twi_tx_done>:
#endif

static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
    2a7e:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <s_tx_next_len>
    2a82:	22 23       	and	r18, r18
    2a84:	71 f0       	breq	.+28     	; 0x2aa2 <s_twi_tx_done+0x24>
    2a86:	e2 2f       	mov	r30, r18
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	e8 59       	subi	r30, 0x98	; 152
    2a8c:	fc 4f       	sbci	r31, 0xFC	; 252
    2a8e:	87 e6       	ldi	r24, 0x67	; 103
    2a90:	93 e0       	ldi	r25, 0x03	; 3
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
			s_tx_d[idx] = s_tx_next_d[idx];
    2a92:	12 92       	st	-Z, r1
static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
    2a94:	e8 17       	cp	r30, r24
    2a96:	f9 07       	cpc	r31, r25
    2a98:	e1 f7       	brne	.-8      	; 0x2a92 <s_twi_tx_done+0x14>
			s_tx_d[idx] = s_tx_next_d[idx];
		}
		s_tx_len = s_tx_next_len;
    2a9a:	20 93 6f 03 	sts	0x036F, r18	; 0x80036f <s_tx_len>
		s_tx_next_len = 0;
    2a9e:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <s_tx_next_len>
    2aa2:	08 95       	ret

00002aa4 <s_isr_twi_rcvd_command_closed_form>:
	// TODO: implementation
	return err;
}

static void s_isr_twi_rcvd_command_closed_form(uint8_t data[], uint8_t cnt)
{
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	00 d0       	rcall	.+0      	; 0x2aaa <s_isr_twi_rcvd_command_closed_form+0x6>
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <s_isr_twi_rcvd_command_closed_form+0x8>
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
	uint8_t prepareBuf[4];
	uint8_t isGCA	= !data[0];
	uint8_t cmd		=  data[1];
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	21 81       	ldd	r18, Z+1	; 0x01
			{
				// do nothing
			}
		}

	} else if (data[0] == TWI_SLAVE_ADDR_10MHZREFOSC) {
    2ab4:	30 81       	ld	r19, Z
    2ab6:	32 32       	cpi	r19, 0x22	; 34
    2ab8:	09 f0       	breq	.+2      	; 0x2abc <s_isr_twi_rcvd_command_closed_form+0x18>
    2aba:	99 c0       	rjmp	.+306    	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>
		g_status.doAnimation = false;			// stop animation demo
    2abc:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <g_status>
    2ac0:	8e 7f       	andi	r24, 0xFE	; 254
    2ac2:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <g_status>

		switch (cmd) {
    2ac6:	25 38       	cpi	r18, 0x85	; 133
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <s_isr_twi_rcvd_command_closed_form+0x28>
    2aca:	5a c0       	rjmp	.+180    	; 0x2b80 <s_isr_twi_rcvd_command_closed_form+0xdc>
    2acc:	68 f4       	brcc	.+26     	; 0x2ae8 <s_isr_twi_rcvd_command_closed_form+0x44>
    2ace:	21 38       	cpi	r18, 0x81	; 129
    2ad0:	b1 f1       	breq	.+108    	; 0x2b3e <s_isr_twi_rcvd_command_closed_form+0x9a>
    2ad2:	28 f4       	brcc	.+10     	; 0x2ade <s_isr_twi_rcvd_command_closed_form+0x3a>
    2ad4:	21 30       	cpi	r18, 0x01	; 1
    2ad6:	e1 f0       	breq	.+56     	; 0x2b10 <s_isr_twi_rcvd_command_closed_form+0x6c>
    2ad8:	20 38       	cpi	r18, 0x80	; 128
    2ada:	41 f1       	breq	.+80     	; 0x2b2c <s_isr_twi_rcvd_command_closed_form+0x88>
    2adc:	88 c0       	rjmp	.+272    	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>
    2ade:	23 38       	cpi	r18, 0x83	; 131
    2ae0:	09 f4       	brne	.+2      	; 0x2ae4 <s_isr_twi_rcvd_command_closed_form+0x40>
    2ae2:	3c c0       	rjmp	.+120    	; 0x2b5c <s_isr_twi_rcvd_command_closed_form+0xb8>
    2ae4:	b0 f1       	brcs	.+108    	; 0x2b52 <s_isr_twi_rcvd_command_closed_form+0xae>
    2ae6:	48 c0       	rjmp	.+144    	; 0x2b78 <s_isr_twi_rcvd_command_closed_form+0xd4>
    2ae8:	2a 38       	cpi	r18, 0x8A	; 138
    2aea:	09 f4       	brne	.+2      	; 0x2aee <s_isr_twi_rcvd_command_closed_form+0x4a>
    2aec:	5f c0       	rjmp	.+190    	; 0x2bac <s_isr_twi_rcvd_command_closed_form+0x108>
    2aee:	38 f4       	brcc	.+14     	; 0x2afe <s_isr_twi_rcvd_command_closed_form+0x5a>
    2af0:	28 38       	cpi	r18, 0x88	; 136
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <s_isr_twi_rcvd_command_closed_form+0x52>
    2af4:	4e c0       	rjmp	.+156    	; 0x2b92 <s_isr_twi_rcvd_command_closed_form+0xee>
    2af6:	29 38       	cpi	r18, 0x89	; 137
    2af8:	09 f4       	brne	.+2      	; 0x2afc <s_isr_twi_rcvd_command_closed_form+0x58>
    2afa:	50 c0       	rjmp	.+160    	; 0x2b9c <s_isr_twi_rcvd_command_closed_form+0xf8>
    2afc:	78 c0       	rjmp	.+240    	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>
    2afe:	2c 38       	cpi	r18, 0x8C	; 140
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <s_isr_twi_rcvd_command_closed_form+0x60>
    2b02:	63 c0       	rjmp	.+198    	; 0x2bca <s_isr_twi_rcvd_command_closed_form+0x126>
    2b04:	08 f4       	brcc	.+2      	; 0x2b08 <s_isr_twi_rcvd_command_closed_form+0x64>
    2b06:	56 c0       	rjmp	.+172    	; 0x2bb4 <s_isr_twi_rcvd_command_closed_form+0x110>
    2b08:	2d 38       	cpi	r18, 0x8D	; 141
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <s_isr_twi_rcvd_command_closed_form+0x6a>
    2b0c:	69 c0       	rjmp	.+210    	; 0x2be0 <s_isr_twi_rcvd_command_closed_form+0x13c>
    2b0e:	6f c0       	rjmp	.+222    	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>
}

static void s_twi_rx_prepare(uint8_t msgCnt, uint8_t msg[])
{
	if (msgCnt && msg) {
		if (!s_rx_lock) {
    2b10:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <s_rx_lock>
    2b14:	81 11       	cpse	r24, r1
    2b16:	6b c0       	rjmp	.+214    	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>
			// Prepare master message buffer
			for (int idx = msgCnt; idx >= 0; --idx) {
				s_rx_d[idx] = msg[idx];
    2b18:	ee e5       	ldi	r30, 0x5E	; 94
    2b1a:	f3 e0       	ldi	r31, 0x03	; 3
    2b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1e:	81 83       	std	Z+1, r24	; 0x01
    2b20:	80 e1       	ldi	r24, 0x10	; 16
    2b22:	80 83       	st	Z, r24
			}
			s_rx_len = msgCnt;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <s_rx_len>
    2b2a:	61 c0       	rjmp	.+194    	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>
			prepareBuf[0] = VERSION;
			s_twi_rx_prepare(1, prepareBuf);
			break;

			case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
			isr_lcd_10mhz_ref_osc_show_clk_state(data[2], (int16_t) (data[3] | (data[4] << 8)));
    2b2c:	64 81       	ldd	r22, Z+4	; 0x04
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	76 2f       	mov	r23, r22
    2b32:	66 27       	eor	r22, r22
    2b34:	83 81       	ldd	r24, Z+3	; 0x03
    2b36:	68 2b       	or	r22, r24
    2b38:	82 81       	ldd	r24, Z+2	; 0x02
    2b3a:	6d de       	rcall	.-806    	; 0x2816 <isr_lcd_10mhz_ref_osc_show_clk_state>
			break;
    2b3c:	58 c0       	rjmp	.+176    	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>

			case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
			isr_lcd_10mhz_ref_osc_show_date(data[2] | (data[3] << 8), data[4], data[5]);
    2b3e:	83 81       	ldd	r24, Z+3	; 0x03
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	98 2f       	mov	r25, r24
    2b44:	88 27       	eor	r24, r24
    2b46:	22 81       	ldd	r18, Z+2	; 0x02
    2b48:	45 81       	ldd	r20, Z+5	; 0x05
    2b4a:	64 81       	ldd	r22, Z+4	; 0x04
    2b4c:	82 2b       	or	r24, r18
    2b4e:	77 de       	rcall	.-786    	; 0x283e <isr_lcd_10mhz_ref_osc_show_date>
			break;
    2b50:	4e c0       	rjmp	.+156    	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>

			case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
			isr_lcd_10mhz_ref_osc_show_time(data[2], data[3], data[4]);
    2b52:	44 81       	ldd	r20, Z+4	; 0x04
    2b54:	63 81       	ldd	r22, Z+3	; 0x03
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	91 de       	rcall	.-734    	; 0x287c <isr_lcd_10mhz_ref_osc_show_time>
			break;
    2b5a:	49 c0       	rjmp	.+146    	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>

			case TWI_SMART_LCD_CMD_SHOW_PPM:
			isr_lcd_10mhz_ref_osc_show_ppm((int16_t) (data[2] | (data[3] << 8)), data[4] | (data[5] << 8));
    2b5c:	65 81       	ldd	r22, Z+5	; 0x05
    2b5e:	70 e0       	ldi	r23, 0x00	; 0
    2b60:	76 2f       	mov	r23, r22
    2b62:	66 27       	eor	r22, r22
    2b64:	84 81       	ldd	r24, Z+4	; 0x04
    2b66:	68 2b       	or	r22, r24
    2b68:	83 81       	ldd	r24, Z+3	; 0x03
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	98 2f       	mov	r25, r24
    2b6e:	88 27       	eor	r24, r24
    2b70:	22 81       	ldd	r18, Z+2	; 0x02
    2b72:	82 2b       	or	r24, r18
    2b74:	9e de       	rcall	.-708    	; 0x28b2 <isr_lcd_10mhz_ref_osc_show_ppm>
			break;
    2b76:	3b c0       	rjmp	.+118    	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>

			case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
			isr_lcd_10mhz_ref_osc_show_pwm(data[2], data[3]);
    2b78:	63 81       	ldd	r22, Z+3	; 0x03
    2b7a:	82 81       	ldd	r24, Z+2	; 0x02
    2b7c:	b2 de       	rcall	.-668    	; 0x28e2 <isr_lcd_10mhz_ref_osc_show_pwm>
			break;
    2b7e:	37 c0       	rjmp	.+110    	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>

			case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
			isr_lcd_10mhz_ref_osc_show_pv(data[2], data[3] | (data[4] << 8));
    2b80:	64 81       	ldd	r22, Z+4	; 0x04
    2b82:	70 e0       	ldi	r23, 0x00	; 0
    2b84:	76 2f       	mov	r23, r22
    2b86:	66 27       	eor	r22, r22
    2b88:	83 81       	ldd	r24, Z+3	; 0x03
    2b8a:	68 2b       	or	r22, r24
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	b9 de       	rcall	.-654    	; 0x2902 <isr_lcd_10mhz_ref_osc_show_pv>
			break;
    2b90:	2e c0       	rjmp	.+92     	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>

			case TWI_SMART_LCD_CMD_SHOW_SATS:
			isr_lcd_10mhz_ref_osc_show_sat_use(data[2], data[3], data[4]);
    2b92:	44 81       	ldd	r20, Z+4	; 0x04
    2b94:	63 81       	ldd	r22, Z+3	; 0x03
    2b96:	82 81       	ldd	r24, Z+2	; 0x02
    2b98:	c8 de       	rcall	.-624    	; 0x292a <isr_lcd_10mhz_ref_osc_show_sat_use>
			break;
    2b9a:	29 c0       	rjmp	.+82     	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>

			case TWI_SMART_LCD_CMD_SHOW_DOP:
			isr_lcd_10mhz_ref_osc_show_sat_dop(data[2] | (data[3] << 8));
    2b9c:	83 81       	ldd	r24, Z+3	; 0x03
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	98 2f       	mov	r25, r24
    2ba2:	88 27       	eor	r24, r24
    2ba4:	22 81       	ldd	r18, Z+2	; 0x02
    2ba6:	82 2b       	or	r24, r18
    2ba8:	d5 de       	rcall	.-598    	; 0x2954 <isr_lcd_10mhz_ref_osc_show_sat_dop>
			break;
    2baa:	21 c0       	rjmp	.+66     	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>

			case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
			isr_lcd_10mhz_ref_osc_show_pos_state(data[2], data[3]);
    2bac:	63 81       	ldd	r22, Z+3	; 0x03
    2bae:	82 81       	ldd	r24, Z+2	; 0x02
    2bb0:	e0 de       	rcall	.-576    	; 0x2972 <isr_lcd_10mhz_ref_osc_show_pos_state>
			break;
    2bb2:	1d c0       	rjmp	.+58     	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>

			case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
			isr_lcd_10mhz_ref_osc_show_pos_lat(data[2], data[3], data[4], data[5] | (data[6] << 8));
    2bb4:	26 81       	ldd	r18, Z+6	; 0x06
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	32 2f       	mov	r19, r18
    2bba:	22 27       	eor	r18, r18
    2bbc:	85 81       	ldd	r24, Z+5	; 0x05
    2bbe:	28 2b       	or	r18, r24
    2bc0:	44 81       	ldd	r20, Z+4	; 0x04
    2bc2:	63 81       	ldd	r22, Z+3	; 0x03
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	e7 de       	rcall	.-562    	; 0x2996 <isr_lcd_10mhz_ref_osc_show_pos_lat>
			break;
    2bc8:	12 c0       	rjmp	.+36     	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>

			case TWI_SMART_LCD_CMD_SHOW_POS_LON:
			isr_lcd_10mhz_ref_osc_show_pos_lon(data[2], data[3], data[4], data[5] | (data[6] << 8));
    2bca:	26 81       	ldd	r18, Z+6	; 0x06
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	32 2f       	mov	r19, r18
    2bd0:	22 27       	eor	r18, r18
    2bd2:	85 81       	ldd	r24, Z+5	; 0x05
    2bd4:	28 2b       	or	r18, r24
    2bd6:	44 81       	ldd	r20, Z+4	; 0x04
    2bd8:	63 81       	ldd	r22, Z+3	; 0x03
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	fc de       	rcall	.-520    	; 0x29d6 <isr_lcd_10mhz_ref_osc_show_pos_lon>
			break;
    2bde:	07 c0       	rjmp	.+14     	; 0x2bee <s_isr_twi_rcvd_command_closed_form+0x14a>

			case TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT:
			isr_lcd_10mhz_ref_osc_show_pos_height((int16_t) (data[2] | (data[3] << 8)));
    2be0:	83 81       	ldd	r24, Z+3	; 0x03
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	98 2f       	mov	r25, r24
    2be6:	88 27       	eor	r24, r24
    2be8:	22 81       	ldd	r18, Z+2	; 0x02
    2bea:	82 2b       	or	r24, r18
    2bec:	14 df       	rcall	.-472    	; 0x2a16 <isr_lcd_10mhz_ref_osc_show_pos_height>
			{
				// do nothing
			}
		}
	}
}
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	08 95       	ret

00002bfc <__vector_24__bottom>:


uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur)
{
    2bfc:	0f 93       	push	r16
    2bfe:	1f 93       	push	r17
    2c00:	cf 93       	push	r28
    2c02:	df 93       	push	r29
	static uint8_t pos_i	= 0;
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur & 0b01000101;
    2c04:	c4 2f       	mov	r28, r20
    2c06:	c5 74       	andi	r28, 0x45	; 69

	switch(tws) {
    2c08:	08 2f       	mov	r16, r24
    2c0a:	10 e0       	ldi	r17, 0x00	; 0
    2c0c:	09 3f       	cpi	r16, 0xF9	; 249
    2c0e:	11 05       	cpc	r17, r1
    2c10:	08 f0       	brcs	.+2      	; 0x2c14 <__vector_24__bottom+0x18>
    2c12:	59 c1       	rjmp	.+690    	; 0x2ec6 <__vector_24__bottom+0x2ca>
    2c14:	d6 2f       	mov	r29, r22
    2c16:	f8 01       	movw	r30, r16
    2c18:	ec 5c       	subi	r30, 0xCC	; 204
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	32 c6       	rjmp	.+3172   	; 0x3882 <__tablejump2__>

	/* Master Transmitter Mode */

	case TWI_TWSR_START:						// Start condition transmitted
		s_tx_lock = 1;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <s_tx_lock>
		pos_o = 0;
    2c24:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <pos_o.2650>

		cnt_o = 2;								// TEST
    2c28:	82 e0       	ldi	r24, 0x02	; 2
    2c2a:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <cnt_o.2652>
		s_tx_d[0] = (0x12 << TWD1) | (0b0 << TWD0);	// TEST
    2c2e:	e7 e6       	ldi	r30, 0x67	; 103
    2c30:	f3 e0       	ldi	r31, 0x03	; 3
    2c32:	84 e2       	ldi	r24, 0x24	; 36
    2c34:	80 83       	st	Z, r24
		s_tx_d[1] = 0x34;						// TEST
    2c36:	84 e3       	ldi	r24, 0x34	; 52
    2c38:	81 83       	std	Z+1, r24	; 0x01
		s_tx_d[2] = 0x56;						// TEST
    2c3a:	86 e5       	ldi	r24, 0x56	; 86
    2c3c:	82 83       	std	Z+2, r24	; 0x02
		s_tx_d[3] = 0x78;						// TEST
    2c3e:	88 e7       	ldi	r24, 0x78	; 120
    2c40:	83 83       	std	Z+3, r24	; 0x03
		s_tx_d[4] = 0x9a;						// TEST
    2c42:	8a e9       	ldi	r24, 0x9A	; 154
    2c44:	84 83       	std	Z+4, r24	; 0x04
		// fall-through.
	case TWI_TWSR_REPEATEDSTART:				// Repeated start condition transmitted
		nop();
    2c46:	00 00       	nop
		// fall-through.
	case TWI_TWSR_M_SLAW_ADDR_ACK:				// SLA+W transmitted and ACK received
		TWDR = s_tx_d[pos_o++];
    2c48:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <pos_o.2650>
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	8e 0f       	add	r24, r30
    2c50:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <pos_o.2650>
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	e9 59       	subi	r30, 0x99	; 153
    2c58:	fc 4f       	sbci	r31, 0xFC	; 252
    2c5a:	80 81       	ld	r24, Z
    2c5c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		break;
    2c60:	38 c1       	rjmp	.+624    	; 0x2ed2 <__vector_24__bottom+0x2d6>

	case TWI_TWSR_M_SLAW_ADDR_NACK:				// SLA+W transmitted and NACK received
		twcr_new |= _BV(TWSTO);					// Send STOP
    2c62:	c0 61       	ori	r28, 0x10	; 16
		break;
    2c64:	36 c1       	rjmp	.+620    	; 0x2ed2 <__vector_24__bottom+0x2d6>

	case TWI_TWSR_M_SLAW_DATA_ACK:				// Data byte sent and ACK received
		if (pos_o < cnt_o) {
    2c66:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <pos_o.2650>
    2c6a:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <cnt_o.2652>
    2c6e:	e8 17       	cp	r30, r24
    2c70:	58 f4       	brcc	.+22     	; 0x2c88 <__vector_24__bottom+0x8c>
			TWDR = s_tx_d[pos_o++];				// Send new data byte
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	8e 0f       	add	r24, r30
    2c76:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <pos_o.2650>
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	e9 59       	subi	r30, 0x99	; 153
    2c7e:	fc 4f       	sbci	r31, 0xFC	; 252
    2c80:	80 81       	ld	r24, Z
    2c82:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2c86:	25 c1       	rjmp	.+586    	; 0x2ed2 <__vector_24__bottom+0x2d6>
		} else {
			s_tx_lock = 0;
    2c88:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <s_tx_lock>
			s_twi_tx_done();					// Message sent
    2c8c:	f8 de       	rcall	.-528    	; 0x2a7e <s_twi_tx_done>
			twcr_new |= _BV(TWSTO);				// Send STOP - no more data available
    2c8e:	c0 61       	ori	r28, 0x10	; 16
    2c90:	20 c1       	rjmp	.+576    	; 0x2ed2 <__vector_24__bottom+0x2d6>
		}
		break;

	case TWI_TWSR_M_SLAW_DATA_NACK:				// Data byte sent and NACK received
		s_tx_lock = 0;
    2c92:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <s_tx_lock>
		s_twi_tx_done();						// Message failure
    2c96:	f3 de       	rcall	.-538    	; 0x2a7e <s_twi_tx_done>
		twcr_new |= _BV(TWSTO);					// Send STOP - due to an error or slave not ready situation
    2c98:	c0 61       	ori	r28, 0x10	; 16
		break;
    2c9a:	1b c1       	rjmp	.+566    	; 0x2ed2 <__vector_24__bottom+0x2d6>

	case TWI_TWSR_M_SLAW_ARBIT_LOST:			// Arbitration lost
		twcr_new |= _BV(TWSTA);					// Send START (again)
    2c9c:	c0 62       	ori	r28, 0x20	; 32
		break;
    2c9e:	19 c1       	rjmp	.+562    	; 0x2ed2 <__vector_24__bottom+0x2d6>

	case TWI_TWSR_M_SLAR_ADDR_ACK:
		nop();
    2ca0:	00 00       	nop
		break;
    2ca2:	17 c1       	rjmp	.+558    	; 0x2ed2 <__vector_24__bottom+0x2d6>

	case TWI_TWSR_M_SLAR_ADDR_NACK:
		nop();
    2ca4:	00 00       	nop
		break;
    2ca6:	15 c1       	rjmp	.+554    	; 0x2ed2 <__vector_24__bottom+0x2d6>

	case TWI_TWSR_M_SLAR_DATA_ACK:
		nop();
    2ca8:	00 00       	nop
		break;
    2caa:	13 c1       	rjmp	.+550    	; 0x2ed2 <__vector_24__bottom+0x2d6>

	case TWI_TWSR_M_SLAR_DATA_NACK:
		nop();
    2cac:	00 00       	nop
		break;
    2cae:	11 c1       	rjmp	.+546    	; 0x2ed2 <__vector_24__bottom+0x2d6>


	/* Slave Receiver Mode */

	case TWI_TWSR_S_SLAW_MYADDR_RECEIVED:		// SLA+W received and ACK returned
		nop();
    2cb0:	00 00       	nop
		// fall-through.
	case TWI_TWSR_S_SLAW_MYADDR_ARBIT_LOST:
		s_rx_lock = 1;
    2cb2:	11 e0       	ldi	r17, 0x01	; 1
    2cb4:	10 93 66 03 	sts	0x0366, r17	; 0x800366 <s_rx_lock>
		mem_set(s_rx_d, 8, 0x00);
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	68 e0       	ldi	r22, 0x08	; 8
    2cbc:	8e e5       	ldi	r24, 0x5E	; 94
    2cbe:	93 e0       	ldi	r25, 0x03	; 3
    2cc0:	57 d1       	rcall	.+686    	; 0x2f70 <mem_set>
		s_rx_d[0] = twd >> 1;					// [0]=Target address (== MYADDR)
    2cc2:	6d 2f       	mov	r22, r29
    2cc4:	66 95       	lsr	r22
    2cc6:	60 93 5e 03 	sts	0x035E, r22	; 0x80035e <s_rx_d>
		pos_i = 1;								// Starting of reception
    2cca:	10 93 5a 03 	sts	0x035A, r17	; 0x80035a <pos_i.2649>
		twcr_new |= _BV(TWEA);					// Send ACK
    2cce:	c0 64       	ori	r28, 0x40	; 64
		break;
    2cd0:	00 c1       	rjmp	.+512    	; 0x2ed2 <__vector_24__bottom+0x2d6>

	case TWI_TWSR_S_SLAW_OMNIADDR_RECEIVED:		// GCA received and ACK sent
		nop();
    2cd2:	00 00       	nop
		// fall-through.
	case TWI_TWSR_S_SLAW_OMNIADDR_ARBIT_LOST:
		s_rx_lock = 1;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <s_rx_lock>
		s_rx_d[0] = twd >> 1;					// GCA
    2cda:	6d 2f       	mov	r22, r29
    2cdc:	66 95       	lsr	r22
    2cde:	60 93 5e 03 	sts	0x035E, r22	; 0x80035e <s_rx_d>
		pos_i = 1;								// Starting of reception
    2ce2:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <pos_i.2649>
		twcr_new |= _BV(TWEA);					// Send after next coming data byte ACK
    2ce6:	c0 64       	ori	r28, 0x40	; 64
		break;
    2ce8:	f4 c0       	rjmp	.+488    	; 0x2ed2 <__vector_24__bottom+0x2d6>

	case TWI_TWSR_S_SLAW_MYADDR_DATA_ACK:		// Data after SLA+W received
		nop();
    2cea:	00 00       	nop
		// fall-through.
	case TWI_TWSR_S_SLAW_OMNIADDR_DATA_ACK:
		if (cnt_i != 0b1111) {					// Closed parameter form
    2cec:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <cnt_i.2651>
    2cf0:	8f 30       	cpi	r24, 0x0F	; 15
    2cf2:	09 f4       	brne	.+2      	; 0x2cf6 <__vector_24__bottom+0xfa>
    2cf4:	68 c0       	rjmp	.+208    	; 0x2dc6 <__vector_24__bottom+0x1ca>
			if (pos_i <= 0b1110) {
    2cf6:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <pos_i.2649>
    2cfa:	8f 30       	cpi	r24, 0x0F	; 15
    2cfc:	28 f4       	brcc	.+10     	; 0x2d08 <__vector_24__bottom+0x10c>
				s_rx_d[pos_i] = twd;			// [1]=cmd, [2..]=parameters
    2cfe:	e8 2f       	mov	r30, r24
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	e2 5a       	subi	r30, 0xA2	; 162
    2d04:	fc 4f       	sbci	r31, 0xFC	; 252
    2d06:	d0 83       	st	Z, r29
			}
			if (pos_i == 1) {
    2d08:	81 30       	cpi	r24, 0x01	; 1
    2d0a:	09 f0       	breq	.+2      	; 0x2d0e <__vector_24__bottom+0x112>
    2d0c:	4b c0       	rjmp	.+150    	; 0x2da4 <__vector_24__bottom+0x1a8>
				/* Load receive counter */
				if (s_rx_d[0] == TWI_SLAVE_ADDR_SMARTLCD) {
    2d0e:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <s_rx_d>
    2d12:	90 33       	cpi	r25, 0x30	; 48
    2d14:	49 f4       	brne	.+18     	; 0x2d28 <__vector_24__bottom+0x12c>
					cnt_i = ((s_rx_d[1] >> 5) & 0b111) + 1;	// encoded parameter count
    2d16:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <s_rx_d+0x1>
    2d1a:	92 95       	swap	r25
    2d1c:	96 95       	lsr	r25
    2d1e:	97 70       	andi	r25, 0x07	; 7
    2d20:	9f 5f       	subi	r25, 0xFF	; 255
    2d22:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <cnt_i.2651>
    2d26:	40 c0       	rjmp	.+128    	; 0x2da8 <__vector_24__bottom+0x1ac>

				} else if (s_rx_d[0] == TWI_SLAVE_ADDR_10MHZREFOSC) {
    2d28:	92 32       	cpi	r25, 0x22	; 34
    2d2a:	f1 f5       	brne	.+124    	; 0x2da8 <__vector_24__bottom+0x1ac>
					cnt_i = 0;
    2d2c:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <cnt_i.2651>
					cnt_o = 0;
    2d30:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <cnt_o.2652>

					switch (s_rx_d[1]) {
    2d34:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <s_rx_d+0x1>
    2d38:	94 38       	cpi	r25, 0x84	; 132
    2d3a:	21 f1       	breq	.+72     	; 0x2d84 <__vector_24__bottom+0x188>
    2d3c:	58 f4       	brcc	.+22     	; 0x2d54 <__vector_24__bottom+0x158>
    2d3e:	90 38       	cpi	r25, 0x80	; 128
    2d40:	29 f1       	breq	.+74     	; 0x2d8c <__vector_24__bottom+0x190>
    2d42:	28 f4       	brcc	.+10     	; 0x2d4e <__vector_24__bottom+0x152>
    2d44:	99 23       	and	r25, r25
    2d46:	a1 f0       	breq	.+40     	; 0x2d70 <__vector_24__bottom+0x174>
    2d48:	91 30       	cpi	r25, 0x01	; 1
    2d4a:	b1 f0       	breq	.+44     	; 0x2d78 <__vector_24__bottom+0x17c>
    2d4c:	2b c0       	rjmp	.+86     	; 0x2da4 <__vector_24__bottom+0x1a8>
    2d4e:	92 38       	cpi	r25, 0x82	; 130
    2d50:	09 f5       	brne	.+66     	; 0x2d94 <__vector_24__bottom+0x198>
    2d52:	1c c0       	rjmp	.+56     	; 0x2d8c <__vector_24__bottom+0x190>
    2d54:	9b 38       	cpi	r25, 0x8B	; 139
    2d56:	38 f4       	brcc	.+14     	; 0x2d66 <__vector_24__bottom+0x16a>
    2d58:	99 38       	cpi	r25, 0x89	; 137
    2d5a:	a0 f4       	brcc	.+40     	; 0x2d84 <__vector_24__bottom+0x188>
    2d5c:	95 38       	cpi	r25, 0x85	; 133
    2d5e:	b1 f0       	breq	.+44     	; 0x2d8c <__vector_24__bottom+0x190>
    2d60:	98 38       	cpi	r25, 0x88	; 136
    2d62:	a1 f0       	breq	.+40     	; 0x2d8c <__vector_24__bottom+0x190>
    2d64:	1f c0       	rjmp	.+62     	; 0x2da4 <__vector_24__bottom+0x1a8>
    2d66:	9d 38       	cpi	r25, 0x8D	; 141
    2d68:	c8 f0       	brcs	.+50     	; 0x2d9c <__vector_24__bottom+0x1a0>
    2d6a:	9d 38       	cpi	r25, 0x8D	; 141
    2d6c:	59 f0       	breq	.+22     	; 0x2d84 <__vector_24__bottom+0x188>
    2d6e:	1a c0       	rjmp	.+52     	; 0x2da4 <__vector_24__bottom+0x1a8>
						case TWI_SMART_LCD_CMD_NOOP:
							cnt_i = 1;
    2d70:	91 e0       	ldi	r25, 0x01	; 1
    2d72:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <cnt_i.2651>
							break;
    2d76:	18 c0       	rjmp	.+48     	; 0x2da8 <__vector_24__bottom+0x1ac>

						case TWI_SMART_LCD_CMD_GETVER:
							cnt_i = 1;
    2d78:	91 e0       	ldi	r25, 0x01	; 1
    2d7a:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <cnt_i.2651>
							cnt_o = 1;
    2d7e:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <cnt_o.2652>
							break;
    2d82:	12 c0       	rjmp	.+36     	; 0x2da8 <__vector_24__bottom+0x1ac>

						case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
						case TWI_SMART_LCD_CMD_SHOW_DOP:
						case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
						case TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT:
							cnt_i = 3;
    2d84:	93 e0       	ldi	r25, 0x03	; 3
    2d86:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <cnt_i.2651>
							break;
    2d8a:	0e c0       	rjmp	.+28     	; 0x2da8 <__vector_24__bottom+0x1ac>

						case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
						case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
						case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
						case TWI_SMART_LCD_CMD_SHOW_SATS:
							cnt_i = 4;
    2d8c:	94 e0       	ldi	r25, 0x04	; 4
    2d8e:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <cnt_i.2651>
							break;
    2d92:	0a c0       	rjmp	.+20     	; 0x2da8 <__vector_24__bottom+0x1ac>

						case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
						case TWI_SMART_LCD_CMD_SHOW_PPM:
							cnt_i = 5;
    2d94:	95 e0       	ldi	r25, 0x05	; 5
    2d96:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <cnt_i.2651>
							break;
    2d9a:	06 c0       	rjmp	.+12     	; 0x2da8 <__vector_24__bottom+0x1ac>

						case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
						case TWI_SMART_LCD_CMD_SHOW_POS_LON:
							cnt_i = 6;
    2d9c:	96 e0       	ldi	r25, 0x06	; 6
    2d9e:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <cnt_i.2651>
							break;
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <__vector_24__bottom+0x1ac>
					}
				}
			}

			if (pos_i < 0b1110) {
    2da4:	8e 30       	cpi	r24, 0x0E	; 14
    2da6:	60 f4       	brcc	.+24     	; 0x2dc0 <__vector_24__bottom+0x1c4>
				if (++pos_i <= cnt_i) {
    2da8:	8f 5f       	subi	r24, 0xFF	; 255
    2daa:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <pos_i.2649>
    2dae:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <cnt_i.2651>
    2db2:	98 17       	cp	r25, r24
    2db4:	10 f0       	brcs	.+4      	; 0x2dba <__vector_24__bottom+0x1be>
					twcr_new |= _BV(TWEA);		// Send ACK
    2db6:	c0 64       	ori	r28, 0x40	; 64
    2db8:	8c c0       	rjmp	.+280    	; 0x2ed2 <__vector_24__bottom+0x2d6>
				} else {
					twcr_new &= ~_BV(TWEA);		// Send NACK
    2dba:	c4 2f       	mov	r28, r20
    2dbc:	c5 70       	andi	r28, 0x05	; 5
    2dbe:	89 c0       	rjmp	.+274    	; 0x2ed2 <__vector_24__bottom+0x2d6>
				}
			} else {
				twcr_new &= ~_BV(TWEA);			// Send NACK
    2dc0:	c4 2f       	mov	r28, r20
    2dc2:	c5 70       	andi	r28, 0x05	; 5
    2dc4:	86 c0       	rjmp	.+268    	; 0x2ed2 <__vector_24__bottom+0x2d6>
			}

		} else {								// Open parameter form
			s_rx_d[2] = twd;
    2dc6:	d0 93 60 03 	sts	0x0360, r29	; 0x800360 <s_rx_d+0x2>
			if (!s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i)) {
				twcr_new |= _BV(TWEA);			// Send ACK
			} else {
				pos_i = 0;
    2dca:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <pos_i.2649>
				twcr_new &= ~_BV(TWEA);			// Send NACK
    2dce:	c4 2f       	mov	r28, r20
    2dd0:	c5 70       	andi	r28, 0x05	; 5
    2dd2:	7f c0       	rjmp	.+254    	; 0x2ed2 <__vector_24__bottom+0x2d6>
			}
		}
		break;

	case TWI_TWSR_S_SLAW_MYADDR_DATA_NACK:		// NACK after last data byte sent
		nop();
    2dd4:	00 00       	nop
		// fall-through.
	case TWI_TWSR_S_SLAW_OMNIADDR_DATA_NACK:
		s_rx_lock = 0;
    2dd6:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <s_rx_lock>
		if (cnt_i != 0b1111) {
    2dda:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <cnt_i.2651>
    2dde:	8f 30       	cpi	r24, 0x0F	; 15
    2de0:	29 f0       	breq	.+10     	; 0x2dec <__vector_24__bottom+0x1f0>
			s_isr_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    2de2:	60 91 5a 03 	lds	r22, 0x035A	; 0x80035a <pos_i.2649>
    2de6:	8e e5       	ldi	r24, 0x5E	; 94
    2de8:	93 e0       	ldi	r25, 0x03	; 3
    2dea:	5c de       	rcall	.-840    	; 0x2aa4 <s_isr_twi_rcvd_command_closed_form>
		} else {
			s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    2dec:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <pos_i.2649>
		cnt_i = 0;
    2df0:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <cnt_i.2651>
		mem_set(s_rx_d, 8, 0x00);
    2df4:	40 e0       	ldi	r20, 0x00	; 0
    2df6:	68 e0       	ldi	r22, 0x08	; 8
    2df8:	8e e5       	ldi	r24, 0x5E	; 94
    2dfa:	93 e0       	ldi	r25, 0x03	; 3
    2dfc:	b9 d0       	rcall	.+370    	; 0x2f70 <mem_set>
		s_rx_lock = 0;
    2dfe:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <s_rx_lock>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    2e02:	c0 64       	ori	r28, 0x40	; 64
		break;
    2e04:	66 c0       	rjmp	.+204    	; 0x2ed2 <__vector_24__bottom+0x2d6>

	case TWI_TWSR_S_SLAW_STOP_REPEATEDSTART_RECEIVED:	// STOP or RESTART received while still addressed as slave
		s_rx_lock = 0;
    2e06:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <s_rx_lock>
		if (cnt_i != 0b1111) {
    2e0a:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <cnt_i.2651>
    2e0e:	8f 30       	cpi	r24, 0x0F	; 15
    2e10:	29 f0       	breq	.+10     	; 0x2e1c <__vector_24__bottom+0x220>
			s_isr_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    2e12:	60 91 5a 03 	lds	r22, 0x035A	; 0x80035a <pos_i.2649>
    2e16:	8e e5       	ldi	r24, 0x5E	; 94
    2e18:	93 e0       	ldi	r25, 0x03	; 3
    2e1a:	44 de       	rcall	.-888    	; 0x2aa4 <s_isr_twi_rcvd_command_closed_form>
		} else {
			s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    2e1c:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <pos_i.2649>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    2e20:	c0 64       	ori	r28, 0x40	; 64
		break;
    2e22:	57 c0       	rjmp	.+174    	; 0x2ed2 <__vector_24__bottom+0x2d6>


	/* Slave Transmitter Mode */

	case TWI_TWSR_S_SLAR_MYADDR_DATA_ACK:		// SLA+R received and ACK has been returned
		nop();
    2e24:	00 00       	nop
		// fall-through.
	case TWI_TWSR_S_SLAR_MYADDR_ARBIT_LOST:
		s_rx_lock = 1;
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <s_rx_lock>
		pos_o = 0;
    2e2c:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <pos_o.2650>
		TWDR = cnt_o > pos_o ?  s_rx_d[pos_o++] : 0;
    2e30:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <cnt_o.2652>
    2e34:	88 23       	and	r24, r24
    2e36:	31 f0       	breq	.+12     	; 0x2e44 <__vector_24__bottom+0x248>
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <pos_o.2650>
    2e3e:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <s_rx_d>
    2e42:	01 c0       	rjmp	.+2      	; 0x2e46 <__vector_24__bottom+0x24a>
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		if (cnt_o > pos_o) {
    2e4a:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <cnt_o.2652>
    2e4e:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <pos_o.2650>
    2e52:	89 17       	cp	r24, r25
    2e54:	10 f4       	brcc	.+4      	; 0x2e5a <__vector_24__bottom+0x25e>
			twcr_new |= _BV(TWEA);				// More data to send ACK
    2e56:	c0 64       	ori	r28, 0x40	; 64
    2e58:	3c c0       	rjmp	.+120    	; 0x2ed2 <__vector_24__bottom+0x2d6>
		} else {
			twcr_new &= ~_BV(TWEA);				// No more data to send NACK
    2e5a:	c4 2f       	mov	r28, r20
    2e5c:	c5 70       	andi	r28, 0x05	; 5
    2e5e:	39 c0       	rjmp	.+114    	; 0x2ed2 <__vector_24__bottom+0x2d6>
		}
		break;

	case TWI_TWSR_S_SLAR_OMNIADDR_DATA_ACK:		// Data sent and ACK has been returned
		TWDR = cnt_o > pos_o ?  s_rx_d[pos_o++] : 0;
    2e60:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <pos_o.2650>
    2e64:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <cnt_o.2652>
    2e68:	e8 17       	cp	r30, r24
    2e6a:	48 f4       	brcc	.+18     	; 0x2e7e <__vector_24__bottom+0x282>
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	8e 0f       	add	r24, r30
    2e70:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <pos_o.2650>
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	e2 5a       	subi	r30, 0xA2	; 162
    2e78:	fc 4f       	sbci	r31, 0xFC	; 252
    2e7a:	80 81       	ld	r24, Z
    2e7c:	01 c0       	rjmp	.+2      	; 0x2e80 <__vector_24__bottom+0x284>
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		if (cnt_o > pos_o) {
    2e84:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <cnt_o.2652>
    2e88:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <pos_o.2650>
    2e8c:	89 17       	cp	r24, r25
    2e8e:	10 f4       	brcc	.+4      	; 0x2e94 <__vector_24__bottom+0x298>
			twcr_new |= _BV(TWEA);				// More data to send ACK
    2e90:	c0 64       	ori	r28, 0x40	; 64
    2e92:	1f c0       	rjmp	.+62     	; 0x2ed2 <__vector_24__bottom+0x2d6>
		} else {
			twcr_new &= ~_BV(TWEA);				// No more data to send NACK
    2e94:	c4 2f       	mov	r28, r20
    2e96:	c5 70       	andi	r28, 0x05	; 5
    2e98:	1c c0       	rjmp	.+56     	; 0x2ed2 <__vector_24__bottom+0x2d6>
		}
		break;

	case TWI_TWSR_S_SLAR_OMNIADDR_DATA_NACK:	// Data sent and NACK has been returned
		s_rx_lock = 0;
    2e9a:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <s_rx_lock>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    2e9e:	c0 64       	ori	r28, 0x40	; 64
		break;
    2ea0:	18 c0       	rjmp	.+48     	; 0x2ed2 <__vector_24__bottom+0x2d6>

	case TWI_TWSR_S_SLAR_MYADDR_LASTDATA_ACK:	// Last data sent and ACK has been returned
		/* message transmitted successfully in slave mode */
		s_rx_lock = 0;
    2ea2:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <s_rx_lock>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    2ea6:	c0 64       	ori	r28, 0x40	; 64
		break;
    2ea8:	14 c0       	rjmp	.+40     	; 0x2ed2 <__vector_24__bottom+0x2d6>

	case TWI_TWSR_BUS_ERROR_STARTSTOP:
		nop();
    2eaa:	00 00       	nop
		s_tx_lock = 0;
    2eac:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <s_tx_lock>
		s_rx_lock = 0;
    2eb0:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <s_rx_lock>
		twcr_new |= _BV(TWSTO) | _BV(TWEA);		// TWI goes to unaddressed, be active again
    2eb4:	c0 65       	ori	r28, 0x50	; 80
		break;
    2eb6:	0d c0       	rjmp	.+26     	; 0x2ed2 <__vector_24__bottom+0x2d6>

	case TWI_TWSR_BUS_ERROR_UNKNOWN:
		nop();
    2eb8:	00 00       	nop
		s_tx_lock = 0;
    2eba:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <s_tx_lock>
		s_rx_lock = 0;
    2ebe:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <s_rx_lock>
		twcr_new |= _BV(TWSTO) | _BV(TWEA);		// TWI goes to unaddressed, be active again
    2ec2:	c0 65       	ori	r28, 0x50	; 80
		break;
    2ec4:	06 c0       	rjmp	.+12     	; 0x2ed2 <__vector_24__bottom+0x2d6>

	default:
		nop();
    2ec6:	00 00       	nop
		s_tx_lock = 0;
    2ec8:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <s_tx_lock>
		s_rx_lock = 0;
    2ecc:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <s_rx_lock>
		twcr_new |= _BV(TWSTO) | _BV(TWEA);		// TWI goes to unaddressed, be active again
    2ed0:	c0 65       	ori	r28, 0x50	; 80
	}

	return twcr_new;
}
    2ed2:	8c 2f       	mov	r24, r28
    2ed4:	df 91       	pop	r29
    2ed6:	cf 91       	pop	r28
    2ed8:	1f 91       	pop	r17
    2eda:	0f 91       	pop	r16
    2edc:	08 95       	ret

00002ede <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    2ede:	08 95       	ret

00002ee0 <get_abs_time>:
/* MAIN section */

void halt(void)
{
	/* MAIN Loop Shutdown */
	runmode = 0;
    2ee0:	8f 92       	push	r8
    2ee2:	9f 92       	push	r9
    2ee4:	af 92       	push	r10
    2ee6:	bf 92       	push	r11
    2ee8:	cf 92       	push	r12
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	1f 92       	push	r1
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	8f b7       	in	r24, 0x3f	; 63
    2efc:	89 83       	std	Y+1, r24	; 0x01
    2efe:	f8 94       	cli
    2f00:	99 81       	ldd	r25, Y+1	; 0x01
    2f02:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2f06:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2f0a:	c0 90 c2 03 	lds	r12, 0x03C2	; 0x8003c2 <g_timer_abs_msb>
    2f0e:	d0 90 c3 03 	lds	r13, 0x03C3	; 0x8003c3 <g_timer_abs_msb+0x1>
    2f12:	e0 90 c4 03 	lds	r14, 0x03C4	; 0x8003c4 <g_timer_abs_msb+0x2>
    2f16:	f0 90 c5 03 	lds	r15, 0x03C5	; 0x8003c5 <g_timer_abs_msb+0x3>
    2f1a:	9f bf       	out	0x3f, r25	; 63
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	92 2b       	or	r25, r18
    2f20:	bc 01       	movw	r22, r24
    2f22:	99 0f       	add	r25, r25
    2f24:	88 0b       	sbc	r24, r24
    2f26:	99 0b       	sbc	r25, r25
    2f28:	82 d3       	rcall	.+1796   	; 0x362e <__floatsisf>
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	34 e2       	ldi	r19, 0x24	; 36
    2f2e:	44 ef       	ldi	r20, 0xF4	; 244
    2f30:	5a e4       	ldi	r21, 0x4A	; 74
    2f32:	e2 d2       	rcall	.+1476   	; 0x34f8 <__divsf3>
    2f34:	4b 01       	movw	r8, r22
    2f36:	5c 01       	movw	r10, r24
    2f38:	c7 01       	movw	r24, r14
    2f3a:	b6 01       	movw	r22, r12
    2f3c:	76 d3       	rcall	.+1772   	; 0x362a <__floatunsisf>
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	40 e0       	ldi	r20, 0x00	; 0
    2f44:	54 e4       	ldi	r21, 0x44	; 68
    2f46:	27 d4       	rcall	.+2126   	; 0x3796 <__mulsf3>
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	34 e2       	ldi	r19, 0x24	; 36
    2f4c:	44 ef       	ldi	r20, 0xF4	; 244
    2f4e:	5a e4       	ldi	r21, 0x4A	; 74
    2f50:	d3 d2       	rcall	.+1446   	; 0x34f8 <__divsf3>
    2f52:	a5 01       	movw	r20, r10
    2f54:	94 01       	movw	r18, r8
    2f56:	68 d2       	rcall	.+1232   	; 0x3428 <__addsf3>
    2f58:	0f 90       	pop	r0
    2f5a:	df 91       	pop	r29
    2f5c:	cf 91       	pop	r28
    2f5e:	ff 90       	pop	r15
    2f60:	ef 90       	pop	r14
    2f62:	df 90       	pop	r13
    2f64:	cf 90       	pop	r12
    2f66:	bf 90       	pop	r11
    2f68:	af 90       	pop	r10
    2f6a:	9f 90       	pop	r9
    2f6c:	8f 90       	pop	r8
    2f6e:	08 95       	ret

00002f70 <mem_set>:
    2f70:	66 23       	and	r22, r22
    2f72:	39 f0       	breq	.+14     	; 0x2f82 <mem_set+0x12>
    2f74:	fc 01       	movw	r30, r24
    2f76:	86 0f       	add	r24, r22
    2f78:	91 1d       	adc	r25, r1
    2f7a:	41 93       	st	Z+, r20
    2f7c:	e8 17       	cp	r30, r24
    2f7e:	f9 07       	cpc	r31, r25
    2f80:	e1 f7       	brne	.-8      	; 0x2f7a <mem_set+0xa>
    2f82:	08 95       	ret

00002f84 <s_task>:
    2f84:	2f 92       	push	r2
    2f86:	3f 92       	push	r3
    2f88:	4f 92       	push	r4
    2f8a:	5f 92       	push	r5
    2f8c:	6f 92       	push	r6
    2f8e:	7f 92       	push	r7
    2f90:	8f 92       	push	r8
    2f92:	9f 92       	push	r9
    2f94:	af 92       	push	r10
    2f96:	bf 92       	push	r11
    2f98:	cf 92       	push	r12
    2f9a:	df 92       	push	r13
    2f9c:	ef 92       	push	r14
    2f9e:	ff 92       	push	r15
    2fa0:	0f 93       	push	r16
    2fa2:	1f 93       	push	r17
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	cd b7       	in	r28, 0x3d	; 61
    2faa:	de b7       	in	r29, 0x3e	; 62
    2fac:	ab 97       	sbiw	r28, 0x2b	; 43
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	10 e0       	ldi	r17, 0x00	; 0
    2fba:	0f 2e       	mov	r0, r31
    2fbc:	f0 eb       	ldi	r31, 0xB0	; 176
    2fbe:	ef 2e       	mov	r14, r31
    2fc0:	f1 2c       	mov	r15, r1
    2fc2:	f0 2d       	mov	r31, r0
    2fc4:	68 94       	set
    2fc6:	22 24       	eor	r2, r2
    2fc8:	24 f8       	bld	r2, 4
    2fca:	0f 2e       	mov	r0, r31
    2fcc:	f2 e7       	ldi	r31, 0x72	; 114
    2fce:	cf 2e       	mov	r12, r31
    2fd0:	f3 e0       	ldi	r31, 0x03	; 3
    2fd2:	df 2e       	mov	r13, r31
    2fd4:	f0 2d       	mov	r31, r0
    2fd6:	0f 2e       	mov	r0, r31
    2fd8:	f8 e2       	ldi	r31, 0x28	; 40
    2fda:	3f 2e       	mov	r3, r31
    2fdc:	f0 2d       	mov	r31, r0
    2fde:	8f b7       	in	r24, 0x3f	; 63
    2fe0:	8b a7       	std	Y+43, r24	; 0x2b
    2fe2:	f8 94       	cli
    2fe4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fe6:	40 90 bd 03 	lds	r4, 0x03BD	; 0x8003bd <g_adc_ldr>
    2fea:	50 90 be 03 	lds	r5, 0x03BE	; 0x8003be <g_adc_ldr+0x1>
    2fee:	60 90 bf 03 	lds	r6, 0x03BF	; 0x8003bf <g_adc_ldr+0x2>
    2ff2:	70 90 c0 03 	lds	r7, 0x03C0	; 0x8003c0 <g_adc_ldr+0x3>
    2ff6:	80 90 b9 03 	lds	r8, 0x03B9	; 0x8003b9 <g_adc_temp>
    2ffa:	90 90 ba 03 	lds	r9, 0x03BA	; 0x8003ba <g_adc_temp+0x1>
    2ffe:	a0 90 bb 03 	lds	r10, 0x03BB	; 0x8003bb <g_adc_temp+0x2>
    3002:	b0 90 bc 03 	lds	r11, 0x03BC	; 0x8003bc <g_adc_temp+0x3>
    3006:	8f bf       	out	0x3f, r24	; 63
    3008:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <g_status>
    300c:	81 ff       	sbrs	r24, 1
    300e:	03 c0       	rjmp	.+6      	; 0x3016 <s_task+0x92>
    3010:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <lcd_show_new_data>
    3014:	18 2f       	mov	r17, r24
    3016:	c3 01       	movw	r24, r6
    3018:	b2 01       	movw	r22, r4
    301a:	db d2       	rcall	.+1462   	; 0x35d2 <__fixunssfsi>
    301c:	2b 01       	movw	r4, r22
    301e:	3c 01       	movw	r6, r24
    3020:	86 eb       	ldi	r24, 0xB6	; 182
    3022:	48 16       	cp	r4, r24
    3024:	83 e0       	ldi	r24, 0x03	; 3
    3026:	58 06       	cpc	r5, r24
    3028:	08 f5       	brcc	.+66     	; 0x306c <s_task+0xe8>
    302a:	b2 01       	movw	r22, r4
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	fc d2       	rcall	.+1528   	; 0x362a <__floatunsisf>
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e2       	ldi	r20, 0x20	; 32
    3038:	51 e4       	ldi	r21, 0x41	; 65
    303a:	f5 d1       	rcall	.+1002   	; 0x3426 <__subsf3>
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e8       	ldi	r19, 0x80	; 128
    3040:	4d e6       	ldi	r20, 0x6D	; 109
    3042:	54 e4       	ldi	r21, 0x44	; 68
    3044:	59 d2       	rcall	.+1202   	; 0x34f8 <__divsf3>
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	45 e7       	ldi	r20, 0x75	; 117
    304c:	53 e4       	ldi	r21, 0x43	; 67
    304e:	a3 d3       	rcall	.+1862   	; 0x3796 <__mulsf3>
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e2       	ldi	r20, 0x20	; 32
    3056:	51 e4       	ldi	r21, 0x41	; 65
    3058:	e7 d1       	rcall	.+974    	; 0x3428 <__addsf3>
    305a:	bb d2       	rcall	.+1398   	; 0x35d2 <__fixunssfsi>
    305c:	a3 eb       	ldi	r26, 0xB3	; 179
    305e:	b0 e0       	ldi	r27, 0x00	; 0
    3060:	6c 93       	st	X, r22
    3062:	f7 01       	movw	r30, r14
    3064:	80 81       	ld	r24, Z
    3066:	80 68       	ori	r24, 0x80	; 128
    3068:	80 83       	st	Z, r24
    306a:	07 c0       	rjmp	.+14     	; 0x307a <s_task+0xf6>
    306c:	a3 eb       	ldi	r26, 0xB3	; 179
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	1c 92       	st	X, r1
    3072:	f7 01       	movw	r30, r14
    3074:	80 81       	ld	r24, Z
    3076:	8f 73       	andi	r24, 0x3F	; 63
    3078:	80 83       	st	Z, r24
    307a:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <g_status>
    307e:	80 ff       	sbrs	r24, 0
    3080:	17 c0       	rjmp	.+46     	; 0x30b0 <s_task+0x12c>
    3082:	5f 92       	push	r5
    3084:	4f 92       	push	r4
    3086:	a4 e6       	ldi	r26, 0x64	; 100
    3088:	b2 e0       	ldi	r27, 0x02	; 2
    308a:	bf 93       	push	r27
    308c:	af 93       	push	r26
    308e:	1f 92       	push	r1
    3090:	2f 92       	push	r2
    3092:	df 92       	push	r13
    3094:	cf 92       	push	r12
    3096:	1e d4       	rcall	.+2108   	; 0x38d4 <snprintf>
    3098:	cf dc       	rcall	.-1634   	; 0x2a38 <lcd_get_sysfont>
    309a:	9c 01       	movw	r18, r24
    309c:	4f e5       	ldi	r20, 0x5F	; 95
    309e:	60 ea       	ldi	r22, 0xA0	; 160
    30a0:	c6 01       	movw	r24, r12
    30a2:	0e 94 e5 07 	call	0xfca	; 0xfca <gfx_mono_draw_string>
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	8f b7       	in	r24, 0x3f	; 63
    30b2:	8a a7       	std	Y+42, r24	; 0x2a
    30b4:	f8 94       	cli
    30b6:	8a a5       	ldd	r24, Y+42	; 0x2a
    30b8:	8f bf       	out	0x3f, r24	; 63
    30ba:	11 11       	cpse	r17, r1
    30bc:	1e c0       	rjmp	.+60     	; 0x30fa <s_task+0x176>
    30be:	8f b7       	in	r24, 0x3f	; 63
    30c0:	89 a7       	std	Y+41, r24	; 0x29
    30c2:	f8 94       	cli
    30c4:	79 a4       	ldd	r7, Y+41	; 0x29
    30c6:	29 e1       	ldi	r18, 0x19	; 25
    30c8:	37 ec       	ldi	r19, 0xC7	; 199
    30ca:	4f ea       	ldi	r20, 0xAF	; 175
    30cc:	53 e4       	ldi	r21, 0x43	; 67
    30ce:	c5 01       	movw	r24, r10
    30d0:	b4 01       	movw	r22, r8
    30d2:	a9 d1       	rcall	.+850    	; 0x3426 <__subsf3>
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 ea       	ldi	r19, 0xA0	; 160
    30d8:	47 e8       	ldi	r20, 0x87	; 135
    30da:	5f e3       	ldi	r21, 0x3F	; 63
    30dc:	5c d3       	rcall	.+1720   	; 0x3796 <__mulsf3>
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	48 ec       	ldi	r20, 0xC8	; 200
    30e4:	51 e4       	ldi	r21, 0x41	; 65
    30e6:	a0 d1       	rcall	.+832    	; 0x3428 <__addsf3>
    30e8:	60 93 b5 03 	sts	0x03B5, r22	; 0x8003b5 <g_temp>
    30ec:	70 93 b6 03 	sts	0x03B6, r23	; 0x8003b6 <g_temp+0x1>
    30f0:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <g_temp+0x2>
    30f4:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <g_temp+0x3>
    30f8:	7f be       	out	0x3f, r7	; 63
    30fa:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <g_status>
    30fe:	80 ff       	sbrs	r24, 0
    3100:	02 c0       	rjmp	.+4      	; 0x3106 <s_task+0x182>
    3102:	a0 d9       	rcall	.-3264   	; 0x2444 <lcd_animation_loop>
    3104:	25 c0       	rjmp	.+74     	; 0x3150 <s_task+0x1cc>
    3106:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <s_last_animation.3049>
    310a:	88 23       	and	r24, r24
    310c:	09 f1       	breq	.+66     	; 0x3150 <s_task+0x1cc>
    310e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <s_last_animation.3049>
    3112:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <lcd_cls>
    3116:	01 e0       	ldi	r16, 0x01	; 1
    3118:	20 e8       	ldi	r18, 0x80	; 128
    311a:	40 ef       	ldi	r20, 0xF0	; 240
    311c:	60 e0       	ldi	r22, 0x00	; 0
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	0e 94 63 05 	call	0xac6	; 0xac6 <gfx_mono_generic_draw_rect>
    3124:	ef e6       	ldi	r30, 0x6F	; 111
    3126:	f2 e0       	ldi	r31, 0x02	; 2
    3128:	de 01       	movw	r26, r28
    312a:	11 96       	adiw	r26, 0x01	; 1
    312c:	83 2d       	mov	r24, r3
    312e:	01 90       	ld	r0, Z+
    3130:	0d 92       	st	X+, r0
    3132:	8a 95       	dec	r24
    3134:	e1 f7       	brne	.-8      	; 0x312e <s_task+0x1aa>
    3136:	80 dc       	rcall	.-1792   	; 0x2a38 <lcd_get_sysfont>
    3138:	9c 01       	movw	r18, r24
    313a:	42 e0       	ldi	r20, 0x02	; 2
    313c:	63 e0       	ldi	r22, 0x03	; 3
    313e:	ce 01       	movw	r24, r28
    3140:	01 96       	adiw	r24, 0x01	; 1
    3142:	0e 94 e5 07 	call	0xfca	; 0xfca <gfx_mono_draw_string>
    3146:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <g_status>
    314a:	82 60       	ori	r24, 0x02	; 2
    314c:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <g_status>
    3150:	11 11       	cpse	r17, r1
    3152:	45 cf       	rjmp	.-374    	; 0x2fde <s_task+0x5a>
    3154:	ab 96       	adiw	r28, 0x2b	; 43
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	1f 91       	pop	r17
    3166:	0f 91       	pop	r16
    3168:	ff 90       	pop	r15
    316a:	ef 90       	pop	r14
    316c:	df 90       	pop	r13
    316e:	cf 90       	pop	r12
    3170:	bf 90       	pop	r11
    3172:	af 90       	pop	r10
    3174:	9f 90       	pop	r9
    3176:	8f 90       	pop	r8
    3178:	7f 90       	pop	r7
    317a:	6f 90       	pop	r6
    317c:	5f 90       	pop	r5
    317e:	4f 90       	pop	r4
    3180:	3f 90       	pop	r3
    3182:	2f 90       	pop	r2
    3184:	08 95       	ret

00003186 <main>:
}

int main (void)
{
    3186:	ef 92       	push	r14
    3188:	ff 92       	push	r15
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	00 d0       	rcall	.+0      	; 0x3194 <main+0xe>
    3194:	00 d0       	rcall	.+0      	; 0x3196 <main+0x10>
    3196:	1f 92       	push	r1
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts,
	 * most critical pins are handled first.
	 */

	PORTC = 0b01111110;		// PC0: LDR-ADC in-NoPU, PC1: SW_I in-PU, PC2: SW_Q in-PU, PC3: LCD-CS out-HI
    319c:	8e e7       	ldi	r24, 0x7E	; 126
    319e:	88 b9       	out	0x08, r24	; 8
	DDRC  = 0b00001000;		// PC4: I2C-SDA in-PU-AF-TWI, PC5: I2C-SCL in-PU-AF-TWI, PC6: RESET in-PU, PC7: -
    31a0:	88 e0       	ldi	r24, 0x08	; 8
    31a2:	87 b9       	out	0x07, r24	; 7

	PORTB = 0b00010100;		// PB0: LCD-CD out-LO, PB1: AUDIO out-AF-OC1A, PB2: SW_P in-PU, PB3: LCDBL out-AF-OC2A,
    31a4:	84 e1       	ldi	r24, 0x14	; 20
    31a6:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0b11111011;		// PB4: LCD-R/!W out-HI, PB5: LCD-EN out-LO, PB6: LEDRD out-LO, LEDGN out-LO
    31a8:	8b ef       	ldi	r24, 0xFB	; 251
    31aa:	84 b9       	out	0x04, r24	; 4

	PORTD = 0xff;			// PD0..PD7: LCD-D0..LCD-D7 in-PU
    31ac:	8f ef       	ldi	r24, 0xFF	; 255
    31ae:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x00;
    31b0:	1a b8       	out	0x0a, r1	; 10

	// Analog input: Digital Disable Register
	DIDR0 = 0b00000001;		// PC0: LDR-ADC
    31b2:	0f 2e       	mov	r0, r31
    31b4:	fe e7       	ldi	r31, 0x7E	; 126
    31b6:	ef 2e       	mov	r14, r31
    31b8:	f1 2c       	mov	r15, r1
    31ba:	f0 2d       	mov	r31, r0
    31bc:	11 e0       	ldi	r17, 0x01	; 1
    31be:	f7 01       	movw	r30, r14
    31c0:	10 83       	st	Z, r17

	/* Rapid I/O settings */
	s_io_preinit();

	/* Init of sub-modules */
	sysclk_init();	PRR = 0b11101011;			// For debugging this module has to be powered on, again
    31c2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <sysclk_init>
    31c6:	8b ee       	ldi	r24, 0xEB	; 235
    31c8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
static void s_tc_init(void)
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts. */

	/* Timer Synchronous Mode - prepare for  s_tc_start(void) */
	GTCCR = _BV(TSM)							// Timer Synchronous Mode active
    31cc:	03 e8       	ldi	r16, 0x83	; 131
    31ce:	03 bd       	out	0x23, r16	; 35
	{
	}

	/* TC1 - OC1A: Audio output @ 16-bit counter PWM, used: 9-bit resolution - overflows with 15625 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    31d0:	68 e0       	ldi	r22, 0x08	; 8
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <sysclk_enable_module>

		TCCR1A  = (0b10  << COM1A0)		 		// HI --> LO when compare value is reached - non-inverted PWM mode
    31d8:	82 e8       	ldi	r24, 0x82	; 130
    31da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				| (0b10  << WGM10);				// WGM: 0b0110 = Fast PWM 9 bit

		TCCR1B  = ( 0b01 << WGM12)
    31de:	89 e0       	ldi	r24, 0x09	; 9
    31e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
				| (0b001 << CS10);				// CLKio DIV1 = 8 MHz

		TCNT1H  = 0b00000000           ;		// Clear current value for synchronous start (when restarting without reset)
    31e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		barrier();
		TCNT1L	=            0b00000000;
    31e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

		OCR1AH  =        0b0           ;		// Mid-range compare value for zero audio output
    31ec:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL  =            0b10000000;
    31f0:	80 e8       	ldi	r24, 0x80	; 128
    31f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

		TIMSK1  = _BV(TOIE1);					// TOIE1 interrupt
    31f6:	10 93 6f 00 	sts	0x006F, r17	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		TIFR1   = 0b00100111;					// Clear all flags (when restarting without reset)
    31fa:	87 e2       	ldi	r24, 0x27	; 39
    31fc:	86 bb       	out	0x16, r24	; 22
	}

	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    31fe:	60 e4       	ldi	r22, 0x40	; 64
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	0e 94 f5 03 	call	0x7ea	; 0x7ea <sysclk_enable_module>

		TCCR2A  = (0b10  << COM2A0)				// HI --> LO when compare value is reached - non-inverted PWM mode
    3206:	00 93 b0 00 	sts	0x00B0, r16	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				| (0b11  << WGM20);				// WGM: 0b011 = Fast PWM mode 8 bit

		TCCR2B  = ( 0b0  << WGM22)
    320a:	85 e0       	ldi	r24, 0x05	; 5
    320c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
				| (0b101 << CS20);				// CLKio DIV 128 = 62500 Hz --> / 2**8 = 244 Hz looping rate

		TCNT2   = 0;							// Clear current value for synchronous start (when restarting without reset)
    3210:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

		OCR2A   = 0x00;							// LCD backlight dimmed down
    3214:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

		TIMSK2  = 0b00000001;					// TOIE2: overflow interrupt
    3218:	10 93 70 00 	sts	0x0070, r17	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		TIFR2   = 0b00000111;					// Clear all flags
    321c:	87 e0       	ldi	r24, 0x07	; 7
    321e:	87 bb       	out	0x17, r24	; 23

		ASSR    = 0;							// No async. TOSC1 mode
    3220:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
}


static void s_adc_init(void)
{
	sysclk_enable_module(POWER_RED_REG0, PRADC_bm);	// enable ADC sub-module
    3224:	61 e0       	ldi	r22, 0x01	; 1
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	0e 94 f5 03 	call	0x7ea	; 0x7ea <sysclk_enable_module>
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    322c:	f7 01       	movw	r30, r14
    322e:	10 83       	st	Z, r17
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    3230:	ea e7       	ldi	r30, 0x7A	; 122
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	87 e8       	ldi	r24, 0x87	; 135
    3236:	80 83       	st	Z, r24
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    3238:	80 ec       	ldi	r24, 0xC0	; 192
    323a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	adc_disable_digital_inputs(_BV(ADC0D));		// disable the digital input on the ADC0 port

	adc_init(ADC_PRESCALER_DIV128);
	adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);

	ADCSRA |= _BV(ADIF);						// clear interrupt status bit by setting it to clear
    323e:	80 81       	ld	r24, Z
    3240:	80 61       	ori	r24, 0x10	; 16
    3242:	80 83       	st	Z, r24
}

/*  \brief Enable ADC interrupt */
static inline void adc_enable_interrupt(void)
{
	ADCSRA |= (1 << ADIE);
    3244:	80 81       	ld	r24, Z
    3246:	88 60       	ori	r24, 0x08	; 8
    3248:	80 83       	st	Z, r24
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    324a:	ab e7       	ldi	r26, 0x7B	; 123
    324c:	b0 e0       	ldi	r27, 0x00	; 0
    324e:	8c 91       	ld	r24, X
    3250:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
    3252:	86 60       	ori	r24, 0x06	; 6
	ADC_ADTS_REG = temp;
    3254:	8c 93       	st	X, r24
}

/*  \brief Enable ADC Auto Trigger */
static inline void adc_enable_autotrigger(void)
{
	ADCSRA |= (1 << ADATE);
    3256:	80 81       	ld	r24, Z
    3258:	80 62       	ori	r24, 0x20	; 32
    325a:	80 83       	st	Z, r24
	ioport_init();
	s_tc_init();
	s_adc_init();

	/* I/O pins go active here */
	board_init();
    325c:	40 de       	rcall	.-896    	; 0x2ede <board_init>
//@}
static inline reset_cause_t reset_cause_get_causes(void)
{
#if (MEGA_XX4 ||MEGA_XX4_A || MEGA_XX8 || MEGA_XX8_A || \
	MEGA_XX || MEGA_XX_UN2 || MEGA_XX0_1 || MEGA_RF || MEGA_UNCATEGORIZED) && !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t temp_mcsr = MCUSR ;
    325e:	84 b7       	in	r24, 0x34	; 52
    3260:	98 2f       	mov	r25, r24
    3262:	97 70       	andi	r25, 0x07	; 7

	reset_cause_t rc = reset_cause_get_causes();
	if (rc & CHIP_RESET_CAUSE_EXTRST	||
		rc & CHIP_RESET_CAUSE_BOD_CPU	||
    3264:	11 f4       	brne	.+4      	; 0x326a <main+0xe4>
		rc & CHIP_RESET_CAUSE_POR		||
    3266:	81 11       	cpse	r24, r1
    3268:	2e c0       	rjmp	.+92     	; 0x32c6 <main+0x140>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    326a:	8f b7       	in	r24, 0x3f	; 63
    326c:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    326e:	f8 94       	cli
	return flags;
    3270:	9d 81       	ldd	r25, Y+5	; 0x05
/* HELPERS */

static void s_reset_global_vars(void)
{
	irqflags_t flags	= cpu_irq_save();
	cpu_irq_disable();
    3272:	f8 94       	cli

	g_adc_state			= ADC_STATE_PRE_LDR;
    3274:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <g_adc_state>
	g_adc_ldr			= 0.f;
    3278:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <g_adc_ldr>
    327c:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <g_adc_ldr+0x1>
    3280:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <g_adc_ldr+0x2>
    3284:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <g_adc_ldr+0x3>
	g_adc_temp			= 0.f;
    3288:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <g_adc_temp>
    328c:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <g_adc_temp+0x1>
    3290:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <g_adc_temp+0x2>
    3294:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <g_adc_temp+0x3>

	g_temp				= 25.f;
    3298:	40 e0       	ldi	r20, 0x00	; 0
    329a:	50 e0       	ldi	r21, 0x00	; 0
    329c:	68 ec       	ldi	r22, 0xC8	; 200
    329e:	71 e4       	ldi	r23, 0x41	; 65
    32a0:	40 93 b5 03 	sts	0x03B5, r20	; 0x8003b5 <g_temp>
    32a4:	50 93 b6 03 	sts	0x03B6, r21	; 0x8003b6 <g_temp+0x1>
    32a8:	60 93 b7 03 	sts	0x03B7, r22	; 0x8003b7 <g_temp+0x2>
    32ac:	70 93 b8 03 	sts	0x03B8, r23	; 0x8003b8 <g_temp+0x3>
	g_lcdbl_dimmer		= 64;
    32b0:	80 e4       	ldi	r24, 0x40	; 64
    32b2:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <g_lcdbl_dimmer>

	g_status.doAnimation = false;
    32b6:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <g_status>
	g_status.isAnimationStopped = false;
    32ba:	8e 7f       	andi	r24, 0xFE	; 254
    32bc:	8d 7f       	andi	r24, 0xFD	; 253
    32be:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <g_status>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    32c2:	9f bf       	out	0x3f, r25	; 63
    32c4:	0d c0       	rjmp	.+26     	; 0x32e0 <main+0x15a>
		rc & CHIP_RESET_CAUSE_POR		||
		!rc) {
		s_reset_global_vars();
	} else {
		/* DEBUG */
		g_u32_DEBUG21 = rc;
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	a0 e0       	ldi	r26, 0x00	; 0
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <g_u32_DEBUG21>
    32d0:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <g_u32_DEBUG21+0x1>
    32d4:	a0 93 85 03 	sts	0x0385, r26	; 0x800385 <g_u32_DEBUG21+0x2>
    32d8:	b0 93 86 03 	sts	0x0386, r27	; 0x800386 <g_u32_DEBUG21+0x3>
		asm_break();
    32dc:	0e 94 0e 08 	call	0x101c	; 0x101c <asm_break>
	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
}

static void s_twi_init(uint8_t twi_addr, uint8_t twi_addr_bm)
{
	sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    32e0:	60 e8       	ldi	r22, 0x80	; 128
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <sysclk_enable_module>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    32e8:	8f b7       	in	r24, 0x3f	; 63
    32ea:	8c 83       	std	Y+4, r24	; 0x04
	cpu_irq_disable();
    32ec:	f8 94       	cli
	return flags;
    32ee:	8c 81       	ldd	r24, Y+4	; 0x04

	irqflags_t flags = cpu_irq_save();

	TWSR = (0b00 << TWPS0);						// Prescaler value = 1
    32f0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 2;									// TWI bit-rate = 400 kBit/sec @ 8 MHz when master mode active
    32f4:	92 e0       	ldi	r25, 0x02	; 2
    32f6:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	TWAR  = (twi_addr    << 1) /* | (TWI_SLAVE_ADDR_GCE << TWGCE)*/ ;
    32fa:	94 e4       	ldi	r25, 0x44	; 68
    32fc:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	TWAMR = (twi_addr_bm << 1);
    3300:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__TEXT_REGION_LENGTH__+0x7e00bd>

	TWCR = _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// Enable Acknowledge, ENable TWI port, Interrupt Enable, no START or STOP bit
    3304:	95 e4       	ldi	r25, 0x45	; 69
    3306:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    330a:	8f bf       	out	0x3f, r24	; 63

	/* I2C interface - 10 MHz-Ref-Osc. second display */
	s_twi_init(TWI_SLAVE_ADDR_10MHZREFOSC, TWI_SLAVE_ADDR_BM);

	/* All interrupt sources prepared here - IRQ activation */
	cpu_irq_enable();
    330c:	78 94       	sei
	/* TC0: not in use */
	/* TC1: Audio output @ 16-bit counter PWM, used: 10-bit resolution */
	/* TC2: LCD backlight w/ 8-bit resolution */
	{
		/* Timer Synchronous Mode - trigger */
		GTCCR = 0;								// trigger the sync for all counters
    330e:	13 bc       	out	0x23, r1	; 35

	/* Start of sub-modules */
	s_tc_start();								// All clocks and PWM timers start here

	/* Initialize external components */
	lcd_init();
    3310:	96 db       	rcall	.-2260   	; 0x2a3e <lcd_init>
	lcd_test(0b11110001);						// Debugging purposes
    3312:	81 ef       	ldi	r24, 0xF1	; 241
    3314:	e9 d9       	rcall	.-3118   	; 0x26e8 <lcd_test>


	/* main loop */
	runmode = 1;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <runmode>
	} while (more);
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    331c:	11 e0       	ldi	r17, 0x01	; 1


	/* main loop */
	runmode = 1;
    while (runmode) {
	    s_task();
    331e:	32 de       	rcall	.-924    	; 0x2f84 <s_task>
	} while (more);
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    3320:	13 bf       	out	0x33, r17	; 51
		  | _BV(SE);							// enable sleep command

	__asm__ __volatile__ ("sleep" ::: "memory");
    3322:	88 95       	sleep

	SMCR &= ~(_BV(SE));							// disable sleep command
    3324:	83 b7       	in	r24, 0x33	; 51
    3326:	8e 7f       	andi	r24, 0xFE	; 254
    3328:	83 bf       	out	0x33, r24	; 51
	lcd_test(0b11110001);						// Debugging purposes


	/* main loop */
	runmode = 1;
    while (runmode) {
    332a:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <runmode>
    332e:	81 11       	cpse	r24, r1
    3330:	f6 cf       	rjmp	.-20     	; 0x331e <main+0x198>
	    s_enter_sleep(SLEEP_MODE_IDLE);
    }


	/* Shutdown external components */
	lcd_shutdown();
    3332:	9a db       	rcall	.-2252   	; 0x2a68 <lcd_shutdown>

	cpu_irq_disable();
    3334:	f8 94       	cli

	/* disable sub-modules */
	ACSR |= _BV(ACD);							// disable AnalogCompare sub-module
    3336:	80 b7       	in	r24, 0x30	; 48
    3338:	80 68       	ori	r24, 0x80	; 128
    333a:	80 bf       	out	0x30, r24	; 48

	sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    333c:	64 e0       	ldi	r22, 0x04	; 4
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	0e 94 0b 04 	call	0x816	; 0x816 <sysclk_disable_module>
	sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    3344:	62 e0       	ldi	r22, 0x02	; 2
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	0e 94 0b 04 	call	0x816	; 0x816 <sysclk_disable_module>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    334c:	8f b7       	in	r24, 0x3f	; 63
    334e:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
    3350:	f8 94       	cli
	return flags;
    3352:	8b 81       	ldd	r24, Y+3	; 0x03

static void s_twi_disable(void)
{
	irqflags_t flags = cpu_irq_save();

	TWCR = _BV(TWEN);							// disable the interrupt source
    3354:	ec eb       	ldi	r30, 0xBC	; 188
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	94 e0       	ldi	r25, 0x04	; 4
    335a:	90 83       	st	Z, r25
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    335c:	3c 98       	cbi	0x07, 4	; 7
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
    335e:	44 9a       	sbi	0x08, 4	; 8
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    3360:	3d 98       	cbi	0x07, 5	; 7
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
    3362:	45 9a       	sbi	0x08, 5	; 8
	ioport_set_pin_mode(SDA_GPIO, IOPORT_MODE_PULLUP);

	ioport_set_pin_dir(SCL_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(SCL_GPIO, IOPORT_MODE_PULLUP);

	TWCR = 0;									// disable the TWI port
    3364:	10 82       	st	Z, r1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3366:	8f bf       	out	0x3f, r24	; 63

	cpu_irq_restore(flags);

	sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    3368:	60 e8       	ldi	r22, 0x80	; 128
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	0e 94 0b 04 	call	0x816	; 0x816 <sysclk_disable_module>
}

/*  \brief Disable ADC interrupt */
static inline void adc_disable_interrupt(void)
{
	ADCSRA &= ~(1 << ADIE);
    3370:	ea e7       	ldi	r30, 0x7A	; 122
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	80 81       	ld	r24, Z
    3376:	87 7f       	andi	r24, 0xF7	; 247
    3378:	80 83       	st	Z, r24
}

/*  \brief Disable ADC Auto Trigger */
static inline void adc_disable_autotrigger(void)
{
	ADCSRA &= ~(1 << ADATE);
    337a:	80 81       	ld	r24, Z
    337c:	8f 7d       	andi	r24, 0xDF	; 223
    337e:	80 83       	st	Z, r24
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    3380:	eb e7       	ldi	r30, 0x7B	; 123
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
	ADC_ADTS_REG = temp;
    3388:	80 83       	st	Z, r24
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    338a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    338e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	adc_disable_autotrigger();
	adc_set_autotrigger_source(0);
	adc_set_admux(0);
	adc_disable_digital_inputs(0);

	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
    3392:	61 e0       	ldi	r22, 0x01	; 1
    3394:	80 e0       	ldi	r24, 0x00	; 0
    3396:	0e 94 0b 04 	call	0x816	; 0x816 <sysclk_disable_module>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    339a:	8f b7       	in	r24, 0x3f	; 63
    339c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    339e:	f8 94       	cli
	return flags;
    33a0:	19 81       	ldd	r17, Y+1	; 0x01
{
	irqflags_t flags = cpu_irq_save();

	/* TC0: not in use */
	{
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    33a2:	60 e2       	ldi	r22, 0x20	; 32
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	0e 94 0b 04 	call	0x816	; 0x816 <sysclk_disable_module>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    33aa:	21 98       	cbi	0x04, 1	; 4
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
    33ac:	29 98       	cbi	0x05, 1	; 5
	{
		// bring pin to high Z mode to reduce audible plop noise
		ioport_set_pin_dir(AUDIO_PWM, IOPORT_DIR_INPUT);
		ioport_set_pin_mode(AUDIO_PWM, IOPORT_MODE_PULLDOWN);

		TCCR1A  = 0;							// release alternate port function
    33ae:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1B  = 0;
    33b2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		TCCR1C  = 0;
    33b6:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>

		TIMSK1  = 0;							// no interrupts
    33ba:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    33be:	68 e0       	ldi	r22, 0x08	; 8
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	0e 94 0b 04 	call	0x816	; 0x816 <sysclk_disable_module>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
    33c6:	23 9a       	sbi	0x04, 3	; 4
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    33c8:	2b 98       	cbi	0x05, 3	; 5
	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		ioport_set_pin_dir(LCDBL_PWM, IOPORT_DIR_OUTPUT);
		ioport_set_pin_level(LCDBL_PWM, false);	// turn backlight off

		TCCR2A  = 0;							// release alternate port function
    33ca:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B  = 0;
    33ce:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

		TIMSK2  = 0;							// no interrupts
    33d2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>

		ASSR    = 0;							// no async TOSC1 mode
    33d6:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>

		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    33da:	60 e4       	ldi	r22, 0x40	; 64
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	0e 94 0b 04 	call	0x816	; 0x816 <sysclk_disable_module>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    33e2:	8f b7       	in	r24, 0x3f	; 63
    33e4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    33e6:	f8 94       	cli
	return flags;
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ea:	5f 93       	push	r21
    33ec:	50 e8       	ldi	r21, 0x80	; 128
    33ee:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    33f2:	50 e0       	ldi	r21, 0x00	; 0
    33f4:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    33f8:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    33fa:	8f bf       	out	0x3f, r24	; 63
    33fc:	1f bf       	out	0x3f, r17	; 63
	} while (more);
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    33fe:	89 e0       	ldi	r24, 0x09	; 9
    3400:	83 bf       	out	0x33, r24	; 51
		  | _BV(SE);							// enable sleep command

	__asm__ __volatile__ ("sleep" ::: "memory");
    3402:	88 95       	sleep

	SMCR &= ~(_BV(SE));							// disable sleep command
    3404:	83 b7       	in	r24, 0x33	; 51
    3406:	8e 7f       	andi	r24, 0xFE	; 254
    3408:	83 bf       	out	0x33, r24	; 51
	s_tc_disable();

    s_enter_sleep(SLEEP_MODE_PWR_DOWN);

    return retcode;								// should never be reached
}
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	df 91       	pop	r29
    341a:	cf 91       	pop	r28
    341c:	1f 91       	pop	r17
    341e:	0f 91       	pop	r16
    3420:	ff 90       	pop	r15
    3422:	ef 90       	pop	r14
    3424:	08 95       	ret

00003426 <__subsf3>:
    3426:	50 58       	subi	r21, 0x80	; 128

00003428 <__addsf3>:
    3428:	bb 27       	eor	r27, r27
    342a:	aa 27       	eor	r26, r26
    342c:	0e d0       	rcall	.+28     	; 0x344a <__addsf3x>
    342e:	75 c1       	rjmp	.+746    	; 0x371a <__fp_round>
    3430:	66 d1       	rcall	.+716    	; 0x36fe <__fp_pscA>
    3432:	30 f0       	brcs	.+12     	; 0x3440 <__addsf3+0x18>
    3434:	6b d1       	rcall	.+726    	; 0x370c <__fp_pscB>
    3436:	20 f0       	brcs	.+8      	; 0x3440 <__addsf3+0x18>
    3438:	31 f4       	brne	.+12     	; 0x3446 <__addsf3+0x1e>
    343a:	9f 3f       	cpi	r25, 0xFF	; 255
    343c:	11 f4       	brne	.+4      	; 0x3442 <__addsf3+0x1a>
    343e:	1e f4       	brtc	.+6      	; 0x3446 <__addsf3+0x1e>
    3440:	5b c1       	rjmp	.+694    	; 0x36f8 <__fp_nan>
    3442:	0e f4       	brtc	.+2      	; 0x3446 <__addsf3+0x1e>
    3444:	e0 95       	com	r30
    3446:	e7 fb       	bst	r30, 7
    3448:	51 c1       	rjmp	.+674    	; 0x36ec <__fp_inf>

0000344a <__addsf3x>:
    344a:	e9 2f       	mov	r30, r25
    344c:	77 d1       	rcall	.+750    	; 0x373c <__fp_split3>
    344e:	80 f3       	brcs	.-32     	; 0x3430 <__addsf3+0x8>
    3450:	ba 17       	cp	r27, r26
    3452:	62 07       	cpc	r22, r18
    3454:	73 07       	cpc	r23, r19
    3456:	84 07       	cpc	r24, r20
    3458:	95 07       	cpc	r25, r21
    345a:	18 f0       	brcs	.+6      	; 0x3462 <__addsf3x+0x18>
    345c:	71 f4       	brne	.+28     	; 0x347a <__addsf3x+0x30>
    345e:	9e f5       	brtc	.+102    	; 0x34c6 <__addsf3x+0x7c>
    3460:	8f c1       	rjmp	.+798    	; 0x3780 <__fp_zero>
    3462:	0e f4       	brtc	.+2      	; 0x3466 <__addsf3x+0x1c>
    3464:	e0 95       	com	r30
    3466:	0b 2e       	mov	r0, r27
    3468:	ba 2f       	mov	r27, r26
    346a:	a0 2d       	mov	r26, r0
    346c:	0b 01       	movw	r0, r22
    346e:	b9 01       	movw	r22, r18
    3470:	90 01       	movw	r18, r0
    3472:	0c 01       	movw	r0, r24
    3474:	ca 01       	movw	r24, r20
    3476:	a0 01       	movw	r20, r0
    3478:	11 24       	eor	r1, r1
    347a:	ff 27       	eor	r31, r31
    347c:	59 1b       	sub	r21, r25
    347e:	99 f0       	breq	.+38     	; 0x34a6 <__addsf3x+0x5c>
    3480:	59 3f       	cpi	r21, 0xF9	; 249
    3482:	50 f4       	brcc	.+20     	; 0x3498 <__addsf3x+0x4e>
    3484:	50 3e       	cpi	r21, 0xE0	; 224
    3486:	68 f1       	brcs	.+90     	; 0x34e2 <__addsf3x+0x98>
    3488:	1a 16       	cp	r1, r26
    348a:	f0 40       	sbci	r31, 0x00	; 0
    348c:	a2 2f       	mov	r26, r18
    348e:	23 2f       	mov	r18, r19
    3490:	34 2f       	mov	r19, r20
    3492:	44 27       	eor	r20, r20
    3494:	58 5f       	subi	r21, 0xF8	; 248
    3496:	f3 cf       	rjmp	.-26     	; 0x347e <__addsf3x+0x34>
    3498:	46 95       	lsr	r20
    349a:	37 95       	ror	r19
    349c:	27 95       	ror	r18
    349e:	a7 95       	ror	r26
    34a0:	f0 40       	sbci	r31, 0x00	; 0
    34a2:	53 95       	inc	r21
    34a4:	c9 f7       	brne	.-14     	; 0x3498 <__addsf3x+0x4e>
    34a6:	7e f4       	brtc	.+30     	; 0x34c6 <__addsf3x+0x7c>
    34a8:	1f 16       	cp	r1, r31
    34aa:	ba 0b       	sbc	r27, r26
    34ac:	62 0b       	sbc	r22, r18
    34ae:	73 0b       	sbc	r23, r19
    34b0:	84 0b       	sbc	r24, r20
    34b2:	ba f0       	brmi	.+46     	; 0x34e2 <__addsf3x+0x98>
    34b4:	91 50       	subi	r25, 0x01	; 1
    34b6:	a1 f0       	breq	.+40     	; 0x34e0 <__addsf3x+0x96>
    34b8:	ff 0f       	add	r31, r31
    34ba:	bb 1f       	adc	r27, r27
    34bc:	66 1f       	adc	r22, r22
    34be:	77 1f       	adc	r23, r23
    34c0:	88 1f       	adc	r24, r24
    34c2:	c2 f7       	brpl	.-16     	; 0x34b4 <__addsf3x+0x6a>
    34c4:	0e c0       	rjmp	.+28     	; 0x34e2 <__addsf3x+0x98>
    34c6:	ba 0f       	add	r27, r26
    34c8:	62 1f       	adc	r22, r18
    34ca:	73 1f       	adc	r23, r19
    34cc:	84 1f       	adc	r24, r20
    34ce:	48 f4       	brcc	.+18     	; 0x34e2 <__addsf3x+0x98>
    34d0:	87 95       	ror	r24
    34d2:	77 95       	ror	r23
    34d4:	67 95       	ror	r22
    34d6:	b7 95       	ror	r27
    34d8:	f7 95       	ror	r31
    34da:	9e 3f       	cpi	r25, 0xFE	; 254
    34dc:	08 f0       	brcs	.+2      	; 0x34e0 <__addsf3x+0x96>
    34de:	b3 cf       	rjmp	.-154    	; 0x3446 <__addsf3+0x1e>
    34e0:	93 95       	inc	r25
    34e2:	88 0f       	add	r24, r24
    34e4:	08 f0       	brcs	.+2      	; 0x34e8 <__addsf3x+0x9e>
    34e6:	99 27       	eor	r25, r25
    34e8:	ee 0f       	add	r30, r30
    34ea:	97 95       	ror	r25
    34ec:	87 95       	ror	r24
    34ee:	08 95       	ret

000034f0 <__cmpsf2>:
    34f0:	d9 d0       	rcall	.+434    	; 0x36a4 <__fp_cmp>
    34f2:	08 f4       	brcc	.+2      	; 0x34f6 <__cmpsf2+0x6>
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	08 95       	ret

000034f8 <__divsf3>:
    34f8:	0c d0       	rcall	.+24     	; 0x3512 <__divsf3x>
    34fa:	0f c1       	rjmp	.+542    	; 0x371a <__fp_round>
    34fc:	07 d1       	rcall	.+526    	; 0x370c <__fp_pscB>
    34fe:	40 f0       	brcs	.+16     	; 0x3510 <__divsf3+0x18>
    3500:	fe d0       	rcall	.+508    	; 0x36fe <__fp_pscA>
    3502:	30 f0       	brcs	.+12     	; 0x3510 <__divsf3+0x18>
    3504:	21 f4       	brne	.+8      	; 0x350e <__divsf3+0x16>
    3506:	5f 3f       	cpi	r21, 0xFF	; 255
    3508:	19 f0       	breq	.+6      	; 0x3510 <__divsf3+0x18>
    350a:	f0 c0       	rjmp	.+480    	; 0x36ec <__fp_inf>
    350c:	51 11       	cpse	r21, r1
    350e:	39 c1       	rjmp	.+626    	; 0x3782 <__fp_szero>
    3510:	f3 c0       	rjmp	.+486    	; 0x36f8 <__fp_nan>

00003512 <__divsf3x>:
    3512:	14 d1       	rcall	.+552    	; 0x373c <__fp_split3>
    3514:	98 f3       	brcs	.-26     	; 0x34fc <__divsf3+0x4>

00003516 <__divsf3_pse>:
    3516:	99 23       	and	r25, r25
    3518:	c9 f3       	breq	.-14     	; 0x350c <__divsf3+0x14>
    351a:	55 23       	and	r21, r21
    351c:	b1 f3       	breq	.-20     	; 0x350a <__divsf3+0x12>
    351e:	95 1b       	sub	r25, r21
    3520:	55 0b       	sbc	r21, r21
    3522:	bb 27       	eor	r27, r27
    3524:	aa 27       	eor	r26, r26
    3526:	62 17       	cp	r22, r18
    3528:	73 07       	cpc	r23, r19
    352a:	84 07       	cpc	r24, r20
    352c:	38 f0       	brcs	.+14     	; 0x353c <__divsf3_pse+0x26>
    352e:	9f 5f       	subi	r25, 0xFF	; 255
    3530:	5f 4f       	sbci	r21, 0xFF	; 255
    3532:	22 0f       	add	r18, r18
    3534:	33 1f       	adc	r19, r19
    3536:	44 1f       	adc	r20, r20
    3538:	aa 1f       	adc	r26, r26
    353a:	a9 f3       	breq	.-22     	; 0x3526 <__divsf3_pse+0x10>
    353c:	33 d0       	rcall	.+102    	; 0x35a4 <__divsf3_pse+0x8e>
    353e:	0e 2e       	mov	r0, r30
    3540:	3a f0       	brmi	.+14     	; 0x3550 <__divsf3_pse+0x3a>
    3542:	e0 e8       	ldi	r30, 0x80	; 128
    3544:	30 d0       	rcall	.+96     	; 0x35a6 <__divsf3_pse+0x90>
    3546:	91 50       	subi	r25, 0x01	; 1
    3548:	50 40       	sbci	r21, 0x00	; 0
    354a:	e6 95       	lsr	r30
    354c:	00 1c       	adc	r0, r0
    354e:	ca f7       	brpl	.-14     	; 0x3542 <__divsf3_pse+0x2c>
    3550:	29 d0       	rcall	.+82     	; 0x35a4 <__divsf3_pse+0x8e>
    3552:	fe 2f       	mov	r31, r30
    3554:	27 d0       	rcall	.+78     	; 0x35a4 <__divsf3_pse+0x8e>
    3556:	66 0f       	add	r22, r22
    3558:	77 1f       	adc	r23, r23
    355a:	88 1f       	adc	r24, r24
    355c:	bb 1f       	adc	r27, r27
    355e:	26 17       	cp	r18, r22
    3560:	37 07       	cpc	r19, r23
    3562:	48 07       	cpc	r20, r24
    3564:	ab 07       	cpc	r26, r27
    3566:	b0 e8       	ldi	r27, 0x80	; 128
    3568:	09 f0       	breq	.+2      	; 0x356c <__divsf3_pse+0x56>
    356a:	bb 0b       	sbc	r27, r27
    356c:	80 2d       	mov	r24, r0
    356e:	bf 01       	movw	r22, r30
    3570:	ff 27       	eor	r31, r31
    3572:	93 58       	subi	r25, 0x83	; 131
    3574:	5f 4f       	sbci	r21, 0xFF	; 255
    3576:	2a f0       	brmi	.+10     	; 0x3582 <__divsf3_pse+0x6c>
    3578:	9e 3f       	cpi	r25, 0xFE	; 254
    357a:	51 05       	cpc	r21, r1
    357c:	68 f0       	brcs	.+26     	; 0x3598 <__divsf3_pse+0x82>
    357e:	b6 c0       	rjmp	.+364    	; 0x36ec <__fp_inf>
    3580:	00 c1       	rjmp	.+512    	; 0x3782 <__fp_szero>
    3582:	5f 3f       	cpi	r21, 0xFF	; 255
    3584:	ec f3       	brlt	.-6      	; 0x3580 <__divsf3_pse+0x6a>
    3586:	98 3e       	cpi	r25, 0xE8	; 232
    3588:	dc f3       	brlt	.-10     	; 0x3580 <__divsf3_pse+0x6a>
    358a:	86 95       	lsr	r24
    358c:	77 95       	ror	r23
    358e:	67 95       	ror	r22
    3590:	b7 95       	ror	r27
    3592:	f7 95       	ror	r31
    3594:	9f 5f       	subi	r25, 0xFF	; 255
    3596:	c9 f7       	brne	.-14     	; 0x358a <__divsf3_pse+0x74>
    3598:	88 0f       	add	r24, r24
    359a:	91 1d       	adc	r25, r1
    359c:	96 95       	lsr	r25
    359e:	87 95       	ror	r24
    35a0:	97 f9       	bld	r25, 7
    35a2:	08 95       	ret
    35a4:	e1 e0       	ldi	r30, 0x01	; 1
    35a6:	66 0f       	add	r22, r22
    35a8:	77 1f       	adc	r23, r23
    35aa:	88 1f       	adc	r24, r24
    35ac:	bb 1f       	adc	r27, r27
    35ae:	62 17       	cp	r22, r18
    35b0:	73 07       	cpc	r23, r19
    35b2:	84 07       	cpc	r24, r20
    35b4:	ba 07       	cpc	r27, r26
    35b6:	20 f0       	brcs	.+8      	; 0x35c0 <__divsf3_pse+0xaa>
    35b8:	62 1b       	sub	r22, r18
    35ba:	73 0b       	sbc	r23, r19
    35bc:	84 0b       	sbc	r24, r20
    35be:	ba 0b       	sbc	r27, r26
    35c0:	ee 1f       	adc	r30, r30
    35c2:	88 f7       	brcc	.-30     	; 0x35a6 <__divsf3_pse+0x90>
    35c4:	e0 95       	com	r30
    35c6:	08 95       	ret

000035c8 <__fixsfsi>:
    35c8:	04 d0       	rcall	.+8      	; 0x35d2 <__fixunssfsi>
    35ca:	68 94       	set
    35cc:	b1 11       	cpse	r27, r1
    35ce:	d9 c0       	rjmp	.+434    	; 0x3782 <__fp_szero>
    35d0:	08 95       	ret

000035d2 <__fixunssfsi>:
    35d2:	bc d0       	rcall	.+376    	; 0x374c <__fp_splitA>
    35d4:	88 f0       	brcs	.+34     	; 0x35f8 <__fixunssfsi+0x26>
    35d6:	9f 57       	subi	r25, 0x7F	; 127
    35d8:	90 f0       	brcs	.+36     	; 0x35fe <__fixunssfsi+0x2c>
    35da:	b9 2f       	mov	r27, r25
    35dc:	99 27       	eor	r25, r25
    35de:	b7 51       	subi	r27, 0x17	; 23
    35e0:	a0 f0       	brcs	.+40     	; 0x360a <__fixunssfsi+0x38>
    35e2:	d1 f0       	breq	.+52     	; 0x3618 <__fixunssfsi+0x46>
    35e4:	66 0f       	add	r22, r22
    35e6:	77 1f       	adc	r23, r23
    35e8:	88 1f       	adc	r24, r24
    35ea:	99 1f       	adc	r25, r25
    35ec:	1a f0       	brmi	.+6      	; 0x35f4 <__fixunssfsi+0x22>
    35ee:	ba 95       	dec	r27
    35f0:	c9 f7       	brne	.-14     	; 0x35e4 <__fixunssfsi+0x12>
    35f2:	12 c0       	rjmp	.+36     	; 0x3618 <__fixunssfsi+0x46>
    35f4:	b1 30       	cpi	r27, 0x01	; 1
    35f6:	81 f0       	breq	.+32     	; 0x3618 <__fixunssfsi+0x46>
    35f8:	c3 d0       	rcall	.+390    	; 0x3780 <__fp_zero>
    35fa:	b1 e0       	ldi	r27, 0x01	; 1
    35fc:	08 95       	ret
    35fe:	c0 c0       	rjmp	.+384    	; 0x3780 <__fp_zero>
    3600:	67 2f       	mov	r22, r23
    3602:	78 2f       	mov	r23, r24
    3604:	88 27       	eor	r24, r24
    3606:	b8 5f       	subi	r27, 0xF8	; 248
    3608:	39 f0       	breq	.+14     	; 0x3618 <__fixunssfsi+0x46>
    360a:	b9 3f       	cpi	r27, 0xF9	; 249
    360c:	cc f3       	brlt	.-14     	; 0x3600 <__fixunssfsi+0x2e>
    360e:	86 95       	lsr	r24
    3610:	77 95       	ror	r23
    3612:	67 95       	ror	r22
    3614:	b3 95       	inc	r27
    3616:	d9 f7       	brne	.-10     	; 0x360e <__fixunssfsi+0x3c>
    3618:	3e f4       	brtc	.+14     	; 0x3628 <__fixunssfsi+0x56>
    361a:	90 95       	com	r25
    361c:	80 95       	com	r24
    361e:	70 95       	com	r23
    3620:	61 95       	neg	r22
    3622:	7f 4f       	sbci	r23, 0xFF	; 255
    3624:	8f 4f       	sbci	r24, 0xFF	; 255
    3626:	9f 4f       	sbci	r25, 0xFF	; 255
    3628:	08 95       	ret

0000362a <__floatunsisf>:
    362a:	e8 94       	clt
    362c:	09 c0       	rjmp	.+18     	; 0x3640 <__floatsisf+0x12>

0000362e <__floatsisf>:
    362e:	97 fb       	bst	r25, 7
    3630:	3e f4       	brtc	.+14     	; 0x3640 <__floatsisf+0x12>
    3632:	90 95       	com	r25
    3634:	80 95       	com	r24
    3636:	70 95       	com	r23
    3638:	61 95       	neg	r22
    363a:	7f 4f       	sbci	r23, 0xFF	; 255
    363c:	8f 4f       	sbci	r24, 0xFF	; 255
    363e:	9f 4f       	sbci	r25, 0xFF	; 255
    3640:	99 23       	and	r25, r25
    3642:	a9 f0       	breq	.+42     	; 0x366e <__floatsisf+0x40>
    3644:	f9 2f       	mov	r31, r25
    3646:	96 e9       	ldi	r25, 0x96	; 150
    3648:	bb 27       	eor	r27, r27
    364a:	93 95       	inc	r25
    364c:	f6 95       	lsr	r31
    364e:	87 95       	ror	r24
    3650:	77 95       	ror	r23
    3652:	67 95       	ror	r22
    3654:	b7 95       	ror	r27
    3656:	f1 11       	cpse	r31, r1
    3658:	f8 cf       	rjmp	.-16     	; 0x364a <__floatsisf+0x1c>
    365a:	fa f4       	brpl	.+62     	; 0x369a <__floatsisf+0x6c>
    365c:	bb 0f       	add	r27, r27
    365e:	11 f4       	brne	.+4      	; 0x3664 <__floatsisf+0x36>
    3660:	60 ff       	sbrs	r22, 0
    3662:	1b c0       	rjmp	.+54     	; 0x369a <__floatsisf+0x6c>
    3664:	6f 5f       	subi	r22, 0xFF	; 255
    3666:	7f 4f       	sbci	r23, 0xFF	; 255
    3668:	8f 4f       	sbci	r24, 0xFF	; 255
    366a:	9f 4f       	sbci	r25, 0xFF	; 255
    366c:	16 c0       	rjmp	.+44     	; 0x369a <__floatsisf+0x6c>
    366e:	88 23       	and	r24, r24
    3670:	11 f0       	breq	.+4      	; 0x3676 <__floatsisf+0x48>
    3672:	96 e9       	ldi	r25, 0x96	; 150
    3674:	11 c0       	rjmp	.+34     	; 0x3698 <__floatsisf+0x6a>
    3676:	77 23       	and	r23, r23
    3678:	21 f0       	breq	.+8      	; 0x3682 <__floatsisf+0x54>
    367a:	9e e8       	ldi	r25, 0x8E	; 142
    367c:	87 2f       	mov	r24, r23
    367e:	76 2f       	mov	r23, r22
    3680:	05 c0       	rjmp	.+10     	; 0x368c <__floatsisf+0x5e>
    3682:	66 23       	and	r22, r22
    3684:	71 f0       	breq	.+28     	; 0x36a2 <__floatsisf+0x74>
    3686:	96 e8       	ldi	r25, 0x86	; 134
    3688:	86 2f       	mov	r24, r22
    368a:	70 e0       	ldi	r23, 0x00	; 0
    368c:	60 e0       	ldi	r22, 0x00	; 0
    368e:	2a f0       	brmi	.+10     	; 0x369a <__floatsisf+0x6c>
    3690:	9a 95       	dec	r25
    3692:	66 0f       	add	r22, r22
    3694:	77 1f       	adc	r23, r23
    3696:	88 1f       	adc	r24, r24
    3698:	da f7       	brpl	.-10     	; 0x3690 <__floatsisf+0x62>
    369a:	88 0f       	add	r24, r24
    369c:	96 95       	lsr	r25
    369e:	87 95       	ror	r24
    36a0:	97 f9       	bld	r25, 7
    36a2:	08 95       	ret

000036a4 <__fp_cmp>:
    36a4:	99 0f       	add	r25, r25
    36a6:	00 08       	sbc	r0, r0
    36a8:	55 0f       	add	r21, r21
    36aa:	aa 0b       	sbc	r26, r26
    36ac:	e0 e8       	ldi	r30, 0x80	; 128
    36ae:	fe ef       	ldi	r31, 0xFE	; 254
    36b0:	16 16       	cp	r1, r22
    36b2:	17 06       	cpc	r1, r23
    36b4:	e8 07       	cpc	r30, r24
    36b6:	f9 07       	cpc	r31, r25
    36b8:	c0 f0       	brcs	.+48     	; 0x36ea <__fp_cmp+0x46>
    36ba:	12 16       	cp	r1, r18
    36bc:	13 06       	cpc	r1, r19
    36be:	e4 07       	cpc	r30, r20
    36c0:	f5 07       	cpc	r31, r21
    36c2:	98 f0       	brcs	.+38     	; 0x36ea <__fp_cmp+0x46>
    36c4:	62 1b       	sub	r22, r18
    36c6:	73 0b       	sbc	r23, r19
    36c8:	84 0b       	sbc	r24, r20
    36ca:	95 0b       	sbc	r25, r21
    36cc:	39 f4       	brne	.+14     	; 0x36dc <__fp_cmp+0x38>
    36ce:	0a 26       	eor	r0, r26
    36d0:	61 f0       	breq	.+24     	; 0x36ea <__fp_cmp+0x46>
    36d2:	23 2b       	or	r18, r19
    36d4:	24 2b       	or	r18, r20
    36d6:	25 2b       	or	r18, r21
    36d8:	21 f4       	brne	.+8      	; 0x36e2 <__fp_cmp+0x3e>
    36da:	08 95       	ret
    36dc:	0a 26       	eor	r0, r26
    36de:	09 f4       	brne	.+2      	; 0x36e2 <__fp_cmp+0x3e>
    36e0:	a1 40       	sbci	r26, 0x01	; 1
    36e2:	a6 95       	lsr	r26
    36e4:	8f ef       	ldi	r24, 0xFF	; 255
    36e6:	81 1d       	adc	r24, r1
    36e8:	81 1d       	adc	r24, r1
    36ea:	08 95       	ret

000036ec <__fp_inf>:
    36ec:	97 f9       	bld	r25, 7
    36ee:	9f 67       	ori	r25, 0x7F	; 127
    36f0:	80 e8       	ldi	r24, 0x80	; 128
    36f2:	70 e0       	ldi	r23, 0x00	; 0
    36f4:	60 e0       	ldi	r22, 0x00	; 0
    36f6:	08 95       	ret

000036f8 <__fp_nan>:
    36f8:	9f ef       	ldi	r25, 0xFF	; 255
    36fa:	80 ec       	ldi	r24, 0xC0	; 192
    36fc:	08 95       	ret

000036fe <__fp_pscA>:
    36fe:	00 24       	eor	r0, r0
    3700:	0a 94       	dec	r0
    3702:	16 16       	cp	r1, r22
    3704:	17 06       	cpc	r1, r23
    3706:	18 06       	cpc	r1, r24
    3708:	09 06       	cpc	r0, r25
    370a:	08 95       	ret

0000370c <__fp_pscB>:
    370c:	00 24       	eor	r0, r0
    370e:	0a 94       	dec	r0
    3710:	12 16       	cp	r1, r18
    3712:	13 06       	cpc	r1, r19
    3714:	14 06       	cpc	r1, r20
    3716:	05 06       	cpc	r0, r21
    3718:	08 95       	ret

0000371a <__fp_round>:
    371a:	09 2e       	mov	r0, r25
    371c:	03 94       	inc	r0
    371e:	00 0c       	add	r0, r0
    3720:	11 f4       	brne	.+4      	; 0x3726 <__fp_round+0xc>
    3722:	88 23       	and	r24, r24
    3724:	52 f0       	brmi	.+20     	; 0x373a <__fp_round+0x20>
    3726:	bb 0f       	add	r27, r27
    3728:	40 f4       	brcc	.+16     	; 0x373a <__fp_round+0x20>
    372a:	bf 2b       	or	r27, r31
    372c:	11 f4       	brne	.+4      	; 0x3732 <__fp_round+0x18>
    372e:	60 ff       	sbrs	r22, 0
    3730:	04 c0       	rjmp	.+8      	; 0x373a <__fp_round+0x20>
    3732:	6f 5f       	subi	r22, 0xFF	; 255
    3734:	7f 4f       	sbci	r23, 0xFF	; 255
    3736:	8f 4f       	sbci	r24, 0xFF	; 255
    3738:	9f 4f       	sbci	r25, 0xFF	; 255
    373a:	08 95       	ret

0000373c <__fp_split3>:
    373c:	57 fd       	sbrc	r21, 7
    373e:	90 58       	subi	r25, 0x80	; 128
    3740:	44 0f       	add	r20, r20
    3742:	55 1f       	adc	r21, r21
    3744:	59 f0       	breq	.+22     	; 0x375c <__fp_splitA+0x10>
    3746:	5f 3f       	cpi	r21, 0xFF	; 255
    3748:	71 f0       	breq	.+28     	; 0x3766 <__fp_splitA+0x1a>
    374a:	47 95       	ror	r20

0000374c <__fp_splitA>:
    374c:	88 0f       	add	r24, r24
    374e:	97 fb       	bst	r25, 7
    3750:	99 1f       	adc	r25, r25
    3752:	61 f0       	breq	.+24     	; 0x376c <__fp_splitA+0x20>
    3754:	9f 3f       	cpi	r25, 0xFF	; 255
    3756:	79 f0       	breq	.+30     	; 0x3776 <__fp_splitA+0x2a>
    3758:	87 95       	ror	r24
    375a:	08 95       	ret
    375c:	12 16       	cp	r1, r18
    375e:	13 06       	cpc	r1, r19
    3760:	14 06       	cpc	r1, r20
    3762:	55 1f       	adc	r21, r21
    3764:	f2 cf       	rjmp	.-28     	; 0x374a <__fp_split3+0xe>
    3766:	46 95       	lsr	r20
    3768:	f1 df       	rcall	.-30     	; 0x374c <__fp_splitA>
    376a:	08 c0       	rjmp	.+16     	; 0x377c <__fp_splitA+0x30>
    376c:	16 16       	cp	r1, r22
    376e:	17 06       	cpc	r1, r23
    3770:	18 06       	cpc	r1, r24
    3772:	99 1f       	adc	r25, r25
    3774:	f1 cf       	rjmp	.-30     	; 0x3758 <__fp_splitA+0xc>
    3776:	86 95       	lsr	r24
    3778:	71 05       	cpc	r23, r1
    377a:	61 05       	cpc	r22, r1
    377c:	08 94       	sec
    377e:	08 95       	ret

00003780 <__fp_zero>:
    3780:	e8 94       	clt

00003782 <__fp_szero>:
    3782:	bb 27       	eor	r27, r27
    3784:	66 27       	eor	r22, r22
    3786:	77 27       	eor	r23, r23
    3788:	cb 01       	movw	r24, r22
    378a:	97 f9       	bld	r25, 7
    378c:	08 95       	ret

0000378e <__gesf2>:
    378e:	8a df       	rcall	.-236    	; 0x36a4 <__fp_cmp>
    3790:	08 f4       	brcc	.+2      	; 0x3794 <__gesf2+0x6>
    3792:	8f ef       	ldi	r24, 0xFF	; 255
    3794:	08 95       	ret

00003796 <__mulsf3>:
    3796:	0b d0       	rcall	.+22     	; 0x37ae <__mulsf3x>
    3798:	c0 cf       	rjmp	.-128    	; 0x371a <__fp_round>
    379a:	b1 df       	rcall	.-158    	; 0x36fe <__fp_pscA>
    379c:	28 f0       	brcs	.+10     	; 0x37a8 <__mulsf3+0x12>
    379e:	b6 df       	rcall	.-148    	; 0x370c <__fp_pscB>
    37a0:	18 f0       	brcs	.+6      	; 0x37a8 <__mulsf3+0x12>
    37a2:	95 23       	and	r25, r21
    37a4:	09 f0       	breq	.+2      	; 0x37a8 <__mulsf3+0x12>
    37a6:	a2 cf       	rjmp	.-188    	; 0x36ec <__fp_inf>
    37a8:	a7 cf       	rjmp	.-178    	; 0x36f8 <__fp_nan>
    37aa:	11 24       	eor	r1, r1
    37ac:	ea cf       	rjmp	.-44     	; 0x3782 <__fp_szero>

000037ae <__mulsf3x>:
    37ae:	c6 df       	rcall	.-116    	; 0x373c <__fp_split3>
    37b0:	a0 f3       	brcs	.-24     	; 0x379a <__mulsf3+0x4>

000037b2 <__mulsf3_pse>:
    37b2:	95 9f       	mul	r25, r21
    37b4:	d1 f3       	breq	.-12     	; 0x37aa <__mulsf3+0x14>
    37b6:	95 0f       	add	r25, r21
    37b8:	50 e0       	ldi	r21, 0x00	; 0
    37ba:	55 1f       	adc	r21, r21
    37bc:	62 9f       	mul	r22, r18
    37be:	f0 01       	movw	r30, r0
    37c0:	72 9f       	mul	r23, r18
    37c2:	bb 27       	eor	r27, r27
    37c4:	f0 0d       	add	r31, r0
    37c6:	b1 1d       	adc	r27, r1
    37c8:	63 9f       	mul	r22, r19
    37ca:	aa 27       	eor	r26, r26
    37cc:	f0 0d       	add	r31, r0
    37ce:	b1 1d       	adc	r27, r1
    37d0:	aa 1f       	adc	r26, r26
    37d2:	64 9f       	mul	r22, r20
    37d4:	66 27       	eor	r22, r22
    37d6:	b0 0d       	add	r27, r0
    37d8:	a1 1d       	adc	r26, r1
    37da:	66 1f       	adc	r22, r22
    37dc:	82 9f       	mul	r24, r18
    37de:	22 27       	eor	r18, r18
    37e0:	b0 0d       	add	r27, r0
    37e2:	a1 1d       	adc	r26, r1
    37e4:	62 1f       	adc	r22, r18
    37e6:	73 9f       	mul	r23, r19
    37e8:	b0 0d       	add	r27, r0
    37ea:	a1 1d       	adc	r26, r1
    37ec:	62 1f       	adc	r22, r18
    37ee:	83 9f       	mul	r24, r19
    37f0:	a0 0d       	add	r26, r0
    37f2:	61 1d       	adc	r22, r1
    37f4:	22 1f       	adc	r18, r18
    37f6:	74 9f       	mul	r23, r20
    37f8:	33 27       	eor	r19, r19
    37fa:	a0 0d       	add	r26, r0
    37fc:	61 1d       	adc	r22, r1
    37fe:	23 1f       	adc	r18, r19
    3800:	84 9f       	mul	r24, r20
    3802:	60 0d       	add	r22, r0
    3804:	21 1d       	adc	r18, r1
    3806:	82 2f       	mov	r24, r18
    3808:	76 2f       	mov	r23, r22
    380a:	6a 2f       	mov	r22, r26
    380c:	11 24       	eor	r1, r1
    380e:	9f 57       	subi	r25, 0x7F	; 127
    3810:	50 40       	sbci	r21, 0x00	; 0
    3812:	8a f0       	brmi	.+34     	; 0x3836 <__mulsf3_pse+0x84>
    3814:	e1 f0       	breq	.+56     	; 0x384e <__mulsf3_pse+0x9c>
    3816:	88 23       	and	r24, r24
    3818:	4a f0       	brmi	.+18     	; 0x382c <__mulsf3_pse+0x7a>
    381a:	ee 0f       	add	r30, r30
    381c:	ff 1f       	adc	r31, r31
    381e:	bb 1f       	adc	r27, r27
    3820:	66 1f       	adc	r22, r22
    3822:	77 1f       	adc	r23, r23
    3824:	88 1f       	adc	r24, r24
    3826:	91 50       	subi	r25, 0x01	; 1
    3828:	50 40       	sbci	r21, 0x00	; 0
    382a:	a9 f7       	brne	.-22     	; 0x3816 <__mulsf3_pse+0x64>
    382c:	9e 3f       	cpi	r25, 0xFE	; 254
    382e:	51 05       	cpc	r21, r1
    3830:	70 f0       	brcs	.+28     	; 0x384e <__mulsf3_pse+0x9c>
    3832:	5c cf       	rjmp	.-328    	; 0x36ec <__fp_inf>
    3834:	a6 cf       	rjmp	.-180    	; 0x3782 <__fp_szero>
    3836:	5f 3f       	cpi	r21, 0xFF	; 255
    3838:	ec f3       	brlt	.-6      	; 0x3834 <__mulsf3_pse+0x82>
    383a:	98 3e       	cpi	r25, 0xE8	; 232
    383c:	dc f3       	brlt	.-10     	; 0x3834 <__mulsf3_pse+0x82>
    383e:	86 95       	lsr	r24
    3840:	77 95       	ror	r23
    3842:	67 95       	ror	r22
    3844:	b7 95       	ror	r27
    3846:	f7 95       	ror	r31
    3848:	e7 95       	ror	r30
    384a:	9f 5f       	subi	r25, 0xFF	; 255
    384c:	c1 f7       	brne	.-16     	; 0x383e <__mulsf3_pse+0x8c>
    384e:	fe 2b       	or	r31, r30
    3850:	88 0f       	add	r24, r24
    3852:	91 1d       	adc	r25, r1
    3854:	96 95       	lsr	r25
    3856:	87 95       	ror	r24
    3858:	97 f9       	bld	r25, 7
    385a:	08 95       	ret

0000385c <__divmodhi4>:
    385c:	97 fb       	bst	r25, 7
    385e:	07 2e       	mov	r0, r23
    3860:	16 f4       	brtc	.+4      	; 0x3866 <__divmodhi4+0xa>
    3862:	00 94       	com	r0
    3864:	06 d0       	rcall	.+12     	; 0x3872 <__divmodhi4_neg1>
    3866:	77 fd       	sbrc	r23, 7
    3868:	08 d0       	rcall	.+16     	; 0x387a <__divmodhi4_neg2>
    386a:	20 d0       	rcall	.+64     	; 0x38ac <__udivmodhi4>
    386c:	07 fc       	sbrc	r0, 7
    386e:	05 d0       	rcall	.+10     	; 0x387a <__divmodhi4_neg2>
    3870:	3e f4       	brtc	.+14     	; 0x3880 <__divmodhi4_exit>

00003872 <__divmodhi4_neg1>:
    3872:	90 95       	com	r25
    3874:	81 95       	neg	r24
    3876:	9f 4f       	sbci	r25, 0xFF	; 255
    3878:	08 95       	ret

0000387a <__divmodhi4_neg2>:
    387a:	70 95       	com	r23
    387c:	61 95       	neg	r22
    387e:	7f 4f       	sbci	r23, 0xFF	; 255

00003880 <__divmodhi4_exit>:
    3880:	08 95       	ret

00003882 <__tablejump2__>:
    3882:	ee 0f       	add	r30, r30
    3884:	ff 1f       	adc	r31, r31
    3886:	05 90       	lpm	r0, Z+
    3888:	f4 91       	lpm	r31, Z
    388a:	e0 2d       	mov	r30, r0
    388c:	09 94       	ijmp

0000388e <__umulhisi3>:
    388e:	a2 9f       	mul	r26, r18
    3890:	b0 01       	movw	r22, r0
    3892:	b3 9f       	mul	r27, r19
    3894:	c0 01       	movw	r24, r0
    3896:	a3 9f       	mul	r26, r19
    3898:	70 0d       	add	r23, r0
    389a:	81 1d       	adc	r24, r1
    389c:	11 24       	eor	r1, r1
    389e:	91 1d       	adc	r25, r1
    38a0:	b2 9f       	mul	r27, r18
    38a2:	70 0d       	add	r23, r0
    38a4:	81 1d       	adc	r24, r1
    38a6:	11 24       	eor	r1, r1
    38a8:	91 1d       	adc	r25, r1
    38aa:	08 95       	ret

000038ac <__udivmodhi4>:
    38ac:	aa 1b       	sub	r26, r26
    38ae:	bb 1b       	sub	r27, r27
    38b0:	51 e1       	ldi	r21, 0x11	; 17
    38b2:	07 c0       	rjmp	.+14     	; 0x38c2 <__udivmodhi4_ep>

000038b4 <__udivmodhi4_loop>:
    38b4:	aa 1f       	adc	r26, r26
    38b6:	bb 1f       	adc	r27, r27
    38b8:	a6 17       	cp	r26, r22
    38ba:	b7 07       	cpc	r27, r23
    38bc:	10 f0       	brcs	.+4      	; 0x38c2 <__udivmodhi4_ep>
    38be:	a6 1b       	sub	r26, r22
    38c0:	b7 0b       	sbc	r27, r23

000038c2 <__udivmodhi4_ep>:
    38c2:	88 1f       	adc	r24, r24
    38c4:	99 1f       	adc	r25, r25
    38c6:	5a 95       	dec	r21
    38c8:	a9 f7       	brne	.-22     	; 0x38b4 <__udivmodhi4_loop>
    38ca:	80 95       	com	r24
    38cc:	90 95       	com	r25
    38ce:	bc 01       	movw	r22, r24
    38d0:	cd 01       	movw	r24, r26
    38d2:	08 95       	ret

000038d4 <snprintf>:
    38d4:	ae e0       	ldi	r26, 0x0E	; 14
    38d6:	b0 e0       	ldi	r27, 0x00	; 0
    38d8:	ef e6       	ldi	r30, 0x6F	; 111
    38da:	fc e1       	ldi	r31, 0x1C	; 28
    38dc:	a5 c2       	rjmp	.+1354   	; 0x3e28 <__prologue_saves__+0x1c>
    38de:	0d 89       	ldd	r16, Y+21	; 0x15
    38e0:	1e 89       	ldd	r17, Y+22	; 0x16
    38e2:	8f 89       	ldd	r24, Y+23	; 0x17
    38e4:	98 8d       	ldd	r25, Y+24	; 0x18
    38e6:	26 e0       	ldi	r18, 0x06	; 6
    38e8:	2c 83       	std	Y+4, r18	; 0x04
    38ea:	1a 83       	std	Y+2, r17	; 0x02
    38ec:	09 83       	std	Y+1, r16	; 0x01
    38ee:	97 ff       	sbrs	r25, 7
    38f0:	02 c0       	rjmp	.+4      	; 0x38f6 <snprintf+0x22>
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	90 e8       	ldi	r25, 0x80	; 128
    38f6:	01 97       	sbiw	r24, 0x01	; 1
    38f8:	9e 83       	std	Y+6, r25	; 0x06
    38fa:	8d 83       	std	Y+5, r24	; 0x05
    38fc:	ae 01       	movw	r20, r28
    38fe:	45 5e       	subi	r20, 0xE5	; 229
    3900:	5f 4f       	sbci	r21, 0xFF	; 255
    3902:	69 8d       	ldd	r22, Y+25	; 0x19
    3904:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3906:	ce 01       	movw	r24, r28
    3908:	01 96       	adiw	r24, 0x01	; 1
    390a:	11 d0       	rcall	.+34     	; 0x392e <vfprintf>
    390c:	4d 81       	ldd	r20, Y+5	; 0x05
    390e:	5e 81       	ldd	r21, Y+6	; 0x06
    3910:	57 fd       	sbrc	r21, 7
    3912:	0a c0       	rjmp	.+20     	; 0x3928 <snprintf+0x54>
    3914:	2f 81       	ldd	r18, Y+7	; 0x07
    3916:	38 85       	ldd	r19, Y+8	; 0x08
    3918:	42 17       	cp	r20, r18
    391a:	53 07       	cpc	r21, r19
    391c:	0c f4       	brge	.+2      	; 0x3920 <snprintf+0x4c>
    391e:	9a 01       	movw	r18, r20
    3920:	f8 01       	movw	r30, r16
    3922:	e2 0f       	add	r30, r18
    3924:	f3 1f       	adc	r31, r19
    3926:	10 82       	st	Z, r1
    3928:	2e 96       	adiw	r28, 0x0e	; 14
    392a:	e4 e0       	ldi	r30, 0x04	; 4
    392c:	99 c2       	rjmp	.+1330   	; 0x3e60 <__epilogue_restores__+0x1c>

0000392e <vfprintf>:
    392e:	ac e0       	ldi	r26, 0x0C	; 12
    3930:	b0 e0       	ldi	r27, 0x00	; 0
    3932:	ec e9       	ldi	r30, 0x9C	; 156
    3934:	fc e1       	ldi	r31, 0x1C	; 28
    3936:	6a c2       	rjmp	.+1236   	; 0x3e0c <__prologue_saves__>
    3938:	7c 01       	movw	r14, r24
    393a:	6b 01       	movw	r12, r22
    393c:	8a 01       	movw	r16, r20
    393e:	fc 01       	movw	r30, r24
    3940:	17 82       	std	Z+7, r1	; 0x07
    3942:	16 82       	std	Z+6, r1	; 0x06
    3944:	83 81       	ldd	r24, Z+3	; 0x03
    3946:	81 ff       	sbrs	r24, 1
    3948:	b0 c1       	rjmp	.+864    	; 0x3caa <vfprintf+0x37c>
    394a:	ce 01       	movw	r24, r28
    394c:	01 96       	adiw	r24, 0x01	; 1
    394e:	4c 01       	movw	r8, r24
    3950:	f7 01       	movw	r30, r14
    3952:	93 81       	ldd	r25, Z+3	; 0x03
    3954:	f6 01       	movw	r30, r12
    3956:	93 fd       	sbrc	r25, 3
    3958:	85 91       	lpm	r24, Z+
    395a:	93 ff       	sbrs	r25, 3
    395c:	81 91       	ld	r24, Z+
    395e:	6f 01       	movw	r12, r30
    3960:	88 23       	and	r24, r24
    3962:	09 f4       	brne	.+2      	; 0x3966 <vfprintf+0x38>
    3964:	9e c1       	rjmp	.+828    	; 0x3ca2 <vfprintf+0x374>
    3966:	85 32       	cpi	r24, 0x25	; 37
    3968:	39 f4       	brne	.+14     	; 0x3978 <vfprintf+0x4a>
    396a:	93 fd       	sbrc	r25, 3
    396c:	85 91       	lpm	r24, Z+
    396e:	93 ff       	sbrs	r25, 3
    3970:	81 91       	ld	r24, Z+
    3972:	6f 01       	movw	r12, r30
    3974:	85 32       	cpi	r24, 0x25	; 37
    3976:	21 f4       	brne	.+8      	; 0x3980 <vfprintf+0x52>
    3978:	b7 01       	movw	r22, r14
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	b1 d1       	rcall	.+866    	; 0x3ce0 <fputc>
    397e:	e8 cf       	rjmp	.-48     	; 0x3950 <vfprintf+0x22>
    3980:	51 2c       	mov	r5, r1
    3982:	31 2c       	mov	r3, r1
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	20 32       	cpi	r18, 0x20	; 32
    3988:	a0 f4       	brcc	.+40     	; 0x39b2 <vfprintf+0x84>
    398a:	8b 32       	cpi	r24, 0x2B	; 43
    398c:	69 f0       	breq	.+26     	; 0x39a8 <vfprintf+0x7a>
    398e:	30 f4       	brcc	.+12     	; 0x399c <vfprintf+0x6e>
    3990:	80 32       	cpi	r24, 0x20	; 32
    3992:	59 f0       	breq	.+22     	; 0x39aa <vfprintf+0x7c>
    3994:	83 32       	cpi	r24, 0x23	; 35
    3996:	69 f4       	brne	.+26     	; 0x39b2 <vfprintf+0x84>
    3998:	20 61       	ori	r18, 0x10	; 16
    399a:	2c c0       	rjmp	.+88     	; 0x39f4 <vfprintf+0xc6>
    399c:	8d 32       	cpi	r24, 0x2D	; 45
    399e:	39 f0       	breq	.+14     	; 0x39ae <vfprintf+0x80>
    39a0:	80 33       	cpi	r24, 0x30	; 48
    39a2:	39 f4       	brne	.+14     	; 0x39b2 <vfprintf+0x84>
    39a4:	21 60       	ori	r18, 0x01	; 1
    39a6:	26 c0       	rjmp	.+76     	; 0x39f4 <vfprintf+0xc6>
    39a8:	22 60       	ori	r18, 0x02	; 2
    39aa:	24 60       	ori	r18, 0x04	; 4
    39ac:	23 c0       	rjmp	.+70     	; 0x39f4 <vfprintf+0xc6>
    39ae:	28 60       	ori	r18, 0x08	; 8
    39b0:	21 c0       	rjmp	.+66     	; 0x39f4 <vfprintf+0xc6>
    39b2:	27 fd       	sbrc	r18, 7
    39b4:	27 c0       	rjmp	.+78     	; 0x3a04 <vfprintf+0xd6>
    39b6:	30 ed       	ldi	r19, 0xD0	; 208
    39b8:	38 0f       	add	r19, r24
    39ba:	3a 30       	cpi	r19, 0x0A	; 10
    39bc:	78 f4       	brcc	.+30     	; 0x39dc <vfprintf+0xae>
    39be:	26 ff       	sbrs	r18, 6
    39c0:	06 c0       	rjmp	.+12     	; 0x39ce <vfprintf+0xa0>
    39c2:	fa e0       	ldi	r31, 0x0A	; 10
    39c4:	5f 9e       	mul	r5, r31
    39c6:	30 0d       	add	r19, r0
    39c8:	11 24       	eor	r1, r1
    39ca:	53 2e       	mov	r5, r19
    39cc:	13 c0       	rjmp	.+38     	; 0x39f4 <vfprintf+0xc6>
    39ce:	8a e0       	ldi	r24, 0x0A	; 10
    39d0:	38 9e       	mul	r3, r24
    39d2:	30 0d       	add	r19, r0
    39d4:	11 24       	eor	r1, r1
    39d6:	33 2e       	mov	r3, r19
    39d8:	20 62       	ori	r18, 0x20	; 32
    39da:	0c c0       	rjmp	.+24     	; 0x39f4 <vfprintf+0xc6>
    39dc:	8e 32       	cpi	r24, 0x2E	; 46
    39de:	21 f4       	brne	.+8      	; 0x39e8 <vfprintf+0xba>
    39e0:	26 fd       	sbrc	r18, 6
    39e2:	5f c1       	rjmp	.+702    	; 0x3ca2 <vfprintf+0x374>
    39e4:	20 64       	ori	r18, 0x40	; 64
    39e6:	06 c0       	rjmp	.+12     	; 0x39f4 <vfprintf+0xc6>
    39e8:	8c 36       	cpi	r24, 0x6C	; 108
    39ea:	11 f4       	brne	.+4      	; 0x39f0 <vfprintf+0xc2>
    39ec:	20 68       	ori	r18, 0x80	; 128
    39ee:	02 c0       	rjmp	.+4      	; 0x39f4 <vfprintf+0xc6>
    39f0:	88 36       	cpi	r24, 0x68	; 104
    39f2:	41 f4       	brne	.+16     	; 0x3a04 <vfprintf+0xd6>
    39f4:	f6 01       	movw	r30, r12
    39f6:	93 fd       	sbrc	r25, 3
    39f8:	85 91       	lpm	r24, Z+
    39fa:	93 ff       	sbrs	r25, 3
    39fc:	81 91       	ld	r24, Z+
    39fe:	6f 01       	movw	r12, r30
    3a00:	81 11       	cpse	r24, r1
    3a02:	c1 cf       	rjmp	.-126    	; 0x3986 <vfprintf+0x58>
    3a04:	98 2f       	mov	r25, r24
    3a06:	9f 7d       	andi	r25, 0xDF	; 223
    3a08:	95 54       	subi	r25, 0x45	; 69
    3a0a:	93 30       	cpi	r25, 0x03	; 3
    3a0c:	28 f4       	brcc	.+10     	; 0x3a18 <vfprintf+0xea>
    3a0e:	0c 5f       	subi	r16, 0xFC	; 252
    3a10:	1f 4f       	sbci	r17, 0xFF	; 255
    3a12:	ff e3       	ldi	r31, 0x3F	; 63
    3a14:	f9 83       	std	Y+1, r31	; 0x01
    3a16:	0d c0       	rjmp	.+26     	; 0x3a32 <vfprintf+0x104>
    3a18:	83 36       	cpi	r24, 0x63	; 99
    3a1a:	31 f0       	breq	.+12     	; 0x3a28 <vfprintf+0xfa>
    3a1c:	83 37       	cpi	r24, 0x73	; 115
    3a1e:	71 f0       	breq	.+28     	; 0x3a3c <vfprintf+0x10e>
    3a20:	83 35       	cpi	r24, 0x53	; 83
    3a22:	09 f0       	breq	.+2      	; 0x3a26 <vfprintf+0xf8>
    3a24:	57 c0       	rjmp	.+174    	; 0x3ad4 <vfprintf+0x1a6>
    3a26:	21 c0       	rjmp	.+66     	; 0x3a6a <vfprintf+0x13c>
    3a28:	f8 01       	movw	r30, r16
    3a2a:	80 81       	ld	r24, Z
    3a2c:	89 83       	std	Y+1, r24	; 0x01
    3a2e:	0e 5f       	subi	r16, 0xFE	; 254
    3a30:	1f 4f       	sbci	r17, 0xFF	; 255
    3a32:	44 24       	eor	r4, r4
    3a34:	43 94       	inc	r4
    3a36:	51 2c       	mov	r5, r1
    3a38:	54 01       	movw	r10, r8
    3a3a:	14 c0       	rjmp	.+40     	; 0x3a64 <vfprintf+0x136>
    3a3c:	38 01       	movw	r6, r16
    3a3e:	f2 e0       	ldi	r31, 0x02	; 2
    3a40:	6f 0e       	add	r6, r31
    3a42:	71 1c       	adc	r7, r1
    3a44:	f8 01       	movw	r30, r16
    3a46:	a0 80       	ld	r10, Z
    3a48:	b1 80       	ldd	r11, Z+1	; 0x01
    3a4a:	26 ff       	sbrs	r18, 6
    3a4c:	03 c0       	rjmp	.+6      	; 0x3a54 <vfprintf+0x126>
    3a4e:	65 2d       	mov	r22, r5
    3a50:	70 e0       	ldi	r23, 0x00	; 0
    3a52:	02 c0       	rjmp	.+4      	; 0x3a58 <vfprintf+0x12a>
    3a54:	6f ef       	ldi	r22, 0xFF	; 255
    3a56:	7f ef       	ldi	r23, 0xFF	; 255
    3a58:	c5 01       	movw	r24, r10
    3a5a:	2c 87       	std	Y+12, r18	; 0x0c
    3a5c:	36 d1       	rcall	.+620    	; 0x3cca <strnlen>
    3a5e:	2c 01       	movw	r4, r24
    3a60:	83 01       	movw	r16, r6
    3a62:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a64:	2f 77       	andi	r18, 0x7F	; 127
    3a66:	22 2e       	mov	r2, r18
    3a68:	16 c0       	rjmp	.+44     	; 0x3a96 <vfprintf+0x168>
    3a6a:	38 01       	movw	r6, r16
    3a6c:	f2 e0       	ldi	r31, 0x02	; 2
    3a6e:	6f 0e       	add	r6, r31
    3a70:	71 1c       	adc	r7, r1
    3a72:	f8 01       	movw	r30, r16
    3a74:	a0 80       	ld	r10, Z
    3a76:	b1 80       	ldd	r11, Z+1	; 0x01
    3a78:	26 ff       	sbrs	r18, 6
    3a7a:	03 c0       	rjmp	.+6      	; 0x3a82 <vfprintf+0x154>
    3a7c:	65 2d       	mov	r22, r5
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	02 c0       	rjmp	.+4      	; 0x3a86 <vfprintf+0x158>
    3a82:	6f ef       	ldi	r22, 0xFF	; 255
    3a84:	7f ef       	ldi	r23, 0xFF	; 255
    3a86:	c5 01       	movw	r24, r10
    3a88:	2c 87       	std	Y+12, r18	; 0x0c
    3a8a:	14 d1       	rcall	.+552    	; 0x3cb4 <strnlen_P>
    3a8c:	2c 01       	movw	r4, r24
    3a8e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a90:	20 68       	ori	r18, 0x80	; 128
    3a92:	22 2e       	mov	r2, r18
    3a94:	83 01       	movw	r16, r6
    3a96:	23 fc       	sbrc	r2, 3
    3a98:	19 c0       	rjmp	.+50     	; 0x3acc <vfprintf+0x19e>
    3a9a:	83 2d       	mov	r24, r3
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	48 16       	cp	r4, r24
    3aa0:	59 06       	cpc	r5, r25
    3aa2:	a0 f4       	brcc	.+40     	; 0x3acc <vfprintf+0x19e>
    3aa4:	b7 01       	movw	r22, r14
    3aa6:	80 e2       	ldi	r24, 0x20	; 32
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	1a d1       	rcall	.+564    	; 0x3ce0 <fputc>
    3aac:	3a 94       	dec	r3
    3aae:	f5 cf       	rjmp	.-22     	; 0x3a9a <vfprintf+0x16c>
    3ab0:	f5 01       	movw	r30, r10
    3ab2:	27 fc       	sbrc	r2, 7
    3ab4:	85 91       	lpm	r24, Z+
    3ab6:	27 fe       	sbrs	r2, 7
    3ab8:	81 91       	ld	r24, Z+
    3aba:	5f 01       	movw	r10, r30
    3abc:	b7 01       	movw	r22, r14
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	0f d1       	rcall	.+542    	; 0x3ce0 <fputc>
    3ac2:	31 10       	cpse	r3, r1
    3ac4:	3a 94       	dec	r3
    3ac6:	f1 e0       	ldi	r31, 0x01	; 1
    3ac8:	4f 1a       	sub	r4, r31
    3aca:	51 08       	sbc	r5, r1
    3acc:	41 14       	cp	r4, r1
    3ace:	51 04       	cpc	r5, r1
    3ad0:	79 f7       	brne	.-34     	; 0x3ab0 <vfprintf+0x182>
    3ad2:	de c0       	rjmp	.+444    	; 0x3c90 <vfprintf+0x362>
    3ad4:	84 36       	cpi	r24, 0x64	; 100
    3ad6:	11 f0       	breq	.+4      	; 0x3adc <vfprintf+0x1ae>
    3ad8:	89 36       	cpi	r24, 0x69	; 105
    3ada:	31 f5       	brne	.+76     	; 0x3b28 <vfprintf+0x1fa>
    3adc:	f8 01       	movw	r30, r16
    3ade:	27 ff       	sbrs	r18, 7
    3ae0:	07 c0       	rjmp	.+14     	; 0x3af0 <vfprintf+0x1c2>
    3ae2:	60 81       	ld	r22, Z
    3ae4:	71 81       	ldd	r23, Z+1	; 0x01
    3ae6:	82 81       	ldd	r24, Z+2	; 0x02
    3ae8:	93 81       	ldd	r25, Z+3	; 0x03
    3aea:	0c 5f       	subi	r16, 0xFC	; 252
    3aec:	1f 4f       	sbci	r17, 0xFF	; 255
    3aee:	08 c0       	rjmp	.+16     	; 0x3b00 <vfprintf+0x1d2>
    3af0:	60 81       	ld	r22, Z
    3af2:	71 81       	ldd	r23, Z+1	; 0x01
    3af4:	07 2e       	mov	r0, r23
    3af6:	00 0c       	add	r0, r0
    3af8:	88 0b       	sbc	r24, r24
    3afa:	99 0b       	sbc	r25, r25
    3afc:	0e 5f       	subi	r16, 0xFE	; 254
    3afe:	1f 4f       	sbci	r17, 0xFF	; 255
    3b00:	2f 76       	andi	r18, 0x6F	; 111
    3b02:	72 2e       	mov	r7, r18
    3b04:	97 ff       	sbrs	r25, 7
    3b06:	09 c0       	rjmp	.+18     	; 0x3b1a <vfprintf+0x1ec>
    3b08:	90 95       	com	r25
    3b0a:	80 95       	com	r24
    3b0c:	70 95       	com	r23
    3b0e:	61 95       	neg	r22
    3b10:	7f 4f       	sbci	r23, 0xFF	; 255
    3b12:	8f 4f       	sbci	r24, 0xFF	; 255
    3b14:	9f 4f       	sbci	r25, 0xFF	; 255
    3b16:	20 68       	ori	r18, 0x80	; 128
    3b18:	72 2e       	mov	r7, r18
    3b1a:	2a e0       	ldi	r18, 0x0A	; 10
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	a4 01       	movw	r20, r8
    3b20:	17 d1       	rcall	.+558    	; 0x3d50 <__ultoa_invert>
    3b22:	a8 2e       	mov	r10, r24
    3b24:	a8 18       	sub	r10, r8
    3b26:	43 c0       	rjmp	.+134    	; 0x3bae <vfprintf+0x280>
    3b28:	85 37       	cpi	r24, 0x75	; 117
    3b2a:	29 f4       	brne	.+10     	; 0x3b36 <vfprintf+0x208>
    3b2c:	2f 7e       	andi	r18, 0xEF	; 239
    3b2e:	b2 2e       	mov	r11, r18
    3b30:	2a e0       	ldi	r18, 0x0A	; 10
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	25 c0       	rjmp	.+74     	; 0x3b80 <vfprintf+0x252>
    3b36:	f2 2f       	mov	r31, r18
    3b38:	f9 7f       	andi	r31, 0xF9	; 249
    3b3a:	bf 2e       	mov	r11, r31
    3b3c:	8f 36       	cpi	r24, 0x6F	; 111
    3b3e:	c1 f0       	breq	.+48     	; 0x3b70 <vfprintf+0x242>
    3b40:	18 f4       	brcc	.+6      	; 0x3b48 <vfprintf+0x21a>
    3b42:	88 35       	cpi	r24, 0x58	; 88
    3b44:	79 f0       	breq	.+30     	; 0x3b64 <vfprintf+0x236>
    3b46:	ad c0       	rjmp	.+346    	; 0x3ca2 <vfprintf+0x374>
    3b48:	80 37       	cpi	r24, 0x70	; 112
    3b4a:	19 f0       	breq	.+6      	; 0x3b52 <vfprintf+0x224>
    3b4c:	88 37       	cpi	r24, 0x78	; 120
    3b4e:	21 f0       	breq	.+8      	; 0x3b58 <vfprintf+0x22a>
    3b50:	a8 c0       	rjmp	.+336    	; 0x3ca2 <vfprintf+0x374>
    3b52:	2f 2f       	mov	r18, r31
    3b54:	20 61       	ori	r18, 0x10	; 16
    3b56:	b2 2e       	mov	r11, r18
    3b58:	b4 fe       	sbrs	r11, 4
    3b5a:	0d c0       	rjmp	.+26     	; 0x3b76 <vfprintf+0x248>
    3b5c:	8b 2d       	mov	r24, r11
    3b5e:	84 60       	ori	r24, 0x04	; 4
    3b60:	b8 2e       	mov	r11, r24
    3b62:	09 c0       	rjmp	.+18     	; 0x3b76 <vfprintf+0x248>
    3b64:	24 ff       	sbrs	r18, 4
    3b66:	0a c0       	rjmp	.+20     	; 0x3b7c <vfprintf+0x24e>
    3b68:	9f 2f       	mov	r25, r31
    3b6a:	96 60       	ori	r25, 0x06	; 6
    3b6c:	b9 2e       	mov	r11, r25
    3b6e:	06 c0       	rjmp	.+12     	; 0x3b7c <vfprintf+0x24e>
    3b70:	28 e0       	ldi	r18, 0x08	; 8
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	05 c0       	rjmp	.+10     	; 0x3b80 <vfprintf+0x252>
    3b76:	20 e1       	ldi	r18, 0x10	; 16
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	02 c0       	rjmp	.+4      	; 0x3b80 <vfprintf+0x252>
    3b7c:	20 e1       	ldi	r18, 0x10	; 16
    3b7e:	32 e0       	ldi	r19, 0x02	; 2
    3b80:	f8 01       	movw	r30, r16
    3b82:	b7 fe       	sbrs	r11, 7
    3b84:	07 c0       	rjmp	.+14     	; 0x3b94 <vfprintf+0x266>
    3b86:	60 81       	ld	r22, Z
    3b88:	71 81       	ldd	r23, Z+1	; 0x01
    3b8a:	82 81       	ldd	r24, Z+2	; 0x02
    3b8c:	93 81       	ldd	r25, Z+3	; 0x03
    3b8e:	0c 5f       	subi	r16, 0xFC	; 252
    3b90:	1f 4f       	sbci	r17, 0xFF	; 255
    3b92:	06 c0       	rjmp	.+12     	; 0x3ba0 <vfprintf+0x272>
    3b94:	60 81       	ld	r22, Z
    3b96:	71 81       	ldd	r23, Z+1	; 0x01
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	0e 5f       	subi	r16, 0xFE	; 254
    3b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3ba0:	a4 01       	movw	r20, r8
    3ba2:	d6 d0       	rcall	.+428    	; 0x3d50 <__ultoa_invert>
    3ba4:	a8 2e       	mov	r10, r24
    3ba6:	a8 18       	sub	r10, r8
    3ba8:	fb 2d       	mov	r31, r11
    3baa:	ff 77       	andi	r31, 0x7F	; 127
    3bac:	7f 2e       	mov	r7, r31
    3bae:	76 fe       	sbrs	r7, 6
    3bb0:	0b c0       	rjmp	.+22     	; 0x3bc8 <vfprintf+0x29a>
    3bb2:	37 2d       	mov	r19, r7
    3bb4:	3e 7f       	andi	r19, 0xFE	; 254
    3bb6:	a5 14       	cp	r10, r5
    3bb8:	50 f4       	brcc	.+20     	; 0x3bce <vfprintf+0x2a0>
    3bba:	74 fe       	sbrs	r7, 4
    3bbc:	0a c0       	rjmp	.+20     	; 0x3bd2 <vfprintf+0x2a4>
    3bbe:	72 fc       	sbrc	r7, 2
    3bc0:	08 c0       	rjmp	.+16     	; 0x3bd2 <vfprintf+0x2a4>
    3bc2:	37 2d       	mov	r19, r7
    3bc4:	3e 7e       	andi	r19, 0xEE	; 238
    3bc6:	05 c0       	rjmp	.+10     	; 0x3bd2 <vfprintf+0x2a4>
    3bc8:	ba 2c       	mov	r11, r10
    3bca:	37 2d       	mov	r19, r7
    3bcc:	03 c0       	rjmp	.+6      	; 0x3bd4 <vfprintf+0x2a6>
    3bce:	ba 2c       	mov	r11, r10
    3bd0:	01 c0       	rjmp	.+2      	; 0x3bd4 <vfprintf+0x2a6>
    3bd2:	b5 2c       	mov	r11, r5
    3bd4:	34 ff       	sbrs	r19, 4
    3bd6:	0d c0       	rjmp	.+26     	; 0x3bf2 <vfprintf+0x2c4>
    3bd8:	fe 01       	movw	r30, r28
    3bda:	ea 0d       	add	r30, r10
    3bdc:	f1 1d       	adc	r31, r1
    3bde:	80 81       	ld	r24, Z
    3be0:	80 33       	cpi	r24, 0x30	; 48
    3be2:	11 f4       	brne	.+4      	; 0x3be8 <vfprintf+0x2ba>
    3be4:	39 7e       	andi	r19, 0xE9	; 233
    3be6:	09 c0       	rjmp	.+18     	; 0x3bfa <vfprintf+0x2cc>
    3be8:	32 ff       	sbrs	r19, 2
    3bea:	06 c0       	rjmp	.+12     	; 0x3bf8 <vfprintf+0x2ca>
    3bec:	b3 94       	inc	r11
    3bee:	b3 94       	inc	r11
    3bf0:	04 c0       	rjmp	.+8      	; 0x3bfa <vfprintf+0x2cc>
    3bf2:	83 2f       	mov	r24, r19
    3bf4:	86 78       	andi	r24, 0x86	; 134
    3bf6:	09 f0       	breq	.+2      	; 0x3bfa <vfprintf+0x2cc>
    3bf8:	b3 94       	inc	r11
    3bfa:	33 fd       	sbrc	r19, 3
    3bfc:	12 c0       	rjmp	.+36     	; 0x3c22 <vfprintf+0x2f4>
    3bfe:	30 ff       	sbrs	r19, 0
    3c00:	06 c0       	rjmp	.+12     	; 0x3c0e <vfprintf+0x2e0>
    3c02:	5a 2c       	mov	r5, r10
    3c04:	b3 14       	cp	r11, r3
    3c06:	18 f4       	brcc	.+6      	; 0x3c0e <vfprintf+0x2e0>
    3c08:	53 0c       	add	r5, r3
    3c0a:	5b 18       	sub	r5, r11
    3c0c:	b3 2c       	mov	r11, r3
    3c0e:	b3 14       	cp	r11, r3
    3c10:	60 f4       	brcc	.+24     	; 0x3c2a <vfprintf+0x2fc>
    3c12:	b7 01       	movw	r22, r14
    3c14:	80 e2       	ldi	r24, 0x20	; 32
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	3c 87       	std	Y+12, r19	; 0x0c
    3c1a:	62 d0       	rcall	.+196    	; 0x3ce0 <fputc>
    3c1c:	b3 94       	inc	r11
    3c1e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c20:	f6 cf       	rjmp	.-20     	; 0x3c0e <vfprintf+0x2e0>
    3c22:	b3 14       	cp	r11, r3
    3c24:	10 f4       	brcc	.+4      	; 0x3c2a <vfprintf+0x2fc>
    3c26:	3b 18       	sub	r3, r11
    3c28:	01 c0       	rjmp	.+2      	; 0x3c2c <vfprintf+0x2fe>
    3c2a:	31 2c       	mov	r3, r1
    3c2c:	34 ff       	sbrs	r19, 4
    3c2e:	11 c0       	rjmp	.+34     	; 0x3c52 <vfprintf+0x324>
    3c30:	b7 01       	movw	r22, r14
    3c32:	80 e3       	ldi	r24, 0x30	; 48
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	3c 87       	std	Y+12, r19	; 0x0c
    3c38:	53 d0       	rcall	.+166    	; 0x3ce0 <fputc>
    3c3a:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c3c:	32 ff       	sbrs	r19, 2
    3c3e:	16 c0       	rjmp	.+44     	; 0x3c6c <vfprintf+0x33e>
    3c40:	31 fd       	sbrc	r19, 1
    3c42:	03 c0       	rjmp	.+6      	; 0x3c4a <vfprintf+0x31c>
    3c44:	88 e7       	ldi	r24, 0x78	; 120
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	02 c0       	rjmp	.+4      	; 0x3c4e <vfprintf+0x320>
    3c4a:	88 e5       	ldi	r24, 0x58	; 88
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	b7 01       	movw	r22, r14
    3c50:	0c c0       	rjmp	.+24     	; 0x3c6a <vfprintf+0x33c>
    3c52:	83 2f       	mov	r24, r19
    3c54:	86 78       	andi	r24, 0x86	; 134
    3c56:	51 f0       	breq	.+20     	; 0x3c6c <vfprintf+0x33e>
    3c58:	31 ff       	sbrs	r19, 1
    3c5a:	02 c0       	rjmp	.+4      	; 0x3c60 <vfprintf+0x332>
    3c5c:	8b e2       	ldi	r24, 0x2B	; 43
    3c5e:	01 c0       	rjmp	.+2      	; 0x3c62 <vfprintf+0x334>
    3c60:	80 e2       	ldi	r24, 0x20	; 32
    3c62:	37 fd       	sbrc	r19, 7
    3c64:	8d e2       	ldi	r24, 0x2D	; 45
    3c66:	b7 01       	movw	r22, r14
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	3a d0       	rcall	.+116    	; 0x3ce0 <fputc>
    3c6c:	a5 14       	cp	r10, r5
    3c6e:	30 f4       	brcc	.+12     	; 0x3c7c <vfprintf+0x34e>
    3c70:	b7 01       	movw	r22, r14
    3c72:	80 e3       	ldi	r24, 0x30	; 48
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	34 d0       	rcall	.+104    	; 0x3ce0 <fputc>
    3c78:	5a 94       	dec	r5
    3c7a:	f8 cf       	rjmp	.-16     	; 0x3c6c <vfprintf+0x33e>
    3c7c:	aa 94       	dec	r10
    3c7e:	f4 01       	movw	r30, r8
    3c80:	ea 0d       	add	r30, r10
    3c82:	f1 1d       	adc	r31, r1
    3c84:	80 81       	ld	r24, Z
    3c86:	b7 01       	movw	r22, r14
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	2a d0       	rcall	.+84     	; 0x3ce0 <fputc>
    3c8c:	a1 10       	cpse	r10, r1
    3c8e:	f6 cf       	rjmp	.-20     	; 0x3c7c <vfprintf+0x34e>
    3c90:	33 20       	and	r3, r3
    3c92:	09 f4       	brne	.+2      	; 0x3c96 <vfprintf+0x368>
    3c94:	5d ce       	rjmp	.-838    	; 0x3950 <vfprintf+0x22>
    3c96:	b7 01       	movw	r22, r14
    3c98:	80 e2       	ldi	r24, 0x20	; 32
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	21 d0       	rcall	.+66     	; 0x3ce0 <fputc>
    3c9e:	3a 94       	dec	r3
    3ca0:	f7 cf       	rjmp	.-18     	; 0x3c90 <vfprintf+0x362>
    3ca2:	f7 01       	movw	r30, r14
    3ca4:	86 81       	ldd	r24, Z+6	; 0x06
    3ca6:	97 81       	ldd	r25, Z+7	; 0x07
    3ca8:	02 c0       	rjmp	.+4      	; 0x3cae <vfprintf+0x380>
    3caa:	8f ef       	ldi	r24, 0xFF	; 255
    3cac:	9f ef       	ldi	r25, 0xFF	; 255
    3cae:	2c 96       	adiw	r28, 0x0c	; 12
    3cb0:	e2 e1       	ldi	r30, 0x12	; 18
    3cb2:	c8 c0       	rjmp	.+400    	; 0x3e44 <__epilogue_restores__>

00003cb4 <strnlen_P>:
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	05 90       	lpm	r0, Z+
    3cb8:	61 50       	subi	r22, 0x01	; 1
    3cba:	70 40       	sbci	r23, 0x00	; 0
    3cbc:	01 10       	cpse	r0, r1
    3cbe:	d8 f7       	brcc	.-10     	; 0x3cb6 <strnlen_P+0x2>
    3cc0:	80 95       	com	r24
    3cc2:	90 95       	com	r25
    3cc4:	8e 0f       	add	r24, r30
    3cc6:	9f 1f       	adc	r25, r31
    3cc8:	08 95       	ret

00003cca <strnlen>:
    3cca:	fc 01       	movw	r30, r24
    3ccc:	61 50       	subi	r22, 0x01	; 1
    3cce:	70 40       	sbci	r23, 0x00	; 0
    3cd0:	01 90       	ld	r0, Z+
    3cd2:	01 10       	cpse	r0, r1
    3cd4:	d8 f7       	brcc	.-10     	; 0x3ccc <strnlen+0x2>
    3cd6:	80 95       	com	r24
    3cd8:	90 95       	com	r25
    3cda:	8e 0f       	add	r24, r30
    3cdc:	9f 1f       	adc	r25, r31
    3cde:	08 95       	ret

00003ce0 <fputc>:
    3ce0:	0f 93       	push	r16
    3ce2:	1f 93       	push	r17
    3ce4:	cf 93       	push	r28
    3ce6:	df 93       	push	r29
    3ce8:	fb 01       	movw	r30, r22
    3cea:	23 81       	ldd	r18, Z+3	; 0x03
    3cec:	21 fd       	sbrc	r18, 1
    3cee:	03 c0       	rjmp	.+6      	; 0x3cf6 <fputc+0x16>
    3cf0:	8f ef       	ldi	r24, 0xFF	; 255
    3cf2:	9f ef       	ldi	r25, 0xFF	; 255
    3cf4:	28 c0       	rjmp	.+80     	; 0x3d46 <fputc+0x66>
    3cf6:	22 ff       	sbrs	r18, 2
    3cf8:	16 c0       	rjmp	.+44     	; 0x3d26 <fputc+0x46>
    3cfa:	46 81       	ldd	r20, Z+6	; 0x06
    3cfc:	57 81       	ldd	r21, Z+7	; 0x07
    3cfe:	24 81       	ldd	r18, Z+4	; 0x04
    3d00:	35 81       	ldd	r19, Z+5	; 0x05
    3d02:	42 17       	cp	r20, r18
    3d04:	53 07       	cpc	r21, r19
    3d06:	44 f4       	brge	.+16     	; 0x3d18 <fputc+0x38>
    3d08:	a0 81       	ld	r26, Z
    3d0a:	b1 81       	ldd	r27, Z+1	; 0x01
    3d0c:	9d 01       	movw	r18, r26
    3d0e:	2f 5f       	subi	r18, 0xFF	; 255
    3d10:	3f 4f       	sbci	r19, 0xFF	; 255
    3d12:	31 83       	std	Z+1, r19	; 0x01
    3d14:	20 83       	st	Z, r18
    3d16:	8c 93       	st	X, r24
    3d18:	26 81       	ldd	r18, Z+6	; 0x06
    3d1a:	37 81       	ldd	r19, Z+7	; 0x07
    3d1c:	2f 5f       	subi	r18, 0xFF	; 255
    3d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d20:	37 83       	std	Z+7, r19	; 0x07
    3d22:	26 83       	std	Z+6, r18	; 0x06
    3d24:	10 c0       	rjmp	.+32     	; 0x3d46 <fputc+0x66>
    3d26:	eb 01       	movw	r28, r22
    3d28:	09 2f       	mov	r16, r25
    3d2a:	18 2f       	mov	r17, r24
    3d2c:	00 84       	ldd	r0, Z+8	; 0x08
    3d2e:	f1 85       	ldd	r31, Z+9	; 0x09
    3d30:	e0 2d       	mov	r30, r0
    3d32:	09 95       	icall
    3d34:	89 2b       	or	r24, r25
    3d36:	e1 f6       	brne	.-72     	; 0x3cf0 <fputc+0x10>
    3d38:	8e 81       	ldd	r24, Y+6	; 0x06
    3d3a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d3c:	01 96       	adiw	r24, 0x01	; 1
    3d3e:	9f 83       	std	Y+7, r25	; 0x07
    3d40:	8e 83       	std	Y+6, r24	; 0x06
    3d42:	81 2f       	mov	r24, r17
    3d44:	90 2f       	mov	r25, r16
    3d46:	df 91       	pop	r29
    3d48:	cf 91       	pop	r28
    3d4a:	1f 91       	pop	r17
    3d4c:	0f 91       	pop	r16
    3d4e:	08 95       	ret

00003d50 <__ultoa_invert>:
    3d50:	fa 01       	movw	r30, r20
    3d52:	aa 27       	eor	r26, r26
    3d54:	28 30       	cpi	r18, 0x08	; 8
    3d56:	51 f1       	breq	.+84     	; 0x3dac <__ultoa_invert+0x5c>
    3d58:	20 31       	cpi	r18, 0x10	; 16
    3d5a:	81 f1       	breq	.+96     	; 0x3dbc <__ultoa_invert+0x6c>
    3d5c:	e8 94       	clt
    3d5e:	6f 93       	push	r22
    3d60:	6e 7f       	andi	r22, 0xFE	; 254
    3d62:	6e 5f       	subi	r22, 0xFE	; 254
    3d64:	7f 4f       	sbci	r23, 0xFF	; 255
    3d66:	8f 4f       	sbci	r24, 0xFF	; 255
    3d68:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6a:	af 4f       	sbci	r26, 0xFF	; 255
    3d6c:	b1 e0       	ldi	r27, 0x01	; 1
    3d6e:	3e d0       	rcall	.+124    	; 0x3dec <__ultoa_invert+0x9c>
    3d70:	b4 e0       	ldi	r27, 0x04	; 4
    3d72:	3c d0       	rcall	.+120    	; 0x3dec <__ultoa_invert+0x9c>
    3d74:	67 0f       	add	r22, r23
    3d76:	78 1f       	adc	r23, r24
    3d78:	89 1f       	adc	r24, r25
    3d7a:	9a 1f       	adc	r25, r26
    3d7c:	a1 1d       	adc	r26, r1
    3d7e:	68 0f       	add	r22, r24
    3d80:	79 1f       	adc	r23, r25
    3d82:	8a 1f       	adc	r24, r26
    3d84:	91 1d       	adc	r25, r1
    3d86:	a1 1d       	adc	r26, r1
    3d88:	6a 0f       	add	r22, r26
    3d8a:	71 1d       	adc	r23, r1
    3d8c:	81 1d       	adc	r24, r1
    3d8e:	91 1d       	adc	r25, r1
    3d90:	a1 1d       	adc	r26, r1
    3d92:	20 d0       	rcall	.+64     	; 0x3dd4 <__ultoa_invert+0x84>
    3d94:	09 f4       	brne	.+2      	; 0x3d98 <__ultoa_invert+0x48>
    3d96:	68 94       	set
    3d98:	3f 91       	pop	r19
    3d9a:	2a e0       	ldi	r18, 0x0A	; 10
    3d9c:	26 9f       	mul	r18, r22
    3d9e:	11 24       	eor	r1, r1
    3da0:	30 19       	sub	r19, r0
    3da2:	30 5d       	subi	r19, 0xD0	; 208
    3da4:	31 93       	st	Z+, r19
    3da6:	de f6       	brtc	.-74     	; 0x3d5e <__ultoa_invert+0xe>
    3da8:	cf 01       	movw	r24, r30
    3daa:	08 95       	ret
    3dac:	46 2f       	mov	r20, r22
    3dae:	47 70       	andi	r20, 0x07	; 7
    3db0:	40 5d       	subi	r20, 0xD0	; 208
    3db2:	41 93       	st	Z+, r20
    3db4:	b3 e0       	ldi	r27, 0x03	; 3
    3db6:	0f d0       	rcall	.+30     	; 0x3dd6 <__ultoa_invert+0x86>
    3db8:	c9 f7       	brne	.-14     	; 0x3dac <__ultoa_invert+0x5c>
    3dba:	f6 cf       	rjmp	.-20     	; 0x3da8 <__ultoa_invert+0x58>
    3dbc:	46 2f       	mov	r20, r22
    3dbe:	4f 70       	andi	r20, 0x0F	; 15
    3dc0:	40 5d       	subi	r20, 0xD0	; 208
    3dc2:	4a 33       	cpi	r20, 0x3A	; 58
    3dc4:	18 f0       	brcs	.+6      	; 0x3dcc <__ultoa_invert+0x7c>
    3dc6:	49 5d       	subi	r20, 0xD9	; 217
    3dc8:	31 fd       	sbrc	r19, 1
    3dca:	40 52       	subi	r20, 0x20	; 32
    3dcc:	41 93       	st	Z+, r20
    3dce:	02 d0       	rcall	.+4      	; 0x3dd4 <__ultoa_invert+0x84>
    3dd0:	a9 f7       	brne	.-22     	; 0x3dbc <__ultoa_invert+0x6c>
    3dd2:	ea cf       	rjmp	.-44     	; 0x3da8 <__ultoa_invert+0x58>
    3dd4:	b4 e0       	ldi	r27, 0x04	; 4
    3dd6:	a6 95       	lsr	r26
    3dd8:	97 95       	ror	r25
    3dda:	87 95       	ror	r24
    3ddc:	77 95       	ror	r23
    3dde:	67 95       	ror	r22
    3de0:	ba 95       	dec	r27
    3de2:	c9 f7       	brne	.-14     	; 0x3dd6 <__ultoa_invert+0x86>
    3de4:	00 97       	sbiw	r24, 0x00	; 0
    3de6:	61 05       	cpc	r22, r1
    3de8:	71 05       	cpc	r23, r1
    3dea:	08 95       	ret
    3dec:	9b 01       	movw	r18, r22
    3dee:	ac 01       	movw	r20, r24
    3df0:	0a 2e       	mov	r0, r26
    3df2:	06 94       	lsr	r0
    3df4:	57 95       	ror	r21
    3df6:	47 95       	ror	r20
    3df8:	37 95       	ror	r19
    3dfa:	27 95       	ror	r18
    3dfc:	ba 95       	dec	r27
    3dfe:	c9 f7       	brne	.-14     	; 0x3df2 <__ultoa_invert+0xa2>
    3e00:	62 0f       	add	r22, r18
    3e02:	73 1f       	adc	r23, r19
    3e04:	84 1f       	adc	r24, r20
    3e06:	95 1f       	adc	r25, r21
    3e08:	a0 1d       	adc	r26, r0
    3e0a:	08 95       	ret

00003e0c <__prologue_saves__>:
    3e0c:	2f 92       	push	r2
    3e0e:	3f 92       	push	r3
    3e10:	4f 92       	push	r4
    3e12:	5f 92       	push	r5
    3e14:	6f 92       	push	r6
    3e16:	7f 92       	push	r7
    3e18:	8f 92       	push	r8
    3e1a:	9f 92       	push	r9
    3e1c:	af 92       	push	r10
    3e1e:	bf 92       	push	r11
    3e20:	cf 92       	push	r12
    3e22:	df 92       	push	r13
    3e24:	ef 92       	push	r14
    3e26:	ff 92       	push	r15
    3e28:	0f 93       	push	r16
    3e2a:	1f 93       	push	r17
    3e2c:	cf 93       	push	r28
    3e2e:	df 93       	push	r29
    3e30:	cd b7       	in	r28, 0x3d	; 61
    3e32:	de b7       	in	r29, 0x3e	; 62
    3e34:	ca 1b       	sub	r28, r26
    3e36:	db 0b       	sbc	r29, r27
    3e38:	0f b6       	in	r0, 0x3f	; 63
    3e3a:	f8 94       	cli
    3e3c:	de bf       	out	0x3e, r29	; 62
    3e3e:	0f be       	out	0x3f, r0	; 63
    3e40:	cd bf       	out	0x3d, r28	; 61
    3e42:	09 94       	ijmp

00003e44 <__epilogue_restores__>:
    3e44:	2a 88       	ldd	r2, Y+18	; 0x12
    3e46:	39 88       	ldd	r3, Y+17	; 0x11
    3e48:	48 88       	ldd	r4, Y+16	; 0x10
    3e4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e50:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e52:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e54:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e56:	b9 84       	ldd	r11, Y+9	; 0x09
    3e58:	c8 84       	ldd	r12, Y+8	; 0x08
    3e5a:	df 80       	ldd	r13, Y+7	; 0x07
    3e5c:	ee 80       	ldd	r14, Y+6	; 0x06
    3e5e:	fd 80       	ldd	r15, Y+5	; 0x05
    3e60:	0c 81       	ldd	r16, Y+4	; 0x04
    3e62:	1b 81       	ldd	r17, Y+3	; 0x03
    3e64:	aa 81       	ldd	r26, Y+2	; 0x02
    3e66:	b9 81       	ldd	r27, Y+1	; 0x01
    3e68:	ce 0f       	add	r28, r30
    3e6a:	d1 1d       	adc	r29, r1
    3e6c:	0f b6       	in	r0, 0x3f	; 63
    3e6e:	f8 94       	cli
    3e70:	de bf       	out	0x3e, r29	; 62
    3e72:	0f be       	out	0x3f, r0	; 63
    3e74:	cd bf       	out	0x3d, r28	; 61
    3e76:	ed 01       	movw	r28, r26
    3e78:	08 95       	ret

00003e7a <_exit>:
    3e7a:	f8 94       	cli

00003e7c <__stop_program>:
    3e7c:	ff cf       	rjmp	.-2      	; 0x3e7c <__stop_program>
