
Smart-LCD_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000498  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000050c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024b3  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd8  00000000  00000000  00002b77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001665  00000000  00000000  0000374f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b8  00000000  00000000  00004db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010d9e  00000000  00000000  0000516c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c9  00000000  00000000  00015f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000165d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000c16  00000000  00000000  000166eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	c3 c0       	rjmp	.+390    	; 0x18c <__vector_1>
   6:	00 00       	nop
   8:	cc c0       	rjmp	.+408    	; 0x1a2 <__vector_2>
   a:	00 00       	nop
   c:	d5 c0       	rjmp	.+426    	; 0x1b8 <__vector_3>
   e:	00 00       	nop
  10:	de c0       	rjmp	.+444    	; 0x1ce <__vector_4>
  12:	00 00       	nop
  14:	e7 c0       	rjmp	.+462    	; 0x1e4 <__vector_5>
  16:	00 00       	nop
  18:	f0 c0       	rjmp	.+480    	; 0x1fa <__vector_6>
  1a:	00 00       	nop
  1c:	f9 c0       	rjmp	.+498    	; 0x210 <__vector_7>
  1e:	00 00       	nop
  20:	02 c1       	rjmp	.+516    	; 0x226 <__vector_8>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__vector_9>
  26:	00 00       	nop
  28:	14 c1       	rjmp	.+552    	; 0x252 <__vector_10>
  2a:	00 00       	nop
  2c:	1d c1       	rjmp	.+570    	; 0x268 <__vector_11>
  2e:	00 00       	nop
  30:	26 c1       	rjmp	.+588    	; 0x27e <__vector_12>
  32:	00 00       	nop
  34:	2f c1       	rjmp	.+606    	; 0x294 <__vector_13>
  36:	00 00       	nop
  38:	38 c1       	rjmp	.+624    	; 0x2aa <__vector_14>
  3a:	00 00       	nop
  3c:	41 c1       	rjmp	.+642    	; 0x2c0 <__vector_15>
  3e:	00 00       	nop
  40:	4a c1       	rjmp	.+660    	; 0x2d6 <__vector_16>
  42:	00 00       	nop
  44:	53 c1       	rjmp	.+678    	; 0x2ec <__vector_17>
  46:	00 00       	nop
  48:	5c c1       	rjmp	.+696    	; 0x302 <__vector_18>
  4a:	00 00       	nop
  4c:	65 c1       	rjmp	.+714    	; 0x318 <__vector_19>
  4e:	00 00       	nop
  50:	6e c1       	rjmp	.+732    	; 0x32e <__vector_20>
  52:	00 00       	nop
  54:	77 c1       	rjmp	.+750    	; 0x344 <__vector_21>
  56:	00 00       	nop
  58:	80 c1       	rjmp	.+768    	; 0x35a <__vector_22>
  5a:	00 00       	nop
  5c:	89 c1       	rjmp	.+786    	; 0x370 <__vector_23>
  5e:	00 00       	nop
  60:	92 c1       	rjmp	.+804    	; 0x386 <__vector_24>
  62:	00 00       	nop
  64:	9b c1       	rjmp	.+822    	; 0x39c <__vector_25>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	8b d1       	rcall	.+790    	; 0x3b2 <main>
  9c:	fb c1       	rjmp	.+1014   	; 0x494 <_exit>

0000009e <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	1f 92       	push	r1
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
  ae:	8f b7       	in	r24, 0x3f	; 63
  b0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
  b2:	f8 94       	cli
	return flags;
  b4:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
  b6:	5f 93       	push	r21
  b8:	50 e8       	ldi	r21, 0x80	; 128
  ba:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  c4:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
  c6:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
  c8:	0f 90       	pop	r0
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	1f 92       	push	r1
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
  da:	9f b7       	in	r25, 0x3f	; 63
  dc:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
  de:	f8 94       	cli
	return flags;
  e0:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
  e2:	81 11       	cpse	r24, r1
  e4:	06 c0       	rjmp	.+12     	; 0xf2 <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
  e6:	e4 e6       	ldi	r30, 0x64	; 100
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	60 95       	com	r22
  ec:	80 81       	ld	r24, Z
  ee:	68 23       	and	r22, r24
  f0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
  f2:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
  f4:	0f 90       	pop	r0
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	1f 92       	push	r1
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 106:	9f b7       	in	r25, 0x3f	; 63
 108:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 10a:	f8 94       	cli
	return flags;
 10c:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
 10e:	81 11       	cpse	r24, r1
 110:	05 c0       	rjmp	.+10     	; 0x11c <sysclk_disable_module+0x20>
		*(reg + port) |= id;
 112:	e4 e6       	ldi	r30, 0x64	; 100
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	68 2b       	or	r22, r24
 11a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 11c:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
 11e:	0f 90       	pop	r0
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <board_init>:
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 126:	21 9a       	sbi	0x04, 1	; 4
 128:	23 9a       	sbi	0x04, 3	; 4
 12a:	20 9a       	sbi	0x04, 0	; 4
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 12c:	28 98       	cbi	0x05, 0	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 12e:	24 9a       	sbi	0x04, 4	; 4
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 130:	2c 9a       	sbi	0x05, 4	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 132:	25 9a       	sbi	0x04, 5	; 4
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 134:	2d 98       	cbi	0x05, 5	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 136:	3b 9a       	sbi	0x07, 3	; 7
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 138:	43 98       	cbi	0x08, 3	; 8
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 13a:	3e 98       	cbi	0x07, 6	; 7
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 13c:	46 98       	cbi	0x08, 6	; 8
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
 13e:	46 9a       	sbi	0x08, 6	; 8
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 140:	50 98       	cbi	0x0a, 0	; 10
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 142:	58 98       	cbi	0x0b, 0	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
 144:	58 98       	cbi	0x0b, 0	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 146:	51 98       	cbi	0x0a, 1	; 10
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 148:	59 98       	cbi	0x0b, 1	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
 14a:	59 98       	cbi	0x0b, 1	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 14c:	52 98       	cbi	0x0a, 2	; 10
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 14e:	5a 98       	cbi	0x0b, 2	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
 150:	5a 98       	cbi	0x0b, 2	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 152:	53 98       	cbi	0x0a, 3	; 10
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 154:	5b 98       	cbi	0x0b, 3	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
 156:	5b 98       	cbi	0x0b, 3	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 158:	54 98       	cbi	0x0a, 4	; 10
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 15a:	5c 98       	cbi	0x0b, 4	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
 15c:	5c 98       	cbi	0x0b, 4	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 15e:	55 98       	cbi	0x0a, 5	; 10
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 160:	5d 98       	cbi	0x0b, 5	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
 162:	5d 98       	cbi	0x0b, 5	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 164:	56 98       	cbi	0x0a, 6	; 10
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 166:	5e 98       	cbi	0x0b, 6	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
 168:	5e 98       	cbi	0x0b, 6	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 16a:	57 98       	cbi	0x0a, 7	; 10
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 16c:	5f 98       	cbi	0x0b, 7	; 11
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
 16e:	5f 98       	cbi	0x0b, 7	; 11
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 170:	26 9a       	sbi	0x04, 6	; 4
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 172:	2e 98       	cbi	0x05, 6	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 174:	27 9a       	sbi	0x04, 7	; 4
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 176:	2f 98       	cbi	0x05, 7	; 5
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 178:	22 98       	cbi	0x04, 2	; 4
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
 17a:	2a 98       	cbi	0x05, 2	; 5
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 17c:	39 98       	cbi	0x07, 1	; 7
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
 17e:	41 98       	cbi	0x08, 1	; 8
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 180:	3a 98       	cbi	0x07, 2	; 7
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
 182:	42 98       	cbi	0x08, 2	; 8
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 184:	38 98       	cbi	0x07, 0	; 7
 186:	3c 98       	cbi	0x07, 4	; 7
 188:	3d 98       	cbi	0x07, 5	; 7
 18a:	08 95       	ret

0000018c <__vector_1>:
}

void halt(void)
{
	/* MAIN Loop Shutdown */
	runmode = 0;
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	98 95       	break
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__vector_2>:
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	98 95       	break
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <__vector_3>:
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	98 95       	break
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_4>:
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	98 95       	break
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_5>:
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	98 95       	break
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_6>:
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	98 95       	break
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_7>:
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	98 95       	break
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <__vector_8>:
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	98 95       	break
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_9>:
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	98 95       	break
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <__vector_10>:
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	98 95       	break
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <__vector_11>:
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	98 95       	break
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_12>:
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	98 95       	break
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__vector_13>:
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	98 95       	break
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <__vector_14>:
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	98 95       	break
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <__vector_15>:
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	98 95       	break
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_16>:
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	98 95       	break
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <__vector_17>:
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	98 95       	break
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <__vector_18>:
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	98 95       	break
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <__vector_19>:
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	98 95       	break
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_20>:
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	98 95       	break
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <__vector_21>:
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	98 95       	break
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <__vector_22>:
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	98 95       	break
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <__vector_23>:
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	98 95       	break
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <__vector_24>:
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	98 95       	break
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <__vector_25>:
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	98 95       	break
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <main>:
}



int main (void)
{
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	00 d0       	rcall	.+0      	; 0x3be <main+0xc>
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
	uint8_t retcode = 0;
	
	/* Init of sub-modules */
	sysclk_init();
 3c2:	6d de       	rcall	.-806    	; 0x9e <sysclk_init>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 3c4:	8f b7       	in	r24, 0x3f	; 63
 3c6:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
 3c8:	f8 94       	cli
	return flags;
 3ca:	8a 81       	ldd	r24, Y+2	; 0x02
 3cc:	5f 93       	push	r21
 3ce:	50 e8       	ldi	r21, 0x80	; 128
 3d0:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 3da:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 3dc:	8f bf       	out	0x3f, r24	; 63
static void s_tc_init(void)
{
	sysclk_set_prescalers(1);
	
	/* Timer Synchronous Mode - prepare */
	GTCCR   = (1 << TSM)					// Timer Synchronous Mode active
 3de:	13 e8       	ldi	r17, 0x83	; 131
 3e0:	13 bd       	out	0x23, r17	; 35
		    | (1 << PSRASY)					// Timer 2   prescaler is synced
		    | (1 << PSRSYNC);				// Timer 0/1 prescaler is synced

	
	/* TC0: not in use */
	sysclk_disable_module(PRR, PRTIM0);
 3e2:	0f 2e       	mov	r0, r31
 3e4:	f4 e6       	ldi	r31, 0x64	; 100
 3e6:	ef 2e       	mov	r14, r31
 3e8:	f1 2c       	mov	r15, r1
 3ea:	f0 2d       	mov	r31, r0
 3ec:	f7 01       	movw	r30, r14
 3ee:	80 81       	ld	r24, Z
 3f0:	65 e0       	ldi	r22, 0x05	; 5
 3f2:	84 de       	rcall	.-760    	; 0xfc <sysclk_disable_module>


	/* TC1 - OC1A: Audio output @ 16-bit counter PWM, used: 10-bit resolution */
	sysclk_enable_module(PRR, PRTIM1);
 3f4:	f7 01       	movw	r30, r14
 3f6:	80 81       	ld	r24, Z
 3f8:	63 e0       	ldi	r22, 0x03	; 3
 3fa:	6a de       	rcall	.-812    	; 0xd0 <sysclk_enable_module>

	TCCR1A  = (0b10  << COM1A0)		 		// HI --> LO when compare value is reached - non-inverted PWM mode
 3fc:	10 93 80 00 	sts	0x0080, r17	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		    | (0b11  << WGM10);				// WGM: 0b0111 = Fast PWM 10 bit

	TCCR1B  = (0b01  << WGM12)		 
 400:	89 e0       	ldi	r24, 0x09	; 9
 402:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		    | (0b001 << CS10);				// CLKio DIV 1 = 16 MHz
		   
	TCCR1C  = 0;
 406:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>

	TCNT1H  = 0b00000000           ;		// Clear current value for synchronous start (when restarting without reset)
 40a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L	=            0b00000000;
 40e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	OCR1AH  =       0b10           ;		// Mid-range compare value for zero audio output
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL  =            0b00000000;
 418:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TIMSK1  = 0;							// no interrupts (when restarting without reset)
 41c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TIFR1   = 0b00100111;					// clear all flags (when restarting without reset)
 420:	87 e2       	ldi	r24, 0x27	; 39
 422:	86 bb       	out	0x16, r24	; 22


	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution */
	sysclk_enable_module(PRR, PRTIM2);
 424:	f7 01       	movw	r30, r14
 426:	80 81       	ld	r24, Z
 428:	66 e0       	ldi	r22, 0x06	; 6
 42a:	52 de       	rcall	.-860    	; 0xd0 <sysclk_enable_module>
	
	TCCR2A  = (0b10  << COM2A0)				// HI --> LO when compare value is reached - non-inverted PWM mode
 42c:	10 93 b0 00 	sts	0x00B0, r17	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		    | (0b11  << WGM20);				// WGM: 0b011 = Fast PWM mode 8 bit

	TCCR2B  = (0b0   << WGM22)
 430:	87 e0       	ldi	r24, 0x07	; 7
 432:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		    | (0b111 << CS20);				// CLKio DIV 1024 = 15.625 Hz
	
	TCNT2   = 0;							// Clear current value for synchronous start (when restarting without reset)
 436:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	
	OCR2A   = 0x40;							// LCD backlight dimmed down to 25% 
 43a:	90 e4       	ldi	r25, 0x40	; 64
 43c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

	TIMSK2  = 0;							// no interrupts (when restarting without reset)
 440:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TIFR2   = 0b00000111;					// clear all flags (when restarting without reset)
 444:	87 bb       	out	0x17, r24	; 23
	
	ASSR    = 0;							// no Async TOSC1 mode
 446:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>


	/* Timer Synchronous Mode - trigger */
	GTCCR   = (1 << PSRSYNC);			    // trigger the sync for all counters
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	83 bd       	out	0x23, r24	; 35
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
 44e:	87 e8       	ldi	r24, 0x87	; 135
 450:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 454:	8f b7       	in	r24, 0x3f	; 63
 456:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 458:	f8 94       	cli
	return flags;
 45a:	99 81       	ldd	r25, Y+1	; 0x01
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
 45c:	80 ee       	ldi	r24, 0xE0	; 224
 45e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
 462:	eb e7       	ldi	r30, 0x7B	; 123
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
 46a:	86 60       	ori	r24, 0x06	; 6
	ADC_ADTS_REG = temp;
 46c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 46e:	9f bf       	out	0x3f, r25	; 63
	ioport_init();
	s_tc_init();
	s_adc_init();

	/* All interrupt sources prepared here - IRQ activation */
	cpu_irq_enable();
 470:	78 94       	sei
	
	board_init();
 472:	59 de       	rcall	.-846    	; 0x126 <board_init>
//@}
static inline reset_cause_t reset_cause_get_causes(void)
{
#if (MEGA_XX4 ||MEGA_XX4_A || MEGA_XX8 || MEGA_XX8_A || \
	MEGA_XX || MEGA_XX_UN2 || MEGA_XX0_1 || MEGA_RF || MEGA_UNCATEGORIZED) && !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t temp_mcsr = MCUSR ;
 474:	84 b7       	in	r24, 0x34	; 52
		 rc & CHIP_RESET_CAUSE_BOD_CPU || 
		 rc & CHIP_RESET_CAUSE_POR) {
		 s_reset_global_vars();
	 }
	 
    while (runmode) {
 476:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 47a:	81 11       	cpse	r24, r1
 47c:	fe cf       	rjmp	.-4      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	    s_task();
	    //enter_sleep();
    }
    
    cpu_irq_disable();
 47e:	f8 94       	cli
    //enter_sleep();
    
    return retcode;
}
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	08 95       	ret

00000494 <_exit>:
 494:	f8 94       	cli

00000496 <__stop_program>:
 496:	ff cf       	rjmp	.-2      	; 0x496 <__stop_program>
