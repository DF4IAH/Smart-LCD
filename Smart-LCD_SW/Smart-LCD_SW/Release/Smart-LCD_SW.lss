
Smart-LCD_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024a  00800100  000040cc  00004160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000040cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  0080034a  0080034a  000043aa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000043aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  00004448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007286  00000000  00000000  00004830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cd4  00000000  00000000  0000bab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033b4  00000000  00000000  0000d78a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015e0  00000000  00000000  00010b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cc9  00000000  00000000  00012120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006032  00000000  00000000  00013de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  00019e1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cc c2       	rjmp	.+1432   	; 0x59a <__ctors_end>
       2:	00 00       	nop
       4:	f6 c6       	rjmp	.+3564   	; 0xdf2 <__vector_1>
       6:	00 00       	nop
       8:	17 c7       	rjmp	.+3630   	; 0xe38 <__vector_2>
       a:	00 00       	nop
       c:	38 c7       	rjmp	.+3696   	; 0xe7e <__vector_3>
       e:	00 00       	nop
      10:	59 c7       	rjmp	.+3762   	; 0xec4 <__vector_4>
      12:	00 00       	nop
      14:	7a c7       	rjmp	.+3828   	; 0xf0a <__vector_5>
      16:	00 00       	nop
      18:	9b c7       	rjmp	.+3894   	; 0xf50 <__vector_6>
      1a:	00 00       	nop
      1c:	bc c7       	rjmp	.+3960   	; 0xf96 <__vector_7>
      1e:	00 00       	nop
      20:	dd c7       	rjmp	.+4026   	; 0xfdc <__vector_8>
      22:	00 00       	nop
      24:	fe c7       	rjmp	.+4092   	; 0x1022 <__vector_9>
      26:	00 00       	nop
      28:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__vector_10>
      2c:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__vector_11>
      30:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_12>
      34:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__vector_13>
      38:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__vector_14>
      3c:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_15>
      40:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__vector_16>
      44:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_17>
      48:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__vector_18>
      4c:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__vector_19>
      50:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <__vector_20>
      54:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_21>
      58:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <__vector_22>
      5c:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_23>
      60:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__vector_24>
      64:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__vector_25>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 20       	and	r0, r0
      70:	20 20       	and	r2, r0
      72:	20 20       	and	r2, r0
      74:	00 20       	and	r0, r0
      76:	50 50       	subi	r21, 0x00	; 0
      78:	50 00       	.word	0x0050	; ????
      7a:	00 00       	nop
      7c:	00 50       	subi	r16, 0x00	; 0
      7e:	50 f8       	bld	r5, 0
      80:	50 f8       	bld	r5, 0
      82:	50 50       	subi	r21, 0x00	; 0
      84:	20 78       	andi	r18, 0x80	; 128
      86:	a0 70       	andi	r26, 0x00	; 0
      88:	28 f0       	brcs	.+10     	; 0x94 <__trampolines_end+0x2c>
      8a:	20 c0       	rjmp	.+64     	; 0xcc <__trampolines_end+0x64>
      8c:	c8 10       	cpse	r12, r8
      8e:	20 40       	sbci	r18, 0x00	; 0
      90:	98 18       	sub	r9, r8
      92:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x3c32>
      96:	a8 90       	.word	0x90a8	; ????
      98:	68 60       	ori	r22, 0x08	; 8
      9a:	20 40       	sbci	r18, 0x00	; 0
      9c:	00 00       	nop
      9e:	00 00       	nop
      a0:	10 20       	and	r1, r0
      a2:	40 40       	sbci	r20, 0x00	; 0
      a4:	40 20       	and	r4, r0
      a6:	10 40       	sbci	r17, 0x00	; 0
      a8:	20 10       	cpse	r2, r0
      aa:	10 10       	cpse	r1, r0
      ac:	20 40       	sbci	r18, 0x00	; 0
      ae:	00 50       	subi	r16, 0x00	; 0
      b0:	20 f8       	bld	r2, 0
      b2:	20 50       	subi	r18, 0x00	; 0
      b4:	00 00       	nop
      b6:	20 20       	and	r2, r0
      b8:	f8 20       	and	r15, r8
      ba:	20 00       	.word	0x0020	; ????
      bc:	00 00       	nop
      be:	00 00       	nop
      c0:	60 20       	and	r6, r0
      c2:	40 00       	.word	0x0040	; ????
      c4:	00 00       	nop
      c6:	f8 00       	.word	0x00f8	; ????
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	00 60       	ori	r16, 0x00	; 0
      d0:	60 00       	.word	0x0060	; ????
      d2:	08 10       	cpse	r0, r8
      d4:	20 40       	sbci	r18, 0x00	; 0
      d6:	80 00       	.word	0x0080	; ????
      d8:	70 88       	ldd	r7, Z+16	; 0x10
      da:	98 a8       	ldd	r9, Y+48	; 0x30
      dc:	c8 88       	ldd	r12, Y+16	; 0x10
      de:	70 20       	and	r7, r0
      e0:	60 20       	and	r6, r0
      e2:	20 20       	and	r2, r0
      e4:	20 70       	andi	r18, 0x00	; 0
      e6:	70 88       	ldd	r7, Z+16	; 0x10
      e8:	08 10       	cpse	r0, r8
      ea:	20 40       	sbci	r18, 0x00	; 0
      ec:	f8 f8       	.word	0xf8f8	; ????
      ee:	10 20       	and	r1, r0
      f0:	10 08       	sbc	r1, r0
      f2:	88 70       	andi	r24, 0x08	; 8
      f4:	10 30       	cpi	r17, 0x00	; 0
      f6:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__bss_end+0xc8a>
      fa:	10 f8       	bld	r1, 0
      fc:	80 f0       	brcs	.+32     	; 0x11e <__trampolines_end+0xb6>
      fe:	08 08       	sbc	r0, r8
     100:	88 70       	andi	r24, 0x08	; 8
     102:	30 40       	sbci	r19, 0x00	; 0
     104:	80 f0       	brcs	.+32     	; 0x126 <__trampolines_end+0xbe>
     106:	88 88       	ldd	r8, Y+16	; 0x10
     108:	70 f8       	bld	r7, 0
     10a:	08 10       	cpse	r0, r8
     10c:	20 40       	sbci	r18, 0x00	; 0
     10e:	40 40       	sbci	r20, 0x00	; 0
     110:	70 88       	ldd	r7, Z+16	; 0x10
     112:	88 70       	andi	r24, 0x08	; 8
     114:	88 88       	ldd	r8, Y+16	; 0x10
     116:	70 70       	andi	r23, 0x00	; 0
     118:	88 88       	ldd	r8, Y+16	; 0x10
     11a:	78 08       	sbc	r7, r8
     11c:	10 60       	ori	r17, 0x00	; 0
     11e:	00 60       	ori	r16, 0x00	; 0
     120:	60 00       	.word	0x0060	; ????
     122:	60 60       	ori	r22, 0x00	; 0
     124:	00 00       	nop
     126:	60 60       	ori	r22, 0x00	; 0
     128:	00 60       	ori	r16, 0x00	; 0
     12a:	20 40       	sbci	r18, 0x00	; 0
     12c:	08 10       	cpse	r0, r8
     12e:	20 40       	sbci	r18, 0x00	; 0
     130:	20 10       	cpse	r2, r0
     132:	08 00       	.word	0x0008	; ????
     134:	00 f8       	bld	r0, 0
     136:	00 f8       	bld	r0, 0
     138:	00 00       	nop
     13a:	80 40       	sbci	r24, 0x00	; 0
     13c:	20 10       	cpse	r2, r0
     13e:	20 40       	sbci	r18, 0x00	; 0
     140:	80 70       	andi	r24, 0x00	; 0
     142:	88 08       	sbc	r8, r8
     144:	10 20       	and	r1, r0
     146:	00 20       	and	r0, r0
     148:	70 88       	ldd	r7, Z+16	; 0x10
     14a:	08 68       	ori	r16, 0x88	; 136
     14c:	a8 a8       	ldd	r10, Y+48	; 0x30
     14e:	70 70       	andi	r23, 0x00	; 0
     150:	88 88       	ldd	r8, Y+16	; 0x10
     152:	88 f8       	.word	0xf888	; ????
     154:	88 88       	ldd	r8, Y+16	; 0x10
     156:	f0 88       	ldd	r15, Z+16	; 0x10
     158:	88 f0       	brcs	.+34     	; 0x17c <__trampolines_end+0x114>
     15a:	88 88       	ldd	r8, Y+16	; 0x10
     15c:	f0 70       	andi	r31, 0x00	; 0
     15e:	88 80       	ld	r8, Y
     160:	80 80       	ld	r8, Z
     162:	88 70       	andi	r24, 0x08	; 8
     164:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x841a>
     168:	88 90       	.word	0x9088	; ????
     16a:	e0 f8       	bld	r14, 0
     16c:	80 80       	ld	r8, Z
     16e:	f0 80       	ld	r15, Z
     170:	80 f8       	bld	r8, 0
     172:	f8 80       	ld	r15, Y
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	80 80       	ld	r8, Z
     178:	80 70       	andi	r24, 0x00	; 0
     17a:	88 80       	ld	r8, Y
     17c:	80 98       	cbi	0x10, 0	; 16
     17e:	88 70       	andi	r24, 0x08	; 8
     180:	88 88       	ldd	r8, Y+16	; 0x10
     182:	88 f8       	.word	0xf888	; ????
     184:	88 88       	ldd	r8, Y+16	; 0x10
     186:	88 70       	andi	r24, 0x08	; 8
     188:	20 20       	and	r2, r0
     18a:	20 20       	and	r2, r0
     18c:	20 70       	andi	r18, 0x00	; 0
     18e:	38 10       	cpse	r3, r8
     190:	10 10       	cpse	r1, r0
     192:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x83f2>
     196:	90 a0       	ldd	r9, Z+32	; 0x20
     198:	c0 a0       	ldd	r12, Z+32	; 0x20
     19a:	90 88       	ldd	r9, Z+16	; 0x10
     19c:	80 80       	ld	r8, Z
     19e:	80 80       	ld	r8, Z
     1a0:	80 80       	ld	r8, Z
     1a2:	f8 88       	ldd	r15, Y+16	; 0x10
     1a4:	d8 a8       	ldd	r13, Y+48	; 0x30
     1a6:	88 88       	ldd	r8, Y+16	; 0x10
     1a8:	88 88       	ldd	r8, Y+16	; 0x10
     1aa:	88 88       	ldd	r8, Y+16	; 0x10
     1ac:	c8 a8       	ldd	r12, Y+48	; 0x30
     1ae:	98 88       	ldd	r9, Y+16	; 0x10
     1b0:	88 70       	andi	r24, 0x08	; 8
     1b2:	88 88       	ldd	r8, Y+16	; 0x10
     1b4:	88 88       	ldd	r8, Y+16	; 0x10
     1b6:	88 70       	andi	r24, 0x08	; 8
     1b8:	f0 88       	ldd	r15, Z+16	; 0x10
     1ba:	88 f0       	brcs	.+34     	; 0x1de <__trampolines_end+0x176>
     1bc:	80 80       	ld	r8, Z
     1be:	80 70       	andi	r24, 0x00	; 0
     1c0:	88 88       	ldd	r8, Y+16	; 0x10
     1c2:	88 a8       	ldd	r8, Y+48	; 0x30
     1c4:	90 68       	ori	r25, 0x80	; 128
     1c6:	f0 88       	ldd	r15, Z+16	; 0x10
     1c8:	88 f0       	brcs	.+34     	; 0x1ec <__trampolines_end+0x184>
     1ca:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x741a>
     1ce:	80 80       	ld	r8, Z
     1d0:	70 08       	sbc	r7, r0
     1d2:	08 f0       	brcs	.+2      	; 0x1d6 <__trampolines_end+0x16e>
     1d4:	f8 20       	and	r15, r8
     1d6:	20 20       	and	r2, r0
     1d8:	20 20       	and	r2, r0
     1da:	20 88       	ldd	r2, Z+16	; 0x10
     1dc:	88 88       	ldd	r8, Y+16	; 0x10
     1de:	88 88       	ldd	r8, Y+16	; 0x10
     1e0:	88 70       	andi	r24, 0x08	; 8
     1e2:	88 88       	ldd	r8, Y+16	; 0x10
     1e4:	88 88       	ldd	r8, Y+16	; 0x10
     1e6:	88 50       	subi	r24, 0x08	; 8
     1e8:	20 88       	ldd	r2, Z+16	; 0x10
     1ea:	88 88       	ldd	r8, Y+16	; 0x10
     1ec:	a8 a8       	ldd	r10, Y+48	; 0x30
     1ee:	d8 88       	ldd	r13, Y+16	; 0x10
     1f0:	88 88       	ldd	r8, Y+16	; 0x10
     1f2:	50 20       	and	r5, r0
     1f4:	50 88       	ldd	r5, Z+16	; 0x10
     1f6:	88 88       	ldd	r8, Y+16	; 0x10
     1f8:	88 50       	subi	r24, 0x08	; 8
     1fa:	20 20       	and	r2, r0
     1fc:	20 20       	and	r2, r0
     1fe:	f8 08       	sbc	r15, r8
     200:	10 20       	and	r1, r0
     202:	40 80       	ld	r4, Z
     204:	f8 38       	cpi	r31, 0x88	; 136
     206:	20 20       	and	r2, r0
     208:	20 20       	and	r2, r0
     20a:	20 38       	cpi	r18, 0x80	; 128
     20c:	00 80       	ld	r0, Z
     20e:	40 20       	and	r4, r0
     210:	10 08       	sbc	r1, r0
     212:	00 e0       	ldi	r16, 0x00	; 0
     214:	20 20       	and	r2, r0
     216:	20 20       	and	r2, r0
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	20 50       	subi	r18, 0x00	; 0
     21c:	88 00       	.word	0x0088	; ????
	...
     226:	00 f8       	bld	r0, 0
     228:	40 20       	and	r4, r0
     22a:	10 00       	.word	0x0010	; ????
     22c:	00 00       	nop
     22e:	00 00       	nop
     230:	00 70       	andi	r16, 0x00	; 0
     232:	08 78       	andi	r16, 0x88	; 136
     234:	88 78       	andi	r24, 0x88	; 136
     236:	80 80       	ld	r8, Z
     238:	b0 c8       	rjmp	.-3744   	; 0xfffff39a <__eeprom_end+0xff7ef39a>
     23a:	88 88       	ldd	r8, Y+16	; 0x10
     23c:	f0 00       	.word	0x00f0	; ????
     23e:	00 70       	andi	r16, 0x00	; 0
     240:	80 80       	ld	r8, Z
     242:	88 70       	andi	r24, 0x08	; 8
     244:	08 08       	sbc	r0, r8
     246:	68 98       	cbi	0x0d, 0	; 13
     248:	88 88       	ldd	r8, Y+16	; 0x10
     24a:	78 00       	.word	0x0078	; ????
     24c:	00 70       	andi	r16, 0x00	; 0
     24e:	88 f8       	.word	0xf888	; ????
     250:	80 70       	andi	r24, 0x00	; 0
     252:	30 48       	sbci	r19, 0x80	; 128
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	40 40       	sbci	r20, 0x00	; 0
     258:	40 00       	.word	0x0040	; ????
     25a:	00 78       	andi	r16, 0x80	; 128
     25c:	88 78       	andi	r24, 0x88	; 136
     25e:	08 30       	cpi	r16, 0x08	; 8
     260:	80 80       	ld	r8, Z
     262:	b0 c8       	rjmp	.-3744   	; 0xfffff3c4 <__eeprom_end+0xff7ef3c4>
     264:	88 88       	ldd	r8, Y+16	; 0x10
     266:	88 20       	and	r8, r8
     268:	00 60       	ori	r16, 0x00	; 0
     26a:	20 20       	and	r2, r0
     26c:	20 70       	andi	r18, 0x00	; 0
     26e:	10 00       	.word	0x0010	; ????
     270:	30 10       	cpse	r3, r0
     272:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x3bf2>
     276:	40 48       	sbci	r20, 0x80	; 128
     278:	50 60       	ori	r21, 0x00	; 0
     27a:	50 48       	sbci	r21, 0x80	; 128
     27c:	60 20       	and	r6, r0
     27e:	20 20       	and	r2, r0
     280:	20 20       	and	r2, r0
     282:	70 00       	.word	0x0070	; ????
     284:	00 d0       	rcall	.+0      	; 0x286 <__trampolines_end+0x21e>
     286:	a8 a8       	ldd	r10, Y+48	; 0x30
     288:	88 88       	ldd	r8, Y+16	; 0x10
     28a:	00 00       	nop
     28c:	b0 c8       	rjmp	.-3744   	; 0xfffff3ee <__eeprom_end+0xff7ef3ee>
     28e:	88 88       	ldd	r8, Y+16	; 0x10
     290:	88 00       	.word	0x0088	; ????
     292:	00 70       	andi	r16, 0x00	; 0
     294:	88 88       	ldd	r8, Y+16	; 0x10
     296:	88 70       	andi	r24, 0x08	; 8
     298:	00 00       	nop
     29a:	f0 88       	ldd	r15, Z+16	; 0x10
     29c:	f0 80       	ld	r15, Z
     29e:	80 00       	.word	0x0080	; ????
     2a0:	00 68       	ori	r16, 0x80	; 128
     2a2:	98 78       	andi	r25, 0x88	; 136
     2a4:	08 08       	sbc	r0, r8
     2a6:	00 00       	nop
     2a8:	b0 c8       	rjmp	.-3744   	; 0xfffff40a <__eeprom_end+0xff7ef40a>
     2aa:	80 80       	ld	r8, Z
     2ac:	80 00       	.word	0x0080	; ????
     2ae:	00 70       	andi	r16, 0x00	; 0
     2b0:	80 70       	andi	r24, 0x00	; 0
     2b2:	08 f0       	brcs	.+2      	; 0x2b6 <__trampolines_end+0x24e>
     2b4:	40 40       	sbci	r20, 0x00	; 0
     2b6:	e0 40       	sbci	r30, 0x00	; 0
     2b8:	40 48       	sbci	r20, 0x80	; 128
     2ba:	30 00       	.word	0x0030	; ????
     2bc:	00 88       	ldd	r0, Z+16	; 0x10
     2be:	88 88       	ldd	r8, Y+16	; 0x10
     2c0:	98 68       	ori	r25, 0x88	; 136
     2c2:	00 00       	nop
     2c4:	88 88       	ldd	r8, Y+16	; 0x10
     2c6:	88 50       	subi	r24, 0x08	; 8
     2c8:	20 00       	.word	0x0020	; ????
     2ca:	00 88       	ldd	r0, Z+16	; 0x10
     2cc:	88 a8       	ldd	r8, Y+48	; 0x30
     2ce:	a8 50       	subi	r26, 0x08	; 8
     2d0:	00 00       	nop
     2d2:	88 50       	subi	r24, 0x08	; 8
     2d4:	20 50       	subi	r18, 0x00	; 0
     2d6:	88 00       	.word	0x0088	; ????
     2d8:	00 88       	ldd	r0, Z+16	; 0x10
     2da:	88 78       	andi	r24, 0x88	; 136
     2dc:	08 70       	andi	r16, 0x08	; 8
     2de:	00 00       	nop
     2e0:	f8 10       	cpse	r15, r8
     2e2:	20 40       	sbci	r18, 0x00	; 0
     2e4:	f8 10       	cpse	r15, r8
     2e6:	20 20       	and	r2, r0
     2e8:	40 20       	and	r4, r0
     2ea:	20 10       	cpse	r2, r0
     2ec:	20 20       	and	r2, r0
     2ee:	20 20       	and	r2, r0
     2f0:	20 20       	and	r2, r0
     2f2:	20 40       	sbci	r18, 0x00	; 0
     2f4:	20 20       	and	r2, r0
     2f6:	10 20       	and	r1, r0
     2f8:	20 40       	sbci	r18, 0x00	; 0
     2fa:	20 50       	subi	r18, 0x00	; 0
     2fc:	20 00       	.word	0x0020	; ????
     2fe:	00 00       	nop
	...

00000301 <sysfont_glyphs>:
     301:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     311:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     321:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     331:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     341:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     351:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     361:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     371:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     381:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     391:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     3a1:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     3b1:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     3c1:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     3d1:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     3e1:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     3f1:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     401:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     411:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     421:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     431:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     441:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     451:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     461:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     471:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     481:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     491:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     4a1:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     4b1:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     4c1:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     4d1:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     4e1:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     4f1:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     501:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     511:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     521:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     531:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     541:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     551:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     561:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     571:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     581:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     591:	20 40 20 50 20 00 00 00 00                           @ P ....

0000059a <__ctors_end>:
     59a:	11 24       	eor	r1, r1
     59c:	1f be       	out	0x3f, r1	; 63
     59e:	cf ef       	ldi	r28, 0xFF	; 255
     5a0:	d8 e0       	ldi	r29, 0x08	; 8
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	cd bf       	out	0x3d, r28	; 61

000005a6 <__do_copy_data>:
     5a6:	13 e0       	ldi	r17, 0x03	; 3
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b1 e0       	ldi	r27, 0x01	; 1
     5ac:	ec ec       	ldi	r30, 0xCC	; 204
     5ae:	f0 e4       	ldi	r31, 0x40	; 64
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__do_copy_data+0x10>
     5b2:	05 90       	lpm	r0, Z+
     5b4:	0d 92       	st	X+, r0
     5b6:	aa 34       	cpi	r26, 0x4A	; 74
     5b8:	b1 07       	cpc	r27, r17
     5ba:	d9 f7       	brne	.-10     	; 0x5b2 <__do_copy_data+0xc>

000005bc <__do_clear_bss>:
     5bc:	24 e0       	ldi	r18, 0x04	; 4
     5be:	aa e4       	ldi	r26, 0x4A	; 74
     5c0:	b3 e0       	ldi	r27, 0x03	; 3
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <.do_clear_bss_start>

000005c4 <.do_clear_bss_loop>:
     5c4:	1d 92       	st	X+, r1

000005c6 <.do_clear_bss_start>:
     5c6:	ae 36       	cpi	r26, 0x6E	; 110
     5c8:	b2 07       	cpc	r27, r18
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <.do_clear_bss_loop>
     5cc:	0e 94 b6 19 	call	0x336c	; 0x336c <main>
     5d0:	0c 94 64 20 	jmp	0x40c8	; 0x40c8 <_exit>

000005d4 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	1f 92       	push	r1
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     5e4:	8f b7       	in	r24, 0x3f	; 63
     5e6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     5e8:	f8 94       	cli
	return flags;
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     5ec:	5f 93       	push	r21
     5ee:	50 e8       	ldi	r21, 0x80	; 128
     5f0:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     5fa:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     5fc:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     5fe:	0f 90       	pop	r0
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	08 95       	ret

00000606 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	1f 92       	push	r1
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     610:	9f b7       	in	r25, 0x3f	; 63
     612:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     614:	f8 94       	cli
	return flags;
     616:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     618:	81 11       	cpse	r24, r1
     61a:	06 c0       	rjmp	.+12     	; 0x628 <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
     61c:	60 95       	com	r22
     61e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     622:	68 23       	and	r22, r24
     624:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     628:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     62a:	0f 90       	pop	r0
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	1f 92       	push	r1
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     63c:	9f b7       	in	r25, 0x3f	; 63
     63e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     640:	f8 94       	cli
	return flags;
     642:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     644:	81 11       	cpse	r24, r1
     646:	05 c0       	rjmp	.+10     	; 0x652 <sysclk_disable_module+0x20>
		*(reg + port) |= id;
     648:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     64c:	68 2b       	or	r22, r24
     64e:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     652:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     654:	0f 90       	pop	r0
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <gfx_mono_generic_draw_horizontal_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	08 2f       	mov	r16, r24
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     668:	84 2f       	mov	r24, r20
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	80 0f       	add	r24, r16
     66e:	91 1d       	adc	r25, r1
     670:	81 3f       	cpi	r24, 0xF1	; 241
     672:	91 05       	cpc	r25, r1
     674:	14 f0       	brlt	.+4      	; 0x67a <gfx_mono_generic_draw_horizontal_line+0x1e>
		length = GFX_MONO_LCD_WIDTH - x;
     676:	40 ef       	ldi	r20, 0xF0	; 240
     678:	40 1b       	sub	r20, r16
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     67a:	44 23       	and	r20, r20
     67c:	09 f4       	brne	.+2      	; 0x680 <gfx_mono_generic_draw_horizontal_line+0x24>
     67e:	47 c0       	rjmp	.+142    	; 0x70e <gfx_mono_generic_draw_horizontal_line+0xb2>
	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
		length = GFX_MONO_LCD_WIDTH - x;
	}

	page = y / 8;
     680:	16 2f       	mov	r17, r22
     682:	16 95       	lsr	r17
     684:	16 95       	lsr	r17
     686:	16 95       	lsr	r17
	pixelmask = (1 << (y - (page * 8)));
     688:	38 ef       	ldi	r19, 0xF8	; 248
     68a:	31 03       	mulsu	r19, r17
     68c:	c0 01       	movw	r24, r0
     68e:	11 24       	eor	r1, r1
     690:	86 0f       	add	r24, r22
     692:	91 1d       	adc	r25, r1
     694:	61 e0       	ldi	r22, 0x01	; 1
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	01 c0       	rjmp	.+2      	; 0x69c <gfx_mono_generic_draw_horizontal_line+0x40>
     69a:	66 0f       	add	r22, r22
     69c:	8a 95       	dec	r24
     69e:	ea f7       	brpl	.-6      	; 0x69a <gfx_mono_generic_draw_horizontal_line+0x3e>
     6a0:	f6 2e       	mov	r15, r22
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     6a2:	21 30       	cpi	r18, 0x01	; 1
     6a4:	31 f0       	breq	.+12     	; 0x6b2 <gfx_mono_generic_draw_horizontal_line+0x56>
     6a6:	40 f0       	brcs	.+16     	; 0x6b8 <gfx_mono_generic_draw_horizontal_line+0x5c>
     6a8:	22 30       	cpi	r18, 0x02	; 2
     6aa:	89 f5       	brne	.+98     	; 0x70e <gfx_mono_generic_draw_horizontal_line+0xb2>
     6ac:	cf ef       	ldi	r28, 0xFF	; 255
     6ae:	c4 0f       	add	r28, r20
     6b0:	22 c0       	rjmp	.+68     	; 0x6f6 <gfx_mono_generic_draw_horizontal_line+0x9a>
     6b2:	cf ef       	ldi	r28, 0xFF	; 255
     6b4:	c4 0f       	add	r28, r20
     6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <gfx_mono_generic_draw_horizontal_line+0x66>
     6b8:	cf ef       	ldi	r28, 0xFF	; 255
     6ba:	c4 0f       	add	r28, r20
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
			temp &= ~pixelmask;
     6bc:	d6 2f       	mov	r29, r22
     6be:	d0 95       	com	r29
     6c0:	0d c0       	rjmp	.+26     	; 0x6dc <gfx_mono_generic_draw_horizontal_line+0x80>
     6c2:	dc 2f       	mov	r29, r28
     6c4:	d0 0f       	add	r29, r16
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     6c6:	6d 2f       	mov	r22, r29
     6c8:	81 2f       	mov	r24, r17
     6ca:	b3 d2       	rcall	.+1382   	; 0xc32 <gfx_mono_lcd_uc1608_get_byte>
			temp |= pixelmask;
     6cc:	48 2f       	mov	r20, r24
     6ce:	4f 29       	or	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     6d0:	6d 2f       	mov	r22, r29
     6d2:	81 2f       	mov	r24, r17
     6d4:	9c d2       	rcall	.+1336   	; 0xc0e <gfx_mono_lcd_uc1608_put_byte>
     6d6:	c1 50       	subi	r28, 0x01	; 1
     6d8:	a0 f7       	brcc	.-24     	; 0x6c2 <gfx_mono_generic_draw_horizontal_line+0x66>
     6da:	19 c0       	rjmp	.+50     	; 0x70e <gfx_mono_generic_draw_horizontal_line+0xb2>
     6dc:	fc 2e       	mov	r15, r28
     6de:	f0 0e       	add	r15, r16
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     6e0:	6f 2d       	mov	r22, r15
     6e2:	81 2f       	mov	r24, r17
     6e4:	a6 d2       	rcall	.+1356   	; 0xc32 <gfx_mono_lcd_uc1608_get_byte>
			temp &= ~pixelmask;
     6e6:	48 2f       	mov	r20, r24
     6e8:	4d 23       	and	r20, r29
			gfx_mono_put_byte(page, x + length, temp);
     6ea:	6f 2d       	mov	r22, r15
     6ec:	81 2f       	mov	r24, r17
     6ee:	8f d2       	rcall	.+1310   	; 0xc0e <gfx_mono_lcd_uc1608_put_byte>
     6f0:	c1 50       	subi	r28, 0x01	; 1
     6f2:	a0 f7       	brcc	.-24     	; 0x6dc <gfx_mono_generic_draw_horizontal_line+0x80>
     6f4:	0c c0       	rjmp	.+24     	; 0x70e <gfx_mono_generic_draw_horizontal_line+0xb2>
     6f6:	dc 2f       	mov	r29, r28
     6f8:	d0 0f       	add	r29, r16
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     6fa:	6d 2f       	mov	r22, r29
     6fc:	81 2f       	mov	r24, r17
     6fe:	99 d2       	rcall	.+1330   	; 0xc32 <gfx_mono_lcd_uc1608_get_byte>
			temp ^= pixelmask;
     700:	48 2f       	mov	r20, r24
     702:	4f 25       	eor	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     704:	6d 2f       	mov	r22, r29
     706:	81 2f       	mov	r24, r17
     708:	82 d2       	rcall	.+1284   	; 0xc0e <gfx_mono_lcd_uc1608_put_byte>
     70a:	c1 50       	subi	r28, 0x01	; 1
     70c:	a0 f7       	brcc	.-24     	; 0x6f6 <gfx_mono_generic_draw_horizontal_line+0x9a>
		break;

	default:
		break;
	}
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	08 95       	ret

0000071a <gfx_mono_generic_draw_vertical_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	94 2f       	mov	r25, r20
	if (length == 0) {
     728:	44 23       	and	r20, r20
     72a:	09 f4       	brne	.+2      	; 0x72e <gfx_mono_generic_draw_vertical_line+0x14>
     72c:	46 c0       	rjmp	.+140    	; 0x7ba <gfx_mono_generic_draw_vertical_line+0xa0>
     72e:	4f ef       	ldi	r20, 0xFF	; 255
     730:	46 0f       	add	r20, r22
		return;
	}

	gfx_coord_t y2 = y + length - 1;
     732:	94 0f       	add	r25, r20

	if (y == y2) {
     734:	69 13       	cpse	r22, r25
     736:	08 c0       	rjmp	.+16     	; 0x748 <gfx_mono_generic_draw_vertical_line+0x2e>
		gfx_mono_draw_pixel(x, y, color);
     738:	42 2f       	mov	r20, r18
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
	}
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
	}

	gfx_coord_t y2 = y + length - 1;

	if (y == y2) {
		gfx_mono_draw_pixel(x, y, color);
     746:	a8 c2       	rjmp	.+1360   	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		return;
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
     748:	9f 37       	cpi	r25, 0x7F	; 127
     74a:	08 f0       	brcs	.+2      	; 0x74e <gfx_mono_generic_draw_vertical_line+0x34>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
     74c:	9f e7       	ldi	r25, 0x7F	; 127
	}

	gfx_coord_t y1page = y / 8;
     74e:	16 2f       	mov	r17, r22
     750:	16 95       	lsr	r17
     752:	16 95       	lsr	r17
     754:	16 95       	lsr	r17
	gfx_coord_t y2page = y2 / 8;
     756:	09 2f       	mov	r16, r25
     758:	06 95       	lsr	r16
     75a:	06 95       	lsr	r16
     75c:	06 95       	lsr	r16

	uint8_t y1bitpos = y & 0x07;
     75e:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
     760:	ef ef       	ldi	r30, 0xFF	; 255
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	af 01       	movw	r20, r30
     766:	01 c0       	rjmp	.+2      	; 0x76a <gfx_mono_generic_draw_vertical_line+0x50>
     768:	44 0f       	add	r20, r20
     76a:	6a 95       	dec	r22
     76c:	ea f7       	brpl	.-6      	; 0x768 <gfx_mono_generic_draw_vertical_line+0x4e>

	gfx_coord_t y1page = y / 8;
	gfx_coord_t y2page = y2 / 8;

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;
     76e:	97 70       	andi	r25, 0x07	; 7

	uint8_t y1pixelmask = 0xFF << y1bitpos;
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
     770:	67 e0       	ldi	r22, 0x07	; 7
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	69 1b       	sub	r22, r25
     776:	71 09       	sbc	r23, r1
     778:	7f 01       	movw	r14, r30
     77a:	02 c0       	rjmp	.+4      	; 0x780 <gfx_mono_generic_draw_vertical_line+0x66>
     77c:	f5 94       	asr	r15
     77e:	e7 94       	ror	r14
     780:	6a 95       	dec	r22
     782:	e2 f7       	brpl	.-8      	; 0x77c <gfx_mono_generic_draw_vertical_line+0x62>

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     784:	10 13       	cpse	r17, r16
     786:	04 c0       	rjmp	.+8      	; 0x790 <gfx_mono_generic_draw_vertical_line+0x76>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
     788:	4e 21       	and	r20, r14
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
     78a:	68 2f       	mov	r22, r24
     78c:	81 2f       	mov	r24, r17
     78e:	0e c0       	rjmp	.+28     	; 0x7ac <gfx_mono_generic_draw_vertical_line+0x92>
     790:	d2 2f       	mov	r29, r18
     792:	c8 2f       	mov	r28, r24
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     794:	6c 2f       	mov	r22, r28
     796:	81 2f       	mov	r24, r17
     798:	5a d2       	rcall	.+1204   	; 0xc4e <gfx_mono_lcd_uc1608_mask_byte>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     79a:	1f 5f       	subi	r17, 0xFF	; 255
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     79c:	2d 2f       	mov	r18, r29
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     79e:	10 17       	cp	r17, r16
     7a0:	10 f4       	brcc	.+4      	; 0x7a6 <gfx_mono_generic_draw_vertical_line+0x8c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     7a2:	4f ef       	ldi	r20, 0xFF	; 255
     7a4:	f7 cf       	rjmp	.-18     	; 0x794 <gfx_mono_generic_draw_vertical_line+0x7a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     7a6:	4e 2d       	mov	r20, r14
     7a8:	6c 2f       	mov	r22, r28
     7aa:	80 2f       	mov	r24, r16
	}
}
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14

		while (++y1page < y2page) {
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     7b8:	4a c2       	rjmp	.+1172   	; 0xc4e <gfx_mono_lcd_uc1608_mask_byte>
	}
}
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	08 95       	ret

000007c8 <gfx_mono_generic_draw_line>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
     7c8:	8f 92       	push	r8
     7ca:	9f 92       	push	r9
     7cc:	af 92       	push	r10
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	18 2f       	mov	r17, r24
     7e2:	d6 2e       	mov	r13, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     7e4:	48 17       	cp	r20, r24
     7e6:	28 f4       	brcc	.+10     	; 0x7f2 <gfx_mono_generic_draw_line+0x2a>
		dx = x1;
		x1 = x2;
		x2 = dx;
		dy = y1;
		y1 = y2;
     7e8:	d2 2e       	mov	r13, r18
		y2 = dy;
     7ea:	26 2f       	mov	r18, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     7ec:	81 2f       	mov	r24, r17
     7ee:	14 2f       	mov	r17, r20
     7f0:	48 2f       	mov	r20, r24
		dy = y1;
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
     7f2:	c4 2f       	mov	r28, r20
     7f4:	d0 e0       	ldi	r29, 0x00	; 0
     7f6:	c1 1b       	sub	r28, r17
     7f8:	d1 09       	sbc	r29, r1
	dy = y2 - y1;
     7fa:	e2 2e       	mov	r14, r18
     7fc:	f1 2c       	mov	r15, r1
     7fe:	ed 18       	sub	r14, r13
     800:	f1 08       	sbc	r15, r1

	x = x1;
	y = y1;

	if (dx < 0) {
     802:	d7 ff       	sbrs	r29, 7
     804:	06 c0       	rjmp	.+12     	; 0x812 <gfx_mono_generic_draw_line+0x4a>
		xinc = -1;
		dx = -dx;
     806:	d1 95       	neg	r29
     808:	c1 95       	neg	r28
     80a:	d1 09       	sbc	r29, r1

	x = x1;
	y = y1;

	if (dx < 0) {
		xinc = -1;
     80c:	99 24       	eor	r9, r9
     80e:	9a 94       	dec	r9
     810:	02 c0       	rjmp	.+4      	; 0x816 <gfx_mono_generic_draw_line+0x4e>
		dx = -dx;
	} else {
		xinc = 1;
     812:	99 24       	eor	r9, r9
     814:	93 94       	inc	r9
	}

	if (dy < 0) {
     816:	f7 fe       	sbrs	r15, 7
     818:	06 c0       	rjmp	.+12     	; 0x826 <gfx_mono_generic_draw_line+0x5e>
		yinc = -1;
		dy = -dy;
     81a:	f1 94       	neg	r15
     81c:	e1 94       	neg	r14
     81e:	f1 08       	sbc	r15, r1
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     820:	88 24       	eor	r8, r8
     822:	8a 94       	dec	r8
     824:	02 c0       	rjmp	.+4      	; 0x82a <gfx_mono_generic_draw_line+0x62>
		dy = -dy;
	} else {
		yinc = 1;
     826:	88 24       	eor	r8, r8
     828:	83 94       	inc	r8
	}

	if (dx > dy) {
     82a:	ec 16       	cp	r14, r28
     82c:	fd 06       	cpc	r15, r29
     82e:	bc f4       	brge	.+46     	; 0x85e <gfx_mono_generic_draw_line+0x96>
		e = dy - dx;
     830:	57 01       	movw	r10, r14
     832:	ac 1a       	sub	r10, r28
     834:	bd 0a       	sbc	r11, r29
		for (i = 0; i <= dx; i++) {
     836:	c1 2c       	mov	r12, r1
     838:	8c 2d       	mov	r24, r12
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	c8 17       	cp	r28, r24
     83e:	d9 07       	cpc	r29, r25
     840:	2c f1       	brlt	.+74     	; 0x88c <gfx_mono_generic_draw_line+0xc4>
			gfx_mono_draw_pixel(x, y, color);
     842:	40 2f       	mov	r20, r16
     844:	6d 2d       	mov	r22, r13
     846:	81 2f       	mov	r24, r17
     848:	27 d2       	rcall	.+1102   	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     84a:	b7 fc       	sbrc	r11, 7
     84c:	03 c0       	rjmp	.+6      	; 0x854 <gfx_mono_generic_draw_line+0x8c>
				e -= dx;
     84e:	ac 1a       	sub	r10, r28
     850:	bd 0a       	sbc	r11, r29
				y += yinc;
     852:	d8 0c       	add	r13, r8
			}

			e += dy;
     854:	ae 0c       	add	r10, r14
     856:	bf 1c       	adc	r11, r15
     858:	19 0d       	add	r17, r9
		yinc = 1;
	}

	if (dx > dy) {
		e = dy - dx;
		for (i = 0; i <= dx; i++) {
     85a:	c3 94       	inc	r12
     85c:	ed cf       	rjmp	.-38     	; 0x838 <gfx_mono_generic_draw_line+0x70>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     85e:	5e 01       	movw	r10, r28
     860:	ae 18       	sub	r10, r14
     862:	bf 08       	sbc	r11, r15
		for (i = 0; i <= dy; i++) {
     864:	c1 2c       	mov	r12, r1
     866:	8c 2d       	mov	r24, r12
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	e8 16       	cp	r14, r24
     86c:	f9 06       	cpc	r15, r25
     86e:	74 f0       	brlt	.+28     	; 0x88c <gfx_mono_generic_draw_line+0xc4>
			gfx_mono_draw_pixel(x, y, color);
     870:	40 2f       	mov	r20, r16
     872:	6d 2d       	mov	r22, r13
     874:	81 2f       	mov	r24, r17
     876:	10 d2       	rcall	.+1056   	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     878:	b7 fc       	sbrc	r11, 7
     87a:	03 c0       	rjmp	.+6      	; 0x882 <gfx_mono_generic_draw_line+0xba>
				e -= dy;
     87c:	ae 18       	sub	r10, r14
     87e:	bf 08       	sbc	r11, r15
				x += xinc;
     880:	19 0d       	add	r17, r9
			}

			e += dx;
     882:	ac 0e       	add	r10, r28
     884:	bd 1e       	adc	r11, r29
     886:	d8 0c       	add	r13, r8
			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
     888:	c3 94       	inc	r12
     88a:	ed cf       	rjmp	.-38     	; 0x866 <gfx_mono_generic_draw_line+0x9e>

			e += dx;
			y += yinc;
		}
	}
}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	df 90       	pop	r13
     89a:	cf 90       	pop	r12
     89c:	bf 90       	pop	r11
     89e:	af 90       	pop	r10
     8a0:	9f 90       	pop	r9
     8a2:	8f 90       	pop	r8
     8a4:	08 95       	ret

000008a6 <gfx_mono_generic_draw_rect>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	d8 2f       	mov	r29, r24
     8b2:	16 2f       	mov	r17, r22
     8b4:	c4 2f       	mov	r28, r20
     8b6:	f2 2e       	mov	r15, r18
	gfx_mono_draw_horizontal_line(x, y, width, color);
     8b8:	20 2f       	mov	r18, r16
     8ba:	d0 de       	rcall	.-608    	; 0x65c <gfx_mono_generic_draw_horizontal_line>
     8bc:	6f ef       	ldi	r22, 0xFF	; 255
     8be:	6f 0d       	add	r22, r15
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
     8c0:	61 0f       	add	r22, r17
     8c2:	20 2f       	mov	r18, r16
     8c4:	4c 2f       	mov	r20, r28
     8c6:	8d 2f       	mov	r24, r29
     8c8:	c9 de       	rcall	.-622    	; 0x65c <gfx_mono_generic_draw_horizontal_line>

	gfx_mono_draw_vertical_line(x, y, height, color);
     8ca:	20 2f       	mov	r18, r16
     8cc:	4f 2d       	mov	r20, r15
     8ce:	61 2f       	mov	r22, r17
     8d0:	8d 2f       	mov	r24, r29
     8d2:	23 df       	rcall	.-442    	; 0x71a <gfx_mono_generic_draw_vertical_line>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	8c 0f       	add	r24, r28
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     8d8:	20 2f       	mov	r18, r16
     8da:	4f 2d       	mov	r20, r15
     8dc:	61 2f       	mov	r22, r17
     8de:	8d 0f       	add	r24, r29
}
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	ff 90       	pop	r15
{
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     8ea:	17 cf       	rjmp	.-466    	; 0x71a <gfx_mono_generic_draw_vertical_line>

000008ec <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     8ec:	ff 92       	push	r15
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
	if (height == 0) {
     8f6:	22 23       	and	r18, r18
     8f8:	69 f0       	breq	.+26     	; 0x914 <__stack+0x15>
     8fa:	c2 2f       	mov	r28, r18
     8fc:	14 2f       	mov	r17, r20
     8fe:	f6 2e       	mov	r15, r22
     900:	d8 2f       	mov	r29, r24
     902:	c1 50       	subi	r28, 0x01	; 1
     904:	6c 2f       	mov	r22, r28
     906:	6f 0d       	add	r22, r15
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     908:	20 2f       	mov	r18, r16
     90a:	41 2f       	mov	r20, r17
     90c:	8d 2f       	mov	r24, r29
     90e:	a6 de       	rcall	.-692    	; 0x65c <gfx_mono_generic_draw_horizontal_line>
     910:	c1 50       	subi	r28, 0x01	; 1
     912:	c0 f7       	brcc	.-16     	; 0x904 <__stack+0x5>
	}
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	08 95       	ret

00000920 <gfx_mono_generic_draw_circle>:
 * \param  octant_mask Bitmask indicating which octants to draw.
 */
void gfx_mono_generic_draw_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t octant_mask)
{
     920:	5f 92       	push	r5
     922:	6f 92       	push	r6
     924:	7f 92       	push	r7
     926:	8f 92       	push	r8
     928:	9f 92       	push	r9
     92a:	af 92       	push	r10
     92c:	bf 92       	push	r11
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	18 2f       	mov	r17, r24
     940:	d6 2e       	mov	r13, r22
     942:	c4 2f       	mov	r28, r20
     944:	c2 2e       	mov	r12, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     946:	41 11       	cpse	r20, r1
     948:	11 c0       	rjmp	.+34     	; 0x96c <gfx_mono_generic_draw_circle+0x4c>
		gfx_mono_draw_pixel(x, y, color);
     94a:	42 2f       	mov	r20, r18
		}

		/* Next X. */
		++offset_x;
	}
}
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	ff 90       	pop	r15
     956:	ef 90       	pop	r14
     958:	df 90       	pop	r13
     95a:	cf 90       	pop	r12
     95c:	bf 90       	pop	r11
     95e:	af 90       	pop	r10
     960:	9f 90       	pop	r9
     962:	8f 90       	pop	r8
     964:	7f 90       	pop	r7
     966:	6f 90       	pop	r6
     968:	5f 90       	pop	r5
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
		gfx_mono_draw_pixel(x, y, color);
     96a:	96 c1       	rjmp	.+812    	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     96c:	e4 2e       	mov	r14, r20
     96e:	f1 2c       	mov	r15, r1
     970:	f1 94       	neg	r15
     972:	e1 94       	neg	r14
     974:	f1 08       	sbc	r15, r1
     976:	ee 0c       	add	r14, r14
     978:	ff 1c       	adc	r15, r15
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	e8 0e       	add	r14, r24
     97e:	f1 1c       	adc	r15, r1
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     980:	d0 e0       	ldi	r29, 0x00	; 0
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     982:	80 2f       	mov	r24, r16
     984:	81 70       	andi	r24, 0x01	; 1
     986:	b8 2e       	mov	r11, r24
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT1) {
     988:	80 2f       	mov	r24, r16
     98a:	82 70       	andi	r24, 0x02	; 2
     98c:	a8 2e       	mov	r10, r24
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT2) {
     98e:	80 2f       	mov	r24, r16
     990:	84 70       	andi	r24, 0x04	; 4
     992:	98 2e       	mov	r9, r24
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT3) {
     994:	80 2f       	mov	r24, r16
     996:	88 70       	andi	r24, 0x08	; 8
     998:	88 2e       	mov	r8, r24
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT4) {
     99a:	80 2f       	mov	r24, r16
     99c:	80 71       	andi	r24, 0x10	; 16
     99e:	78 2e       	mov	r7, r24
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
		}

		if (octant_mask & GFX_OCTANT5) {
     9a0:	80 2f       	mov	r24, r16
     9a2:	80 72       	andi	r24, 0x20	; 32
     9a4:	68 2e       	mov	r6, r24
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
		}

		if (octant_mask & GFX_OCTANT6) {
     9a6:	80 2f       	mov	r24, r16
     9a8:	80 74       	andi	r24, 0x40	; 64
     9aa:	58 2e       	mov	r5, r24
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     9ac:	bb 20       	and	r11, r11
     9ae:	31 f0       	breq	.+12     	; 0x9bc <gfx_mono_generic_draw_circle+0x9c>
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
     9b0:	4c 2d       	mov	r20, r12
     9b2:	6d 2d       	mov	r22, r13
     9b4:	6d 1b       	sub	r22, r29
     9b6:	8c 2f       	mov	r24, r28
     9b8:	81 0f       	add	r24, r17
     9ba:	6e d1       	rcall	.+732    	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT1) {
     9bc:	aa 20       	and	r10, r10
     9be:	31 f0       	breq	.+12     	; 0x9cc <gfx_mono_generic_draw_circle+0xac>
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
     9c0:	4c 2d       	mov	r20, r12
     9c2:	6d 2d       	mov	r22, r13
     9c4:	6c 1b       	sub	r22, r28
     9c6:	8d 2f       	mov	r24, r29
     9c8:	81 0f       	add	r24, r17
     9ca:	66 d1       	rcall	.+716    	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT2) {
     9cc:	99 20       	and	r9, r9
     9ce:	31 f0       	breq	.+12     	; 0x9dc <gfx_mono_generic_draw_circle+0xbc>
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
     9d0:	4c 2d       	mov	r20, r12
     9d2:	6d 2d       	mov	r22, r13
     9d4:	6c 1b       	sub	r22, r28
     9d6:	81 2f       	mov	r24, r17
     9d8:	8d 1b       	sub	r24, r29
     9da:	5e d1       	rcall	.+700    	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT3) {
     9dc:	88 20       	and	r8, r8
     9de:	31 f0       	breq	.+12     	; 0x9ec <gfx_mono_generic_draw_circle+0xcc>
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
     9e0:	4c 2d       	mov	r20, r12
     9e2:	6d 2d       	mov	r22, r13
     9e4:	6d 1b       	sub	r22, r29
     9e6:	81 2f       	mov	r24, r17
     9e8:	8c 1b       	sub	r24, r28
     9ea:	56 d1       	rcall	.+684    	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT4) {
     9ec:	77 20       	and	r7, r7
     9ee:	31 f0       	breq	.+12     	; 0x9fc <gfx_mono_generic_draw_circle+0xdc>
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
     9f0:	4c 2d       	mov	r20, r12
     9f2:	6d 2f       	mov	r22, r29
     9f4:	6d 0d       	add	r22, r13
     9f6:	81 2f       	mov	r24, r17
     9f8:	8c 1b       	sub	r24, r28
     9fa:	4e d1       	rcall	.+668    	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT5) {
     9fc:	66 20       	and	r6, r6
     9fe:	31 f0       	breq	.+12     	; 0xa0c <gfx_mono_generic_draw_circle+0xec>
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
     a00:	4c 2d       	mov	r20, r12
     a02:	6c 2f       	mov	r22, r28
     a04:	6d 0d       	add	r22, r13
     a06:	81 2f       	mov	r24, r17
     a08:	8d 1b       	sub	r24, r29
     a0a:	46 d1       	rcall	.+652    	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT6) {
     a0c:	55 20       	and	r5, r5
     a0e:	31 f0       	breq	.+12     	; 0xa1c <gfx_mono_generic_draw_circle+0xfc>
			gfx_mono_draw_pixel(x + offset_x, y + offset_y, color);
     a10:	4c 2d       	mov	r20, r12
     a12:	6c 2f       	mov	r22, r28
     a14:	6d 0d       	add	r22, r13
     a16:	8d 2f       	mov	r24, r29
     a18:	81 0f       	add	r24, r17
     a1a:	3e d1       	rcall	.+636    	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT7) {
     a1c:	07 ff       	sbrs	r16, 7
     a1e:	06 c0       	rjmp	.+12     	; 0xa2c <gfx_mono_generic_draw_circle+0x10c>
			gfx_mono_draw_pixel(x + offset_y, y + offset_x, color);
     a20:	4c 2d       	mov	r20, r12
     a22:	6d 2f       	mov	r22, r29
     a24:	6d 0d       	add	r22, r13
     a26:	8c 2f       	mov	r24, r28
     a28:	81 0f       	add	r24, r17
     a2a:	36 d1       	rcall	.+620    	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
     a2c:	ed 2f       	mov	r30, r29
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     a30:	f7 fe       	sbrs	r15, 7
     a32:	08 c0       	rjmp	.+16     	; 0xa44 <gfx_mono_generic_draw_circle+0x124>
			error += ((offset_x << 2) + 6);
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	36 96       	adiw	r30, 0x06	; 6
     a3e:	ee 0e       	add	r14, r30
     a40:	ff 1e       	adc	r15, r31
     a42:	0a c0       	rjmp	.+20     	; 0xa58 <gfx_mono_generic_draw_circle+0x138>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     a44:	ec 1b       	sub	r30, r28
     a46:	f1 09       	sbc	r31, r1
     a48:	ee 0f       	add	r30, r30
     a4a:	ff 1f       	adc	r31, r31
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	3a 96       	adiw	r30, 0x0a	; 10
     a52:	ee 0e       	add	r14, r30
     a54:	ff 1e       	adc	r15, r31
			--offset_y;
     a56:	c1 50       	subi	r28, 0x01	; 1
		}

		/* Next X. */
		++offset_x;
     a58:	df 5f       	subi	r29, 0xFF	; 255
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
     a5a:	cd 17       	cp	r28, r29
     a5c:	08 f0       	brcs	.+2      	; 0xa60 <gfx_mono_generic_draw_circle+0x140>
     a5e:	a6 cf       	rjmp	.-180    	; 0x9ac <gfx_mono_generic_draw_circle+0x8c>
		}

		/* Next X. */
		++offset_x;
	}
}
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	7f 90       	pop	r7
     a7a:	6f 90       	pop	r6
     a7c:	5f 90       	pop	r5
     a7e:	08 95       	ret

00000a80 <gfx_mono_generic_draw_filled_circle>:
 * \param  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
     a80:	8f 92       	push	r8
     a82:	9f 92       	push	r9
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	18 2f       	mov	r17, r24
     a9a:	d6 2e       	mov	r13, r22
     a9c:	c4 2f       	mov	r28, r20
     a9e:	c2 2e       	mov	r12, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     aa0:	41 11       	cpse	r20, r1
     aa2:	0e c0       	rjmp	.+28     	; 0xac0 <gfx_mono_generic_draw_filled_circle+0x40>
		gfx_mono_draw_pixel(x, y, color);
     aa4:	42 2f       	mov	r20, r18
		}

		/* Next X. */
		++offset_x;
	}
}
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	df 90       	pop	r13
     ab4:	cf 90       	pop	r12
     ab6:	bf 90       	pop	r11
     ab8:	af 90       	pop	r10
     aba:	9f 90       	pop	r9
     abc:	8f 90       	pop	r8
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
		gfx_mono_draw_pixel(x, y, color);
     abe:	ec c0       	rjmp	.+472    	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     ac0:	e4 2e       	mov	r14, r20
     ac2:	f1 2c       	mov	r15, r1
     ac4:	f1 94       	neg	r15
     ac6:	e1 94       	neg	r14
     ac8:	f1 08       	sbc	r15, r1
     aca:	ee 0c       	add	r14, r14
     acc:	ff 1c       	adc	r15, r15
     ace:	83 e0       	ldi	r24, 0x03	; 3
     ad0:	e8 0e       	add	r14, r24
     ad2:	f1 1c       	adc	r15, r1
     ad4:	bb 24       	eor	r11, r11
     ad6:	b3 94       	inc	r11
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     ad8:	d0 e0       	ldi	r29, 0x00	; 0
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     ada:	80 2f       	mov	r24, r16
     adc:	83 70       	andi	r24, 0x03	; 3
     ade:	a8 2e       	mov	r10, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     ae0:	80 2f       	mov	r24, r16
     ae2:	8c 70       	andi	r24, 0x0C	; 12
     ae4:	98 2e       	mov	r9, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     ae6:	80 2f       	mov	r24, r16
     ae8:	80 73       	andi	r24, 0x30	; 48
     aea:	88 2e       	mov	r8, r24
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     aec:	00 7c       	andi	r16, 0xC0	; 192
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     aee:	aa 20       	and	r10, r10
     af0:	79 f0       	breq	.+30     	; 0xb10 <gfx_mono_generic_draw_filled_circle+0x90>
			gfx_mono_draw_vertical_line(x + offset_y,
     af2:	2c 2d       	mov	r18, r12
     af4:	4b 2d       	mov	r20, r11
     af6:	6d 2d       	mov	r22, r13
     af8:	6d 1b       	sub	r22, r29
     afa:	8c 2f       	mov	r24, r28
     afc:	81 0f       	add	r24, r17
     afe:	0d de       	rcall	.-998    	; 0x71a <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     b00:	2c 2d       	mov	r18, r12
     b02:	41 e0       	ldi	r20, 0x01	; 1
     b04:	4c 0f       	add	r20, r28
     b06:	6d 2d       	mov	r22, r13
     b08:	6c 1b       	sub	r22, r28
     b0a:	8d 2f       	mov	r24, r29
     b0c:	81 0f       	add	r24, r17
     b0e:	05 de       	rcall	.-1014   	; 0x71a <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     b10:	99 20       	and	r9, r9
     b12:	79 f0       	breq	.+30     	; 0xb32 <gfx_mono_generic_draw_filled_circle+0xb2>
			gfx_mono_draw_vertical_line(x - offset_y,
     b14:	2c 2d       	mov	r18, r12
     b16:	4b 2d       	mov	r20, r11
     b18:	6d 2d       	mov	r22, r13
     b1a:	6d 1b       	sub	r22, r29
     b1c:	81 2f       	mov	r24, r17
     b1e:	8c 1b       	sub	r24, r28
     b20:	fc dd       	rcall	.-1032   	; 0x71a <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     b22:	2c 2d       	mov	r18, r12
     b24:	41 e0       	ldi	r20, 0x01	; 1
     b26:	4c 0f       	add	r20, r28
     b28:	6d 2d       	mov	r22, r13
     b2a:	6c 1b       	sub	r22, r28
     b2c:	81 2f       	mov	r24, r17
     b2e:	8d 1b       	sub	r24, r29
     b30:	f4 dd       	rcall	.-1048   	; 0x71a <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     b32:	88 20       	and	r8, r8
     b34:	69 f0       	breq	.+26     	; 0xb50 <gfx_mono_generic_draw_filled_circle+0xd0>
			gfx_mono_draw_vertical_line(x - offset_y,
     b36:	2c 2d       	mov	r18, r12
     b38:	4b 2d       	mov	r20, r11
     b3a:	6d 2d       	mov	r22, r13
     b3c:	81 2f       	mov	r24, r17
     b3e:	8c 1b       	sub	r24, r28
     b40:	ec dd       	rcall	.-1064   	; 0x71a <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     b42:	2c 2d       	mov	r18, r12
     b44:	41 e0       	ldi	r20, 0x01	; 1
     b46:	4c 0f       	add	r20, r28
     b48:	6d 2d       	mov	r22, r13
     b4a:	81 2f       	mov	r24, r17
     b4c:	8d 1b       	sub	r24, r29
     b4e:	e5 dd       	rcall	.-1078   	; 0x71a <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     b50:	00 23       	and	r16, r16
     b52:	69 f0       	breq	.+26     	; 0xb6e <gfx_mono_generic_draw_filled_circle+0xee>
			gfx_mono_draw_vertical_line(x + offset_y,
     b54:	2c 2d       	mov	r18, r12
     b56:	4b 2d       	mov	r20, r11
     b58:	6d 2d       	mov	r22, r13
     b5a:	8c 2f       	mov	r24, r28
     b5c:	81 0f       	add	r24, r17
     b5e:	dd dd       	rcall	.-1094   	; 0x71a <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     b60:	2c 2d       	mov	r18, r12
     b62:	41 e0       	ldi	r20, 0x01	; 1
     b64:	4c 0f       	add	r20, r28
     b66:	6d 2d       	mov	r22, r13
     b68:	8d 2f       	mov	r24, r29
     b6a:	81 0f       	add	r24, r17
     b6c:	d6 dd       	rcall	.-1108   	; 0x71a <gfx_mono_generic_draw_vertical_line>
     b6e:	ed 2f       	mov	r30, r29
     b70:	f0 e0       	ldi	r31, 0x00	; 0
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     b72:	f7 fe       	sbrs	r15, 7
     b74:	08 c0       	rjmp	.+16     	; 0xb86 <gfx_mono_generic_draw_filled_circle+0x106>
			error += ((offset_x << 2) + 6);
     b76:	ee 0f       	add	r30, r30
     b78:	ff 1f       	adc	r31, r31
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	36 96       	adiw	r30, 0x06	; 6
     b80:	ee 0e       	add	r14, r30
     b82:	ff 1e       	adc	r15, r31
     b84:	0a c0       	rjmp	.+20     	; 0xb9a <gfx_mono_generic_draw_filled_circle+0x11a>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     b86:	ec 1b       	sub	r30, r28
     b88:	f1 09       	sbc	r31, r1
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	ee 0f       	add	r30, r30
     b90:	ff 1f       	adc	r31, r31
     b92:	3a 96       	adiw	r30, 0x0a	; 10
     b94:	ee 0e       	add	r14, r30
     b96:	ff 1e       	adc	r15, r31
			--offset_y;
     b98:	c1 50       	subi	r28, 0x01	; 1
		}

		/* Next X. */
		++offset_x;
     b9a:	df 5f       	subi	r29, 0xFF	; 255
     b9c:	b3 94       	inc	r11
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
     b9e:	cd 17       	cp	r28, r29
     ba0:	08 f0       	brcs	.+2      	; 0xba4 <gfx_mono_generic_draw_filled_circle+0x124>
     ba2:	a5 cf       	rjmp	.-182    	; 0xaee <gfx_mono_generic_draw_filled_circle+0x6e>
		}

		/* Next X. */
		++offset_x;
	}
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	df 90       	pop	r13
     bb2:	cf 90       	pop	r12
     bb4:	bf 90       	pop	r11
     bb6:	af 90       	pop	r10
     bb8:	9f 90       	pop	r9
     bba:	8f 90       	pop	r8
     bbc:	08 95       	ret

00000bbe <gfx_mono_lcd_uc1608_put_page>:
		uint8_t				byte = gfx_mono_lcd_uc1608_get_byte(page, x);

		isSet = (byte & pixel_mask) ?  GFX_PIXEL_SET : GFX_PIXEL_CLR;
	}
	return isSet;
}
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	8c 01       	movw	r16, r24
     bc8:	86 2f       	mov	r24, r22
     bca:	d4 2f       	mov	r29, r20
     bcc:	c2 2f       	mov	r28, r18
     bce:	01 15       	cp	r16, r1
     bd0:	11 05       	cpc	r17, r1
     bd2:	c1 f0       	breq	.+48     	; 0xc04 <gfx_mono_lcd_uc1608_put_page+0x46>
     bd4:	60 31       	cpi	r22, 0x10	; 16
     bd6:	b0 f4       	brcc	.+44     	; 0xc04 <gfx_mono_lcd_uc1608_put_page+0x46>
     bd8:	40 3f       	cpi	r20, 0xF0	; 240
     bda:	a0 f4       	brcc	.+40     	; 0xc04 <gfx_mono_lcd_uc1608_put_page+0x46>
     bdc:	75 d6       	rcall	.+3306   	; 0x18c8 <lcd_page_set>
     bde:	8d 2f       	mov	r24, r29
     be0:	79 d6       	rcall	.+3314   	; 0x18d4 <lcd_col_set>
     be2:	8c 2f       	mov	r24, r28
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	8d 0f       	add	r24, r29
     be8:	91 1d       	adc	r25, r1
     bea:	81 3f       	cpi	r24, 0xF1	; 241
     bec:	91 05       	cpc	r25, r1
     bee:	14 f0       	brlt	.+4      	; 0xbf4 <gfx_mono_lcd_uc1608_put_page+0x36>
     bf0:	c0 ef       	ldi	r28, 0xF0	; 240
     bf2:	cd 1b       	sub	r28, r29
     bf4:	cc 23       	and	r28, r28
     bf6:	31 f0       	breq	.+12     	; 0xc04 <gfx_mono_lcd_uc1608_put_page+0x46>
     bf8:	f8 01       	movw	r30, r16
     bfa:	81 91       	ld	r24, Z+
     bfc:	8f 01       	movw	r16, r30
     bfe:	42 d6       	rcall	.+3204   	; 0x1884 <lcd_bus_write_ram>
     c00:	c1 50       	subi	r28, 0x01	; 1
     c02:	f8 cf       	rjmp	.-16     	; 0xbf4 <gfx_mono_lcd_uc1608_put_page+0x36>
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	08 95       	ret

00000c0e <gfx_mono_lcd_uc1608_put_byte>:
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	80 31       	cpi	r24, 0x10	; 16
     c14:	58 f4       	brcc	.+22     	; 0xc2c <gfx_mono_lcd_uc1608_put_byte+0x1e>
     c16:	60 3f       	cpi	r22, 0xF0	; 240
     c18:	48 f4       	brcc	.+18     	; 0xc2c <gfx_mono_lcd_uc1608_put_byte+0x1e>
     c1a:	d4 2f       	mov	r29, r20
     c1c:	c6 2f       	mov	r28, r22
     c1e:	54 d6       	rcall	.+3240   	; 0x18c8 <lcd_page_set>
     c20:	8c 2f       	mov	r24, r28
     c22:	58 d6       	rcall	.+3248   	; 0x18d4 <lcd_col_set>
     c24:	8d 2f       	mov	r24, r29
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	2c c6       	rjmp	.+3160   	; 0x1884 <lcd_bus_write_ram>
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <gfx_mono_lcd_uc1608_get_byte>:
     c32:	cf 93       	push	r28
     c34:	80 31       	cpi	r24, 0x10	; 16
     c36:	40 f4       	brcc	.+16     	; 0xc48 <gfx_mono_lcd_uc1608_get_byte+0x16>
     c38:	60 3f       	cpi	r22, 0xF0	; 240
     c3a:	30 f4       	brcc	.+12     	; 0xc48 <gfx_mono_lcd_uc1608_get_byte+0x16>
     c3c:	c6 2f       	mov	r28, r22
     c3e:	44 d6       	rcall	.+3208   	; 0x18c8 <lcd_page_set>
     c40:	8c 2f       	mov	r24, r28
     c42:	48 d6       	rcall	.+3216   	; 0x18d4 <lcd_col_set>
     c44:	cf 91       	pop	r28
     c46:	2b c6       	rjmp	.+3158   	; 0x189e <lcd_bus_read_ram>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <gfx_mono_lcd_uc1608_mask_byte>:
 * \param column     Page offset (x coordinate)
 * \param pixel_mask Mask for pixel operation
 * \param color      Pixel operation
 */
void gfx_mono_lcd_uc1608_mask_byte(gfx_coord_t page, gfx_coord_t column, gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
	uint8_t data = 0;

	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
     c56:	80 31       	cpi	r24, 0x10	; 16
     c58:	d0 f4       	brcc	.+52     	; 0xc8e <gfx_mono_lcd_uc1608_mask_byte+0x40>
     c5a:	60 3f       	cpi	r22, 0xF0	; 240
     c5c:	c0 f4       	brcc	.+48     	; 0xc8e <gfx_mono_lcd_uc1608_mask_byte+0x40>
     c5e:	02 2f       	mov	r16, r18
     c60:	d4 2f       	mov	r29, r20
     c62:	16 2f       	mov	r17, r22
		data = gfx_mono_lcd_uc1608_get_byte(page, column);
     c64:	e6 df       	rcall	.-52     	; 0xc32 <gfx_mono_lcd_uc1608_get_byte>
     c66:	c8 2f       	mov	r28, r24

		switch (color) {
     c68:	01 30       	cpi	r16, 0x01	; 1
     c6a:	41 f0       	breq	.+16     	; 0xc7c <gfx_mono_lcd_uc1608_mask_byte+0x2e>
     c6c:	20 f0       	brcs	.+8      	; 0xc76 <gfx_mono_lcd_uc1608_mask_byte+0x28>
     c6e:	02 30       	cpi	r16, 0x02	; 2
     c70:	31 f4       	brne	.+12     	; 0xc7e <gfx_mono_lcd_uc1608_mask_byte+0x30>
			case GFX_PIXEL_SET:
				data |= pixel_mask;
				break;

			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
     c72:	cd 27       	eor	r28, r29
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <gfx_mono_lcd_uc1608_mask_byte+0x30>
	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
		data = gfx_mono_lcd_uc1608_get_byte(page, column);

		switch (color) {
			case GFX_PIXEL_CLR:
				data &= ~pixel_mask;
     c76:	d0 95       	com	r29
     c78:	cd 23       	and	r28, r29
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <gfx_mono_lcd_uc1608_mask_byte+0x30>
				break;

			case GFX_PIXEL_SET:
				data |= pixel_mask;
     c7c:	cd 2b       	or	r28, r29
			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
				break;
		}

		lcd_col_set(column);
     c7e:	81 2f       	mov	r24, r17
     c80:	29 d6       	rcall	.+3154   	; 0x18d4 <lcd_col_set>
		lcd_bus_write_ram(data);										// Write byte slice to RAM
     c82:	8c 2f       	mov	r24, r28
	}
}
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
				data ^= pixel_mask;
				break;
		}

		lcd_col_set(column);
		lcd_bus_write_ram(data);										// Write byte slice to RAM
     c8c:	fb c5       	rjmp	.+3062   	; 0x1884 <lcd_bus_write_ram>
	}
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	08 95       	ret

00000c98 <gfx_mono_lcd_uc1608_draw_pixel>:
 * \param x         X coordinate of the pixel
 * \param y         Y coordinate of the pixel
 * \param color     Pixel operation.
 */
void gfx_mono_lcd_uc1608_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_mono_color_t color)
{
     c98:	96 2f       	mov	r25, r22
     c9a:	24 2f       	mov	r18, r20
	if ((x < GFX_MONO_LCD_WIDTH) && (y < GFX_MONO_LCD_HEIGHT)) {
     c9c:	80 3f       	cpi	r24, 0xF0	; 240
     c9e:	88 f4       	brcc	.+34     	; 0xcc2 <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     ca0:	67 fd       	sbrc	r22, 7
     ca2:	0f c0       	rjmp	.+30     	; 0xcc2 <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
		gfx_coord_t			page		= y / GFX_MONO_LCD_PIXELS_PER_BYTE;
		gfx_mono_color_t	pixel_mask	= 1 << (y % GFX_MONO_LCD_PIXELS_PER_BYTE);
     ca4:	36 2f       	mov	r19, r22
     ca6:	37 70       	andi	r19, 0x07	; 7
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	af 01       	movw	r20, r30
     cae:	01 c0       	rjmp	.+2      	; 0xcb2 <gfx_mono_lcd_uc1608_draw_pixel+0x1a>
     cb0:	44 0f       	add	r20, r20
     cb2:	3a 95       	dec	r19
     cb4:	ea f7       	brpl	.-6      	; 0xcb0 <gfx_mono_lcd_uc1608_draw_pixel+0x18>

		gfx_mono_lcd_uc1608_mask_byte(page, x, pixel_mask, color);
     cb6:	68 2f       	mov	r22, r24
     cb8:	89 2f       	mov	r24, r25
     cba:	86 95       	lsr	r24
     cbc:	86 95       	lsr	r24
     cbe:	86 95       	lsr	r24
     cc0:	c6 cf       	rjmp	.-116    	; 0xc4e <gfx_mono_lcd_uc1608_mask_byte>
     cc2:	08 95       	ret

00000cc4 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     cc4:	9f 92       	push	r9
     cc6:	af 92       	push	r10
     cc8:	bf 92       	push	r11
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	d8 2f       	mov	r29, r24
     cdc:	c6 2e       	mov	r12, r22
     cde:	d4 2e       	mov	r13, r20
     ce0:	79 01       	movw	r14, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     ce2:	00 e0       	ldi	r16, 0x00	; 0
     ce4:	d9 01       	movw	r26, r18
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2c 91       	ld	r18, X
     cea:	14 97       	sbiw	r26, 0x04	; 4
     cec:	13 96       	adiw	r26, 0x03	; 3
     cee:	4c 91       	ld	r20, X
     cf0:	6d 2d       	mov	r22, r13
     cf2:	8c 2d       	mov	r24, r12
     cf4:	fb dd       	rcall	.-1034   	; 0x8ec <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     cf6:	f7 01       	movw	r30, r14
     cf8:	80 81       	ld	r24, Z
     cfa:	81 11       	cpse	r24, r1
     cfc:	3f c0       	rjmp	.+126    	; 0xd7c <gfx_mono_draw_char+0xb8>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     cfe:	83 81       	ldd	r24, Z+3	; 0x03
     d00:	e8 2f       	mov	r30, r24
     d02:	e6 95       	lsr	r30
     d04:	e6 95       	lsr	r30
     d06:	e6 95       	lsr	r30
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     d08:	87 70       	andi	r24, 0x07	; 7
     d0a:	09 f0       	breq	.+2      	; 0xd0e <gfx_mono_draw_char+0x4a>
		char_row_size++;
     d0c:	ef 5f       	subi	r30, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     d0e:	d7 01       	movw	r26, r14
     d10:	14 96       	adiw	r26, 0x04	; 4
     d12:	cc 91       	ld	r28, X
     d14:	14 97       	sbiw	r26, 0x04	; 4
     d16:	ec 9f       	mul	r30, r28
     d18:	f0 01       	movw	r30, r0
     d1a:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
     d1c:	2d 2f       	mov	r18, r29
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	15 96       	adiw	r26, 0x05	; 5
     d22:	8c 91       	ld	r24, X
     d24:	15 97       	sbiw	r26, 0x05	; 5
     d26:	28 1b       	sub	r18, r24
     d28:	31 09       	sbc	r19, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
     d2a:	e2 9f       	mul	r30, r18
     d2c:	c0 01       	movw	r24, r0
     d2e:	e3 9f       	mul	r30, r19
     d30:	90 0d       	add	r25, r0
     d32:	f2 9f       	mul	r31, r18
     d34:	90 0d       	add	r25, r0
     d36:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     d38:	11 96       	adiw	r26, 0x01	; 1
     d3a:	0d 91       	ld	r16, X+
     d3c:	1c 91       	ld	r17, X
     d3e:	12 97       	sbiw	r26, 0x02	; 2
     d40:	08 0f       	add	r16, r24
     d42:	19 1f       	adc	r17, r25
     d44:	dc 0e       	add	r13, r28
     d46:	9d 2c       	mov	r9, r13
     d48:	9c 1a       	sub	r9, r28
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     d4a:	f7 01       	movw	r30, r14
     d4c:	a3 80       	ldd	r10, Z+3	; 0x03
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
     d4e:	b1 2c       	mov	r11, r1
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     d50:	d0 e0       	ldi	r29, 0x00	; 0
     d52:	8d 2f       	mov	r24, r29
     d54:	8c 0d       	add	r24, r12
     d56:	da 15       	cp	r29, r10
     d58:	79 f0       	breq	.+30     	; 0xd78 <gfx_mono_draw_char+0xb4>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     d5a:	9d 2f       	mov	r25, r29
     d5c:	97 70       	andi	r25, 0x07	; 7
     d5e:	21 f4       	brne	.+8      	; 0xd68 <gfx_mono_draw_char+0xa4>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     d60:	f8 01       	movw	r30, r16
     d62:	b4 90       	lpm	r11, Z
				glyph_data++;
     d64:	0f 5f       	subi	r16, 0xFF	; 255
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     d68:	b7 fe       	sbrs	r11, 7
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <gfx_mono_draw_char+0xae>
				gfx_mono_draw_pixel(inc_x, inc_y,
     d6c:	41 e0       	ldi	r20, 0x01	; 1
     d6e:	69 2d       	mov	r22, r9
     d70:	93 df       	rcall	.-218    	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     d72:	bb 0c       	add	r11, r11

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     d74:	df 5f       	subi	r29, 0xFF	; 255
     d76:	ed cf       	rjmp	.-38     	; 0xd52 <gfx_mono_draw_char+0x8e>
			glyph_byte <<= 1;
		}

		inc_y += 1;
		inc_x = x;
		rows_left--;
     d78:	c1 50       	subi	r28, 0x01	; 1
	} while (rows_left > 0);
     d7a:	29 f7       	brne	.-54     	; 0xd46 <gfx_mono_draw_char+0x82>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	df 90       	pop	r13
     d8a:	cf 90       	pop	r12
     d8c:	bf 90       	pop	r11
     d8e:	af 90       	pop	r10
     d90:	9f 90       	pop	r9
     d92:	08 95       	ret

00000d94 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     d94:	df 92       	push	r13
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	d6 2e       	mov	r13, r22
     da4:	d4 2f       	mov	r29, r20
     da6:	79 01       	movw	r14, r18
     da8:	8c 01       	movw	r16, r24
     daa:	c6 2f       	mov	r28, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     dac:	f8 01       	movw	r30, r16
     dae:	81 91       	ld	r24, Z+
     db0:	8f 01       	movw	r16, r30
     db2:	8a 30       	cpi	r24, 0x0A	; 10
     db4:	31 f4       	brne	.+12     	; 0xdc2 <gfx_mono_draw_string+0x2e>
     db6:	f7 01       	movw	r30, r14
     db8:	84 81       	ldd	r24, Z+4	; 0x04
     dba:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
     dbc:	d8 0f       	add	r29, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     dbe:	cd 2d       	mov	r28, r13
     dc0:	09 c0       	rjmp	.+18     	; 0xdd4 <gfx_mono_draw_string+0x40>
			y += font->height + 1;
		} else if (*str == '\r') {
     dc2:	8d 30       	cpi	r24, 0x0D	; 13
     dc4:	39 f0       	breq	.+14     	; 0xdd4 <gfx_mono_draw_string+0x40>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     dc6:	97 01       	movw	r18, r14
     dc8:	4d 2f       	mov	r20, r29
     dca:	6c 2f       	mov	r22, r28
     dcc:	7b df       	rcall	.-266    	; 0xcc4 <gfx_mono_draw_char>
			x += font->width;
     dce:	f7 01       	movw	r30, r14
     dd0:	83 81       	ldd	r24, Z+3	; 0x03
     dd2:	c8 0f       	add	r28, r24
		}
	} while (*(++str));
     dd4:	f8 01       	movw	r30, r16
     dd6:	80 81       	ld	r24, Z
     dd8:	81 11       	cpse	r24, r1
     dda:	e8 cf       	rjmp	.-48     	; 0xdac <gfx_mono_draw_string+0x18>
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	08 95       	ret

00000dec <asm_break>:

/* Helper functions */

void asm_break(void)
{
	__asm__ __volatile__ ("break" ::: "memory");
     dec:	98 95       	break
	nop();
     dee:	00 00       	nop
     df0:	08 95       	ret

00000df2 <__vector_1>:
	asm_break();
}


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
     df2:	1f 92       	push	r1
     df4:	0f 92       	push	r0
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	0f 92       	push	r0
     dfa:	11 24       	eor	r1, r1
     dfc:	2f 93       	push	r18
     dfe:	3f 93       	push	r19
     e00:	4f 93       	push	r20
     e02:	5f 93       	push	r21
     e04:	6f 93       	push	r22
     e06:	7f 93       	push	r23
     e08:	8f 93       	push	r24
     e0a:	9f 93       	push	r25
     e0c:	af 93       	push	r26
     e0e:	bf 93       	push	r27
     e10:	ef 93       	push	r30
     e12:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     e14:	eb df       	rcall	.-42     	; 0xdec <asm_break>


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
	s_bad_interrupt();
}
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <__vector_2>:

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
     e38:	1f 92       	push	r1
     e3a:	0f 92       	push	r0
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	0f 92       	push	r0
     e40:	11 24       	eor	r1, r1
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     e5a:	c8 df       	rcall	.-112    	; 0xdec <asm_break>
}

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
	s_bad_interrupt();
}
     e5c:	ff 91       	pop	r31
     e5e:	ef 91       	pop	r30
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <__vector_3>:

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	2f 93       	push	r18
     e8a:	3f 93       	push	r19
     e8c:	4f 93       	push	r20
     e8e:	5f 93       	push	r21
     e90:	6f 93       	push	r22
     e92:	7f 93       	push	r23
     e94:	8f 93       	push	r24
     e96:	9f 93       	push	r25
     e98:	af 93       	push	r26
     e9a:	bf 93       	push	r27
     e9c:	ef 93       	push	r30
     e9e:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     ea0:	a5 df       	rcall	.-182    	; 0xdec <asm_break>
}

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
	s_bad_interrupt();
}
     ea2:	ff 91       	pop	r31
     ea4:	ef 91       	pop	r30
     ea6:	bf 91       	pop	r27
     ea8:	af 91       	pop	r26
     eaa:	9f 91       	pop	r25
     eac:	8f 91       	pop	r24
     eae:	7f 91       	pop	r23
     eb0:	6f 91       	pop	r22
     eb2:	5f 91       	pop	r21
     eb4:	4f 91       	pop	r20
     eb6:	3f 91       	pop	r19
     eb8:	2f 91       	pop	r18
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	0f 90       	pop	r0
     ec0:	1f 90       	pop	r1
     ec2:	18 95       	reti

00000ec4 <__vector_4>:

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
     ec4:	1f 92       	push	r1
     ec6:	0f 92       	push	r0
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	0f 92       	push	r0
     ecc:	11 24       	eor	r1, r1
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     ee6:	82 df       	rcall	.-252    	; 0xdec <asm_break>
}

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
	s_bad_interrupt();
}
     ee8:	ff 91       	pop	r31
     eea:	ef 91       	pop	r30
     eec:	bf 91       	pop	r27
     eee:	af 91       	pop	r26
     ef0:	9f 91       	pop	r25
     ef2:	8f 91       	pop	r24
     ef4:	7f 91       	pop	r23
     ef6:	6f 91       	pop	r22
     ef8:	5f 91       	pop	r21
     efa:	4f 91       	pop	r20
     efc:	3f 91       	pop	r19
     efe:	2f 91       	pop	r18
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0
     f06:	1f 90       	pop	r1
     f08:	18 95       	reti

00000f0a <__vector_5>:

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
     f0a:	1f 92       	push	r1
     f0c:	0f 92       	push	r0
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	0f 92       	push	r0
     f12:	11 24       	eor	r1, r1
     f14:	2f 93       	push	r18
     f16:	3f 93       	push	r19
     f18:	4f 93       	push	r20
     f1a:	5f 93       	push	r21
     f1c:	6f 93       	push	r22
     f1e:	7f 93       	push	r23
     f20:	8f 93       	push	r24
     f22:	9f 93       	push	r25
     f24:	af 93       	push	r26
     f26:	bf 93       	push	r27
     f28:	ef 93       	push	r30
     f2a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     f2c:	5f df       	rcall	.-322    	; 0xdec <asm_break>
}

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
	s_bad_interrupt();
}
     f2e:	ff 91       	pop	r31
     f30:	ef 91       	pop	r30
     f32:	bf 91       	pop	r27
     f34:	af 91       	pop	r26
     f36:	9f 91       	pop	r25
     f38:	8f 91       	pop	r24
     f3a:	7f 91       	pop	r23
     f3c:	6f 91       	pop	r22
     f3e:	5f 91       	pop	r21
     f40:	4f 91       	pop	r20
     f42:	3f 91       	pop	r19
     f44:	2f 91       	pop	r18
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	0f 90       	pop	r0
     f4c:	1f 90       	pop	r1
     f4e:	18 95       	reti

00000f50 <__vector_6>:

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
     f50:	1f 92       	push	r1
     f52:	0f 92       	push	r0
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	0f 92       	push	r0
     f58:	11 24       	eor	r1, r1
     f5a:	2f 93       	push	r18
     f5c:	3f 93       	push	r19
     f5e:	4f 93       	push	r20
     f60:	5f 93       	push	r21
     f62:	6f 93       	push	r22
     f64:	7f 93       	push	r23
     f66:	8f 93       	push	r24
     f68:	9f 93       	push	r25
     f6a:	af 93       	push	r26
     f6c:	bf 93       	push	r27
     f6e:	ef 93       	push	r30
     f70:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     f72:	3c df       	rcall	.-392    	; 0xdec <asm_break>
}

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
	s_bad_interrupt();
}
     f74:	ff 91       	pop	r31
     f76:	ef 91       	pop	r30
     f78:	bf 91       	pop	r27
     f7a:	af 91       	pop	r26
     f7c:	9f 91       	pop	r25
     f7e:	8f 91       	pop	r24
     f80:	7f 91       	pop	r23
     f82:	6f 91       	pop	r22
     f84:	5f 91       	pop	r21
     f86:	4f 91       	pop	r20
     f88:	3f 91       	pop	r19
     f8a:	2f 91       	pop	r18
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti

00000f96 <__vector_7>:

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	0f 92       	push	r0
     f9e:	11 24       	eor	r1, r1
     fa0:	2f 93       	push	r18
     fa2:	3f 93       	push	r19
     fa4:	4f 93       	push	r20
     fa6:	5f 93       	push	r21
     fa8:	6f 93       	push	r22
     faa:	7f 93       	push	r23
     fac:	8f 93       	push	r24
     fae:	9f 93       	push	r25
     fb0:	af 93       	push	r26
     fb2:	bf 93       	push	r27
     fb4:	ef 93       	push	r30
     fb6:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     fb8:	19 df       	rcall	.-462    	; 0xdec <asm_break>
}

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
	s_bad_interrupt();
}
     fba:	ff 91       	pop	r31
     fbc:	ef 91       	pop	r30
     fbe:	bf 91       	pop	r27
     fc0:	af 91       	pop	r26
     fc2:	9f 91       	pop	r25
     fc4:	8f 91       	pop	r24
     fc6:	7f 91       	pop	r23
     fc8:	6f 91       	pop	r22
     fca:	5f 91       	pop	r21
     fcc:	4f 91       	pop	r20
     fce:	3f 91       	pop	r19
     fd0:	2f 91       	pop	r18
     fd2:	0f 90       	pop	r0
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	0f 90       	pop	r0
     fd8:	1f 90       	pop	r1
     fda:	18 95       	reti

00000fdc <__vector_8>:

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
     fdc:	1f 92       	push	r1
     fde:	0f 92       	push	r0
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	0f 92       	push	r0
     fe4:	11 24       	eor	r1, r1
     fe6:	2f 93       	push	r18
     fe8:	3f 93       	push	r19
     fea:	4f 93       	push	r20
     fec:	5f 93       	push	r21
     fee:	6f 93       	push	r22
     ff0:	7f 93       	push	r23
     ff2:	8f 93       	push	r24
     ff4:	9f 93       	push	r25
     ff6:	af 93       	push	r26
     ff8:	bf 93       	push	r27
     ffa:	ef 93       	push	r30
     ffc:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     ffe:	f6 de       	rcall	.-532    	; 0xdec <asm_break>
}

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
	s_bad_interrupt();
}
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <__vector_9>:

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	2f 93       	push	r18
    102e:	3f 93       	push	r19
    1030:	8f 93       	push	r24
    1032:	9f 93       	push	r25
	if (g_status.isAnimationStopped) {
    1034:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <g_status>
    1038:	81 ff       	sbrs	r24, 1
    103a:	44 c0       	rjmp	.+136    	; 0x10c4 <__vector_9+0xa2>
		static uint8_t state_old = 0;
		static uint8_t state_ctr = 0;
		static uint8_t second_old = 0;
		uint8_t cur = PORTB & 0x3f;
    103c:	85 b1       	in	r24, 0x05	; 5
    103e:	8f 73       	andi	r24, 0x3F	; 63

		/* signaling the grade of deviation */
		g_audio_out_loudness = 0;
		if (g_showData.clkState_clk_state < 0xf) {
    1040:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <g_showData+0x16>
    1044:	9f 30       	cpi	r25, 0x0F	; 15
    1046:	60 f4       	brcc	.+24     	; 0x1060 <__vector_9+0x3e>
			cur |= _BV(PORTB6);  // LED = red
    1048:	80 64       	ori	r24, 0x40	; 64
			if (state_old != 0x02) {
    104a:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <state_old.2584>
    104e:	92 30       	cpi	r25, 0x02	; 2
    1050:	19 f0       	breq	.+6      	; 0x1058 <__vector_9+0x36>
				state_ctr = 122;  // 1 sec
    1052:	9a e7       	ldi	r25, 0x7A	; 122
    1054:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <state_ctr.2585>
			}
			state_old = 0x02;
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <state_old.2584>
    105e:	24 c0       	rjmp	.+72     	; 0x10a8 <__vector_9+0x86>

		} else if ((g_showData.clkState_clk_state == 0xf) && (-4 < g_showData.ppb_int) && (g_showData.ppb_int < 4)) {
    1060:	9f 30       	cpi	r25, 0x0F	; 15
    1062:	c1 f4       	brne	.+48     	; 0x1094 <__vector_9+0x72>
    1064:	20 91 34 04 	lds	r18, 0x0434	; 0x800434 <g_showData+0x8>
    1068:	30 91 35 04 	lds	r19, 0x0435	; 0x800435 <g_showData+0x9>
    106c:	2d 5f       	subi	r18, 0xFD	; 253
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
    1070:	27 30       	cpi	r18, 0x07	; 7
    1072:	31 05       	cpc	r19, r1
    1074:	78 f4       	brcc	.+30     	; 0x1094 <__vector_9+0x72>
			cur |= _BV(PORTB7);  // LED = green
    1076:	80 68       	ori	r24, 0x80	; 128
			state_old = 0x00;
    1078:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <state_old.2584>

			/* Acoustic phase tracker */
			if (g_showData.time_second != second_old) {
    107c:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <g_showData+0x1b>
    1080:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <__data_end>
    1084:	92 17       	cp	r25, r18
    1086:	81 f0       	breq	.+32     	; 0x10a8 <__vector_9+0x86>
				second_old = g_showData.time_second;
    1088:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <__data_end>
				state_ctr = 6;
    108c:	96 e0       	ldi	r25, 0x06	; 6
    108e:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <state_ctr.2585>
    1092:	0a c0       	rjmp	.+20     	; 0x10a8 <__vector_9+0x86>
			}

		} else {
			if (!state_old) {
    1094:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <state_old.2584>
    1098:	91 11       	cpse	r25, r1
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <__vector_9+0x80>
				state_ctr = 30;  // 1/4 sec
    109c:	9e e1       	ldi	r25, 0x1E	; 30
    109e:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <state_ctr.2585>
			}
			state_old = 0x01;
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <state_old.2584>
		}

		if (state_ctr) {
    10a8:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <state_ctr.2585>
    10ac:	99 23       	and	r25, r25
    10ae:	39 f0       	breq	.+14     	; 0x10be <__vector_9+0x9c>
			--state_ctr;
    10b0:	91 50       	subi	r25, 0x01	; 1
    10b2:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <state_ctr.2585>
			g_audio_out_loudness = 9;  // max 9
    10b6:	99 e0       	ldi	r25, 0x09	; 9
    10b8:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <g_audio_out_loudness>
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <__vector_9+0xa0>
		} else {
			g_audio_out_loudness = 0;
    10be:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <g_audio_out_loudness>
		}

		PORTB = cur;
    10c2:	85 b9       	out	0x05, r24	; 5
	}
}
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	0f 90       	pop	r0
    10d2:	1f 90       	pop	r1
    10d4:	18 95       	reti

000010d6 <__vector_10>:

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
    10d6:	1f 92       	push	r1
    10d8:	0f 92       	push	r0
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	0f 92       	push	r0
    10de:	11 24       	eor	r1, r1
    10e0:	2f 93       	push	r18
    10e2:	3f 93       	push	r19
    10e4:	4f 93       	push	r20
    10e6:	5f 93       	push	r21
    10e8:	6f 93       	push	r22
    10ea:	7f 93       	push	r23
    10ec:	8f 93       	push	r24
    10ee:	9f 93       	push	r25
    10f0:	af 93       	push	r26
    10f2:	bf 93       	push	r27
    10f4:	ef 93       	push	r30
    10f6:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    10f8:	79 de       	rcall	.-782    	; 0xdec <asm_break>
}

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
	s_bad_interrupt();
}
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	bf 91       	pop	r27
    1100:	af 91       	pop	r26
    1102:	9f 91       	pop	r25
    1104:	8f 91       	pop	r24
    1106:	7f 91       	pop	r23
    1108:	6f 91       	pop	r22
    110a:	5f 91       	pop	r21
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	1f 90       	pop	r1
    111a:	18 95       	reti

0000111c <__vector_11>:

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
    111c:	1f 92       	push	r1
    111e:	0f 92       	push	r0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	0f 92       	push	r0
    1124:	11 24       	eor	r1, r1
    1126:	2f 93       	push	r18
    1128:	3f 93       	push	r19
    112a:	4f 93       	push	r20
    112c:	5f 93       	push	r21
    112e:	6f 93       	push	r22
    1130:	7f 93       	push	r23
    1132:	8f 93       	push	r24
    1134:	9f 93       	push	r25
    1136:	af 93       	push	r26
    1138:	bf 93       	push	r27
    113a:	ef 93       	push	r30
    113c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    113e:	56 de       	rcall	.-852    	; 0xdec <asm_break>
}

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
	s_bad_interrupt();
}
    1140:	ff 91       	pop	r31
    1142:	ef 91       	pop	r30
    1144:	bf 91       	pop	r27
    1146:	af 91       	pop	r26
    1148:	9f 91       	pop	r25
    114a:	8f 91       	pop	r24
    114c:	7f 91       	pop	r23
    114e:	6f 91       	pop	r22
    1150:	5f 91       	pop	r21
    1152:	4f 91       	pop	r20
    1154:	3f 91       	pop	r19
    1156:	2f 91       	pop	r18
    1158:	0f 90       	pop	r0
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	0f 90       	pop	r0
    115e:	1f 90       	pop	r1
    1160:	18 95       	reti

00001162 <__vector_12>:

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	2f 93       	push	r18
    116e:	3f 93       	push	r19
    1170:	4f 93       	push	r20
    1172:	5f 93       	push	r21
    1174:	6f 93       	push	r22
    1176:	7f 93       	push	r23
    1178:	8f 93       	push	r24
    117a:	9f 93       	push	r25
    117c:	af 93       	push	r26
    117e:	bf 93       	push	r27
    1180:	ef 93       	push	r30
    1182:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1184:	33 de       	rcall	.-922    	; 0xdec <asm_break>
}

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
	s_bad_interrupt();
}
    1186:	ff 91       	pop	r31
    1188:	ef 91       	pop	r30
    118a:	bf 91       	pop	r27
    118c:	af 91       	pop	r26
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	7f 91       	pop	r23
    1194:	6f 91       	pop	r22
    1196:	5f 91       	pop	r21
    1198:	4f 91       	pop	r20
    119a:	3f 91       	pop	r19
    119c:	2f 91       	pop	r18
    119e:	0f 90       	pop	r0
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	0f 90       	pop	r0
    11a4:	1f 90       	pop	r1
    11a6:	18 95       	reti

000011a8 <__vector_13>:

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
    11a8:	1f 92       	push	r1
    11aa:	0f 92       	push	r0
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	0f 92       	push	r0
    11b0:	11 24       	eor	r1, r1
    11b2:	2f 93       	push	r18
    11b4:	3f 93       	push	r19
    11b6:	4f 93       	push	r20
    11b8:	5f 93       	push	r21
    11ba:	6f 93       	push	r22
    11bc:	7f 93       	push	r23
    11be:	8f 93       	push	r24
    11c0:	9f 93       	push	r25
    11c2:	af 93       	push	r26
    11c4:	bf 93       	push	r27
	++g_timer_abs_msb;
    11c6:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <g_timer_abs_msb>
    11ca:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <g_timer_abs_msb+0x1>
    11ce:	a0 91 6c 04 	lds	r26, 0x046C	; 0x80046c <g_timer_abs_msb+0x2>
    11d2:	b0 91 6d 04 	lds	r27, 0x046D	; 0x80046d <g_timer_abs_msb+0x3>
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	a1 1d       	adc	r26, r1
    11da:	b1 1d       	adc	r27, r1
    11dc:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <g_timer_abs_msb>
    11e0:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <g_timer_abs_msb+0x1>
    11e4:	a0 93 6c 04 	sts	0x046C, r26	; 0x80046c <g_timer_abs_msb+0x2>
    11e8:	b0 93 6d 04 	sts	0x046D, r27	; 0x80046d <g_timer_abs_msb+0x3>

	if (g_status.isAnimationStopped && g_audio_out_loudness) {
    11ec:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <g_status>
    11f0:	81 ff       	sbrs	r24, 1
    11f2:	59 c0       	rjmp	.+178    	; 0x12a6 <__vector_13+0xfe>
    11f4:	40 91 5b 04 	lds	r20, 0x045B	; 0x80045b <g_audio_out_loudness>
    11f8:	44 23       	and	r20, r20
    11fa:	09 f4       	brne	.+2      	; 0x11fe <__vector_13+0x56>
    11fc:	54 c0       	rjmp	.+168    	; 0x12a6 <__vector_13+0xfe>
		int16_t l_audio_pwm_inc = 3691 - (g_showData.clkState_phaseDeg100 >> 4);  // (880 Hz / 15625 Hz) * 16384 Steps * 2
    11fe:	20 91 30 04 	lds	r18, 0x0430	; 0x800430 <g_showData+0x4>
    1202:	30 91 31 04 	lds	r19, 0x0431	; 0x800431 <g_showData+0x5>
    1206:	84 e0       	ldi	r24, 0x04	; 4
    1208:	35 95       	asr	r19
    120a:	27 95       	ror	r18
    120c:	8a 95       	dec	r24
    120e:	e1 f7       	brne	.-8      	; 0x1208 <__vector_13+0x60>
    1210:	8b e6       	ldi	r24, 0x6B	; 107
    1212:	9e e0       	ldi	r25, 0x0E	; 14
    1214:	bc 01       	movw	r22, r24
    1216:	62 1b       	sub	r22, r18
    1218:	73 0b       	sbc	r23, r19

		/* Generate triangle signal */
		if (g_audio_pwm_ramp_dwn) {
    121a:	50 91 58 04 	lds	r21, 0x0458	; 0x800458 <g_audio_pwm_ramp_dwn>
    121e:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <g_audio_pwm_accu>
    1222:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <g_audio_pwm_accu+0x1>
    1226:	55 23       	and	r21, r21
    1228:	b1 f0       	breq	.+44     	; 0x1256 <__vector_13+0xae>
			g_audio_pwm_accu -= l_audio_pwm_inc;
    122a:	86 1b       	sub	r24, r22
    122c:	97 0b       	sbc	r25, r23
    122e:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <g_audio_pwm_accu+0x1>
    1232:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <g_audio_pwm_accu>
			if (g_audio_pwm_accu <= -16383) {
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	70 ec       	ldi	r23, 0xC0	; 192
    123a:	97 07       	cpc	r25, r23
    123c:	14 f5       	brge	.+68     	; 0x1282 <__vector_13+0xda>
				g_audio_pwm_ramp_dwn = false;
    123e:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <g_audio_pwm_ramp_dwn>
				int16_t residue = -g_audio_pwm_accu - 16383;
				g_audio_pwm_accu = -16383 + residue;
    1242:	22 e0       	ldi	r18, 0x02	; 2
    1244:	30 e8       	ldi	r19, 0x80	; 128
    1246:	b9 01       	movw	r22, r18
    1248:	68 1b       	sub	r22, r24
    124a:	79 0b       	sbc	r23, r25
    124c:	70 93 5a 04 	sts	0x045A, r23	; 0x80045a <g_audio_pwm_accu+0x1>
    1250:	60 93 59 04 	sts	0x0459, r22	; 0x800459 <g_audio_pwm_accu>
    1254:	16 c0       	rjmp	.+44     	; 0x1282 <__vector_13+0xda>
			}
		} else {
			g_audio_pwm_accu += l_audio_pwm_inc;
    1256:	86 0f       	add	r24, r22
    1258:	97 1f       	adc	r25, r23
    125a:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <g_audio_pwm_accu+0x1>
    125e:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <g_audio_pwm_accu>
			if (g_audio_pwm_accu >= +16383) {
    1262:	8f 3f       	cpi	r24, 0xFF	; 255
    1264:	7f e3       	ldi	r23, 0x3F	; 63
    1266:	97 07       	cpc	r25, r23
    1268:	64 f0       	brlt	.+24     	; 0x1282 <__vector_13+0xda>
				g_audio_pwm_ramp_dwn = true;
    126a:	21 e0       	ldi	r18, 0x01	; 1
    126c:	20 93 58 04 	sts	0x0458, r18	; 0x800458 <g_audio_pwm_ramp_dwn>
				int16_t residue = g_audio_pwm_accu - 16383;
				g_audio_pwm_accu = 16383 - residue;
    1270:	2e ef       	ldi	r18, 0xFE	; 254
    1272:	3f e7       	ldi	r19, 0x7F	; 127
    1274:	b9 01       	movw	r22, r18
    1276:	68 1b       	sub	r22, r24
    1278:	79 0b       	sbc	r23, r25
    127a:	70 93 5a 04 	sts	0x045A, r23	; 0x80045a <g_audio_pwm_accu+0x1>
    127e:	60 93 59 04 	sts	0x0459, r22	; 0x800459 <g_audio_pwm_accu>
			}
		}

		int16_t audio_out = 256 + (g_audio_pwm_accu >> (15 - g_audio_out_loudness));  // 6 + 9
    1282:	2f e0       	ldi	r18, 0x0F	; 15
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	24 1b       	sub	r18, r20
    1288:	31 09       	sbc	r19, r1
    128a:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <g_audio_pwm_accu>
    128e:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <g_audio_pwm_accu+0x1>
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <__vector_13+0xf0>
    1294:	95 95       	asr	r25
    1296:	87 95       	ror	r24
    1298:	2a 95       	dec	r18
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <__vector_13+0xec>
    129c:	93 95       	inc	r25
		OCR1AH = (uint8_t) (audio_out >> 8);					// 9 bit
    129e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL = (uint8_t) (audio_out & 0xff);
    12a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
}
    12a6:	bf 91       	pop	r27
    12a8:	af 91       	pop	r26
    12aa:	9f 91       	pop	r25
    12ac:	8f 91       	pop	r24
    12ae:	7f 91       	pop	r23
    12b0:	6f 91       	pop	r22
    12b2:	5f 91       	pop	r21
    12b4:	4f 91       	pop	r20
    12b6:	3f 91       	pop	r19
    12b8:	2f 91       	pop	r18
    12ba:	0f 90       	pop	r0
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	0f 90       	pop	r0
    12c0:	1f 90       	pop	r1
    12c2:	18 95       	reti

000012c4 <__vector_14>:

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
    12c4:	1f 92       	push	r1
    12c6:	0f 92       	push	r0
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	0f 92       	push	r0
    12cc:	11 24       	eor	r1, r1
    12ce:	2f 93       	push	r18
    12d0:	3f 93       	push	r19
    12d2:	4f 93       	push	r20
    12d4:	5f 93       	push	r21
    12d6:	6f 93       	push	r22
    12d8:	7f 93       	push	r23
    12da:	8f 93       	push	r24
    12dc:	9f 93       	push	r25
    12de:	af 93       	push	r26
    12e0:	bf 93       	push	r27
    12e2:	ef 93       	push	r30
    12e4:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    12e6:	82 dd       	rcall	.-1276   	; 0xdec <asm_break>
}

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
	s_bad_interrupt();
}
    12e8:	ff 91       	pop	r31
    12ea:	ef 91       	pop	r30
    12ec:	bf 91       	pop	r27
    12ee:	af 91       	pop	r26
    12f0:	9f 91       	pop	r25
    12f2:	8f 91       	pop	r24
    12f4:	7f 91       	pop	r23
    12f6:	6f 91       	pop	r22
    12f8:	5f 91       	pop	r21
    12fa:	4f 91       	pop	r20
    12fc:	3f 91       	pop	r19
    12fe:	2f 91       	pop	r18
    1300:	0f 90       	pop	r0
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	0f 90       	pop	r0
    1306:	1f 90       	pop	r1
    1308:	18 95       	reti

0000130a <__vector_15>:

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	2f 93       	push	r18
    1316:	3f 93       	push	r19
    1318:	4f 93       	push	r20
    131a:	5f 93       	push	r21
    131c:	6f 93       	push	r22
    131e:	7f 93       	push	r23
    1320:	8f 93       	push	r24
    1322:	9f 93       	push	r25
    1324:	af 93       	push	r26
    1326:	bf 93       	push	r27
    1328:	ef 93       	push	r30
    132a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    132c:	5f dd       	rcall	.-1346   	; 0xdec <asm_break>
}

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
	s_bad_interrupt();
}
    132e:	ff 91       	pop	r31
    1330:	ef 91       	pop	r30
    1332:	bf 91       	pop	r27
    1334:	af 91       	pop	r26
    1336:	9f 91       	pop	r25
    1338:	8f 91       	pop	r24
    133a:	7f 91       	pop	r23
    133c:	6f 91       	pop	r22
    133e:	5f 91       	pop	r21
    1340:	4f 91       	pop	r20
    1342:	3f 91       	pop	r19
    1344:	2f 91       	pop	r18
    1346:	0f 90       	pop	r0
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	0f 90       	pop	r0
    134c:	1f 90       	pop	r1
    134e:	18 95       	reti

00001350 <__vector_16>:

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
    1350:	1f 92       	push	r1
    1352:	0f 92       	push	r0
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	0f 92       	push	r0
    1358:	11 24       	eor	r1, r1
    135a:	2f 93       	push	r18
    135c:	3f 93       	push	r19
    135e:	4f 93       	push	r20
    1360:	5f 93       	push	r21
    1362:	6f 93       	push	r22
    1364:	7f 93       	push	r23
    1366:	8f 93       	push	r24
    1368:	9f 93       	push	r25
    136a:	af 93       	push	r26
    136c:	bf 93       	push	r27
    136e:	ef 93       	push	r30
    1370:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1372:	3c dd       	rcall	.-1416   	; 0xdec <asm_break>
}

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
	s_bad_interrupt();
}
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	7f 91       	pop	r23
    1382:	6f 91       	pop	r22
    1384:	5f 91       	pop	r21
    1386:	4f 91       	pop	r20
    1388:	3f 91       	pop	r19
    138a:	2f 91       	pop	r18
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	1f 90       	pop	r1
    1394:	18 95       	reti

00001396 <__vector_17>:

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	2f 93       	push	r18
    13a2:	3f 93       	push	r19
    13a4:	4f 93       	push	r20
    13a6:	5f 93       	push	r21
    13a8:	6f 93       	push	r22
    13aa:	7f 93       	push	r23
    13ac:	8f 93       	push	r24
    13ae:	9f 93       	push	r25
    13b0:	af 93       	push	r26
    13b2:	bf 93       	push	r27
    13b4:	ef 93       	push	r30
    13b6:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    13b8:	19 dd       	rcall	.-1486   	; 0xdec <asm_break>
}

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
	s_bad_interrupt();
}
    13ba:	ff 91       	pop	r31
    13bc:	ef 91       	pop	r30
    13be:	bf 91       	pop	r27
    13c0:	af 91       	pop	r26
    13c2:	9f 91       	pop	r25
    13c4:	8f 91       	pop	r24
    13c6:	7f 91       	pop	r23
    13c8:	6f 91       	pop	r22
    13ca:	5f 91       	pop	r21
    13cc:	4f 91       	pop	r20
    13ce:	3f 91       	pop	r19
    13d0:	2f 91       	pop	r18
    13d2:	0f 90       	pop	r0
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	0f 90       	pop	r0
    13d8:	1f 90       	pop	r1
    13da:	18 95       	reti

000013dc <__vector_18>:

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
    13dc:	1f 92       	push	r1
    13de:	0f 92       	push	r0
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	0f 92       	push	r0
    13e4:	11 24       	eor	r1, r1
    13e6:	2f 93       	push	r18
    13e8:	3f 93       	push	r19
    13ea:	4f 93       	push	r20
    13ec:	5f 93       	push	r21
    13ee:	6f 93       	push	r22
    13f0:	7f 93       	push	r23
    13f2:	8f 93       	push	r24
    13f4:	9f 93       	push	r25
    13f6:	af 93       	push	r26
    13f8:	bf 93       	push	r27
    13fa:	ef 93       	push	r30
    13fc:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    13fe:	f6 dc       	rcall	.-1556   	; 0xdec <asm_break>
}

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
	s_bad_interrupt();
}
    1400:	ff 91       	pop	r31
    1402:	ef 91       	pop	r30
    1404:	bf 91       	pop	r27
    1406:	af 91       	pop	r26
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	7f 91       	pop	r23
    140e:	6f 91       	pop	r22
    1410:	5f 91       	pop	r21
    1412:	4f 91       	pop	r20
    1414:	3f 91       	pop	r19
    1416:	2f 91       	pop	r18
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <__vector_19>:

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
    1422:	1f 92       	push	r1
    1424:	0f 92       	push	r0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	0f 92       	push	r0
    142a:	11 24       	eor	r1, r1
    142c:	2f 93       	push	r18
    142e:	3f 93       	push	r19
    1430:	4f 93       	push	r20
    1432:	5f 93       	push	r21
    1434:	6f 93       	push	r22
    1436:	7f 93       	push	r23
    1438:	8f 93       	push	r24
    143a:	9f 93       	push	r25
    143c:	af 93       	push	r26
    143e:	bf 93       	push	r27
    1440:	ef 93       	push	r30
    1442:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1444:	d3 dc       	rcall	.-1626   	; 0xdec <asm_break>
}

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
	s_bad_interrupt();
}
    1446:	ff 91       	pop	r31
    1448:	ef 91       	pop	r30
    144a:	bf 91       	pop	r27
    144c:	af 91       	pop	r26
    144e:	9f 91       	pop	r25
    1450:	8f 91       	pop	r24
    1452:	7f 91       	pop	r23
    1454:	6f 91       	pop	r22
    1456:	5f 91       	pop	r21
    1458:	4f 91       	pop	r20
    145a:	3f 91       	pop	r19
    145c:	2f 91       	pop	r18
    145e:	0f 90       	pop	r0
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	0f 90       	pop	r0
    1464:	1f 90       	pop	r1
    1466:	18 95       	reti

00001468 <__vector_20>:

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
    1468:	1f 92       	push	r1
    146a:	0f 92       	push	r0
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	0f 92       	push	r0
    1470:	11 24       	eor	r1, r1
    1472:	2f 93       	push	r18
    1474:	3f 93       	push	r19
    1476:	4f 93       	push	r20
    1478:	5f 93       	push	r21
    147a:	6f 93       	push	r22
    147c:	7f 93       	push	r23
    147e:	8f 93       	push	r24
    1480:	9f 93       	push	r25
    1482:	af 93       	push	r26
    1484:	bf 93       	push	r27
    1486:	ef 93       	push	r30
    1488:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    148a:	b0 dc       	rcall	.-1696   	; 0xdec <asm_break>
}

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
	s_bad_interrupt();
}
    148c:	ff 91       	pop	r31
    148e:	ef 91       	pop	r30
    1490:	bf 91       	pop	r27
    1492:	af 91       	pop	r26
    1494:	9f 91       	pop	r25
    1496:	8f 91       	pop	r24
    1498:	7f 91       	pop	r23
    149a:	6f 91       	pop	r22
    149c:	5f 91       	pop	r21
    149e:	4f 91       	pop	r20
    14a0:	3f 91       	pop	r19
    14a2:	2f 91       	pop	r18
    14a4:	0f 90       	pop	r0
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	0f 90       	pop	r0
    14aa:	1f 90       	pop	r1
    14ac:	18 95       	reti

000014ae <__vector_21__bottom>:
	__vector_21__bottom(reason, adc_val, adc_light_last, adc_temp_last);
}

/* do not static this function to avoid code inlining that would inherit many push operations in the critical section */
void __vector_21__bottom(uint8_t reason, uint16_t adc_val, uint16_t adc_light_last, uint16_t adc_temp_last)
{
    14ae:	8f 92       	push	r8
    14b0:	9f 92       	push	r9
    14b2:	af 92       	push	r10
    14b4:	bf 92       	push	r11
    14b6:	cf 92       	push	r12
    14b8:	df 92       	push	r13
    14ba:	ef 92       	push	r14
    14bc:	ff 92       	push	r15
    14be:	6b 01       	movw	r12, r22
	/* Low pass filtering and enhancing the data depth */
	if (reason == ADC_STATE_VLD_LDR) {
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	e1 f5       	brne	.+120    	; 0x153c <__vector_21__bottom+0x8e>
		float calc = g_adc_light ?  0.998f * g_adc_light + 0.002f * adc_val : adc_val;			// load with initial value if none is set before
    14c4:	80 90 65 04 	lds	r8, 0x0465	; 0x800465 <g_adc_light>
    14c8:	90 90 66 04 	lds	r9, 0x0466	; 0x800466 <g_adc_light+0x1>
    14cc:	a0 90 67 04 	lds	r10, 0x0467	; 0x800467 <g_adc_light+0x2>
    14d0:	b0 90 68 04 	lds	r11, 0x0468	; 0x800468 <g_adc_light+0x3>
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	a9 01       	movw	r20, r18
    14da:	c5 01       	movw	r24, r10
    14dc:	b4 01       	movw	r22, r8
    14de:	0e 94 4e 1b 	call	0x369c	; 0x369c <__cmpsf2>
    14e2:	e1 2c       	mov	r14, r1
    14e4:	f1 2c       	mov	r15, r1
    14e6:	88 23       	and	r24, r24
    14e8:	d9 f0       	breq	.+54     	; 0x1520 <__vector_21__bottom+0x72>
    14ea:	2e ee       	ldi	r18, 0xEE	; 238
    14ec:	3c e7       	ldi	r19, 0x7C	; 124
    14ee:	4f e7       	ldi	r20, 0x7F	; 127
    14f0:	5f e3       	ldi	r21, 0x3F	; 63
    14f2:	c5 01       	movw	r24, r10
    14f4:	b4 01       	movw	r22, r8
    14f6:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__mulsf3>
    14fa:	4b 01       	movw	r8, r22
    14fc:	5c 01       	movw	r10, r24
    14fe:	c7 01       	movw	r24, r14
    1500:	b6 01       	movw	r22, r12
    1502:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__floatunsisf>
    1506:	2f e6       	ldi	r18, 0x6F	; 111
    1508:	32 e1       	ldi	r19, 0x12	; 18
    150a:	43 e0       	ldi	r20, 0x03	; 3
    150c:	5b e3       	ldi	r21, 0x3B	; 59
    150e:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__mulsf3>
    1512:	9b 01       	movw	r18, r22
    1514:	ac 01       	movw	r20, r24
    1516:	c5 01       	movw	r24, r10
    1518:	b4 01       	movw	r22, r8
    151a:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <__addsf3>
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <__vector_21__bottom+0x7a>
    1520:	c7 01       	movw	r24, r14
    1522:	b6 01       	movw	r22, r12
    1524:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__floatunsisf>

		cpu_irq_disable();
    1528:	f8 94       	cli
		g_adc_light = calc;
    152a:	60 93 65 04 	sts	0x0465, r22	; 0x800465 <g_adc_light>
    152e:	70 93 66 04 	sts	0x0466, r23	; 0x800466 <g_adc_light+0x1>
    1532:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <g_adc_light+0x2>
    1536:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <g_adc_light+0x3>
    153a:	3d c0       	rjmp	.+122    	; 0x15b6 <__vector_21__bottom+0x108>

	} else if (reason == ADC_STATE_VLD_TEMP) {
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	d9 f5       	brne	.+118    	; 0x15b6 <__vector_21__bottom+0x108>
		float calc = g_adc_temp ?  0.9995f * g_adc_temp + 0.0005f * adc_val : adc_val;		// load with initial value if none is set before
    1540:	80 90 61 04 	lds	r8, 0x0461	; 0x800461 <g_adc_temp>
    1544:	90 90 62 04 	lds	r9, 0x0462	; 0x800462 <g_adc_temp+0x1>
    1548:	a0 90 63 04 	lds	r10, 0x0463	; 0x800463 <g_adc_temp+0x2>
    154c:	b0 90 64 04 	lds	r11, 0x0464	; 0x800464 <g_adc_temp+0x3>
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	a9 01       	movw	r20, r18
    1556:	c5 01       	movw	r24, r10
    1558:	b4 01       	movw	r22, r8
    155a:	0e 94 4e 1b 	call	0x369c	; 0x369c <__cmpsf2>
    155e:	e1 2c       	mov	r14, r1
    1560:	f1 2c       	mov	r15, r1
    1562:	88 23       	and	r24, r24
    1564:	d9 f0       	breq	.+54     	; 0x159c <__vector_21__bottom+0xee>
    1566:	2b e3       	ldi	r18, 0x3B	; 59
    1568:	3f ed       	ldi	r19, 0xDF	; 223
    156a:	4f e7       	ldi	r20, 0x7F	; 127
    156c:	5f e3       	ldi	r21, 0x3F	; 63
    156e:	c5 01       	movw	r24, r10
    1570:	b4 01       	movw	r22, r8
    1572:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__mulsf3>
    1576:	4b 01       	movw	r8, r22
    1578:	5c 01       	movw	r10, r24
    157a:	c7 01       	movw	r24, r14
    157c:	b6 01       	movw	r22, r12
    157e:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__floatunsisf>
    1582:	2f e6       	ldi	r18, 0x6F	; 111
    1584:	32 e1       	ldi	r19, 0x12	; 18
    1586:	43 e0       	ldi	r20, 0x03	; 3
    1588:	5a e3       	ldi	r21, 0x3A	; 58
    158a:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__mulsf3>
    158e:	9b 01       	movw	r18, r22
    1590:	ac 01       	movw	r20, r24
    1592:	c5 01       	movw	r24, r10
    1594:	b4 01       	movw	r22, r8
    1596:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <__addsf3>
    159a:	04 c0       	rjmp	.+8      	; 0x15a4 <__vector_21__bottom+0xf6>
    159c:	c7 01       	movw	r24, r14
    159e:	b6 01       	movw	r22, r12
    15a0:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__floatunsisf>

		cpu_irq_disable();
    15a4:	f8 94       	cli
		g_adc_temp = calc;
    15a6:	60 93 61 04 	sts	0x0461, r22	; 0x800461 <g_adc_temp>
    15aa:	70 93 62 04 	sts	0x0462, r23	; 0x800462 <g_adc_temp+0x1>
    15ae:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <g_adc_temp+0x2>
    15b2:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <g_adc_temp+0x3>
	}
}
    15b6:	ff 90       	pop	r15
    15b8:	ef 90       	pop	r14
    15ba:	df 90       	pop	r13
    15bc:	cf 90       	pop	r12
    15be:	bf 90       	pop	r11
    15c0:	af 90       	pop	r10
    15c2:	9f 90       	pop	r9
    15c4:	8f 90       	pop	r8
    15c6:	08 95       	ret

000015c8 <__vector_21>:
{	/* USART, TX - Complete */
	s_bad_interrupt();
}

ISR(__vector_21, ISR_BLOCK)
{	/* ADC */
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	cf 92       	push	r12
    15d4:	df 92       	push	r13
    15d6:	ef 92       	push	r14
    15d8:	ff 92       	push	r15
    15da:	1f 93       	push	r17
    15dc:	2f 93       	push	r18
    15de:	3f 93       	push	r19
    15e0:	4f 93       	push	r20
    15e2:	5f 93       	push	r21
    15e4:	6f 93       	push	r22
    15e6:	7f 93       	push	r23
    15e8:	8f 93       	push	r24
    15ea:	9f 93       	push	r25
    15ec:	af 93       	push	r26
    15ee:	bf 93       	push	r27
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
	uint16_t adc_val;
	uint8_t  reason = g_adc_state;
    15f8:	10 91 69 04 	lds	r17, 0x0469	; 0x800469 <g_adc_state>

	/* CLI part */
	adc_val  = ADCL;
    15fc:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	adc_val |= ADCH << 8;
    1600:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1604:	d0 e0       	ldi	r29, 0x00	; 0
    1606:	d8 2b       	or	r29, r24

	//TIFR1 |= _BV(TOV1);							// Reset Timer1 overflow status bit (no ISR for TOV1 activated!)

	switch (g_adc_state) {
    1608:	11 30       	cpi	r17, 0x01	; 1
    160a:	59 f0       	breq	.+22     	; 0x1622 <__vector_21+0x5a>
    160c:	30 f0       	brcs	.+12     	; 0x161a <__vector_21+0x52>
    160e:	12 30       	cpi	r17, 0x02	; 2
    1610:	79 f4       	brne	.+30     	; 0x1630 <__vector_21+0x68>
		g_adc_state = ADC_STATE_PRE_TEMP;
		break;

		case ADC_STATE_PRE_TEMP:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_TEMP;
    1612:	83 e0       	ldi	r24, 0x03	; 3
    1614:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <g_adc_state>
		break;
    1618:	10 c0       	rjmp	.+32     	; 0x163a <__vector_21+0x72>
	//TIFR1 |= _BV(TOV1);							// Reset Timer1 overflow status bit (no ISR for TOV1 activated!)

	switch (g_adc_state) {
		case ADC_STATE_PRE_LDR:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_LDR;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <g_adc_state>
		break;
    1620:	0c c0       	rjmp	.+24     	; 0x163a <__vector_21+0x72>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    1622:	88 ec       	ldi	r24, 0xC8	; 200
    1624:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		case ADC_STATE_VLD_LDR:
		adc_set_admux(ADC_MUX_TEMPSENSE | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_TEMP;
    1628:	82 e0       	ldi	r24, 0x02	; 2
    162a:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <g_adc_state>
		break;
    162e:	05 c0       	rjmp	.+10     	; 0x163a <__vector_21+0x72>
    1630:	80 ec       	ldi	r24, 0xC0	; 192
    1632:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		case ADC_STATE_VLD_TEMP:
		// fall-through

		default:
		adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_LDR;
    1636:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <g_adc_state>
	}

	uint16_t adc_light_last  = g_adc_light;
    163a:	60 91 65 04 	lds	r22, 0x0465	; 0x800465 <g_adc_light>
    163e:	70 91 66 04 	lds	r23, 0x0466	; 0x800466 <g_adc_light+0x1>
    1642:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <g_adc_light+0x2>
    1646:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <g_adc_light+0x3>
    164a:	0e 94 bf 1b 	call	0x377e	; 0x377e <__fixunssfsi>
    164e:	6b 01       	movw	r12, r22
    1650:	7c 01       	movw	r14, r24
	uint16_t adc_temp_last = g_adc_temp;
    1652:	60 91 61 04 	lds	r22, 0x0461	; 0x800461 <g_adc_temp>
    1656:	70 91 62 04 	lds	r23, 0x0462	; 0x800462 <g_adc_temp+0x1>
    165a:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <g_adc_temp+0x2>
    165e:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <g_adc_temp+0x3>
    1662:	0e 94 bf 1b 	call	0x377e	; 0x377e <__fixunssfsi>

	/* SEI part */
	cpu_irq_enable();
    1666:	78 94       	sei

	__vector_21__bottom(reason, adc_val, adc_light_last, adc_temp_last);
    1668:	9b 01       	movw	r18, r22
    166a:	a6 01       	movw	r20, r12
    166c:	be 01       	movw	r22, r28
    166e:	81 2f       	mov	r24, r17
    1670:	1e df       	rcall	.-452    	; 0x14ae <__vector_21__bottom>
}
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	bf 91       	pop	r27
    167c:	af 91       	pop	r26
    167e:	9f 91       	pop	r25
    1680:	8f 91       	pop	r24
    1682:	7f 91       	pop	r23
    1684:	6f 91       	pop	r22
    1686:	5f 91       	pop	r21
    1688:	4f 91       	pop	r20
    168a:	3f 91       	pop	r19
    168c:	2f 91       	pop	r18
    168e:	1f 91       	pop	r17
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	df 90       	pop	r13
    1696:	cf 90       	pop	r12
    1698:	0f 90       	pop	r0
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	0f 90       	pop	r0
    169e:	1f 90       	pop	r1
    16a0:	18 95       	reti

000016a2 <__vector_22>:
		g_adc_temp = calc;
	}
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
    16a2:	1f 92       	push	r1
    16a4:	0f 92       	push	r0
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	0f 92       	push	r0
    16aa:	11 24       	eor	r1, r1
    16ac:	2f 93       	push	r18
    16ae:	3f 93       	push	r19
    16b0:	4f 93       	push	r20
    16b2:	5f 93       	push	r21
    16b4:	6f 93       	push	r22
    16b6:	7f 93       	push	r23
    16b8:	8f 93       	push	r24
    16ba:	9f 93       	push	r25
    16bc:	af 93       	push	r26
    16be:	bf 93       	push	r27
    16c0:	ef 93       	push	r30
    16c2:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    16c4:	93 db       	rcall	.-2266   	; 0xdec <asm_break>
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
	s_bad_interrupt();
}
    16c6:	ff 91       	pop	r31
    16c8:	ef 91       	pop	r30
    16ca:	bf 91       	pop	r27
    16cc:	af 91       	pop	r26
    16ce:	9f 91       	pop	r25
    16d0:	8f 91       	pop	r24
    16d2:	7f 91       	pop	r23
    16d4:	6f 91       	pop	r22
    16d6:	5f 91       	pop	r21
    16d8:	4f 91       	pop	r20
    16da:	3f 91       	pop	r19
    16dc:	2f 91       	pop	r18
    16de:	0f 90       	pop	r0
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	0f 90       	pop	r0
    16e4:	1f 90       	pop	r1
    16e6:	18 95       	reti

000016e8 <__vector_23>:

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
    16e8:	1f 92       	push	r1
    16ea:	0f 92       	push	r0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	2f 93       	push	r18
    16f4:	3f 93       	push	r19
    16f6:	4f 93       	push	r20
    16f8:	5f 93       	push	r21
    16fa:	6f 93       	push	r22
    16fc:	7f 93       	push	r23
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	af 93       	push	r26
    1704:	bf 93       	push	r27
    1706:	ef 93       	push	r30
    1708:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    170a:	70 db       	rcall	.-2336   	; 0xdec <asm_break>
}

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
	s_bad_interrupt();
}
    170c:	ff 91       	pop	r31
    170e:	ef 91       	pop	r30
    1710:	bf 91       	pop	r27
    1712:	af 91       	pop	r26
    1714:	9f 91       	pop	r25
    1716:	8f 91       	pop	r24
    1718:	7f 91       	pop	r23
    171a:	6f 91       	pop	r22
    171c:	5f 91       	pop	r21
    171e:	4f 91       	pop	r20
    1720:	3f 91       	pop	r19
    1722:	2f 91       	pop	r18
    1724:	0f 90       	pop	r0
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	0f 90       	pop	r0
    172a:	1f 90       	pop	r1
    172c:	18 95       	reti

0000172e <__vector_24>:

ISR(__vector_24, ISR_BLOCK)
{	/* TWI */
    172e:	1f 92       	push	r1
    1730:	0f 92       	push	r0
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	0f 92       	push	r0
    1736:	11 24       	eor	r1, r1
    1738:	2f 93       	push	r18
    173a:	3f 93       	push	r19
    173c:	4f 93       	push	r20
    173e:	5f 93       	push	r21
    1740:	6f 93       	push	r22
    1742:	7f 93       	push	r23
    1744:	8f 93       	push	r24
    1746:	9f 93       	push	r25
    1748:	af 93       	push	r26
    174a:	bf 93       	push	r27
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ef 93       	push	r30
    1752:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b11111 << TWS3);
    1754:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	uint8_t twd = TWDR;
    1758:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	uint8_t twcr_cur = TWCR;
    175c:	cc eb       	ldi	r28, 0xBC	; 188
    175e:	d0 e0       	ldi	r29, 0x00	; 0
    1760:	48 81       	ld	r20, Y

	uint8_t twcr_new = __vector_24__bottom(tws, twd, twcr_cur);
    1762:	88 7f       	andi	r24, 0xF8	; 248
    1764:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <__vector_24__bottom>
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
    1768:	85 68       	ori	r24, 0x85	; 133
    176a:	88 83       	st	Y, r24
}
    176c:	ff 91       	pop	r31
    176e:	ef 91       	pop	r30
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	bf 91       	pop	r27
    1776:	af 91       	pop	r26
    1778:	9f 91       	pop	r25
    177a:	8f 91       	pop	r24
    177c:	7f 91       	pop	r23
    177e:	6f 91       	pop	r22
    1780:	5f 91       	pop	r21
    1782:	4f 91       	pop	r20
    1784:	3f 91       	pop	r19
    1786:	2f 91       	pop	r18
    1788:	0f 90       	pop	r0
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	0f 90       	pop	r0
    178e:	1f 90       	pop	r1
    1790:	18 95       	reti

00001792 <__vector_25>:

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
    1792:	1f 92       	push	r1
    1794:	0f 92       	push	r0
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	0f 92       	push	r0
    179a:	11 24       	eor	r1, r1
    179c:	2f 93       	push	r18
    179e:	3f 93       	push	r19
    17a0:	4f 93       	push	r20
    17a2:	5f 93       	push	r21
    17a4:	6f 93       	push	r22
    17a6:	7f 93       	push	r23
    17a8:	8f 93       	push	r24
    17aa:	9f 93       	push	r25
    17ac:	af 93       	push	r26
    17ae:	bf 93       	push	r27
    17b0:	ef 93       	push	r30
    17b2:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    17b4:	1b db       	rcall	.-2506   	; 0xdec <asm_break>
}

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
	s_bad_interrupt();
}
    17b6:	ff 91       	pop	r31
    17b8:	ef 91       	pop	r30
    17ba:	bf 91       	pop	r27
    17bc:	af 91       	pop	r26
    17be:	9f 91       	pop	r25
    17c0:	8f 91       	pop	r24
    17c2:	7f 91       	pop	r23
    17c4:	6f 91       	pop	r22
    17c6:	5f 91       	pop	r21
    17c8:	4f 91       	pop	r20
    17ca:	3f 91       	pop	r19
    17cc:	2f 91       	pop	r18
    17ce:	0f 90       	pop	r0
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	0f 90       	pop	r0
    17d4:	1f 90       	pop	r1
    17d6:	18 95       	reti

000017d8 <cpu_irq_save>:


void lcd_enable(uint8_t on)
{
	if (!on) {
		lcd_bus_write_cmd(0b10101110);									// Disable DC[2] (Display)
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	1f 92       	push	r1
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	8f b7       	in	r24, 0x3f	; 63
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	f8 94       	cli
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	0f 90       	pop	r0
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	08 95       	ret

000017f2 <__portable_avr_delay_cycles>:
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <__portable_avr_delay_cycles+0xa>
    17f4:	61 50       	subi	r22, 0x01	; 1
    17f6:	71 09       	sbc	r23, r1
    17f8:	81 09       	sbc	r24, r1
    17fa:	91 09       	sbc	r25, r1
    17fc:	61 15       	cp	r22, r1
    17fe:	71 05       	cpc	r23, r1
    1800:	81 05       	cpc	r24, r1
    1802:	91 05       	cpc	r25, r1
    1804:	b9 f7       	brne	.-18     	; 0x17f4 <__portable_avr_delay_cycles+0x2>
    1806:	08 95       	ret

00001808 <lcd_bus_read_status>:
    1808:	e7 df       	rcall	.-50     	; 0x17d8 <cpu_irq_save>
    180a:	98 2f       	mov	r25, r24
    180c:	8f ef       	ldi	r24, 0xFF	; 255
    180e:	8b b9       	out	0x0b, r24	; 11
    1810:	1a b8       	out	0x0a, r1	; 10
    1812:	28 98       	cbi	0x05, 0	; 5
    1814:	2c 9a       	sbi	0x05, 4	; 5
    1816:	2d 9a       	sbi	0x05, 5	; 5
    1818:	2d 98       	cbi	0x05, 5	; 5
    181a:	89 b1       	in	r24, 0x09	; 9
    181c:	9f bf       	out	0x3f, r25	; 63
    181e:	08 95       	ret

00001820 <lcd_bus_write_cmd>:
    1820:	cf 93       	push	r28
    1822:	c8 2f       	mov	r28, r24
    1824:	d9 df       	rcall	.-78     	; 0x17d8 <cpu_irq_save>
    1826:	cb b9       	out	0x0b, r28	; 11
    1828:	9f ef       	ldi	r25, 0xFF	; 255
    182a:	9a b9       	out	0x0a, r25	; 10
    182c:	28 98       	cbi	0x05, 0	; 5
    182e:	2c 98       	cbi	0x05, 4	; 5
    1830:	2d 9a       	sbi	0x05, 5	; 5
    1832:	2d 98       	cbi	0x05, 5	; 5
    1834:	8f bf       	out	0x3f, r24	; 63
    1836:	cf 91       	pop	r28
    1838:	08 95       	ret

0000183a <lcd_enable.part.0>:
    183a:	8d e2       	ldi	r24, 0x2D	; 45
    183c:	f1 df       	rcall	.-30     	; 0x1820 <lcd_bus_write_cmd>
    183e:	84 e2       	ldi	r24, 0x24	; 36
    1840:	ef df       	rcall	.-34     	; 0x1820 <lcd_bus_write_cmd>
    1842:	8a ee       	ldi	r24, 0xEA	; 234
    1844:	ed df       	rcall	.-38     	; 0x1820 <lcd_bus_write_cmd>
    1846:	81 e8       	ldi	r24, 0x81	; 129
    1848:	eb df       	rcall	.-42     	; 0x1820 <lcd_bus_write_cmd>
    184a:	8c e9       	ldi	r24, 0x9C	; 156
    184c:	e9 df       	rcall	.-46     	; 0x1820 <lcd_bus_write_cmd>
    184e:	88 ec       	ldi	r24, 0xC8	; 200
    1850:	e7 df       	rcall	.-50     	; 0x1820 <lcd_bus_write_cmd>
    1852:	88 e8       	ldi	r24, 0x88	; 136
    1854:	e5 df       	rcall	.-54     	; 0x1820 <lcd_bus_write_cmd>
    1856:	80 e4       	ldi	r24, 0x40	; 64
    1858:	e3 df       	rcall	.-58     	; 0x1820 <lcd_bus_write_cmd>
    185a:	80 e9       	ldi	r24, 0x90	; 144
    185c:	e1 df       	rcall	.-62     	; 0x1820 <lcd_bus_write_cmd>
    185e:	80 eb       	ldi	r24, 0xB0	; 176
    1860:	df df       	rcall	.-66     	; 0x1820 <lcd_bus_write_cmd>
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	dd df       	rcall	.-70     	; 0x1820 <lcd_bus_write_cmd>
    1866:	80 e1       	ldi	r24, 0x10	; 16
    1868:	db df       	rcall	.-74     	; 0x1820 <lcd_bus_write_cmd>
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <s_lcd_ram_read_nonvalid>
    1870:	8f ee       	ldi	r24, 0xEF	; 239
    1872:	d6 df       	rcall	.-84     	; 0x1820 <lcd_bus_write_cmd>
    1874:	8e ee       	ldi	r24, 0xEE	; 238
    1876:	d4 df       	rcall	.-88     	; 0x1820 <lcd_bus_write_cmd>
    1878:	84 ea       	ldi	r24, 0xA4	; 164
    187a:	d2 df       	rcall	.-92     	; 0x1820 <lcd_bus_write_cmd>
    187c:	86 ea       	ldi	r24, 0xA6	; 166
    187e:	d0 df       	rcall	.-96     	; 0x1820 <lcd_bus_write_cmd>
    1880:	8f ea       	ldi	r24, 0xAF	; 175
    1882:	ce cf       	rjmp	.-100    	; 0x1820 <lcd_bus_write_cmd>

00001884 <lcd_bus_write_ram>:
    1884:	cf 93       	push	r28
    1886:	c8 2f       	mov	r28, r24
    1888:	a7 df       	rcall	.-178    	; 0x17d8 <cpu_irq_save>
    188a:	cb b9       	out	0x0b, r28	; 11
    188c:	9f ef       	ldi	r25, 0xFF	; 255
    188e:	9a b9       	out	0x0a, r25	; 10
    1890:	28 9a       	sbi	0x05, 0	; 5
    1892:	2c 98       	cbi	0x05, 4	; 5
    1894:	2d 9a       	sbi	0x05, 5	; 5
    1896:	2d 98       	cbi	0x05, 5	; 5
    1898:	8f bf       	out	0x3f, r24	; 63
    189a:	cf 91       	pop	r28
    189c:	08 95       	ret

0000189e <lcd_bus_read_ram>:
    189e:	9c df       	rcall	.-200    	; 0x17d8 <cpu_irq_save>
    18a0:	98 2f       	mov	r25, r24
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	8b b9       	out	0x0b, r24	; 11
    18a6:	1a b8       	out	0x0a, r1	; 10
    18a8:	28 9a       	sbi	0x05, 0	; 5
    18aa:	2c 9a       	sbi	0x05, 4	; 5
    18ac:	2d 9a       	sbi	0x05, 5	; 5
    18ae:	2d 98       	cbi	0x05, 5	; 5
    18b0:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <s_lcd_ram_read_nonvalid>
    18b4:	88 23       	and	r24, r24
    18b6:	19 f0       	breq	.+6      	; 0x18be <lcd_bus_read_ram+0x20>
    18b8:	89 b1       	in	r24, 0x09	; 9
    18ba:	2d 9a       	sbi	0x05, 5	; 5
    18bc:	2d 98       	cbi	0x05, 5	; 5
    18be:	89 b1       	in	r24, 0x09	; 9
    18c0:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <s_lcd_ram_read_nonvalid>
    18c4:	9f bf       	out	0x3f, r25	; 63
    18c6:	08 95       	ret

000018c8 <lcd_page_set>:
}

void lcd_page_set(uint8_t page)
{
	if ((0 <= page && page) < (GFX_MONO_LCD_PAGES)) {
		lcd_bus_write_cmd(0b10110000 | page);					// Set Page Address
    18c8:	80 6b       	ori	r24, 0xB0	; 176
    18ca:	aa df       	rcall	.-172    	; 0x1820 <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <s_lcd_ram_read_nonvalid>
    18d2:	08 95       	ret

000018d4 <lcd_col_set>:
	}
}

void lcd_col_set(uint8_t col)
{
    18d4:	cf 93       	push	r28
	if ((0 <= col) && (col < GFX_MONO_LCD_WIDTH)) {
    18d6:	80 3f       	cpi	r24, 0xF0	; 240
    18d8:	58 f4       	brcc	.+22     	; 0x18f0 <lcd_col_set+0x1c>
    18da:	c8 2f       	mov	r28, r24
		lcd_bus_write_cmd(0b00000000 | ( col       & 0x0f));	// Set Column Address LSB
    18dc:	8f 70       	andi	r24, 0x0F	; 15
    18de:	a0 df       	rcall	.-192    	; 0x1820 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000 | ((col >> 4) & 0x0f));	// Set Column Address MSB
    18e0:	8c 2f       	mov	r24, r28
    18e2:	82 95       	swap	r24
    18e4:	8f 70       	andi	r24, 0x0F	; 15
    18e6:	80 61       	ori	r24, 0x10	; 16
    18e8:	9b df       	rcall	.-202    	; 0x1820 <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <s_lcd_ram_read_nonvalid>
	}
}
    18f0:	cf 91       	pop	r28
    18f2:	08 95       	ret

000018f4 <lcd_cr>:

void lcd_cr(void)
{
	lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	94 df       	rcall	.-216    	; 0x1820 <lcd_bus_write_cmd>
	lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    18f8:	80 e1       	ldi	r24, 0x10	; 16
    18fa:	92 df       	rcall	.-220    	; 0x1820 <lcd_bus_write_cmd>

	s_lcd_ram_read_nonvalid = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <s_lcd_ram_read_nonvalid>
    1902:	08 95       	ret

00001904 <lcd_home>:
}

void lcd_home(void)
{
	lcd_bus_write_cmd(0b10110000);								// Set Page Address (0)
    1904:	80 eb       	ldi	r24, 0xB0	; 176
    1906:	8c df       	rcall	.-232    	; 0x1820 <lcd_bus_write_cmd>
	lcd_cr();
    1908:	f5 cf       	rjmp	.-22     	; 0x18f4 <lcd_cr>

0000190a <lcd_cls>:
}

void lcd_cls(void)
{
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    190e:	c0 e0       	ldi	r28, 0x00	; 0
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
    1910:	8c 2f       	mov	r24, r28
    1912:	80 6b       	ori	r24, 0xB0	; 176
    1914:	85 df       	rcall	.-246    	; 0x1820 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	83 df       	rcall	.-250    	; 0x1820 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    191a:	80 e1       	ldi	r24, 0x10	; 16
    191c:	81 df       	rcall	.-254    	; 0x1820 <lcd_bus_write_cmd>
    191e:	d0 ef       	ldi	r29, 0xF0	; 240

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
			lcd_bus_write_ram(0);
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	b0 df       	rcall	.-160    	; 0x1884 <lcd_bus_write_ram>
    1924:	d1 50       	subi	r29, 0x01	; 1
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
    1926:	e1 f7       	brne	.-8      	; 0x1920 <lcd_cls+0x16>
}

void lcd_cls(void)
{
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    1928:	cf 5f       	subi	r28, 0xFF	; 255
    192a:	c0 31       	cpi	r28, 0x10	; 16
    192c:	89 f7       	brne	.-30     	; 0x1910 <lcd_cls+0x6>
		}
	}	

	/* Set cursor to home position */
	lcd_home();
}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
			lcd_bus_write_ram(0);
		}
	}	

	/* Set cursor to home position */
	lcd_home();
    1932:	e8 cf       	rjmp	.-48     	; 0x1904 <lcd_home>

00001934 <lcd_show_template>:
}


void lcd_show_template(void)
{
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "ClkState: 0x");
    193e:	6a e0       	ldi	r22, 0x0A	; 10
    1940:	71 e0       	ldi	r23, 0x01	; 1
    1942:	8d ed       	ldi	r24, 0xDD	; 221
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <strcpy>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  0 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    194a:	23 e0       	ldi	r18, 0x03	; 3
    194c:	31 e0       	ldi	r19, 0x01	; 1
    194e:	4b e0       	ldi	r20, 0x0B	; 11
    1950:	63 e0       	ldi	r22, 0x03	; 3
    1952:	8d ed       	ldi	r24, 0xDD	; 221
    1954:	93 e0       	ldi	r25, 0x03	; 3
    1956:	1e da       	rcall	.-3012   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Date    :");
    1958:	67 e1       	ldi	r22, 0x17	; 23
    195a:	71 e0       	ldi	r23, 0x01	; 1
    195c:	8d ed       	ldi	r24, 0xDD	; 221
    195e:	93 e0       	ldi	r25, 0x03	; 3
    1960:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <strcpy>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  1 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1964:	23 e0       	ldi	r18, 0x03	; 3
    1966:	31 e0       	ldi	r19, 0x01	; 1
    1968:	44 e1       	ldi	r20, 0x14	; 20
    196a:	63 e0       	ldi	r22, 0x03	; 3
    196c:	8d ed       	ldi	r24, 0xDD	; 221
    196e:	93 e0       	ldi	r25, 0x03	; 3
    1970:	11 da       	rcall	.-3038   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Time    : 00:00.00 UTC");
    1972:	61 e2       	ldi	r22, 0x21	; 33
    1974:	71 e0       	ldi	r23, 0x01	; 1
    1976:	8d ed       	ldi	r24, 0xDD	; 221
    1978:	93 e0       	ldi	r25, 0x03	; 3
    197a:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <strcpy>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  2 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    197e:	23 e0       	ldi	r18, 0x03	; 3
    1980:	31 e0       	ldi	r19, 0x01	; 1
    1982:	4d e1       	ldi	r20, 0x1D	; 29
    1984:	63 e0       	ldi	r22, 0x03	; 3
    1986:	8d ed       	ldi	r24, 0xDD	; 221
    1988:	93 e0       	ldi	r25, 0x03	; 3
    198a:	04 da       	rcall	.-3064   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Deviat'n: %04d.%03d ppb", 0, 0);
    198c:	1f 92       	push	r1
    198e:	1f 92       	push	r1
    1990:	1f 92       	push	r1
    1992:	1f 92       	push	r1
    1994:	88 e3       	ldi	r24, 0x38	; 56
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	9f 93       	push	r25
    199a:	8f 93       	push	r24
    199c:	1f 92       	push	r1
    199e:	10 e3       	ldi	r17, 0x30	; 48
    19a0:	1f 93       	push	r17
    19a2:	cd ed       	ldi	r28, 0xDD	; 221
    19a4:	d3 e0       	ldi	r29, 0x03	; 3
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  3 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    19ae:	23 e0       	ldi	r18, 0x03	; 3
    19b0:	31 e0       	ldi	r19, 0x01	; 1
    19b2:	46 e2       	ldi	r20, 0x26	; 38
    19b4:	63 e0       	ldi	r22, 0x03	; 3
    19b6:	ce 01       	movw	r24, r28
    19b8:	ed d9       	rcall	.-3110   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "PWM     : %3d.%03d/256 = %3d.%03d%%", 0, 0, 0, 0);
    19ba:	1f 92       	push	r1
    19bc:	1f 92       	push	r1
    19be:	1f 92       	push	r1
    19c0:	1f 92       	push	r1
    19c2:	1f 92       	push	r1
    19c4:	1f 92       	push	r1
    19c6:	1f 92       	push	r1
    19c8:	1f 92       	push	r1
    19ca:	80 e5       	ldi	r24, 0x50	; 80
    19cc:	91 e0       	ldi	r25, 0x01	; 1
    19ce:	9f 93       	push	r25
    19d0:	8f 93       	push	r24
    19d2:	1f 92       	push	r1
    19d4:	1f 93       	push	r17
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  4 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    19de:	23 e0       	ldi	r18, 0x03	; 3
    19e0:	31 e0       	ldi	r19, 0x01	; 1
    19e2:	4f e2       	ldi	r20, 0x2F	; 47
    19e4:	63 e0       	ldi	r22, 0x03	; 3
    19e6:	ce 01       	movw	r24, r28
    19e8:	d5 d9       	rcall	.-3158   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "PullVolt: %1d.%03d V", 0, 0);
    19ea:	1f 92       	push	r1
    19ec:	1f 92       	push	r1
    19ee:	1f 92       	push	r1
    19f0:	1f 92       	push	r1
    19f2:	84 e7       	ldi	r24, 0x74	; 116
    19f4:	91 e0       	ldi	r25, 0x01	; 1
    19f6:	9f 93       	push	r25
    19f8:	8f 93       	push	r24
    19fa:	1f 92       	push	r1
    19fc:	1f 93       	push	r17
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  5 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1a06:	8d b7       	in	r24, 0x3d	; 61
    1a08:	9e b7       	in	r25, 0x3e	; 62
    1a0a:	82 96       	adiw	r24, 0x22	; 34
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	9e bf       	out	0x3e, r25	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	8d bf       	out	0x3d, r24	; 61
    1a16:	23 e0       	ldi	r18, 0x03	; 3
    1a18:	31 e0       	ldi	r19, 0x01	; 1
    1a1a:	48 e3       	ldi	r20, 0x38	; 56
    1a1c:	63 e0       	ldi	r22, 0x03	; 3
    1a1e:	ce 01       	movw	r24, r28
    1a20:	b9 d9       	rcall	.-3214   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "PhaseVolt: %1d.%03d V", 0, 0);
    1a22:	1f 92       	push	r1
    1a24:	1f 92       	push	r1
    1a26:	1f 92       	push	r1
    1a28:	1f 92       	push	r1
    1a2a:	89 e8       	ldi	r24, 0x89	; 137
    1a2c:	91 e0       	ldi	r25, 0x01	; 1
    1a2e:	9f 93       	push	r25
    1a30:	8f 93       	push	r24
    1a32:	1f 92       	push	r1
    1a34:	1f 93       	push	r17
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 20 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  5 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1a3e:	23 e0       	ldi	r18, 0x03	; 3
    1a40:	31 e0       	ldi	r19, 0x01	; 1
    1a42:	48 e3       	ldi	r20, 0x38	; 56
    1a44:	6b e7       	ldi	r22, 0x7B	; 123
    1a46:	ce 01       	movw	r24, r28
    1a48:	a5 d9       	rcall	.-3254   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "SatUse  : West=%02d East=%02d Used=%02d sats", 0, 0, 0);
    1a4a:	1f 92       	push	r1
    1a4c:	1f 92       	push	r1
    1a4e:	1f 92       	push	r1
    1a50:	1f 92       	push	r1
    1a52:	1f 92       	push	r1
    1a54:	1f 92       	push	r1
    1a56:	8f e9       	ldi	r24, 0x9F	; 159
    1a58:	91 e0       	ldi	r25, 0x01	; 1
    1a5a:	9f 93       	push	r25
    1a5c:	8f 93       	push	r24
    1a5e:	1f 92       	push	r1
    1a60:	1f 93       	push	r17
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  6 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1a6a:	23 e0       	ldi	r18, 0x03	; 3
    1a6c:	31 e0       	ldi	r19, 0x01	; 1
    1a6e:	41 e4       	ldi	r20, 0x41	; 65
    1a70:	63 e0       	ldi	r22, 0x03	; 3
    1a72:	ce 01       	movw	r24, r28
    1a74:	8f d9       	rcall	.-3298   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat DOP : %03d.%02d", 0, 0);
    1a76:	1f 92       	push	r1
    1a78:	1f 92       	push	r1
    1a7a:	1f 92       	push	r1
    1a7c:	1f 92       	push	r1
    1a7e:	8c ec       	ldi	r24, 0xCC	; 204
    1a80:	91 e0       	ldi	r25, 0x01	; 1
    1a82:	9f 93       	push	r25
    1a84:	8f 93       	push	r24
    1a86:	1f 92       	push	r1
    1a88:	1f 93       	push	r17
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  7 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1a92:	8d b7       	in	r24, 0x3d	; 61
    1a94:	9e b7       	in	r25, 0x3e	; 62
    1a96:	80 96       	adiw	r24, 0x20	; 32
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	9e bf       	out	0x3e, r25	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	8d bf       	out	0x3d, r24	; 61
    1aa2:	23 e0       	ldi	r18, 0x03	; 3
    1aa4:	31 e0       	ldi	r19, 0x01	; 1
    1aa6:	4a e4       	ldi	r20, 0x4A	; 74
    1aa8:	63 e0       	ldi	r22, 0x03	; 3
    1aaa:	ce 01       	movw	r24, r28
    1aac:	73 d9       	rcall	.-3354   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "SatState: FI=%1d M2=%1d", 0, 0);
    1aae:	1f 92       	push	r1
    1ab0:	1f 92       	push	r1
    1ab2:	1f 92       	push	r1
    1ab4:	1f 92       	push	r1
    1ab6:	80 ee       	ldi	r24, 0xE0	; 224
    1ab8:	91 e0       	ldi	r25, 0x01	; 1
    1aba:	9f 93       	push	r25
    1abc:	8f 93       	push	r24
    1abe:	1f 92       	push	r1
    1ac0:	1f 93       	push	r17
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  8 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1aca:	23 e0       	ldi	r18, 0x03	; 3
    1acc:	31 e0       	ldi	r19, 0x01	; 1
    1ace:	43 e5       	ldi	r20, 0x53	; 83
    1ad0:	63 e0       	ldi	r22, 0x03	; 3
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	5f d9       	rcall	.-3394   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat Lat : %c  %02d%c%02d.%04d'", ' ', 0, 0x7e, 0, 0);
    1ad6:	1f 92       	push	r1
    1ad8:	1f 92       	push	r1
    1ada:	1f 92       	push	r1
    1adc:	1f 92       	push	r1
    1ade:	1f 92       	push	r1
    1ae0:	0e e7       	ldi	r16, 0x7E	; 126
    1ae2:	0f 93       	push	r16
    1ae4:	1f 92       	push	r1
    1ae6:	1f 92       	push	r1
    1ae8:	1f 92       	push	r1
    1aea:	80 e2       	ldi	r24, 0x20	; 32
    1aec:	f8 2e       	mov	r15, r24
    1aee:	ff 92       	push	r15
    1af0:	88 ef       	ldi	r24, 0xF8	; 248
    1af2:	91 e0       	ldi	r25, 0x01	; 1
    1af4:	9f 93       	push	r25
    1af6:	8f 93       	push	r24
    1af8:	1f 92       	push	r1
    1afa:	1f 93       	push	r17
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  9 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1b04:	23 e0       	ldi	r18, 0x03	; 3
    1b06:	31 e0       	ldi	r19, 0x01	; 1
    1b08:	4c e5       	ldi	r20, 0x5C	; 92
    1b0a:	63 e0       	ldi	r22, 0x03	; 3
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	42 d9       	rcall	.-3452   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat Lon : %c %03d%c%02d.%04d'", ' ', 0, 0x7e, 0, 0);
    1b10:	1f 92       	push	r1
    1b12:	1f 92       	push	r1
    1b14:	1f 92       	push	r1
    1b16:	1f 92       	push	r1
    1b18:	1f 92       	push	r1
    1b1a:	0f 93       	push	r16
    1b1c:	1f 92       	push	r1
    1b1e:	1f 92       	push	r1
    1b20:	1f 92       	push	r1
    1b22:	ff 92       	push	r15
    1b24:	87 e1       	ldi	r24, 0x17	; 23
    1b26:	92 e0       	ldi	r25, 0x02	; 2
    1b28:	9f 93       	push	r25
    1b2a:	8f 93       	push	r24
    1b2c:	1f 92       	push	r1
    1b2e:	1f 93       	push	r17
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP + 10 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1b38:	8d b7       	in	r24, 0x3d	; 61
    1b3a:	9e b7       	in	r25, 0x3e	; 62
    1b3c:	8a 96       	adiw	r24, 0x2a	; 42
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	9e bf       	out	0x3e, r25	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	8d bf       	out	0x3d, r24	; 61
    1b48:	23 e0       	ldi	r18, 0x03	; 3
    1b4a:	31 e0       	ldi	r19, 0x01	; 1
    1b4c:	45 e6       	ldi	r20, 0x65	; 101
    1b4e:	63 e0       	ldi	r22, 0x03	; 3
    1b50:	ce 01       	movw	r24, r28
    1b52:	20 d9       	rcall	.-3520   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat Hgt : %04d.%01d m", 0, 0);
    1b54:	1f 92       	push	r1
    1b56:	1f 92       	push	r1
    1b58:	1f 92       	push	r1
    1b5a:	1f 92       	push	r1
    1b5c:	85 e3       	ldi	r24, 0x35	; 53
    1b5e:	92 e0       	ldi	r25, 0x02	; 2
    1b60:	9f 93       	push	r25
    1b62:	8f 93       	push	r24
    1b64:	1f 92       	push	r1
    1b66:	1f 93       	push	r17
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP + 11 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1b70:	23 e0       	ldi	r18, 0x03	; 3
    1b72:	31 e0       	ldi	r19, 0x01	; 1
    1b74:	4e e6       	ldi	r20, 0x6E	; 110
    1b76:	63 e0       	ldi	r22, 0x03	; 3
    1b78:	ce 01       	movw	r24, r28
    1b7a:	0c d9       	rcall	.-3560   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Phase: %+04d%c", 0, 0x7e);
    1b7c:	1f 92       	push	r1
    1b7e:	0f 93       	push	r16
    1b80:	1f 92       	push	r1
    1b82:	1f 92       	push	r1
    1b84:	8b e4       	ldi	r24, 0x4B	; 75
    1b86:	92 e0       	ldi	r25, 0x02	; 2
    1b88:	9f 93       	push	r25
    1b8a:	8f 93       	push	r24
    1b8c:	1f 92       	push	r1
    1b8e:	1f 93       	push	r17
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 26 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  11 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1b98:	23 e0       	ldi	r18, 0x03	; 3
    1b9a:	31 e0       	ldi	r19, 0x01	; 1
    1b9c:	4e e6       	ldi	r20, 0x6E	; 110
    1b9e:	6f e9       	ldi	r22, 0x9F	; 159
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	f8 d8       	rcall	.-3600   	; 0xd94 <gfx_mono_draw_string>

	gfx_mono_draw_string("PhaseOfs:", LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1ba4:	8d b7       	in	r24, 0x3d	; 61
    1ba6:	9e b7       	in	r25, 0x3e	; 62
    1ba8:	44 96       	adiw	r24, 0x14	; 20
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	9e bf       	out	0x3e, r25	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	8d bf       	out	0x3d, r24	; 61
    1bb4:	23 e0       	ldi	r18, 0x03	; 3
    1bb6:	31 e0       	ldi	r19, 0x01	; 1
    1bb8:	47 e7       	ldi	r20, 0x77	; 119
    1bba:	63 e0       	ldi	r22, 0x03	; 3
    1bbc:	8a e5       	ldi	r24, 0x5A	; 90
    1bbe:	92 e0       	ldi	r25, 0x02	; 2
}
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	ff 90       	pop	r15
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP + 11 * LCD_SHOW_LINE_HEIGHT, &sysfont);

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Phase: %+04d%c", 0, 0x7e);
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 26 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  11 * LCD_SHOW_LINE_HEIGHT, &sysfont);

	gfx_mono_draw_string("PhaseOfs:", LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1bca:	e4 c8       	rjmp	.-3640   	; 0xd94 <gfx_mono_draw_string>

00001bcc <lcd_show_new_data>:

	clk_state_old = clk_state;
}

uint8_t lcd_show_new_data(void)
{
    1bcc:	3f 92       	push	r3
    1bce:	4f 92       	push	r4
    1bd0:	5f 92       	push	r5
    1bd2:	6f 92       	push	r6
    1bd4:	7f 92       	push	r7
    1bd6:	8f 92       	push	r8
    1bd8:	9f 92       	push	r9
    1bda:	af 92       	push	r10
    1bdc:	bf 92       	push	r11
    1bde:	cf 92       	push	r12
    1be0:	df 92       	push	r13
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
	static uint8_t idx = 1;

	/* First entries are showed first, when modified */

	irqflags_t flags = cpu_irq_save();
    1bee:	f4 dd       	rcall	.-1048   	; 0x17d8 <cpu_irq_save>
    1bf0:	c8 2f       	mov	r28, r24
	cpu_irq_disable();
    1bf2:	f8 94       	cli

	/* Always */
	if (g_showData.newTime) {
    1bf4:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <g_showData>
    1bf8:	92 ff       	sbrs	r25, 2
    1bfa:	2e c0       	rjmp	.+92     	; 0x1c58 <lcd_show_new_data+0x8c>
		g_showData.newTime = false;
    1bfc:	9b 7f       	andi	r25, 0xFB	; 251
    1bfe:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <g_showData>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%02d:%02d.%02d",
    1c02:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <g_showData+0x1b>
    1c06:	1f 92       	push	r1
    1c08:	8f 93       	push	r24
    1c0a:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <g_showData+0x1a>
    1c0e:	1f 92       	push	r1
    1c10:	8f 93       	push	r24
    1c12:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <g_showData+0x19>
    1c16:	1f 92       	push	r1
    1c18:	8f 93       	push	r24
    1c1a:	84 e6       	ldi	r24, 0x64	; 100
    1c1c:	92 e0       	ldi	r25, 0x02	; 2
    1c1e:	9f 93       	push	r25
    1c20:	8f 93       	push	r24
    1c22:	1f 92       	push	r1
    1c24:	80 e3       	ldi	r24, 0x30	; 48
    1c26:	8f 93       	push	r24
    1c28:	8d ed       	ldi	r24, 0xDD	; 221
    1c2a:	93 e0       	ldi	r25, 0x03	; 3
    1c2c:	9f 93       	push	r25
    1c2e:	8f 93       	push	r24
    1c30:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
    1c34:	cf bf       	out	0x3f, r28	; 63
		g_showData.time_hour, g_showData.time_minute, g_showData.time_second);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 10 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  2 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1c36:	23 e0       	ldi	r18, 0x03	; 3
    1c38:	31 e0       	ldi	r19, 0x01	; 1
    1c3a:	4d e1       	ldi	r20, 0x1D	; 29
    1c3c:	6f e3       	ldi	r22, 0x3F	; 63
    1c3e:	8d ed       	ldi	r24, 0xDD	; 221
    1c40:	93 e0       	ldi	r25, 0x03	; 3
    1c42:	a8 d8       	rcall	.-3760   	; 0xd94 <gfx_mono_draw_string>
		return 255;
    1c44:	8d b7       	in	r24, 0x3d	; 61
    1c46:	9e b7       	in	r25, 0x3e	; 62
    1c48:	0c 96       	adiw	r24, 0x0c	; 12
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	9e bf       	out	0x3e, r25	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	8d bf       	out	0x3d, r24	; 61
    1c54:	8f ef       	ldi	r24, 0xFF	; 255
    1c56:	f2 c3       	rjmp	.+2020   	; 0x243c <lcd_show_new_data+0x870>
	}

	/* Always */
	if (g_showData.newDate) {
    1c58:	91 ff       	sbrs	r25, 1
    1c5a:	30 c0       	rjmp	.+96     	; 0x1cbc <lcd_show_new_data+0xf0>
		g_showData.newDate = false;
    1c5c:	9d 7f       	andi	r25, 0xFD	; 253
    1c5e:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <g_showData>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%02d.%02d.%04d",
    1c62:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <g_showData+0x7>
    1c66:	8f 93       	push	r24
    1c68:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <g_showData+0x6>
    1c6c:	8f 93       	push	r24
    1c6e:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <g_showData+0x17>
    1c72:	1f 92       	push	r1
    1c74:	8f 93       	push	r24
    1c76:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <g_showData+0x18>
    1c7a:	1f 92       	push	r1
    1c7c:	8f 93       	push	r24
    1c7e:	83 e7       	ldi	r24, 0x73	; 115
    1c80:	92 e0       	ldi	r25, 0x02	; 2
    1c82:	9f 93       	push	r25
    1c84:	8f 93       	push	r24
    1c86:	1f 92       	push	r1
    1c88:	80 e3       	ldi	r24, 0x30	; 48
    1c8a:	8f 93       	push	r24
    1c8c:	8d ed       	ldi	r24, 0xDD	; 221
    1c8e:	93 e0       	ldi	r25, 0x03	; 3
    1c90:	9f 93       	push	r25
    1c92:	8f 93       	push	r24
    1c94:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
    1c98:	cf bf       	out	0x3f, r28	; 63
		g_showData.date_day, g_showData.date_month, g_showData.date_year);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 10 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  1 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1c9a:	23 e0       	ldi	r18, 0x03	; 3
    1c9c:	31 e0       	ldi	r19, 0x01	; 1
    1c9e:	44 e1       	ldi	r20, 0x14	; 20
    1ca0:	6f e3       	ldi	r22, 0x3F	; 63
    1ca2:	8d ed       	ldi	r24, 0xDD	; 221
    1ca4:	93 e0       	ldi	r25, 0x03	; 3
    1ca6:	76 d8       	rcall	.-3860   	; 0xd94 <gfx_mono_draw_string>
		return 254;
    1ca8:	8d b7       	in	r24, 0x3d	; 61
    1caa:	9e b7       	in	r25, 0x3e	; 62
    1cac:	0c 96       	adiw	r24, 0x0c	; 12
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	9e bf       	out	0x3e, r25	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	8d bf       	out	0x3d, r24	; 61
    1cb8:	8e ef       	ldi	r24, 0xFE	; 254
    1cba:	c0 c3       	rjmp	.+1920   	; 0x243c <lcd_show_new_data+0x870>
	}

	/* Always */
	if (g_showData.newClkState) {
    1cbc:	89 2f       	mov	r24, r25
    1cbe:	81 70       	andi	r24, 0x01	; 1
    1cc0:	90 ff       	sbrs	r25, 0
    1cc2:	43 c1       	rjmp	.+646    	; 0x1f4a <lcd_show_new_data+0x37e>
		g_showData.newClkState = false;
    1cc4:	9e 7f       	andi	r25, 0xFE	; 254
    1cc6:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <g_showData>
    1cca:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(flags);
		lcd_show_new_clk_state(g_showData.clkState_clk_state, g_showData.clkState_phaseVolt1000, g_showData.clkState_phaseDeg100);
    1ccc:	a0 90 2e 04 	lds	r10, 0x042E	; 0x80042e <g_showData+0x2>
    1cd0:	b0 90 2f 04 	lds	r11, 0x042F	; 0x80042f <g_showData+0x3>
    1cd4:	90 90 42 04 	lds	r9, 0x0442	; 0x800442 <g_showData+0x16>
    1cd8:	c0 91 30 04 	lds	r28, 0x0430	; 0x800430 <g_showData+0x4>
    1cdc:	d0 91 31 04 	lds	r29, 0x0431	; 0x800431 <g_showData+0x5>
    1ce0:	c0 3b       	cpi	r28, 0xB0	; 176
    1ce2:	99 eb       	ldi	r25, 0xB9	; 185
    1ce4:	d9 07       	cpc	r29, r25
    1ce6:	14 f4       	brge	.+4      	; 0x1cec <lcd_show_new_data+0x120>
    1ce8:	c0 eb       	ldi	r28, 0xB0	; 176
    1cea:	d9 eb       	ldi	r29, 0xB9	; 185
    1cec:	c1 35       	cpi	r28, 0x51	; 81
    1cee:	86 e4       	ldi	r24, 0x46	; 70
    1cf0:	d8 07       	cpc	r29, r24
    1cf2:	14 f0       	brlt	.+4      	; 0x1cf8 <lcd_show_new_data+0x12c>
    1cf4:	c0 e5       	ldi	r28, 0x50	; 80
    1cf6:	d6 e4       	ldi	r29, 0x46	; 70
		} else if (phaseDeg100 < -18000) {
		phaseDeg100 = -18000;
	}


	int diff = (int) ((float)maxdiff * (phaseDeg100 / 18000.0f));
    1cf8:	be 01       	movw	r22, r28
    1cfa:	0d 2e       	mov	r0, r29
    1cfc:	00 0c       	add	r0, r0
    1cfe:	88 0b       	sbc	r24, r24
    1d00:	99 0b       	sbc	r25, r25
    1d02:	0e 94 ed 1b 	call	0x37da	; 0x37da <__floatsisf>
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 ea       	ldi	r19, 0xA0	; 160
    1d0a:	4c e8       	ldi	r20, 0x8C	; 140
    1d0c:	56 e4       	ldi	r21, 0x46	; 70
    1d0e:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__divsf3>
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	48 e9       	ldi	r20, 0x98	; 152
    1d18:	52 e4       	ldi	r21, 0x42	; 66
    1d1a:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__mulsf3>
    1d1e:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__fixsfsi>
    1d22:	2b 01       	movw	r4, r22
    1d24:	3c 01       	movw	r6, r24
    1d26:	7b 01       	movw	r14, r22
	int ldiff = diff < 0 ?  diff : 0;
	int rdiff = diff > 0 ?  diff : 0;

	uint8_t ox = mid_x;
	int dx = diff;
	if (dx < 0) {
    1d28:	77 ff       	sbrs	r23, 7
    1d2a:	08 c0       	rjmp	.+16     	; 0x1d3c <lcd_show_new_data+0x170>
		ox += dx;
    1d2c:	36 e9       	ldi	r19, 0x96	; 150
    1d2e:	83 2e       	mov	r8, r19
    1d30:	86 0e       	add	r8, r22
		dx = -dx;
    1d32:	cc 24       	eor	r12, r12
    1d34:	dd 24       	eor	r13, r13
    1d36:	c6 1a       	sub	r12, r22
    1d38:	d7 0a       	sbc	r13, r23
    1d3a:	03 c0       	rjmp	.+6      	; 0x1d42 <lcd_show_new_data+0x176>
	int ldiff = diff < 0 ?  diff : 0;
	int rdiff = diff > 0 ?  diff : 0;

	uint8_t ox = mid_x;
	int dx = diff;
	if (dx < 0) {
    1d3c:	6b 01       	movw	r12, r22

	int diff = (int) ((float)maxdiff * (phaseDeg100 / 18000.0f));
	int ldiff = diff < 0 ?  diff : 0;
	int rdiff = diff > 0 ?  diff : 0;

	uint8_t ox = mid_x;
    1d3e:	26 e9       	ldi	r18, 0x96	; 150
    1d40:	82 2e       	mov	r8, r18
	if (dx < 0) {
		ox += dx;
		dx = -dx;
	}

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%1X", clk_state);
    1d42:	1f 92       	push	r1
    1d44:	9f 92       	push	r9
    1d46:	82 e8       	ldi	r24, 0x82	; 130
    1d48:	92 e0       	ldi	r25, 0x02	; 2
    1d4a:	9f 93       	push	r25
    1d4c:	8f 93       	push	r24
    1d4e:	1f 92       	push	r1
    1d50:	90 e3       	ldi	r25, 0x30	; 48
    1d52:	39 2e       	mov	r3, r25
    1d54:	3f 92       	push	r3
    1d56:	0d ed       	ldi	r16, 0xDD	; 221
    1d58:	13 e0       	ldi	r17, 0x03	; 3
    1d5a:	1f 93       	push	r17
    1d5c:	0f 93       	push	r16
    1d5e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 12 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  0 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1d62:	23 e0       	ldi	r18, 0x03	; 3
    1d64:	31 e0       	ldi	r19, 0x01	; 1
    1d66:	4b e0       	ldi	r20, 0x0B	; 11
    1d68:	6b e4       	ldi	r22, 0x4B	; 75
    1d6a:	c8 01       	movw	r24, r16
    1d6c:	13 d8       	rcall	.-4058   	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%1d.%03d", phaseVolt1000 / 1000, phaseVolt1000 % 1000);
    1d6e:	c5 01       	movw	r24, r10
    1d70:	68 ee       	ldi	r22, 0xE8	; 232
    1d72:	73 e0       	ldi	r23, 0x03	; 3
    1d74:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <__udivmodhi4>
    1d78:	9f 93       	push	r25
    1d7a:	8f 93       	push	r24
    1d7c:	7f 93       	push	r23
    1d7e:	6f 93       	push	r22
    1d80:	86 e8       	ldi	r24, 0x86	; 134
    1d82:	92 e0       	ldi	r25, 0x02	; 2
    1d84:	9f 93       	push	r25
    1d86:	8f 93       	push	r24
    1d88:	1f 92       	push	r1
    1d8a:	3f 92       	push	r3
    1d8c:	1f 93       	push	r17
    1d8e:	0f 93       	push	r16
    1d90:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 31 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  5 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1d94:	23 e0       	ldi	r18, 0x03	; 3
    1d96:	31 e0       	ldi	r19, 0x01	; 1
    1d98:	48 e3       	ldi	r20, 0x38	; 56
    1d9a:	6d eb       	ldi	r22, 0xBD	; 189
    1d9c:	c8 01       	movw	r24, r16
    1d9e:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%+04d", phaseDeg100 / 100);
    1da2:	ce 01       	movw	r24, r28
    1da4:	64 e6       	ldi	r22, 0x64	; 100
    1da6:	70 e0       	ldi	r23, 0x00	; 0
    1da8:	0e 94 77 1d 	call	0x3aee	; 0x3aee <__divmodhi4>
    1dac:	7f 93       	push	r23
    1dae:	6f 93       	push	r22
    1db0:	8f e8       	ldi	r24, 0x8F	; 143
    1db2:	92 e0       	ldi	r25, 0x02	; 2
    1db4:	9f 93       	push	r25
    1db6:	8f 93       	push	r24
    1db8:	1f 92       	push	r1
    1dba:	3f 92       	push	r3
    1dbc:	1f 93       	push	r17
    1dbe:	0f 93       	push	r16
    1dc0:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 33 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP + 11 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1dc4:	23 e0       	ldi	r18, 0x03	; 3
    1dc6:	31 e0       	ldi	r19, 0x01	; 1
    1dc8:	4e e6       	ldi	r20, 0x6E	; 110
    1dca:	69 ec       	ldi	r22, 0xC9	; 201
    1dcc:	c8 01       	movw	r24, r16
    1dce:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>

	if ((clk_state_old != clk_state) || !dx) {
    1dd2:	8d b7       	in	r24, 0x3d	; 61
    1dd4:	9e b7       	in	r25, 0x3e	; 62
    1dd6:	4a 96       	adiw	r24, 0x1a	; 26
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	9e bf       	out	0x3e, r25	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	8d bf       	out	0x3d, r24	; 61
    1de2:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <clk_state_old.3121>
    1de6:	89 11       	cpse	r24, r9
    1de8:	22 c0       	rjmp	.+68     	; 0x1e2e <lcd_show_new_data+0x262>
    1dea:	c1 14       	cp	r12, r1
    1dec:	d1 04       	cpc	r13, r1
    1dee:	f9 f0       	breq	.+62     	; 0x1e2e <lcd_show_new_data+0x262>
		phaseDeg100 = -18000;
	}


	int diff = (int) ((float)maxdiff * (phaseDeg100 / 18000.0f));
	int ldiff = diff < 0 ?  diff : 0;
    1df0:	44 2d       	mov	r20, r4
    1df2:	1e 14       	cp	r1, r14
    1df4:	1f 04       	cpc	r1, r15
    1df6:	0c f4       	brge	.+2      	; 0x1dfa <lcd_show_new_data+0x22e>
    1df8:	40 e0       	ldi	r20, 0x00	; 0
	int rdiff = diff > 0 ?  diff : 0;
    1dfa:	d4 2d       	mov	r29, r4
    1dfc:	f7 fc       	sbrc	r15, 7
    1dfe:	d0 e0       	ldi	r29, 0x00	; 0
	if ((clk_state_old != clk_state) || !dx) {
		gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  (maxdiff << 1) +8, 5, GFX_PIXEL_CLR);
	}

	if (dx) {
		switch (clk_state) {
    1e00:	97 e0       	ldi	r25, 0x07	; 7
    1e02:	99 16       	cp	r9, r25
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <lcd_show_new_data+0x23c>
    1e06:	62 c0       	rjmp	.+196    	; 0x1ecc <lcd_show_new_data+0x300>
    1e08:	99 15       	cp	r25, r9
    1e0a:	68 f0       	brcs	.+26     	; 0x1e26 <lcd_show_new_data+0x25a>
    1e0c:	8f ef       	ldi	r24, 0xFF	; 255
    1e0e:	89 0d       	add	r24, r9
    1e10:	83 30       	cpi	r24, 0x03	; 3
    1e12:	08 f0       	brcs	.+2      	; 0x1e16 <lcd_show_new_data+0x24a>
    1e14:	96 c0       	rjmp	.+300    	; 0x1f42 <lcd_show_new_data+0x376>
			break;

			case 0x3:
			case 0x2:
			case 0x1:
			gfx_mono_generic_draw_filled_rect(mid_x - maxdiff, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,  maxdiff << 1, 1, GFX_PIXEL_SET);
    1e16:	01 e0       	ldi	r16, 0x01	; 1
    1e18:	21 e0       	ldi	r18, 0x01	; 1
    1e1a:	48 e9       	ldi	r20, 0x98	; 152
    1e1c:	6a e7       	ldi	r22, 0x7A	; 122
    1e1e:	8a e4       	ldi	r24, 0x4A	; 74
    1e20:	0e 94 76 04 	call	0x8ec	; 0x8ec <gfx_mono_generic_draw_filled_rect>
    1e24:	8e c0       	rjmp	.+284    	; 0x1f42 <lcd_show_new_data+0x376>
	if ((clk_state_old != clk_state) || !dx) {
		gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  (maxdiff << 1) +8, 5, GFX_PIXEL_CLR);
	}

	if (dx) {
		switch (clk_state) {
    1e26:	8f e0       	ldi	r24, 0x0F	; 15
    1e28:	98 16       	cp	r9, r24
    1e2a:	99 f0       	breq	.+38     	; 0x1e52 <lcd_show_new_data+0x286>
    1e2c:	8a c0       	rjmp	.+276    	; 0x1f42 <lcd_show_new_data+0x376>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%+04d", phaseDeg100 / 100);
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 33 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP + 11 * LCD_SHOW_LINE_HEIGHT, &sysfont);

	if ((clk_state_old != clk_state) || !dx) {
		gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  (maxdiff << 1) +8, 5, GFX_PIXEL_CLR);
    1e2e:	00 e0       	ldi	r16, 0x00	; 0
    1e30:	25 e0       	ldi	r18, 0x05	; 5
    1e32:	40 ea       	ldi	r20, 0xA0	; 160
    1e34:	68 e7       	ldi	r22, 0x78	; 120
    1e36:	86 e4       	ldi	r24, 0x46	; 70
    1e38:	0e 94 76 04 	call	0x8ec	; 0x8ec <gfx_mono_generic_draw_filled_rect>
	}

	if (dx) {
    1e3c:	c1 14       	cp	r12, r1
    1e3e:	d1 04       	cpc	r13, r1
    1e40:	b9 f6       	brne	.-82     	; 0x1df0 <lcd_show_new_data+0x224>
			gfx_mono_generic_draw_filled_rect(mid_x - maxdiff, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,  maxdiff << 1, 1, GFX_PIXEL_SET);
			break;
		}

	} else {
		gfx_mono_generic_draw_line( mid_x, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,
    1e42:	01 e0       	ldi	r16, 0x01	; 1
    1e44:	2c e7       	ldi	r18, 0x7C	; 124
    1e46:	46 e9       	ldi	r20, 0x96	; 150
    1e48:	68 e7       	ldi	r22, 0x78	; 120
    1e4a:	86 e9       	ldi	r24, 0x96	; 150
    1e4c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gfx_mono_generic_draw_line>
    1e50:	78 c0       	rjmp	.+240    	; 0x1f42 <lcd_show_new_data+0x376>
	}

	if (dx) {
		switch (clk_state) {
			case 0xf:
			gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  maxdiff + ldiff +4, 5, GFX_PIXEL_CLR);
    1e52:	40 5b       	subi	r20, 0xB0	; 176
    1e54:	00 e0       	ldi	r16, 0x00	; 0
    1e56:	25 e0       	ldi	r18, 0x05	; 5
    1e58:	68 e7       	ldi	r22, 0x78	; 120
    1e5a:	86 e4       	ldi	r24, 0x46	; 70
    1e5c:	0e 94 76 04 	call	0x8ec	; 0x8ec <gfx_mono_generic_draw_filled_rect>
			if (diff < 0) {
    1e60:	f7 fe       	sbrs	r15, 7
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <lcd_show_new_data+0x2b6>
				gfx_mono_generic_draw_line(ox - 4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1e64:	01 e0       	ldi	r16, 0x01	; 1
    1e66:	28 e7       	ldi	r18, 0x78	; 120
    1e68:	48 2d       	mov	r20, r8
    1e6a:	6a e7       	ldi	r22, 0x7A	; 122
    1e6c:	cc ef       	ldi	r28, 0xFC	; 252
    1e6e:	c8 0d       	add	r28, r8
    1e70:	8c 2f       	mov	r24, r28
    1e72:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gfx_mono_generic_draw_line>
										   ox,     LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,
										   GFX_PIXEL_SET);
				gfx_mono_generic_draw_line(ox - 4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1e76:	2c e7       	ldi	r18, 0x7C	; 124
    1e78:	48 2d       	mov	r20, r8
    1e7a:	6a e7       	ldi	r22, 0x7A	; 122
    1e7c:	8c 2f       	mov	r24, r28
    1e7e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gfx_mono_generic_draw_line>
										   ox,     LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 5,
										   GFX_PIXEL_SET);
			}
			gfx_mono_generic_draw_filled_rect(ox, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1, dx, 5, GFX_PIXEL_SET);
    1e82:	01 e0       	ldi	r16, 0x01	; 1
    1e84:	25 e0       	ldi	r18, 0x05	; 5
    1e86:	4c 2d       	mov	r20, r12
    1e88:	68 e7       	ldi	r22, 0x78	; 120
    1e8a:	88 2d       	mov	r24, r8
    1e8c:	0e 94 76 04 	call	0x8ec	; 0x8ec <gfx_mono_generic_draw_filled_rect>
			gfx_mono_generic_draw_filled_rect(mid_x + rdiff, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  maxdiff - rdiff +4, 5, GFX_PIXEL_CLR);
    1e90:	40 e5       	ldi	r20, 0x50	; 80
    1e92:	4d 1b       	sub	r20, r29
    1e94:	00 e0       	ldi	r16, 0x00	; 0
    1e96:	25 e0       	ldi	r18, 0x05	; 5
    1e98:	68 e7       	ldi	r22, 0x78	; 120
    1e9a:	86 e9       	ldi	r24, 0x96	; 150
    1e9c:	8d 0f       	add	r24, r29
    1e9e:	0e 94 76 04 	call	0x8ec	; 0x8ec <gfx_mono_generic_draw_filled_rect>
			if (diff > 0) {
    1ea2:	1e 14       	cp	r1, r14
    1ea4:	1f 04       	cpc	r1, r15
    1ea6:	0c f0       	brlt	.+2      	; 0x1eaa <lcd_show_new_data+0x2de>
    1ea8:	4c c0       	rjmp	.+152    	; 0x1f42 <lcd_show_new_data+0x376>
				gfx_mono_generic_draw_line(mid_x + rdiff + 3, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1eaa:	c5 e9       	ldi	r28, 0x95	; 149
    1eac:	cd 0f       	add	r28, r29
    1eae:	d7 56       	subi	r29, 0x67	; 103
    1eb0:	01 e0       	ldi	r16, 0x01	; 1
    1eb2:	28 e7       	ldi	r18, 0x78	; 120
    1eb4:	4c 2f       	mov	r20, r28
    1eb6:	6a e7       	ldi	r22, 0x7A	; 122
    1eb8:	8d 2f       	mov	r24, r29
    1eba:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gfx_mono_generic_draw_line>
										   mid_x + rdiff - 1, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,
										   GFX_PIXEL_SET);
				gfx_mono_generic_draw_line(mid_x + rdiff + 3, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1ebe:	2c e7       	ldi	r18, 0x7C	; 124
    1ec0:	4c 2f       	mov	r20, r28
    1ec2:	6a e7       	ldi	r22, 0x7A	; 122
    1ec4:	8d 2f       	mov	r24, r29
    1ec6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gfx_mono_generic_draw_line>
    1eca:	3b c0       	rjmp	.+118    	; 0x1f42 <lcd_show_new_data+0x376>
										   GFX_PIXEL_SET);
			}
			break;

			case 0x7:
			gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,  maxdiff + ldiff +4, 3, GFX_PIXEL_CLR);
    1ecc:	40 5b       	subi	r20, 0xB0	; 176
    1ece:	00 e0       	ldi	r16, 0x00	; 0
    1ed0:	23 e0       	ldi	r18, 0x03	; 3
    1ed2:	69 e7       	ldi	r22, 0x79	; 121
    1ed4:	86 e4       	ldi	r24, 0x46	; 70
    1ed6:	0e 94 76 04 	call	0x8ec	; 0x8ec <gfx_mono_generic_draw_filled_rect>
			if (diff < 0) {
    1eda:	f7 fe       	sbrs	r15, 7
    1edc:	0f c0       	rjmp	.+30     	; 0x1efc <lcd_show_new_data+0x330>
				gfx_mono_generic_draw_line(ox - 4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1ede:	01 e0       	ldi	r16, 0x01	; 1
    1ee0:	29 e7       	ldi	r18, 0x79	; 121
    1ee2:	48 2d       	mov	r20, r8
    1ee4:	6a e7       	ldi	r22, 0x7A	; 122
    1ee6:	cc ef       	ldi	r28, 0xFC	; 252
    1ee8:	c8 0d       	add	r28, r8
    1eea:	8c 2f       	mov	r24, r28
    1eec:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gfx_mono_generic_draw_line>
										   ox,     LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,
										   GFX_PIXEL_SET);
				gfx_mono_generic_draw_line(ox - 4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1ef0:	2b e7       	ldi	r18, 0x7B	; 123
    1ef2:	48 2d       	mov	r20, r8
    1ef4:	6a e7       	ldi	r22, 0x7A	; 122
    1ef6:	8c 2f       	mov	r24, r28
    1ef8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gfx_mono_generic_draw_line>
										   ox,     LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 4,
										   GFX_PIXEL_SET);
			}
			gfx_mono_generic_draw_filled_rect(ox, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,  dx, 3, GFX_PIXEL_SET);
    1efc:	01 e0       	ldi	r16, 0x01	; 1
    1efe:	23 e0       	ldi	r18, 0x03	; 3
    1f00:	4c 2d       	mov	r20, r12
    1f02:	69 e7       	ldi	r22, 0x79	; 121
    1f04:	88 2d       	mov	r24, r8
    1f06:	0e 94 76 04 	call	0x8ec	; 0x8ec <gfx_mono_generic_draw_filled_rect>
			gfx_mono_generic_draw_filled_rect(mid_x + rdiff, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,  maxdiff - rdiff +4, 3, GFX_PIXEL_CLR);
    1f0a:	40 e5       	ldi	r20, 0x50	; 80
    1f0c:	4d 1b       	sub	r20, r29
    1f0e:	00 e0       	ldi	r16, 0x00	; 0
    1f10:	23 e0       	ldi	r18, 0x03	; 3
    1f12:	69 e7       	ldi	r22, 0x79	; 121
    1f14:	86 e9       	ldi	r24, 0x96	; 150
    1f16:	8d 0f       	add	r24, r29
    1f18:	0e 94 76 04 	call	0x8ec	; 0x8ec <gfx_mono_generic_draw_filled_rect>
			if (diff > 0) {
    1f1c:	1e 14       	cp	r1, r14
    1f1e:	1f 04       	cpc	r1, r15
    1f20:	84 f4       	brge	.+32     	; 0x1f42 <lcd_show_new_data+0x376>
				gfx_mono_generic_draw_line(mid_x + rdiff + 3, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1f22:	c5 e9       	ldi	r28, 0x95	; 149
    1f24:	cd 0f       	add	r28, r29
    1f26:	d7 56       	subi	r29, 0x67	; 103
    1f28:	01 e0       	ldi	r16, 0x01	; 1
    1f2a:	29 e7       	ldi	r18, 0x79	; 121
    1f2c:	4c 2f       	mov	r20, r28
    1f2e:	6a e7       	ldi	r22, 0x7A	; 122
    1f30:	8d 2f       	mov	r24, r29
    1f32:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gfx_mono_generic_draw_line>
										   mid_x + rdiff - 1, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,
										   GFX_PIXEL_SET);
				gfx_mono_generic_draw_line(mid_x + rdiff + 3, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1f36:	2b e7       	ldi	r18, 0x7B	; 123
    1f38:	4c 2f       	mov	r20, r28
    1f3a:	6a e7       	ldi	r22, 0x7A	; 122
    1f3c:	8d 2f       	mov	r24, r29
    1f3e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gfx_mono_generic_draw_line>
		gfx_mono_generic_draw_line( mid_x, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,
									mid_x, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 5,
									GFX_PIXEL_SET);
	}

	clk_state_old = clk_state;
    1f42:	90 92 57 03 	sts	0x0357, r9	; 0x800357 <clk_state_old.3121>
	/* Always */
	if (g_showData.newClkState) {
		g_showData.newClkState = false;
		cpu_irq_restore(flags);
		lcd_show_new_clk_state(g_showData.clkState_clk_state, g_showData.clkState_phaseVolt1000, g_showData.clkState_phaseDeg100);
		return 253;
    1f46:	8d ef       	ldi	r24, 0xFD	; 253
    1f48:	79 c2       	rjmp	.+1266   	; 0x243c <lcd_show_new_data+0x870>
	}


	/* Slot 1 */
	if (g_showData.newSatUse && (idx <= 1)) {
    1f4a:	96 ff       	sbrs	r25, 6
    1f4c:	36 c0       	rjmp	.+108    	; 0x1fba <lcd_show_new_data+0x3ee>
    1f4e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3136>
    1f52:	22 30       	cpi	r18, 0x02	; 2
    1f54:	90 f5       	brcc	.+100    	; 0x1fba <lcd_show_new_data+0x3ee>
		g_showData.newSatUse = false;
    1f56:	9f 7b       	andi	r25, 0xBF	; 191
    1f58:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <g_showData>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%02d East=%02d Used=%02d",
    1f5c:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <g_showData+0x21>
    1f60:	1f 92       	push	r1
    1f62:	8f 93       	push	r24
    1f64:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <g_showData+0x20>
    1f68:	1f 92       	push	r1
    1f6a:	8f 93       	push	r24
    1f6c:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <g_showData+0x1f>
    1f70:	1f 92       	push	r1
    1f72:	8f 93       	push	r24
    1f74:	85 e9       	ldi	r24, 0x95	; 149
    1f76:	92 e0       	ldi	r25, 0x02	; 2
    1f78:	9f 93       	push	r25
    1f7a:	8f 93       	push	r24
    1f7c:	1f 92       	push	r1
    1f7e:	80 e3       	ldi	r24, 0x30	; 48
    1f80:	8f 93       	push	r24
    1f82:	8d ed       	ldi	r24, 0xDD	; 221
    1f84:	93 e0       	ldi	r25, 0x03	; 3
    1f86:	9f 93       	push	r25
    1f88:	8f 93       	push	r24
    1f8a:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
    1f8e:	cf bf       	out	0x3f, r28	; 63
		g_showData.satUse_west, g_showData.satUse_east, g_showData.satUse_used);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 15 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  6 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1f90:	23 e0       	ldi	r18, 0x03	; 3
    1f92:	31 e0       	ldi	r19, 0x01	; 1
    1f94:	41 e4       	ldi	r20, 0x41	; 65
    1f96:	6d e5       	ldi	r22, 0x5D	; 93
    1f98:	8d ed       	ldi	r24, 0xDD	; 221
    1f9a:	93 e0       	ldi	r25, 0x03	; 3
    1f9c:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>
		idx = 2;
    1fa0:	82 e0       	ldi	r24, 0x02	; 2
    1fa2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3136>
		return 1;
    1fa6:	8d b7       	in	r24, 0x3d	; 61
    1fa8:	9e b7       	in	r25, 0x3e	; 62
    1faa:	0c 96       	adiw	r24, 0x0c	; 12
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	9e bf       	out	0x3e, r25	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	8d bf       	out	0x3d, r24	; 61
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	41 c2       	rjmp	.+1154   	; 0x243c <lcd_show_new_data+0x870>
	}

	/* Slot 2 */
	if (g_showData.newSatDop && (idx <= 2)) {
    1fba:	97 ff       	sbrs	r25, 7
    1fbc:	47 c0       	rjmp	.+142    	; 0x204c <lcd_show_new_data+0x480>
    1fbe:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3136>
    1fc2:	23 30       	cpi	r18, 0x03	; 3
    1fc4:	08 f0       	brcs	.+2      	; 0x1fc8 <lcd_show_new_data+0x3fc>
    1fc6:	42 c0       	rjmp	.+132    	; 0x204c <lcd_show_new_data+0x480>
		g_showData.newSatDop = false;
    1fc8:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <g_showData>
    1fcc:	8f 77       	andi	r24, 0x7F	; 127
    1fce:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <g_showData>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%03d.%02d",
		(int) (g_showData.satDop_dop100 / 100.0f), g_showData.satDop_dop100 % 100);
    1fd2:	20 91 3a 04 	lds	r18, 0x043A	; 0x80043a <g_showData+0xe>
    1fd6:	30 91 3b 04 	lds	r19, 0x043B	; 0x80043b <g_showData+0xf>
	}

	/* Slot 2 */
	if (g_showData.newSatDop && (idx <= 2)) {
		g_showData.newSatDop = false;
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%03d.%02d",
    1fda:	c9 01       	movw	r24, r18
    1fdc:	64 e6       	ldi	r22, 0x64	; 100
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <__udivmodhi4>
    1fe4:	9f 93       	push	r25
    1fe6:	8f 93       	push	r24
		(int) (g_showData.satDop_dop100 / 100.0f), g_showData.satDop_dop100 % 100);
    1fe8:	b9 01       	movw	r22, r18
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__floatunsisf>
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	48 ec       	ldi	r20, 0xC8	; 200
    1ff8:	52 e4       	ldi	r21, 0x42	; 66
    1ffa:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <__divsf3>
	}

	/* Slot 2 */
	if (g_showData.newSatDop && (idx <= 2)) {
		g_showData.newSatDop = false;
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%03d.%02d",
    1ffe:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__fixsfsi>
    2002:	7f 93       	push	r23
    2004:	6f 93       	push	r22
    2006:	86 ed       	ldi	r24, 0xD6	; 214
    2008:	91 e0       	ldi	r25, 0x01	; 1
    200a:	9f 93       	push	r25
    200c:	8f 93       	push	r24
    200e:	1f 92       	push	r1
    2010:	80 e3       	ldi	r24, 0x30	; 48
    2012:	8f 93       	push	r24
    2014:	8d ed       	ldi	r24, 0xDD	; 221
    2016:	93 e0       	ldi	r25, 0x03	; 3
    2018:	9f 93       	push	r25
    201a:	8f 93       	push	r24
    201c:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
    2020:	cf bf       	out	0x3f, r28	; 63
		(int) (g_showData.satDop_dop100 / 100.0f), g_showData.satDop_dop100 % 100);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 10 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  7 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    2022:	23 e0       	ldi	r18, 0x03	; 3
    2024:	31 e0       	ldi	r19, 0x01	; 1
    2026:	4a e4       	ldi	r20, 0x4A	; 74
    2028:	6f e3       	ldi	r22, 0x3F	; 63
    202a:	8d ed       	ldi	r24, 0xDD	; 221
    202c:	93 e0       	ldi	r25, 0x03	; 3
    202e:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>
		idx = 3;
    2032:	83 e0       	ldi	r24, 0x03	; 3
    2034:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3136>
		return 2;
    2038:	8d b7       	in	r24, 0x3d	; 61
    203a:	9e b7       	in	r25, 0x3e	; 62
    203c:	0a 96       	adiw	r24, 0x0a	; 10
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	9e bf       	out	0x3e, r25	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	8d bf       	out	0x3d, r24	; 61
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	f8 c1       	rjmp	.+1008   	; 0x243c <lcd_show_new_data+0x870>
	}

	/* Slot 3 */
	if (g_showData.newPosState && (idx <= 3)) {
    204c:	20 91 2d 04 	lds	r18, 0x042D	; 0x80042d <g_showData+0x1>
    2050:	20 ff       	sbrs	r18, 0
    2052:	32 c0       	rjmp	.+100    	; 0x20b8 <lcd_show_new_data+0x4ec>
    2054:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3136>
    2058:	34 30       	cpi	r19, 0x04	; 4
    205a:	70 f5       	brcc	.+92     	; 0x20b8 <lcd_show_new_data+0x4ec>
		g_showData.newPosState = false;
    205c:	2e 7f       	andi	r18, 0xFE	; 254
    205e:	20 93 2d 04 	sts	0x042D, r18	; 0x80042d <g_showData+0x1>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%1d M2=%1d",
    2062:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <g_showData+0x23>
    2066:	1f 92       	push	r1
    2068:	8f 93       	push	r24
    206a:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <g_showData+0x22>
    206e:	1f 92       	push	r1
    2070:	8f 93       	push	r24
    2072:	8d ee       	ldi	r24, 0xED	; 237
    2074:	91 e0       	ldi	r25, 0x01	; 1
    2076:	9f 93       	push	r25
    2078:	8f 93       	push	r24
    207a:	1f 92       	push	r1
    207c:	80 e3       	ldi	r24, 0x30	; 48
    207e:	8f 93       	push	r24
    2080:	8d ed       	ldi	r24, 0xDD	; 221
    2082:	93 e0       	ldi	r25, 0x03	; 3
    2084:	9f 93       	push	r25
    2086:	8f 93       	push	r24
    2088:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
    208c:	cf bf       	out	0x3f, r28	; 63
		g_showData.posState_fi, g_showData.posState_m2);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 13 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  8 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    208e:	23 e0       	ldi	r18, 0x03	; 3
    2090:	31 e0       	ldi	r19, 0x01	; 1
    2092:	43 e5       	ldi	r20, 0x53	; 83
    2094:	61 e5       	ldi	r22, 0x51	; 81
    2096:	8d ed       	ldi	r24, 0xDD	; 221
    2098:	93 e0       	ldi	r25, 0x03	; 3
    209a:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>
		idx = 4;
    209e:	84 e0       	ldi	r24, 0x04	; 4
    20a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3136>
		return 3;
    20a4:	8d b7       	in	r24, 0x3d	; 61
    20a6:	9e b7       	in	r25, 0x3e	; 62
    20a8:	0a 96       	adiw	r24, 0x0a	; 10
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	9e bf       	out	0x3e, r25	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	8d bf       	out	0x3d, r24	; 61
    20b4:	83 e0       	ldi	r24, 0x03	; 3
    20b6:	c2 c1       	rjmp	.+900    	; 0x243c <lcd_show_new_data+0x870>
	}

	/* Slot 4 */
	if (g_showData.newPosLat && (idx <= 4)) {
    20b8:	21 ff       	sbrs	r18, 1
    20ba:	41 c0       	rjmp	.+130    	; 0x213e <lcd_show_new_data+0x572>
    20bc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3136>
    20c0:	35 30       	cpi	r19, 0x05	; 5
    20c2:	e8 f5       	brcc	.+122    	; 0x213e <lcd_show_new_data+0x572>
		g_showData.newPosLat = false;
    20c4:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <g_showData+0x1>
    20c8:	8d 7f       	andi	r24, 0xFD	; 253
    20ca:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <g_showData+0x1>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%c  %02d%c%02d.%04d",
    20ce:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <g_showData+0x11>
    20d2:	8f 93       	push	r24
    20d4:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <g_showData+0x10>
    20d8:	8f 93       	push	r24
    20da:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <g_showData+0x26>
    20de:	1f 92       	push	r1
    20e0:	8f 93       	push	r24
    20e2:	1f 92       	push	r1
    20e4:	8e e7       	ldi	r24, 0x7E	; 126
    20e6:	8f 93       	push	r24
    20e8:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <g_showData+0x25>
    20ec:	1f 92       	push	r1
    20ee:	8f 93       	push	r24
    20f0:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <g_showData+0x24>
    20f4:	1f 92       	push	r1
    20f6:	8f 93       	push	r24
    20f8:	8e ea       	ldi	r24, 0xAE	; 174
    20fa:	92 e0       	ldi	r25, 0x02	; 2
    20fc:	9f 93       	push	r25
    20fe:	8f 93       	push	r24
    2100:	1f 92       	push	r1
    2102:	80 e3       	ldi	r24, 0x30	; 48
    2104:	8f 93       	push	r24
    2106:	8d ed       	ldi	r24, 0xDD	; 221
    2108:	93 e0       	ldi	r25, 0x03	; 3
    210a:	9f 93       	push	r25
    210c:	8f 93       	push	r24
    210e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
    2112:	cf bf       	out	0x3f, r28	; 63
		g_showData.posLat_sgn, g_showData.posLat_deg, 0x7e, g_showData.posLat_min_int, g_showData.posLat_min_frac10000);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 10 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  9 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    2114:	23 e0       	ldi	r18, 0x03	; 3
    2116:	31 e0       	ldi	r19, 0x01	; 1
    2118:	4c e5       	ldi	r20, 0x5C	; 92
    211a:	6f e3       	ldi	r22, 0x3F	; 63
    211c:	8d ed       	ldi	r24, 0xDD	; 221
    211e:	93 e0       	ldi	r25, 0x03	; 3
    2120:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>
		idx = 5;
    2124:	85 e0       	ldi	r24, 0x05	; 5
    2126:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3136>
		return 4;
    212a:	8d b7       	in	r24, 0x3d	; 61
    212c:	9e b7       	in	r25, 0x3e	; 62
    212e:	40 96       	adiw	r24, 0x10	; 16
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	9e bf       	out	0x3e, r25	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	8d bf       	out	0x3d, r24	; 61
    213a:	84 e0       	ldi	r24, 0x04	; 4
    213c:	7f c1       	rjmp	.+766    	; 0x243c <lcd_show_new_data+0x870>
	}

	/* Slot 5 */
	if (g_showData.newPosLon && (idx <= 5)) {
    213e:	22 ff       	sbrs	r18, 2
    2140:	41 c0       	rjmp	.+130    	; 0x21c4 <lcd_show_new_data+0x5f8>
    2142:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3136>
    2146:	36 30       	cpi	r19, 0x06	; 6
    2148:	e8 f5       	brcc	.+122    	; 0x21c4 <lcd_show_new_data+0x5f8>
		g_showData.newPosLon = false;
    214a:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <g_showData+0x1>
    214e:	8b 7f       	andi	r24, 0xFB	; 251
    2150:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <g_showData+0x1>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%c %03d%c%02d.%04d",
    2154:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <g_showData+0x13>
    2158:	8f 93       	push	r24
    215a:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <g_showData+0x12>
    215e:	8f 93       	push	r24
    2160:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <g_showData+0x29>
    2164:	1f 92       	push	r1
    2166:	8f 93       	push	r24
    2168:	1f 92       	push	r1
    216a:	8e e7       	ldi	r24, 0x7E	; 126
    216c:	8f 93       	push	r24
    216e:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <g_showData+0x28>
    2172:	1f 92       	push	r1
    2174:	8f 93       	push	r24
    2176:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <g_showData+0x27>
    217a:	1f 92       	push	r1
    217c:	8f 93       	push	r24
    217e:	82 ec       	ldi	r24, 0xC2	; 194
    2180:	92 e0       	ldi	r25, 0x02	; 2
    2182:	9f 93       	push	r25
    2184:	8f 93       	push	r24
    2186:	1f 92       	push	r1
    2188:	80 e3       	ldi	r24, 0x30	; 48
    218a:	8f 93       	push	r24
    218c:	8d ed       	ldi	r24, 0xDD	; 221
    218e:	93 e0       	ldi	r25, 0x03	; 3
    2190:	9f 93       	push	r25
    2192:	8f 93       	push	r24
    2194:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
    2198:	cf bf       	out	0x3f, r28	; 63
		g_showData.posLon_sgn, g_showData.posLon_deg, 0x7e, g_showData.posLon_min_int, g_showData.posLon_min_frac10000);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 10 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP + 10 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    219a:	23 e0       	ldi	r18, 0x03	; 3
    219c:	31 e0       	ldi	r19, 0x01	; 1
    219e:	45 e6       	ldi	r20, 0x65	; 101
    21a0:	6f e3       	ldi	r22, 0x3F	; 63
    21a2:	8d ed       	ldi	r24, 0xDD	; 221
    21a4:	93 e0       	ldi	r25, 0x03	; 3
    21a6:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>
		idx = 6;
    21aa:	86 e0       	ldi	r24, 0x06	; 6
    21ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3136>
		return 5;
    21b0:	8d b7       	in	r24, 0x3d	; 61
    21b2:	9e b7       	in	r25, 0x3e	; 62
    21b4:	40 96       	adiw	r24, 0x10	; 16
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	9e bf       	out	0x3e, r25	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	8d bf       	out	0x3d, r24	; 61
    21c0:	85 e0       	ldi	r24, 0x05	; 5
    21c2:	3c c1       	rjmp	.+632    	; 0x243c <lcd_show_new_data+0x870>
	}

	/* Slot 6 */
	if (g_showData.newPosHeight && (idx <= 6)) {
    21c4:	23 ff       	sbrs	r18, 3
    21c6:	39 c0       	rjmp	.+114    	; 0x223a <lcd_show_new_data+0x66e>
    21c8:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3136>
    21cc:	27 30       	cpi	r18, 0x07	; 7
    21ce:	a8 f5       	brcc	.+106    	; 0x223a <lcd_show_new_data+0x66e>
		g_showData.newPosHeight = false;
    21d0:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <g_showData+0x1>
    21d4:	87 7f       	andi	r24, 0xF7	; 247
    21d6:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <g_showData+0x1>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%04d.%01d",
    21da:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <g_showData+0x2a>
    21de:	6a e0       	ldi	r22, 0x0A	; 10
    21e0:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__udivmodqi4>
    21e4:	1f 92       	push	r1
    21e6:	8f 93       	push	r24
    21e8:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <g_showData+0x15>
    21ec:	8f 93       	push	r24
    21ee:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <g_showData+0x14>
    21f2:	8f 93       	push	r24
    21f4:	85 ed       	ldi	r24, 0xD5	; 213
    21f6:	92 e0       	ldi	r25, 0x02	; 2
    21f8:	9f 93       	push	r25
    21fa:	8f 93       	push	r24
    21fc:	1f 92       	push	r1
    21fe:	80 e3       	ldi	r24, 0x30	; 48
    2200:	8f 93       	push	r24
    2202:	8d ed       	ldi	r24, 0xDD	; 221
    2204:	93 e0       	ldi	r25, 0x03	; 3
    2206:	9f 93       	push	r25
    2208:	8f 93       	push	r24
    220a:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
    220e:	cf bf       	out	0x3f, r28	; 63
		g_showData.pos_height_int, g_showData.pos_height_frac100 / 10);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 10 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP + 11 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    2210:	23 e0       	ldi	r18, 0x03	; 3
    2212:	31 e0       	ldi	r19, 0x01	; 1
    2214:	4e e6       	ldi	r20, 0x6E	; 110
    2216:	6f e3       	ldi	r22, 0x3F	; 63
    2218:	8d ed       	ldi	r24, 0xDD	; 221
    221a:	93 e0       	ldi	r25, 0x03	; 3
    221c:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>
		idx = 7;
    2220:	87 e0       	ldi	r24, 0x07	; 7
    2222:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3136>
		return 6;
    2226:	8d b7       	in	r24, 0x3d	; 61
    2228:	9e b7       	in	r25, 0x3e	; 62
    222a:	0a 96       	adiw	r24, 0x0a	; 10
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	9e bf       	out	0x3e, r25	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	8d bf       	out	0x3d, r24	; 61
    2236:	86 e0       	ldi	r24, 0x06	; 6
    2238:	01 c1       	rjmp	.+514    	; 0x243c <lcd_show_new_data+0x870>
	}

	/* Slot 7 */
	if (g_showData.newPpb && (idx <= 7)) {
    223a:	93 ff       	sbrs	r25, 3
    223c:	38 c0       	rjmp	.+112    	; 0x22ae <lcd_show_new_data+0x6e2>
    223e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3136>
    2242:	28 30       	cpi	r18, 0x08	; 8
    2244:	a0 f5       	brcc	.+104    	; 0x22ae <lcd_show_new_data+0x6e2>
		g_showData.newPpb = false;
    2246:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <g_showData>
    224a:	87 7f       	andi	r24, 0xF7	; 247
    224c:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <g_showData>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%04d.%03d",
    2250:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <g_showData+0xb>
    2254:	8f 93       	push	r24
    2256:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <g_showData+0xa>
    225a:	8f 93       	push	r24
    225c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <g_showData+0x9>
    2260:	8f 93       	push	r24
    2262:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <g_showData+0x8>
    2266:	8f 93       	push	r24
    2268:	8f ed       	ldi	r24, 0xDF	; 223
    226a:	92 e0       	ldi	r25, 0x02	; 2
    226c:	9f 93       	push	r25
    226e:	8f 93       	push	r24
    2270:	1f 92       	push	r1
    2272:	80 e3       	ldi	r24, 0x30	; 48
    2274:	8f 93       	push	r24
    2276:	8d ed       	ldi	r24, 0xDD	; 221
    2278:	93 e0       	ldi	r25, 0x03	; 3
    227a:	9f 93       	push	r25
    227c:	8f 93       	push	r24
    227e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
    2282:	cf bf       	out	0x3f, r28	; 63
		g_showData.ppb_int, g_showData.ppb_frac1000);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 10 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  3 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    2284:	23 e0       	ldi	r18, 0x03	; 3
    2286:	31 e0       	ldi	r19, 0x01	; 1
    2288:	46 e2       	ldi	r20, 0x26	; 38
    228a:	6f e3       	ldi	r22, 0x3F	; 63
    228c:	8d ed       	ldi	r24, 0xDD	; 221
    228e:	93 e0       	ldi	r25, 0x03	; 3
    2290:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>
		idx = 8;
    2294:	88 e0       	ldi	r24, 0x08	; 8
    2296:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3136>
		return 7;
    229a:	8d b7       	in	r24, 0x3d	; 61
    229c:	9e b7       	in	r25, 0x3e	; 62
    229e:	0a 96       	adiw	r24, 0x0a	; 10
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	9e bf       	out	0x3e, r25	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	8d bf       	out	0x3d, r24	; 61
    22aa:	87 e0       	ldi	r24, 0x07	; 7
    22ac:	c7 c0       	rjmp	.+398    	; 0x243c <lcd_show_new_data+0x870>
	}

	/* Slot 8 */
	if (g_showData.newPwm && (idx <= 8)) {
    22ae:	94 ff       	sbrs	r25, 4
    22b0:	89 c0       	rjmp	.+274    	; 0x23c4 <lcd_show_new_data+0x7f8>
    22b2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3136>
    22b6:	29 30       	cpi	r18, 0x09	; 9
    22b8:	08 f0       	brcs	.+2      	; 0x22bc <lcd_show_new_data+0x6f0>
    22ba:	84 c0       	rjmp	.+264    	; 0x23c4 <lcd_show_new_data+0x7f8>
		const float exp_256_to_1000 = 1000.0f / 256.0f;
		uint8_t pwm_int = g_showData.pwm_int;
    22bc:	f0 90 48 04 	lds	r15, 0x0448	; 0x800448 <g_showData+0x1c>
		uint8_t pwm_frac256 = g_showData.pwm_frac256;
    22c0:	60 91 49 04 	lds	r22, 0x0449	; 0x800449 <g_showData+0x1d>
		g_showData.newPwm = false;
    22c4:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <g_showData>
    22c8:	8f 7e       	andi	r24, 0xEF	; 239
    22ca:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <g_showData>
    22ce:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(flags);

		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%3d.%03d",
		pwm_int, (int) (pwm_frac256 * exp_256_to_1000));
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	0e 94 ed 1b 	call	0x37da	; 0x37da <__floatsisf>
    22da:	2b 01       	movw	r4, r22
    22dc:	3c 01       	movw	r6, r24
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	4a e7       	ldi	r20, 0x7A	; 122
    22e4:	50 e4       	ldi	r21, 0x40	; 64
    22e6:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__mulsf3>
		uint8_t pwm_int = g_showData.pwm_int;
		uint8_t pwm_frac256 = g_showData.pwm_frac256;
		g_showData.newPwm = false;
		cpu_irq_restore(flags);

		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%3d.%03d",
    22ea:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__fixsfsi>
    22ee:	7f 93       	push	r23
    22f0:	6f 93       	push	r22
    22f2:	1f 92       	push	r1
    22f4:	ff 92       	push	r15
    22f6:	09 ee       	ldi	r16, 0xE9	; 233
    22f8:	12 e0       	ldi	r17, 0x02	; 2
    22fa:	1f 93       	push	r17
    22fc:	0f 93       	push	r16
    22fe:	1f 92       	push	r1
    2300:	80 e3       	ldi	r24, 0x30	; 48
    2302:	b8 2e       	mov	r11, r24
    2304:	bf 92       	push	r11
    2306:	cd ed       	ldi	r28, 0xDD	; 221
    2308:	d3 e0       	ldi	r29, 0x03	; 3
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
		pwm_int, (int) (pwm_frac256 * exp_256_to_1000));
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 10 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  4 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    2312:	23 e0       	ldi	r18, 0x03	; 3
    2314:	31 e0       	ldi	r19, 0x01	; 1
    2316:	4f e2       	ldi	r20, 0x2F	; 47
    2318:	6f e3       	ldi	r22, 0x3F	; 63
    231a:	ce 01       	movw	r24, r28
    231c:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>

		float f_pwm = pwm_int;
    2320:	6f 2d       	mov	r22, r15
    2322:	70 e0       	ldi	r23, 0x00	; 0
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__floatunsisf>
    232c:	6b 01       	movw	r12, r22
    232e:	7c 01       	movw	r14, r24
		f_pwm += pwm_frac256 / 256.0f;
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e8       	ldi	r20, 0x80	; 128
    2336:	5b e3       	ldi	r21, 0x3B	; 59
    2338:	c3 01       	movw	r24, r6
    233a:	b2 01       	movw	r22, r4
    233c:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__mulsf3>
    2340:	9b 01       	movw	r18, r22
    2342:	ac 01       	movw	r20, r24
    2344:	c7 01       	movw	r24, r14
    2346:	b6 01       	movw	r22, r12
    2348:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <__addsf3>
		f_pwm *= 100.0f / 256.0f;
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	48 ec       	ldi	r20, 0xC8	; 200
    2352:	5e e3       	ldi	r21, 0x3E	; 62
    2354:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__mulsf3>
    2358:	6b 01       	movw	r12, r22
    235a:	7c 01       	movw	r14, r24
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%3d.%03d",
		(int) f_pwm, (int) ((f_pwm - floorf(f_pwm)) * 1000.0f));
    235c:	0e 94 28 1c 	call	0x3850	; 0x3850 <floor>
    2360:	9b 01       	movw	r18, r22
    2362:	ac 01       	movw	r20, r24
    2364:	c7 01       	movw	r24, r14
    2366:	b6 01       	movw	r22, r12
    2368:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__subsf3>
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	4a e7       	ldi	r20, 0x7A	; 122
    2372:	54 e4       	ldi	r21, 0x44	; 68
    2374:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__mulsf3>
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 10 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  4 * LCD_SHOW_LINE_HEIGHT, &sysfont);

		float f_pwm = pwm_int;
		f_pwm += pwm_frac256 / 256.0f;
		f_pwm *= 100.0f / 256.0f;
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%3d.%03d",
    2378:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__fixsfsi>
    237c:	7f 93       	push	r23
    237e:	6f 93       	push	r22
    2380:	c7 01       	movw	r24, r14
    2382:	b6 01       	movw	r22, r12
    2384:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__fixsfsi>
    2388:	7f 93       	push	r23
    238a:	6f 93       	push	r22
    238c:	1f 93       	push	r17
    238e:	0f 93       	push	r16
    2390:	1f 92       	push	r1
    2392:	bf 92       	push	r11
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
		(int) f_pwm, (int) ((f_pwm - floorf(f_pwm)) * 1000.0f));
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 24 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  4 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    239c:	23 e0       	ldi	r18, 0x03	; 3
    239e:	31 e0       	ldi	r19, 0x01	; 1
    23a0:	4f e2       	ldi	r20, 0x2F	; 47
    23a2:	63 e9       	ldi	r22, 0x93	; 147
    23a4:	ce 01       	movw	r24, r28
    23a6:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>
		idx = 9;
    23aa:	89 e0       	ldi	r24, 0x09	; 9
    23ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3136>
		return 8;
    23b0:	8d b7       	in	r24, 0x3d	; 61
    23b2:	9e b7       	in	r25, 0x3e	; 62
    23b4:	44 96       	adiw	r24, 0x14	; 20
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	9e bf       	out	0x3e, r25	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	8d bf       	out	0x3d, r24	; 61
    23c0:	88 e0       	ldi	r24, 0x08	; 8
    23c2:	3c c0       	rjmp	.+120    	; 0x243c <lcd_show_new_data+0x870>
	}

	/* Slot 9 */
	if (g_showData.newPv && (idx <= 9)) {
    23c4:	95 ff       	sbrs	r25, 5
    23c6:	36 c0       	rjmp	.+108    	; 0x2434 <lcd_show_new_data+0x868>
    23c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <idx.3136>
    23cc:	9a 30       	cpi	r25, 0x0A	; 10
    23ce:	90 f5       	brcc	.+100    	; 0x2434 <lcd_show_new_data+0x868>
		g_showData.newPv = false;
    23d0:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <g_showData>
    23d4:	8f 7d       	andi	r24, 0xDF	; 223
    23d6:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <g_showData>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "%1d.%03d",
    23da:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <g_showData+0xd>
    23de:	8f 93       	push	r24
    23e0:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <g_showData+0xc>
    23e4:	8f 93       	push	r24
    23e6:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <g_showData+0x1e>
    23ea:	1f 92       	push	r1
    23ec:	8f 93       	push	r24
    23ee:	86 e8       	ldi	r24, 0x86	; 134
    23f0:	92 e0       	ldi	r25, 0x02	; 2
    23f2:	9f 93       	push	r25
    23f4:	8f 93       	push	r24
    23f6:	1f 92       	push	r1
    23f8:	80 e3       	ldi	r24, 0x30	; 48
    23fa:	8f 93       	push	r24
    23fc:	8d ed       	ldi	r24, 0xDD	; 221
    23fe:	93 e0       	ldi	r25, 0x03	; 3
    2400:	9f 93       	push	r25
    2402:	8f 93       	push	r24
    2404:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
    2408:	cf bf       	out	0x3f, r28	; 63
		g_showData.pv_int, g_showData.pv_frac1000);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT + 10 * LCD_SHOW_CLMN_WIDTH,  LCD_SHOW_LINE_TOP +  5 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    240a:	23 e0       	ldi	r18, 0x03	; 3
    240c:	31 e0       	ldi	r19, 0x01	; 1
    240e:	48 e3       	ldi	r20, 0x38	; 56
    2410:	6f e3       	ldi	r22, 0x3F	; 63
    2412:	8d ed       	ldi	r24, 0xDD	; 221
    2414:	93 e0       	ldi	r25, 0x03	; 3
    2416:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>
		idx = 10;
    241a:	8a e0       	ldi	r24, 0x0A	; 10
    241c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3136>
		return 9;
    2420:	8d b7       	in	r24, 0x3d	; 61
    2422:	9e b7       	in	r25, 0x3e	; 62
    2424:	0a 96       	adiw	r24, 0x0a	; 10
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	9e bf       	out	0x3e, r25	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	8d bf       	out	0x3d, r24	; 61
    2430:	89 e0       	ldi	r24, 0x09	; 9
    2432:	04 c0       	rjmp	.+8      	; 0x243c <lcd_show_new_data+0x870>
	}

	/* When no updates are due, turn back to first position */
	idx = 1;
    2434:	91 e0       	ldi	r25, 0x01	; 1
    2436:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <idx.3136>
    243a:	cf bf       	out	0x3f, r28	; 63

	cpu_irq_restore(flags);
	return 0;
}
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	1f 91       	pop	r17
    2442:	0f 91       	pop	r16
    2444:	ff 90       	pop	r15
    2446:	ef 90       	pop	r14
    2448:	df 90       	pop	r13
    244a:	cf 90       	pop	r12
    244c:	bf 90       	pop	r11
    244e:	af 90       	pop	r10
    2450:	9f 90       	pop	r9
    2452:	8f 90       	pop	r8
    2454:	7f 90       	pop	r7
    2456:	6f 90       	pop	r6
    2458:	5f 90       	pop	r5
    245a:	4f 90       	pop	r4
    245c:	3f 90       	pop	r3
    245e:	08 95       	ret

00002460 <lcd_animation_prepare>:
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), " L=%4d.%1d AD", (int) l, ((int) (l * 10.0f)) % 10);
	gfx_mono_draw_string(s_lcd_prepare_buf, 160, 95, &sysfont);
}

void lcd_animation_prepare(void)
{
    2460:	ef 92       	push	r14
    2462:	ff 92       	push	r15
    2464:	0f 93       	push	r16
    2466:	1f 93       	push	r17
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
	int idx;

	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
    246c:	83 ec       	ldi	r24, 0xC3	; 195
    246e:	9f ef       	ldi	r25, 0xFF	; 255
    2470:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <s_animation_train_origin+0x1>
    2474:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <s_animation_train_origin>
	s_animation_dx = 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <s_animation_dx>

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
			s_animation_train_left[  idx] = 0b11111000;

		} else if (idx == ANIMATION_TRAIN_BLANK_LEN - 1) {
			s_animation_train_left[  idx] = 0;

		} else if (!((idx - 16) % 11)) {
    2482:	8b e0       	ldi	r24, 0x0B	; 11
    2484:	e8 2e       	mov	r14, r24
    2486:	f1 2c       	mov	r15, r1
			s_animation_train_left[  idx] = 0b01000000;
    2488:	c0 e4       	ldi	r28, 0x40	; 64
			s_animation_train_left[++idx] = 0b01000000;
			s_animation_train_left[++idx] = 0b01000000;
			s_animation_train_left[++idx] = 0b11111000;
    248a:	48 ef       	ldi	r20, 0xF8	; 248
			s_animation_train_left[++idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11001000;
    248c:	d8 ec       	ldi	r29, 0xC8	; 200
			s_animation_train_left[  idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11011000;
		} else if (idx <  5) {
			s_animation_train_left[  idx] = 0b11011111;
		} else if (idx < 11) {
			s_animation_train_left[  idx] = 0b11011000;
    248e:	18 ed       	ldi	r17, 0xD8	; 216

		} else if (idx < 3) {
			s_animation_train_left[  idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11011000;
		} else if (idx <  5) {
			s_animation_train_left[  idx] = 0b11011111;
    2490:	0f ed       	ldi	r16, 0xDF	; 223
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
		if (!idx) {
    2492:	21 15       	cp	r18, r1
    2494:	31 05       	cpc	r19, r1
    2496:	19 f4       	brne	.+6      	; 0x249e <lcd_animation_prepare+0x3e>
			s_animation_train_left[idx] = 0;
    2498:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <s_animation_train_left>
    249c:	43 c0       	rjmp	.+134    	; 0x2524 <lcd_animation_prepare+0xc4>

		} else if (idx < 3) {
    249e:	23 30       	cpi	r18, 0x03	; 3
    24a0:	31 05       	cpc	r19, r1
    24a2:	5c f4       	brge	.+22     	; 0x24ba <lcd_animation_prepare+0x5a>
			s_animation_train_left[  idx] = 0b11111000;
    24a4:	f9 01       	movw	r30, r18
    24a6:	eb 56       	subi	r30, 0x6B	; 107
    24a8:	fc 4f       	sbci	r31, 0xFC	; 252
    24aa:	40 83       	st	Z, r20
			s_animation_train_left[++idx] = 0b11011000;
    24ac:	2f 5f       	subi	r18, 0xFF	; 255
    24ae:	3f 4f       	sbci	r19, 0xFF	; 255
    24b0:	f9 01       	movw	r30, r18
    24b2:	eb 56       	subi	r30, 0x6B	; 107
    24b4:	fc 4f       	sbci	r31, 0xFC	; 252
    24b6:	10 83       	st	Z, r17
    24b8:	35 c0       	rjmp	.+106    	; 0x2524 <lcd_animation_prepare+0xc4>
		} else if (idx <  5) {
    24ba:	25 30       	cpi	r18, 0x05	; 5
    24bc:	31 05       	cpc	r19, r1
    24be:	2c f4       	brge	.+10     	; 0x24ca <lcd_animation_prepare+0x6a>
			s_animation_train_left[  idx] = 0b11011111;
    24c0:	f9 01       	movw	r30, r18
    24c2:	eb 56       	subi	r30, 0x6B	; 107
    24c4:	fc 4f       	sbci	r31, 0xFC	; 252
    24c6:	00 83       	st	Z, r16
    24c8:	2d c0       	rjmp	.+90     	; 0x2524 <lcd_animation_prepare+0xc4>
		} else if (idx < 11) {
    24ca:	2b 30       	cpi	r18, 0x0B	; 11
    24cc:	31 05       	cpc	r19, r1
    24ce:	2c f4       	brge	.+10     	; 0x24da <lcd_animation_prepare+0x7a>
			s_animation_train_left[  idx] = 0b11011000;
    24d0:	f9 01       	movw	r30, r18
    24d2:	eb 56       	subi	r30, 0x6B	; 107
    24d4:	fc 4f       	sbci	r31, 0xFC	; 252
    24d6:	10 83       	st	Z, r17
    24d8:	25 c0       	rjmp	.+74     	; 0x2524 <lcd_animation_prepare+0xc4>
		} else if (idx < 16) {
    24da:	20 31       	cpi	r18, 0x10	; 16
    24dc:	31 05       	cpc	r19, r1
    24de:	e4 f0       	brlt	.+56     	; 0x2518 <lcd_animation_prepare+0xb8>
			s_animation_train_left[  idx] = 0b11111000;

		} else if (idx == ANIMATION_TRAIN_BLANK_LEN - 1) {
    24e0:	2c 33       	cpi	r18, 0x3C	; 60
    24e2:	31 05       	cpc	r19, r1
    24e4:	19 f4       	brne	.+6      	; 0x24ec <lcd_animation_prepare+0x8c>
			s_animation_train_left[  idx] = 0;
    24e6:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <s_animation_train_left+0x3c>
    24ea:	1c c0       	rjmp	.+56     	; 0x2524 <lcd_animation_prepare+0xc4>

		} else if (!((idx - 16) % 11)) {
    24ec:	c9 01       	movw	r24, r18
    24ee:	40 97       	sbiw	r24, 0x10	; 16
    24f0:	b7 01       	movw	r22, r14
    24f2:	0e 94 77 1d 	call	0x3aee	; 0x3aee <__divmodhi4>
    24f6:	f9 01       	movw	r30, r18
    24f8:	eb 56       	subi	r30, 0x6B	; 107
    24fa:	fc 4f       	sbci	r31, 0xFC	; 252
    24fc:	89 2b       	or	r24, r25
    24fe:	89 f4       	brne	.+34     	; 0x2522 <lcd_animation_prepare+0xc2>
			s_animation_train_left[  idx] = 0b01000000;
    2500:	c0 83       	st	Z, r28
			s_animation_train_left[++idx] = 0b01000000;
    2502:	c1 83       	std	Z+1, r28	; 0x01
			s_animation_train_left[++idx] = 0b01000000;
    2504:	c2 83       	std	Z+2, r28	; 0x02
			s_animation_train_left[++idx] = 0b11111000;
    2506:	43 83       	std	Z+3, r20	; 0x03
			s_animation_train_left[++idx] = 0b11111000;
    2508:	44 83       	std	Z+4, r20	; 0x04
			s_animation_train_left[++idx] = 0b11001000;
    250a:	d5 83       	std	Z+5, r29	; 0x05
			s_animation_train_left[++idx] = 0b11111000;
    250c:	46 83       	std	Z+6, r20	; 0x06
			s_animation_train_left[++idx] = 0b11111000;
    250e:	47 83       	std	Z+7, r20	; 0x07
			s_animation_train_left[++idx] = 0b11001000;
    2510:	d0 87       	std	Z+8, r29	; 0x08
			s_animation_train_left[++idx] = 0b11111000;
    2512:	41 87       	std	Z+9, r20	; 0x09
			s_animation_train_left[++idx] = 0b11111000;
    2514:	26 5f       	subi	r18, 0xF6	; 246
    2516:	3f 4f       	sbci	r19, 0xFF	; 255
    2518:	f9 01       	movw	r30, r18
    251a:	eb 56       	subi	r30, 0x6B	; 107
    251c:	fc 4f       	sbci	r31, 0xFC	; 252
    251e:	40 83       	st	Z, r20
    2520:	01 c0       	rjmp	.+2      	; 0x2524 <lcd_animation_prepare+0xc4>
		} else {
			s_animation_train_left[idx] = 0;
    2522:	10 82       	st	Z, r1
	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    2524:	2f 5f       	subi	r18, 0xFF	; 255
    2526:	3f 4f       	sbci	r19, 0xFF	; 255
    2528:	2d 33       	cpi	r18, 0x3D	; 61
    252a:	31 05       	cpc	r19, r1
    252c:	0c f4       	brge	.+2      	; 0x2530 <lcd_animation_prepare+0xd0>
    252e:	b1 cf       	rjmp	.-158    	; 0x2492 <lcd_animation_prepare+0x32>
    2530:	a5 e9       	ldi	r26, 0x95	; 149
    2532:	b3 e0       	ldi	r27, 0x03	; 3
    2534:	e5 e9       	ldi	r30, 0x95	; 149
    2536:	f3 e0       	ldi	r31, 0x03	; 3
			s_animation_train_left[idx] = 0;
		}
	}

	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
		s_animation_train_right[ANIMATION_TRAIN_BLANK_LEN - idx - 1] = s_animation_train_left[idx];		// x-mirror
    2538:	8d 91       	ld	r24, X+
    253a:	82 93       	st	-Z, r24
		} else {
			s_animation_train_left[idx] = 0;
		}
	}

	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    253c:	83 e0       	ldi	r24, 0x03	; 3
    253e:	e8 35       	cpi	r30, 0x58	; 88
    2540:	f8 07       	cpc	r31, r24
    2542:	d1 f7       	brne	.-12     	; 0x2538 <lcd_animation_prepare+0xd8>
		s_animation_train_right[ANIMATION_TRAIN_BLANK_LEN - idx - 1] = s_animation_train_left[idx];		// x-mirror
	}

	/* prepare free line for train */
	gfx_mono_generic_draw_filled_rect(0, (GFX_MONO_LCD_PAGES - 1) * GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_PIXEL_CLR);
    2544:	00 e0       	ldi	r16, 0x00	; 0
    2546:	28 e0       	ldi	r18, 0x08	; 8
    2548:	40 ef       	ldi	r20, 0xF0	; 240
    254a:	68 e7       	ldi	r22, 0x78	; 120
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	0e 94 76 04 	call	0x8ec	; 0x8ec <gfx_mono_generic_draw_filled_rect>
}
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	ff 90       	pop	r15
    255c:	ef 90       	pop	r14
    255e:	08 95       	ret

00002560 <lcd_animation_loop>:

void lcd_animation_loop(void)
{
    2560:	cf 92       	push	r12
    2562:	df 92       	push	r13
    2564:	ef 92       	push	r14
    2566:	ff 92       	push	r15
    2568:	0f 93       	push	r16
	if (s_animation_dx) {
    256a:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <s_animation_dx>
    256e:	88 23       	and	r24, r24
    2570:	09 f4       	brne	.+2      	; 0x2574 <lcd_animation_loop+0x14>
    2572:	80 c1       	rjmp	.+768    	; 0x2874 <lcd_animation_loop+0x314>
		float now = get_abs_time();
    2574:	e8 d5       	rcall	.+3024   	; 0x3146 <get_abs_time>
    2576:	6b 01       	movw	r12, r22
    2578:	7c 01       	movw	r14, r24

		if ((now - s_animation_time_last_train) >= 0.04f) {  // 25x per sec
    257a:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <s_animation_time_last_train>
    257e:	30 91 d3 03 	lds	r19, 0x03D3	; 0x8003d3 <s_animation_time_last_train+0x1>
    2582:	40 91 d4 03 	lds	r20, 0x03D4	; 0x8003d4 <s_animation_time_last_train+0x2>
    2586:	50 91 d5 03 	lds	r21, 0x03D5	; 0x8003d5 <s_animation_time_last_train+0x3>
    258a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__subsf3>
    258e:	2a e0       	ldi	r18, 0x0A	; 10
    2590:	37 ed       	ldi	r19, 0xD7	; 215
    2592:	43 e2       	ldi	r20, 0x23	; 35
    2594:	5d e3       	ldi	r21, 0x3D	; 61
    2596:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__gesf2>
    259a:	87 fd       	sbrc	r24, 7
    259c:	5b c0       	rjmp	.+182    	; 0x2654 <lcd_animation_loop+0xf4>
			s_animation_time_last_train = now;
    259e:	c0 92 d2 03 	sts	0x03D2, r12	; 0x8003d2 <s_animation_time_last_train>
    25a2:	d0 92 d3 03 	sts	0x03D3, r13	; 0x8003d3 <s_animation_time_last_train+0x1>
    25a6:	e0 92 d4 03 	sts	0x03D4, r14	; 0x8003d4 <s_animation_time_last_train+0x2>
    25aa:	f0 92 d5 03 	sts	0x03D5, r15	; 0x8003d5 <s_animation_time_last_train+0x3>
			s_animation_train_origin += s_animation_dx;
    25ae:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <s_animation_dx>
    25b2:	e0 91 db 03 	lds	r30, 0x03DB	; 0x8003db <s_animation_train_origin>
    25b6:	f0 91 dc 03 	lds	r31, 0x03DC	; 0x8003dc <s_animation_train_origin+0x1>
    25ba:	e8 0f       	add	r30, r24
    25bc:	f1 1d       	adc	r31, r1
    25be:	87 fd       	sbrc	r24, 7
    25c0:	fa 95       	dec	r31
    25c2:	f0 93 dc 03 	sts	0x03DC, r31	; 0x8003dc <s_animation_train_origin+0x1>
    25c6:	e0 93 db 03 	sts	0x03DB, r30	; 0x8003db <s_animation_train_origin>

			if (s_animation_train_origin <= (-10 - ANIMATION_TRAIN_BLANK_LEN)) {
    25ca:	ea 3b       	cpi	r30, 0xBA	; 186
    25cc:	8f ef       	ldi	r24, 0xFF	; 255
    25ce:	f8 07       	cpc	r31, r24
    25d0:	24 f4       	brge	.+8      	; 0x25da <lcd_animation_loop+0x7a>
				s_animation_dx = 1;
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <s_animation_dx>
    25d8:	06 c0       	rjmp	.+12     	; 0x25e6 <lcd_animation_loop+0x86>
			} else if (s_animation_train_origin >= (GFX_MONO_LCD_WIDTH + 10)) {
    25da:	ea 3f       	cpi	r30, 0xFA	; 250
    25dc:	f1 05       	cpc	r31, r1
    25de:	1c f0       	brlt	.+6      	; 0x25e6 <lcd_animation_loop+0x86>
				s_animation_dx = -1;
    25e0:	8f ef       	ldi	r24, 0xFF	; 255
    25e2:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <s_animation_dx>
			}

			if (s_animation_dx < 0) {
    25e6:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <s_animation_dx>
    25ea:	87 ff       	sbrs	r24, 7
    25ec:	1a c0       	rjmp	.+52     	; 0x2622 <lcd_animation_loop+0xc2>
				// Draw train left
				if (s_animation_train_origin >= 0 && s_animation_train_origin < GFX_MONO_LCD_WIDTH) {
    25ee:	e0 3f       	cpi	r30, 0xF0	; 240
    25f0:	f1 05       	cpc	r31, r1
    25f2:	40 f4       	brcc	.+16     	; 0x2604 <lcd_animation_loop+0xa4>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_left, GFX_MONO_LCD_PAGES - 1, s_animation_train_origin, ANIMATION_TRAIN_BLANK_LEN);				// full width
    25f4:	2d e3       	ldi	r18, 0x3D	; 61
    25f6:	4e 2f       	mov	r20, r30
    25f8:	6f e0       	ldi	r22, 0x0F	; 15
    25fa:	85 e9       	ldi	r24, 0x95	; 149
    25fc:	93 e0       	ldi	r25, 0x03	; 3
    25fe:	0e 94 df 05 	call	0xbbe	; 0xbbe <gfx_mono_lcd_uc1608_put_page>
    2602:	28 c0       	rjmp	.+80     	; 0x2654 <lcd_animation_loop+0xf4>
				} else if (-ANIMATION_TRAIN_BLANK_LEN < s_animation_train_origin && s_animation_train_origin < 0) {
    2604:	cf 01       	movw	r24, r30
    2606:	cc 96       	adiw	r24, 0x3c	; 60
    2608:	cc 97       	sbiw	r24, 0x3c	; 60
    260a:	20 f5       	brcc	.+72     	; 0x2654 <lcd_animation_loop+0xf4>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_left - s_animation_train_origin, GFX_MONO_LCD_PAGES - 1, 0, ANIMATION_TRAIN_BLANK_LEN + s_animation_train_origin);	// left: reduced width
    260c:	2d e3       	ldi	r18, 0x3D	; 61
    260e:	2e 0f       	add	r18, r30
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	6f e0       	ldi	r22, 0x0F	; 15
    2614:	85 e9       	ldi	r24, 0x95	; 149
    2616:	93 e0       	ldi	r25, 0x03	; 3
    2618:	8e 1b       	sub	r24, r30
    261a:	9f 0b       	sbc	r25, r31
    261c:	0e 94 df 05 	call	0xbbe	; 0xbbe <gfx_mono_lcd_uc1608_put_page>
    2620:	19 c0       	rjmp	.+50     	; 0x2654 <lcd_animation_loop+0xf4>
				}

				} else {
				// Draw train right
				if (s_animation_train_origin >= 0 && s_animation_train_origin < GFX_MONO_LCD_WIDTH) {
    2622:	e0 3f       	cpi	r30, 0xF0	; 240
    2624:	f1 05       	cpc	r31, r1
    2626:	40 f4       	brcc	.+16     	; 0x2638 <lcd_animation_loop+0xd8>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_right, GFX_MONO_LCD_PAGES - 1, s_animation_train_origin, ANIMATION_TRAIN_BLANK_LEN);				// full width
    2628:	2d e3       	ldi	r18, 0x3D	; 61
    262a:	4e 2f       	mov	r20, r30
    262c:	6f e0       	ldi	r22, 0x0F	; 15
    262e:	88 e5       	ldi	r24, 0x58	; 88
    2630:	93 e0       	ldi	r25, 0x03	; 3
    2632:	0e 94 df 05 	call	0xbbe	; 0xbbe <gfx_mono_lcd_uc1608_put_page>
    2636:	0e c0       	rjmp	.+28     	; 0x2654 <lcd_animation_loop+0xf4>
				} else if (-ANIMATION_TRAIN_BLANK_LEN < s_animation_train_origin && s_animation_train_origin < 0) {
    2638:	cf 01       	movw	r24, r30
    263a:	cc 96       	adiw	r24, 0x3c	; 60
    263c:	cc 97       	sbiw	r24, 0x3c	; 60
    263e:	50 f4       	brcc	.+20     	; 0x2654 <lcd_animation_loop+0xf4>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_right - s_animation_train_origin, GFX_MONO_LCD_PAGES - 1, 0, ANIMATION_TRAIN_BLANK_LEN + s_animation_train_origin);	// left: reduced width
    2640:	2d e3       	ldi	r18, 0x3D	; 61
    2642:	2e 0f       	add	r18, r30
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	6f e0       	ldi	r22, 0x0F	; 15
    2648:	88 e5       	ldi	r24, 0x58	; 88
    264a:	93 e0       	ldi	r25, 0x03	; 3
    264c:	8e 1b       	sub	r24, r30
    264e:	9f 0b       	sbc	r25, r31
    2650:	0e 94 df 05 	call	0xbbe	; 0xbbe <gfx_mono_lcd_uc1608_put_page>
				}
			}
		}

		if ((now - s_animation_time_last_temp) >= 0.50f) {  // 2x per sec
    2654:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <s_animation_time_last_temp>
    2658:	30 91 d7 03 	lds	r19, 0x03D7	; 0x8003d7 <s_animation_time_last_temp+0x1>
    265c:	40 91 d8 03 	lds	r20, 0x03D8	; 0x8003d8 <s_animation_time_last_temp+0x2>
    2660:	50 91 d9 03 	lds	r21, 0x03D9	; 0x8003d9 <s_animation_time_last_temp+0x3>
    2664:	c7 01       	movw	r24, r14
    2666:	b6 01       	movw	r22, r12
    2668:	b4 d7       	rcall	.+3944   	; 0x35d2 <__subsf3>
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e0       	ldi	r20, 0x00	; 0
    2670:	5f e3       	ldi	r21, 0x3F	; 63
    2672:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__gesf2>
    2676:	87 fd       	sbrc	r24, 7
    2678:	c4 c0       	rjmp	.+392    	; 0x2802 <lcd_animation_loop+0x2a2>
			s_animation_time_last_temp = now;
    267a:	c0 92 d6 03 	sts	0x03D6, r12	; 0x8003d6 <s_animation_time_last_temp>
    267e:	d0 92 d7 03 	sts	0x03D7, r13	; 0x8003d7 <s_animation_time_last_temp+0x1>
    2682:	e0 92 d8 03 	sts	0x03D8, r14	; 0x8003d8 <s_animation_time_last_temp+0x2>
    2686:	f0 92 d9 03 	sts	0x03D9, r15	; 0x8003d9 <s_animation_time_last_temp+0x3>
			s_task();
    268a:	a8 d5       	rcall	.+2896   	; 0x31dc <s_task>
static void s_lcd_test_temp(void)
{
	static float t_last = 0.0f;
	float t;

	irqflags_t flags = cpu_irq_save();
    268c:	a5 d8       	rcall	.-3766   	; 0x17d8 <cpu_irq_save>
	t = g_temp;
    268e:	c0 90 5d 04 	lds	r12, 0x045D	; 0x80045d <g_temp>
    2692:	d0 90 5e 04 	lds	r13, 0x045E	; 0x80045e <g_temp+0x1>
    2696:	e0 90 5f 04 	lds	r14, 0x045F	; 0x80045f <g_temp+0x2>
    269a:	f0 90 60 04 	lds	r15, 0x0460	; 0x800460 <g_temp+0x3>
    269e:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	if (t < 0.f) {
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	a9 01       	movw	r20, r18
    26a6:	c7 01       	movw	r24, r14
    26a8:	b6 01       	movw	r22, r12
    26aa:	f8 d7       	rcall	.+4080   	; 0x369c <__cmpsf2>
    26ac:	87 ff       	sbrs	r24, 7
    26ae:	03 c0       	rjmp	.+6      	; 0x26b6 <lcd_animation_loop+0x156>
		t = 0.f;
    26b0:	c1 2c       	mov	r12, r1
    26b2:	d1 2c       	mov	r13, r1
    26b4:	76 01       	movw	r14, r12
	}

	if (fabsf(t - t_last) < 0.01f) {
    26b6:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <t_last.3157>
    26ba:	30 91 54 03 	lds	r19, 0x0354	; 0x800354 <t_last.3157+0x1>
    26be:	40 91 55 03 	lds	r20, 0x0355	; 0x800355 <t_last.3157+0x2>
    26c2:	50 91 56 03 	lds	r21, 0x0356	; 0x800356 <t_last.3157+0x3>
    26c6:	c7 01       	movw	r24, r14
    26c8:	b6 01       	movw	r22, r12
    26ca:	83 d7       	rcall	.+3846   	; 0x35d2 <__subsf3>
    26cc:	9f 77       	andi	r25, 0x7F	; 127
    26ce:	2a e0       	ldi	r18, 0x0A	; 10
    26d0:	37 ed       	ldi	r19, 0xD7	; 215
    26d2:	43 e2       	ldi	r20, 0x23	; 35
    26d4:	5c e3       	ldi	r21, 0x3C	; 60
    26d6:	e2 d7       	rcall	.+4036   	; 0x369c <__cmpsf2>
    26d8:	87 fd       	sbrc	r24, 7
    26da:	3c c0       	rjmp	.+120    	; 0x2754 <lcd_animation_loop+0x1f4>
		return;
	}
	t_last = t;
    26dc:	c0 92 53 03 	sts	0x0353, r12	; 0x800353 <t_last.3157>
    26e0:	d0 92 54 03 	sts	0x0354, r13	; 0x800354 <t_last.3157+0x1>
    26e4:	e0 92 55 03 	sts	0x0355, r14	; 0x800355 <t_last.3157+0x2>
    26e8:	f0 92 56 03 	sts	0x0356, r15	; 0x800356 <t_last.3157+0x3>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), " T=  %2d.%02d^C ", (int) t, ((int) (t * 100.0f)) % 100);
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	48 ec       	ldi	r20, 0xC8	; 200
    26f2:	52 e4       	ldi	r21, 0x42	; 66
    26f4:	c7 01       	movw	r24, r14
    26f6:	b6 01       	movw	r22, r12
    26f8:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__mulsf3>
    26fc:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__fixsfsi>
    2700:	cb 01       	movw	r24, r22
    2702:	64 e6       	ldi	r22, 0x64	; 100
    2704:	70 e0       	ldi	r23, 0x00	; 0
    2706:	0e 94 77 1d 	call	0x3aee	; 0x3aee <__divmodhi4>
    270a:	9f 93       	push	r25
    270c:	8f 93       	push	r24
    270e:	c7 01       	movw	r24, r14
    2710:	b6 01       	movw	r22, r12
    2712:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__fixsfsi>
    2716:	7f 93       	push	r23
    2718:	6f 93       	push	r22
    271a:	82 ef       	ldi	r24, 0xF2	; 242
    271c:	92 e0       	ldi	r25, 0x02	; 2
    271e:	9f 93       	push	r25
    2720:	8f 93       	push	r24
    2722:	1f 92       	push	r1
    2724:	80 e3       	ldi	r24, 0x30	; 48
    2726:	8f 93       	push	r24
    2728:	8d ed       	ldi	r24, 0xDD	; 221
    272a:	93 e0       	ldi	r25, 0x03	; 3
    272c:	9f 93       	push	r25
    272e:	8f 93       	push	r24
    2730:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 160, 105, &sysfont);
    2734:	23 e0       	ldi	r18, 0x03	; 3
    2736:	31 e0       	ldi	r19, 0x01	; 1
    2738:	49 e6       	ldi	r20, 0x69	; 105
    273a:	60 ea       	ldi	r22, 0xA0	; 160
    273c:	8d ed       	ldi	r24, 0xDD	; 221
    273e:	93 e0       	ldi	r25, 0x03	; 3
    2740:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>
    2744:	8d b7       	in	r24, 0x3d	; 61
    2746:	9e b7       	in	r25, 0x3e	; 62
    2748:	0a 96       	adiw	r24, 0x0a	; 10
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	9e bf       	out	0x3e, r25	; 62
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	8d bf       	out	0x3d, r24	; 61
static void s_lcd_test_light(void)
{
	static float l_last = 0.0f;
	float l;

	irqflags_t flags = cpu_irq_save();
    2754:	41 d8       	rcall	.-3966   	; 0x17d8 <cpu_irq_save>
	l = g_adc_light;
    2756:	c0 90 65 04 	lds	r12, 0x0465	; 0x800465 <g_adc_light>
    275a:	d0 90 66 04 	lds	r13, 0x0466	; 0x800466 <g_adc_light+0x1>
    275e:	e0 90 67 04 	lds	r14, 0x0467	; 0x800467 <g_adc_light+0x2>
    2762:	f0 90 68 04 	lds	r15, 0x0468	; 0x800468 <g_adc_light+0x3>
    2766:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	if (fabsf(l - l_last) < 0.1f) {
    2768:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <l_last.3163>
    276c:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <l_last.3163+0x1>
    2770:	40 91 51 03 	lds	r20, 0x0351	; 0x800351 <l_last.3163+0x2>
    2774:	50 91 52 03 	lds	r21, 0x0352	; 0x800352 <l_last.3163+0x3>
    2778:	c7 01       	movw	r24, r14
    277a:	b6 01       	movw	r22, r12
    277c:	2a d7       	rcall	.+3668   	; 0x35d2 <__subsf3>
    277e:	9f 77       	andi	r25, 0x7F	; 127
    2780:	2d ec       	ldi	r18, 0xCD	; 205
    2782:	3c ec       	ldi	r19, 0xCC	; 204
    2784:	4c ec       	ldi	r20, 0xCC	; 204
    2786:	5d e3       	ldi	r21, 0x3D	; 61
    2788:	89 d7       	rcall	.+3858   	; 0x369c <__cmpsf2>
    278a:	87 fd       	sbrc	r24, 7
    278c:	3a c0       	rjmp	.+116    	; 0x2802 <lcd_animation_loop+0x2a2>
		return;
	}
	l_last = l;
    278e:	c0 92 4f 03 	sts	0x034F, r12	; 0x80034f <l_last.3163>
    2792:	d0 92 50 03 	sts	0x0350, r13	; 0x800350 <l_last.3163+0x1>
    2796:	e0 92 51 03 	sts	0x0351, r14	; 0x800351 <l_last.3163+0x2>
    279a:	f0 92 52 03 	sts	0x0352, r15	; 0x800352 <l_last.3163+0x3>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), " L=%4d.%1d AD", (int) l, ((int) (l * 10.0f)) % 10);
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e2       	ldi	r20, 0x20	; 32
    27a4:	51 e4       	ldi	r21, 0x41	; 65
    27a6:	c7 01       	movw	r24, r14
    27a8:	b6 01       	movw	r22, r12
    27aa:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <__mulsf3>
    27ae:	e2 d7       	rcall	.+4036   	; 0x3774 <__fixsfsi>
    27b0:	cb 01       	movw	r24, r22
    27b2:	6a e0       	ldi	r22, 0x0A	; 10
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	0e 94 77 1d 	call	0x3aee	; 0x3aee <__divmodhi4>
    27ba:	9f 93       	push	r25
    27bc:	8f 93       	push	r24
    27be:	c7 01       	movw	r24, r14
    27c0:	b6 01       	movw	r22, r12
    27c2:	d8 d7       	rcall	.+4016   	; 0x3774 <__fixsfsi>
    27c4:	7f 93       	push	r23
    27c6:	6f 93       	push	r22
    27c8:	83 e0       	ldi	r24, 0x03	; 3
    27ca:	93 e0       	ldi	r25, 0x03	; 3
    27cc:	9f 93       	push	r25
    27ce:	8f 93       	push	r24
    27d0:	1f 92       	push	r1
    27d2:	80 e3       	ldi	r24, 0x30	; 48
    27d4:	8f 93       	push	r24
    27d6:	8d ed       	ldi	r24, 0xDD	; 221
    27d8:	93 e0       	ldi	r25, 0x03	; 3
    27da:	9f 93       	push	r25
    27dc:	8f 93       	push	r24
    27de:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 160, 95, &sysfont);
    27e2:	23 e0       	ldi	r18, 0x03	; 3
    27e4:	31 e0       	ldi	r19, 0x01	; 1
    27e6:	4f e5       	ldi	r20, 0x5F	; 95
    27e8:	60 ea       	ldi	r22, 0xA0	; 160
    27ea:	8d ed       	ldi	r24, 0xDD	; 221
    27ec:	93 e0       	ldi	r25, 0x03	; 3
    27ee:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>
    27f2:	8d b7       	in	r24, 0x3d	; 61
    27f4:	9e b7       	in	r25, 0x3e	; 62
    27f6:	0a 96       	adiw	r24, 0x0a	; 10
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	9e bf       	out	0x3e, r25	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	8d bf       	out	0x3d, r24	; 61
	const int w = GFX_MONO_LCD_WIDTH;

	static int loop = 0;
	static uint8_t sw = 2;

	if (loop++ < h) {
    2802:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <loop.3148>
    2806:	30 91 4e 03 	lds	r19, 0x034E	; 0x80034e <loop.3148+0x1>
    280a:	f9 01       	movw	r30, r18
    280c:	31 96       	adiw	r30, 0x01	; 1
    280e:	f0 93 4e 03 	sts	0x034E, r31	; 0x80034e <loop.3148+0x1>
    2812:	e0 93 4d 03 	sts	0x034D, r30	; 0x80034d <loop.3148>
    2816:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    281a:	22 31       	cpi	r18, 0x12	; 18
    281c:	31 05       	cpc	r19, r1
    281e:	6c f4       	brge	.+26     	; 0x283a <lcd_animation_loop+0x2da>
		uint8_t y11 = oy + loop;
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);
    2820:	63 e0       	ldi	r22, 0x03	; 3
    2822:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__udivmodqi4>
	static int loop = 0;
	static uint8_t sw = 2;

	if (loop++ < h) {
		uint8_t y11 = oy + loop;
		uint8_t y12 = oy + h - loop - 1;
    2826:	2b e1       	ldi	r18, 0x1B	; 27
    2828:	2e 1b       	sub	r18, r30

	static int loop = 0;
	static uint8_t sw = 2;

	if (loop++ < h) {
		uint8_t y11 = oy + loop;
    282a:	6a e0       	ldi	r22, 0x0A	; 10
    282c:	6e 0f       	add	r22, r30
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);
    282e:	09 2f       	mov	r16, r25
    2830:	4f ee       	ldi	r20, 0xEF	; 239
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gfx_mono_generic_draw_line>
    2838:	1d c0       	rjmp	.+58     	; 0x2874 <lcd_animation_loop+0x314>

	} else if (loop < (h + w)) {
    283a:	e2 30       	cpi	r30, 0x02	; 2
    283c:	91 e0       	ldi	r25, 0x01	; 1
    283e:	f9 07       	cpc	r31, r25
    2840:	6c f4       	brge	.+26     	; 0x285c <lcd_animation_loop+0x2fc>
		uint8_t x21 = (loop - h);
		uint8_t x22 = w - (loop - h) - 1;
		gfx_mono_generic_draw_line (x21, oy + h - 1, x22, oy, sw % 3);
    2842:	63 e0       	ldi	r22, 0x03	; 3
    2844:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__udivmodqi4>
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);

	} else if (loop < (h + w)) {
		uint8_t x21 = (loop - h);
		uint8_t x22 = w - (loop - h) - 1;
    2848:	41 e0       	ldi	r20, 0x01	; 1
    284a:	4e 1b       	sub	r20, r30
		gfx_mono_generic_draw_line (x21, oy + h - 1, x22, oy, sw % 3);
    284c:	09 2f       	mov	r16, r25
    284e:	2a e0       	ldi	r18, 0x0A	; 10
    2850:	6b e1       	ldi	r22, 0x1B	; 27
    2852:	8e ee       	ldi	r24, 0xEE	; 238
    2854:	8e 0f       	add	r24, r30
    2856:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gfx_mono_generic_draw_line>
    285a:	0c c0       	rjmp	.+24     	; 0x2874 <lcd_animation_loop+0x314>

	} else {
		loop = 0;
    285c:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <loop.3148+0x1>
    2860:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <loop.3148>
		if (++sw >= 3) {
    2864:	8f 5f       	subi	r24, 0xFF	; 255
    2866:	83 30       	cpi	r24, 0x03	; 3
    2868:	18 f4       	brcc	.+6      	; 0x2870 <lcd_animation_loop+0x310>
    286a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    286e:	02 c0       	rjmp	.+4      	; 0x2874 <lcd_animation_loop+0x314>
			sw = 0;
    2870:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			s_lcd_test_light();
		}

		s_lcd_test_lines();  // Every cycle
	}
}
    2874:	0f 91       	pop	r16
    2876:	ff 90       	pop	r15
    2878:	ef 90       	pop	r14
    287a:	df 90       	pop	r13
    287c:	cf 90       	pop	r12
    287e:	08 95       	ret

00002880 <lcd_test>:

void lcd_test(uint8_t pattern_bm)
{
    2880:	ef 92       	push	r14
    2882:	ff 92       	push	r15
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	c8 2f       	mov	r28, r24
	if (pattern_bm & (1 << 0)) {
    288c:	80 fd       	sbrc	r24, 0
    288e:	03 c0       	rjmp	.+6      	; 0x2896 <lcd_test+0x16>
		for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
			lcd_bus_write_ram(i);
		}
	}

	if (pattern_bm & (1 << 1)) {
    2890:	c1 ff       	sbrs	r28, 1
    2892:	25 c0       	rjmp	.+74     	; 0x28de <lcd_test+0x5e>
    2894:	08 c0       	rjmp	.+16     	; 0x28a6 <lcd_test+0x26>
    2896:	10 e0       	ldi	r17, 0x00	; 0
void lcd_test(uint8_t pattern_bm)
{
	if (pattern_bm & (1 << 0)) {
		// TEST 1
		for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
			lcd_bus_write_ram(i);
    2898:	81 2f       	mov	r24, r17
    289a:	0e 94 42 0c 	call	0x1884	; 0x1884 <lcd_bus_write_ram>
    289e:	1f 5f       	subi	r17, 0xFF	; 255

void lcd_test(uint8_t pattern_bm)
{
	if (pattern_bm & (1 << 0)) {
		// TEST 1
		for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
    28a0:	10 3f       	cpi	r17, 0xF0	; 240
    28a2:	d1 f7       	brne	.-12     	; 0x2898 <lcd_test+0x18>
    28a4:	f5 cf       	rjmp	.-22     	; 0x2890 <lcd_test+0x10>
		}
	}

	if (pattern_bm & (1 << 1)) {
		// TEST 2
		lcd_page_set(2);
    28a6:	82 e0       	ldi	r24, 0x02	; 2
    28a8:	0f d8       	rcall	.-4066   	; 0x18c8 <lcd_page_set>
		lcd_cr();
    28aa:	24 d8       	rcall	.-4024   	; 0x18f4 <lcd_cr>
		for (int i = 0, pos = 231; i < GFX_MONO_LCD_WIDTH; ++i, ++pos) {
    28ac:	00 e0       	ldi	r16, 0x00	; 0
    28ae:	10 e0       	ldi	r17, 0x00	; 0
			if (!(i % 7)) {
    28b0:	87 e0       	ldi	r24, 0x07	; 7
    28b2:	e8 2e       	mov	r14, r24
    28b4:	f1 2c       	mov	r15, r1
    28b6:	c8 01       	movw	r24, r16
    28b8:	b7 01       	movw	r22, r14
    28ba:	0e 94 77 1d 	call	0x3aee	; 0x3aee <__divmodhi4>
    28be:	89 2b       	or	r24, r25
    28c0:	19 f4       	brne	.+6      	; 0x28c8 <lcd_test+0x48>
				lcd_bus_write_ram(0);
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	0e 94 42 0c 	call	0x1884	; 0x1884 <lcd_bus_write_ram>
    28c8:	f8 01       	movw	r30, r16
    28ca:	e8 51       	subi	r30, 0x18	; 24
    28cc:	fc 4f       	sbci	r31, 0xFC	; 252
			}
			lcd_bus_write_ram(PROGMEM_READ_BYTE(&(sysfont_glyphs[pos])));
    28ce:	84 91       	lpm	r24, Z
    28d0:	0e 94 42 0c 	call	0x1884	; 0x1884 <lcd_bus_write_ram>

	if (pattern_bm & (1 << 1)) {
		// TEST 2
		lcd_page_set(2);
		lcd_cr();
		for (int i = 0, pos = 231; i < GFX_MONO_LCD_WIDTH; ++i, ++pos) {
    28d4:	0f 5f       	subi	r16, 0xFF	; 255
    28d6:	1f 4f       	sbci	r17, 0xFF	; 255
    28d8:	00 3f       	cpi	r16, 0xF0	; 240
    28da:	11 05       	cpc	r17, r1
    28dc:	61 f7       	brne	.-40     	; 0x28b6 <lcd_test+0x36>
			}
			lcd_bus_write_ram(PROGMEM_READ_BYTE(&(sysfont_glyphs[pos])));
		}
	}

	if (pattern_bm & (1 << 2)) {
    28de:	c2 ff       	sbrs	r28, 2
    28e0:	2d c0       	rjmp	.+90     	; 0x293c <lcd_test+0xbc>
		// TEST 3
		gfx_mono_draw_pixel(4 + 0, 40 + 0, GFX_PIXEL_SET);
    28e2:	41 e0       	ldi	r20, 0x01	; 1
    28e4:	68 e2       	ldi	r22, 0x28	; 40
    28e6:	84 e0       	ldi	r24, 0x04	; 4
    28e8:	0e 94 4c 06 	call	0xc98	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 1, 40 + 1, GFX_PIXEL_SET);
    28ec:	41 e0       	ldi	r20, 0x01	; 1
    28ee:	69 e2       	ldi	r22, 0x29	; 41
    28f0:	85 e0       	ldi	r24, 0x05	; 5
    28f2:	0e 94 4c 06 	call	0xc98	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 2, GFX_PIXEL_SET);
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	6a e2       	ldi	r22, 0x2A	; 42
    28fa:	86 e0       	ldi	r24, 0x06	; 6
    28fc:	0e 94 4c 06 	call	0xc98	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 3, 40 + 3, GFX_PIXEL_SET);
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	6b e2       	ldi	r22, 0x2B	; 43
    2904:	87 e0       	ldi	r24, 0x07	; 7
    2906:	0e 94 4c 06 	call	0xc98	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 4, GFX_PIXEL_SET);
    290a:	41 e0       	ldi	r20, 0x01	; 1
    290c:	6c e2       	ldi	r22, 0x2C	; 44
    290e:	86 e0       	ldi	r24, 0x06	; 6
    2910:	0e 94 4c 06 	call	0xc98	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 1, 40 + 5, GFX_PIXEL_SET);
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	6d e2       	ldi	r22, 0x2D	; 45
    2918:	85 e0       	ldi	r24, 0x05	; 5
    291a:	0e 94 4c 06 	call	0xc98	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 6, GFX_PIXEL_SET);
    291e:	41 e0       	ldi	r20, 0x01	; 1
    2920:	6e e2       	ldi	r22, 0x2E	; 46
    2922:	86 e0       	ldi	r24, 0x06	; 6
    2924:	0e 94 4c 06 	call	0xc98	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 3, 40 + 7, GFX_PIXEL_SET);
    2928:	41 e0       	ldi	r20, 0x01	; 1
    292a:	6f e2       	ldi	r22, 0x2F	; 47
    292c:	87 e0       	ldi	r24, 0x07	; 7
    292e:	0e 94 4c 06 	call	0xc98	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 4, 40 + 8, GFX_PIXEL_SET);
    2932:	41 e0       	ldi	r20, 0x01	; 1
    2934:	60 e3       	ldi	r22, 0x30	; 48
    2936:	88 e0       	ldi	r24, 0x08	; 8
    2938:	0e 94 4c 06 	call	0xc98	; 0xc98 <gfx_mono_lcd_uc1608_draw_pixel>
	}

	if (pattern_bm & (1 << 3)) {
    293c:	c3 ff       	sbrs	r28, 3
    293e:	07 c0       	rjmp	.+14     	; 0x294e <lcd_test+0xce>
		// TEST 4
		gfx_mono_generic_draw_line (0, 16, 239, 31, GFX_PIXEL_SET);
    2940:	01 e0       	ldi	r16, 0x01	; 1
    2942:	2f e1       	ldi	r18, 0x1F	; 31
    2944:	4f ee       	ldi	r20, 0xEF	; 239
    2946:	60 e1       	ldi	r22, 0x10	; 16
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <gfx_mono_generic_draw_line>
	}

	if (pattern_bm & (1 << 4)) {
    294e:	c4 ff       	sbrs	r28, 4
    2950:	0d c0       	rjmp	.+26     	; 0x296c <lcd_test+0xec>
		// TEST 5
		gfx_mono_generic_draw_rect(        70, 48, 40, 40, GFX_PIXEL_SET);
    2952:	01 e0       	ldi	r16, 0x01	; 1
    2954:	28 e2       	ldi	r18, 0x28	; 40
    2956:	48 e2       	ldi	r20, 0x28	; 40
    2958:	60 e3       	ldi	r22, 0x30	; 48
    295a:	86 e4       	ldi	r24, 0x46	; 70
    295c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <gfx_mono_generic_draw_rect>
		gfx_mono_generic_draw_filled_rect(170, 48, 40, 40, GFX_PIXEL_SET);
    2960:	28 e2       	ldi	r18, 0x28	; 40
    2962:	48 e2       	ldi	r20, 0x28	; 40
    2964:	60 e3       	ldi	r22, 0x30	; 48
    2966:	8a ea       	ldi	r24, 0xAA	; 170
    2968:	0e 94 76 04 	call	0x8ec	; 0x8ec <gfx_mono_generic_draw_filled_rect>
	}

	if (pattern_bm & (1 << 5)) {
    296c:	c5 ff       	sbrs	r28, 5
    296e:	0d c0       	rjmp	.+26     	; 0x298a <lcd_test+0x10a>
		// TEST 6
		gfx_mono_generic_draw_circle(       10, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    2970:	0f ef       	ldi	r16, 0xFF	; 255
    2972:	21 e0       	ldi	r18, 0x01	; 1
    2974:	4a e0       	ldi	r20, 0x0A	; 10
    2976:	60 e5       	ldi	r22, 0x50	; 80
    2978:	8a e0       	ldi	r24, 0x0A	; 10
    297a:	0e 94 90 04 	call	0x920	; 0x920 <gfx_mono_generic_draw_circle>
		gfx_mono_generic_draw_filled_circle(40, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    297e:	21 e0       	ldi	r18, 0x01	; 1
    2980:	4a e0       	ldi	r20, 0x0A	; 10
    2982:	60 e5       	ldi	r22, 0x50	; 80
    2984:	88 e2       	ldi	r24, 0x28	; 40
    2986:	0e 94 40 05 	call	0xa80	; 0xa80 <gfx_mono_generic_draw_filled_circle>
	}

	if (pattern_bm & (1 << 6)) {
    298a:	c6 ff       	sbrs	r28, 6
    298c:	08 c0       	rjmp	.+16     	; 0x299e <lcd_test+0x11e>
		// TEST 7
		gfx_mono_draw_string("DF4IAH Smart-LCD", 70, 32, &sysfont);
    298e:	23 e0       	ldi	r18, 0x03	; 3
    2990:	31 e0       	ldi	r19, 0x01	; 1
    2992:	40 e2       	ldi	r20, 0x20	; 32
    2994:	66 e4       	ldi	r22, 0x46	; 70
    2996:	81 e1       	ldi	r24, 0x11	; 17
    2998:	93 e0       	ldi	r25, 0x03	; 3
    299a:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>
	}

	if (pattern_bm & (1 << 7)) {
    299e:	c7 ff       	sbrs	r28, 7
    29a0:	0c c0       	rjmp	.+24     	; 0x29ba <lcd_test+0x13a>
		// TEST 8
		lcd_animation_prepare();
    29a2:	5e dd       	rcall	.-1348   	; 0x2460 <lcd_animation_prepare>

		g_status.doAnimation = true;
    29a4:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <g_status>
    29a8:	81 60       	ori	r24, 0x01	; 1
    29aa:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <g_status>
		lcd_animation_loop();
	}
}
    29ae:	cf 91       	pop	r28
    29b0:	1f 91       	pop	r17
    29b2:	0f 91       	pop	r16
    29b4:	ff 90       	pop	r15
    29b6:	ef 90       	pop	r14
	if (pattern_bm & (1 << 7)) {
		// TEST 8
		lcd_animation_prepare();

		g_status.doAnimation = true;
		lcd_animation_loop();
    29b8:	d3 cd       	rjmp	.-1114   	; 0x2560 <lcd_animation_loop>
	}
}
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	ff 90       	pop	r15
    29c2:	ef 90       	pop	r14
    29c4:	08 95       	ret

000029c6 <isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100>:
/* ISR - interrupt disabled functions called within the TWI interrupt handling */

void isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100(uint8_t clk_state, uint16_t phaseVolt1000, int16_t phaseDeg100)
{
	// interrupt is already disabled, here
	if ((g_showData.clkState_clk_state     != clk_state    )  ||
    29c6:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <g_showData+0x16>
    29ca:	98 13       	cpse	r25, r24
    29cc:	0e c0       	rjmp	.+28     	; 0x29ea <isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100+0x24>
    29ce:	20 91 2e 04 	lds	r18, 0x042E	; 0x80042e <g_showData+0x2>
    29d2:	30 91 2f 04 	lds	r19, 0x042F	; 0x80042f <g_showData+0x3>
    29d6:	26 17       	cp	r18, r22
    29d8:	37 07       	cpc	r19, r23
    29da:	39 f4       	brne	.+14     	; 0x29ea <isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100+0x24>
		(g_showData.clkState_phaseVolt1000 != phaseVolt1000)  ||
    29dc:	20 91 30 04 	lds	r18, 0x0430	; 0x800430 <g_showData+0x4>
    29e0:	30 91 31 04 	lds	r19, 0x0431	; 0x800431 <g_showData+0x5>
    29e4:	24 17       	cp	r18, r20
    29e6:	35 07       	cpc	r19, r21
    29e8:	79 f0       	breq	.+30     	; 0x2a08 <isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100+0x42>
		(g_showData.clkState_phaseDeg100   != phaseDeg100  )) {
		g_showData.newClkState            = true;
    29ea:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <g_showData>
    29ee:	91 60       	ori	r25, 0x01	; 1
    29f0:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <g_showData>
		g_showData.clkState_clk_state     = clk_state;
    29f4:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <g_showData+0x16>
		g_showData.clkState_phaseVolt1000 = phaseVolt1000;
    29f8:	70 93 2f 04 	sts	0x042F, r23	; 0x80042f <g_showData+0x3>
    29fc:	60 93 2e 04 	sts	0x042E, r22	; 0x80042e <g_showData+0x2>
		g_showData.clkState_phaseDeg100   = phaseDeg100;
    2a00:	50 93 31 04 	sts	0x0431, r21	; 0x800431 <g_showData+0x5>
    2a04:	40 93 30 04 	sts	0x0430, r20	; 0x800430 <g_showData+0x4>
    2a08:	08 95       	ret

00002a0a <isr_lcd_10mhz_ref_osc_show_date>:
}

void isr_lcd_10mhz_ref_osc_show_date(uint16_t year, int8_t month, uint8_t day)
{
	// interrupt is already disabled, here
	if (g_showData.date_year != year ||
    2a0a:	20 91 32 04 	lds	r18, 0x0432	; 0x800432 <g_showData+0x6>
    2a0e:	30 91 33 04 	lds	r19, 0x0433	; 0x800433 <g_showData+0x7>
    2a12:	28 17       	cp	r18, r24
    2a14:	39 07       	cpc	r19, r25
    2a16:	71 f4       	brne	.+28     	; 0x2a34 <isr_lcd_10mhz_ref_osc_show_date+0x2a>
			g_showData.date_month != month ||
    2a18:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <g_showData+0x17>
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	e6 2f       	mov	r30, r22
    2a20:	06 2e       	mov	r0, r22
    2a22:	00 0c       	add	r0, r0
    2a24:	ff 0b       	sbc	r31, r31
}

void isr_lcd_10mhz_ref_osc_show_date(uint16_t year, int8_t month, uint8_t day)
{
	// interrupt is already disabled, here
	if (g_showData.date_year != year ||
    2a26:	2e 17       	cp	r18, r30
    2a28:	3f 07       	cpc	r19, r31
    2a2a:	21 f4       	brne	.+8      	; 0x2a34 <isr_lcd_10mhz_ref_osc_show_date+0x2a>
			g_showData.date_month != month ||
    2a2c:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <g_showData+0x18>
    2a30:	24 17       	cp	r18, r20
    2a32:	69 f0       	breq	.+26     	; 0x2a4e <isr_lcd_10mhz_ref_osc_show_date+0x44>
			g_showData.date_day != day) {
		g_showData.newDate = true;
    2a34:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <g_showData>
    2a38:	22 60       	ori	r18, 0x02	; 2
    2a3a:	20 93 2c 04 	sts	0x042C, r18	; 0x80042c <g_showData>
		g_showData.date_year = year;
    2a3e:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <g_showData+0x7>
    2a42:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <g_showData+0x6>
		g_showData.date_month = month;
    2a46:	60 93 43 04 	sts	0x0443, r22	; 0x800443 <g_showData+0x17>
		g_showData.date_day = day;
    2a4a:	40 93 44 04 	sts	0x0444, r20	; 0x800444 <g_showData+0x18>
    2a4e:	08 95       	ret

00002a50 <isr_lcd_10mhz_ref_osc_show_time>:
}

void isr_lcd_10mhz_ref_osc_show_time(uint8_t hour, int8_t minute, uint8_t second)
{
	// interrupt is already disabled, here
	if (g_showData.time_hour != hour ||
    2a50:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <g_showData+0x19>
    2a54:	98 13       	cpse	r25, r24
    2a56:	0e c0       	rjmp	.+28     	; 0x2a74 <isr_lcd_10mhz_ref_osc_show_time+0x24>
			g_showData.time_minute != minute ||
    2a58:	20 91 46 04 	lds	r18, 0x0446	; 0x800446 <g_showData+0x1a>
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	e6 2f       	mov	r30, r22
    2a60:	06 2e       	mov	r0, r22
    2a62:	00 0c       	add	r0, r0
    2a64:	ff 0b       	sbc	r31, r31
}

void isr_lcd_10mhz_ref_osc_show_time(uint8_t hour, int8_t minute, uint8_t second)
{
	// interrupt is already disabled, here
	if (g_showData.time_hour != hour ||
    2a66:	2e 17       	cp	r18, r30
    2a68:	3f 07       	cpc	r19, r31
    2a6a:	21 f4       	brne	.+8      	; 0x2a74 <isr_lcd_10mhz_ref_osc_show_time+0x24>
			g_showData.time_minute != minute ||
    2a6c:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <g_showData+0x1b>
    2a70:	94 17       	cp	r25, r20
    2a72:	59 f0       	breq	.+22     	; 0x2a8a <isr_lcd_10mhz_ref_osc_show_time+0x3a>
			g_showData.time_second != second) {
		g_showData.newTime = true;
    2a74:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <g_showData>
    2a78:	94 60       	ori	r25, 0x04	; 4
    2a7a:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <g_showData>
		g_showData.time_hour = hour;
    2a7e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <g_showData+0x19>
		g_showData.time_minute = minute;
    2a82:	60 93 46 04 	sts	0x0446, r22	; 0x800446 <g_showData+0x1a>
		g_showData.time_second = second;
    2a86:	40 93 47 04 	sts	0x0447, r20	; 0x800447 <g_showData+0x1b>
    2a8a:	08 95       	ret

00002a8c <isr_lcd_10mhz_ref_osc_show_ppm>:
}

void isr_lcd_10mhz_ref_osc_show_ppm(int16_t ppm_int, uint16_t ppm_frac1000)
{
	// interrupt is already disabled, here
	if (g_showData.ppb_int != ppm_int ||
    2a8c:	20 91 34 04 	lds	r18, 0x0434	; 0x800434 <g_showData+0x8>
    2a90:	30 91 35 04 	lds	r19, 0x0435	; 0x800435 <g_showData+0x9>
    2a94:	28 17       	cp	r18, r24
    2a96:	39 07       	cpc	r19, r25
    2a98:	39 f4       	brne	.+14     	; 0x2aa8 <isr_lcd_10mhz_ref_osc_show_ppm+0x1c>
    2a9a:	20 91 36 04 	lds	r18, 0x0436	; 0x800436 <g_showData+0xa>
    2a9e:	30 91 37 04 	lds	r19, 0x0437	; 0x800437 <g_showData+0xb>
    2aa2:	26 17       	cp	r18, r22
    2aa4:	37 07       	cpc	r19, r23
    2aa6:	69 f0       	breq	.+26     	; 0x2ac2 <isr_lcd_10mhz_ref_osc_show_ppm+0x36>
			g_showData.ppb_frac1000 != ppm_frac1000) {
		g_showData.newPpb = true;
    2aa8:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <g_showData>
    2aac:	28 60       	ori	r18, 0x08	; 8
    2aae:	20 93 2c 04 	sts	0x042C, r18	; 0x80042c <g_showData>
		g_showData.ppb_int = ppm_int;
    2ab2:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <g_showData+0x9>
    2ab6:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <g_showData+0x8>
		g_showData.ppb_frac1000 = ppm_frac1000;
    2aba:	70 93 37 04 	sts	0x0437, r23	; 0x800437 <g_showData+0xb>
    2abe:	60 93 36 04 	sts	0x0436, r22	; 0x800436 <g_showData+0xa>
    2ac2:	08 95       	ret

00002ac4 <isr_lcd_10mhz_ref_osc_show_pwm>:
}

void isr_lcd_10mhz_ref_osc_show_pwm(uint8_t pwm_int, uint8_t pwm_frac256)
{
	// interrupt is already disabled, here
	if (g_showData.pwm_int != pwm_int ||
    2ac4:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <g_showData+0x1c>
    2ac8:	98 13       	cpse	r25, r24
    2aca:	04 c0       	rjmp	.+8      	; 0x2ad4 <isr_lcd_10mhz_ref_osc_show_pwm+0x10>
    2acc:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <g_showData+0x1d>
    2ad0:	96 17       	cp	r25, r22
    2ad2:	49 f0       	breq	.+18     	; 0x2ae6 <isr_lcd_10mhz_ref_osc_show_pwm+0x22>
			g_showData.pwm_frac256 != pwm_frac256) {
		g_showData.newPwm = true;
    2ad4:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <g_showData>
    2ad8:	90 61       	ori	r25, 0x10	; 16
    2ada:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <g_showData>
		g_showData.pwm_int = pwm_int;
    2ade:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <g_showData+0x1c>
		g_showData.pwm_frac256 = pwm_frac256;
    2ae2:	60 93 49 04 	sts	0x0449, r22	; 0x800449 <g_showData+0x1d>
    2ae6:	08 95       	ret

00002ae8 <isr_lcd_10mhz_ref_osc_show_pv>:
}

void isr_lcd_10mhz_ref_osc_show_pv(uint8_t pv_int, uint16_t pv_frac1000)
{
	// interrupt is already disabled, here
	if (g_showData.pv_int != pv_int ||
    2ae8:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <g_showData+0x1e>
    2aec:	98 13       	cpse	r25, r24
    2aee:	07 c0       	rjmp	.+14     	; 0x2afe <isr_lcd_10mhz_ref_osc_show_pv+0x16>
    2af0:	20 91 38 04 	lds	r18, 0x0438	; 0x800438 <g_showData+0xc>
    2af4:	30 91 39 04 	lds	r19, 0x0439	; 0x800439 <g_showData+0xd>
    2af8:	26 17       	cp	r18, r22
    2afa:	37 07       	cpc	r19, r23
    2afc:	59 f0       	breq	.+22     	; 0x2b14 <isr_lcd_10mhz_ref_osc_show_pv+0x2c>
			g_showData.pv_frac1000 != pv_frac1000) {
		g_showData.newPv = true;
    2afe:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <g_showData>
    2b02:	90 62       	ori	r25, 0x20	; 32
    2b04:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <g_showData>
		g_showData.pv_int = pv_int;
    2b08:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <g_showData+0x1e>
		g_showData.pv_frac1000 = pv_frac1000;
    2b0c:	70 93 39 04 	sts	0x0439, r23	; 0x800439 <g_showData+0xd>
    2b10:	60 93 38 04 	sts	0x0438, r22	; 0x800438 <g_showData+0xc>
    2b14:	08 95       	ret

00002b16 <isr_lcd_10mhz_ref_osc_show_sat_use>:
}

void isr_lcd_10mhz_ref_osc_show_sat_use(uint8_t sat_west, uint8_t sat_east, uint8_t sat_used)
{
	// interrupt is already disabled, here
	if (g_showData.satUse_west != sat_west ||
    2b16:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <g_showData+0x1f>
    2b1a:	98 13       	cpse	r25, r24
    2b1c:	08 c0       	rjmp	.+16     	; 0x2b2e <isr_lcd_10mhz_ref_osc_show_sat_use+0x18>
    2b1e:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <g_showData+0x20>
    2b22:	96 13       	cpse	r25, r22
    2b24:	04 c0       	rjmp	.+8      	; 0x2b2e <isr_lcd_10mhz_ref_osc_show_sat_use+0x18>
			g_showData.satUse_east != sat_east ||
    2b26:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <g_showData+0x21>
    2b2a:	94 17       	cp	r25, r20
    2b2c:	59 f0       	breq	.+22     	; 0x2b44 <isr_lcd_10mhz_ref_osc_show_sat_use+0x2e>
			g_showData.satUse_used != sat_used) {
		g_showData.newSatUse = true;
    2b2e:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <g_showData>
    2b32:	90 64       	ori	r25, 0x40	; 64
    2b34:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <g_showData>
		g_showData.satUse_west = sat_west;
    2b38:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <g_showData+0x1f>
		g_showData.satUse_east = sat_east;
    2b3c:	60 93 4c 04 	sts	0x044C, r22	; 0x80044c <g_showData+0x20>
		g_showData.satUse_used = sat_used;
    2b40:	40 93 4d 04 	sts	0x044D, r20	; 0x80044d <g_showData+0x21>
    2b44:	08 95       	ret

00002b46 <isr_lcd_10mhz_ref_osc_show_sat_dop>:
}

void isr_lcd_10mhz_ref_osc_show_sat_dop(uint16_t sat_dop100)
{
	// interrupt is already disabled, here
	if (g_showData.satDop_dop100 != sat_dop100) {
    2b46:	20 91 3a 04 	lds	r18, 0x043A	; 0x80043a <g_showData+0xe>
    2b4a:	30 91 3b 04 	lds	r19, 0x043B	; 0x80043b <g_showData+0xf>
    2b4e:	28 17       	cp	r18, r24
    2b50:	39 07       	cpc	r19, r25
    2b52:	49 f0       	breq	.+18     	; 0x2b66 <isr_lcd_10mhz_ref_osc_show_sat_dop+0x20>
		g_showData.newSatDop = true;
    2b54:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <g_showData>
    2b58:	20 68       	ori	r18, 0x80	; 128
    2b5a:	20 93 2c 04 	sts	0x042C, r18	; 0x80042c <g_showData>
		g_showData.satDop_dop100 = sat_dop100;
    2b5e:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <g_showData+0xf>
    2b62:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0xe>
    2b66:	08 95       	ret

00002b68 <isr_lcd_10mhz_ref_osc_show_pos_state>:
}

void isr_lcd_10mhz_ref_osc_show_pos_state(uint8_t state_fi, uint8_t state_m2)
{
	// interrupt is already disabled, here
	if (g_showData.posState_fi != state_fi ||
    2b68:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <g_showData+0x22>
    2b6c:	98 13       	cpse	r25, r24
    2b6e:	04 c0       	rjmp	.+8      	; 0x2b78 <isr_lcd_10mhz_ref_osc_show_pos_state+0x10>
    2b70:	90 91 4f 04 	lds	r25, 0x044F	; 0x80044f <g_showData+0x23>
    2b74:	96 17       	cp	r25, r22
    2b76:	49 f0       	breq	.+18     	; 0x2b8a <isr_lcd_10mhz_ref_osc_show_pos_state+0x22>
			g_showData.posState_m2 != state_m2) {
		g_showData.newPosState = true;
    2b78:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <g_showData+0x1>
    2b7c:	91 60       	ori	r25, 0x01	; 1
    2b7e:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <g_showData+0x1>
		g_showData.posState_fi = state_fi;
    2b82:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <g_showData+0x22>
		g_showData.posState_m2 = state_m2;
    2b86:	60 93 4f 04 	sts	0x044F, r22	; 0x80044f <g_showData+0x23>
    2b8a:	08 95       	ret

00002b8c <isr_lcd_10mhz_ref_osc_show_pos_lat>:
}

void isr_lcd_10mhz_ref_osc_show_pos_lat(uint8_t lat_sgn, uint8_t lat_deg, uint8_t lat_min_int, uint16_t lat_min_frac10000)
{
	// interrupt is already disabled, here
	if (g_showData.posLat_sgn != lat_sgn ||
    2b8c:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <g_showData+0x24>
    2b90:	98 13       	cpse	r25, r24
    2b92:	0f c0       	rjmp	.+30     	; 0x2bb2 <isr_lcd_10mhz_ref_osc_show_pos_lat+0x26>
    2b94:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <g_showData+0x25>
    2b98:	96 13       	cpse	r25, r22
    2b9a:	0b c0       	rjmp	.+22     	; 0x2bb2 <isr_lcd_10mhz_ref_osc_show_pos_lat+0x26>
			g_showData.posLat_deg != lat_deg ||
    2b9c:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <g_showData+0x26>
    2ba0:	94 13       	cpse	r25, r20
    2ba2:	07 c0       	rjmp	.+14     	; 0x2bb2 <isr_lcd_10mhz_ref_osc_show_pos_lat+0x26>
			g_showData.posLat_min_int != lat_min_int ||
			g_showData.posLat_min_int != lat_min_int ||
    2ba4:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <g_showData+0x10>
    2ba8:	f0 91 3d 04 	lds	r31, 0x043D	; 0x80043d <g_showData+0x11>
    2bac:	e2 17       	cp	r30, r18
    2bae:	f3 07       	cpc	r31, r19
    2bb0:	79 f0       	breq	.+30     	; 0x2bd0 <isr_lcd_10mhz_ref_osc_show_pos_lat+0x44>
			g_showData.posLat_min_frac10000 != lat_min_frac10000) {
		g_showData.newPosLat = true;
    2bb2:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <g_showData+0x1>
    2bb6:	92 60       	ori	r25, 0x02	; 2
    2bb8:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <g_showData+0x1>
		g_showData.posLat_sgn = lat_sgn;
    2bbc:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <g_showData+0x24>
		g_showData.posLat_deg = lat_deg;
    2bc0:	60 93 51 04 	sts	0x0451, r22	; 0x800451 <g_showData+0x25>
		g_showData.posLat_min_int = lat_min_int;
    2bc4:	40 93 52 04 	sts	0x0452, r20	; 0x800452 <g_showData+0x26>
		g_showData.posLat_min_frac10000 = lat_min_frac10000;
    2bc8:	30 93 3d 04 	sts	0x043D, r19	; 0x80043d <g_showData+0x11>
    2bcc:	20 93 3c 04 	sts	0x043C, r18	; 0x80043c <g_showData+0x10>
    2bd0:	08 95       	ret

00002bd2 <isr_lcd_10mhz_ref_osc_show_pos_lon>:
}

void isr_lcd_10mhz_ref_osc_show_pos_lon(uint8_t lon_sgn, uint8_t lon_deg, uint8_t lon_min_int, uint16_t lon_min_frac10000)
{
	// interrupt is already disabled, here
	if (g_showData.posLon_sgn != lon_sgn ||
    2bd2:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <g_showData+0x27>
    2bd6:	98 13       	cpse	r25, r24
    2bd8:	0f c0       	rjmp	.+30     	; 0x2bf8 <isr_lcd_10mhz_ref_osc_show_pos_lon+0x26>
    2bda:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <g_showData+0x28>
    2bde:	96 13       	cpse	r25, r22
    2be0:	0b c0       	rjmp	.+22     	; 0x2bf8 <isr_lcd_10mhz_ref_osc_show_pos_lon+0x26>
			g_showData.posLon_deg != lon_deg ||
			g_showData.posLon_deg != lon_deg ||
    2be2:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <g_showData+0x29>
    2be6:	94 13       	cpse	r25, r20
    2be8:	07 c0       	rjmp	.+14     	; 0x2bf8 <isr_lcd_10mhz_ref_osc_show_pos_lon+0x26>
			g_showData.posLon_min_int != lon_min_int ||
    2bea:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <g_showData+0x12>
    2bee:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <g_showData+0x13>
    2bf2:	e2 17       	cp	r30, r18
    2bf4:	f3 07       	cpc	r31, r19
    2bf6:	79 f0       	breq	.+30     	; 0x2c16 <isr_lcd_10mhz_ref_osc_show_pos_lon+0x44>
			g_showData.posLon_min_frac10000 != lon_min_frac10000) {
		g_showData.newPosLon = true;
    2bf8:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <g_showData+0x1>
    2bfc:	94 60       	ori	r25, 0x04	; 4
    2bfe:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <g_showData+0x1>
		g_showData.posLon_sgn = lon_sgn;
    2c02:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <g_showData+0x27>
		g_showData.posLon_deg = lon_deg;
    2c06:	60 93 54 04 	sts	0x0454, r22	; 0x800454 <g_showData+0x28>
		g_showData.posLon_min_int = lon_min_int;
    2c0a:	40 93 55 04 	sts	0x0455, r20	; 0x800455 <g_showData+0x29>
		g_showData.posLon_min_frac10000 = lon_min_frac10000;
    2c0e:	30 93 3f 04 	sts	0x043F, r19	; 0x80043f <g_showData+0x13>
    2c12:	20 93 3e 04 	sts	0x043E, r18	; 0x80043e <g_showData+0x12>
    2c16:	08 95       	ret

00002c18 <isr_lcd_10mhz_ref_osc_show_pos_height>:
}

void isr_lcd_10mhz_ref_osc_show_pos_height(int16_t height_int, uint8_t height_frac100)
{
	// interrupt is already disabled, here
	if (g_showData.pos_height_int != height_int || g_showData.pos_height_frac100 != height_frac100) {
    2c18:	20 91 40 04 	lds	r18, 0x0440	; 0x800440 <g_showData+0x14>
    2c1c:	30 91 41 04 	lds	r19, 0x0441	; 0x800441 <g_showData+0x15>
    2c20:	28 17       	cp	r18, r24
    2c22:	39 07       	cpc	r19, r25
    2c24:	21 f4       	brne	.+8      	; 0x2c2e <isr_lcd_10mhz_ref_osc_show_pos_height+0x16>
    2c26:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <g_showData+0x2a>
    2c2a:	26 17       	cp	r18, r22
    2c2c:	59 f0       	breq	.+22     	; 0x2c44 <isr_lcd_10mhz_ref_osc_show_pos_height+0x2c>
		g_showData.newPosHeight = true;
    2c2e:	20 91 2d 04 	lds	r18, 0x042D	; 0x80042d <g_showData+0x1>
    2c32:	28 60       	ori	r18, 0x08	; 8
    2c34:	20 93 2d 04 	sts	0x042D, r18	; 0x80042d <g_showData+0x1>
		g_showData.pos_height_int = height_int;
    2c38:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <g_showData+0x15>
    2c3c:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <g_showData+0x14>
		g_showData.pos_height_frac100 = height_frac100;
    2c40:	60 93 56 04 	sts	0x0456, r22	; 0x800456 <g_showData+0x2a>
    2c44:	08 95       	ret

00002c46 <lcd_get_sysfont>:


const void* lcd_get_sysfont(void)
{
	return &sysfont;
}
    2c46:	83 e0       	ldi	r24, 0x03	; 3
    2c48:	91 e0       	ldi	r25, 0x01	; 1
    2c4a:	08 95       	ret

00002c4c <lcd_init>:
uint8_t lcd_init(void)
{
	uint8_t data;

	/* INIT sequence */
	lcd_bus_write_cmd(0b11100010);									// Reset display
    2c4c:	82 ee       	ldi	r24, 0xE2	; 226
    2c4e:	0e 94 10 0c 	call	0x1820	; 0x1820 <lcd_bus_write_cmd>
	delay_ms(20);													// Wait for the panel to get ready in case one is attached to the bus
    2c52:	6b e2       	ldi	r22, 0x2B	; 43
    2c54:	78 e6       	ldi	r23, 0x68	; 104
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__portable_avr_delay_cycles>

	data = lcd_bus_read_status();									// Get current status
    2c5e:	0e 94 04 0c 	call	0x1808	; 0x1808 <lcd_bus_read_status>
	if (!(data & C_LCD_STATUS_M)) {
    2c62:	87 fd       	sbrc	r24, 7
    2c64:	06 c0       	rjmp	.+12     	; 0x2c72 <lcd_init+0x26>
    2c66:	0e 94 1d 0c 	call	0x183a	; 0x183a <lcd_enable.part.0>
		/* LCD panel reacts correctly - resume with INIT sequence */
		lcd_enable(true);
		lcd_cls();													// Clear screen
    2c6a:	0e 94 85 0c 	call	0x190a	; 0x190a <lcd_cls>
		return 0;													// Return OK
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	08 95       	ret

	} else {
		return 1;													// Return failure
    2c72:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    2c74:	08 95       	ret

00002c76 <lcd_shutdown>:

void lcd_shutdown(void)
{
	lcd_bus_write_cmd(0b11100010);									// Reset display
    2c76:	82 ee       	ldi	r24, 0xE2	; 226
    2c78:	0e 94 10 0c 	call	0x1820	; 0x1820 <lcd_bus_write_cmd>
	delay_ms(2);													// Wait for the energy to dissipate
    2c7c:	6b e6       	ldi	r22, 0x6B	; 107
    2c7e:	7a e0       	ldi	r23, 0x0A	; 10
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__portable_avr_delay_cycles>

00002c88 <s_twi_tx_done>:
#endif

static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
    2c88:	20 91 26 04 	lds	r18, 0x0426	; 0x800426 <s_tx_next_len>
    2c8c:	22 23       	and	r18, r18
    2c8e:	61 f0       	breq	.+24     	; 0x2ca8 <s_twi_tx_done+0x20>
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
    2c90:	82 2f       	mov	r24, r18
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	fc 01       	movw	r30, r24
    2c96:	e4 5e       	subi	r30, 0xE4	; 228
    2c98:	fb 4f       	sbci	r31, 0xFB	; 251
			s_tx_d[idx] = s_tx_next_d[idx];
    2c9a:	10 82       	st	Z, r1
static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	d0 f7       	brcc	.-12     	; 0x2c94 <s_twi_tx_done+0xc>
			s_tx_d[idx] = s_tx_next_d[idx];
		}
		s_tx_len = s_tx_next_len;
    2ca0:	20 93 24 04 	sts	0x0424, r18	; 0x800424 <s_tx_len>
		s_tx_next_len = 0;
    2ca4:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <s_tx_next_len>
    2ca8:	08 95       	ret

00002caa <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2>:

static void s_isr_twi_rcvd_command_closed_form(uint8_t data[], uint8_t cnt)
{
	uint8_t prepareBuf[4] = { 0 };
	uint8_t isGCA	= !data[0];
	uint8_t cmd		=  data[1];
    2caa:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <s_rx_d+0x1>
			{
				// do nothing
			}
		}

	} else if (data[0] == TWI_SLAVE_ADDR_10MHZREFOSC) {
    2cae:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <s_rx_d>
    2cb2:	92 32       	cpi	r25, 0x22	; 34
    2cb4:	09 f0       	breq	.+2      	; 0x2cb8 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xe>
    2cb6:	bd c0       	rjmp	.+378    	; 0x2e32 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x188>
		g_status.doAnimation = false;			// stop animation demo
    2cb8:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <g_status>
    2cbc:	9e 7f       	andi	r25, 0xFE	; 254
    2cbe:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <g_status>

		switch (cmd) {
    2cc2:	85 38       	cpi	r24, 0x85	; 133
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x1e>
    2cc6:	6c c0       	rjmp	.+216    	; 0x2da0 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xf6>
    2cc8:	a8 f4       	brcc	.+42     	; 0x2cf4 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x4a>
    2cca:	81 38       	cpi	r24, 0x81	; 129
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x26>
    2cce:	45 c0       	rjmp	.+138    	; 0x2d5a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xb0>
    2cd0:	28 f4       	brcc	.+10     	; 0x2cdc <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x32>
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	19 f1       	breq	.+70     	; 0x2d1c <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x72>
    2cd6:	80 38       	cpi	r24, 0x80	; 128
    2cd8:	69 f1       	breq	.+90     	; 0x2d34 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x8a>
    2cda:	08 95       	ret
    2cdc:	83 38       	cpi	r24, 0x83	; 131
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x38>
    2ce0:	49 c0       	rjmp	.+146    	; 0x2d74 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xca>
    2ce2:	08 f0       	brcs	.+2      	; 0x2ce6 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x3c>
    2ce4:	58 c0       	rjmp	.+176    	; 0x2d96 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xec>
			case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
			isr_lcd_10mhz_ref_osc_show_date(data[2] | (data[3] << 8), data[4], data[5]);
			break;

			case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
			isr_lcd_10mhz_ref_osc_show_time(data[2], data[3], data[4]);
    2ce6:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <s_rx_d+0x4>
    2cea:	60 91 16 04 	lds	r22, 0x0416	; 0x800416 <s_rx_d+0x3>
    2cee:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <s_rx_d+0x2>
    2cf2:	ae ce       	rjmp	.-676    	; 0x2a50 <isr_lcd_10mhz_ref_osc_show_time>
		}

	} else if (data[0] == TWI_SLAVE_ADDR_10MHZREFOSC) {
		g_status.doAnimation = false;			// stop animation demo

		switch (cmd) {
    2cf4:	8a 38       	cpi	r24, 0x8A	; 138
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x50>
    2cf8:	6e c0       	rjmp	.+220    	; 0x2dd6 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x12c>
    2cfa:	38 f4       	brcc	.+14     	; 0x2d0a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x60>
    2cfc:	88 38       	cpi	r24, 0x88	; 136
    2cfe:	09 f4       	brne	.+2      	; 0x2d02 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x58>
    2d00:	5a c0       	rjmp	.+180    	; 0x2db6 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x10c>
    2d02:	89 38       	cpi	r24, 0x89	; 137
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x5e>
    2d06:	5e c0       	rjmp	.+188    	; 0x2dc4 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x11a>
    2d08:	08 95       	ret
    2d0a:	8c 38       	cpi	r24, 0x8C	; 140
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x66>
    2d0e:	77 c0       	rjmp	.+238    	; 0x2dfe <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x154>
    2d10:	08 f4       	brcc	.+2      	; 0x2d14 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x6a>
    2d12:	66 c0       	rjmp	.+204    	; 0x2de0 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x136>
    2d14:	8d 38       	cpi	r24, 0x8D	; 141
    2d16:	09 f4       	brne	.+2      	; 0x2d1a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x70>
    2d18:	81 c0       	rjmp	.+258    	; 0x2e1c <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x172>
    2d1a:	08 95       	ret
}

static void s_twi_rx_prepare(uint8_t msgCnt, uint8_t msg[])
{
	if (msgCnt && msg) {
		if (!s_rx_lock) {
    2d1c:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <s_rx_lock>
    2d20:	91 11       	cpse	r25, r1
    2d22:	87 c0       	rjmp	.+270    	; 0x2e32 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x188>
			// Prepare master message buffer
			for (int idx = msgCnt; idx >= 0; --idx) {
				s_rx_d[idx] = msg[idx];
    2d24:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <s_rx_d+0x1>
    2d28:	90 e1       	ldi	r25, 0x10	; 16
    2d2a:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <s_rx_d>
			}
			s_rx_len = msgCnt;
    2d2e:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <s_rx_len>
    2d32:	08 95       	ret
			prepareBuf[0] = VERSION;
			s_twi_rx_prepare(1, prepareBuf);
			break;

			case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
			isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100(data[2], (uint16_t) (data[3] | (data[4] << 8)), (int16_t) (data[5] | (data[6] << 8)));
    2d34:	40 91 19 04 	lds	r20, 0x0419	; 0x800419 <s_rx_d+0x6>
    2d38:	50 e0       	ldi	r21, 0x00	; 0
    2d3a:	54 2f       	mov	r21, r20
    2d3c:	44 27       	eor	r20, r20
    2d3e:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <s_rx_d+0x5>
    2d42:	48 2b       	or	r20, r24
    2d44:	60 91 17 04 	lds	r22, 0x0417	; 0x800417 <s_rx_d+0x4>
    2d48:	70 e0       	ldi	r23, 0x00	; 0
    2d4a:	76 2f       	mov	r23, r22
    2d4c:	66 27       	eor	r22, r22
    2d4e:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <s_rx_d+0x3>
    2d52:	68 2b       	or	r22, r24
    2d54:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <s_rx_d+0x2>
    2d58:	36 ce       	rjmp	.-916    	; 0x29c6 <isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100>
			break;

			case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
			isr_lcd_10mhz_ref_osc_show_date(data[2] | (data[3] << 8), data[4], data[5]);
    2d5a:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <s_rx_d+0x3>
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	98 2f       	mov	r25, r24
    2d62:	88 27       	eor	r24, r24
    2d64:	20 91 15 04 	lds	r18, 0x0415	; 0x800415 <s_rx_d+0x2>
    2d68:	40 91 18 04 	lds	r20, 0x0418	; 0x800418 <s_rx_d+0x5>
    2d6c:	60 91 17 04 	lds	r22, 0x0417	; 0x800417 <s_rx_d+0x4>
    2d70:	82 2b       	or	r24, r18
    2d72:	4b ce       	rjmp	.-874    	; 0x2a0a <isr_lcd_10mhz_ref_osc_show_date>
			case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
			isr_lcd_10mhz_ref_osc_show_time(data[2], data[3], data[4]);
			break;

			case TWI_SMART_LCD_CMD_SHOW_PPM:
			isr_lcd_10mhz_ref_osc_show_ppm((int16_t) (data[2] | (data[3] << 8)), data[4] | (data[5] << 8));
    2d74:	60 91 18 04 	lds	r22, 0x0418	; 0x800418 <s_rx_d+0x5>
    2d78:	70 e0       	ldi	r23, 0x00	; 0
    2d7a:	76 2f       	mov	r23, r22
    2d7c:	66 27       	eor	r22, r22
    2d7e:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <s_rx_d+0x4>
    2d82:	68 2b       	or	r22, r24
    2d84:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <s_rx_d+0x3>
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	98 2f       	mov	r25, r24
    2d8c:	88 27       	eor	r24, r24
    2d8e:	20 91 15 04 	lds	r18, 0x0415	; 0x800415 <s_rx_d+0x2>
    2d92:	82 2b       	or	r24, r18
    2d94:	7b ce       	rjmp	.-778    	; 0x2a8c <isr_lcd_10mhz_ref_osc_show_ppm>
			break;

			case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
			isr_lcd_10mhz_ref_osc_show_pwm(data[2], data[3]);
    2d96:	60 91 16 04 	lds	r22, 0x0416	; 0x800416 <s_rx_d+0x3>
    2d9a:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <s_rx_d+0x2>
    2d9e:	92 ce       	rjmp	.-732    	; 0x2ac4 <isr_lcd_10mhz_ref_osc_show_pwm>
			break;

			case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
			isr_lcd_10mhz_ref_osc_show_pv(data[2], data[3] | (data[4] << 8));
    2da0:	60 91 17 04 	lds	r22, 0x0417	; 0x800417 <s_rx_d+0x4>
    2da4:	70 e0       	ldi	r23, 0x00	; 0
    2da6:	76 2f       	mov	r23, r22
    2da8:	66 27       	eor	r22, r22
    2daa:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <s_rx_d+0x3>
    2dae:	68 2b       	or	r22, r24
    2db0:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <s_rx_d+0x2>
    2db4:	99 ce       	rjmp	.-718    	; 0x2ae8 <isr_lcd_10mhz_ref_osc_show_pv>
			break;

			case TWI_SMART_LCD_CMD_SHOW_SATS:
			isr_lcd_10mhz_ref_osc_show_sat_use(data[2], data[3], data[4]);
    2db6:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <s_rx_d+0x4>
    2dba:	60 91 16 04 	lds	r22, 0x0416	; 0x800416 <s_rx_d+0x3>
    2dbe:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <s_rx_d+0x2>
    2dc2:	a9 ce       	rjmp	.-686    	; 0x2b16 <isr_lcd_10mhz_ref_osc_show_sat_use>
			break;

			case TWI_SMART_LCD_CMD_SHOW_DOP:
			isr_lcd_10mhz_ref_osc_show_sat_dop(data[2] | (data[3] << 8));
    2dc4:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <s_rx_d+0x3>
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	98 2f       	mov	r25, r24
    2dcc:	88 27       	eor	r24, r24
    2dce:	20 91 15 04 	lds	r18, 0x0415	; 0x800415 <s_rx_d+0x2>
    2dd2:	82 2b       	or	r24, r18
    2dd4:	b8 ce       	rjmp	.-656    	; 0x2b46 <isr_lcd_10mhz_ref_osc_show_sat_dop>
			break;

			case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
			isr_lcd_10mhz_ref_osc_show_pos_state(data[2], data[3]);
    2dd6:	60 91 16 04 	lds	r22, 0x0416	; 0x800416 <s_rx_d+0x3>
    2dda:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <s_rx_d+0x2>
    2dde:	c4 ce       	rjmp	.-632    	; 0x2b68 <isr_lcd_10mhz_ref_osc_show_pos_state>
			break;

			case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
			isr_lcd_10mhz_ref_osc_show_pos_lat(data[2], data[3], data[4], data[5] | (data[6] << 8));
    2de0:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <s_rx_d+0x6>
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	32 2f       	mov	r19, r18
    2de8:	22 27       	eor	r18, r18
    2dea:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <s_rx_d+0x5>
    2dee:	28 2b       	or	r18, r24
    2df0:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <s_rx_d+0x4>
    2df4:	60 91 16 04 	lds	r22, 0x0416	; 0x800416 <s_rx_d+0x3>
    2df8:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <s_rx_d+0x2>
    2dfc:	c7 ce       	rjmp	.-626    	; 0x2b8c <isr_lcd_10mhz_ref_osc_show_pos_lat>
			break;

			case TWI_SMART_LCD_CMD_SHOW_POS_LON:
			isr_lcd_10mhz_ref_osc_show_pos_lon(data[2], data[3], data[4], data[5] | (data[6] << 8));
    2dfe:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <s_rx_d+0x6>
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	32 2f       	mov	r19, r18
    2e06:	22 27       	eor	r18, r18
    2e08:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <s_rx_d+0x5>
    2e0c:	28 2b       	or	r18, r24
    2e0e:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <s_rx_d+0x4>
    2e12:	60 91 16 04 	lds	r22, 0x0416	; 0x800416 <s_rx_d+0x3>
    2e16:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <s_rx_d+0x2>
    2e1a:	db ce       	rjmp	.-586    	; 0x2bd2 <isr_lcd_10mhz_ref_osc_show_pos_lon>
			break;

			case TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT:
			isr_lcd_10mhz_ref_osc_show_pos_height((data[2] | (data[3] << 8)), data[4]);
    2e1c:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <s_rx_d+0x3>
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	98 2f       	mov	r25, r24
    2e24:	88 27       	eor	r24, r24
    2e26:	20 91 15 04 	lds	r18, 0x0415	; 0x800415 <s_rx_d+0x2>
    2e2a:	60 91 17 04 	lds	r22, 0x0417	; 0x800417 <s_rx_d+0x4>
    2e2e:	82 2b       	or	r24, r18
    2e30:	f3 ce       	rjmp	.-538    	; 0x2c18 <isr_lcd_10mhz_ref_osc_show_pos_height>
    2e32:	08 95       	ret

00002e34 <__vector_24__bottom>:
	}
}


uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur)
{
    2e34:	1f 93       	push	r17
    2e36:	cf 93       	push	r28
    2e38:	df 93       	push	r29
    2e3a:	d6 2f       	mov	r29, r22
	static uint8_t pos_i	= 0;
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur & 0b01000101;
    2e3c:	c4 2f       	mov	r28, r20
    2e3e:	c5 74       	andi	r28, 0x45	; 69

	switch(tws) {
    2e40:	88 36       	cpi	r24, 0x68	; 104
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <__vector_24__bottom+0x12>
    2e44:	95 c0       	rjmp	.+298    	; 0x2f70 <__vector_24__bottom+0x13c>
    2e46:	08 f0       	brcs	.+2      	; 0x2e4a <__vector_24__bottom+0x16>
    2e48:	45 c0       	rjmp	.+138    	; 0x2ed4 <__vector_24__bottom+0xa0>
    2e4a:	80 33       	cpi	r24, 0x30	; 48
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <__vector_24__bottom+0x1c>
    2e4e:	86 c0       	rjmp	.+268    	; 0x2f5c <__vector_24__bottom+0x128>
    2e50:	60 f5       	brcc	.+88     	; 0x2eaa <__vector_24__bottom+0x76>
    2e52:	80 31       	cpi	r24, 0x10	; 16
    2e54:	09 f4       	brne	.+2      	; 0x2e58 <__vector_24__bottom+0x24>
    2e56:	6d c0       	rjmp	.+218    	; 0x2f32 <__vector_24__bottom+0xfe>
    2e58:	f0 f4       	brcc	.+60     	; 0x2e96 <__vector_24__bottom+0x62>
    2e5a:	88 23       	and	r24, r24
    2e5c:	09 f4       	brne	.+2      	; 0x2e60 <__vector_24__bottom+0x2c>
    2e5e:	5a c1       	rjmp	.+692    	; 0x3114 <__vector_24__bottom+0x2e0>
    2e60:	88 30       	cpi	r24, 0x08	; 8
    2e62:	09 f0       	breq	.+2      	; 0x2e66 <__vector_24__bottom+0x32>
    2e64:	57 c1       	rjmp	.+686    	; 0x3114 <__vector_24__bottom+0x2e0>

	/* Master Transmitter Mode */

	case TWI_TWSR_START:						// Start condition transmitted
		s_tx_lock = 1;
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <s_tx_lock>
		pos_o = 0;
    2e6c:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <pos_o.2656>

		cnt_o = 2;								// TEST
    2e70:	82 e0       	ldi	r24, 0x02	; 2
    2e72:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <cnt_o.2658>
		s_tx_d[0] = (0x12 << TWD1) | (0b0 << TWD0);	// TEST
    2e76:	84 e2       	ldi	r24, 0x24	; 36
    2e78:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <s_tx_d>
		s_tx_d[1] = 0x34;						// TEST
    2e7c:	84 e3       	ldi	r24, 0x34	; 52
    2e7e:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <s_tx_d+0x1>
		s_tx_d[2] = 0x56;						// TEST
    2e82:	86 e5       	ldi	r24, 0x56	; 86
    2e84:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <s_tx_d+0x2>
		s_tx_d[3] = 0x78;						// TEST
    2e88:	88 e7       	ldi	r24, 0x78	; 120
    2e8a:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <s_tx_d+0x3>
		s_tx_d[4] = 0x9a;						// TEST
    2e8e:	8a e9       	ldi	r24, 0x9A	; 154
    2e90:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <s_tx_d+0x4>
    2e94:	4e c0       	rjmp	.+156    	; 0x2f32 <__vector_24__bottom+0xfe>
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur & 0b01000101;

	switch(tws) {
    2e96:	80 32       	cpi	r24, 0x20	; 32
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <__vector_24__bottom+0x68>
    2e9a:	63 c0       	rjmp	.+198    	; 0x2f62 <__vector_24__bottom+0x12e>
    2e9c:	88 32       	cpi	r24, 0x28	; 40
    2e9e:	09 f4       	brne	.+2      	; 0x2ea2 <__vector_24__bottom+0x6e>
    2ea0:	4c c0       	rjmp	.+152    	; 0x2f3a <__vector_24__bottom+0x106>
    2ea2:	88 31       	cpi	r24, 0x18	; 24
    2ea4:	09 f0       	breq	.+2      	; 0x2ea8 <__vector_24__bottom+0x74>
    2ea6:	36 c1       	rjmp	.+620    	; 0x3114 <__vector_24__bottom+0x2e0>
    2ea8:	45 c0       	rjmp	.+138    	; 0x2f34 <__vector_24__bottom+0x100>
    2eaa:	88 34       	cpi	r24, 0x48	; 72
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <__vector_24__bottom+0x7c>
    2eae:	5d c0       	rjmp	.+186    	; 0x2f6a <__vector_24__bottom+0x136>
    2eb0:	38 f4       	brcc	.+14     	; 0x2ec0 <__vector_24__bottom+0x8c>
    2eb2:	88 33       	cpi	r24, 0x38	; 56
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <__vector_24__bottom+0x84>
    2eb6:	57 c0       	rjmp	.+174    	; 0x2f66 <__vector_24__bottom+0x132>
    2eb8:	80 34       	cpi	r24, 0x40	; 64
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <__vector_24__bottom+0x8a>
    2ebc:	56 c0       	rjmp	.+172    	; 0x2f6a <__vector_24__bottom+0x136>
    2ebe:	2a c1       	rjmp	.+596    	; 0x3114 <__vector_24__bottom+0x2e0>
    2ec0:	88 35       	cpi	r24, 0x58	; 88
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <__vector_24__bottom+0x92>
    2ec4:	52 c0       	rjmp	.+164    	; 0x2f6a <__vector_24__bottom+0x136>
    2ec6:	80 36       	cpi	r24, 0x60	; 96
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <__vector_24__bottom+0x98>
    2eca:	51 c0       	rjmp	.+162    	; 0x2f6e <__vector_24__bottom+0x13a>
    2ecc:	80 35       	cpi	r24, 0x50	; 80
    2ece:	09 f0       	breq	.+2      	; 0x2ed2 <__vector_24__bottom+0x9e>
    2ed0:	21 c1       	rjmp	.+578    	; 0x3114 <__vector_24__bottom+0x2e0>
    2ed2:	4b c0       	rjmp	.+150    	; 0x2f6a <__vector_24__bottom+0x136>
    2ed4:	80 3a       	cpi	r24, 0xA0	; 160
    2ed6:	09 f4       	brne	.+2      	; 0x2eda <__vector_24__bottom+0xa6>
    2ed8:	e6 c0       	rjmp	.+460    	; 0x30a6 <__vector_24__bottom+0x272>
    2eda:	b0 f4       	brcc	.+44     	; 0x2f08 <__vector_24__bottom+0xd4>
    2edc:	80 38       	cpi	r24, 0x80	; 128
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <__vector_24__bottom+0xae>
    2ee0:	61 c0       	rjmp	.+194    	; 0x2fa4 <__vector_24__bottom+0x170>
    2ee2:	38 f4       	brcc	.+14     	; 0x2ef2 <__vector_24__bottom+0xbe>
    2ee4:	80 37       	cpi	r24, 0x70	; 112
    2ee6:	09 f4       	brne	.+2      	; 0x2eea <__vector_24__bottom+0xb6>
    2ee8:	52 c0       	rjmp	.+164    	; 0x2f8e <__vector_24__bottom+0x15a>
    2eea:	88 37       	cpi	r24, 0x78	; 120
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <__vector_24__bottom+0xbc>
    2eee:	50 c0       	rjmp	.+160    	; 0x2f90 <__vector_24__bottom+0x15c>
    2ef0:	11 c1       	rjmp	.+546    	; 0x3114 <__vector_24__bottom+0x2e0>
    2ef2:	80 39       	cpi	r24, 0x90	; 144
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <__vector_24__bottom+0xc4>
    2ef6:	57 c0       	rjmp	.+174    	; 0x2fa6 <__vector_24__bottom+0x172>
    2ef8:	88 39       	cpi	r24, 0x98	; 152
    2efa:	09 f4       	brne	.+2      	; 0x2efe <__vector_24__bottom+0xca>
    2efc:	c0 c0       	rjmp	.+384    	; 0x307e <__vector_24__bottom+0x24a>
    2efe:	88 38       	cpi	r24, 0x88	; 136
    2f00:	09 f0       	breq	.+2      	; 0x2f04 <__vector_24__bottom+0xd0>
    2f02:	08 c1       	rjmp	.+528    	; 0x3114 <__vector_24__bottom+0x2e0>
			}
		}
		break;

	case TWI_TWSR_S_SLAW_MYADDR_DATA_NACK:		// NACK after last data byte sent
		nop();
    2f04:	00 00       	nop
    2f06:	bb c0       	rjmp	.+374    	; 0x307e <__vector_24__bottom+0x24a>
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur & 0b01000101;

	switch(tws) {
    2f08:	88 3b       	cpi	r24, 0xB8	; 184
    2f0a:	09 f4       	brne	.+2      	; 0x2f0e <__vector_24__bottom+0xda>
    2f0c:	e6 c0       	rjmp	.+460    	; 0x30da <__vector_24__bottom+0x2a6>
    2f0e:	38 f4       	brcc	.+14     	; 0x2f1e <__vector_24__bottom+0xea>
    2f10:	88 3a       	cpi	r24, 0xA8	; 168
    2f12:	09 f4       	brne	.+2      	; 0x2f16 <__vector_24__bottom+0xe2>
    2f14:	d3 c0       	rjmp	.+422    	; 0x30bc <__vector_24__bottom+0x288>
    2f16:	80 3b       	cpi	r24, 0xB0	; 176
    2f18:	09 f4       	brne	.+2      	; 0x2f1c <__vector_24__bottom+0xe8>
    2f1a:	d1 c0       	rjmp	.+418    	; 0x30be <__vector_24__bottom+0x28a>
    2f1c:	fb c0       	rjmp	.+502    	; 0x3114 <__vector_24__bottom+0x2e0>
    2f1e:	88 3c       	cpi	r24, 0xC8	; 200
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <__vector_24__bottom+0xf0>
    2f22:	f5 c0       	rjmp	.+490    	; 0x310e <__vector_24__bottom+0x2da>
    2f24:	88 3f       	cpi	r24, 0xF8	; 248
    2f26:	09 f4       	brne	.+2      	; 0x2f2a <__vector_24__bottom+0xf6>
    2f28:	f5 c0       	rjmp	.+490    	; 0x3114 <__vector_24__bottom+0x2e0>
    2f2a:	80 3c       	cpi	r24, 0xC0	; 192
    2f2c:	09 f0       	breq	.+2      	; 0x2f30 <__vector_24__bottom+0xfc>
    2f2e:	f2 c0       	rjmp	.+484    	; 0x3114 <__vector_24__bottom+0x2e0>
    2f30:	ee c0       	rjmp	.+476    	; 0x310e <__vector_24__bottom+0x2da>
		s_tx_d[2] = 0x56;						// TEST
		s_tx_d[3] = 0x78;						// TEST
		s_tx_d[4] = 0x9a;						// TEST
		// fall-through.
	case TWI_TWSR_REPEATEDSTART:				// Repeated start condition transmitted
		nop();
    2f32:	00 00       	nop
		// fall-through.
	case TWI_TWSR_M_SLAW_ADDR_ACK:				// SLA+W transmitted and ACK received
		TWDR = s_tx_d[pos_o++];
    2f34:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <pos_o.2656>
    2f38:	06 c0       	rjmp	.+12     	; 0x2f46 <__vector_24__bottom+0x112>
	case TWI_TWSR_M_SLAW_ADDR_NACK:				// SLA+W transmitted and NACK received
		twcr_new |= _BV(TWSTO);					// Send STOP
		break;

	case TWI_TWSR_M_SLAW_DATA_ACK:				// Data byte sent and ACK received
		if (pos_o < cnt_o) {
    2f3a:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <pos_o.2656>
    2f3e:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <cnt_o.2658>
    2f42:	e8 17       	cp	r30, r24
    2f44:	58 f4       	brcc	.+22     	; 0x2f5c <__vector_24__bottom+0x128>
			TWDR = s_tx_d[pos_o++];				// Send new data byte
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	8e 0f       	add	r24, r30
    2f4a:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <pos_o.2656>
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	e4 5e       	subi	r30, 0xE4	; 228
    2f52:	fb 4f       	sbci	r31, 0xFB	; 251
    2f54:	80 81       	ld	r24, Z
    2f56:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2f5a:	e2 c0       	rjmp	.+452    	; 0x3120 <__vector_24__bottom+0x2ec>
			twcr_new |= _BV(TWSTO);				// Send STOP - no more data available
		}
		break;

	case TWI_TWSR_M_SLAW_DATA_NACK:				// Data byte sent and NACK received
		s_tx_lock = 0;
    2f5c:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <s_tx_lock>
		s_twi_tx_done();						// Message failure
    2f60:	93 de       	rcall	.-730    	; 0x2c88 <s_twi_tx_done>
		twcr_new |= _BV(TWSTO);					// Send STOP - due to an error or slave not ready situation
    2f62:	c0 61       	ori	r28, 0x10	; 16
		break;
    2f64:	dd c0       	rjmp	.+442    	; 0x3120 <__vector_24__bottom+0x2ec>

	case TWI_TWSR_M_SLAW_ARBIT_LOST:			// Arbitration lost
		twcr_new |= _BV(TWSTA);					// Send START (again)
    2f66:	c0 62       	ori	r28, 0x20	; 32
		break;
    2f68:	db c0       	rjmp	.+438    	; 0x3120 <__vector_24__bottom+0x2ec>
	case TWI_TWSR_M_SLAR_DATA_ACK:
		nop();
		break;

	case TWI_TWSR_M_SLAR_DATA_NACK:
		nop();
    2f6a:	00 00       	nop
		break;
    2f6c:	d9 c0       	rjmp	.+434    	; 0x3120 <__vector_24__bottom+0x2ec>


	/* Slave Receiver Mode */

	case TWI_TWSR_S_SLAW_MYADDR_RECEIVED:		// SLA+W received and ACK returned
		nop();
    2f6e:	00 00       	nop
		// fall-through.
	case TWI_TWSR_S_SLAW_MYADDR_ARBIT_LOST:
		s_rx_lock = 1;
    2f70:	11 e0       	ldi	r17, 0x01	; 1
    2f72:	10 93 1b 04 	sts	0x041B, r17	; 0x80041b <s_rx_lock>
		mem_set(s_rx_d, 8, 0x00);
    2f76:	40 e0       	ldi	r20, 0x00	; 0
    2f78:	68 e0       	ldi	r22, 0x08	; 8
    2f7a:	83 e1       	ldi	r24, 0x13	; 19
    2f7c:	94 e0       	ldi	r25, 0x04	; 4
    2f7e:	23 d1       	rcall	.+582    	; 0x31c6 <mem_set>
		s_rx_d[0] = twd >> 1;					// [0]=Target address (== MYADDR)
    2f80:	d6 95       	lsr	r29
    2f82:	d0 93 13 04 	sts	0x0413, r29	; 0x800413 <s_rx_d>
		pos_i = 1;								// Starting of reception
    2f86:	10 93 0f 04 	sts	0x040F, r17	; 0x80040f <pos_i.2655>
		twcr_new |= _BV(TWEA);					// Send ACK
    2f8a:	c0 64       	ori	r28, 0x40	; 64
		break;
    2f8c:	c9 c0       	rjmp	.+402    	; 0x3120 <__vector_24__bottom+0x2ec>

	case TWI_TWSR_S_SLAW_OMNIADDR_RECEIVED:		// GCA received and ACK sent
		nop();
    2f8e:	00 00       	nop
		// fall-through.
	case TWI_TWSR_S_SLAW_OMNIADDR_ARBIT_LOST:
		s_rx_lock = 1;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <s_rx_lock>
		s_rx_d[0] = twd >> 1;					// GCA
    2f96:	d6 95       	lsr	r29
    2f98:	d0 93 13 04 	sts	0x0413, r29	; 0x800413 <s_rx_d>
		pos_i = 1;								// Starting of reception
    2f9c:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <pos_i.2655>
		twcr_new |= _BV(TWEA);					// Send after next coming data byte ACK
    2fa0:	c0 64       	ori	r28, 0x40	; 64
		break;
    2fa2:	be c0       	rjmp	.+380    	; 0x3120 <__vector_24__bottom+0x2ec>

	case TWI_TWSR_S_SLAW_MYADDR_DATA_ACK:		// Data after SLA+W received
		nop();
    2fa4:	00 00       	nop
		// fall-through.
	case TWI_TWSR_S_SLAW_OMNIADDR_DATA_ACK:
		if (cnt_i != 0b1111) {					// Closed parameter form
    2fa6:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <cnt_i.2657>
    2faa:	8f 30       	cpi	r24, 0x0F	; 15
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <__vector_24__bottom+0x17c>
    2fae:	60 c0       	rjmp	.+192    	; 0x3070 <__vector_24__bottom+0x23c>
			if (pos_i <= 0b1110) {
    2fb0:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <pos_i.2655>
    2fb4:	9f 30       	cpi	r25, 0x0F	; 15
    2fb6:	08 f0       	brcs	.+2      	; 0x2fba <__vector_24__bottom+0x186>
    2fb8:	5f c0       	rjmp	.+190    	; 0x3078 <__vector_24__bottom+0x244>
				s_rx_d[pos_i] = twd;			// [1]=cmd, [2..]=parameters
    2fba:	e9 2f       	mov	r30, r25
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	ed 5e       	subi	r30, 0xED	; 237
    2fc0:	fb 4f       	sbci	r31, 0xFB	; 251
    2fc2:	d0 83       	st	Z, r29
			}
			if (pos_i == 1) {
    2fc4:	91 30       	cpi	r25, 0x01	; 1
    2fc6:	09 f0       	breq	.+2      	; 0x2fca <__vector_24__bottom+0x196>
    2fc8:	49 c0       	rjmp	.+146    	; 0x305c <__vector_24__bottom+0x228>
				/* Load receive counter */
				if (s_rx_d[0] == TWI_SLAVE_ADDR_SMARTLCD) {
    2fca:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <s_rx_d>
    2fce:	80 33       	cpi	r24, 0x30	; 48
    2fd0:	49 f4       	brne	.+18     	; 0x2fe4 <__vector_24__bottom+0x1b0>
					cnt_i = ((s_rx_d[1] >> 5) & 0b111) + 1;	// encoded parameter count
    2fd2:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <s_rx_d+0x1>
    2fd6:	82 95       	swap	r24
    2fd8:	86 95       	lsr	r24
    2fda:	87 70       	andi	r24, 0x07	; 7
    2fdc:	8f 5f       	subi	r24, 0xFF	; 255
    2fde:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <cnt_i.2657>
    2fe2:	3e c0       	rjmp	.+124    	; 0x3060 <__vector_24__bottom+0x22c>

				} else if (s_rx_d[0] == TWI_SLAVE_ADDR_10MHZREFOSC) {
    2fe4:	82 32       	cpi	r24, 0x22	; 34
    2fe6:	e1 f5       	brne	.+120    	; 0x3060 <__vector_24__bottom+0x22c>
					cnt_i = 0;
    2fe8:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <cnt_i.2657>
					cnt_o = 0;
    2fec:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <cnt_o.2658>

					switch (s_rx_d[1]) {
    2ff0:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <s_rx_d+0x1>
    2ff4:	84 38       	cpi	r24, 0x84	; 132
    2ff6:	11 f1       	breq	.+68     	; 0x303c <__vector_24__bottom+0x208>
    2ff8:	78 f4       	brcc	.+30     	; 0x3018 <__vector_24__bottom+0x1e4>
    2ffa:	80 38       	cpi	r24, 0x80	; 128
    2ffc:	59 f1       	breq	.+86     	; 0x3054 <__vector_24__bottom+0x220>
    2ffe:	48 f4       	brcc	.+18     	; 0x3012 <__vector_24__bottom+0x1de>
    3000:	88 23       	and	r24, r24
    3002:	c1 f0       	breq	.+48     	; 0x3034 <__vector_24__bottom+0x200>
    3004:	81 30       	cpi	r24, 0x01	; 1
    3006:	61 f5       	brne	.+88     	; 0x3060 <__vector_24__bottom+0x22c>
						case TWI_SMART_LCD_CMD_NOOP:
							cnt_i = 1;
							break;

						case TWI_SMART_LCD_CMD_GETVER:
							cnt_i = 1;
    3008:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <cnt_i.2657>
							cnt_o = 1;
    300c:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <cnt_o.2658>
							break;
    3010:	27 c0       	rjmp	.+78     	; 0x3060 <__vector_24__bottom+0x22c>

				} else if (s_rx_d[0] == TWI_SLAVE_ADDR_10MHZREFOSC) {
					cnt_i = 0;
					cnt_o = 0;

					switch (s_rx_d[1]) {
    3012:	82 38       	cpi	r24, 0x82	; 130
    3014:	d9 f4       	brne	.+54     	; 0x304c <__vector_24__bottom+0x218>
    3016:	16 c0       	rjmp	.+44     	; 0x3044 <__vector_24__bottom+0x210>
    3018:	8b 38       	cpi	r24, 0x8B	; 139
    301a:	38 f4       	brcc	.+14     	; 0x302a <__vector_24__bottom+0x1f6>
    301c:	89 38       	cpi	r24, 0x89	; 137
    301e:	70 f4       	brcc	.+28     	; 0x303c <__vector_24__bottom+0x208>
    3020:	85 38       	cpi	r24, 0x85	; 133
    3022:	81 f0       	breq	.+32     	; 0x3044 <__vector_24__bottom+0x210>
    3024:	88 38       	cpi	r24, 0x88	; 136
    3026:	71 f0       	breq	.+28     	; 0x3044 <__vector_24__bottom+0x210>
    3028:	1b c0       	rjmp	.+54     	; 0x3060 <__vector_24__bottom+0x22c>
    302a:	8d 38       	cpi	r24, 0x8D	; 141
    302c:	98 f0       	brcs	.+38     	; 0x3054 <__vector_24__bottom+0x220>
    302e:	8d 38       	cpi	r24, 0x8D	; 141
    3030:	29 f0       	breq	.+10     	; 0x303c <__vector_24__bottom+0x208>
    3032:	16 c0       	rjmp	.+44     	; 0x3060 <__vector_24__bottom+0x22c>
						case TWI_SMART_LCD_CMD_NOOP:
							cnt_i = 1;
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <cnt_i.2657>
							break;
    303a:	12 c0       	rjmp	.+36     	; 0x3060 <__vector_24__bottom+0x22c>

						case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
						case TWI_SMART_LCD_CMD_SHOW_DOP:
						case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
						case TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT:
							cnt_i = 3;
    303c:	83 e0       	ldi	r24, 0x03	; 3
    303e:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <cnt_i.2657>
							break;
    3042:	0e c0       	rjmp	.+28     	; 0x3060 <__vector_24__bottom+0x22c>

						case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
						case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
						case TWI_SMART_LCD_CMD_SHOW_SATS:
							cnt_i = 4;
    3044:	84 e0       	ldi	r24, 0x04	; 4
    3046:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <cnt_i.2657>
							break;
    304a:	0a c0       	rjmp	.+20     	; 0x3060 <__vector_24__bottom+0x22c>

						case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
						case TWI_SMART_LCD_CMD_SHOW_PPM:
							cnt_i = 5;
    304c:	85 e0       	ldi	r24, 0x05	; 5
    304e:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <cnt_i.2657>
							break;
    3052:	06 c0       	rjmp	.+12     	; 0x3060 <__vector_24__bottom+0x22c>

						case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
						case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
						case TWI_SMART_LCD_CMD_SHOW_POS_LON:
							cnt_i = 6;
    3054:	86 e0       	ldi	r24, 0x06	; 6
    3056:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <cnt_i.2657>
							break;
    305a:	02 c0       	rjmp	.+4      	; 0x3060 <__vector_24__bottom+0x22c>
					}
				}
			}

			if (pos_i < 0b1110) {
    305c:	9e 30       	cpi	r25, 0x0E	; 14
    305e:	60 f4       	brcc	.+24     	; 0x3078 <__vector_24__bottom+0x244>
				if (++pos_i <= cnt_i) {
    3060:	9f 5f       	subi	r25, 0xFF	; 255
    3062:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <pos_i.2655>
    3066:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <cnt_i.2657>
    306a:	89 17       	cp	r24, r25
    306c:	28 f0       	brcs	.+10     	; 0x3078 <__vector_24__bottom+0x244>
    306e:	24 c0       	rjmp	.+72     	; 0x30b8 <__vector_24__bottom+0x284>
			} else {
				twcr_new &= ~_BV(TWEA);			// Send NACK
			}

		} else {								// Open parameter form
			s_rx_d[2] = twd;
    3070:	d0 93 15 04 	sts	0x0415, r29	; 0x800415 <s_rx_d+0x2>
			if (!s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i)) {
				twcr_new |= _BV(TWEA);			// Send ACK
			} else {
				pos_i = 0;
    3074:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <pos_i.2655>
				twcr_new &= ~_BV(TWEA);			// Send NACK
    3078:	c4 2f       	mov	r28, r20
    307a:	c5 70       	andi	r28, 0x05	; 5
    307c:	51 c0       	rjmp	.+162    	; 0x3120 <__vector_24__bottom+0x2ec>

	case TWI_TWSR_S_SLAW_MYADDR_DATA_NACK:		// NACK after last data byte sent
		nop();
		// fall-through.
	case TWI_TWSR_S_SLAW_OMNIADDR_DATA_NACK:
		s_rx_lock = 0;
    307e:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <s_rx_lock>
		if (cnt_i != 0b1111) {
    3082:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <cnt_i.2657>
    3086:	8f 30       	cpi	r24, 0x0F	; 15
    3088:	09 f0       	breq	.+2      	; 0x308c <__vector_24__bottom+0x258>
			s_isr_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    308a:	0f de       	rcall	.-994    	; 0x2caa <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2>
		} else {
			s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    308c:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <pos_i.2655>
		cnt_i = 0;
    3090:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <cnt_i.2657>
		mem_set(s_rx_d, 8, 0x00);
    3094:	40 e0       	ldi	r20, 0x00	; 0
    3096:	68 e0       	ldi	r22, 0x08	; 8
    3098:	83 e1       	ldi	r24, 0x13	; 19
    309a:	94 e0       	ldi	r25, 0x04	; 4
    309c:	94 d0       	rcall	.+296    	; 0x31c6 <mem_set>
		s_rx_lock = 0;
    309e:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <s_rx_lock>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    30a2:	c0 64       	ori	r28, 0x40	; 64
		break;
    30a4:	3d c0       	rjmp	.+122    	; 0x3120 <__vector_24__bottom+0x2ec>

	case TWI_TWSR_S_SLAW_STOP_REPEATEDSTART_RECEIVED:	// STOP or RESTART received while still addressed as slave
		s_rx_lock = 0;
    30a6:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <s_rx_lock>
		if (cnt_i != 0b1111) {
    30aa:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <cnt_i.2657>
    30ae:	8f 30       	cpi	r24, 0x0F	; 15
    30b0:	09 f0       	breq	.+2      	; 0x30b4 <__vector_24__bottom+0x280>
			s_isr_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    30b2:	fb dd       	rcall	.-1034   	; 0x2caa <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2>
		} else {
			s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    30b4:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <pos_i.2655>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    30b8:	c0 64       	ori	r28, 0x40	; 64
		break;
    30ba:	32 c0       	rjmp	.+100    	; 0x3120 <__vector_24__bottom+0x2ec>


	/* Slave Transmitter Mode */

	case TWI_TWSR_S_SLAR_MYADDR_DATA_ACK:		// SLA+R received and ACK has been returned
		nop();
    30bc:	00 00       	nop
		// fall-through.
	case TWI_TWSR_S_SLAR_MYADDR_ARBIT_LOST:
		s_rx_lock = 1;
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <s_rx_lock>
		pos_o = 0;
    30c4:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <pos_o.2656>
		TWDR = cnt_o > pos_o ?  s_rx_d[pos_o++] : 0;
    30c8:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <cnt_o.2658>
    30cc:	99 23       	and	r25, r25
    30ce:	a1 f0       	breq	.+40     	; 0x30f8 <__vector_24__bottom+0x2c4>
    30d0:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <pos_o.2656>
    30d4:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <s_rx_d>
    30d8:	10 c0       	rjmp	.+32     	; 0x30fa <__vector_24__bottom+0x2c6>
			twcr_new &= ~_BV(TWEA);				// No more data to send NACK
		}
		break;

	case TWI_TWSR_S_SLAR_OMNIADDR_DATA_ACK:		// Data sent and ACK has been returned
		TWDR = cnt_o > pos_o ?  s_rx_d[pos_o++] : 0;
    30da:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <pos_o.2656>
    30de:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <cnt_o.2658>
    30e2:	e8 17       	cp	r30, r24
    30e4:	48 f4       	brcc	.+18     	; 0x30f8 <__vector_24__bottom+0x2c4>
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	8e 0f       	add	r24, r30
    30ea:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <pos_o.2656>
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	ed 5e       	subi	r30, 0xED	; 237
    30f2:	fb 4f       	sbci	r31, 0xFB	; 251
    30f4:	80 81       	ld	r24, Z
    30f6:	01 c0       	rjmp	.+2      	; 0x30fa <__vector_24__bottom+0x2c6>
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		if (cnt_o > pos_o) {
    30fe:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <cnt_o.2658>
    3102:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <pos_o.2656>
    3106:	89 17       	cp	r24, r25
    3108:	08 f0       	brcs	.+2      	; 0x310c <__vector_24__bottom+0x2d8>
    310a:	b6 cf       	rjmp	.-148    	; 0x3078 <__vector_24__bottom+0x244>
    310c:	d5 cf       	rjmp	.-86     	; 0x30b8 <__vector_24__bottom+0x284>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
		break;

	case TWI_TWSR_S_SLAR_MYADDR_LASTDATA_ACK:	// Last data sent and ACK has been returned
		/* message transmitted successfully in slave mode */
		s_rx_lock = 0;
    310e:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <s_rx_lock>
    3112:	d2 cf       	rjmp	.-92     	; 0x30b8 <__vector_24__bottom+0x284>
		s_rx_lock = 0;
		twcr_new |= _BV(TWSTO) | _BV(TWEA);		// TWI goes to unaddressed, be active again
		break;

	default:
		nop();
    3114:	00 00       	nop
		s_tx_lock = 0;
    3116:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <s_tx_lock>
		s_rx_lock = 0;
    311a:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <s_rx_lock>
		twcr_new |= _BV(TWSTO) | _BV(TWEA);		// TWI goes to unaddressed, be active again
    311e:	c0 65       	ori	r28, 0x50	; 80
	}

	return twcr_new;
}
    3120:	8c 2f       	mov	r24, r28
    3122:	df 91       	pop	r29
    3124:	cf 91       	pop	r28
    3126:	1f 91       	pop	r17
    3128:	08 95       	ret

0000312a <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    312a:	08 95       	ret

0000312c <cpu_irq_save>:
/* MAIN section */

void halt(void)
{
	/* MAIN Loop Shutdown */
	runmode = 0;
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
    3130:	1f 92       	push	r1
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	8f b7       	in	r24, 0x3f	; 63
    3138:	89 83       	std	Y+1, r24	; 0x01
    313a:	f8 94       	cli
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	0f 90       	pop	r0
    3140:	df 91       	pop	r29
    3142:	cf 91       	pop	r28
    3144:	08 95       	ret

00003146 <get_abs_time>:
    3146:	8f 92       	push	r8
    3148:	9f 92       	push	r9
    314a:	af 92       	push	r10
    314c:	bf 92       	push	r11
    314e:	cf 92       	push	r12
    3150:	df 92       	push	r13
    3152:	ef 92       	push	r14
    3154:	ff 92       	push	r15
    3156:	ea df       	rcall	.-44     	; 0x312c <cpu_irq_save>
    3158:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    315c:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3160:	c0 90 6a 04 	lds	r12, 0x046A	; 0x80046a <g_timer_abs_msb>
    3164:	d0 90 6b 04 	lds	r13, 0x046B	; 0x80046b <g_timer_abs_msb+0x1>
    3168:	e0 90 6c 04 	lds	r14, 0x046C	; 0x80046c <g_timer_abs_msb+0x2>
    316c:	f0 90 6d 04 	lds	r15, 0x046D	; 0x80046d <g_timer_abs_msb+0x3>
    3170:	8f bf       	out	0x3f, r24	; 63
    3172:	89 2f       	mov	r24, r25
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	92 2b       	or	r25, r18
    3178:	bc 01       	movw	r22, r24
    317a:	99 0f       	add	r25, r25
    317c:	88 0b       	sbc	r24, r24
    317e:	99 0b       	sbc	r25, r25
    3180:	2c d3       	rcall	.+1624   	; 0x37da <__floatsisf>
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	34 e2       	ldi	r19, 0x24	; 36
    3186:	44 ef       	ldi	r20, 0xF4	; 244
    3188:	5a e4       	ldi	r21, 0x4A	; 74
    318a:	8c d2       	rcall	.+1304   	; 0x36a4 <__divsf3>
    318c:	4b 01       	movw	r8, r22
    318e:	5c 01       	movw	r10, r24
    3190:	c7 01       	movw	r24, r14
    3192:	b6 01       	movw	r22, r12
    3194:	20 d3       	rcall	.+1600   	; 0x37d6 <__floatunsisf>
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	54 e4       	ldi	r21, 0x44	; 68
    319e:	24 d4       	rcall	.+2120   	; 0x39e8 <__mulsf3>
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	34 e2       	ldi	r19, 0x24	; 36
    31a4:	44 ef       	ldi	r20, 0xF4	; 244
    31a6:	5a e4       	ldi	r21, 0x4A	; 74
    31a8:	7d d2       	rcall	.+1274   	; 0x36a4 <__divsf3>
    31aa:	9b 01       	movw	r18, r22
    31ac:	ac 01       	movw	r20, r24
    31ae:	c5 01       	movw	r24, r10
    31b0:	b4 01       	movw	r22, r8
    31b2:	10 d2       	rcall	.+1056   	; 0x35d4 <__addsf3>
    31b4:	ff 90       	pop	r15
    31b6:	ef 90       	pop	r14
    31b8:	df 90       	pop	r13
    31ba:	cf 90       	pop	r12
    31bc:	bf 90       	pop	r11
    31be:	af 90       	pop	r10
    31c0:	9f 90       	pop	r9
    31c2:	8f 90       	pop	r8
    31c4:	08 95       	ret

000031c6 <mem_set>:
    31c6:	70 e0       	ldi	r23, 0x00	; 0
    31c8:	61 15       	cp	r22, r1
    31ca:	71 05       	cpc	r23, r1
    31cc:	31 f0       	breq	.+12     	; 0x31da <mem_set+0x14>
    31ce:	fc 01       	movw	r30, r24
    31d0:	41 93       	st	Z+, r20
    31d2:	cf 01       	movw	r24, r30
    31d4:	61 50       	subi	r22, 0x01	; 1
    31d6:	71 09       	sbc	r23, r1
    31d8:	f7 cf       	rjmp	.-18     	; 0x31c8 <mem_set+0x2>
    31da:	08 95       	ret

000031dc <s_task>:
    31dc:	4f 92       	push	r4
    31de:	5f 92       	push	r5
    31e0:	6f 92       	push	r6
    31e2:	7f 92       	push	r7
    31e4:	8f 92       	push	r8
    31e6:	9f 92       	push	r9
    31e8:	af 92       	push	r10
    31ea:	bf 92       	push	r11
    31ec:	df 92       	push	r13
    31ee:	ef 92       	push	r14
    31f0:	ff 92       	push	r15
    31f2:	0f 93       	push	r16
    31f4:	1f 93       	push	r17
    31f6:	cf 93       	push	r28
    31f8:	df 93       	push	r29
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
    31fe:	a8 97       	sbiw	r28, 0x28	; 40
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	90 df       	rcall	.-224    	; 0x312c <cpu_irq_save>
    320c:	40 90 61 04 	lds	r4, 0x0461	; 0x800461 <g_adc_temp>
    3210:	50 90 62 04 	lds	r5, 0x0462	; 0x800462 <g_adc_temp+0x1>
    3214:	60 90 63 04 	lds	r6, 0x0463	; 0x800463 <g_adc_temp+0x2>
    3218:	70 90 64 04 	lds	r7, 0x0464	; 0x800464 <g_adc_temp+0x3>
    321c:	80 90 65 04 	lds	r8, 0x0465	; 0x800465 <g_adc_light>
    3220:	90 90 66 04 	lds	r9, 0x0466	; 0x800466 <g_adc_light+0x1>
    3224:	a0 90 67 04 	lds	r10, 0x0467	; 0x800467 <g_adc_light+0x2>
    3228:	b0 90 68 04 	lds	r11, 0x0468	; 0x800468 <g_adc_light+0x3>
    322c:	10 91 57 04 	lds	r17, 0x0457	; 0x800457 <g_status>
    3230:	10 fb       	bst	r17, 0
    3232:	ee 24       	eor	r14, r14
    3234:	e0 f8       	bld	r14, 0
    3236:	16 95       	lsr	r17
    3238:	11 70       	andi	r17, 0x01	; 1
    323a:	8f bf       	out	0x3f, r24	; 63
    323c:	77 df       	rcall	.-274    	; 0x312c <cpu_irq_save>
    323e:	f8 2e       	mov	r15, r24
    3240:	29 e1       	ldi	r18, 0x19	; 25
    3242:	37 ec       	ldi	r19, 0xC7	; 199
    3244:	4f ea       	ldi	r20, 0xAF	; 175
    3246:	53 e4       	ldi	r21, 0x43	; 67
    3248:	c3 01       	movw	r24, r6
    324a:	b2 01       	movw	r22, r4
    324c:	c2 d1       	rcall	.+900    	; 0x35d2 <__subsf3>
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 ea       	ldi	r19, 0xA0	; 160
    3252:	47 e8       	ldi	r20, 0x87	; 135
    3254:	5f e3       	ldi	r21, 0x3F	; 63
    3256:	c8 d3       	rcall	.+1936   	; 0x39e8 <__mulsf3>
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	48 ec       	ldi	r20, 0xC8	; 200
    325e:	51 e4       	ldi	r21, 0x41	; 65
    3260:	b9 d1       	rcall	.+882    	; 0x35d4 <__addsf3>
    3262:	60 93 5d 04 	sts	0x045D, r22	; 0x80045d <g_temp>
    3266:	70 93 5e 04 	sts	0x045E, r23	; 0x80045e <g_temp+0x1>
    326a:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <g_temp+0x2>
    326e:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <g_temp+0x3>
    3272:	ff be       	out	0x3f, r15	; 63
    3274:	c5 01       	movw	r24, r10
    3276:	b4 01       	movw	r22, r8
    3278:	82 d2       	rcall	.+1284   	; 0x377e <__fixunssfsi>
    327a:	66 3b       	cpi	r22, 0xB6	; 182
    327c:	23 e0       	ldi	r18, 0x03	; 3
    327e:	72 07       	cpc	r23, r18
    3280:	00 f5       	brcc	.+64     	; 0x32c2 <s_task+0xe6>
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	a7 d2       	rcall	.+1358   	; 0x37d6 <__floatunsisf>
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e2       	ldi	r20, 0x20	; 32
    328e:	51 e4       	ldi	r21, 0x41	; 65
    3290:	a0 d1       	rcall	.+832    	; 0x35d2 <__subsf3>
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e8       	ldi	r19, 0x80	; 128
    3296:	4d e6       	ldi	r20, 0x6D	; 109
    3298:	54 e4       	ldi	r21, 0x44	; 68
    329a:	04 d2       	rcall	.+1032   	; 0x36a4 <__divsf3>
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	45 e7       	ldi	r20, 0x75	; 117
    32a2:	53 e4       	ldi	r21, 0x43	; 67
    32a4:	a1 d3       	rcall	.+1858   	; 0x39e8 <__mulsf3>
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	40 e2       	ldi	r20, 0x20	; 32
    32ac:	51 e4       	ldi	r21, 0x41	; 65
    32ae:	92 d1       	rcall	.+804    	; 0x35d4 <__addsf3>
    32b0:	66 d2       	rcall	.+1228   	; 0x377e <__fixunssfsi>
    32b2:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    32b6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    32ba:	80 68       	ori	r24, 0x80	; 128
    32bc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    32c0:	07 c0       	rjmp	.+14     	; 0x32d0 <s_task+0xf4>
    32c2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    32c6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    32ca:	8f 73       	andi	r24, 0x3F	; 63
    32cc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    32d0:	88 e2       	ldi	r24, 0x28	; 40
    32d2:	d8 2e       	mov	r13, r24
    32d4:	11 23       	and	r17, r17
    32d6:	21 f0       	breq	.+8      	; 0x32e0 <s_task+0x104>
    32d8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <lcd_show_new_data>
    32dc:	f8 2e       	mov	r15, r24
    32de:	01 c0       	rjmp	.+2      	; 0x32e2 <s_task+0x106>
    32e0:	f1 2c       	mov	r15, r1
    32e2:	ee 20       	and	r14, r14
    32e4:	11 f0       	breq	.+4      	; 0x32ea <s_task+0x10e>
    32e6:	3c d9       	rcall	.-3464   	; 0x2560 <lcd_animation_loop>
    32e8:	29 c0       	rjmp	.+82     	; 0x333c <s_task+0x160>
    32ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <s_last_animation.3056>
    32ee:	88 23       	and	r24, r24
    32f0:	29 f1       	breq	.+74     	; 0x333c <s_task+0x160>
    32f2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <s_last_animation.3056>
    32f6:	0e 94 85 0c 	call	0x190a	; 0x190a <lcd_cls>
    32fa:	01 e0       	ldi	r16, 0x01	; 1
    32fc:	20 e8       	ldi	r18, 0x80	; 128
    32fe:	40 ef       	ldi	r20, 0xF0	; 240
    3300:	60 e0       	ldi	r22, 0x00	; 0
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	0e 94 53 04 	call	0x8a6	; 0x8a6 <gfx_mono_generic_draw_rect>
    3308:	e2 e2       	ldi	r30, 0x22	; 34
    330a:	f3 e0       	ldi	r31, 0x03	; 3
    330c:	de 01       	movw	r26, r28
    330e:	11 96       	adiw	r26, 0x01	; 1
    3310:	8d 2d       	mov	r24, r13
    3312:	01 90       	ld	r0, Z+
    3314:	0d 92       	st	X+, r0
    3316:	8a 95       	dec	r24
    3318:	e1 f7       	brne	.-8      	; 0x3312 <s_task+0x136>
    331a:	95 dc       	rcall	.-1750   	; 0x2c46 <lcd_get_sysfont>
    331c:	9c 01       	movw	r18, r24
    331e:	42 e0       	ldi	r20, 0x02	; 2
    3320:	63 e0       	ldi	r22, 0x03	; 3
    3322:	ce 01       	movw	r24, r28
    3324:	01 96       	adiw	r24, 0x01	; 1
    3326:	0e 94 ca 06 	call	0xd94	; 0xd94 <gfx_mono_draw_string>
    332a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <lcd_show_template>
    332e:	fe de       	rcall	.-516    	; 0x312c <cpu_irq_save>
    3330:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <g_status>
    3334:	92 60       	ori	r25, 0x02	; 2
    3336:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <g_status>
    333a:	8f bf       	out	0x3f, r24	; 63
    333c:	f1 10       	cpse	r15, r1
    333e:	ca cf       	rjmp	.-108    	; 0x32d4 <s_task+0xf8>
    3340:	a8 96       	adiw	r28, 0x28	; 40
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	f8 94       	cli
    3346:	de bf       	out	0x3e, r29	; 62
    3348:	0f be       	out	0x3f, r0	; 63
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	df 91       	pop	r29
    334e:	cf 91       	pop	r28
    3350:	1f 91       	pop	r17
    3352:	0f 91       	pop	r16
    3354:	ff 90       	pop	r15
    3356:	ef 90       	pop	r14
    3358:	df 90       	pop	r13
    335a:	bf 90       	pop	r11
    335c:	af 90       	pop	r10
    335e:	9f 90       	pop	r9
    3360:	8f 90       	pop	r8
    3362:	7f 90       	pop	r7
    3364:	6f 90       	pop	r6
    3366:	5f 90       	pop	r5
    3368:	4f 90       	pop	r4
    336a:	08 95       	ret

0000336c <main>:
}

int main (void)
{
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts,
	 * most critical pins are handled first.
	 */

	PORTC = 0b01111110;		// PC0: LDR-ADC in-NoPU, PC1: SW_I in-PU, PC2: SW_Q in-PU, PC3: LCD-CS out-HI
    3370:	8e e7       	ldi	r24, 0x7E	; 126
    3372:	88 b9       	out	0x08, r24	; 8
	DDRC  = 0b00001000;		// PC4: I2C-SDA in-PU-AF-TWI, PC5: I2C-SCL in-PU-AF-TWI, PC6: RESET in-PU, PC7: -
    3374:	88 e0       	ldi	r24, 0x08	; 8
    3376:	87 b9       	out	0x07, r24	; 7

	PORTB = 0b00010100;		// PB0: LCD-CD out-LO, PB1: AUDIO out-AF-OC1A, PB2: SW_P in-PU, PB3: LCDBL out-AF-OC2A,
    3378:	84 e1       	ldi	r24, 0x14	; 20
    337a:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0b11111011;		// PB4: LCD-R/!W out-HI, PB5: LCD-EN out-LO, PB6: LEDRD out-LO, LEDGN out-LO
    337c:	8b ef       	ldi	r24, 0xFB	; 251
    337e:	84 b9       	out	0x04, r24	; 4

	PORTD = 0xff;			// PD0..PD7: LCD-D0..LCD-D7 in-PU
    3380:	8f ef       	ldi	r24, 0xFF	; 255
    3382:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x00;
    3384:	1a b8       	out	0x0a, r1	; 10

	// Analog input: Digital Disable Register
	DIDR0 = 0b00000001;		// PC0: LDR-ADC
    3386:	c1 e0       	ldi	r28, 0x01	; 1
    3388:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

	/* Rapid I/O settings */
	s_io_preinit();

	/* Init of sub-modules */
	sysclk_init();	PRR = 0b11101011;			// For debugging this module has to be powered on, again
    338c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <sysclk_init>
    3390:	8b ee       	ldi	r24, 0xEB	; 235
    3392:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
static void s_tc_init(void)
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts. */

	/* Timer Synchronous Mode - prepare for  s_tc_start(void) */
	GTCCR = _BV(TSM)							// Timer Synchronous Mode active
    3396:	d3 e8       	ldi	r29, 0x83	; 131
    3398:	d3 bd       	out	0x23, r29	; 35
	{
	}

	/* TC1 - OC1A: Audio output @ 16-bit counter PWM, used: 9-bit resolution - overflows with 15625 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    339a:	68 e0       	ldi	r22, 0x08	; 8
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	0e 94 03 03 	call	0x606	; 0x606 <sysclk_enable_module>

		TCCR1A  = (0b10  << COM1A0)		 		// HI --> LO when compare value is reached - non-inverted PWM mode
    33a2:	82 e8       	ldi	r24, 0x82	; 130
    33a4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				| (0b10  << WGM10);				// WGM: 0b0110 = Fast PWM 9 bit

		TCCR1B  = ( 0b01 << WGM12)
    33a8:	89 e0       	ldi	r24, 0x09	; 9
    33aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
				| (0b001 << CS10);				// CLKio DIV1 = 8 MHz

		TCNT1H  = 0b00000000           ;		// Clear current value for synchronous start (when restarting without reset)
    33ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		barrier();
		TCNT1L	=            0b00000000;
    33b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

		OCR1AH  =        0b0           ;		// Mid-range compare value for zero audio output
    33b6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL  =            0b10000000;
    33ba:	80 e8       	ldi	r24, 0x80	; 128
    33bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

		TIMSK1  = _BV(TOIE1);					// TOIE1 interrupt
    33c0:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		TIFR1   = 0b00100111;					// Clear all flags (when restarting without reset)
    33c4:	87 e2       	ldi	r24, 0x27	; 39
    33c6:	86 bb       	out	0x16, r24	; 22
	}

	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    33c8:	60 e4       	ldi	r22, 0x40	; 64
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	0e 94 03 03 	call	0x606	; 0x606 <sysclk_enable_module>

		TCCR2A  = (0b10  << COM2A0)				// HI --> LO when compare value is reached - non-inverted PWM mode
    33d0:	d0 93 b0 00 	sts	0x00B0, r29	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				| (0b11  << WGM20);				// WGM: 0b011 = Fast PWM mode 8 bit

		TCCR2B  = ( 0b0  << WGM22)
    33d4:	85 e0       	ldi	r24, 0x05	; 5
    33d6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
				| (0b101 << CS20);				// CLKio DIV 128 = 62500 Hz --> / 2**8 = 244 Hz looping rate

		TCNT2   = 0;							// Clear current value for synchronous start (when restarting without reset)
    33da:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

		OCR2A   = 0x00;							// LCD backlight dimmed down
    33de:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

		TIMSK2  = 0b00000001;					// TOIE2: overflow interrupt
    33e2:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		TIFR2   = 0b00000111;					// Clear all flags
    33e6:	87 e0       	ldi	r24, 0x07	; 7
    33e8:	87 bb       	out	0x17, r24	; 23

		ASSR    = 0;							// No async. TOSC1 mode
    33ea:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
}


static void s_adc_init(void)
{
	sysclk_enable_module(POWER_RED_REG0, PRADC_bm);	// enable ADC sub-module
    33ee:	61 e0       	ldi	r22, 0x01	; 1
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	0e 94 03 03 	call	0x606	; 0x606 <sysclk_enable_module>
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    33f6:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    33fa:	87 e8       	ldi	r24, 0x87	; 135
    33fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    3400:	80 ec       	ldi	r24, 0xC0	; 192
    3402:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	adc_disable_digital_inputs(_BV(ADC0D));		// disable the digital input on the ADC0 port

	adc_init(ADC_PRESCALER_DIV128);
	adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);

	ADCSRA |= _BV(ADIF);						// clear interrupt status bit by setting it to clear
    3406:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    340a:	80 61       	ori	r24, 0x10	; 16
    340c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}

/*  \brief Enable ADC interrupt */
static inline void adc_enable_interrupt(void)
{
	ADCSRA |= (1 << ADIE);
    3410:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3414:	88 60       	ori	r24, 0x08	; 8
    3416:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    341a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    341e:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
    3420:	86 60       	ori	r24, 0x06	; 6
	ADC_ADTS_REG = temp;
    3422:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
}

/*  \brief Enable ADC Auto Trigger */
static inline void adc_enable_autotrigger(void)
{
	ADCSRA |= (1 << ADATE);
    3426:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    342a:	80 62       	ori	r24, 0x20	; 32
    342c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ioport_init();
	s_tc_init();
	s_adc_init();

	/* I/O pins go active here */
	board_init();
    3430:	7c de       	rcall	.-776    	; 0x312a <board_init>
//@}
static inline reset_cause_t reset_cause_get_causes(void)
{
#if (MEGA_XX4 ||MEGA_XX4_A || MEGA_XX8 || MEGA_XX8_A || \
	MEGA_XX || MEGA_XX_UN2 || MEGA_XX0_1 || MEGA_RF || MEGA_UNCATEGORIZED) && !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t temp_mcsr = MCUSR ;
    3432:	84 b7       	in	r24, 0x34	; 52
    3434:	98 2f       	mov	r25, r24
    3436:	97 70       	andi	r25, 0x07	; 7

	reset_cause_t rc = reset_cause_get_causes();
	if (rc & CHIP_RESET_CAUSE_EXTRST	||
		rc & CHIP_RESET_CAUSE_BOD_CPU	||
    3438:	11 f4       	brne	.+4      	; 0x343e <main+0xd2>
		rc & CHIP_RESET_CAUSE_POR		||
    343a:	81 11       	cpse	r24, r1
    343c:	2b c0       	rjmp	.+86     	; 0x3494 <main+0x128>

/* HELPERS */

static void s_reset_global_vars(void)
{
	irqflags_t flags	= cpu_irq_save();
    343e:	76 de       	rcall	.-788    	; 0x312c <cpu_irq_save>
	cpu_irq_disable();
    3440:	f8 94       	cli

	g_adc_state			= ADC_STATE_PRE_LDR;
    3442:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <g_adc_state>
	g_adc_light			= 0.f;
    3446:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <g_adc_light>
    344a:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <g_adc_light+0x1>
    344e:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <g_adc_light+0x2>
    3452:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <g_adc_light+0x3>
	g_adc_temp			= 0.f;
    3456:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <g_adc_temp>
    345a:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <g_adc_temp+0x1>
    345e:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <g_adc_temp+0x2>
    3462:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <g_adc_temp+0x3>

	g_temp				= 25.f;
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	50 e0       	ldi	r21, 0x00	; 0
    346a:	68 ec       	ldi	r22, 0xC8	; 200
    346c:	71 e4       	ldi	r23, 0x41	; 65
    346e:	40 93 5d 04 	sts	0x045D, r20	; 0x80045d <g_temp>
    3472:	50 93 5e 04 	sts	0x045E, r21	; 0x80045e <g_temp+0x1>
    3476:	60 93 5f 04 	sts	0x045F, r22	; 0x80045f <g_temp+0x2>
    347a:	70 93 60 04 	sts	0x0460, r23	; 0x800460 <g_temp+0x3>
	g_lcdbl_dimmer		= 64;
    347e:	90 e4       	ldi	r25, 0x40	; 64
    3480:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <g_lcdbl_dimmer>

	g_status.doAnimation = false;
    3484:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <g_status>
	g_status.isAnimationStopped = false;
    3488:	9e 7f       	andi	r25, 0xFE	; 254
    348a:	9d 7f       	andi	r25, 0xFD	; 253
    348c:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <g_status>
    3490:	8f bf       	out	0x3f, r24	; 63
    3492:	0d c0       	rjmp	.+26     	; 0x34ae <main+0x142>
		rc & CHIP_RESET_CAUSE_POR		||
		!rc) {
		s_reset_global_vars();
	} else {
		/* DEBUG */
		g_u32_DEBUG21 = rc;
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	a0 e0       	ldi	r26, 0x00	; 0
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <g_u32_DEBUG21>
    349e:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <g_u32_DEBUG21+0x1>
    34a2:	a0 93 2a 04 	sts	0x042A, r26	; 0x80042a <g_u32_DEBUG21+0x2>
    34a6:	b0 93 2b 04 	sts	0x042B, r27	; 0x80042b <g_u32_DEBUG21+0x3>
		asm_break();
    34aa:	0e 94 f6 06 	call	0xdec	; 0xdec <asm_break>
	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
}

static void s_twi_init(uint8_t twi_addr, uint8_t twi_addr_bm)
{
	sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    34ae:	60 e8       	ldi	r22, 0x80	; 128
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	0e 94 03 03 	call	0x606	; 0x606 <sysclk_enable_module>

	irqflags_t flags = cpu_irq_save();
    34b6:	3a de       	rcall	.-908    	; 0x312c <cpu_irq_save>

	TWSR = (0b00 << TWPS0);						// Prescaler value = 1
    34b8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 2;									// TWI bit-rate = 400 kBit/sec @ 8 MHz when master mode active
    34bc:	92 e0       	ldi	r25, 0x02	; 2
    34be:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	TWAR  = (twi_addr    << 1) /* | (TWI_SLAVE_ADDR_GCE << TWGCE)*/ ;
    34c2:	94 e4       	ldi	r25, 0x44	; 68
    34c4:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	TWAMR = (twi_addr_bm << 1);
    34c8:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__TEXT_REGION_LENGTH__+0x7e00bd>

	TWCR = _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// Enable Acknowledge, ENable TWI port, Interrupt Enable, no START or STOP bit
    34cc:	95 e4       	ldi	r25, 0x45	; 69
    34ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    34d2:	8f bf       	out	0x3f, r24	; 63

	/* I2C interface - 10 MHz-Ref-Osc. second display */
	s_twi_init(TWI_SLAVE_ADDR_10MHZREFOSC, TWI_SLAVE_ADDR_BM);

	/* All interrupt sources prepared here - IRQ activation */
	cpu_irq_enable();
    34d4:	78 94       	sei
	/* TC0: not in use */
	/* TC1: Audio output @ 16-bit counter PWM, used: 10-bit resolution */
	/* TC2: LCD backlight w/ 8-bit resolution */
	{
		/* Timer Synchronous Mode - trigger */
		GTCCR = 0;								// trigger the sync for all counters
    34d6:	13 bc       	out	0x23, r1	; 35

	/* Start of sub-modules */
	s_tc_start();								// All clocks and PWM timers start here

	/* Initialize external components */
	lcd_init();
    34d8:	b9 db       	rcall	.-2190   	; 0x2c4c <lcd_init>
	lcd_test(0b11110001);						// Debugging purposes
    34da:	81 ef       	ldi	r24, 0xF1	; 241
    34dc:	d1 d9       	rcall	.-3166   	; 0x2880 <lcd_test>


	/* main loop */
	runmode = 1;
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <runmode>
	} while (more);
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    34e4:	c1 e0       	ldi	r28, 0x01	; 1
	lcd_test(0b11110001);						// Debugging purposes


	/* main loop */
	runmode = 1;
    while (runmode) {
    34e6:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <runmode>
    34ea:	88 23       	and	r24, r24
    34ec:	39 f0       	breq	.+14     	; 0x34fc <main+0x190>
	    s_task();
    34ee:	76 de       	rcall	.-788    	; 0x31dc <s_task>
	} while (more);
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    34f0:	c3 bf       	out	0x33, r28	; 51
		  | _BV(SE);							// enable sleep command

	__asm__ __volatile__ ("sleep" ::: "memory");
    34f2:	88 95       	sleep

	SMCR &= ~(_BV(SE));							// disable sleep command
    34f4:	83 b7       	in	r24, 0x33	; 51
    34f6:	8e 7f       	andi	r24, 0xFE	; 254
    34f8:	83 bf       	out	0x33, r24	; 51
    34fa:	f5 cf       	rjmp	.-22     	; 0x34e6 <main+0x17a>
	    s_enter_sleep(SLEEP_MODE_IDLE);
    }


	/* Shutdown external components */
	lcd_shutdown();
    34fc:	bc db       	rcall	.-2184   	; 0x2c76 <lcd_shutdown>

	cpu_irq_disable();
    34fe:	f8 94       	cli

	/* disable sub-modules */
	ACSR |= _BV(ACD);							// disable AnalogCompare sub-module
    3500:	80 b7       	in	r24, 0x30	; 48
    3502:	80 68       	ori	r24, 0x80	; 128
    3504:	80 bf       	out	0x30, r24	; 48

	sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    3506:	64 e0       	ldi	r22, 0x04	; 4
    3508:	80 e0       	ldi	r24, 0x00	; 0
    350a:	0e 94 19 03 	call	0x632	; 0x632 <sysclk_disable_module>
	sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    350e:	62 e0       	ldi	r22, 0x02	; 2
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	0e 94 19 03 	call	0x632	; 0x632 <sysclk_disable_module>
	cpu_irq_restore(flags);
}

static void s_twi_disable(void)
{
	irqflags_t flags = cpu_irq_save();
    3516:	0a de       	rcall	.-1004   	; 0x312c <cpu_irq_save>

	TWCR = _BV(TWEN);							// disable the interrupt source
    3518:	94 e0       	ldi	r25, 0x04	; 4
    351a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    351e:	3c 98       	cbi	0x07, 4	; 7
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
    3520:	44 9a       	sbi	0x08, 4	; 8
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    3522:	3d 98       	cbi	0x07, 5	; 7
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
    3524:	45 9a       	sbi	0x08, 5	; 8
	ioport_set_pin_mode(SDA_GPIO, IOPORT_MODE_PULLUP);

	ioport_set_pin_dir(SCL_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(SCL_GPIO, IOPORT_MODE_PULLUP);

	TWCR = 0;									// disable the TWI port
    3526:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    352a:	8f bf       	out	0x3f, r24	; 63

	cpu_irq_restore(flags);

	sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    352c:	60 e8       	ldi	r22, 0x80	; 128
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	0e 94 19 03 	call	0x632	; 0x632 <sysclk_disable_module>
}

/*  \brief Disable ADC interrupt */
static inline void adc_disable_interrupt(void)
{
	ADCSRA &= ~(1 << ADIE);
    3534:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3538:	87 7f       	andi	r24, 0xF7	; 247
    353a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}

/*  \brief Disable ADC Auto Trigger */
static inline void adc_disable_autotrigger(void)
{
	ADCSRA &= ~(1 << ADATE);
    353e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3542:	8f 7d       	andi	r24, 0xDF	; 223
    3544:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    3548:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    354c:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
	ADC_ADTS_REG = temp;
    354e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    3552:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    3556:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	adc_disable_autotrigger();
	adc_set_autotrigger_source(0);
	adc_set_admux(0);
	adc_disable_digital_inputs(0);

	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
    355a:	61 e0       	ldi	r22, 0x01	; 1
    355c:	80 e0       	ldi	r24, 0x00	; 0
    355e:	0e 94 19 03 	call	0x632	; 0x632 <sysclk_disable_module>
	}
}

static void s_tc_disable(void)
{
	irqflags_t flags = cpu_irq_save();
    3562:	e4 dd       	rcall	.-1080   	; 0x312c <cpu_irq_save>
    3564:	c8 2f       	mov	r28, r24

	/* TC0: not in use */
	{
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    3566:	60 e2       	ldi	r22, 0x20	; 32
    3568:	80 e0       	ldi	r24, 0x00	; 0
    356a:	0e 94 19 03 	call	0x632	; 0x632 <sysclk_disable_module>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    356e:	21 98       	cbi	0x04, 1	; 4
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
    3570:	29 98       	cbi	0x05, 1	; 5
	{
		// bring pin to high Z mode to reduce audible plop noise
		ioport_set_pin_dir(AUDIO_PWM, IOPORT_DIR_INPUT);
		ioport_set_pin_mode(AUDIO_PWM, IOPORT_MODE_PULLDOWN);

		TCCR1A  = 0;							// release alternate port function
    3572:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1B  = 0;
    3576:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		TCCR1C  = 0;
    357a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>

		TIMSK1  = 0;							// no interrupts
    357e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    3582:	68 e0       	ldi	r22, 0x08	; 8
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	0e 94 19 03 	call	0x632	; 0x632 <sysclk_disable_module>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
    358a:	23 9a       	sbi	0x04, 3	; 4
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    358c:	2b 98       	cbi	0x05, 3	; 5
	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		ioport_set_pin_dir(LCDBL_PWM, IOPORT_DIR_OUTPUT);
		ioport_set_pin_level(LCDBL_PWM, false);	// turn backlight off

		TCCR2A  = 0;							// release alternate port function
    358e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B  = 0;
    3592:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

		TIMSK2  = 0;							// no interrupts
    3596:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>

		ASSR    = 0;							// no async TOSC1 mode
    359a:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>

		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    359e:	60 e4       	ldi	r22, 0x40	; 64
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	0e 94 19 03 	call	0x632	; 0x632 <sysclk_disable_module>
 */

static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();
    35a6:	c2 dd       	rcall	.-1148   	; 0x312c <cpu_irq_save>

	ASM(
    35a8:	5f 93       	push	r21
    35aa:	50 e8       	ldi	r21, 0x80	; 128
    35ac:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    35b0:	50 e0       	ldi	r21, 0x00	; 0
    35b2:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    35b6:	5f 91       	pop	r21
    35b8:	8f bf       	out	0x3f, r24	; 63
    35ba:	cf bf       	out	0x3f, r28	; 63
	} while (more);
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    35bc:	89 e0       	ldi	r24, 0x09	; 9
    35be:	83 bf       	out	0x33, r24	; 51
		  | _BV(SE);							// enable sleep command

	__asm__ __volatile__ ("sleep" ::: "memory");
    35c0:	88 95       	sleep

	SMCR &= ~(_BV(SE));							// disable sleep command
    35c2:	83 b7       	in	r24, 0x33	; 51
    35c4:	8e 7f       	andi	r24, 0xFE	; 254
    35c6:	83 bf       	out	0x33, r24	; 51
	s_tc_disable();

    s_enter_sleep(SLEEP_MODE_PWR_DOWN);

    return retcode;								// should never be reached
}
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	08 95       	ret

000035d2 <__subsf3>:
    35d2:	50 58       	subi	r21, 0x80	; 128

000035d4 <__addsf3>:
    35d4:	bb 27       	eor	r27, r27
    35d6:	aa 27       	eor	r26, r26
    35d8:	0e d0       	rcall	.+28     	; 0x35f6 <__addsf3x>
    35da:	b1 c1       	rjmp	.+866    	; 0x393e <__fp_round>
    35dc:	a2 d1       	rcall	.+836    	; 0x3922 <__fp_pscA>
    35de:	30 f0       	brcs	.+12     	; 0x35ec <__addsf3+0x18>
    35e0:	a7 d1       	rcall	.+846    	; 0x3930 <__fp_pscB>
    35e2:	20 f0       	brcs	.+8      	; 0x35ec <__addsf3+0x18>
    35e4:	31 f4       	brne	.+12     	; 0x35f2 <__addsf3+0x1e>
    35e6:	9f 3f       	cpi	r25, 0xFF	; 255
    35e8:	11 f4       	brne	.+4      	; 0x35ee <__addsf3+0x1a>
    35ea:	1e f4       	brtc	.+6      	; 0x35f2 <__addsf3+0x1e>
    35ec:	97 c1       	rjmp	.+814    	; 0x391c <__fp_nan>
    35ee:	0e f4       	brtc	.+2      	; 0x35f2 <__addsf3+0x1e>
    35f0:	e0 95       	com	r30
    35f2:	e7 fb       	bst	r30, 7
    35f4:	64 c1       	rjmp	.+712    	; 0x38be <__fp_inf>

000035f6 <__addsf3x>:
    35f6:	e9 2f       	mov	r30, r25
    35f8:	b3 d1       	rcall	.+870    	; 0x3960 <__fp_split3>
    35fa:	80 f3       	brcs	.-32     	; 0x35dc <__addsf3+0x8>
    35fc:	ba 17       	cp	r27, r26
    35fe:	62 07       	cpc	r22, r18
    3600:	73 07       	cpc	r23, r19
    3602:	84 07       	cpc	r24, r20
    3604:	95 07       	cpc	r25, r21
    3606:	18 f0       	brcs	.+6      	; 0x360e <__addsf3x+0x18>
    3608:	71 f4       	brne	.+28     	; 0x3626 <__addsf3x+0x30>
    360a:	9e f5       	brtc	.+102    	; 0x3672 <__addsf3x+0x7c>
    360c:	e2 c1       	rjmp	.+964    	; 0x39d2 <__fp_zero>
    360e:	0e f4       	brtc	.+2      	; 0x3612 <__addsf3x+0x1c>
    3610:	e0 95       	com	r30
    3612:	0b 2e       	mov	r0, r27
    3614:	ba 2f       	mov	r27, r26
    3616:	a0 2d       	mov	r26, r0
    3618:	0b 01       	movw	r0, r22
    361a:	b9 01       	movw	r22, r18
    361c:	90 01       	movw	r18, r0
    361e:	0c 01       	movw	r0, r24
    3620:	ca 01       	movw	r24, r20
    3622:	a0 01       	movw	r20, r0
    3624:	11 24       	eor	r1, r1
    3626:	ff 27       	eor	r31, r31
    3628:	59 1b       	sub	r21, r25
    362a:	99 f0       	breq	.+38     	; 0x3652 <__addsf3x+0x5c>
    362c:	59 3f       	cpi	r21, 0xF9	; 249
    362e:	50 f4       	brcc	.+20     	; 0x3644 <__addsf3x+0x4e>
    3630:	50 3e       	cpi	r21, 0xE0	; 224
    3632:	68 f1       	brcs	.+90     	; 0x368e <__addsf3x+0x98>
    3634:	1a 16       	cp	r1, r26
    3636:	f0 40       	sbci	r31, 0x00	; 0
    3638:	a2 2f       	mov	r26, r18
    363a:	23 2f       	mov	r18, r19
    363c:	34 2f       	mov	r19, r20
    363e:	44 27       	eor	r20, r20
    3640:	58 5f       	subi	r21, 0xF8	; 248
    3642:	f3 cf       	rjmp	.-26     	; 0x362a <__addsf3x+0x34>
    3644:	46 95       	lsr	r20
    3646:	37 95       	ror	r19
    3648:	27 95       	ror	r18
    364a:	a7 95       	ror	r26
    364c:	f0 40       	sbci	r31, 0x00	; 0
    364e:	53 95       	inc	r21
    3650:	c9 f7       	brne	.-14     	; 0x3644 <__addsf3x+0x4e>
    3652:	7e f4       	brtc	.+30     	; 0x3672 <__addsf3x+0x7c>
    3654:	1f 16       	cp	r1, r31
    3656:	ba 0b       	sbc	r27, r26
    3658:	62 0b       	sbc	r22, r18
    365a:	73 0b       	sbc	r23, r19
    365c:	84 0b       	sbc	r24, r20
    365e:	ba f0       	brmi	.+46     	; 0x368e <__addsf3x+0x98>
    3660:	91 50       	subi	r25, 0x01	; 1
    3662:	a1 f0       	breq	.+40     	; 0x368c <__addsf3x+0x96>
    3664:	ff 0f       	add	r31, r31
    3666:	bb 1f       	adc	r27, r27
    3668:	66 1f       	adc	r22, r22
    366a:	77 1f       	adc	r23, r23
    366c:	88 1f       	adc	r24, r24
    366e:	c2 f7       	brpl	.-16     	; 0x3660 <__addsf3x+0x6a>
    3670:	0e c0       	rjmp	.+28     	; 0x368e <__addsf3x+0x98>
    3672:	ba 0f       	add	r27, r26
    3674:	62 1f       	adc	r22, r18
    3676:	73 1f       	adc	r23, r19
    3678:	84 1f       	adc	r24, r20
    367a:	48 f4       	brcc	.+18     	; 0x368e <__addsf3x+0x98>
    367c:	87 95       	ror	r24
    367e:	77 95       	ror	r23
    3680:	67 95       	ror	r22
    3682:	b7 95       	ror	r27
    3684:	f7 95       	ror	r31
    3686:	9e 3f       	cpi	r25, 0xFE	; 254
    3688:	08 f0       	brcs	.+2      	; 0x368c <__addsf3x+0x96>
    368a:	b3 cf       	rjmp	.-154    	; 0x35f2 <__addsf3+0x1e>
    368c:	93 95       	inc	r25
    368e:	88 0f       	add	r24, r24
    3690:	08 f0       	brcs	.+2      	; 0x3694 <__addsf3x+0x9e>
    3692:	99 27       	eor	r25, r25
    3694:	ee 0f       	add	r30, r30
    3696:	97 95       	ror	r25
    3698:	87 95       	ror	r24
    369a:	08 95       	ret

0000369c <__cmpsf2>:
    369c:	ec d0       	rcall	.+472    	; 0x3876 <__fp_cmp>
    369e:	08 f4       	brcc	.+2      	; 0x36a2 <__cmpsf2+0x6>
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	08 95       	ret

000036a4 <__divsf3>:
    36a4:	0c d0       	rcall	.+24     	; 0x36be <__divsf3x>
    36a6:	4b c1       	rjmp	.+662    	; 0x393e <__fp_round>
    36a8:	43 d1       	rcall	.+646    	; 0x3930 <__fp_pscB>
    36aa:	40 f0       	brcs	.+16     	; 0x36bc <__divsf3+0x18>
    36ac:	3a d1       	rcall	.+628    	; 0x3922 <__fp_pscA>
    36ae:	30 f0       	brcs	.+12     	; 0x36bc <__divsf3+0x18>
    36b0:	21 f4       	brne	.+8      	; 0x36ba <__divsf3+0x16>
    36b2:	5f 3f       	cpi	r21, 0xFF	; 255
    36b4:	19 f0       	breq	.+6      	; 0x36bc <__divsf3+0x18>
    36b6:	03 c1       	rjmp	.+518    	; 0x38be <__fp_inf>
    36b8:	51 11       	cpse	r21, r1
    36ba:	8c c1       	rjmp	.+792    	; 0x39d4 <__fp_szero>
    36bc:	2f c1       	rjmp	.+606    	; 0x391c <__fp_nan>

000036be <__divsf3x>:
    36be:	50 d1       	rcall	.+672    	; 0x3960 <__fp_split3>
    36c0:	98 f3       	brcs	.-26     	; 0x36a8 <__divsf3+0x4>

000036c2 <__divsf3_pse>:
    36c2:	99 23       	and	r25, r25
    36c4:	c9 f3       	breq	.-14     	; 0x36b8 <__divsf3+0x14>
    36c6:	55 23       	and	r21, r21
    36c8:	b1 f3       	breq	.-20     	; 0x36b6 <__divsf3+0x12>
    36ca:	95 1b       	sub	r25, r21
    36cc:	55 0b       	sbc	r21, r21
    36ce:	bb 27       	eor	r27, r27
    36d0:	aa 27       	eor	r26, r26
    36d2:	62 17       	cp	r22, r18
    36d4:	73 07       	cpc	r23, r19
    36d6:	84 07       	cpc	r24, r20
    36d8:	38 f0       	brcs	.+14     	; 0x36e8 <__divsf3_pse+0x26>
    36da:	9f 5f       	subi	r25, 0xFF	; 255
    36dc:	5f 4f       	sbci	r21, 0xFF	; 255
    36de:	22 0f       	add	r18, r18
    36e0:	33 1f       	adc	r19, r19
    36e2:	44 1f       	adc	r20, r20
    36e4:	aa 1f       	adc	r26, r26
    36e6:	a9 f3       	breq	.-22     	; 0x36d2 <__divsf3_pse+0x10>
    36e8:	33 d0       	rcall	.+102    	; 0x3750 <__divsf3_pse+0x8e>
    36ea:	0e 2e       	mov	r0, r30
    36ec:	3a f0       	brmi	.+14     	; 0x36fc <__divsf3_pse+0x3a>
    36ee:	e0 e8       	ldi	r30, 0x80	; 128
    36f0:	30 d0       	rcall	.+96     	; 0x3752 <__divsf3_pse+0x90>
    36f2:	91 50       	subi	r25, 0x01	; 1
    36f4:	50 40       	sbci	r21, 0x00	; 0
    36f6:	e6 95       	lsr	r30
    36f8:	00 1c       	adc	r0, r0
    36fa:	ca f7       	brpl	.-14     	; 0x36ee <__divsf3_pse+0x2c>
    36fc:	29 d0       	rcall	.+82     	; 0x3750 <__divsf3_pse+0x8e>
    36fe:	fe 2f       	mov	r31, r30
    3700:	27 d0       	rcall	.+78     	; 0x3750 <__divsf3_pse+0x8e>
    3702:	66 0f       	add	r22, r22
    3704:	77 1f       	adc	r23, r23
    3706:	88 1f       	adc	r24, r24
    3708:	bb 1f       	adc	r27, r27
    370a:	26 17       	cp	r18, r22
    370c:	37 07       	cpc	r19, r23
    370e:	48 07       	cpc	r20, r24
    3710:	ab 07       	cpc	r26, r27
    3712:	b0 e8       	ldi	r27, 0x80	; 128
    3714:	09 f0       	breq	.+2      	; 0x3718 <__divsf3_pse+0x56>
    3716:	bb 0b       	sbc	r27, r27
    3718:	80 2d       	mov	r24, r0
    371a:	bf 01       	movw	r22, r30
    371c:	ff 27       	eor	r31, r31
    371e:	93 58       	subi	r25, 0x83	; 131
    3720:	5f 4f       	sbci	r21, 0xFF	; 255
    3722:	2a f0       	brmi	.+10     	; 0x372e <__divsf3_pse+0x6c>
    3724:	9e 3f       	cpi	r25, 0xFE	; 254
    3726:	51 05       	cpc	r21, r1
    3728:	68 f0       	brcs	.+26     	; 0x3744 <__divsf3_pse+0x82>
    372a:	c9 c0       	rjmp	.+402    	; 0x38be <__fp_inf>
    372c:	53 c1       	rjmp	.+678    	; 0x39d4 <__fp_szero>
    372e:	5f 3f       	cpi	r21, 0xFF	; 255
    3730:	ec f3       	brlt	.-6      	; 0x372c <__divsf3_pse+0x6a>
    3732:	98 3e       	cpi	r25, 0xE8	; 232
    3734:	dc f3       	brlt	.-10     	; 0x372c <__divsf3_pse+0x6a>
    3736:	86 95       	lsr	r24
    3738:	77 95       	ror	r23
    373a:	67 95       	ror	r22
    373c:	b7 95       	ror	r27
    373e:	f7 95       	ror	r31
    3740:	9f 5f       	subi	r25, 0xFF	; 255
    3742:	c9 f7       	brne	.-14     	; 0x3736 <__divsf3_pse+0x74>
    3744:	88 0f       	add	r24, r24
    3746:	91 1d       	adc	r25, r1
    3748:	96 95       	lsr	r25
    374a:	87 95       	ror	r24
    374c:	97 f9       	bld	r25, 7
    374e:	08 95       	ret
    3750:	e1 e0       	ldi	r30, 0x01	; 1
    3752:	66 0f       	add	r22, r22
    3754:	77 1f       	adc	r23, r23
    3756:	88 1f       	adc	r24, r24
    3758:	bb 1f       	adc	r27, r27
    375a:	62 17       	cp	r22, r18
    375c:	73 07       	cpc	r23, r19
    375e:	84 07       	cpc	r24, r20
    3760:	ba 07       	cpc	r27, r26
    3762:	20 f0       	brcs	.+8      	; 0x376c <__divsf3_pse+0xaa>
    3764:	62 1b       	sub	r22, r18
    3766:	73 0b       	sbc	r23, r19
    3768:	84 0b       	sbc	r24, r20
    376a:	ba 0b       	sbc	r27, r26
    376c:	ee 1f       	adc	r30, r30
    376e:	88 f7       	brcc	.-30     	; 0x3752 <__divsf3_pse+0x90>
    3770:	e0 95       	com	r30
    3772:	08 95       	ret

00003774 <__fixsfsi>:
    3774:	04 d0       	rcall	.+8      	; 0x377e <__fixunssfsi>
    3776:	68 94       	set
    3778:	b1 11       	cpse	r27, r1
    377a:	2c c1       	rjmp	.+600    	; 0x39d4 <__fp_szero>
    377c:	08 95       	ret

0000377e <__fixunssfsi>:
    377e:	f8 d0       	rcall	.+496    	; 0x3970 <__fp_splitA>
    3780:	88 f0       	brcs	.+34     	; 0x37a4 <__fixunssfsi+0x26>
    3782:	9f 57       	subi	r25, 0x7F	; 127
    3784:	90 f0       	brcs	.+36     	; 0x37aa <__fixunssfsi+0x2c>
    3786:	b9 2f       	mov	r27, r25
    3788:	99 27       	eor	r25, r25
    378a:	b7 51       	subi	r27, 0x17	; 23
    378c:	a0 f0       	brcs	.+40     	; 0x37b6 <__fixunssfsi+0x38>
    378e:	d1 f0       	breq	.+52     	; 0x37c4 <__fixunssfsi+0x46>
    3790:	66 0f       	add	r22, r22
    3792:	77 1f       	adc	r23, r23
    3794:	88 1f       	adc	r24, r24
    3796:	99 1f       	adc	r25, r25
    3798:	1a f0       	brmi	.+6      	; 0x37a0 <__fixunssfsi+0x22>
    379a:	ba 95       	dec	r27
    379c:	c9 f7       	brne	.-14     	; 0x3790 <__fixunssfsi+0x12>
    379e:	12 c0       	rjmp	.+36     	; 0x37c4 <__fixunssfsi+0x46>
    37a0:	b1 30       	cpi	r27, 0x01	; 1
    37a2:	81 f0       	breq	.+32     	; 0x37c4 <__fixunssfsi+0x46>
    37a4:	16 d1       	rcall	.+556    	; 0x39d2 <__fp_zero>
    37a6:	b1 e0       	ldi	r27, 0x01	; 1
    37a8:	08 95       	ret
    37aa:	13 c1       	rjmp	.+550    	; 0x39d2 <__fp_zero>
    37ac:	67 2f       	mov	r22, r23
    37ae:	78 2f       	mov	r23, r24
    37b0:	88 27       	eor	r24, r24
    37b2:	b8 5f       	subi	r27, 0xF8	; 248
    37b4:	39 f0       	breq	.+14     	; 0x37c4 <__fixunssfsi+0x46>
    37b6:	b9 3f       	cpi	r27, 0xF9	; 249
    37b8:	cc f3       	brlt	.-14     	; 0x37ac <__fixunssfsi+0x2e>
    37ba:	86 95       	lsr	r24
    37bc:	77 95       	ror	r23
    37be:	67 95       	ror	r22
    37c0:	b3 95       	inc	r27
    37c2:	d9 f7       	brne	.-10     	; 0x37ba <__fixunssfsi+0x3c>
    37c4:	3e f4       	brtc	.+14     	; 0x37d4 <__fixunssfsi+0x56>
    37c6:	90 95       	com	r25
    37c8:	80 95       	com	r24
    37ca:	70 95       	com	r23
    37cc:	61 95       	neg	r22
    37ce:	7f 4f       	sbci	r23, 0xFF	; 255
    37d0:	8f 4f       	sbci	r24, 0xFF	; 255
    37d2:	9f 4f       	sbci	r25, 0xFF	; 255
    37d4:	08 95       	ret

000037d6 <__floatunsisf>:
    37d6:	e8 94       	clt
    37d8:	09 c0       	rjmp	.+18     	; 0x37ec <__floatsisf+0x12>

000037da <__floatsisf>:
    37da:	97 fb       	bst	r25, 7
    37dc:	3e f4       	brtc	.+14     	; 0x37ec <__floatsisf+0x12>
    37de:	90 95       	com	r25
    37e0:	80 95       	com	r24
    37e2:	70 95       	com	r23
    37e4:	61 95       	neg	r22
    37e6:	7f 4f       	sbci	r23, 0xFF	; 255
    37e8:	8f 4f       	sbci	r24, 0xFF	; 255
    37ea:	9f 4f       	sbci	r25, 0xFF	; 255
    37ec:	99 23       	and	r25, r25
    37ee:	a9 f0       	breq	.+42     	; 0x381a <__floatsisf+0x40>
    37f0:	f9 2f       	mov	r31, r25
    37f2:	96 e9       	ldi	r25, 0x96	; 150
    37f4:	bb 27       	eor	r27, r27
    37f6:	93 95       	inc	r25
    37f8:	f6 95       	lsr	r31
    37fa:	87 95       	ror	r24
    37fc:	77 95       	ror	r23
    37fe:	67 95       	ror	r22
    3800:	b7 95       	ror	r27
    3802:	f1 11       	cpse	r31, r1
    3804:	f8 cf       	rjmp	.-16     	; 0x37f6 <__floatsisf+0x1c>
    3806:	fa f4       	brpl	.+62     	; 0x3846 <__floatsisf+0x6c>
    3808:	bb 0f       	add	r27, r27
    380a:	11 f4       	brne	.+4      	; 0x3810 <__floatsisf+0x36>
    380c:	60 ff       	sbrs	r22, 0
    380e:	1b c0       	rjmp	.+54     	; 0x3846 <__floatsisf+0x6c>
    3810:	6f 5f       	subi	r22, 0xFF	; 255
    3812:	7f 4f       	sbci	r23, 0xFF	; 255
    3814:	8f 4f       	sbci	r24, 0xFF	; 255
    3816:	9f 4f       	sbci	r25, 0xFF	; 255
    3818:	16 c0       	rjmp	.+44     	; 0x3846 <__floatsisf+0x6c>
    381a:	88 23       	and	r24, r24
    381c:	11 f0       	breq	.+4      	; 0x3822 <__floatsisf+0x48>
    381e:	96 e9       	ldi	r25, 0x96	; 150
    3820:	11 c0       	rjmp	.+34     	; 0x3844 <__floatsisf+0x6a>
    3822:	77 23       	and	r23, r23
    3824:	21 f0       	breq	.+8      	; 0x382e <__floatsisf+0x54>
    3826:	9e e8       	ldi	r25, 0x8E	; 142
    3828:	87 2f       	mov	r24, r23
    382a:	76 2f       	mov	r23, r22
    382c:	05 c0       	rjmp	.+10     	; 0x3838 <__floatsisf+0x5e>
    382e:	66 23       	and	r22, r22
    3830:	71 f0       	breq	.+28     	; 0x384e <__floatsisf+0x74>
    3832:	96 e8       	ldi	r25, 0x86	; 134
    3834:	86 2f       	mov	r24, r22
    3836:	70 e0       	ldi	r23, 0x00	; 0
    3838:	60 e0       	ldi	r22, 0x00	; 0
    383a:	2a f0       	brmi	.+10     	; 0x3846 <__floatsisf+0x6c>
    383c:	9a 95       	dec	r25
    383e:	66 0f       	add	r22, r22
    3840:	77 1f       	adc	r23, r23
    3842:	88 1f       	adc	r24, r24
    3844:	da f7       	brpl	.-10     	; 0x383c <__floatsisf+0x62>
    3846:	88 0f       	add	r24, r24
    3848:	96 95       	lsr	r25
    384a:	87 95       	ror	r24
    384c:	97 f9       	bld	r25, 7
    384e:	08 95       	ret

00003850 <floor>:
    3850:	a9 d0       	rcall	.+338    	; 0x39a4 <__fp_trunc>
    3852:	80 f0       	brcs	.+32     	; 0x3874 <floor+0x24>
    3854:	9f 37       	cpi	r25, 0x7F	; 127
    3856:	40 f4       	brcc	.+16     	; 0x3868 <floor+0x18>
    3858:	91 11       	cpse	r25, r1
    385a:	0e f0       	brts	.+2      	; 0x385e <floor+0xe>
    385c:	bb c0       	rjmp	.+374    	; 0x39d4 <__fp_szero>
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	70 e0       	ldi	r23, 0x00	; 0
    3862:	80 e8       	ldi	r24, 0x80	; 128
    3864:	9f eb       	ldi	r25, 0xBF	; 191
    3866:	08 95       	ret
    3868:	26 f4       	brtc	.+8      	; 0x3872 <floor+0x22>
    386a:	1b 16       	cp	r1, r27
    386c:	61 1d       	adc	r22, r1
    386e:	71 1d       	adc	r23, r1
    3870:	81 1d       	adc	r24, r1
    3872:	2b c0       	rjmp	.+86     	; 0x38ca <__fp_mintl>
    3874:	45 c0       	rjmp	.+138    	; 0x3900 <__fp_mpack>

00003876 <__fp_cmp>:
    3876:	99 0f       	add	r25, r25
    3878:	00 08       	sbc	r0, r0
    387a:	55 0f       	add	r21, r21
    387c:	aa 0b       	sbc	r26, r26
    387e:	e0 e8       	ldi	r30, 0x80	; 128
    3880:	fe ef       	ldi	r31, 0xFE	; 254
    3882:	16 16       	cp	r1, r22
    3884:	17 06       	cpc	r1, r23
    3886:	e8 07       	cpc	r30, r24
    3888:	f9 07       	cpc	r31, r25
    388a:	c0 f0       	brcs	.+48     	; 0x38bc <__fp_cmp+0x46>
    388c:	12 16       	cp	r1, r18
    388e:	13 06       	cpc	r1, r19
    3890:	e4 07       	cpc	r30, r20
    3892:	f5 07       	cpc	r31, r21
    3894:	98 f0       	brcs	.+38     	; 0x38bc <__fp_cmp+0x46>
    3896:	62 1b       	sub	r22, r18
    3898:	73 0b       	sbc	r23, r19
    389a:	84 0b       	sbc	r24, r20
    389c:	95 0b       	sbc	r25, r21
    389e:	39 f4       	brne	.+14     	; 0x38ae <__fp_cmp+0x38>
    38a0:	0a 26       	eor	r0, r26
    38a2:	61 f0       	breq	.+24     	; 0x38bc <__fp_cmp+0x46>
    38a4:	23 2b       	or	r18, r19
    38a6:	24 2b       	or	r18, r20
    38a8:	25 2b       	or	r18, r21
    38aa:	21 f4       	brne	.+8      	; 0x38b4 <__fp_cmp+0x3e>
    38ac:	08 95       	ret
    38ae:	0a 26       	eor	r0, r26
    38b0:	09 f4       	brne	.+2      	; 0x38b4 <__fp_cmp+0x3e>
    38b2:	a1 40       	sbci	r26, 0x01	; 1
    38b4:	a6 95       	lsr	r26
    38b6:	8f ef       	ldi	r24, 0xFF	; 255
    38b8:	81 1d       	adc	r24, r1
    38ba:	81 1d       	adc	r24, r1
    38bc:	08 95       	ret

000038be <__fp_inf>:
    38be:	97 f9       	bld	r25, 7
    38c0:	9f 67       	ori	r25, 0x7F	; 127
    38c2:	80 e8       	ldi	r24, 0x80	; 128
    38c4:	70 e0       	ldi	r23, 0x00	; 0
    38c6:	60 e0       	ldi	r22, 0x00	; 0
    38c8:	08 95       	ret

000038ca <__fp_mintl>:
    38ca:	88 23       	and	r24, r24
    38cc:	71 f4       	brne	.+28     	; 0x38ea <__fp_mintl+0x20>
    38ce:	77 23       	and	r23, r23
    38d0:	21 f0       	breq	.+8      	; 0x38da <__fp_mintl+0x10>
    38d2:	98 50       	subi	r25, 0x08	; 8
    38d4:	87 2b       	or	r24, r23
    38d6:	76 2f       	mov	r23, r22
    38d8:	07 c0       	rjmp	.+14     	; 0x38e8 <__fp_mintl+0x1e>
    38da:	66 23       	and	r22, r22
    38dc:	11 f4       	brne	.+4      	; 0x38e2 <__fp_mintl+0x18>
    38de:	99 27       	eor	r25, r25
    38e0:	0d c0       	rjmp	.+26     	; 0x38fc <__fp_mintl+0x32>
    38e2:	90 51       	subi	r25, 0x10	; 16
    38e4:	86 2b       	or	r24, r22
    38e6:	70 e0       	ldi	r23, 0x00	; 0
    38e8:	60 e0       	ldi	r22, 0x00	; 0
    38ea:	2a f0       	brmi	.+10     	; 0x38f6 <__fp_mintl+0x2c>
    38ec:	9a 95       	dec	r25
    38ee:	66 0f       	add	r22, r22
    38f0:	77 1f       	adc	r23, r23
    38f2:	88 1f       	adc	r24, r24
    38f4:	da f7       	brpl	.-10     	; 0x38ec <__fp_mintl+0x22>
    38f6:	88 0f       	add	r24, r24
    38f8:	96 95       	lsr	r25
    38fa:	87 95       	ror	r24
    38fc:	97 f9       	bld	r25, 7
    38fe:	08 95       	ret

00003900 <__fp_mpack>:
    3900:	9f 3f       	cpi	r25, 0xFF	; 255
    3902:	31 f0       	breq	.+12     	; 0x3910 <__fp_mpack_finite+0xc>

00003904 <__fp_mpack_finite>:
    3904:	91 50       	subi	r25, 0x01	; 1
    3906:	20 f4       	brcc	.+8      	; 0x3910 <__fp_mpack_finite+0xc>
    3908:	87 95       	ror	r24
    390a:	77 95       	ror	r23
    390c:	67 95       	ror	r22
    390e:	b7 95       	ror	r27
    3910:	88 0f       	add	r24, r24
    3912:	91 1d       	adc	r25, r1
    3914:	96 95       	lsr	r25
    3916:	87 95       	ror	r24
    3918:	97 f9       	bld	r25, 7
    391a:	08 95       	ret

0000391c <__fp_nan>:
    391c:	9f ef       	ldi	r25, 0xFF	; 255
    391e:	80 ec       	ldi	r24, 0xC0	; 192
    3920:	08 95       	ret

00003922 <__fp_pscA>:
    3922:	00 24       	eor	r0, r0
    3924:	0a 94       	dec	r0
    3926:	16 16       	cp	r1, r22
    3928:	17 06       	cpc	r1, r23
    392a:	18 06       	cpc	r1, r24
    392c:	09 06       	cpc	r0, r25
    392e:	08 95       	ret

00003930 <__fp_pscB>:
    3930:	00 24       	eor	r0, r0
    3932:	0a 94       	dec	r0
    3934:	12 16       	cp	r1, r18
    3936:	13 06       	cpc	r1, r19
    3938:	14 06       	cpc	r1, r20
    393a:	05 06       	cpc	r0, r21
    393c:	08 95       	ret

0000393e <__fp_round>:
    393e:	09 2e       	mov	r0, r25
    3940:	03 94       	inc	r0
    3942:	00 0c       	add	r0, r0
    3944:	11 f4       	brne	.+4      	; 0x394a <__fp_round+0xc>
    3946:	88 23       	and	r24, r24
    3948:	52 f0       	brmi	.+20     	; 0x395e <__fp_round+0x20>
    394a:	bb 0f       	add	r27, r27
    394c:	40 f4       	brcc	.+16     	; 0x395e <__fp_round+0x20>
    394e:	bf 2b       	or	r27, r31
    3950:	11 f4       	brne	.+4      	; 0x3956 <__fp_round+0x18>
    3952:	60 ff       	sbrs	r22, 0
    3954:	04 c0       	rjmp	.+8      	; 0x395e <__fp_round+0x20>
    3956:	6f 5f       	subi	r22, 0xFF	; 255
    3958:	7f 4f       	sbci	r23, 0xFF	; 255
    395a:	8f 4f       	sbci	r24, 0xFF	; 255
    395c:	9f 4f       	sbci	r25, 0xFF	; 255
    395e:	08 95       	ret

00003960 <__fp_split3>:
    3960:	57 fd       	sbrc	r21, 7
    3962:	90 58       	subi	r25, 0x80	; 128
    3964:	44 0f       	add	r20, r20
    3966:	55 1f       	adc	r21, r21
    3968:	59 f0       	breq	.+22     	; 0x3980 <__fp_splitA+0x10>
    396a:	5f 3f       	cpi	r21, 0xFF	; 255
    396c:	71 f0       	breq	.+28     	; 0x398a <__fp_splitA+0x1a>
    396e:	47 95       	ror	r20

00003970 <__fp_splitA>:
    3970:	88 0f       	add	r24, r24
    3972:	97 fb       	bst	r25, 7
    3974:	99 1f       	adc	r25, r25
    3976:	61 f0       	breq	.+24     	; 0x3990 <__fp_splitA+0x20>
    3978:	9f 3f       	cpi	r25, 0xFF	; 255
    397a:	79 f0       	breq	.+30     	; 0x399a <__fp_splitA+0x2a>
    397c:	87 95       	ror	r24
    397e:	08 95       	ret
    3980:	12 16       	cp	r1, r18
    3982:	13 06       	cpc	r1, r19
    3984:	14 06       	cpc	r1, r20
    3986:	55 1f       	adc	r21, r21
    3988:	f2 cf       	rjmp	.-28     	; 0x396e <__fp_split3+0xe>
    398a:	46 95       	lsr	r20
    398c:	f1 df       	rcall	.-30     	; 0x3970 <__fp_splitA>
    398e:	08 c0       	rjmp	.+16     	; 0x39a0 <__fp_splitA+0x30>
    3990:	16 16       	cp	r1, r22
    3992:	17 06       	cpc	r1, r23
    3994:	18 06       	cpc	r1, r24
    3996:	99 1f       	adc	r25, r25
    3998:	f1 cf       	rjmp	.-30     	; 0x397c <__fp_splitA+0xc>
    399a:	86 95       	lsr	r24
    399c:	71 05       	cpc	r23, r1
    399e:	61 05       	cpc	r22, r1
    39a0:	08 94       	sec
    39a2:	08 95       	ret

000039a4 <__fp_trunc>:
    39a4:	e5 df       	rcall	.-54     	; 0x3970 <__fp_splitA>
    39a6:	a0 f0       	brcs	.+40     	; 0x39d0 <__fp_trunc+0x2c>
    39a8:	be e7       	ldi	r27, 0x7E	; 126
    39aa:	b9 17       	cp	r27, r25
    39ac:	88 f4       	brcc	.+34     	; 0x39d0 <__fp_trunc+0x2c>
    39ae:	bb 27       	eor	r27, r27
    39b0:	9f 38       	cpi	r25, 0x8F	; 143
    39b2:	60 f4       	brcc	.+24     	; 0x39cc <__fp_trunc+0x28>
    39b4:	16 16       	cp	r1, r22
    39b6:	b1 1d       	adc	r27, r1
    39b8:	67 2f       	mov	r22, r23
    39ba:	78 2f       	mov	r23, r24
    39bc:	88 27       	eor	r24, r24
    39be:	98 5f       	subi	r25, 0xF8	; 248
    39c0:	f7 cf       	rjmp	.-18     	; 0x39b0 <__fp_trunc+0xc>
    39c2:	86 95       	lsr	r24
    39c4:	77 95       	ror	r23
    39c6:	67 95       	ror	r22
    39c8:	b1 1d       	adc	r27, r1
    39ca:	93 95       	inc	r25
    39cc:	96 39       	cpi	r25, 0x96	; 150
    39ce:	c8 f3       	brcs	.-14     	; 0x39c2 <__fp_trunc+0x1e>
    39d0:	08 95       	ret

000039d2 <__fp_zero>:
    39d2:	e8 94       	clt

000039d4 <__fp_szero>:
    39d4:	bb 27       	eor	r27, r27
    39d6:	66 27       	eor	r22, r22
    39d8:	77 27       	eor	r23, r23
    39da:	cb 01       	movw	r24, r22
    39dc:	97 f9       	bld	r25, 7
    39de:	08 95       	ret

000039e0 <__gesf2>:
    39e0:	4a df       	rcall	.-364    	; 0x3876 <__fp_cmp>
    39e2:	08 f4       	brcc	.+2      	; 0x39e6 <__gesf2+0x6>
    39e4:	8f ef       	ldi	r24, 0xFF	; 255
    39e6:	08 95       	ret

000039e8 <__mulsf3>:
    39e8:	0b d0       	rcall	.+22     	; 0x3a00 <__mulsf3x>
    39ea:	a9 cf       	rjmp	.-174    	; 0x393e <__fp_round>
    39ec:	9a df       	rcall	.-204    	; 0x3922 <__fp_pscA>
    39ee:	28 f0       	brcs	.+10     	; 0x39fa <__mulsf3+0x12>
    39f0:	9f df       	rcall	.-194    	; 0x3930 <__fp_pscB>
    39f2:	18 f0       	brcs	.+6      	; 0x39fa <__mulsf3+0x12>
    39f4:	95 23       	and	r25, r21
    39f6:	09 f0       	breq	.+2      	; 0x39fa <__mulsf3+0x12>
    39f8:	62 cf       	rjmp	.-316    	; 0x38be <__fp_inf>
    39fa:	90 cf       	rjmp	.-224    	; 0x391c <__fp_nan>
    39fc:	11 24       	eor	r1, r1
    39fe:	ea cf       	rjmp	.-44     	; 0x39d4 <__fp_szero>

00003a00 <__mulsf3x>:
    3a00:	af df       	rcall	.-162    	; 0x3960 <__fp_split3>
    3a02:	a0 f3       	brcs	.-24     	; 0x39ec <__mulsf3+0x4>

00003a04 <__mulsf3_pse>:
    3a04:	95 9f       	mul	r25, r21
    3a06:	d1 f3       	breq	.-12     	; 0x39fc <__mulsf3+0x14>
    3a08:	95 0f       	add	r25, r21
    3a0a:	50 e0       	ldi	r21, 0x00	; 0
    3a0c:	55 1f       	adc	r21, r21
    3a0e:	62 9f       	mul	r22, r18
    3a10:	f0 01       	movw	r30, r0
    3a12:	72 9f       	mul	r23, r18
    3a14:	bb 27       	eor	r27, r27
    3a16:	f0 0d       	add	r31, r0
    3a18:	b1 1d       	adc	r27, r1
    3a1a:	63 9f       	mul	r22, r19
    3a1c:	aa 27       	eor	r26, r26
    3a1e:	f0 0d       	add	r31, r0
    3a20:	b1 1d       	adc	r27, r1
    3a22:	aa 1f       	adc	r26, r26
    3a24:	64 9f       	mul	r22, r20
    3a26:	66 27       	eor	r22, r22
    3a28:	b0 0d       	add	r27, r0
    3a2a:	a1 1d       	adc	r26, r1
    3a2c:	66 1f       	adc	r22, r22
    3a2e:	82 9f       	mul	r24, r18
    3a30:	22 27       	eor	r18, r18
    3a32:	b0 0d       	add	r27, r0
    3a34:	a1 1d       	adc	r26, r1
    3a36:	62 1f       	adc	r22, r18
    3a38:	73 9f       	mul	r23, r19
    3a3a:	b0 0d       	add	r27, r0
    3a3c:	a1 1d       	adc	r26, r1
    3a3e:	62 1f       	adc	r22, r18
    3a40:	83 9f       	mul	r24, r19
    3a42:	a0 0d       	add	r26, r0
    3a44:	61 1d       	adc	r22, r1
    3a46:	22 1f       	adc	r18, r18
    3a48:	74 9f       	mul	r23, r20
    3a4a:	33 27       	eor	r19, r19
    3a4c:	a0 0d       	add	r26, r0
    3a4e:	61 1d       	adc	r22, r1
    3a50:	23 1f       	adc	r18, r19
    3a52:	84 9f       	mul	r24, r20
    3a54:	60 0d       	add	r22, r0
    3a56:	21 1d       	adc	r18, r1
    3a58:	82 2f       	mov	r24, r18
    3a5a:	76 2f       	mov	r23, r22
    3a5c:	6a 2f       	mov	r22, r26
    3a5e:	11 24       	eor	r1, r1
    3a60:	9f 57       	subi	r25, 0x7F	; 127
    3a62:	50 40       	sbci	r21, 0x00	; 0
    3a64:	8a f0       	brmi	.+34     	; 0x3a88 <__mulsf3_pse+0x84>
    3a66:	e1 f0       	breq	.+56     	; 0x3aa0 <__mulsf3_pse+0x9c>
    3a68:	88 23       	and	r24, r24
    3a6a:	4a f0       	brmi	.+18     	; 0x3a7e <__mulsf3_pse+0x7a>
    3a6c:	ee 0f       	add	r30, r30
    3a6e:	ff 1f       	adc	r31, r31
    3a70:	bb 1f       	adc	r27, r27
    3a72:	66 1f       	adc	r22, r22
    3a74:	77 1f       	adc	r23, r23
    3a76:	88 1f       	adc	r24, r24
    3a78:	91 50       	subi	r25, 0x01	; 1
    3a7a:	50 40       	sbci	r21, 0x00	; 0
    3a7c:	a9 f7       	brne	.-22     	; 0x3a68 <__mulsf3_pse+0x64>
    3a7e:	9e 3f       	cpi	r25, 0xFE	; 254
    3a80:	51 05       	cpc	r21, r1
    3a82:	70 f0       	brcs	.+28     	; 0x3aa0 <__mulsf3_pse+0x9c>
    3a84:	1c cf       	rjmp	.-456    	; 0x38be <__fp_inf>
    3a86:	a6 cf       	rjmp	.-180    	; 0x39d4 <__fp_szero>
    3a88:	5f 3f       	cpi	r21, 0xFF	; 255
    3a8a:	ec f3       	brlt	.-6      	; 0x3a86 <__mulsf3_pse+0x82>
    3a8c:	98 3e       	cpi	r25, 0xE8	; 232
    3a8e:	dc f3       	brlt	.-10     	; 0x3a86 <__mulsf3_pse+0x82>
    3a90:	86 95       	lsr	r24
    3a92:	77 95       	ror	r23
    3a94:	67 95       	ror	r22
    3a96:	b7 95       	ror	r27
    3a98:	f7 95       	ror	r31
    3a9a:	e7 95       	ror	r30
    3a9c:	9f 5f       	subi	r25, 0xFF	; 255
    3a9e:	c1 f7       	brne	.-16     	; 0x3a90 <__mulsf3_pse+0x8c>
    3aa0:	fe 2b       	or	r31, r30
    3aa2:	88 0f       	add	r24, r24
    3aa4:	91 1d       	adc	r25, r1
    3aa6:	96 95       	lsr	r25
    3aa8:	87 95       	ror	r24
    3aaa:	97 f9       	bld	r25, 7
    3aac:	08 95       	ret

00003aae <__udivmodqi4>:
    3aae:	99 1b       	sub	r25, r25
    3ab0:	79 e0       	ldi	r23, 0x09	; 9
    3ab2:	04 c0       	rjmp	.+8      	; 0x3abc <__udivmodqi4_ep>

00003ab4 <__udivmodqi4_loop>:
    3ab4:	99 1f       	adc	r25, r25
    3ab6:	96 17       	cp	r25, r22
    3ab8:	08 f0       	brcs	.+2      	; 0x3abc <__udivmodqi4_ep>
    3aba:	96 1b       	sub	r25, r22

00003abc <__udivmodqi4_ep>:
    3abc:	88 1f       	adc	r24, r24
    3abe:	7a 95       	dec	r23
    3ac0:	c9 f7       	brne	.-14     	; 0x3ab4 <__udivmodqi4_loop>
    3ac2:	80 95       	com	r24
    3ac4:	08 95       	ret

00003ac6 <__udivmodhi4>:
    3ac6:	aa 1b       	sub	r26, r26
    3ac8:	bb 1b       	sub	r27, r27
    3aca:	51 e1       	ldi	r21, 0x11	; 17
    3acc:	07 c0       	rjmp	.+14     	; 0x3adc <__udivmodhi4_ep>

00003ace <__udivmodhi4_loop>:
    3ace:	aa 1f       	adc	r26, r26
    3ad0:	bb 1f       	adc	r27, r27
    3ad2:	a6 17       	cp	r26, r22
    3ad4:	b7 07       	cpc	r27, r23
    3ad6:	10 f0       	brcs	.+4      	; 0x3adc <__udivmodhi4_ep>
    3ad8:	a6 1b       	sub	r26, r22
    3ada:	b7 0b       	sbc	r27, r23

00003adc <__udivmodhi4_ep>:
    3adc:	88 1f       	adc	r24, r24
    3ade:	99 1f       	adc	r25, r25
    3ae0:	5a 95       	dec	r21
    3ae2:	a9 f7       	brne	.-22     	; 0x3ace <__udivmodhi4_loop>
    3ae4:	80 95       	com	r24
    3ae6:	90 95       	com	r25
    3ae8:	bc 01       	movw	r22, r24
    3aea:	cd 01       	movw	r24, r26
    3aec:	08 95       	ret

00003aee <__divmodhi4>:
    3aee:	97 fb       	bst	r25, 7
    3af0:	07 2e       	mov	r0, r23
    3af2:	16 f4       	brtc	.+4      	; 0x3af8 <__divmodhi4+0xa>
    3af4:	00 94       	com	r0
    3af6:	06 d0       	rcall	.+12     	; 0x3b04 <__divmodhi4_neg1>
    3af8:	77 fd       	sbrc	r23, 7
    3afa:	08 d0       	rcall	.+16     	; 0x3b0c <__divmodhi4_neg2>
    3afc:	e4 df       	rcall	.-56     	; 0x3ac6 <__udivmodhi4>
    3afe:	07 fc       	sbrc	r0, 7
    3b00:	05 d0       	rcall	.+10     	; 0x3b0c <__divmodhi4_neg2>
    3b02:	3e f4       	brtc	.+14     	; 0x3b12 <__divmodhi4_exit>

00003b04 <__divmodhi4_neg1>:
    3b04:	90 95       	com	r25
    3b06:	81 95       	neg	r24
    3b08:	9f 4f       	sbci	r25, 0xFF	; 255
    3b0a:	08 95       	ret

00003b0c <__divmodhi4_neg2>:
    3b0c:	70 95       	com	r23
    3b0e:	61 95       	neg	r22
    3b10:	7f 4f       	sbci	r23, 0xFF	; 255

00003b12 <__divmodhi4_exit>:
    3b12:	08 95       	ret

00003b14 <strcpy>:
    3b14:	fb 01       	movw	r30, r22
    3b16:	dc 01       	movw	r26, r24
    3b18:	01 90       	ld	r0, Z+
    3b1a:	0d 92       	st	X+, r0
    3b1c:	00 20       	and	r0, r0
    3b1e:	e1 f7       	brne	.-8      	; 0x3b18 <strcpy+0x4>
    3b20:	08 95       	ret

00003b22 <snprintf>:
    3b22:	ae e0       	ldi	r26, 0x0E	; 14
    3b24:	b0 e0       	ldi	r27, 0x00	; 0
    3b26:	e6 e9       	ldi	r30, 0x96	; 150
    3b28:	fd e1       	ldi	r31, 0x1D	; 29
    3b2a:	a5 c2       	rjmp	.+1354   	; 0x4076 <__prologue_saves__+0x1c>
    3b2c:	0d 89       	ldd	r16, Y+21	; 0x15
    3b2e:	1e 89       	ldd	r17, Y+22	; 0x16
    3b30:	8f 89       	ldd	r24, Y+23	; 0x17
    3b32:	98 8d       	ldd	r25, Y+24	; 0x18
    3b34:	26 e0       	ldi	r18, 0x06	; 6
    3b36:	2c 83       	std	Y+4, r18	; 0x04
    3b38:	1a 83       	std	Y+2, r17	; 0x02
    3b3a:	09 83       	std	Y+1, r16	; 0x01
    3b3c:	97 ff       	sbrs	r25, 7
    3b3e:	02 c0       	rjmp	.+4      	; 0x3b44 <snprintf+0x22>
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	90 e8       	ldi	r25, 0x80	; 128
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	9e 83       	std	Y+6, r25	; 0x06
    3b48:	8d 83       	std	Y+5, r24	; 0x05
    3b4a:	ae 01       	movw	r20, r28
    3b4c:	45 5e       	subi	r20, 0xE5	; 229
    3b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b50:	69 8d       	ldd	r22, Y+25	; 0x19
    3b52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b54:	ce 01       	movw	r24, r28
    3b56:	01 96       	adiw	r24, 0x01	; 1
    3b58:	11 d0       	rcall	.+34     	; 0x3b7c <vfprintf>
    3b5a:	4d 81       	ldd	r20, Y+5	; 0x05
    3b5c:	5e 81       	ldd	r21, Y+6	; 0x06
    3b5e:	57 fd       	sbrc	r21, 7
    3b60:	0a c0       	rjmp	.+20     	; 0x3b76 <snprintf+0x54>
    3b62:	2f 81       	ldd	r18, Y+7	; 0x07
    3b64:	38 85       	ldd	r19, Y+8	; 0x08
    3b66:	42 17       	cp	r20, r18
    3b68:	53 07       	cpc	r21, r19
    3b6a:	0c f4       	brge	.+2      	; 0x3b6e <snprintf+0x4c>
    3b6c:	9a 01       	movw	r18, r20
    3b6e:	f8 01       	movw	r30, r16
    3b70:	e2 0f       	add	r30, r18
    3b72:	f3 1f       	adc	r31, r19
    3b74:	10 82       	st	Z, r1
    3b76:	2e 96       	adiw	r28, 0x0e	; 14
    3b78:	e4 e0       	ldi	r30, 0x04	; 4
    3b7a:	99 c2       	rjmp	.+1330   	; 0x40ae <__epilogue_restores__+0x1c>

00003b7c <vfprintf>:
    3b7c:	ac e0       	ldi	r26, 0x0C	; 12
    3b7e:	b0 e0       	ldi	r27, 0x00	; 0
    3b80:	e3 ec       	ldi	r30, 0xC3	; 195
    3b82:	fd e1       	ldi	r31, 0x1D	; 29
    3b84:	6a c2       	rjmp	.+1236   	; 0x405a <__prologue_saves__>
    3b86:	7c 01       	movw	r14, r24
    3b88:	6b 01       	movw	r12, r22
    3b8a:	8a 01       	movw	r16, r20
    3b8c:	fc 01       	movw	r30, r24
    3b8e:	17 82       	std	Z+7, r1	; 0x07
    3b90:	16 82       	std	Z+6, r1	; 0x06
    3b92:	83 81       	ldd	r24, Z+3	; 0x03
    3b94:	81 ff       	sbrs	r24, 1
    3b96:	b0 c1       	rjmp	.+864    	; 0x3ef8 <vfprintf+0x37c>
    3b98:	ce 01       	movw	r24, r28
    3b9a:	01 96       	adiw	r24, 0x01	; 1
    3b9c:	4c 01       	movw	r8, r24
    3b9e:	f7 01       	movw	r30, r14
    3ba0:	93 81       	ldd	r25, Z+3	; 0x03
    3ba2:	f6 01       	movw	r30, r12
    3ba4:	93 fd       	sbrc	r25, 3
    3ba6:	85 91       	lpm	r24, Z+
    3ba8:	93 ff       	sbrs	r25, 3
    3baa:	81 91       	ld	r24, Z+
    3bac:	6f 01       	movw	r12, r30
    3bae:	88 23       	and	r24, r24
    3bb0:	09 f4       	brne	.+2      	; 0x3bb4 <vfprintf+0x38>
    3bb2:	9e c1       	rjmp	.+828    	; 0x3ef0 <vfprintf+0x374>
    3bb4:	85 32       	cpi	r24, 0x25	; 37
    3bb6:	39 f4       	brne	.+14     	; 0x3bc6 <vfprintf+0x4a>
    3bb8:	93 fd       	sbrc	r25, 3
    3bba:	85 91       	lpm	r24, Z+
    3bbc:	93 ff       	sbrs	r25, 3
    3bbe:	81 91       	ld	r24, Z+
    3bc0:	6f 01       	movw	r12, r30
    3bc2:	85 32       	cpi	r24, 0x25	; 37
    3bc4:	21 f4       	brne	.+8      	; 0x3bce <vfprintf+0x52>
    3bc6:	b7 01       	movw	r22, r14
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	b1 d1       	rcall	.+866    	; 0x3f2e <fputc>
    3bcc:	e8 cf       	rjmp	.-48     	; 0x3b9e <vfprintf+0x22>
    3bce:	51 2c       	mov	r5, r1
    3bd0:	31 2c       	mov	r3, r1
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	20 32       	cpi	r18, 0x20	; 32
    3bd6:	a0 f4       	brcc	.+40     	; 0x3c00 <vfprintf+0x84>
    3bd8:	8b 32       	cpi	r24, 0x2B	; 43
    3bda:	69 f0       	breq	.+26     	; 0x3bf6 <vfprintf+0x7a>
    3bdc:	30 f4       	brcc	.+12     	; 0x3bea <vfprintf+0x6e>
    3bde:	80 32       	cpi	r24, 0x20	; 32
    3be0:	59 f0       	breq	.+22     	; 0x3bf8 <vfprintf+0x7c>
    3be2:	83 32       	cpi	r24, 0x23	; 35
    3be4:	69 f4       	brne	.+26     	; 0x3c00 <vfprintf+0x84>
    3be6:	20 61       	ori	r18, 0x10	; 16
    3be8:	2c c0       	rjmp	.+88     	; 0x3c42 <vfprintf+0xc6>
    3bea:	8d 32       	cpi	r24, 0x2D	; 45
    3bec:	39 f0       	breq	.+14     	; 0x3bfc <vfprintf+0x80>
    3bee:	80 33       	cpi	r24, 0x30	; 48
    3bf0:	39 f4       	brne	.+14     	; 0x3c00 <vfprintf+0x84>
    3bf2:	21 60       	ori	r18, 0x01	; 1
    3bf4:	26 c0       	rjmp	.+76     	; 0x3c42 <vfprintf+0xc6>
    3bf6:	22 60       	ori	r18, 0x02	; 2
    3bf8:	24 60       	ori	r18, 0x04	; 4
    3bfa:	23 c0       	rjmp	.+70     	; 0x3c42 <vfprintf+0xc6>
    3bfc:	28 60       	ori	r18, 0x08	; 8
    3bfe:	21 c0       	rjmp	.+66     	; 0x3c42 <vfprintf+0xc6>
    3c00:	27 fd       	sbrc	r18, 7
    3c02:	27 c0       	rjmp	.+78     	; 0x3c52 <vfprintf+0xd6>
    3c04:	30 ed       	ldi	r19, 0xD0	; 208
    3c06:	38 0f       	add	r19, r24
    3c08:	3a 30       	cpi	r19, 0x0A	; 10
    3c0a:	78 f4       	brcc	.+30     	; 0x3c2a <vfprintf+0xae>
    3c0c:	26 ff       	sbrs	r18, 6
    3c0e:	06 c0       	rjmp	.+12     	; 0x3c1c <vfprintf+0xa0>
    3c10:	fa e0       	ldi	r31, 0x0A	; 10
    3c12:	5f 9e       	mul	r5, r31
    3c14:	30 0d       	add	r19, r0
    3c16:	11 24       	eor	r1, r1
    3c18:	53 2e       	mov	r5, r19
    3c1a:	13 c0       	rjmp	.+38     	; 0x3c42 <vfprintf+0xc6>
    3c1c:	8a e0       	ldi	r24, 0x0A	; 10
    3c1e:	38 9e       	mul	r3, r24
    3c20:	30 0d       	add	r19, r0
    3c22:	11 24       	eor	r1, r1
    3c24:	33 2e       	mov	r3, r19
    3c26:	20 62       	ori	r18, 0x20	; 32
    3c28:	0c c0       	rjmp	.+24     	; 0x3c42 <vfprintf+0xc6>
    3c2a:	8e 32       	cpi	r24, 0x2E	; 46
    3c2c:	21 f4       	brne	.+8      	; 0x3c36 <vfprintf+0xba>
    3c2e:	26 fd       	sbrc	r18, 6
    3c30:	5f c1       	rjmp	.+702    	; 0x3ef0 <vfprintf+0x374>
    3c32:	20 64       	ori	r18, 0x40	; 64
    3c34:	06 c0       	rjmp	.+12     	; 0x3c42 <vfprintf+0xc6>
    3c36:	8c 36       	cpi	r24, 0x6C	; 108
    3c38:	11 f4       	brne	.+4      	; 0x3c3e <vfprintf+0xc2>
    3c3a:	20 68       	ori	r18, 0x80	; 128
    3c3c:	02 c0       	rjmp	.+4      	; 0x3c42 <vfprintf+0xc6>
    3c3e:	88 36       	cpi	r24, 0x68	; 104
    3c40:	41 f4       	brne	.+16     	; 0x3c52 <vfprintf+0xd6>
    3c42:	f6 01       	movw	r30, r12
    3c44:	93 fd       	sbrc	r25, 3
    3c46:	85 91       	lpm	r24, Z+
    3c48:	93 ff       	sbrs	r25, 3
    3c4a:	81 91       	ld	r24, Z+
    3c4c:	6f 01       	movw	r12, r30
    3c4e:	81 11       	cpse	r24, r1
    3c50:	c1 cf       	rjmp	.-126    	; 0x3bd4 <vfprintf+0x58>
    3c52:	98 2f       	mov	r25, r24
    3c54:	9f 7d       	andi	r25, 0xDF	; 223
    3c56:	95 54       	subi	r25, 0x45	; 69
    3c58:	93 30       	cpi	r25, 0x03	; 3
    3c5a:	28 f4       	brcc	.+10     	; 0x3c66 <vfprintf+0xea>
    3c5c:	0c 5f       	subi	r16, 0xFC	; 252
    3c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c60:	ff e3       	ldi	r31, 0x3F	; 63
    3c62:	f9 83       	std	Y+1, r31	; 0x01
    3c64:	0d c0       	rjmp	.+26     	; 0x3c80 <vfprintf+0x104>
    3c66:	83 36       	cpi	r24, 0x63	; 99
    3c68:	31 f0       	breq	.+12     	; 0x3c76 <vfprintf+0xfa>
    3c6a:	83 37       	cpi	r24, 0x73	; 115
    3c6c:	71 f0       	breq	.+28     	; 0x3c8a <vfprintf+0x10e>
    3c6e:	83 35       	cpi	r24, 0x53	; 83
    3c70:	09 f0       	breq	.+2      	; 0x3c74 <vfprintf+0xf8>
    3c72:	57 c0       	rjmp	.+174    	; 0x3d22 <vfprintf+0x1a6>
    3c74:	21 c0       	rjmp	.+66     	; 0x3cb8 <vfprintf+0x13c>
    3c76:	f8 01       	movw	r30, r16
    3c78:	80 81       	ld	r24, Z
    3c7a:	89 83       	std	Y+1, r24	; 0x01
    3c7c:	0e 5f       	subi	r16, 0xFE	; 254
    3c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c80:	44 24       	eor	r4, r4
    3c82:	43 94       	inc	r4
    3c84:	51 2c       	mov	r5, r1
    3c86:	54 01       	movw	r10, r8
    3c88:	14 c0       	rjmp	.+40     	; 0x3cb2 <vfprintf+0x136>
    3c8a:	38 01       	movw	r6, r16
    3c8c:	f2 e0       	ldi	r31, 0x02	; 2
    3c8e:	6f 0e       	add	r6, r31
    3c90:	71 1c       	adc	r7, r1
    3c92:	f8 01       	movw	r30, r16
    3c94:	a0 80       	ld	r10, Z
    3c96:	b1 80       	ldd	r11, Z+1	; 0x01
    3c98:	26 ff       	sbrs	r18, 6
    3c9a:	03 c0       	rjmp	.+6      	; 0x3ca2 <vfprintf+0x126>
    3c9c:	65 2d       	mov	r22, r5
    3c9e:	70 e0       	ldi	r23, 0x00	; 0
    3ca0:	02 c0       	rjmp	.+4      	; 0x3ca6 <vfprintf+0x12a>
    3ca2:	6f ef       	ldi	r22, 0xFF	; 255
    3ca4:	7f ef       	ldi	r23, 0xFF	; 255
    3ca6:	c5 01       	movw	r24, r10
    3ca8:	2c 87       	std	Y+12, r18	; 0x0c
    3caa:	36 d1       	rcall	.+620    	; 0x3f18 <strnlen>
    3cac:	2c 01       	movw	r4, r24
    3cae:	83 01       	movw	r16, r6
    3cb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    3cb2:	2f 77       	andi	r18, 0x7F	; 127
    3cb4:	22 2e       	mov	r2, r18
    3cb6:	16 c0       	rjmp	.+44     	; 0x3ce4 <vfprintf+0x168>
    3cb8:	38 01       	movw	r6, r16
    3cba:	f2 e0       	ldi	r31, 0x02	; 2
    3cbc:	6f 0e       	add	r6, r31
    3cbe:	71 1c       	adc	r7, r1
    3cc0:	f8 01       	movw	r30, r16
    3cc2:	a0 80       	ld	r10, Z
    3cc4:	b1 80       	ldd	r11, Z+1	; 0x01
    3cc6:	26 ff       	sbrs	r18, 6
    3cc8:	03 c0       	rjmp	.+6      	; 0x3cd0 <vfprintf+0x154>
    3cca:	65 2d       	mov	r22, r5
    3ccc:	70 e0       	ldi	r23, 0x00	; 0
    3cce:	02 c0       	rjmp	.+4      	; 0x3cd4 <vfprintf+0x158>
    3cd0:	6f ef       	ldi	r22, 0xFF	; 255
    3cd2:	7f ef       	ldi	r23, 0xFF	; 255
    3cd4:	c5 01       	movw	r24, r10
    3cd6:	2c 87       	std	Y+12, r18	; 0x0c
    3cd8:	14 d1       	rcall	.+552    	; 0x3f02 <strnlen_P>
    3cda:	2c 01       	movw	r4, r24
    3cdc:	2c 85       	ldd	r18, Y+12	; 0x0c
    3cde:	20 68       	ori	r18, 0x80	; 128
    3ce0:	22 2e       	mov	r2, r18
    3ce2:	83 01       	movw	r16, r6
    3ce4:	23 fc       	sbrc	r2, 3
    3ce6:	19 c0       	rjmp	.+50     	; 0x3d1a <vfprintf+0x19e>
    3ce8:	83 2d       	mov	r24, r3
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	48 16       	cp	r4, r24
    3cee:	59 06       	cpc	r5, r25
    3cf0:	a0 f4       	brcc	.+40     	; 0x3d1a <vfprintf+0x19e>
    3cf2:	b7 01       	movw	r22, r14
    3cf4:	80 e2       	ldi	r24, 0x20	; 32
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	1a d1       	rcall	.+564    	; 0x3f2e <fputc>
    3cfa:	3a 94       	dec	r3
    3cfc:	f5 cf       	rjmp	.-22     	; 0x3ce8 <vfprintf+0x16c>
    3cfe:	f5 01       	movw	r30, r10
    3d00:	27 fc       	sbrc	r2, 7
    3d02:	85 91       	lpm	r24, Z+
    3d04:	27 fe       	sbrs	r2, 7
    3d06:	81 91       	ld	r24, Z+
    3d08:	5f 01       	movw	r10, r30
    3d0a:	b7 01       	movw	r22, r14
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	0f d1       	rcall	.+542    	; 0x3f2e <fputc>
    3d10:	31 10       	cpse	r3, r1
    3d12:	3a 94       	dec	r3
    3d14:	f1 e0       	ldi	r31, 0x01	; 1
    3d16:	4f 1a       	sub	r4, r31
    3d18:	51 08       	sbc	r5, r1
    3d1a:	41 14       	cp	r4, r1
    3d1c:	51 04       	cpc	r5, r1
    3d1e:	79 f7       	brne	.-34     	; 0x3cfe <vfprintf+0x182>
    3d20:	de c0       	rjmp	.+444    	; 0x3ede <vfprintf+0x362>
    3d22:	84 36       	cpi	r24, 0x64	; 100
    3d24:	11 f0       	breq	.+4      	; 0x3d2a <vfprintf+0x1ae>
    3d26:	89 36       	cpi	r24, 0x69	; 105
    3d28:	31 f5       	brne	.+76     	; 0x3d76 <vfprintf+0x1fa>
    3d2a:	f8 01       	movw	r30, r16
    3d2c:	27 ff       	sbrs	r18, 7
    3d2e:	07 c0       	rjmp	.+14     	; 0x3d3e <vfprintf+0x1c2>
    3d30:	60 81       	ld	r22, Z
    3d32:	71 81       	ldd	r23, Z+1	; 0x01
    3d34:	82 81       	ldd	r24, Z+2	; 0x02
    3d36:	93 81       	ldd	r25, Z+3	; 0x03
    3d38:	0c 5f       	subi	r16, 0xFC	; 252
    3d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d3c:	08 c0       	rjmp	.+16     	; 0x3d4e <vfprintf+0x1d2>
    3d3e:	60 81       	ld	r22, Z
    3d40:	71 81       	ldd	r23, Z+1	; 0x01
    3d42:	07 2e       	mov	r0, r23
    3d44:	00 0c       	add	r0, r0
    3d46:	88 0b       	sbc	r24, r24
    3d48:	99 0b       	sbc	r25, r25
    3d4a:	0e 5f       	subi	r16, 0xFE	; 254
    3d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d4e:	2f 76       	andi	r18, 0x6F	; 111
    3d50:	72 2e       	mov	r7, r18
    3d52:	97 ff       	sbrs	r25, 7
    3d54:	09 c0       	rjmp	.+18     	; 0x3d68 <vfprintf+0x1ec>
    3d56:	90 95       	com	r25
    3d58:	80 95       	com	r24
    3d5a:	70 95       	com	r23
    3d5c:	61 95       	neg	r22
    3d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d60:	8f 4f       	sbci	r24, 0xFF	; 255
    3d62:	9f 4f       	sbci	r25, 0xFF	; 255
    3d64:	20 68       	ori	r18, 0x80	; 128
    3d66:	72 2e       	mov	r7, r18
    3d68:	2a e0       	ldi	r18, 0x0A	; 10
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	a4 01       	movw	r20, r8
    3d6e:	17 d1       	rcall	.+558    	; 0x3f9e <__ultoa_invert>
    3d70:	a8 2e       	mov	r10, r24
    3d72:	a8 18       	sub	r10, r8
    3d74:	43 c0       	rjmp	.+134    	; 0x3dfc <vfprintf+0x280>
    3d76:	85 37       	cpi	r24, 0x75	; 117
    3d78:	29 f4       	brne	.+10     	; 0x3d84 <vfprintf+0x208>
    3d7a:	2f 7e       	andi	r18, 0xEF	; 239
    3d7c:	b2 2e       	mov	r11, r18
    3d7e:	2a e0       	ldi	r18, 0x0A	; 10
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	25 c0       	rjmp	.+74     	; 0x3dce <vfprintf+0x252>
    3d84:	f2 2f       	mov	r31, r18
    3d86:	f9 7f       	andi	r31, 0xF9	; 249
    3d88:	bf 2e       	mov	r11, r31
    3d8a:	8f 36       	cpi	r24, 0x6F	; 111
    3d8c:	c1 f0       	breq	.+48     	; 0x3dbe <vfprintf+0x242>
    3d8e:	18 f4       	brcc	.+6      	; 0x3d96 <vfprintf+0x21a>
    3d90:	88 35       	cpi	r24, 0x58	; 88
    3d92:	79 f0       	breq	.+30     	; 0x3db2 <vfprintf+0x236>
    3d94:	ad c0       	rjmp	.+346    	; 0x3ef0 <vfprintf+0x374>
    3d96:	80 37       	cpi	r24, 0x70	; 112
    3d98:	19 f0       	breq	.+6      	; 0x3da0 <vfprintf+0x224>
    3d9a:	88 37       	cpi	r24, 0x78	; 120
    3d9c:	21 f0       	breq	.+8      	; 0x3da6 <vfprintf+0x22a>
    3d9e:	a8 c0       	rjmp	.+336    	; 0x3ef0 <vfprintf+0x374>
    3da0:	2f 2f       	mov	r18, r31
    3da2:	20 61       	ori	r18, 0x10	; 16
    3da4:	b2 2e       	mov	r11, r18
    3da6:	b4 fe       	sbrs	r11, 4
    3da8:	0d c0       	rjmp	.+26     	; 0x3dc4 <vfprintf+0x248>
    3daa:	8b 2d       	mov	r24, r11
    3dac:	84 60       	ori	r24, 0x04	; 4
    3dae:	b8 2e       	mov	r11, r24
    3db0:	09 c0       	rjmp	.+18     	; 0x3dc4 <vfprintf+0x248>
    3db2:	24 ff       	sbrs	r18, 4
    3db4:	0a c0       	rjmp	.+20     	; 0x3dca <vfprintf+0x24e>
    3db6:	9f 2f       	mov	r25, r31
    3db8:	96 60       	ori	r25, 0x06	; 6
    3dba:	b9 2e       	mov	r11, r25
    3dbc:	06 c0       	rjmp	.+12     	; 0x3dca <vfprintf+0x24e>
    3dbe:	28 e0       	ldi	r18, 0x08	; 8
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	05 c0       	rjmp	.+10     	; 0x3dce <vfprintf+0x252>
    3dc4:	20 e1       	ldi	r18, 0x10	; 16
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	02 c0       	rjmp	.+4      	; 0x3dce <vfprintf+0x252>
    3dca:	20 e1       	ldi	r18, 0x10	; 16
    3dcc:	32 e0       	ldi	r19, 0x02	; 2
    3dce:	f8 01       	movw	r30, r16
    3dd0:	b7 fe       	sbrs	r11, 7
    3dd2:	07 c0       	rjmp	.+14     	; 0x3de2 <vfprintf+0x266>
    3dd4:	60 81       	ld	r22, Z
    3dd6:	71 81       	ldd	r23, Z+1	; 0x01
    3dd8:	82 81       	ldd	r24, Z+2	; 0x02
    3dda:	93 81       	ldd	r25, Z+3	; 0x03
    3ddc:	0c 5f       	subi	r16, 0xFC	; 252
    3dde:	1f 4f       	sbci	r17, 0xFF	; 255
    3de0:	06 c0       	rjmp	.+12     	; 0x3dee <vfprintf+0x272>
    3de2:	60 81       	ld	r22, Z
    3de4:	71 81       	ldd	r23, Z+1	; 0x01
    3de6:	80 e0       	ldi	r24, 0x00	; 0
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	0e 5f       	subi	r16, 0xFE	; 254
    3dec:	1f 4f       	sbci	r17, 0xFF	; 255
    3dee:	a4 01       	movw	r20, r8
    3df0:	d6 d0       	rcall	.+428    	; 0x3f9e <__ultoa_invert>
    3df2:	a8 2e       	mov	r10, r24
    3df4:	a8 18       	sub	r10, r8
    3df6:	fb 2d       	mov	r31, r11
    3df8:	ff 77       	andi	r31, 0x7F	; 127
    3dfa:	7f 2e       	mov	r7, r31
    3dfc:	76 fe       	sbrs	r7, 6
    3dfe:	0b c0       	rjmp	.+22     	; 0x3e16 <vfprintf+0x29a>
    3e00:	37 2d       	mov	r19, r7
    3e02:	3e 7f       	andi	r19, 0xFE	; 254
    3e04:	a5 14       	cp	r10, r5
    3e06:	50 f4       	brcc	.+20     	; 0x3e1c <vfprintf+0x2a0>
    3e08:	74 fe       	sbrs	r7, 4
    3e0a:	0a c0       	rjmp	.+20     	; 0x3e20 <vfprintf+0x2a4>
    3e0c:	72 fc       	sbrc	r7, 2
    3e0e:	08 c0       	rjmp	.+16     	; 0x3e20 <vfprintf+0x2a4>
    3e10:	37 2d       	mov	r19, r7
    3e12:	3e 7e       	andi	r19, 0xEE	; 238
    3e14:	05 c0       	rjmp	.+10     	; 0x3e20 <vfprintf+0x2a4>
    3e16:	ba 2c       	mov	r11, r10
    3e18:	37 2d       	mov	r19, r7
    3e1a:	03 c0       	rjmp	.+6      	; 0x3e22 <vfprintf+0x2a6>
    3e1c:	ba 2c       	mov	r11, r10
    3e1e:	01 c0       	rjmp	.+2      	; 0x3e22 <vfprintf+0x2a6>
    3e20:	b5 2c       	mov	r11, r5
    3e22:	34 ff       	sbrs	r19, 4
    3e24:	0d c0       	rjmp	.+26     	; 0x3e40 <vfprintf+0x2c4>
    3e26:	fe 01       	movw	r30, r28
    3e28:	ea 0d       	add	r30, r10
    3e2a:	f1 1d       	adc	r31, r1
    3e2c:	80 81       	ld	r24, Z
    3e2e:	80 33       	cpi	r24, 0x30	; 48
    3e30:	11 f4       	brne	.+4      	; 0x3e36 <vfprintf+0x2ba>
    3e32:	39 7e       	andi	r19, 0xE9	; 233
    3e34:	09 c0       	rjmp	.+18     	; 0x3e48 <vfprintf+0x2cc>
    3e36:	32 ff       	sbrs	r19, 2
    3e38:	06 c0       	rjmp	.+12     	; 0x3e46 <vfprintf+0x2ca>
    3e3a:	b3 94       	inc	r11
    3e3c:	b3 94       	inc	r11
    3e3e:	04 c0       	rjmp	.+8      	; 0x3e48 <vfprintf+0x2cc>
    3e40:	83 2f       	mov	r24, r19
    3e42:	86 78       	andi	r24, 0x86	; 134
    3e44:	09 f0       	breq	.+2      	; 0x3e48 <vfprintf+0x2cc>
    3e46:	b3 94       	inc	r11
    3e48:	33 fd       	sbrc	r19, 3
    3e4a:	12 c0       	rjmp	.+36     	; 0x3e70 <vfprintf+0x2f4>
    3e4c:	30 ff       	sbrs	r19, 0
    3e4e:	06 c0       	rjmp	.+12     	; 0x3e5c <vfprintf+0x2e0>
    3e50:	5a 2c       	mov	r5, r10
    3e52:	b3 14       	cp	r11, r3
    3e54:	18 f4       	brcc	.+6      	; 0x3e5c <vfprintf+0x2e0>
    3e56:	53 0c       	add	r5, r3
    3e58:	5b 18       	sub	r5, r11
    3e5a:	b3 2c       	mov	r11, r3
    3e5c:	b3 14       	cp	r11, r3
    3e5e:	60 f4       	brcc	.+24     	; 0x3e78 <vfprintf+0x2fc>
    3e60:	b7 01       	movw	r22, r14
    3e62:	80 e2       	ldi	r24, 0x20	; 32
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	3c 87       	std	Y+12, r19	; 0x0c
    3e68:	62 d0       	rcall	.+196    	; 0x3f2e <fputc>
    3e6a:	b3 94       	inc	r11
    3e6c:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e6e:	f6 cf       	rjmp	.-20     	; 0x3e5c <vfprintf+0x2e0>
    3e70:	b3 14       	cp	r11, r3
    3e72:	10 f4       	brcc	.+4      	; 0x3e78 <vfprintf+0x2fc>
    3e74:	3b 18       	sub	r3, r11
    3e76:	01 c0       	rjmp	.+2      	; 0x3e7a <vfprintf+0x2fe>
    3e78:	31 2c       	mov	r3, r1
    3e7a:	34 ff       	sbrs	r19, 4
    3e7c:	11 c0       	rjmp	.+34     	; 0x3ea0 <vfprintf+0x324>
    3e7e:	b7 01       	movw	r22, r14
    3e80:	80 e3       	ldi	r24, 0x30	; 48
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	3c 87       	std	Y+12, r19	; 0x0c
    3e86:	53 d0       	rcall	.+166    	; 0x3f2e <fputc>
    3e88:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e8a:	32 ff       	sbrs	r19, 2
    3e8c:	16 c0       	rjmp	.+44     	; 0x3eba <vfprintf+0x33e>
    3e8e:	31 fd       	sbrc	r19, 1
    3e90:	03 c0       	rjmp	.+6      	; 0x3e98 <vfprintf+0x31c>
    3e92:	88 e7       	ldi	r24, 0x78	; 120
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	02 c0       	rjmp	.+4      	; 0x3e9c <vfprintf+0x320>
    3e98:	88 e5       	ldi	r24, 0x58	; 88
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	b7 01       	movw	r22, r14
    3e9e:	0c c0       	rjmp	.+24     	; 0x3eb8 <vfprintf+0x33c>
    3ea0:	83 2f       	mov	r24, r19
    3ea2:	86 78       	andi	r24, 0x86	; 134
    3ea4:	51 f0       	breq	.+20     	; 0x3eba <vfprintf+0x33e>
    3ea6:	31 ff       	sbrs	r19, 1
    3ea8:	02 c0       	rjmp	.+4      	; 0x3eae <vfprintf+0x332>
    3eaa:	8b e2       	ldi	r24, 0x2B	; 43
    3eac:	01 c0       	rjmp	.+2      	; 0x3eb0 <vfprintf+0x334>
    3eae:	80 e2       	ldi	r24, 0x20	; 32
    3eb0:	37 fd       	sbrc	r19, 7
    3eb2:	8d e2       	ldi	r24, 0x2D	; 45
    3eb4:	b7 01       	movw	r22, r14
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	3a d0       	rcall	.+116    	; 0x3f2e <fputc>
    3eba:	a5 14       	cp	r10, r5
    3ebc:	30 f4       	brcc	.+12     	; 0x3eca <vfprintf+0x34e>
    3ebe:	b7 01       	movw	r22, r14
    3ec0:	80 e3       	ldi	r24, 0x30	; 48
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	34 d0       	rcall	.+104    	; 0x3f2e <fputc>
    3ec6:	5a 94       	dec	r5
    3ec8:	f8 cf       	rjmp	.-16     	; 0x3eba <vfprintf+0x33e>
    3eca:	aa 94       	dec	r10
    3ecc:	f4 01       	movw	r30, r8
    3ece:	ea 0d       	add	r30, r10
    3ed0:	f1 1d       	adc	r31, r1
    3ed2:	80 81       	ld	r24, Z
    3ed4:	b7 01       	movw	r22, r14
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	2a d0       	rcall	.+84     	; 0x3f2e <fputc>
    3eda:	a1 10       	cpse	r10, r1
    3edc:	f6 cf       	rjmp	.-20     	; 0x3eca <vfprintf+0x34e>
    3ede:	33 20       	and	r3, r3
    3ee0:	09 f4       	brne	.+2      	; 0x3ee4 <vfprintf+0x368>
    3ee2:	5d ce       	rjmp	.-838    	; 0x3b9e <vfprintf+0x22>
    3ee4:	b7 01       	movw	r22, r14
    3ee6:	80 e2       	ldi	r24, 0x20	; 32
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	21 d0       	rcall	.+66     	; 0x3f2e <fputc>
    3eec:	3a 94       	dec	r3
    3eee:	f7 cf       	rjmp	.-18     	; 0x3ede <vfprintf+0x362>
    3ef0:	f7 01       	movw	r30, r14
    3ef2:	86 81       	ldd	r24, Z+6	; 0x06
    3ef4:	97 81       	ldd	r25, Z+7	; 0x07
    3ef6:	02 c0       	rjmp	.+4      	; 0x3efc <vfprintf+0x380>
    3ef8:	8f ef       	ldi	r24, 0xFF	; 255
    3efa:	9f ef       	ldi	r25, 0xFF	; 255
    3efc:	2c 96       	adiw	r28, 0x0c	; 12
    3efe:	e2 e1       	ldi	r30, 0x12	; 18
    3f00:	c8 c0       	rjmp	.+400    	; 0x4092 <__epilogue_restores__>

00003f02 <strnlen_P>:
    3f02:	fc 01       	movw	r30, r24
    3f04:	05 90       	lpm	r0, Z+
    3f06:	61 50       	subi	r22, 0x01	; 1
    3f08:	70 40       	sbci	r23, 0x00	; 0
    3f0a:	01 10       	cpse	r0, r1
    3f0c:	d8 f7       	brcc	.-10     	; 0x3f04 <strnlen_P+0x2>
    3f0e:	80 95       	com	r24
    3f10:	90 95       	com	r25
    3f12:	8e 0f       	add	r24, r30
    3f14:	9f 1f       	adc	r25, r31
    3f16:	08 95       	ret

00003f18 <strnlen>:
    3f18:	fc 01       	movw	r30, r24
    3f1a:	61 50       	subi	r22, 0x01	; 1
    3f1c:	70 40       	sbci	r23, 0x00	; 0
    3f1e:	01 90       	ld	r0, Z+
    3f20:	01 10       	cpse	r0, r1
    3f22:	d8 f7       	brcc	.-10     	; 0x3f1a <strnlen+0x2>
    3f24:	80 95       	com	r24
    3f26:	90 95       	com	r25
    3f28:	8e 0f       	add	r24, r30
    3f2a:	9f 1f       	adc	r25, r31
    3f2c:	08 95       	ret

00003f2e <fputc>:
    3f2e:	0f 93       	push	r16
    3f30:	1f 93       	push	r17
    3f32:	cf 93       	push	r28
    3f34:	df 93       	push	r29
    3f36:	fb 01       	movw	r30, r22
    3f38:	23 81       	ldd	r18, Z+3	; 0x03
    3f3a:	21 fd       	sbrc	r18, 1
    3f3c:	03 c0       	rjmp	.+6      	; 0x3f44 <fputc+0x16>
    3f3e:	8f ef       	ldi	r24, 0xFF	; 255
    3f40:	9f ef       	ldi	r25, 0xFF	; 255
    3f42:	28 c0       	rjmp	.+80     	; 0x3f94 <fputc+0x66>
    3f44:	22 ff       	sbrs	r18, 2
    3f46:	16 c0       	rjmp	.+44     	; 0x3f74 <fputc+0x46>
    3f48:	46 81       	ldd	r20, Z+6	; 0x06
    3f4a:	57 81       	ldd	r21, Z+7	; 0x07
    3f4c:	24 81       	ldd	r18, Z+4	; 0x04
    3f4e:	35 81       	ldd	r19, Z+5	; 0x05
    3f50:	42 17       	cp	r20, r18
    3f52:	53 07       	cpc	r21, r19
    3f54:	44 f4       	brge	.+16     	; 0x3f66 <fputc+0x38>
    3f56:	a0 81       	ld	r26, Z
    3f58:	b1 81       	ldd	r27, Z+1	; 0x01
    3f5a:	9d 01       	movw	r18, r26
    3f5c:	2f 5f       	subi	r18, 0xFF	; 255
    3f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f60:	31 83       	std	Z+1, r19	; 0x01
    3f62:	20 83       	st	Z, r18
    3f64:	8c 93       	st	X, r24
    3f66:	26 81       	ldd	r18, Z+6	; 0x06
    3f68:	37 81       	ldd	r19, Z+7	; 0x07
    3f6a:	2f 5f       	subi	r18, 0xFF	; 255
    3f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f6e:	37 83       	std	Z+7, r19	; 0x07
    3f70:	26 83       	std	Z+6, r18	; 0x06
    3f72:	10 c0       	rjmp	.+32     	; 0x3f94 <fputc+0x66>
    3f74:	eb 01       	movw	r28, r22
    3f76:	09 2f       	mov	r16, r25
    3f78:	18 2f       	mov	r17, r24
    3f7a:	00 84       	ldd	r0, Z+8	; 0x08
    3f7c:	f1 85       	ldd	r31, Z+9	; 0x09
    3f7e:	e0 2d       	mov	r30, r0
    3f80:	09 95       	icall
    3f82:	89 2b       	or	r24, r25
    3f84:	e1 f6       	brne	.-72     	; 0x3f3e <fputc+0x10>
    3f86:	8e 81       	ldd	r24, Y+6	; 0x06
    3f88:	9f 81       	ldd	r25, Y+7	; 0x07
    3f8a:	01 96       	adiw	r24, 0x01	; 1
    3f8c:	9f 83       	std	Y+7, r25	; 0x07
    3f8e:	8e 83       	std	Y+6, r24	; 0x06
    3f90:	81 2f       	mov	r24, r17
    3f92:	90 2f       	mov	r25, r16
    3f94:	df 91       	pop	r29
    3f96:	cf 91       	pop	r28
    3f98:	1f 91       	pop	r17
    3f9a:	0f 91       	pop	r16
    3f9c:	08 95       	ret

00003f9e <__ultoa_invert>:
    3f9e:	fa 01       	movw	r30, r20
    3fa0:	aa 27       	eor	r26, r26
    3fa2:	28 30       	cpi	r18, 0x08	; 8
    3fa4:	51 f1       	breq	.+84     	; 0x3ffa <__ultoa_invert+0x5c>
    3fa6:	20 31       	cpi	r18, 0x10	; 16
    3fa8:	81 f1       	breq	.+96     	; 0x400a <__ultoa_invert+0x6c>
    3faa:	e8 94       	clt
    3fac:	6f 93       	push	r22
    3fae:	6e 7f       	andi	r22, 0xFE	; 254
    3fb0:	6e 5f       	subi	r22, 0xFE	; 254
    3fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb4:	8f 4f       	sbci	r24, 0xFF	; 255
    3fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb8:	af 4f       	sbci	r26, 0xFF	; 255
    3fba:	b1 e0       	ldi	r27, 0x01	; 1
    3fbc:	3e d0       	rcall	.+124    	; 0x403a <__ultoa_invert+0x9c>
    3fbe:	b4 e0       	ldi	r27, 0x04	; 4
    3fc0:	3c d0       	rcall	.+120    	; 0x403a <__ultoa_invert+0x9c>
    3fc2:	67 0f       	add	r22, r23
    3fc4:	78 1f       	adc	r23, r24
    3fc6:	89 1f       	adc	r24, r25
    3fc8:	9a 1f       	adc	r25, r26
    3fca:	a1 1d       	adc	r26, r1
    3fcc:	68 0f       	add	r22, r24
    3fce:	79 1f       	adc	r23, r25
    3fd0:	8a 1f       	adc	r24, r26
    3fd2:	91 1d       	adc	r25, r1
    3fd4:	a1 1d       	adc	r26, r1
    3fd6:	6a 0f       	add	r22, r26
    3fd8:	71 1d       	adc	r23, r1
    3fda:	81 1d       	adc	r24, r1
    3fdc:	91 1d       	adc	r25, r1
    3fde:	a1 1d       	adc	r26, r1
    3fe0:	20 d0       	rcall	.+64     	; 0x4022 <__ultoa_invert+0x84>
    3fe2:	09 f4       	brne	.+2      	; 0x3fe6 <__ultoa_invert+0x48>
    3fe4:	68 94       	set
    3fe6:	3f 91       	pop	r19
    3fe8:	2a e0       	ldi	r18, 0x0A	; 10
    3fea:	26 9f       	mul	r18, r22
    3fec:	11 24       	eor	r1, r1
    3fee:	30 19       	sub	r19, r0
    3ff0:	30 5d       	subi	r19, 0xD0	; 208
    3ff2:	31 93       	st	Z+, r19
    3ff4:	de f6       	brtc	.-74     	; 0x3fac <__ultoa_invert+0xe>
    3ff6:	cf 01       	movw	r24, r30
    3ff8:	08 95       	ret
    3ffa:	46 2f       	mov	r20, r22
    3ffc:	47 70       	andi	r20, 0x07	; 7
    3ffe:	40 5d       	subi	r20, 0xD0	; 208
    4000:	41 93       	st	Z+, r20
    4002:	b3 e0       	ldi	r27, 0x03	; 3
    4004:	0f d0       	rcall	.+30     	; 0x4024 <__ultoa_invert+0x86>
    4006:	c9 f7       	brne	.-14     	; 0x3ffa <__ultoa_invert+0x5c>
    4008:	f6 cf       	rjmp	.-20     	; 0x3ff6 <__ultoa_invert+0x58>
    400a:	46 2f       	mov	r20, r22
    400c:	4f 70       	andi	r20, 0x0F	; 15
    400e:	40 5d       	subi	r20, 0xD0	; 208
    4010:	4a 33       	cpi	r20, 0x3A	; 58
    4012:	18 f0       	brcs	.+6      	; 0x401a <__ultoa_invert+0x7c>
    4014:	49 5d       	subi	r20, 0xD9	; 217
    4016:	31 fd       	sbrc	r19, 1
    4018:	40 52       	subi	r20, 0x20	; 32
    401a:	41 93       	st	Z+, r20
    401c:	02 d0       	rcall	.+4      	; 0x4022 <__ultoa_invert+0x84>
    401e:	a9 f7       	brne	.-22     	; 0x400a <__ultoa_invert+0x6c>
    4020:	ea cf       	rjmp	.-44     	; 0x3ff6 <__ultoa_invert+0x58>
    4022:	b4 e0       	ldi	r27, 0x04	; 4
    4024:	a6 95       	lsr	r26
    4026:	97 95       	ror	r25
    4028:	87 95       	ror	r24
    402a:	77 95       	ror	r23
    402c:	67 95       	ror	r22
    402e:	ba 95       	dec	r27
    4030:	c9 f7       	brne	.-14     	; 0x4024 <__ultoa_invert+0x86>
    4032:	00 97       	sbiw	r24, 0x00	; 0
    4034:	61 05       	cpc	r22, r1
    4036:	71 05       	cpc	r23, r1
    4038:	08 95       	ret
    403a:	9b 01       	movw	r18, r22
    403c:	ac 01       	movw	r20, r24
    403e:	0a 2e       	mov	r0, r26
    4040:	06 94       	lsr	r0
    4042:	57 95       	ror	r21
    4044:	47 95       	ror	r20
    4046:	37 95       	ror	r19
    4048:	27 95       	ror	r18
    404a:	ba 95       	dec	r27
    404c:	c9 f7       	brne	.-14     	; 0x4040 <__ultoa_invert+0xa2>
    404e:	62 0f       	add	r22, r18
    4050:	73 1f       	adc	r23, r19
    4052:	84 1f       	adc	r24, r20
    4054:	95 1f       	adc	r25, r21
    4056:	a0 1d       	adc	r26, r0
    4058:	08 95       	ret

0000405a <__prologue_saves__>:
    405a:	2f 92       	push	r2
    405c:	3f 92       	push	r3
    405e:	4f 92       	push	r4
    4060:	5f 92       	push	r5
    4062:	6f 92       	push	r6
    4064:	7f 92       	push	r7
    4066:	8f 92       	push	r8
    4068:	9f 92       	push	r9
    406a:	af 92       	push	r10
    406c:	bf 92       	push	r11
    406e:	cf 92       	push	r12
    4070:	df 92       	push	r13
    4072:	ef 92       	push	r14
    4074:	ff 92       	push	r15
    4076:	0f 93       	push	r16
    4078:	1f 93       	push	r17
    407a:	cf 93       	push	r28
    407c:	df 93       	push	r29
    407e:	cd b7       	in	r28, 0x3d	; 61
    4080:	de b7       	in	r29, 0x3e	; 62
    4082:	ca 1b       	sub	r28, r26
    4084:	db 0b       	sbc	r29, r27
    4086:	0f b6       	in	r0, 0x3f	; 63
    4088:	f8 94       	cli
    408a:	de bf       	out	0x3e, r29	; 62
    408c:	0f be       	out	0x3f, r0	; 63
    408e:	cd bf       	out	0x3d, r28	; 61
    4090:	09 94       	ijmp

00004092 <__epilogue_restores__>:
    4092:	2a 88       	ldd	r2, Y+18	; 0x12
    4094:	39 88       	ldd	r3, Y+17	; 0x11
    4096:	48 88       	ldd	r4, Y+16	; 0x10
    4098:	5f 84       	ldd	r5, Y+15	; 0x0f
    409a:	6e 84       	ldd	r6, Y+14	; 0x0e
    409c:	7d 84       	ldd	r7, Y+13	; 0x0d
    409e:	8c 84       	ldd	r8, Y+12	; 0x0c
    40a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    40a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    40a4:	b9 84       	ldd	r11, Y+9	; 0x09
    40a6:	c8 84       	ldd	r12, Y+8	; 0x08
    40a8:	df 80       	ldd	r13, Y+7	; 0x07
    40aa:	ee 80       	ldd	r14, Y+6	; 0x06
    40ac:	fd 80       	ldd	r15, Y+5	; 0x05
    40ae:	0c 81       	ldd	r16, Y+4	; 0x04
    40b0:	1b 81       	ldd	r17, Y+3	; 0x03
    40b2:	aa 81       	ldd	r26, Y+2	; 0x02
    40b4:	b9 81       	ldd	r27, Y+1	; 0x01
    40b6:	ce 0f       	add	r28, r30
    40b8:	d1 1d       	adc	r29, r1
    40ba:	0f b6       	in	r0, 0x3f	; 63
    40bc:	f8 94       	cli
    40be:	de bf       	out	0x3e, r29	; 62
    40c0:	0f be       	out	0x3f, r0	; 63
    40c2:	cd bf       	out	0x3d, r28	; 61
    40c4:	ed 01       	movw	r28, r26
    40c6:	08 95       	ret

000040c8 <_exit>:
    40c8:	f8 94       	cli

000040ca <__stop_program>:
    40ca:	ff cf       	rjmp	.-2      	; 0x40ca <__stop_program>
