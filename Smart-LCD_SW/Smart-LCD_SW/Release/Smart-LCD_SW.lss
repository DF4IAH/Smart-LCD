
Smart-LCD_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ba  00800100  00004f5e  00004ff2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004f5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000159  008003ba  008003ba  000052ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000052ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00005348  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000aa12  00000000  00000000  000056b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001dce  00000000  00000000  000100ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d42  00000000  00000000  00011e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000162c  00000000  00000000  00015bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022fc  00000000  00000000  00017208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009d93  00000000  00000000  00019504  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  00023297  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e7 c2       	rjmp	.+1486   	; 0x5d0 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__vector_1>
       8:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__vector_2>
       c:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__vector_3>
      10:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__vector_4>
      14:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__vector_5>
      18:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__vector_6>
      1c:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__vector_7>
      20:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__vector_8>
      24:	30 c7       	rjmp	.+3680   	; 0xe86 <__vector_9>
      26:	00 00       	nop
      28:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__vector_10>
      2c:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_11>
      30:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__vector_12>
      34:	c4 c7       	rjmp	.+3976   	; 0xfbe <__vector_13>
      36:	00 00       	nop
      38:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__vector_14>
      3c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_15>
      40:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_16>
      44:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__vector_17>
      48:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_18>
      4c:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__vector_19>
      50:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__vector_20>
      54:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__vector_21>
      58:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_22>
      5c:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_23>
      60:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_24>
      64:	0c 94 86 09 	jmp	0x130c	; 0x130c <__vector_25>
      68:	7f 18       	sub	r7, r15
      6a:	88 18       	sub	r8, r8
      6c:	95 18       	sub	r9, r5
      6e:	a6 18       	sub	r10, r6
      70:	bb 18       	sub	r11, r11
      72:	d4 18       	sub	r13, r4
      74:	f1 18       	sub	r15, r1
      76:	12 19       	sub	r17, r2
      78:	37 19       	sub	r19, r7
      7a:	60 19       	sub	r22, r0
      7c:	8d 19       	sub	r24, r13
      7e:	be 19       	sub	r27, r14
      80:	f3 19       	sub	r31, r3
      82:	2d 1b       	sub	r18, r29
      84:	5a 1b       	sub	r21, r26
      86:	86 1b       	sub	r24, r22
      88:	ab 1b       	sub	r26, r27
      8a:	d0 1b       	sub	r29, r16
      8c:	e7 1b       	sub	r30, r23
      8e:	c8 1c       	adc	r12, r8
      90:	c8 1c       	adc	r12, r8
      92:	05 1c       	adc	r0, r5
      94:	24 1c       	adc	r2, r4
      96:	3a 1c       	adc	r3, r10
      98:	51 1c       	adc	r5, r1
      9a:	7f 1c       	adc	r7, r15
      9c:	ac 1c       	adc	r10, r12

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 00       	nop
      a4:	00 20       	and	r0, r0
      a6:	20 20       	and	r2, r0
      a8:	20 20       	and	r2, r0
      aa:	00 20       	and	r0, r0
      ac:	50 50       	subi	r21, 0x00	; 0
      ae:	50 00       	.word	0x0050	; ????
      b0:	00 00       	nop
      b2:	00 50       	subi	r16, 0x00	; 0
      b4:	50 f8       	bld	r5, 0
      b6:	50 f8       	bld	r5, 0
      b8:	50 50       	subi	r21, 0x00	; 0
      ba:	20 78       	andi	r18, 0x80	; 128
      bc:	a0 70       	andi	r26, 0x00	; 0
      be:	28 f0       	brcs	.+10     	; 0xca <__trampolines_end+0x2c>
      c0:	20 c0       	rjmp	.+64     	; 0x102 <__trampolines_end+0x64>
      c2:	c8 10       	cpse	r12, r8
      c4:	20 40       	sbci	r18, 0x00	; 0
      c6:	98 18       	sub	r9, r8
      c8:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x3b8d>
      cc:	a8 90       	.word	0x90a8	; ????
      ce:	68 60       	ori	r22, 0x08	; 8
      d0:	20 40       	sbci	r18, 0x00	; 0
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	10 20       	and	r1, r0
      d8:	40 40       	sbci	r20, 0x00	; 0
      da:	40 20       	and	r4, r0
      dc:	10 40       	sbci	r17, 0x00	; 0
      de:	20 10       	cpse	r2, r0
      e0:	10 10       	cpse	r1, r0
      e2:	20 40       	sbci	r18, 0x00	; 0
      e4:	00 50       	subi	r16, 0x00	; 0
      e6:	20 f8       	bld	r2, 0
      e8:	20 50       	subi	r18, 0x00	; 0
      ea:	00 00       	nop
      ec:	20 20       	and	r2, r0
      ee:	f8 20       	and	r15, r8
      f0:	20 00       	.word	0x0020	; ????
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	60 20       	and	r6, r0
      f8:	40 00       	.word	0x0040	; ????
      fa:	00 00       	nop
      fc:	f8 00       	.word	0x00f8	; ????
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	00 00       	nop
     104:	00 60       	ori	r16, 0x00	; 0
     106:	60 00       	.word	0x0060	; ????
     108:	08 10       	cpse	r0, r8
     10a:	20 40       	sbci	r18, 0x00	; 0
     10c:	80 00       	.word	0x0080	; ????
     10e:	70 88       	ldd	r7, Z+16	; 0x10
     110:	98 a8       	ldd	r9, Y+48	; 0x30
     112:	c8 88       	ldd	r12, Y+16	; 0x10
     114:	70 20       	and	r7, r0
     116:	60 20       	and	r6, r0
     118:	20 20       	and	r2, r0
     11a:	20 70       	andi	r18, 0x00	; 0
     11c:	70 88       	ldd	r7, Z+16	; 0x10
     11e:	08 10       	cpse	r0, r8
     120:	20 40       	sbci	r18, 0x00	; 0
     122:	f8 f8       	.word	0xf8f8	; ????
     124:	10 20       	and	r1, r0
     126:	10 08       	sbc	r1, r0
     128:	88 70       	andi	r24, 0x08	; 8
     12a:	10 30       	cpi	r17, 0x00	; 0
     12c:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__bss_end+0xbe5>
     130:	10 f8       	bld	r1, 0
     132:	80 f0       	brcs	.+32     	; 0x154 <__trampolines_end+0xb6>
     134:	08 08       	sbc	r0, r8
     136:	88 70       	andi	r24, 0x08	; 8
     138:	30 40       	sbci	r19, 0x00	; 0
     13a:	80 f0       	brcs	.+32     	; 0x15c <__trampolines_end+0xbe>
     13c:	88 88       	ldd	r8, Y+16	; 0x10
     13e:	70 f8       	bld	r7, 0
     140:	08 10       	cpse	r0, r8
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	40 40       	sbci	r20, 0x00	; 0
     146:	70 88       	ldd	r7, Z+16	; 0x10
     148:	88 70       	andi	r24, 0x08	; 8
     14a:	88 88       	ldd	r8, Y+16	; 0x10
     14c:	70 70       	andi	r23, 0x00	; 0
     14e:	88 88       	ldd	r8, Y+16	; 0x10
     150:	78 08       	sbc	r7, r8
     152:	10 60       	ori	r17, 0x00	; 0
     154:	00 60       	ori	r16, 0x00	; 0
     156:	60 00       	.word	0x0060	; ????
     158:	60 60       	ori	r22, 0x00	; 0
     15a:	00 00       	nop
     15c:	60 60       	ori	r22, 0x00	; 0
     15e:	00 60       	ori	r16, 0x00	; 0
     160:	20 40       	sbci	r18, 0x00	; 0
     162:	08 10       	cpse	r0, r8
     164:	20 40       	sbci	r18, 0x00	; 0
     166:	20 10       	cpse	r2, r0
     168:	08 00       	.word	0x0008	; ????
     16a:	00 f8       	bld	r0, 0
     16c:	00 f8       	bld	r0, 0
     16e:	00 00       	nop
     170:	80 40       	sbci	r24, 0x00	; 0
     172:	20 10       	cpse	r2, r0
     174:	20 40       	sbci	r18, 0x00	; 0
     176:	80 70       	andi	r24, 0x00	; 0
     178:	88 08       	sbc	r8, r8
     17a:	10 20       	and	r1, r0
     17c:	00 20       	and	r0, r0
     17e:	70 88       	ldd	r7, Z+16	; 0x10
     180:	08 68       	ori	r16, 0x88	; 136
     182:	a8 a8       	ldd	r10, Y+48	; 0x30
     184:	70 70       	andi	r23, 0x00	; 0
     186:	88 88       	ldd	r8, Y+16	; 0x10
     188:	88 f8       	.word	0xf888	; ????
     18a:	88 88       	ldd	r8, Y+16	; 0x10
     18c:	f0 88       	ldd	r15, Z+16	; 0x10
     18e:	88 f0       	brcs	.+34     	; 0x1b2 <__trampolines_end+0x114>
     190:	88 88       	ldd	r8, Y+16	; 0x10
     192:	f0 70       	andi	r31, 0x00	; 0
     194:	88 80       	ld	r8, Y
     196:	80 80       	ld	r8, Z
     198:	88 70       	andi	r24, 0x08	; 8
     19a:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x8375>
     19e:	88 90       	.word	0x9088	; ????
     1a0:	e0 f8       	bld	r14, 0
     1a2:	80 80       	ld	r8, Z
     1a4:	f0 80       	ld	r15, Z
     1a6:	80 f8       	bld	r8, 0
     1a8:	f8 80       	ld	r15, Y
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	80 80       	ld	r8, Z
     1ae:	80 70       	andi	r24, 0x00	; 0
     1b0:	88 80       	ld	r8, Y
     1b2:	80 98       	cbi	0x10, 0	; 16
     1b4:	88 70       	andi	r24, 0x08	; 8
     1b6:	88 88       	ldd	r8, Y+16	; 0x10
     1b8:	88 f8       	.word	0xf888	; ????
     1ba:	88 88       	ldd	r8, Y+16	; 0x10
     1bc:	88 70       	andi	r24, 0x08	; 8
     1be:	20 20       	and	r2, r0
     1c0:	20 20       	and	r2, r0
     1c2:	20 70       	andi	r18, 0x00	; 0
     1c4:	38 10       	cpse	r3, r8
     1c6:	10 10       	cpse	r1, r0
     1c8:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x834d>
     1cc:	90 a0       	ldd	r9, Z+32	; 0x20
     1ce:	c0 a0       	ldd	r12, Z+32	; 0x20
     1d0:	90 88       	ldd	r9, Z+16	; 0x10
     1d2:	80 80       	ld	r8, Z
     1d4:	80 80       	ld	r8, Z
     1d6:	80 80       	ld	r8, Z
     1d8:	f8 88       	ldd	r15, Y+16	; 0x10
     1da:	d8 a8       	ldd	r13, Y+48	; 0x30
     1dc:	88 88       	ldd	r8, Y+16	; 0x10
     1de:	88 88       	ldd	r8, Y+16	; 0x10
     1e0:	88 88       	ldd	r8, Y+16	; 0x10
     1e2:	c8 a8       	ldd	r12, Y+48	; 0x30
     1e4:	98 88       	ldd	r9, Y+16	; 0x10
     1e6:	88 70       	andi	r24, 0x08	; 8
     1e8:	88 88       	ldd	r8, Y+16	; 0x10
     1ea:	88 88       	ldd	r8, Y+16	; 0x10
     1ec:	88 70       	andi	r24, 0x08	; 8
     1ee:	f0 88       	ldd	r15, Z+16	; 0x10
     1f0:	88 f0       	brcs	.+34     	; 0x214 <__trampolines_end+0x176>
     1f2:	80 80       	ld	r8, Z
     1f4:	80 70       	andi	r24, 0x00	; 0
     1f6:	88 88       	ldd	r8, Y+16	; 0x10
     1f8:	88 a8       	ldd	r8, Y+48	; 0x30
     1fa:	90 68       	ori	r25, 0x80	; 128
     1fc:	f0 88       	ldd	r15, Z+16	; 0x10
     1fe:	88 f0       	brcs	.+34     	; 0x222 <__trampolines_end+0x184>
     200:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x7375>
     204:	80 80       	ld	r8, Z
     206:	70 08       	sbc	r7, r0
     208:	08 f0       	brcs	.+2      	; 0x20c <__trampolines_end+0x16e>
     20a:	f8 20       	and	r15, r8
     20c:	20 20       	and	r2, r0
     20e:	20 20       	and	r2, r0
     210:	20 88       	ldd	r2, Z+16	; 0x10
     212:	88 88       	ldd	r8, Y+16	; 0x10
     214:	88 88       	ldd	r8, Y+16	; 0x10
     216:	88 70       	andi	r24, 0x08	; 8
     218:	88 88       	ldd	r8, Y+16	; 0x10
     21a:	88 88       	ldd	r8, Y+16	; 0x10
     21c:	88 50       	subi	r24, 0x08	; 8
     21e:	20 88       	ldd	r2, Z+16	; 0x10
     220:	88 88       	ldd	r8, Y+16	; 0x10
     222:	a8 a8       	ldd	r10, Y+48	; 0x30
     224:	d8 88       	ldd	r13, Y+16	; 0x10
     226:	88 88       	ldd	r8, Y+16	; 0x10
     228:	50 20       	and	r5, r0
     22a:	50 88       	ldd	r5, Z+16	; 0x10
     22c:	88 88       	ldd	r8, Y+16	; 0x10
     22e:	88 50       	subi	r24, 0x08	; 8
     230:	20 20       	and	r2, r0
     232:	20 20       	and	r2, r0
     234:	f8 08       	sbc	r15, r8
     236:	10 20       	and	r1, r0
     238:	40 80       	ld	r4, Z
     23a:	f8 38       	cpi	r31, 0x88	; 136
     23c:	20 20       	and	r2, r0
     23e:	20 20       	and	r2, r0
     240:	20 38       	cpi	r18, 0x80	; 128
     242:	00 80       	ld	r0, Z
     244:	40 20       	and	r4, r0
     246:	10 08       	sbc	r1, r0
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	20 20       	and	r2, r0
     24c:	20 20       	and	r2, r0
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	20 50       	subi	r18, 0x00	; 0
     252:	88 00       	.word	0x0088	; ????
	...
     25c:	00 f8       	bld	r0, 0
     25e:	40 20       	and	r4, r0
     260:	10 00       	.word	0x0010	; ????
     262:	00 00       	nop
     264:	00 00       	nop
     266:	00 70       	andi	r16, 0x00	; 0
     268:	08 78       	andi	r16, 0x88	; 136
     26a:	88 78       	andi	r24, 0x88	; 136
     26c:	80 80       	ld	r8, Z
     26e:	b0 c8       	rjmp	.-3744   	; 0xfffff3d0 <__eeprom_end+0xff7ef3d0>
     270:	88 88       	ldd	r8, Y+16	; 0x10
     272:	f0 00       	.word	0x00f0	; ????
     274:	00 70       	andi	r16, 0x00	; 0
     276:	80 80       	ld	r8, Z
     278:	88 70       	andi	r24, 0x08	; 8
     27a:	08 08       	sbc	r0, r8
     27c:	68 98       	cbi	0x0d, 0	; 13
     27e:	88 88       	ldd	r8, Y+16	; 0x10
     280:	78 00       	.word	0x0078	; ????
     282:	00 70       	andi	r16, 0x00	; 0
     284:	88 f8       	.word	0xf888	; ????
     286:	80 70       	andi	r24, 0x00	; 0
     288:	30 48       	sbci	r19, 0x80	; 128
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	40 40       	sbci	r20, 0x00	; 0
     28e:	40 00       	.word	0x0040	; ????
     290:	00 78       	andi	r16, 0x80	; 128
     292:	88 78       	andi	r24, 0x88	; 136
     294:	08 30       	cpi	r16, 0x08	; 8
     296:	80 80       	ld	r8, Z
     298:	b0 c8       	rjmp	.-3744   	; 0xfffff3fa <__eeprom_end+0xff7ef3fa>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	88 20       	and	r8, r8
     29e:	00 60       	ori	r16, 0x00	; 0
     2a0:	20 20       	and	r2, r0
     2a2:	20 70       	andi	r18, 0x00	; 0
     2a4:	10 00       	.word	0x0010	; ????
     2a6:	30 10       	cpse	r3, r0
     2a8:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x3b4d>
     2ac:	40 48       	sbci	r20, 0x80	; 128
     2ae:	50 60       	ori	r21, 0x00	; 0
     2b0:	50 48       	sbci	r21, 0x80	; 128
     2b2:	60 20       	and	r6, r0
     2b4:	20 20       	and	r2, r0
     2b6:	20 20       	and	r2, r0
     2b8:	70 00       	.word	0x0070	; ????
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <__trampolines_end+0x21e>
     2bc:	a8 a8       	ldd	r10, Y+48	; 0x30
     2be:	88 88       	ldd	r8, Y+16	; 0x10
     2c0:	00 00       	nop
     2c2:	b0 c8       	rjmp	.-3744   	; 0xfffff424 <__eeprom_end+0xff7ef424>
     2c4:	88 88       	ldd	r8, Y+16	; 0x10
     2c6:	88 00       	.word	0x0088	; ????
     2c8:	00 70       	andi	r16, 0x00	; 0
     2ca:	88 88       	ldd	r8, Y+16	; 0x10
     2cc:	88 70       	andi	r24, 0x08	; 8
     2ce:	00 00       	nop
     2d0:	f0 88       	ldd	r15, Z+16	; 0x10
     2d2:	f0 80       	ld	r15, Z
     2d4:	80 00       	.word	0x0080	; ????
     2d6:	00 68       	ori	r16, 0x80	; 128
     2d8:	98 78       	andi	r25, 0x88	; 136
     2da:	08 08       	sbc	r0, r8
     2dc:	00 00       	nop
     2de:	b0 c8       	rjmp	.-3744   	; 0xfffff440 <__eeprom_end+0xff7ef440>
     2e0:	80 80       	ld	r8, Z
     2e2:	80 00       	.word	0x0080	; ????
     2e4:	00 70       	andi	r16, 0x00	; 0
     2e6:	80 70       	andi	r24, 0x00	; 0
     2e8:	08 f0       	brcs	.+2      	; 0x2ec <__trampolines_end+0x24e>
     2ea:	40 40       	sbci	r20, 0x00	; 0
     2ec:	e0 40       	sbci	r30, 0x00	; 0
     2ee:	40 48       	sbci	r20, 0x80	; 128
     2f0:	30 00       	.word	0x0030	; ????
     2f2:	00 88       	ldd	r0, Z+16	; 0x10
     2f4:	88 88       	ldd	r8, Y+16	; 0x10
     2f6:	98 68       	ori	r25, 0x88	; 136
     2f8:	00 00       	nop
     2fa:	88 88       	ldd	r8, Y+16	; 0x10
     2fc:	88 50       	subi	r24, 0x08	; 8
     2fe:	20 00       	.word	0x0020	; ????
     300:	00 88       	ldd	r0, Z+16	; 0x10
     302:	88 a8       	ldd	r8, Y+48	; 0x30
     304:	a8 50       	subi	r26, 0x08	; 8
     306:	00 00       	nop
     308:	88 50       	subi	r24, 0x08	; 8
     30a:	20 50       	subi	r18, 0x00	; 0
     30c:	88 00       	.word	0x0088	; ????
     30e:	00 88       	ldd	r0, Z+16	; 0x10
     310:	88 78       	andi	r24, 0x88	; 136
     312:	08 70       	andi	r16, 0x08	; 8
     314:	00 00       	nop
     316:	f8 10       	cpse	r15, r8
     318:	20 40       	sbci	r18, 0x00	; 0
     31a:	f8 10       	cpse	r15, r8
     31c:	20 20       	and	r2, r0
     31e:	40 20       	and	r4, r0
     320:	20 10       	cpse	r2, r0
     322:	20 20       	and	r2, r0
     324:	20 20       	and	r2, r0
     326:	20 20       	and	r2, r0
     328:	20 40       	sbci	r18, 0x00	; 0
     32a:	20 20       	and	r2, r0
     32c:	10 20       	and	r1, r0
     32e:	20 40       	sbci	r18, 0x00	; 0
     330:	20 50       	subi	r18, 0x00	; 0
     332:	20 00       	.word	0x0020	; ????
     334:	00 00       	nop
	...

00000337 <sysfont_glyphs>:
     337:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     347:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     357:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     367:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     377:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     387:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     397:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     3a7:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     3b7:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     3c7:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     3d7:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     3e7:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     3f7:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     407:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     417:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     427:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     437:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     447:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     457:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     467:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     477:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     487:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     497:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     4a7:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     4b7:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     4c7:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     4d7:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     4e7:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     4f7:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     507:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     517:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     527:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     537:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     547:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     557:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     567:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     577:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     587:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     597:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     5a7:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     5b7:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     5c7:	20 40 20 50 20 00 00 00 00                           @ P ....

000005d0 <__ctors_end>:
     5d0:	11 24       	eor	r1, r1
     5d2:	1f be       	out	0x3f, r1	; 63
     5d4:	cf ef       	ldi	r28, 0xFF	; 255
     5d6:	d8 e0       	ldi	r29, 0x08	; 8
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	cd bf       	out	0x3d, r28	; 61

000005dc <__do_copy_data>:
     5dc:	13 e0       	ldi	r17, 0x03	; 3
     5de:	a0 e0       	ldi	r26, 0x00	; 0
     5e0:	b1 e0       	ldi	r27, 0x01	; 1
     5e2:	ee e5       	ldi	r30, 0x5E	; 94
     5e4:	ff e4       	ldi	r31, 0x4F	; 79
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <__do_copy_data+0x10>
     5e8:	05 90       	lpm	r0, Z+
     5ea:	0d 92       	st	X+, r0
     5ec:	aa 3b       	cpi	r26, 0xBA	; 186
     5ee:	b1 07       	cpc	r27, r17
     5f0:	d9 f7       	brne	.-10     	; 0x5e8 <__do_copy_data+0xc>

000005f2 <__do_clear_bss>:
     5f2:	25 e0       	ldi	r18, 0x05	; 5
     5f4:	aa eb       	ldi	r26, 0xBA	; 186
     5f6:	b3 e0       	ldi	r27, 0x03	; 3
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <.do_clear_bss_start>

000005fa <.do_clear_bss_loop>:
     5fa:	1d 92       	st	X+, r1

000005fc <.do_clear_bss_start>:
     5fc:	a3 31       	cpi	r26, 0x13	; 19
     5fe:	b2 07       	cpc	r27, r18
     600:	e1 f7       	brne	.-8      	; 0x5fa <.do_clear_bss_loop>
     602:	0e 94 8a 20 	call	0x4114	; 0x4114 <main>
     606:	0c 94 ad 27 	jmp	0x4f5a	; 0x4f5a <_exit>

0000060a <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     60a:	08 95       	ret

0000060c <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	1f 92       	push	r1
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     61c:	8f b7       	in	r24, 0x3f	; 63
     61e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     620:	f8 94       	cli
	return flags;
     622:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     624:	5f 93       	push	r21
     626:	50 e8       	ldi	r21, 0x80	; 128
     628:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     632:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     634:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     636:	0f 90       	pop	r0
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	1f 92       	push	r1
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     648:	9f b7       	in	r25, 0x3f	; 63
     64a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     64c:	f8 94       	cli
	return flags;
     64e:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     650:	81 11       	cpse	r24, r1
     652:	06 c0       	rjmp	.+12     	; 0x660 <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
     654:	60 95       	com	r22
     656:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     65a:	68 23       	and	r22, r24
     65c:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     660:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     662:	0f 90       	pop	r0
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	1f 92       	push	r1
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     674:	9f b7       	in	r25, 0x3f	; 63
     676:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     678:	f8 94       	cli
	return flags;
     67a:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     67c:	81 11       	cpse	r24, r1
     67e:	05 c0       	rjmp	.+10     	; 0x68a <sysclk_disable_module+0x20>
		*(reg + port) |= id;
     680:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     684:	68 2b       	or	r22, r24
     686:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     68a:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     68c:	0f 90       	pop	r0
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <gfx_mono_generic_draw_horizontal_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	08 2f       	mov	r16, r24
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     6a0:	84 2f       	mov	r24, r20
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	80 0f       	add	r24, r16
     6a6:	91 1d       	adc	r25, r1
     6a8:	81 3f       	cpi	r24, 0xF1	; 241
     6aa:	91 05       	cpc	r25, r1
     6ac:	14 f0       	brlt	.+4      	; 0x6b2 <gfx_mono_generic_draw_horizontal_line+0x1e>
		length = GFX_MONO_LCD_WIDTH - x;
     6ae:	40 ef       	ldi	r20, 0xF0	; 240
     6b0:	40 1b       	sub	r20, r16
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     6b2:	44 23       	and	r20, r20
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <gfx_mono_generic_draw_horizontal_line+0x24>
     6b6:	47 c0       	rjmp	.+142    	; 0x746 <gfx_mono_generic_draw_horizontal_line+0xb2>
	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
		length = GFX_MONO_LCD_WIDTH - x;
	}

	page = y / 8;
     6b8:	d6 2f       	mov	r29, r22
     6ba:	d6 95       	lsr	r29
     6bc:	d6 95       	lsr	r29
     6be:	d6 95       	lsr	r29
	pixelmask = (1 << (y - (page * 8)));
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	88 e0       	ldi	r24, 0x08	; 8
     6c4:	d8 9f       	mul	r29, r24
     6c6:	60 19       	sub	r22, r0
     6c8:	71 09       	sbc	r23, r1
     6ca:	11 24       	eor	r1, r1
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <gfx_mono_generic_draw_horizontal_line+0x40>
     6d2:	88 0f       	add	r24, r24
     6d4:	6a 95       	dec	r22
     6d6:	ea f7       	brpl	.-6      	; 0x6d2 <gfx_mono_generic_draw_horizontal_line+0x3e>
     6d8:	f8 2e       	mov	r15, r24
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     6da:	21 30       	cpi	r18, 0x01	; 1
     6dc:	31 f0       	breq	.+12     	; 0x6ea <gfx_mono_generic_draw_horizontal_line+0x56>
     6de:	40 f0       	brcs	.+16     	; 0x6f0 <gfx_mono_generic_draw_horizontal_line+0x5c>
     6e0:	22 30       	cpi	r18, 0x02	; 2
     6e2:	89 f5       	brne	.+98     	; 0x746 <gfx_mono_generic_draw_horizontal_line+0xb2>
     6e4:	cf ef       	ldi	r28, 0xFF	; 255
     6e6:	c4 0f       	add	r28, r20
     6e8:	22 c0       	rjmp	.+68     	; 0x72e <gfx_mono_generic_draw_horizontal_line+0x9a>
     6ea:	cf ef       	ldi	r28, 0xFF	; 255
     6ec:	c4 0f       	add	r28, r20
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <gfx_mono_generic_draw_horizontal_line+0x66>
     6f0:	cf ef       	ldi	r28, 0xFF	; 255
     6f2:	c4 0f       	add	r28, r20
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
			temp &= ~pixelmask;
     6f4:	18 2f       	mov	r17, r24
     6f6:	10 95       	com	r17
     6f8:	0d c0       	rjmp	.+26     	; 0x714 <gfx_mono_generic_draw_horizontal_line+0x80>
     6fa:	10 2f       	mov	r17, r16
     6fc:	1c 0f       	add	r17, r28
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     6fe:	61 2f       	mov	r22, r17
     700:	8d 2f       	mov	r24, r29
     702:	cc d2       	rcall	.+1432   	; 0xc9c <gfx_mono_lcd_uc1608_get_byte>
			temp |= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     704:	4f 2d       	mov	r20, r15
     706:	48 2b       	or	r20, r24
     708:	61 2f       	mov	r22, r17
     70a:	8d 2f       	mov	r24, r29
     70c:	af d2       	rcall	.+1374   	; 0xc6c <gfx_mono_lcd_uc1608_put_byte>
     70e:	c1 50       	subi	r28, 0x01	; 1
     710:	a0 f7       	brcc	.-24     	; 0x6fa <gfx_mono_generic_draw_horizontal_line+0x66>
     712:	19 c0       	rjmp	.+50     	; 0x746 <gfx_mono_generic_draw_horizontal_line+0xb2>
     714:	f0 2e       	mov	r15, r16
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     716:	fc 0e       	add	r15, r28
     718:	6f 2d       	mov	r22, r15
     71a:	8d 2f       	mov	r24, r29
			temp &= ~pixelmask;
     71c:	bf d2       	rcall	.+1406   	; 0xc9c <gfx_mono_lcd_uc1608_get_byte>
			gfx_mono_put_byte(page, x + length, temp);
     71e:	41 2f       	mov	r20, r17
     720:	48 23       	and	r20, r24
     722:	6f 2d       	mov	r22, r15
     724:	8d 2f       	mov	r24, r29
     726:	a2 d2       	rcall	.+1348   	; 0xc6c <gfx_mono_lcd_uc1608_put_byte>
     728:	c1 50       	subi	r28, 0x01	; 1
     72a:	a0 f7       	brcc	.-24     	; 0x714 <gfx_mono_generic_draw_horizontal_line+0x80>
     72c:	0c c0       	rjmp	.+24     	; 0x746 <gfx_mono_generic_draw_horizontal_line+0xb2>
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     72e:	10 2f       	mov	r17, r16
     730:	1c 0f       	add	r17, r28
     732:	61 2f       	mov	r22, r17
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     734:	8d 2f       	mov	r24, r29
     736:	b2 d2       	rcall	.+1380   	; 0xc9c <gfx_mono_lcd_uc1608_get_byte>
     738:	4f 2d       	mov	r20, r15
     73a:	48 27       	eor	r20, r24
     73c:	61 2f       	mov	r22, r17
     73e:	8d 2f       	mov	r24, r29
     740:	95 d2       	rcall	.+1322   	; 0xc6c <gfx_mono_lcd_uc1608_put_byte>
     742:	c1 50       	subi	r28, 0x01	; 1
		break;

	default:
		break;
	}
}
     744:	a0 f7       	brcc	.-24     	; 0x72e <gfx_mono_generic_draw_horizontal_line+0x9a>
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	08 95       	ret

00000752 <gfx_mono_generic_draw_vertical_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	94 2f       	mov	r25, r20
	if (length == 0) {
     760:	44 23       	and	r20, r20
     762:	09 f4       	brne	.+2      	; 0x766 <gfx_mono_generic_draw_vertical_line+0x14>
     764:	46 c0       	rjmp	.+140    	; 0x7f2 <gfx_mono_generic_draw_vertical_line+0xa0>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
     766:	4f ef       	ldi	r20, 0xFF	; 255
     768:	46 0f       	add	r20, r22
     76a:	94 0f       	add	r25, r20

	if (y == y2) {
     76c:	69 13       	cpse	r22, r25
     76e:	08 c0       	rjmp	.+16     	; 0x780 <gfx_mono_generic_draw_vertical_line+0x2e>
		gfx_mono_draw_pixel(x, y, color);
     770:	42 2f       	mov	r20, r18
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
	}
}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
	}

	gfx_coord_t y2 = y + length - 1;

	if (y == y2) {
		gfx_mono_draw_pixel(x, y, color);
     77c:	ef 90       	pop	r14
		return;
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
     77e:	da c2       	rjmp	.+1460   	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     780:	9f 37       	cpi	r25, 0x7F	; 127
		y2 = GFX_MONO_LCD_HEIGHT - 1;
     782:	08 f0       	brcs	.+2      	; 0x786 <gfx_mono_generic_draw_vertical_line+0x34>
	}

	gfx_coord_t y1page = y / 8;
     784:	9f e7       	ldi	r25, 0x7F	; 127
     786:	16 2f       	mov	r17, r22
     788:	16 95       	lsr	r17
     78a:	16 95       	lsr	r17
	gfx_coord_t y2page = y2 / 8;
     78c:	16 95       	lsr	r17
     78e:	09 2f       	mov	r16, r25
     790:	06 95       	lsr	r16
     792:	06 95       	lsr	r16

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
     794:	06 95       	lsr	r16
     796:	67 70       	andi	r22, 0x07	; 7
     798:	ef ef       	ldi	r30, 0xFF	; 255
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	af 01       	movw	r20, r30
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <gfx_mono_generic_draw_vertical_line+0x50>
     7a0:	44 0f       	add	r20, r20
     7a2:	6a 95       	dec	r22
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
     7a4:	ea f7       	brpl	.-6      	; 0x7a0 <gfx_mono_generic_draw_vertical_line+0x4e>
     7a6:	97 70       	andi	r25, 0x07	; 7
     7a8:	67 e0       	ldi	r22, 0x07	; 7
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	69 1b       	sub	r22, r25
     7ae:	71 09       	sbc	r23, r1
     7b0:	7f 01       	movw	r14, r30
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <gfx_mono_generic_draw_vertical_line+0x66>
     7b4:	f5 94       	asr	r15
     7b6:	e7 94       	ror	r14
     7b8:	6a 95       	dec	r22

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <gfx_mono_generic_draw_vertical_line+0x62>
     7bc:	10 13       	cpse	r17, r16
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
     7be:	04 c0       	rjmp	.+8      	; 0x7c8 <gfx_mono_generic_draw_vertical_line+0x76>
     7c0:	4e 21       	and	r20, r14
     7c2:	68 2f       	mov	r22, r24
     7c4:	81 2f       	mov	r24, r17
     7c6:	0e c0       	rjmp	.+28     	; 0x7e4 <gfx_mono_generic_draw_vertical_line+0x92>
     7c8:	d2 2f       	mov	r29, r18
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     7ca:	c8 2f       	mov	r28, r24
     7cc:	6c 2f       	mov	r22, r28
     7ce:	81 2f       	mov	r24, r17
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     7d0:	8c d2       	rcall	.+1304   	; 0xcea <gfx_mono_lcd_uc1608_mask_byte>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     7d2:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     7d4:	2d 2f       	mov	r18, r29
     7d6:	10 17       	cp	r17, r16
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     7d8:	10 f4       	brcc	.+4      	; 0x7de <gfx_mono_generic_draw_vertical_line+0x8c>
     7da:	4f ef       	ldi	r20, 0xFF	; 255
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     7dc:	f7 cf       	rjmp	.-18     	; 0x7cc <gfx_mono_generic_draw_vertical_line+0x7a>
     7de:	4e 2d       	mov	r20, r14
     7e0:	6c 2f       	mov	r22, r28
	}
}
     7e2:	80 2f       	mov	r24, r16
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16

		while (++y1page < y2page) {
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
	}
}
     7f0:	7c c2       	rjmp	.+1272   	; 0xcea <gfx_mono_lcd_uc1608_mask_byte>
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	08 95       	ret

00000800 <gfx_mono_generic_draw_line>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
     800:	8f 92       	push	r8
     802:	9f 92       	push	r9
     804:	af 92       	push	r10
     806:	bf 92       	push	r11
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	18 2f       	mov	r17, r24
     81a:	b6 2e       	mov	r11, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     81c:	48 17       	cp	r20, r24
     81e:	28 f4       	brcc	.+10     	; 0x82a <gfx_mono_generic_draw_line+0x2a>
		dx = x1;
		x1 = x2;
		x2 = dx;
		dy = y1;
		y1 = y2;
     820:	b2 2e       	mov	r11, r18
		y2 = dy;
     822:	26 2f       	mov	r18, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     824:	81 2f       	mov	r24, r17
     826:	14 2f       	mov	r17, r20
     828:	48 2f       	mov	r20, r24
		dy = y1;
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
     82a:	c4 2f       	mov	r28, r20
     82c:	d0 e0       	ldi	r29, 0x00	; 0
     82e:	c1 1b       	sub	r28, r17
     830:	d1 09       	sbc	r29, r1
	dy = y2 - y1;
     832:	e2 2e       	mov	r14, r18
     834:	f1 2c       	mov	r15, r1
     836:	eb 18       	sub	r14, r11
     838:	f1 08       	sbc	r15, r1

	x = x1;
	y = y1;

	if (dx < 0) {
     83a:	d7 ff       	sbrs	r29, 7
     83c:	06 c0       	rjmp	.+12     	; 0x84a <gfx_mono_generic_draw_line+0x4a>
		xinc = -1;
		dx = -dx;
     83e:	d1 95       	neg	r29
     840:	c1 95       	neg	r28
     842:	d1 09       	sbc	r29, r1

	x = x1;
	y = y1;

	if (dx < 0) {
		xinc = -1;
     844:	99 24       	eor	r9, r9
     846:	9a 94       	dec	r9
     848:	02 c0       	rjmp	.+4      	; 0x84e <gfx_mono_generic_draw_line+0x4e>
		dx = -dx;
	} else {
		xinc = 1;
     84a:	99 24       	eor	r9, r9
     84c:	93 94       	inc	r9
	}

	if (dy < 0) {
     84e:	f7 fe       	sbrs	r15, 7
     850:	06 c0       	rjmp	.+12     	; 0x85e <gfx_mono_generic_draw_line+0x5e>
		yinc = -1;
		dy = -dy;
     852:	f1 94       	neg	r15
     854:	e1 94       	neg	r14
     856:	f1 08       	sbc	r15, r1
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     858:	88 24       	eor	r8, r8
     85a:	8a 94       	dec	r8
     85c:	02 c0       	rjmp	.+4      	; 0x862 <gfx_mono_generic_draw_line+0x62>
		dy = -dy;
	} else {
		yinc = 1;
     85e:	88 24       	eor	r8, r8
     860:	83 94       	inc	r8
	}

	if (dx > dy) {
     862:	ec 16       	cp	r14, r28
     864:	fd 06       	cpc	r15, r29
     866:	bc f4       	brge	.+46     	; 0x896 <gfx_mono_generic_draw_line+0x96>
		e = dy - dx;
     868:	67 01       	movw	r12, r14
     86a:	cc 1a       	sub	r12, r28
     86c:	dd 0a       	sbc	r13, r29
		for (i = 0; i <= dx; i++) {
     86e:	a1 2c       	mov	r10, r1
     870:	8a 2d       	mov	r24, r10
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	c8 17       	cp	r28, r24
     876:	d9 07       	cpc	r29, r25
     878:	2c f1       	brlt	.+74     	; 0x8c4 <gfx_mono_generic_draw_line+0xc4>
			gfx_mono_draw_pixel(x, y, color);
     87a:	40 2f       	mov	r20, r16
     87c:	6b 2d       	mov	r22, r11
     87e:	81 2f       	mov	r24, r17
     880:	59 d2       	rcall	.+1202   	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     882:	d7 fc       	sbrc	r13, 7
     884:	03 c0       	rjmp	.+6      	; 0x88c <gfx_mono_generic_draw_line+0x8c>
				e -= dx;
     886:	cc 1a       	sub	r12, r28
     888:	dd 0a       	sbc	r13, r29
				y += yinc;
     88a:	b8 0c       	add	r11, r8
			}

			e += dy;
     88c:	ce 0c       	add	r12, r14
     88e:	df 1c       	adc	r13, r15
     890:	19 0d       	add	r17, r9
		yinc = 1;
	}

	if (dx > dy) {
		e = dy - dx;
		for (i = 0; i <= dx; i++) {
     892:	a3 94       	inc	r10
     894:	ed cf       	rjmp	.-38     	; 0x870 <gfx_mono_generic_draw_line+0x70>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     896:	6e 01       	movw	r12, r28
     898:	ce 18       	sub	r12, r14
     89a:	df 08       	sbc	r13, r15
		for (i = 0; i <= dy; i++) {
     89c:	a1 2c       	mov	r10, r1
     89e:	8a 2d       	mov	r24, r10
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	e8 16       	cp	r14, r24
     8a4:	f9 06       	cpc	r15, r25
     8a6:	74 f0       	brlt	.+28     	; 0x8c4 <gfx_mono_generic_draw_line+0xc4>
			gfx_mono_draw_pixel(x, y, color);
     8a8:	40 2f       	mov	r20, r16
     8aa:	6b 2d       	mov	r22, r11
     8ac:	81 2f       	mov	r24, r17
     8ae:	42 d2       	rcall	.+1156   	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     8b0:	d7 fc       	sbrc	r13, 7
     8b2:	03 c0       	rjmp	.+6      	; 0x8ba <gfx_mono_generic_draw_line+0xba>
				e -= dy;
     8b4:	ce 18       	sub	r12, r14
     8b6:	df 08       	sbc	r13, r15
				x += xinc;
     8b8:	19 0d       	add	r17, r9
			}

			e += dx;
     8ba:	cc 0e       	add	r12, r28
     8bc:	dd 1e       	adc	r13, r29
     8be:	b8 0c       	add	r11, r8
			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
     8c0:	a3 94       	inc	r10
     8c2:	ed cf       	rjmp	.-38     	; 0x89e <gfx_mono_generic_draw_line+0x9e>

			e += dx;
			y += yinc;
		}
	}
}
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	df 90       	pop	r13
     8d2:	cf 90       	pop	r12
     8d4:	bf 90       	pop	r11
     8d6:	af 90       	pop	r10
     8d8:	9f 90       	pop	r9
     8da:	8f 90       	pop	r8
     8dc:	08 95       	ret

000008de <gfx_mono_generic_draw_rect>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	d8 2f       	mov	r29, r24
     8ea:	16 2f       	mov	r17, r22
     8ec:	c4 2f       	mov	r28, r20
     8ee:	f2 2e       	mov	r15, r18
	gfx_mono_draw_horizontal_line(x, y, width, color);
     8f0:	20 2f       	mov	r18, r16
     8f2:	d0 de       	rcall	.-608    	; 0x694 <gfx_mono_generic_draw_horizontal_line>
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
     8f4:	6f ef       	ldi	r22, 0xFF	; 255
     8f6:	6f 0d       	add	r22, r15
     8f8:	61 0f       	add	r22, r17
     8fa:	20 2f       	mov	r18, r16
     8fc:	4c 2f       	mov	r20, r28
     8fe:	8d 2f       	mov	r24, r29
     900:	c9 de       	rcall	.-622    	; 0x694 <gfx_mono_generic_draw_horizontal_line>

	gfx_mono_draw_vertical_line(x, y, height, color);
     902:	20 2f       	mov	r18, r16
     904:	4f 2d       	mov	r20, r15
     906:	61 2f       	mov	r22, r17
     908:	8d 2f       	mov	r24, r29
     90a:	23 df       	rcall	.-442    	; 0x752 <gfx_mono_generic_draw_vertical_line>
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     90c:	8f ef       	ldi	r24, 0xFF	; 255
     90e:	8c 0f       	add	r24, r28
     910:	20 2f       	mov	r18, r16
     912:	4f 2d       	mov	r20, r15
     914:	61 2f       	mov	r22, r17
     916:	8d 0f       	add	r24, r29
}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
{
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     920:	ff 90       	pop	r15
     922:	17 cf       	rjmp	.-466    	; 0x752 <gfx_mono_generic_draw_vertical_line>

00000924 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
	if (height == 0) {
     92e:	22 23       	and	r18, r18
     930:	69 f0       	breq	.+26     	; 0x94c <gfx_mono_generic_draw_filled_rect+0x28>
     932:	14 2f       	mov	r17, r20
     934:	f6 2e       	mov	r15, r22
     936:	d8 2f       	mov	r29, r24
     938:	cf ef       	ldi	r28, 0xFF	; 255
     93a:	c2 0f       	add	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     93c:	6f 2d       	mov	r22, r15
     93e:	6c 0f       	add	r22, r28
     940:	20 2f       	mov	r18, r16
     942:	41 2f       	mov	r20, r17
     944:	8d 2f       	mov	r24, r29
     946:	a6 de       	rcall	.-692    	; 0x694 <gfx_mono_generic_draw_horizontal_line>
     948:	c1 50       	subi	r28, 0x01	; 1
     94a:	c0 f7       	brcc	.-16     	; 0x93c <gfx_mono_generic_draw_filled_rect+0x18>
	}
}
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	ff 90       	pop	r15
     956:	08 95       	ret

00000958 <gfx_mono_generic_draw_circle>:
 * \param  octant_mask Bitmask indicating which octants to draw.
 */
void gfx_mono_generic_draw_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t octant_mask)
{
     958:	5f 92       	push	r5
     95a:	6f 92       	push	r6
     95c:	7f 92       	push	r7
     95e:	8f 92       	push	r8
     960:	9f 92       	push	r9
     962:	af 92       	push	r10
     964:	bf 92       	push	r11
     966:	cf 92       	push	r12
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	18 2f       	mov	r17, r24
     978:	f6 2e       	mov	r15, r22
     97a:	c4 2f       	mov	r28, r20
     97c:	e2 2e       	mov	r14, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     97e:	41 11       	cpse	r20, r1
     980:	11 c0       	rjmp	.+34     	; 0x9a4 <gfx_mono_generic_draw_circle+0x4c>
		gfx_mono_draw_pixel(x, y, color);
     982:	42 2f       	mov	r20, r18
		}

		/* Next X. */
		++offset_x;
	}
}
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	bf 90       	pop	r11
     996:	af 90       	pop	r10
     998:	9f 90       	pop	r9
     99a:	8f 90       	pop	r8
     99c:	7f 90       	pop	r7
     99e:	6f 90       	pop	r6
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
		gfx_mono_draw_pixel(x, y, color);
     9a0:	5f 90       	pop	r5
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     9a2:	c8 c1       	rjmp	.+912    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	6c 01       	movw	r12, r24
     9aa:	22 e0       	ldi	r18, 0x02	; 2
     9ac:	42 9f       	mul	r20, r18
     9ae:	c0 18       	sub	r12, r0
     9b0:	d1 08       	sbc	r13, r1
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     9b2:	11 24       	eor	r1, r1
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     9b4:	d0 e0       	ldi	r29, 0x00	; 0
     9b6:	80 2f       	mov	r24, r16
     9b8:	81 70       	andi	r24, 0x01	; 1
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT1) {
     9ba:	b8 2e       	mov	r11, r24
     9bc:	20 2f       	mov	r18, r16
     9be:	22 70       	andi	r18, 0x02	; 2
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT2) {
     9c0:	a2 2e       	mov	r10, r18
     9c2:	80 2f       	mov	r24, r16
     9c4:	84 70       	andi	r24, 0x04	; 4
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT3) {
     9c6:	98 2e       	mov	r9, r24
     9c8:	20 2f       	mov	r18, r16
     9ca:	28 70       	andi	r18, 0x08	; 8
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT4) {
     9cc:	82 2e       	mov	r8, r18
     9ce:	80 2f       	mov	r24, r16
     9d0:	80 71       	andi	r24, 0x10	; 16
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
		}

		if (octant_mask & GFX_OCTANT5) {
     9d2:	78 2e       	mov	r7, r24
     9d4:	20 2f       	mov	r18, r16
     9d6:	20 72       	andi	r18, 0x20	; 32
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
		}

		if (octant_mask & GFX_OCTANT6) {
     9d8:	62 2e       	mov	r6, r18
     9da:	80 2f       	mov	r24, r16
     9dc:	80 74       	andi	r24, 0x40	; 64
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     9de:	58 2e       	mov	r5, r24
     9e0:	bb 20       	and	r11, r11
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
     9e2:	31 f0       	breq	.+12     	; 0x9f0 <gfx_mono_generic_draw_circle+0x98>
     9e4:	4e 2d       	mov	r20, r14
     9e6:	6f 2d       	mov	r22, r15
     9e8:	6d 1b       	sub	r22, r29
     9ea:	81 2f       	mov	r24, r17
     9ec:	8c 0f       	add	r24, r28
		}

		if (octant_mask & GFX_OCTANT1) {
     9ee:	a2 d1       	rcall	.+836    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     9f0:	aa 20       	and	r10, r10
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
     9f2:	31 f0       	breq	.+12     	; 0xa00 <gfx_mono_generic_draw_circle+0xa8>
     9f4:	4e 2d       	mov	r20, r14
     9f6:	6f 2d       	mov	r22, r15
     9f8:	6c 1b       	sub	r22, r28
     9fa:	81 2f       	mov	r24, r17
     9fc:	8d 0f       	add	r24, r29
		}

		if (octant_mask & GFX_OCTANT2) {
     9fe:	9a d1       	rcall	.+820    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a00:	99 20       	and	r9, r9
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
     a02:	31 f0       	breq	.+12     	; 0xa10 <gfx_mono_generic_draw_circle+0xb8>
     a04:	4e 2d       	mov	r20, r14
     a06:	6f 2d       	mov	r22, r15
     a08:	6c 1b       	sub	r22, r28
     a0a:	81 2f       	mov	r24, r17
     a0c:	8d 1b       	sub	r24, r29
		}

		if (octant_mask & GFX_OCTANT3) {
     a0e:	92 d1       	rcall	.+804    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a10:	88 20       	and	r8, r8
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
     a12:	31 f0       	breq	.+12     	; 0xa20 <gfx_mono_generic_draw_circle+0xc8>
     a14:	4e 2d       	mov	r20, r14
     a16:	6f 2d       	mov	r22, r15
     a18:	6d 1b       	sub	r22, r29
     a1a:	81 2f       	mov	r24, r17
     a1c:	8c 1b       	sub	r24, r28
		}

		if (octant_mask & GFX_OCTANT4) {
     a1e:	8a d1       	rcall	.+788    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
     a20:	77 20       	and	r7, r7
     a22:	31 f0       	breq	.+12     	; 0xa30 <gfx_mono_generic_draw_circle+0xd8>
     a24:	4e 2d       	mov	r20, r14
     a26:	6f 2d       	mov	r22, r15
     a28:	6d 0f       	add	r22, r29
     a2a:	81 2f       	mov	r24, r17
		}

		if (octant_mask & GFX_OCTANT5) {
     a2c:	8c 1b       	sub	r24, r28
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
     a2e:	82 d1       	rcall	.+772    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a30:	66 20       	and	r6, r6
     a32:	31 f0       	breq	.+12     	; 0xa40 <gfx_mono_generic_draw_circle+0xe8>
     a34:	4e 2d       	mov	r20, r14
     a36:	6f 2d       	mov	r22, r15
     a38:	6c 0f       	add	r22, r28
		}

		if (octant_mask & GFX_OCTANT6) {
     a3a:	81 2f       	mov	r24, r17
			gfx_mono_draw_pixel(x + offset_x, y + offset_y, color);
     a3c:	8d 1b       	sub	r24, r29
     a3e:	7a d1       	rcall	.+756    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a40:	55 20       	and	r5, r5
     a42:	31 f0       	breq	.+12     	; 0xa50 <gfx_mono_generic_draw_circle+0xf8>
     a44:	4e 2d       	mov	r20, r14
     a46:	6f 2d       	mov	r22, r15
		}

		if (octant_mask & GFX_OCTANT7) {
     a48:	6c 0f       	add	r22, r28
     a4a:	81 2f       	mov	r24, r17
			gfx_mono_draw_pixel(x + offset_y, y + offset_x, color);
     a4c:	8d 0f       	add	r24, r29
     a4e:	72 d1       	rcall	.+740    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a50:	07 ff       	sbrs	r16, 7
     a52:	06 c0       	rjmp	.+12     	; 0xa60 <gfx_mono_generic_draw_circle+0x108>
     a54:	4e 2d       	mov	r20, r14
     a56:	6f 2d       	mov	r22, r15
     a58:	6d 0f       	add	r22, r29
     a5a:	81 2f       	mov	r24, r17
     a5c:	8c 0f       	add	r24, r28
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     a5e:	6a d1       	rcall	.+724    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a60:	8d 2f       	mov	r24, r29
			error += ((offset_x << 2) + 6);
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	d7 fe       	sbrs	r13, 7
     a66:	08 c0       	rjmp	.+16     	; 0xa78 <gfx_mono_generic_draw_circle+0x120>
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	06 96       	adiw	r24, 0x06	; 6
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     a72:	c8 0e       	add	r12, r24
     a74:	d9 1e       	adc	r13, r25
     a76:	0a c0       	rjmp	.+20     	; 0xa8c <gfx_mono_generic_draw_circle+0x134>
     a78:	8c 1b       	sub	r24, r28
     a7a:	91 09       	sbc	r25, r1
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
			--offset_y;
     a84:	0a 96       	adiw	r24, 0x0a	; 10
		}

		/* Next X. */
		++offset_x;
     a86:	c8 0e       	add	r12, r24
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
     a88:	d9 1e       	adc	r13, r25
     a8a:	c1 50       	subi	r28, 0x01	; 1
     a8c:	df 5f       	subi	r29, 0xFF	; 255
		}

		/* Next X. */
		++offset_x;
	}
}
     a8e:	cd 17       	cp	r28, r29
     a90:	08 f0       	brcs	.+2      	; 0xa94 <gfx_mono_generic_draw_circle+0x13c>
     a92:	a6 cf       	rjmp	.-180    	; 0x9e0 <gfx_mono_generic_draw_circle+0x88>
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	bf 90       	pop	r11
     aa6:	af 90       	pop	r10
     aa8:	9f 90       	pop	r9
     aaa:	8f 90       	pop	r8
     aac:	7f 90       	pop	r7
     aae:	6f 90       	pop	r6
     ab0:	5f 90       	pop	r5
     ab2:	08 95       	ret

00000ab4 <gfx_mono_generic_draw_filled_circle>:
 * \param  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
     ab4:	8f 92       	push	r8
     ab6:	9f 92       	push	r9
     ab8:	af 92       	push	r10
     aba:	bf 92       	push	r11
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	18 2f       	mov	r17, r24
     ace:	d6 2e       	mov	r13, r22
     ad0:	c4 2f       	mov	r28, r20
     ad2:	c2 2e       	mov	r12, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     ad4:	41 11       	cpse	r20, r1
     ad6:	0e c0       	rjmp	.+28     	; 0xaf4 <gfx_mono_generic_draw_filled_circle+0x40>
		gfx_mono_draw_pixel(x, y, color);
     ad8:	42 2f       	mov	r20, r18
		}

		/* Next X. */
		++offset_x;
	}
}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
		gfx_mono_draw_pixel(x, y, color);
     af0:	8f 90       	pop	r8
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     af2:	20 c1       	rjmp	.+576    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	7c 01       	movw	r14, r24
     afa:	22 e0       	ldi	r18, 0x02	; 2
     afc:	42 9f       	mul	r20, r18
     afe:	e0 18       	sub	r14, r0
     b00:	f1 08       	sbc	r15, r1
     b02:	11 24       	eor	r1, r1
     b04:	bb 24       	eor	r11, r11
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     b06:	b3 94       	inc	r11
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     b08:	d0 e0       	ldi	r29, 0x00	; 0
     b0a:	80 2f       	mov	r24, r16
     b0c:	83 70       	andi	r24, 0x03	; 3
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     b0e:	a8 2e       	mov	r10, r24
     b10:	20 2f       	mov	r18, r16
     b12:	2c 70       	andi	r18, 0x0C	; 12
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     b14:	92 2e       	mov	r9, r18
     b16:	80 2f       	mov	r24, r16
     b18:	80 73       	andi	r24, 0x30	; 48
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     b1a:	88 2e       	mov	r8, r24
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     b1c:	00 7c       	andi	r16, 0xC0	; 192
     b1e:	aa 20       	and	r10, r10
			gfx_mono_draw_vertical_line(x + offset_y,
     b20:	79 f0       	breq	.+30     	; 0xb40 <gfx_mono_generic_draw_filled_circle+0x8c>
     b22:	2c 2d       	mov	r18, r12
     b24:	4b 2d       	mov	r20, r11
     b26:	6d 2d       	mov	r22, r13
     b28:	6d 1b       	sub	r22, r29
     b2a:	81 2f       	mov	r24, r17
     b2c:	8c 0f       	add	r24, r28
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     b2e:	11 de       	rcall	.-990    	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b30:	2c 2d       	mov	r18, r12
     b32:	41 e0       	ldi	r20, 0x01	; 1
     b34:	4c 0f       	add	r20, r28
     b36:	6d 2d       	mov	r22, r13
     b38:	6c 1b       	sub	r22, r28
     b3a:	81 2f       	mov	r24, r17
     b3c:	8d 0f       	add	r24, r29
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     b3e:	09 de       	rcall	.-1006   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b40:	99 20       	and	r9, r9
			gfx_mono_draw_vertical_line(x - offset_y,
     b42:	79 f0       	breq	.+30     	; 0xb62 <gfx_mono_generic_draw_filled_circle+0xae>
     b44:	2c 2d       	mov	r18, r12
     b46:	4b 2d       	mov	r20, r11
     b48:	6d 2d       	mov	r22, r13
     b4a:	6d 1b       	sub	r22, r29
     b4c:	81 2f       	mov	r24, r17
     b4e:	8c 1b       	sub	r24, r28
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     b50:	00 de       	rcall	.-1024   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b52:	2c 2d       	mov	r18, r12
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	4c 0f       	add	r20, r28
     b58:	6d 2d       	mov	r22, r13
     b5a:	6c 1b       	sub	r22, r28
     b5c:	81 2f       	mov	r24, r17
     b5e:	8d 1b       	sub	r24, r29
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     b60:	f8 dd       	rcall	.-1040   	; 0x752 <gfx_mono_generic_draw_vertical_line>
			gfx_mono_draw_vertical_line(x - offset_y,
     b62:	88 20       	and	r8, r8
     b64:	69 f0       	breq	.+26     	; 0xb80 <gfx_mono_generic_draw_filled_circle+0xcc>
     b66:	2c 2d       	mov	r18, r12
     b68:	4b 2d       	mov	r20, r11
     b6a:	6d 2d       	mov	r22, r13
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     b6c:	81 2f       	mov	r24, r17
     b6e:	8c 1b       	sub	r24, r28
     b70:	f0 dd       	rcall	.-1056   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b72:	2c 2d       	mov	r18, r12
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	4c 0f       	add	r20, r28
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     b78:	6d 2d       	mov	r22, r13
			gfx_mono_draw_vertical_line(x + offset_y,
     b7a:	81 2f       	mov	r24, r17
     b7c:	8d 1b       	sub	r24, r29
     b7e:	e9 dd       	rcall	.-1070   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b80:	00 23       	and	r16, r16
     b82:	69 f0       	breq	.+26     	; 0xb9e <gfx_mono_generic_draw_filled_circle+0xea>
     b84:	2c 2d       	mov	r18, r12
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     b86:	4b 2d       	mov	r20, r11
     b88:	6d 2d       	mov	r22, r13
     b8a:	81 2f       	mov	r24, r17
     b8c:	8c 0f       	add	r24, r28
     b8e:	e1 dd       	rcall	.-1086   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b90:	2c 2d       	mov	r18, r12
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	4c 0f       	add	r20, r28
     b96:	6d 2d       	mov	r22, r13
     b98:	81 2f       	mov	r24, r17
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     b9a:	8d 0f       	add	r24, r29
     b9c:	da dd       	rcall	.-1100   	; 0x752 <gfx_mono_generic_draw_vertical_line>
			error += ((offset_x << 2) + 6);
     b9e:	8d 2f       	mov	r24, r29
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	f7 fe       	sbrs	r15, 7
     ba4:	08 c0       	rjmp	.+16     	; 0xbb6 <gfx_mono_generic_draw_filled_circle+0x102>
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     bae:	06 96       	adiw	r24, 0x06	; 6
     bb0:	e8 0e       	add	r14, r24
     bb2:	f9 1e       	adc	r15, r25
     bb4:	0a c0       	rjmp	.+20     	; 0xbca <gfx_mono_generic_draw_filled_circle+0x116>
     bb6:	8c 1b       	sub	r24, r28
     bb8:	91 09       	sbc	r25, r1
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	88 0f       	add	r24, r24
			--offset_y;
     bc0:	99 1f       	adc	r25, r25
		}

		/* Next X. */
		++offset_x;
     bc2:	0a 96       	adiw	r24, 0x0a	; 10
     bc4:	e8 0e       	add	r14, r24
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
     bc6:	f9 1e       	adc	r15, r25
     bc8:	c1 50       	subi	r28, 0x01	; 1
     bca:	df 5f       	subi	r29, 0xFF	; 255
		}

		/* Next X. */
		++offset_x;
	}
}
     bcc:	b3 94       	inc	r11
     bce:	cd 17       	cp	r28, r29
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <gfx_mono_generic_draw_filled_circle+0x120>
     bd2:	a5 cf       	rjmp	.-182    	; 0xb1e <gfx_mono_generic_draw_filled_circle+0x6a>
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	bf 90       	pop	r11
     be6:	af 90       	pop	r10
     be8:	9f 90       	pop	r9
     bea:	8f 90       	pop	r8
     bec:	08 95       	ret

00000bee <gfx_mono_lcd_uc1608_cache_write_byte>:
		uint8_t				byte = gfx_mono_lcd_uc1608_get_byte(page, x);

		isSet = (byte & pixel_mask) ?  GFX_PIXEL_SET : GFX_PIXEL_CLR;
	}
	return isSet;
}
     bee:	80 31       	cpi	r24, 0x10	; 16
     bf0:	30 f4       	brcc	.+12     	; 0xbfe <gfx_mono_lcd_uc1608_cache_write_byte+0x10>
     bf2:	60 3f       	cpi	r22, 0xF0	; 240
     bf4:	20 f4       	brcc	.+8      	; 0xbfe <gfx_mono_lcd_uc1608_cache_write_byte+0x10>
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	70 64       	ori	r23, 0x40	; 64
     bfa:	78 2b       	or	r23, r24
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <gfx_mono_lcd_uc1608_cache_write_byte+0x14>
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e8       	ldi	r23, 0x80	; 128
     c02:	76 ff       	sbrs	r23, 6
     c04:	06 c0       	rjmp	.+12     	; 0xc12 <gfx_mono_lcd_uc1608_cache_write_byte+0x24>
     c06:	70 93 bb 03 	sts	0x03BB, r23	; 0x8003bb <__data_end+0x1>
     c0a:	60 93 ba 03 	sts	0x03BA, r22	; 0x8003ba <__data_end>
     c0e:	40 93 bc 03 	sts	0x03BC, r20	; 0x8003bc <__data_end+0x2>
     c12:	08 95       	ret

00000c14 <gfx_mono_lcd_uc1608_put_page>:
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	8c 01       	movw	r16, r24
     c1e:	86 2f       	mov	r24, r22
     c20:	d4 2f       	mov	r29, r20
     c22:	c2 2f       	mov	r28, r18
     c24:	01 15       	cp	r16, r1
     c26:	11 05       	cpc	r17, r1
     c28:	49 f4       	brne	.+18     	; 0xc3c <gfx_mono_lcd_uc1608_put_page+0x28>
     c2a:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <__data_end+0x1>
     c2e:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <__data_end>
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret
     c3c:	60 31       	cpi	r22, 0x10	; 16
     c3e:	a8 f7       	brcc	.-22     	; 0xc2a <gfx_mono_lcd_uc1608_put_page+0x16>
     c40:	40 3f       	cpi	r20, 0xF0	; 240
     c42:	98 f7       	brcc	.-26     	; 0xc2a <gfx_mono_lcd_uc1608_put_page+0x16>
     c44:	9b d6       	rcall	.+3382   	; 0x197c <lcd_page_set>
     c46:	8d 2f       	mov	r24, r29
     c48:	a1 d6       	rcall	.+3394   	; 0x198c <lcd_col_set>
     c4a:	8c 2f       	mov	r24, r28
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	8d 0f       	add	r24, r29
     c50:	91 1d       	adc	r25, r1
     c52:	81 3f       	cpi	r24, 0xF1	; 241
     c54:	91 05       	cpc	r25, r1
     c56:	14 f0       	brlt	.+4      	; 0xc5c <gfx_mono_lcd_uc1608_put_page+0x48>
     c58:	c0 ef       	ldi	r28, 0xF0	; 240
     c5a:	cd 1b       	sub	r28, r29
     c5c:	cc 23       	and	r28, r28
     c5e:	29 f3       	breq	.-54     	; 0xc2a <gfx_mono_lcd_uc1608_put_page+0x16>
     c60:	f8 01       	movw	r30, r16
     c62:	81 91       	ld	r24, Z+
     c64:	8f 01       	movw	r16, r30
     c66:	3f d6       	rcall	.+3198   	; 0x18e6 <lcd_bus_write_ram>
     c68:	c1 50       	subi	r28, 0x01	; 1
     c6a:	f8 cf       	rjmp	.-16     	; 0xc5c <gfx_mono_lcd_uc1608_put_page+0x48>

00000c6c <gfx_mono_lcd_uc1608_put_byte>:
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	80 31       	cpi	r24, 0x10	; 16
     c74:	78 f4       	brcc	.+30     	; 0xc94 <gfx_mono_lcd_uc1608_put_byte+0x28>
     c76:	60 3f       	cpi	r22, 0xF0	; 240
     c78:	68 f4       	brcc	.+26     	; 0xc94 <gfx_mono_lcd_uc1608_put_byte+0x28>
     c7a:	14 2f       	mov	r17, r20
     c7c:	c6 2f       	mov	r28, r22
     c7e:	d8 2f       	mov	r29, r24
     c80:	b6 df       	rcall	.-148    	; 0xbee <gfx_mono_lcd_uc1608_cache_write_byte>
     c82:	8d 2f       	mov	r24, r29
     c84:	7b d6       	rcall	.+3318   	; 0x197c <lcd_page_set>
     c86:	8c 2f       	mov	r24, r28
     c88:	81 d6       	rcall	.+3330   	; 0x198c <lcd_col_set>
     c8a:	81 2f       	mov	r24, r17
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	29 c6       	rjmp	.+3154   	; 0x18e6 <lcd_bus_write_ram>
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	08 95       	ret

00000c9c <gfx_mono_lcd_uc1608_get_byte>:
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	80 31       	cpi	r24, 0x10	; 16
     ca4:	80 f4       	brcc	.+32     	; 0xcc6 <gfx_mono_lcd_uc1608_get_byte+0x2a>
     ca6:	60 3f       	cpi	r22, 0xF0	; 240
     ca8:	70 f4       	brcc	.+28     	; 0xcc6 <gfx_mono_lcd_uc1608_get_byte+0x2a>
     caa:	26 2f       	mov	r18, r22
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	30 64       	ori	r19, 0x40	; 64
     cb0:	38 2b       	or	r19, r24
     cb2:	40 91 ba 03 	lds	r20, 0x03BA	; 0x8003ba <__data_end>
     cb6:	50 91 bb 03 	lds	r21, 0x03BB	; 0x8003bb <__data_end+0x1>
     cba:	42 17       	cp	r20, r18
     cbc:	53 07       	cpc	r21, r19
     cbe:	29 f4       	brne	.+10     	; 0xcca <gfx_mono_lcd_uc1608_get_byte+0x2e>
     cc0:	10 91 bc 03 	lds	r17, 0x03BC	; 0x8003bc <__data_end+0x2>
     cc4:	0d c0       	rjmp	.+26     	; 0xce0 <gfx_mono_lcd_uc1608_get_byte+0x44>
     cc6:	10 e0       	ldi	r17, 0x00	; 0
     cc8:	0b c0       	rjmp	.+22     	; 0xce0 <gfx_mono_lcd_uc1608_get_byte+0x44>
     cca:	d6 2f       	mov	r29, r22
     ccc:	c8 2f       	mov	r28, r24
     cce:	56 d6       	rcall	.+3244   	; 0x197c <lcd_page_set>
     cd0:	8d 2f       	mov	r24, r29
     cd2:	5c d6       	rcall	.+3256   	; 0x198c <lcd_col_set>
     cd4:	15 d6       	rcall	.+3114   	; 0x1900 <lcd_bus_read_ram>
     cd6:	18 2f       	mov	r17, r24
     cd8:	48 2f       	mov	r20, r24
     cda:	6d 2f       	mov	r22, r29
     cdc:	8c 2f       	mov	r24, r28
     cde:	87 df       	rcall	.-242    	; 0xbee <gfx_mono_lcd_uc1608_cache_write_byte>
     ce0:	81 2f       	mov	r24, r17
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	08 95       	ret

00000cea <gfx_mono_lcd_uc1608_mask_byte>:
 * \param column     Page offset (x coordinate)
 * \param pixel_mask Mask for pixel operation
 * \param color      Pixel operation
 */
void gfx_mono_lcd_uc1608_mask_byte(gfx_coord_t page, gfx_coord_t column, gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
	uint8_t data = 0;

	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
     cf2:	80 31       	cpi	r24, 0x10	; 16
     cf4:	d0 f4       	brcc	.+52     	; 0xd2a <gfx_mono_lcd_uc1608_mask_byte+0x40>
     cf6:	60 3f       	cpi	r22, 0xF0	; 240
     cf8:	c0 f4       	brcc	.+48     	; 0xd2a <gfx_mono_lcd_uc1608_mask_byte+0x40>
     cfa:	02 2f       	mov	r16, r18
     cfc:	c4 2f       	mov	r28, r20
     cfe:	16 2f       	mov	r17, r22
		data = gfx_mono_lcd_uc1608_get_byte(page, column);
     d00:	d8 2f       	mov	r29, r24

		switch (color) {
     d02:	cc df       	rcall	.-104    	; 0xc9c <gfx_mono_lcd_uc1608_get_byte>
     d04:	01 30       	cpi	r16, 0x01	; 1
     d06:	41 f0       	breq	.+16     	; 0xd18 <gfx_mono_lcd_uc1608_mask_byte+0x2e>
     d08:	20 f0       	brcs	.+8      	; 0xd12 <gfx_mono_lcd_uc1608_mask_byte+0x28>
     d0a:	02 30       	cpi	r16, 0x02	; 2
			case GFX_PIXEL_SET:
				data |= pixel_mask;
				break;

			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
     d0c:	31 f4       	brne	.+12     	; 0xd1a <gfx_mono_lcd_uc1608_mask_byte+0x30>
     d0e:	8c 27       	eor	r24, r28
	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
		data = gfx_mono_lcd_uc1608_get_byte(page, column);

		switch (color) {
			case GFX_PIXEL_CLR:
				data &= ~pixel_mask;
     d10:	04 c0       	rjmp	.+8      	; 0xd1a <gfx_mono_lcd_uc1608_mask_byte+0x30>
     d12:	c0 95       	com	r28
     d14:	8c 23       	and	r24, r28
				break;

			case GFX_PIXEL_SET:
				data |= pixel_mask;
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <gfx_mono_lcd_uc1608_mask_byte+0x30>
			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
				break;
		}

		gfx_mono_lcd_uc1608_put_byte(page, column, data);
     d18:	8c 2b       	or	r24, r28
     d1a:	48 2f       	mov	r20, r24
     d1c:	61 2f       	mov	r22, r17
	}
}
     d1e:	8d 2f       	mov	r24, r29
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
				break;
		}

		gfx_mono_lcd_uc1608_put_byte(page, column, data);
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
	}
}
     d28:	a1 cf       	rjmp	.-190    	; 0xc6c <gfx_mono_lcd_uc1608_put_byte>
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	08 95       	ret

00000d34 <gfx_mono_lcd_uc1608_draw_pixel>:
 * \param x         X coordinate of the pixel
 * \param y         Y coordinate of the pixel
 * \param color     Pixel operation.
 */
void gfx_mono_lcd_uc1608_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_mono_color_t color)
{
     d34:	96 2f       	mov	r25, r22
     d36:	24 2f       	mov	r18, r20
	if ((x < GFX_MONO_LCD_WIDTH) && (y < GFX_MONO_LCD_HEIGHT)) {
     d38:	80 3f       	cpi	r24, 0xF0	; 240
     d3a:	88 f4       	brcc	.+34     	; 0xd5e <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     d3c:	67 fd       	sbrc	r22, 7
     d3e:	0f c0       	rjmp	.+30     	; 0xd5e <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
		gfx_coord_t			page		= y / GFX_MONO_LCD_PIXELS_PER_BYTE;
		gfx_mono_color_t	pixel_mask	= 1 << (y % GFX_MONO_LCD_PIXELS_PER_BYTE);

		gfx_mono_lcd_uc1608_mask_byte(page, x, pixel_mask, color);
     d40:	36 2f       	mov	r19, r22
     d42:	37 70       	andi	r19, 0x07	; 7
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	ab 01       	movw	r20, r22
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <gfx_mono_lcd_uc1608_draw_pixel+0x1a>
     d4c:	44 0f       	add	r20, r20
     d4e:	3a 95       	dec	r19
     d50:	ea f7       	brpl	.-6      	; 0xd4c <gfx_mono_lcd_uc1608_draw_pixel+0x18>
     d52:	68 2f       	mov	r22, r24
     d54:	89 2f       	mov	r24, r25
     d56:	86 95       	lsr	r24
     d58:	86 95       	lsr	r24
     d5a:	86 95       	lsr	r24
     d5c:	c6 cf       	rjmp	.-116    	; 0xcea <gfx_mono_lcd_uc1608_mask_byte>
     d5e:	08 95       	ret

00000d60 <gfx_mono_lcd_uc1608_cache_clear>:
 *
 */
inline
void gfx_mono_lcd_uc1608_cache_clear()
{
	g_gfx_mono_lcd_uc1608_cache.adr = 0;
     d60:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <__data_end+0x1>
     d64:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <__data_end>
     d68:	08 95       	ret

00000d6a <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     d6a:	9f 92       	push	r9
     d6c:	af 92       	push	r10
     d6e:	bf 92       	push	r11
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	d8 2f       	mov	r29, r24
     d82:	c6 2e       	mov	r12, r22
     d84:	d4 2e       	mov	r13, r20
     d86:	79 01       	movw	r14, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     d88:	00 e0       	ldi	r16, 0x00	; 0
     d8a:	f9 01       	movw	r30, r18
     d8c:	24 81       	ldd	r18, Z+4	; 0x04
     d8e:	43 81       	ldd	r20, Z+3	; 0x03
     d90:	6d 2d       	mov	r22, r13
     d92:	8c 2d       	mov	r24, r12
     d94:	c7 dd       	rcall	.-1138   	; 0x924 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     d96:	f7 01       	movw	r30, r14
     d98:	80 81       	ld	r24, Z
     d9a:	81 11       	cpse	r24, r1
     d9c:	39 c0       	rjmp	.+114    	; 0xe10 <gfx_mono_draw_char+0xa6>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     d9e:	83 81       	ldd	r24, Z+3	; 0x03
     da0:	28 2f       	mov	r18, r24
     da2:	26 95       	lsr	r18
     da4:	26 95       	lsr	r18
     da6:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     da8:	87 70       	andi	r24, 0x07	; 7
     daa:	09 f0       	breq	.+2      	; 0xdae <gfx_mono_draw_char+0x44>
		char_row_size++;
     dac:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     dae:	f7 01       	movw	r30, r14
     db0:	c4 81       	ldd	r28, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     db2:	8d 2f       	mov	r24, r29
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	35 81       	ldd	r19, Z+5	; 0x05
     db8:	83 1b       	sub	r24, r19
     dba:	91 09       	sbc	r25, r1
     dbc:	2c 9f       	mul	r18, r28
     dbe:	90 01       	movw	r18, r0
     dc0:	11 24       	eor	r1, r1
     dc2:	82 9f       	mul	r24, r18
     dc4:	a0 01       	movw	r20, r0
     dc6:	83 9f       	mul	r24, r19
     dc8:	50 0d       	add	r21, r0
     dca:	92 9f       	mul	r25, r18
     dcc:	50 0d       	add	r21, r0
     dce:	11 24       	eor	r1, r1
     dd0:	01 81       	ldd	r16, Z+1	; 0x01
     dd2:	12 81       	ldd	r17, Z+2	; 0x02
     dd4:	04 0f       	add	r16, r20
     dd6:	15 1f       	adc	r17, r21
     dd8:	dc 0e       	add	r13, r28
     dda:	9d 2c       	mov	r9, r13
     ddc:	9c 1a       	sub	r9, r28
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     dde:	f7 01       	movw	r30, r14
     de0:	a3 80       	ldd	r10, Z+3	; 0x03
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
     de2:	b1 2c       	mov	r11, r1
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     de4:	d0 e0       	ldi	r29, 0x00	; 0
     de6:	8c 2d       	mov	r24, r12
     de8:	8d 0f       	add	r24, r29
     dea:	ad 16       	cp	r10, r29
     dec:	79 f0       	breq	.+30     	; 0xe0c <gfx_mono_draw_char+0xa2>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     dee:	9d 2f       	mov	r25, r29
     df0:	97 70       	andi	r25, 0x07	; 7
     df2:	21 f4       	brne	.+8      	; 0xdfc <gfx_mono_draw_char+0x92>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     df4:	f8 01       	movw	r30, r16
     df6:	b4 90       	lpm	r11, Z
				glyph_data++;
     df8:	0f 5f       	subi	r16, 0xFF	; 255
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     dfc:	b7 fe       	sbrs	r11, 7
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <gfx_mono_draw_char+0x9c>
				gfx_mono_draw_pixel(inc_x, inc_y,
     e00:	41 e0       	ldi	r20, 0x01	; 1
     e02:	69 2d       	mov	r22, r9
     e04:	97 df       	rcall	.-210    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     e06:	bb 0c       	add	r11, r11

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     e08:	df 5f       	subi	r29, 0xFF	; 255
     e0a:	ed cf       	rjmp	.-38     	; 0xde6 <gfx_mono_draw_char+0x7c>
			glyph_byte <<= 1;
		}

		inc_y += 1;
		inc_x = x;
		rows_left--;
     e0c:	c1 50       	subi	r28, 0x01	; 1
	} while (rows_left > 0);
     e0e:	29 f7       	brne	.-54     	; 0xdda <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	cf 90       	pop	r12
     e20:	bf 90       	pop	r11
     e22:	af 90       	pop	r10
     e24:	9f 90       	pop	r9
     e26:	08 95       	ret

00000e28 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     e28:	df 92       	push	r13
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	d6 2e       	mov	r13, r22
     e38:	d4 2f       	mov	r29, r20
     e3a:	79 01       	movw	r14, r18
     e3c:	8c 01       	movw	r16, r24
     e3e:	c6 2f       	mov	r28, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     e40:	f8 01       	movw	r30, r16
     e42:	81 91       	ld	r24, Z+
     e44:	8f 01       	movw	r16, r30
     e46:	8a 30       	cpi	r24, 0x0A	; 10
     e48:	31 f4       	brne	.+12     	; 0xe56 <gfx_mono_draw_string+0x2e>
			x = start_of_string_position_x;
			y += font->height + 1;
     e4a:	f7 01       	movw	r30, r14
     e4c:	84 81       	ldd	r24, Z+4	; 0x04
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	d8 0f       	add	r29, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     e52:	cd 2d       	mov	r28, r13
     e54:	09 c0       	rjmp	.+18     	; 0xe68 <gfx_mono_draw_string+0x40>
			y += font->height + 1;
		} else if (*str == '\r') {
     e56:	8d 30       	cpi	r24, 0x0D	; 13
     e58:	39 f0       	breq	.+14     	; 0xe68 <gfx_mono_draw_string+0x40>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     e5a:	97 01       	movw	r18, r14
     e5c:	4d 2f       	mov	r20, r29
     e5e:	6c 2f       	mov	r22, r28
     e60:	84 df       	rcall	.-248    	; 0xd6a <gfx_mono_draw_char>
			x += font->width;
     e62:	f7 01       	movw	r30, r14
     e64:	83 81       	ldd	r24, Z+3	; 0x03
     e66:	c8 0f       	add	r28, r24
		}
	} while (*(++str));
     e68:	f8 01       	movw	r30, r16
     e6a:	80 81       	ld	r24, Z
     e6c:	81 11       	cpse	r24, r1
     e6e:	e8 cf       	rjmp	.-48     	; 0xe40 <gfx_mono_draw_string+0x18>
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	08 95       	ret

00000e80 <asm_break>:

/* Helper functions */

void asm_break(void)
{
	__asm__ __volatile__ ("break" ::: "memory");
     e80:	98 95       	break
	nop();
     e82:	00 00       	nop
     e84:	08 95       	ret

00000e86 <__vector_9>:
{	/* TIMER 2 COMP-B */
	s_bad_interrupt();
}

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
     e86:	1f 92       	push	r1
     e88:	0f 92       	push	r0
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	0f 92       	push	r0
     e8e:	11 24       	eor	r1, r1
     e90:	2f 93       	push	r18
     e92:	3f 93       	push	r19
     e94:	4f 93       	push	r20
     e96:	5f 93       	push	r21
     e98:	6f 93       	push	r22
     e9a:	7f 93       	push	r23
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
	if (g_status.isAnimationStopped && (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC)) {
     ea8:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <g_status>
     eac:	81 ff       	sbrs	r24, 1
     eae:	69 c0       	rjmp	.+210    	; 0xf82 <__vector_9+0xfc>
     eb0:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <g_SmartLCD_mode>
     eb4:	80 32       	cpi	r24, 0x20	; 32
     eb6:	09 f0       	breq	.+2      	; 0xeba <__vector_9+0x34>
     eb8:	64 c0       	rjmp	.+200    	; 0xf82 <__vector_9+0xfc>
		static uint8_t state_old = 0;
		static uint8_t second_old = 0;
		static uint8_t button_ctr = 0;
		uint8_t cur = PORTB & 0x3f;
     eba:	85 b1       	in	r24, 0x05	; 5
     ebc:	8f 73       	andi	r24, 0x3F	; 63

		/* signaling the grade of deviation */
		g_audio_out_loudness = 0;
     ebe:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <g_audio_out_loudness>
		if (g_showData.clkState_clk_state < 0xf) {
     ec2:	90 91 e3 04 	lds	r25, 0x04E3	; 0x8004e3 <g_showData+0x2a>
     ec6:	9f 30       	cpi	r25, 0x0F	; 15
     ec8:	60 f4       	brcc	.+24     	; 0xee2 <__vector_9+0x5c>
			cur |= _BV(PORTB6);  // LED = red
     eca:	80 64       	ori	r24, 0x40	; 64
			if (state_old != 0x02) {
     ecc:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <state_old.2910>
     ed0:	92 30       	cpi	r25, 0x02	; 2
     ed2:	19 f0       	breq	.+6      	; 0xeda <__vector_9+0x54>
				g_audio_out_length = 122;  // 1 sec
     ed4:	9a e7       	ldi	r25, 0x7A	; 122
     ed6:	90 93 fc 04 	sts	0x04FC, r25	; 0x8004fc <g_audio_out_length>
			}
			state_old = 0x02;
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <state_old.2910>
     ee0:	24 c0       	rjmp	.+72     	; 0xf2a <__vector_9+0xa4>

		} else if ((g_showData.clkState_clk_state == 0xf) && (-4 < g_showData.ppb_int) && (g_showData.ppb_int < 4)) {
     ee2:	9f 30       	cpi	r25, 0x0F	; 15
     ee4:	c1 f4       	brne	.+48     	; 0xf16 <__vector_9+0x90>
     ee6:	20 91 d5 04 	lds	r18, 0x04D5	; 0x8004d5 <g_showData+0x1c>
     eea:	30 91 d6 04 	lds	r19, 0x04D6	; 0x8004d6 <g_showData+0x1d>
     eee:	2d 5f       	subi	r18, 0xFD	; 253
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	27 30       	cpi	r18, 0x07	; 7
     ef4:	31 05       	cpc	r19, r1
     ef6:	78 f4       	brcc	.+30     	; 0xf16 <__vector_9+0x90>
			cur |= _BV(PORTB7);  // LED = green
     ef8:	80 68       	ori	r24, 0x80	; 128
			state_old = 0x00;
     efa:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <state_old.2910>

			/* Acoustic phase tracker */
			if (g_showData.time_second != second_old) {
     efe:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <g_showData+0x2f>
     f02:	20 91 be 03 	lds	r18, 0x03BE	; 0x8003be <second_old.2911>
     f06:	92 17       	cp	r25, r18
     f08:	81 f0       	breq	.+32     	; 0xf2a <__vector_9+0xa4>
				second_old = g_showData.time_second;
     f0a:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <second_old.2911>
				g_audio_out_length = 6;
     f0e:	96 e0       	ldi	r25, 0x06	; 6
     f10:	90 93 fc 04 	sts	0x04FC, r25	; 0x8004fc <g_audio_out_length>
     f14:	0a c0       	rjmp	.+20     	; 0xf2a <__vector_9+0xa4>
			}

		} else {
			if (!state_old) {
     f16:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <state_old.2910>
     f1a:	91 11       	cpse	r25, r1
     f1c:	03 c0       	rjmp	.+6      	; 0xf24 <__vector_9+0x9e>
				g_audio_out_length = 30;  // 1/4 sec
     f1e:	9e e1       	ldi	r25, 0x1E	; 30
     f20:	90 93 fc 04 	sts	0x04FC, r25	; 0x8004fc <g_audio_out_length>
			}
			state_old = 0x01;
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <state_old.2910>
		}

		PORTB = cur;
     f2a:	85 b9       	out	0x05, r24	; 5

		/* sampling I/Q and push buttons */
		if (button_ctr) {
     f2c:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <button_ctr.2912>
     f30:	88 23       	and	r24, r24
     f32:	21 f0       	breq	.+8      	; 0xf3c <__vector_9+0xb6>
			--button_ctr;
     f34:	81 50       	subi	r24, 0x01	; 1
     f36:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <button_ctr.2912>
     f3a:	23 c0       	rjmp	.+70     	; 0xf82 <__vector_9+0xfc>
		} else {
			button_ctr = 12;
     f3c:	8c e0       	ldi	r24, 0x0C	; 12
     f3e:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <button_ctr.2912>
			uint8_t sw = (PINC & 0x06) >> 1;
     f42:	86 b1       	in	r24, 0x06	; 6
     f44:	86 70       	andi	r24, 0x06	; 6
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	95 95       	asr	r25
     f4a:	87 95       	ror	r24
			if (!(sw & 0x01)) {									// SW-I: decrement contrast voltage
     f4c:	80 fd       	sbrc	r24, 0
     f4e:	09 c0       	rjmp	.+18     	; 0xf62 <__vector_9+0xdc>
				if (g_lcd_contrast_pm) {
     f50:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <g_lcd_contrast_pm>
     f54:	88 23       	and	r24, r24
     f56:	a9 f0       	breq	.+42     	; 0xf82 <__vector_9+0xfc>
					--g_lcd_contrast_pm;
     f58:	81 50       	subi	r24, 0x01	; 1
     f5a:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <g_lcd_contrast_pm>
					lcd_contrast_update();
     f5e:	e5 d4       	rcall	.+2506   	; 0x192a <lcd_contrast_update>
				}
			} else if (!(sw & 0x02)) {							// SW-Q: increment contrast voltage
     f60:	10 c0       	rjmp	.+32     	; 0xf82 <__vector_9+0xfc>
     f62:	81 fd       	sbrc	r24, 1
				if (g_lcd_contrast_pm < 0x3f) {
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <__vector_9+0xf2>
     f66:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <g_lcd_contrast_pm>
     f6a:	8f 33       	cpi	r24, 0x3F	; 63
					++g_lcd_contrast_pm;
     f6c:	50 f4       	brcc	.+20     	; 0xf82 <__vector_9+0xfc>
     f6e:	8f 5f       	subi	r24, 0xFF	; 255
					lcd_contrast_update();
     f70:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <g_lcd_contrast_pm>
     f74:	da d4       	rcall	.+2484   	; 0x192a <lcd_contrast_update>
				}
			} else if (!(PINB & _BV(PINB2))) {					// Pushbutton: store value in EEPROM
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <__vector_9+0xfc>
     f78:	1a 99       	sbic	0x03, 2	; 3
				eeprom_nvm_settings_write(C_EEPROM_NVM_SETTING_LCD_CONTRAST);
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <__vector_9+0xfc>
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <eeprom_nvm_settings_write>
			}
		}
	}

	/* Beep length enables audio output */
	if (g_audio_out_length) {
     f82:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <g_audio_out_length>
     f86:	88 23       	and	r24, r24
		--g_audio_out_length;
     f88:	39 f0       	breq	.+14     	; 0xf98 <__vector_9+0x112>
     f8a:	81 50       	subi	r24, 0x01	; 1
     f8c:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <g_audio_out_length>
		g_audio_out_loudness = 9;  // max 9
     f90:	89 e0       	ldi	r24, 0x09	; 9
     f92:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <g_audio_out_loudness>
	} else {
		g_audio_out_loudness = 0;
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <__vector_9+0x116>
     f98:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <g_audio_out_loudness>
	}
}
     f9c:	ff 91       	pop	r31
     f9e:	ef 91       	pop	r30
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	0f 90       	pop	r0
     fba:	1f 90       	pop	r1
     fbc:	18 95       	reti

00000fbe <__vector_13>:
{	/* TIMER 1 COMP-B */
	s_bad_interrupt();
}

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
     fbe:	1f 92       	push	r1
     fc0:	0f 92       	push	r0
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	0f 92       	push	r0
     fc6:	11 24       	eor	r1, r1
     fc8:	2f 93       	push	r18
     fca:	3f 93       	push	r19
     fcc:	4f 93       	push	r20
     fce:	5f 93       	push	r21
     fd0:	6f 93       	push	r22
     fd2:	7f 93       	push	r23
     fd4:	8f 93       	push	r24
     fd6:	9f 93       	push	r25
     fd8:	af 93       	push	r26
     fda:	bf 93       	push	r27
	++g_timer_abs_msb;
     fdc:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <g_timer_abs_msb>
     fe0:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <g_timer_abs_msb+0x1>
     fe4:	a0 91 11 05 	lds	r26, 0x0511	; 0x800511 <g_timer_abs_msb+0x2>
     fe8:	b0 91 12 05 	lds	r27, 0x0512	; 0x800512 <g_timer_abs_msb+0x3>
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	a1 1d       	adc	r26, r1
     ff0:	b1 1d       	adc	r27, r1
     ff2:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <g_timer_abs_msb>
     ff6:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <g_timer_abs_msb+0x1>
     ffa:	a0 93 11 05 	sts	0x0511, r26	; 0x800511 <g_timer_abs_msb+0x2>
     ffe:	b0 93 12 05 	sts	0x0512, r27	; 0x800512 <g_timer_abs_msb+0x3>

	if (g_status.isAnimationStopped && g_audio_out_loudness) {
    1002:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <g_status>
    1006:	81 ff       	sbrs	r24, 1
    1008:	5f c0       	rjmp	.+190    	; 0x10c8 <__vector_13+0x10a>
    100a:	40 91 ff 04 	lds	r20, 0x04FF	; 0x8004ff <g_audio_out_loudness>
    100e:	44 23       	and	r20, r20
    1010:	09 f4       	brne	.+2      	; 0x1014 <__vector_13+0x56>
    1012:	5a c0       	rjmp	.+180    	; 0x10c8 <__vector_13+0x10a>
		int16_t l_audio_pwm_inc;

		if (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC) {
    1014:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <g_SmartLCD_mode>
    1018:	80 32       	cpi	r24, 0x20	; 32
    101a:	61 f4       	brne	.+24     	; 0x1034 <__vector_13+0x76>
			l_audio_pwm_inc = 3691 + (g_showData.clkState_phaseDeg100 >> 2);  // (880 Hz / 15625 Hz) * 16384 Steps * 8 / 2
    101c:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_showData+0x18>
    1020:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <g_showData+0x19>
    1024:	95 95       	asr	r25
    1026:	87 95       	ror	r24
    1028:	95 95       	asr	r25
    102a:	87 95       	ror	r24
    102c:	9c 01       	movw	r18, r24
    102e:	25 59       	subi	r18, 0x95	; 149
    1030:	31 4f       	sbci	r19, 0xF1	; 241
    1032:	04 c0       	rjmp	.+8      	; 0x103c <__vector_13+0x7e>
		} else {
			l_audio_pwm_inc = g_audio_out_inc;
    1034:	20 91 fd 04 	lds	r18, 0x04FD	; 0x8004fd <g_audio_out_inc>
    1038:	30 91 fe 04 	lds	r19, 0x04FE	; 0x8004fe <g_audio_out_inc+0x1>
		}

		/* Generate triangle signal */
		if (g_audio_pwm_ramp_dwn) {
    103c:	50 91 f9 04 	lds	r21, 0x04F9	; 0x8004f9 <g_audio_pwm_ramp_dwn>
    1040:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <g_audio_pwm_accu>
    1044:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <g_audio_pwm_accu+0x1>
    1048:	55 23       	and	r21, r21
    104a:	b1 f0       	breq	.+44     	; 0x1078 <__vector_13+0xba>
			g_audio_pwm_accu -= l_audio_pwm_inc;
    104c:	82 1b       	sub	r24, r18
    104e:	93 0b       	sbc	r25, r19
    1050:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <g_audio_pwm_accu+0x1>
    1054:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <g_audio_pwm_accu>
			if (g_audio_pwm_accu <= -16383) {
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	20 ec       	ldi	r18, 0xC0	; 192
    105c:	92 07       	cpc	r25, r18
    105e:	14 f5       	brge	.+68     	; 0x10a4 <__vector_13+0xe6>
				g_audio_pwm_ramp_dwn = false;
    1060:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <g_audio_pwm_ramp_dwn>
				int16_t residue = -g_audio_pwm_accu - 16383;
				g_audio_pwm_accu = -16383 + residue;
    1064:	22 e0       	ldi	r18, 0x02	; 2
    1066:	30 e8       	ldi	r19, 0x80	; 128
    1068:	b9 01       	movw	r22, r18
    106a:	68 1b       	sub	r22, r24
    106c:	79 0b       	sbc	r23, r25
    106e:	70 93 fb 04 	sts	0x04FB, r23	; 0x8004fb <g_audio_pwm_accu+0x1>
    1072:	60 93 fa 04 	sts	0x04FA, r22	; 0x8004fa <g_audio_pwm_accu>
    1076:	16 c0       	rjmp	.+44     	; 0x10a4 <__vector_13+0xe6>
			}
		} else {
			g_audio_pwm_accu += l_audio_pwm_inc;
    1078:	82 0f       	add	r24, r18
    107a:	93 1f       	adc	r25, r19
    107c:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <g_audio_pwm_accu+0x1>
    1080:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <g_audio_pwm_accu>
			if (g_audio_pwm_accu >= +16383) {
    1084:	8f 3f       	cpi	r24, 0xFF	; 255
    1086:	7f e3       	ldi	r23, 0x3F	; 63
    1088:	97 07       	cpc	r25, r23
    108a:	64 f0       	brlt	.+24     	; 0x10a4 <__vector_13+0xe6>
				g_audio_pwm_ramp_dwn = true;
    108c:	21 e0       	ldi	r18, 0x01	; 1
    108e:	20 93 f9 04 	sts	0x04F9, r18	; 0x8004f9 <g_audio_pwm_ramp_dwn>
				int16_t residue = g_audio_pwm_accu - 16383;
				g_audio_pwm_accu = 16383 - residue;
    1092:	2e ef       	ldi	r18, 0xFE	; 254
    1094:	3f e7       	ldi	r19, 0x7F	; 127
    1096:	b9 01       	movw	r22, r18
    1098:	68 1b       	sub	r22, r24
    109a:	79 0b       	sbc	r23, r25
    109c:	70 93 fb 04 	sts	0x04FB, r23	; 0x8004fb <g_audio_pwm_accu+0x1>
    10a0:	60 93 fa 04 	sts	0x04FA, r22	; 0x8004fa <g_audio_pwm_accu>
			}
		}

		int16_t audio_out = 256 + (g_audio_pwm_accu >> (15 - g_audio_out_loudness));  // 6 + 9
    10a4:	2f e0       	ldi	r18, 0x0F	; 15
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	24 1b       	sub	r18, r20
    10aa:	31 09       	sbc	r19, r1
    10ac:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <g_audio_pwm_accu>
    10b0:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <g_audio_pwm_accu+0x1>
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <__vector_13+0xfc>
    10b6:	95 95       	asr	r25
    10b8:	87 95       	ror	r24
    10ba:	2a 95       	dec	r18
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <__vector_13+0xf8>
    10be:	93 95       	inc	r25
		OCR1AH = (uint8_t) (audio_out >> 8);					// 9 bit
    10c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL = (uint8_t) (audio_out & 0xff);
    10c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	cpu_irq_enable();
	//adc_start_conversion();						// TODO ???
	enter_sleep(SLEEP_MODE_ADC);
	adc_disable_interrupt();
#endif
}
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <__vector_16>:
{	/* TIMER 0 COMP-B */
	s_bad_interrupt();
}

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
	cpu_irq_enable();

	enter_sleep(SLEEP_MODE_ADC);
	adc_disable_interrupt();
#endif
}
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	0f 90       	pop	r0
    10f6:	1f 90       	pop	r1
    10f8:	18 95       	reti

000010fa <__vector_21>:
{	/* USART, TX - Complete */
	s_bad_interrupt();
}

ISR(__vector_21, ISR_BLOCK)
{	/* ADC */
    10fa:	1f 92       	push	r1
    10fc:	0f 92       	push	r0
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	0f 92       	push	r0
    1102:	11 24       	eor	r1, r1
    1104:	8f 92       	push	r8
    1106:	9f 92       	push	r9
    1108:	af 92       	push	r10
    110a:	bf 92       	push	r11
    110c:	cf 92       	push	r12
    110e:	df 92       	push	r13
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	2f 93       	push	r18
    1116:	3f 93       	push	r19
    1118:	4f 93       	push	r20
    111a:	5f 93       	push	r21
    111c:	6f 93       	push	r22
    111e:	7f 93       	push	r23
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	af 93       	push	r26
    1126:	bf 93       	push	r27
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31
	uint16_t adc_val = ADCL | (ADCH << 8);
    1130:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1134:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	ea 01       	movw	r28, r20
    113c:	d8 2b       	or	r29, r24
	uint8_t  reason  = g_adc_state;

	//TIFR1 |= _BV(TOV1);							// Reset Timer1 overflow status bit (when no ISR for TOV1 activated!)

	switch (reason) {
    113e:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <g_adc_state>
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	61 f0       	breq	.+24     	; 0x115e <__vector_21+0x64>
    1146:	38 f0       	brcs	.+14     	; 0x1156 <__vector_21+0x5c>
    1148:	82 30       	cpi	r24, 0x02	; 2
    114a:	09 f4       	brne	.+2      	; 0x114e <__vector_21+0x54>
    114c:	4c c0       	rjmp	.+152    	; 0x11e6 <__vector_21+0xec>
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	09 f4       	brne	.+2      	; 0x1154 <__vector_21+0x5a>
    1152:	4d c0       	rjmp	.+154    	; 0x11ee <__vector_21+0xf4>
    1154:	89 c0       	rjmp	.+274    	; 0x1268 <__vector_21+0x16e>
		case ADC_STATE_PRE_LDR:
			// drop one ADC value after switching MUX
			g_adc_state = ADC_STATE_VLD_LDR;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <g_adc_state>
		break;
    115c:	8a c0       	rjmp	.+276    	; 0x1272 <__vector_21+0x178>

		case ADC_STATE_VLD_LDR:
		{
			/* Low pass filtering and enhancing the data depth */
			float l_adc_light = g_adc_light;
    115e:	c0 90 0a 05 	lds	r12, 0x050A	; 0x80050a <g_adc_light>
    1162:	d0 90 0b 05 	lds	r13, 0x050B	; 0x80050b <g_adc_light+0x1>
    1166:	e0 90 0c 05 	lds	r14, 0x050C	; 0x80050c <g_adc_light+0x2>
    116a:	f0 90 0d 05 	lds	r15, 0x050D	; 0x80050d <g_adc_light+0x3>
			cpu_irq_enable();
    116e:	78 94       	sei
			float calc = l_adc_light ?  0.980f * l_adc_light + 0.020f * adc_val : adc_val;	// load with initial value if none is set before
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	a9 01       	movw	r20, r18
    1176:	c7 01       	movw	r24, r14
    1178:	b6 01       	movw	r22, r12
    117a:	0e 94 2d 22 	call	0x445a	; 0x445a <__cmpsf2>
    117e:	ae 01       	movw	r20, r28
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	88 23       	and	r24, r24
    1186:	d9 f0       	breq	.+54     	; 0x11be <__vector_21+0xc4>
    1188:	cb 01       	movw	r24, r22
    118a:	ba 01       	movw	r22, r20
    118c:	0e 94 ca 22 	call	0x4594	; 0x4594 <__floatunsisf>
    1190:	2a e0       	ldi	r18, 0x0A	; 10
    1192:	37 ed       	ldi	r19, 0xD7	; 215
    1194:	43 ea       	ldi	r20, 0xA3	; 163
    1196:	5c e3       	ldi	r21, 0x3C	; 60
    1198:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__mulsf3>
    119c:	4b 01       	movw	r8, r22
    119e:	5c 01       	movw	r10, r24
    11a0:	28 e4       	ldi	r18, 0x48	; 72
    11a2:	31 ee       	ldi	r19, 0xE1	; 225
    11a4:	4a e7       	ldi	r20, 0x7A	; 122
    11a6:	5f e3       	ldi	r21, 0x3F	; 63
    11a8:	c7 01       	movw	r24, r14
    11aa:	b6 01       	movw	r22, r12
    11ac:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__mulsf3>
    11b0:	9b 01       	movw	r18, r22
    11b2:	ac 01       	movw	r20, r24
    11b4:	c5 01       	movw	r24, r10
    11b6:	b4 01       	movw	r22, r8
    11b8:	0e 94 c9 21 	call	0x4392	; 0x4392 <__addsf3>
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <__vector_21+0xcc>
    11be:	cb 01       	movw	r24, r22
    11c0:	ba 01       	movw	r22, r20
    11c2:	0e 94 ca 22 	call	0x4594	; 0x4594 <__floatunsisf>
			cpu_irq_disable();
    11c6:	f8 94       	cli
			g_adc_light = calc;
    11c8:	60 93 0a 05 	sts	0x050A, r22	; 0x80050a <g_adc_light>
    11cc:	70 93 0b 05 	sts	0x050B, r23	; 0x80050b <g_adc_light+0x1>
    11d0:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <g_adc_light+0x2>
    11d4:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <g_adc_light+0x3>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    11d8:	88 ec       	ldi	r24, 0xC8	; 200
    11da:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

			adc_set_admux(ADC_MUX_TEMPSENSE | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
			g_adc_state = ADC_STATE_PRE_TEMP;
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <g_adc_state>
		}
		break;
    11e4:	46 c0       	rjmp	.+140    	; 0x1272 <__vector_21+0x178>

		case ADC_STATE_PRE_TEMP:
			// drop one ADC value after switching MUX
			g_adc_state = ADC_STATE_VLD_TEMP;
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <g_adc_state>
		break;
    11ec:	42 c0       	rjmp	.+132    	; 0x1272 <__vector_21+0x178>

		case ADC_STATE_VLD_TEMP:
		{
			/* Low pass filtering and enhancing the data depth */
			float l_adc_temp  = g_adc_temp;
    11ee:	c0 90 06 05 	lds	r12, 0x0506	; 0x800506 <g_adc_temp>
    11f2:	d0 90 07 05 	lds	r13, 0x0507	; 0x800507 <g_adc_temp+0x1>
    11f6:	e0 90 08 05 	lds	r14, 0x0508	; 0x800508 <g_adc_temp+0x2>
    11fa:	f0 90 09 05 	lds	r15, 0x0509	; 0x800509 <g_adc_temp+0x3>
			cpu_irq_enable();
    11fe:	78 94       	sei
			float calc = l_adc_temp ?  0.998f * l_adc_temp  + 0.002f * adc_val : adc_val;	// load with initial value if none is set before
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	a9 01       	movw	r20, r18
    1206:	c7 01       	movw	r24, r14
    1208:	b6 01       	movw	r22, r12
    120a:	0e 94 2d 22 	call	0x445a	; 0x445a <__cmpsf2>
    120e:	ae 01       	movw	r20, r28
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	88 23       	and	r24, r24
    1216:	d9 f0       	breq	.+54     	; 0x124e <__vector_21+0x154>
    1218:	cb 01       	movw	r24, r22
    121a:	ba 01       	movw	r22, r20
    121c:	0e 94 ca 22 	call	0x4594	; 0x4594 <__floatunsisf>
    1220:	2f e6       	ldi	r18, 0x6F	; 111
    1222:	32 e1       	ldi	r19, 0x12	; 18
    1224:	43 e0       	ldi	r20, 0x03	; 3
    1226:	5b e3       	ldi	r21, 0x3B	; 59
    1228:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__mulsf3>
    122c:	4b 01       	movw	r8, r22
    122e:	5c 01       	movw	r10, r24
    1230:	2e ee       	ldi	r18, 0xEE	; 238
    1232:	3c e7       	ldi	r19, 0x7C	; 124
    1234:	4f e7       	ldi	r20, 0x7F	; 127
    1236:	5f e3       	ldi	r21, 0x3F	; 63
    1238:	c7 01       	movw	r24, r14
    123a:	b6 01       	movw	r22, r12
    123c:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__mulsf3>
    1240:	9b 01       	movw	r18, r22
    1242:	ac 01       	movw	r20, r24
    1244:	c5 01       	movw	r24, r10
    1246:	b4 01       	movw	r22, r8
    1248:	0e 94 c9 21 	call	0x4392	; 0x4392 <__addsf3>
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <__vector_21+0x15c>
    124e:	cb 01       	movw	r24, r22
    1250:	ba 01       	movw	r22, r20
    1252:	0e 94 ca 22 	call	0x4594	; 0x4594 <__floatunsisf>
			cpu_irq_disable();
    1256:	f8 94       	cli
			g_adc_temp = calc;
    1258:	60 93 06 05 	sts	0x0506, r22	; 0x800506 <g_adc_temp>
    125c:	70 93 07 05 	sts	0x0507, r23	; 0x800507 <g_adc_temp+0x1>
    1260:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <g_adc_temp+0x2>
    1264:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <g_adc_temp+0x3>
    1268:	80 ec       	ldi	r24, 0xC0	; 192
    126a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		}
			// fall-through.
		default:
			adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
			g_adc_state = ADC_STATE_PRE_LDR;
    126e:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <g_adc_state>
	}
}
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	bf 91       	pop	r27
    127c:	af 91       	pop	r26
    127e:	9f 91       	pop	r25
    1280:	8f 91       	pop	r24
    1282:	7f 91       	pop	r23
    1284:	6f 91       	pop	r22
    1286:	5f 91       	pop	r21
    1288:	4f 91       	pop	r20
    128a:	3f 91       	pop	r19
    128c:	2f 91       	pop	r18
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	df 90       	pop	r13
    1294:	cf 90       	pop	r12
    1296:	bf 90       	pop	r11
    1298:	af 90       	pop	r10
    129a:	9f 90       	pop	r9
    129c:	8f 90       	pop	r8
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	0f 90       	pop	r0
    12a4:	1f 90       	pop	r1
    12a6:	18 95       	reti

000012a8 <__vector_24>:
{	/* ANALOG COMP */
	s_bad_interrupt();
}

ISR(__vector_24, ISR_BLOCK)
{	/* TWI */
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	0f 92       	push	r0
    12b0:	11 24       	eor	r1, r1
    12b2:	2f 93       	push	r18
    12b4:	3f 93       	push	r19
    12b6:	4f 93       	push	r20
    12b8:	5f 93       	push	r21
    12ba:	6f 93       	push	r22
    12bc:	7f 93       	push	r23
    12be:	8f 93       	push	r24
    12c0:	9f 93       	push	r25
    12c2:	af 93       	push	r26
    12c4:	bf 93       	push	r27
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	ef 93       	push	r30
    12cc:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b11111 << TWS3);
    12ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	uint8_t twd = TWDR;
    12d2:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	uint8_t twcr_cur = TWCR;
    12d6:	cc eb       	ldi	r28, 0xBC	; 188
    12d8:	d0 e0       	ldi	r29, 0x00	; 0
    12da:	48 81       	ld	r20, Y

	uint8_t twcr_new = __vector_24__bottom(tws, twd, twcr_cur);
    12dc:	88 7f       	andi	r24, 0xF8	; 248
    12de:	0e 94 cf 1c 	call	0x399e	; 0x399e <__vector_24__bottom>
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
    12e2:	85 68       	ori	r24, 0x85	; 133
    12e4:	88 83       	st	Y, r24
}
    12e6:	ff 91       	pop	r31
    12e8:	ef 91       	pop	r30
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	bf 91       	pop	r27
    12f0:	af 91       	pop	r26
    12f2:	9f 91       	pop	r25
    12f4:	8f 91       	pop	r24
    12f6:	7f 91       	pop	r23
    12f8:	6f 91       	pop	r22
    12fa:	5f 91       	pop	r21
    12fc:	4f 91       	pop	r20
    12fe:	3f 91       	pop	r19
    1300:	2f 91       	pop	r18
    1302:	0f 90       	pop	r0
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	0f 90       	pop	r0
    1308:	1f 90       	pop	r1
    130a:	18 95       	reti

0000130c <__vector_25>:

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
    130c:	1f 92       	push	r1
    130e:	0f 92       	push	r0
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	0f 92       	push	r0
    1314:	11 24       	eor	r1, r1
    1316:	2f 93       	push	r18
    1318:	3f 93       	push	r19
    131a:	4f 93       	push	r20
    131c:	5f 93       	push	r21
    131e:	6f 93       	push	r22
    1320:	7f 93       	push	r23
    1322:	8f 93       	push	r24
    1324:	9f 93       	push	r25
    1326:	af 93       	push	r26
    1328:	bf 93       	push	r27
    132a:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    132c:	ff 93       	push	r31
}

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
	s_bad_interrupt();
}
    132e:	a8 dd       	rcall	.-1200   	; 0xe80 <asm_break>
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <__vector_23>:
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
    1374:	cb df       	rcall	.-106    	; 0x130c <__vector_25>
    1376:	ff 91       	pop	r31
    1378:	ef 91       	pop	r30
    137a:	bf 91       	pop	r27
    137c:	af 91       	pop	r26
    137e:	9f 91       	pop	r25
    1380:	8f 91       	pop	r24
    1382:	7f 91       	pop	r23
    1384:	6f 91       	pop	r22
    1386:	5f 91       	pop	r21
    1388:	4f 91       	pop	r20
    138a:	3f 91       	pop	r19
    138c:	2f 91       	pop	r18
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	0f 90       	pop	r0
    1394:	1f 90       	pop	r1
    1396:	18 95       	reti

00001398 <__vector_22>:
    1398:	1f 92       	push	r1
    139a:	0f 92       	push	r0
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	0f 92       	push	r0
    13a0:	11 24       	eor	r1, r1
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	4f 93       	push	r20
    13a8:	5f 93       	push	r21
    13aa:	6f 93       	push	r22
    13ac:	7f 93       	push	r23
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	af 93       	push	r26
    13b4:	bf 93       	push	r27
    13b6:	ef 93       	push	r30
    13b8:	ff 93       	push	r31
    13ba:	a8 df       	rcall	.-176    	; 0x130c <__vector_25>
    13bc:	ff 91       	pop	r31
    13be:	ef 91       	pop	r30
    13c0:	bf 91       	pop	r27
    13c2:	af 91       	pop	r26
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	7f 91       	pop	r23
    13ca:	6f 91       	pop	r22
    13cc:	5f 91       	pop	r21
    13ce:	4f 91       	pop	r20
    13d0:	3f 91       	pop	r19
    13d2:	2f 91       	pop	r18
    13d4:	0f 90       	pop	r0
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	0f 90       	pop	r0
    13da:	1f 90       	pop	r1
    13dc:	18 95       	reti

000013de <__vector_20>:
    13de:	1f 92       	push	r1
    13e0:	0f 92       	push	r0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
    13e8:	2f 93       	push	r18
    13ea:	3f 93       	push	r19
    13ec:	4f 93       	push	r20
    13ee:	5f 93       	push	r21
    13f0:	6f 93       	push	r22
    13f2:	7f 93       	push	r23
    13f4:	8f 93       	push	r24
    13f6:	9f 93       	push	r25
    13f8:	af 93       	push	r26
    13fa:	bf 93       	push	r27
    13fc:	ef 93       	push	r30
    13fe:	ff 93       	push	r31
    1400:	85 df       	rcall	.-246    	; 0x130c <__vector_25>
    1402:	ff 91       	pop	r31
    1404:	ef 91       	pop	r30
    1406:	bf 91       	pop	r27
    1408:	af 91       	pop	r26
    140a:	9f 91       	pop	r25
    140c:	8f 91       	pop	r24
    140e:	7f 91       	pop	r23
    1410:	6f 91       	pop	r22
    1412:	5f 91       	pop	r21
    1414:	4f 91       	pop	r20
    1416:	3f 91       	pop	r19
    1418:	2f 91       	pop	r18
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	0f 90       	pop	r0
    1420:	1f 90       	pop	r1
    1422:	18 95       	reti

00001424 <__vector_19>:
    1424:	1f 92       	push	r1
    1426:	0f 92       	push	r0
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	0f 92       	push	r0
    142c:	11 24       	eor	r1, r1
    142e:	2f 93       	push	r18
    1430:	3f 93       	push	r19
    1432:	4f 93       	push	r20
    1434:	5f 93       	push	r21
    1436:	6f 93       	push	r22
    1438:	7f 93       	push	r23
    143a:	8f 93       	push	r24
    143c:	9f 93       	push	r25
    143e:	af 93       	push	r26
    1440:	bf 93       	push	r27
    1442:	ef 93       	push	r30
    1444:	ff 93       	push	r31
    1446:	62 df       	rcall	.-316    	; 0x130c <__vector_25>
    1448:	ff 91       	pop	r31
    144a:	ef 91       	pop	r30
    144c:	bf 91       	pop	r27
    144e:	af 91       	pop	r26
    1450:	9f 91       	pop	r25
    1452:	8f 91       	pop	r24
    1454:	7f 91       	pop	r23
    1456:	6f 91       	pop	r22
    1458:	5f 91       	pop	r21
    145a:	4f 91       	pop	r20
    145c:	3f 91       	pop	r19
    145e:	2f 91       	pop	r18
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <__vector_18>:
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	2f 93       	push	r18
    1476:	3f 93       	push	r19
    1478:	4f 93       	push	r20
    147a:	5f 93       	push	r21
    147c:	6f 93       	push	r22
    147e:	7f 93       	push	r23
    1480:	8f 93       	push	r24
    1482:	9f 93       	push	r25
    1484:	af 93       	push	r26
    1486:	bf 93       	push	r27
    1488:	ef 93       	push	r30
    148a:	ff 93       	push	r31
    148c:	3f df       	rcall	.-386    	; 0x130c <__vector_25>
    148e:	ff 91       	pop	r31
    1490:	ef 91       	pop	r30
    1492:	bf 91       	pop	r27
    1494:	af 91       	pop	r26
    1496:	9f 91       	pop	r25
    1498:	8f 91       	pop	r24
    149a:	7f 91       	pop	r23
    149c:	6f 91       	pop	r22
    149e:	5f 91       	pop	r21
    14a0:	4f 91       	pop	r20
    14a2:	3f 91       	pop	r19
    14a4:	2f 91       	pop	r18
    14a6:	0f 90       	pop	r0
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	0f 90       	pop	r0
    14ac:	1f 90       	pop	r1
    14ae:	18 95       	reti

000014b0 <__vector_17>:
    14b0:	1f 92       	push	r1
    14b2:	0f 92       	push	r0
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	0f 92       	push	r0
    14b8:	11 24       	eor	r1, r1
    14ba:	2f 93       	push	r18
    14bc:	3f 93       	push	r19
    14be:	4f 93       	push	r20
    14c0:	5f 93       	push	r21
    14c2:	6f 93       	push	r22
    14c4:	7f 93       	push	r23
    14c6:	8f 93       	push	r24
    14c8:	9f 93       	push	r25
    14ca:	af 93       	push	r26
    14cc:	bf 93       	push	r27
    14ce:	ef 93       	push	r30
    14d0:	ff 93       	push	r31
    14d2:	1c df       	rcall	.-456    	; 0x130c <__vector_25>
    14d4:	ff 91       	pop	r31
    14d6:	ef 91       	pop	r30
    14d8:	bf 91       	pop	r27
    14da:	af 91       	pop	r26
    14dc:	9f 91       	pop	r25
    14de:	8f 91       	pop	r24
    14e0:	7f 91       	pop	r23
    14e2:	6f 91       	pop	r22
    14e4:	5f 91       	pop	r21
    14e6:	4f 91       	pop	r20
    14e8:	3f 91       	pop	r19
    14ea:	2f 91       	pop	r18
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <__vector_15>:
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	11 24       	eor	r1, r1
    1500:	2f 93       	push	r18
    1502:	3f 93       	push	r19
    1504:	4f 93       	push	r20
    1506:	5f 93       	push	r21
    1508:	6f 93       	push	r22
    150a:	7f 93       	push	r23
    150c:	8f 93       	push	r24
    150e:	9f 93       	push	r25
    1510:	af 93       	push	r26
    1512:	bf 93       	push	r27
    1514:	ef 93       	push	r30
    1516:	ff 93       	push	r31
    1518:	f9 de       	rcall	.-526    	; 0x130c <__vector_25>
    151a:	ff 91       	pop	r31
    151c:	ef 91       	pop	r30
    151e:	bf 91       	pop	r27
    1520:	af 91       	pop	r26
    1522:	9f 91       	pop	r25
    1524:	8f 91       	pop	r24
    1526:	7f 91       	pop	r23
    1528:	6f 91       	pop	r22
    152a:	5f 91       	pop	r21
    152c:	4f 91       	pop	r20
    152e:	3f 91       	pop	r19
    1530:	2f 91       	pop	r18
    1532:	0f 90       	pop	r0
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	0f 90       	pop	r0
    1538:	1f 90       	pop	r1
    153a:	18 95       	reti

0000153c <__vector_14>:
    153c:	1f 92       	push	r1
    153e:	0f 92       	push	r0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	0f 92       	push	r0
    1544:	11 24       	eor	r1, r1
    1546:	2f 93       	push	r18
    1548:	3f 93       	push	r19
    154a:	4f 93       	push	r20
    154c:	5f 93       	push	r21
    154e:	6f 93       	push	r22
    1550:	7f 93       	push	r23
    1552:	8f 93       	push	r24
    1554:	9f 93       	push	r25
    1556:	af 93       	push	r26
    1558:	bf 93       	push	r27
    155a:	ef 93       	push	r30
    155c:	ff 93       	push	r31
    155e:	d6 de       	rcall	.-596    	; 0x130c <__vector_25>
    1560:	ff 91       	pop	r31
    1562:	ef 91       	pop	r30
    1564:	bf 91       	pop	r27
    1566:	af 91       	pop	r26
    1568:	9f 91       	pop	r25
    156a:	8f 91       	pop	r24
    156c:	7f 91       	pop	r23
    156e:	6f 91       	pop	r22
    1570:	5f 91       	pop	r21
    1572:	4f 91       	pop	r20
    1574:	3f 91       	pop	r19
    1576:	2f 91       	pop	r18
    1578:	0f 90       	pop	r0
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	0f 90       	pop	r0
    157e:	1f 90       	pop	r1
    1580:	18 95       	reti

00001582 <__vector_12>:
    1582:	1f 92       	push	r1
    1584:	0f 92       	push	r0
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	0f 92       	push	r0
    158a:	11 24       	eor	r1, r1
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
    15a4:	b3 de       	rcall	.-666    	; 0x130c <__vector_25>
    15a6:	ff 91       	pop	r31
    15a8:	ef 91       	pop	r30
    15aa:	bf 91       	pop	r27
    15ac:	af 91       	pop	r26
    15ae:	9f 91       	pop	r25
    15b0:	8f 91       	pop	r24
    15b2:	7f 91       	pop	r23
    15b4:	6f 91       	pop	r22
    15b6:	5f 91       	pop	r21
    15b8:	4f 91       	pop	r20
    15ba:	3f 91       	pop	r19
    15bc:	2f 91       	pop	r18
    15be:	0f 90       	pop	r0
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	0f 90       	pop	r0
    15c4:	1f 90       	pop	r1
    15c6:	18 95       	reti

000015c8 <__vector_11>:
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	2f 93       	push	r18
    15d4:	3f 93       	push	r19
    15d6:	4f 93       	push	r20
    15d8:	5f 93       	push	r21
    15da:	6f 93       	push	r22
    15dc:	7f 93       	push	r23
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	af 93       	push	r26
    15e4:	bf 93       	push	r27
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
    15ea:	90 de       	rcall	.-736    	; 0x130c <__vector_25>
    15ec:	ff 91       	pop	r31
    15ee:	ef 91       	pop	r30
    15f0:	bf 91       	pop	r27
    15f2:	af 91       	pop	r26
    15f4:	9f 91       	pop	r25
    15f6:	8f 91       	pop	r24
    15f8:	7f 91       	pop	r23
    15fa:	6f 91       	pop	r22
    15fc:	5f 91       	pop	r21
    15fe:	4f 91       	pop	r20
    1600:	3f 91       	pop	r19
    1602:	2f 91       	pop	r18
    1604:	0f 90       	pop	r0
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	0f 90       	pop	r0
    160a:	1f 90       	pop	r1
    160c:	18 95       	reti

0000160e <__vector_10>:
    160e:	1f 92       	push	r1
    1610:	0f 92       	push	r0
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	0f 92       	push	r0
    1616:	11 24       	eor	r1, r1
    1618:	2f 93       	push	r18
    161a:	3f 93       	push	r19
    161c:	4f 93       	push	r20
    161e:	5f 93       	push	r21
    1620:	6f 93       	push	r22
    1622:	7f 93       	push	r23
    1624:	8f 93       	push	r24
    1626:	9f 93       	push	r25
    1628:	af 93       	push	r26
    162a:	bf 93       	push	r27
    162c:	ef 93       	push	r30
    162e:	ff 93       	push	r31
    1630:	6d de       	rcall	.-806    	; 0x130c <__vector_25>
    1632:	ff 91       	pop	r31
    1634:	ef 91       	pop	r30
    1636:	bf 91       	pop	r27
    1638:	af 91       	pop	r26
    163a:	9f 91       	pop	r25
    163c:	8f 91       	pop	r24
    163e:	7f 91       	pop	r23
    1640:	6f 91       	pop	r22
    1642:	5f 91       	pop	r21
    1644:	4f 91       	pop	r20
    1646:	3f 91       	pop	r19
    1648:	2f 91       	pop	r18
    164a:	0f 90       	pop	r0
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	0f 90       	pop	r0
    1650:	1f 90       	pop	r1
    1652:	18 95       	reti

00001654 <__vector_8>:
    1654:	1f 92       	push	r1
    1656:	0f 92       	push	r0
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	0f 92       	push	r0
    165c:	11 24       	eor	r1, r1
    165e:	2f 93       	push	r18
    1660:	3f 93       	push	r19
    1662:	4f 93       	push	r20
    1664:	5f 93       	push	r21
    1666:	6f 93       	push	r22
    1668:	7f 93       	push	r23
    166a:	8f 93       	push	r24
    166c:	9f 93       	push	r25
    166e:	af 93       	push	r26
    1670:	bf 93       	push	r27
    1672:	ef 93       	push	r30
    1674:	ff 93       	push	r31
    1676:	4a de       	rcall	.-876    	; 0x130c <__vector_25>
    1678:	ff 91       	pop	r31
    167a:	ef 91       	pop	r30
    167c:	bf 91       	pop	r27
    167e:	af 91       	pop	r26
    1680:	9f 91       	pop	r25
    1682:	8f 91       	pop	r24
    1684:	7f 91       	pop	r23
    1686:	6f 91       	pop	r22
    1688:	5f 91       	pop	r21
    168a:	4f 91       	pop	r20
    168c:	3f 91       	pop	r19
    168e:	2f 91       	pop	r18
    1690:	0f 90       	pop	r0
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	0f 90       	pop	r0
    1696:	1f 90       	pop	r1
    1698:	18 95       	reti

0000169a <__vector_7>:
    169a:	1f 92       	push	r1
    169c:	0f 92       	push	r0
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	0f 92       	push	r0
    16a2:	11 24       	eor	r1, r1
    16a4:	2f 93       	push	r18
    16a6:	3f 93       	push	r19
    16a8:	4f 93       	push	r20
    16aa:	5f 93       	push	r21
    16ac:	6f 93       	push	r22
    16ae:	7f 93       	push	r23
    16b0:	8f 93       	push	r24
    16b2:	9f 93       	push	r25
    16b4:	af 93       	push	r26
    16b6:	bf 93       	push	r27
    16b8:	ef 93       	push	r30
    16ba:	ff 93       	push	r31
    16bc:	27 de       	rcall	.-946    	; 0x130c <__vector_25>
    16be:	ff 91       	pop	r31
    16c0:	ef 91       	pop	r30
    16c2:	bf 91       	pop	r27
    16c4:	af 91       	pop	r26
    16c6:	9f 91       	pop	r25
    16c8:	8f 91       	pop	r24
    16ca:	7f 91       	pop	r23
    16cc:	6f 91       	pop	r22
    16ce:	5f 91       	pop	r21
    16d0:	4f 91       	pop	r20
    16d2:	3f 91       	pop	r19
    16d4:	2f 91       	pop	r18
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0
    16dc:	1f 90       	pop	r1
    16de:	18 95       	reti

000016e0 <__vector_6>:
    16e0:	1f 92       	push	r1
    16e2:	0f 92       	push	r0
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	0f 92       	push	r0
    16e8:	11 24       	eor	r1, r1
    16ea:	2f 93       	push	r18
    16ec:	3f 93       	push	r19
    16ee:	4f 93       	push	r20
    16f0:	5f 93       	push	r21
    16f2:	6f 93       	push	r22
    16f4:	7f 93       	push	r23
    16f6:	8f 93       	push	r24
    16f8:	9f 93       	push	r25
    16fa:	af 93       	push	r26
    16fc:	bf 93       	push	r27
    16fe:	ef 93       	push	r30
    1700:	ff 93       	push	r31
    1702:	04 de       	rcall	.-1016   	; 0x130c <__vector_25>
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	bf 91       	pop	r27
    170a:	af 91       	pop	r26
    170c:	9f 91       	pop	r25
    170e:	8f 91       	pop	r24
    1710:	7f 91       	pop	r23
    1712:	6f 91       	pop	r22
    1714:	5f 91       	pop	r21
    1716:	4f 91       	pop	r20
    1718:	3f 91       	pop	r19
    171a:	2f 91       	pop	r18
    171c:	0f 90       	pop	r0
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	0f 90       	pop	r0
    1722:	1f 90       	pop	r1
    1724:	18 95       	reti

00001726 <__vector_5>:
    1726:	1f 92       	push	r1
    1728:	0f 92       	push	r0
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	0f 92       	push	r0
    172e:	11 24       	eor	r1, r1
    1730:	2f 93       	push	r18
    1732:	3f 93       	push	r19
    1734:	4f 93       	push	r20
    1736:	5f 93       	push	r21
    1738:	6f 93       	push	r22
    173a:	7f 93       	push	r23
    173c:	8f 93       	push	r24
    173e:	9f 93       	push	r25
    1740:	af 93       	push	r26
    1742:	bf 93       	push	r27
    1744:	ef 93       	push	r30
    1746:	ff 93       	push	r31
    1748:	e1 dd       	rcall	.-1086   	; 0x130c <__vector_25>
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <__vector_4>:
    176c:	1f 92       	push	r1
    176e:	0f 92       	push	r0
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	0f 92       	push	r0
    1774:	11 24       	eor	r1, r1
    1776:	2f 93       	push	r18
    1778:	3f 93       	push	r19
    177a:	4f 93       	push	r20
    177c:	5f 93       	push	r21
    177e:	6f 93       	push	r22
    1780:	7f 93       	push	r23
    1782:	8f 93       	push	r24
    1784:	9f 93       	push	r25
    1786:	af 93       	push	r26
    1788:	bf 93       	push	r27
    178a:	ef 93       	push	r30
    178c:	ff 93       	push	r31
    178e:	be dd       	rcall	.-1156   	; 0x130c <__vector_25>
    1790:	ff 91       	pop	r31
    1792:	ef 91       	pop	r30
    1794:	bf 91       	pop	r27
    1796:	af 91       	pop	r26
    1798:	9f 91       	pop	r25
    179a:	8f 91       	pop	r24
    179c:	7f 91       	pop	r23
    179e:	6f 91       	pop	r22
    17a0:	5f 91       	pop	r21
    17a2:	4f 91       	pop	r20
    17a4:	3f 91       	pop	r19
    17a6:	2f 91       	pop	r18
    17a8:	0f 90       	pop	r0
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	0f 90       	pop	r0
    17ae:	1f 90       	pop	r1
    17b0:	18 95       	reti

000017b2 <__vector_3>:
    17b2:	1f 92       	push	r1
    17b4:	0f 92       	push	r0
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	0f 92       	push	r0
    17ba:	11 24       	eor	r1, r1
    17bc:	2f 93       	push	r18
    17be:	3f 93       	push	r19
    17c0:	4f 93       	push	r20
    17c2:	5f 93       	push	r21
    17c4:	6f 93       	push	r22
    17c6:	7f 93       	push	r23
    17c8:	8f 93       	push	r24
    17ca:	9f 93       	push	r25
    17cc:	af 93       	push	r26
    17ce:	bf 93       	push	r27
    17d0:	ef 93       	push	r30
    17d2:	ff 93       	push	r31
    17d4:	9b dd       	rcall	.-1226   	; 0x130c <__vector_25>
    17d6:	ff 91       	pop	r31
    17d8:	ef 91       	pop	r30
    17da:	bf 91       	pop	r27
    17dc:	af 91       	pop	r26
    17de:	9f 91       	pop	r25
    17e0:	8f 91       	pop	r24
    17e2:	7f 91       	pop	r23
    17e4:	6f 91       	pop	r22
    17e6:	5f 91       	pop	r21
    17e8:	4f 91       	pop	r20
    17ea:	3f 91       	pop	r19
    17ec:	2f 91       	pop	r18
    17ee:	0f 90       	pop	r0
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	0f 90       	pop	r0
    17f4:	1f 90       	pop	r1
    17f6:	18 95       	reti

000017f8 <__vector_2>:
    17f8:	1f 92       	push	r1
    17fa:	0f 92       	push	r0
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	0f 92       	push	r0
    1800:	11 24       	eor	r1, r1
    1802:	2f 93       	push	r18
    1804:	3f 93       	push	r19
    1806:	4f 93       	push	r20
    1808:	5f 93       	push	r21
    180a:	6f 93       	push	r22
    180c:	7f 93       	push	r23
    180e:	8f 93       	push	r24
    1810:	9f 93       	push	r25
    1812:	af 93       	push	r26
    1814:	bf 93       	push	r27
    1816:	ef 93       	push	r30
    1818:	ff 93       	push	r31
    181a:	78 dd       	rcall	.-1296   	; 0x130c <__vector_25>
    181c:	ff 91       	pop	r31
    181e:	ef 91       	pop	r30
    1820:	bf 91       	pop	r27
    1822:	af 91       	pop	r26
    1824:	9f 91       	pop	r25
    1826:	8f 91       	pop	r24
    1828:	7f 91       	pop	r23
    182a:	6f 91       	pop	r22
    182c:	5f 91       	pop	r21
    182e:	4f 91       	pop	r20
    1830:	3f 91       	pop	r19
    1832:	2f 91       	pop	r18
    1834:	0f 90       	pop	r0
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	0f 90       	pop	r0
    183a:	1f 90       	pop	r1
    183c:	18 95       	reti

0000183e <__vector_1>:
    183e:	1f 92       	push	r1
    1840:	0f 92       	push	r0
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	0f 92       	push	r0
    1846:	11 24       	eor	r1, r1
    1848:	2f 93       	push	r18
    184a:	3f 93       	push	r19
    184c:	4f 93       	push	r20
    184e:	5f 93       	push	r21
    1850:	6f 93       	push	r22
    1852:	7f 93       	push	r23
    1854:	8f 93       	push	r24
    1856:	9f 93       	push	r25
    1858:	af 93       	push	r26
    185a:	bf 93       	push	r27
    185c:	ef 93       	push	r30
    185e:	ff 93       	push	r31
    1860:	55 dd       	rcall	.-1366   	; 0x130c <__vector_25>
    1862:	ff 91       	pop	r31
    1864:	ef 91       	pop	r30
    1866:	bf 91       	pop	r27
    1868:	af 91       	pop	r26
    186a:	9f 91       	pop	r25
    186c:	8f 91       	pop	r24
    186e:	7f 91       	pop	r23
    1870:	6f 91       	pop	r22
    1872:	5f 91       	pop	r21
    1874:	4f 91       	pop	r20
    1876:	3f 91       	pop	r19
    1878:	2f 91       	pop	r18
    187a:	0f 90       	pop	r0
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	0f 90       	pop	r0
    1880:	1f 90       	pop	r1
    1882:	18 95       	reti

00001884 <cpu_irq_save>:
}

void lcd_reset(void)
{
	/* Call lcd_init() which resets LCD and boots up again */
	lcd_init();
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	1f 92       	push	r1
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	8f b7       	in	r24, 0x3f	; 63
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	f8 94       	cli
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	0f 90       	pop	r0
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	08 95       	ret

0000189e <__portable_avr_delay_cycles>:
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <__portable_avr_delay_cycles+0xa>
    18a0:	61 50       	subi	r22, 0x01	; 1
    18a2:	71 09       	sbc	r23, r1
    18a4:	81 09       	sbc	r24, r1
    18a6:	91 09       	sbc	r25, r1
    18a8:	61 15       	cp	r22, r1
    18aa:	71 05       	cpc	r23, r1
    18ac:	81 05       	cpc	r24, r1
    18ae:	91 05       	cpc	r25, r1
    18b0:	b9 f7       	brne	.-18     	; 0x18a0 <__portable_avr_delay_cycles+0x2>
    18b2:	08 95       	ret

000018b4 <lcd_bus_read_status>:
    18b4:	e7 df       	rcall	.-50     	; 0x1884 <cpu_irq_save>
    18b6:	98 2f       	mov	r25, r24
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	8b b9       	out	0x0b, r24	; 11
    18bc:	1a b8       	out	0x0a, r1	; 10
    18be:	28 98       	cbi	0x05, 0	; 5
    18c0:	2c 9a       	sbi	0x05, 4	; 5
    18c2:	2d 9a       	sbi	0x05, 5	; 5
    18c4:	2d 98       	cbi	0x05, 5	; 5
    18c6:	89 b1       	in	r24, 0x09	; 9
    18c8:	9f bf       	out	0x3f, r25	; 63
    18ca:	08 95       	ret

000018cc <lcd_bus_write_cmd>:
    18cc:	cf 93       	push	r28
    18ce:	c8 2f       	mov	r28, r24
    18d0:	d9 df       	rcall	.-78     	; 0x1884 <cpu_irq_save>
    18d2:	cb b9       	out	0x0b, r28	; 11
    18d4:	9f ef       	ldi	r25, 0xFF	; 255
    18d6:	9a b9       	out	0x0a, r25	; 10
    18d8:	28 98       	cbi	0x05, 0	; 5
    18da:	2c 98       	cbi	0x05, 4	; 5
    18dc:	2d 9a       	sbi	0x05, 5	; 5
    18de:	2d 98       	cbi	0x05, 5	; 5
    18e0:	8f bf       	out	0x3f, r24	; 63
    18e2:	cf 91       	pop	r28
    18e4:	08 95       	ret

000018e6 <lcd_bus_write_ram>:
    18e6:	cf 93       	push	r28
    18e8:	c8 2f       	mov	r28, r24
    18ea:	cc df       	rcall	.-104    	; 0x1884 <cpu_irq_save>
    18ec:	cb b9       	out	0x0b, r28	; 11
    18ee:	9f ef       	ldi	r25, 0xFF	; 255
    18f0:	9a b9       	out	0x0a, r25	; 10
    18f2:	28 9a       	sbi	0x05, 0	; 5
    18f4:	2c 98       	cbi	0x05, 4	; 5
    18f6:	2d 9a       	sbi	0x05, 5	; 5
    18f8:	2d 98       	cbi	0x05, 5	; 5
    18fa:	8f bf       	out	0x3f, r24	; 63
    18fc:	cf 91       	pop	r28
    18fe:	08 95       	ret

00001900 <lcd_bus_read_ram>:
    1900:	c1 df       	rcall	.-126    	; 0x1884 <cpu_irq_save>
    1902:	98 2f       	mov	r25, r24
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	8b b9       	out	0x0b, r24	; 11
    1908:	1a b8       	out	0x0a, r1	; 10
    190a:	28 9a       	sbi	0x05, 0	; 5
    190c:	2c 9a       	sbi	0x05, 4	; 5
    190e:	2d 9a       	sbi	0x05, 5	; 5
    1910:	2d 98       	cbi	0x05, 5	; 5
    1912:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <s_lcd_ram_read_nonvalid>
    1916:	88 23       	and	r24, r24
    1918:	19 f0       	breq	.+6      	; 0x1920 <lcd_bus_read_ram+0x20>
    191a:	89 b1       	in	r24, 0x09	; 9
    191c:	2d 9a       	sbi	0x05, 5	; 5
    191e:	2d 98       	cbi	0x05, 5	; 5
    1920:	89 b1       	in	r24, 0x09	; 9
    1922:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <s_lcd_ram_read_nonvalid>
    1926:	9f bf       	out	0x3f, r25	; 63
    1928:	08 95       	ret

0000192a <lcd_contrast_update>:
    192a:	81 e8       	ldi	r24, 0x81	; 129
    192c:	cf df       	rcall	.-98     	; 0x18cc <lcd_bus_write_cmd>
    192e:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <g_lcd_contrast_pm>
    1932:	8f 73       	andi	r24, 0x3F	; 63
    1934:	80 68       	ori	r24, 0x80	; 128
    1936:	ca cf       	rjmp	.-108    	; 0x18cc <lcd_bus_write_cmd>

00001938 <lcd_enable.part.0>:
    1938:	8d e2       	ldi	r24, 0x2D	; 45
    193a:	c8 df       	rcall	.-112    	; 0x18cc <lcd_bus_write_cmd>
    193c:	84 e2       	ldi	r24, 0x24	; 36
    193e:	c6 df       	rcall	.-116    	; 0x18cc <lcd_bus_write_cmd>
    1940:	8a ee       	ldi	r24, 0xEA	; 234
    1942:	c4 df       	rcall	.-120    	; 0x18cc <lcd_bus_write_cmd>
    1944:	f2 df       	rcall	.-28     	; 0x192a <lcd_contrast_update>
    1946:	88 ec       	ldi	r24, 0xC8	; 200
    1948:	c1 df       	rcall	.-126    	; 0x18cc <lcd_bus_write_cmd>
    194a:	88 e8       	ldi	r24, 0x88	; 136
    194c:	bf df       	rcall	.-130    	; 0x18cc <lcd_bus_write_cmd>
    194e:	80 e4       	ldi	r24, 0x40	; 64
    1950:	bd df       	rcall	.-134    	; 0x18cc <lcd_bus_write_cmd>
    1952:	80 e9       	ldi	r24, 0x90	; 144
    1954:	bb df       	rcall	.-138    	; 0x18cc <lcd_bus_write_cmd>
    1956:	80 eb       	ldi	r24, 0xB0	; 176
    1958:	b9 df       	rcall	.-142    	; 0x18cc <lcd_bus_write_cmd>
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	b7 df       	rcall	.-146    	; 0x18cc <lcd_bus_write_cmd>
    195e:	80 e1       	ldi	r24, 0x10	; 16
    1960:	b5 df       	rcall	.-150    	; 0x18cc <lcd_bus_write_cmd>
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <s_lcd_ram_read_nonvalid>
    1968:	8f ee       	ldi	r24, 0xEF	; 239
    196a:	b0 df       	rcall	.-160    	; 0x18cc <lcd_bus_write_cmd>
    196c:	8e ee       	ldi	r24, 0xEE	; 238
    196e:	ae df       	rcall	.-164    	; 0x18cc <lcd_bus_write_cmd>
    1970:	84 ea       	ldi	r24, 0xA4	; 164
    1972:	ac df       	rcall	.-168    	; 0x18cc <lcd_bus_write_cmd>
    1974:	86 ea       	ldi	r24, 0xA6	; 166
    1976:	aa df       	rcall	.-172    	; 0x18cc <lcd_bus_write_cmd>
    1978:	8f ea       	ldi	r24, 0xAF	; 175
    197a:	a8 cf       	rjmp	.-176    	; 0x18cc <lcd_bus_write_cmd>

0000197c <lcd_page_set>:
    197c:	80 31       	cpi	r24, 0x10	; 16
    197e:	28 f4       	brcc	.+10     	; 0x198a <lcd_page_set+0xe>
    1980:	80 6b       	ori	r24, 0xB0	; 176
    1982:	a4 df       	rcall	.-184    	; 0x18cc <lcd_bus_write_cmd>
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <s_lcd_ram_read_nonvalid>
    198a:	08 95       	ret

0000198c <lcd_col_set>:
    198c:	cf 93       	push	r28
    198e:	80 3f       	cpi	r24, 0xF0	; 240
    1990:	58 f4       	brcc	.+22     	; 0x19a8 <lcd_col_set+0x1c>
    1992:	c8 2f       	mov	r28, r24
    1994:	8f 70       	andi	r24, 0x0F	; 15
    1996:	9a df       	rcall	.-204    	; 0x18cc <lcd_bus_write_cmd>
    1998:	8c 2f       	mov	r24, r28
    199a:	82 95       	swap	r24
    199c:	8f 70       	andi	r24, 0x0F	; 15
    199e:	80 61       	ori	r24, 0x10	; 16
    19a0:	95 df       	rcall	.-214    	; 0x18cc <lcd_bus_write_cmd>
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <s_lcd_ram_read_nonvalid>
    19a8:	cf 91       	pop	r28
    19aa:	08 95       	ret

000019ac <lcd_cr>:
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	8e df       	rcall	.-228    	; 0x18cc <lcd_bus_write_cmd>
    19b0:	80 e1       	ldi	r24, 0x10	; 16
    19b2:	8c df       	rcall	.-232    	; 0x18cc <lcd_bus_write_cmd>
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <s_lcd_ram_read_nonvalid>
    19ba:	08 95       	ret

000019bc <lcd_home>:
    19bc:	80 eb       	ldi	r24, 0xB0	; 176
    19be:	86 df       	rcall	.-244    	; 0x18cc <lcd_bus_write_cmd>
    19c0:	f5 cf       	rjmp	.-22     	; 0x19ac <lcd_cr>

000019c2 <lcd_cls>:
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	c0 e0       	ldi	r28, 0x00	; 0
    19c8:	8c 2f       	mov	r24, r28
    19ca:	80 6b       	ori	r24, 0xB0	; 176
    19cc:	7f df       	rcall	.-258    	; 0x18cc <lcd_bus_write_cmd>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	7d df       	rcall	.-262    	; 0x18cc <lcd_bus_write_cmd>
    19d2:	80 e1       	ldi	r24, 0x10	; 16
    19d4:	7b df       	rcall	.-266    	; 0x18cc <lcd_bus_write_cmd>
    19d6:	d0 ef       	ldi	r29, 0xF0	; 240
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	85 df       	rcall	.-246    	; 0x18e6 <lcd_bus_write_ram>
    19dc:	d1 50       	subi	r29, 0x01	; 1
    19de:	e1 f7       	brne	.-8      	; 0x19d8 <lcd_cls+0x16>
    19e0:	cf 5f       	subi	r28, 0xFF	; 255
    19e2:	c0 31       	cpi	r28, 0x10	; 16
    19e4:	89 f7       	brne	.-30     	; 0x19c8 <lcd_cls+0x6>
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	e8 cf       	rjmp	.-48     	; 0x19bc <lcd_home>

000019ec <lcd_write>:
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	a1 f0       	breq	.+40     	; 0x1a20 <lcd_write+0x34>
    19f8:	04 2f       	mov	r16, r20
    19fa:	16 2f       	mov	r17, r22
    19fc:	ec 01       	movw	r28, r24
    19fe:	6f ef       	ldi	r22, 0xFF	; 255
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	0e 94 b1 24 	call	0x4962	; 0x4962 <strnlen>
    1a06:	81 50       	subi	r24, 0x01	; 1
    1a08:	8e 3f       	cpi	r24, 0xFE	; 254
    1a0a:	50 f4       	brcc	.+20     	; 0x1a20 <lcd_write+0x34>
    1a0c:	24 e0       	ldi	r18, 0x04	; 4
    1a0e:	31 e0       	ldi	r19, 0x01	; 1
    1a10:	40 2f       	mov	r20, r16
    1a12:	61 2f       	mov	r22, r17
    1a14:	ce 01       	movw	r24, r28
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	1f 91       	pop	r17
    1a1c:	0f 91       	pop	r16
    1a1e:	04 ca       	rjmp	.-3064   	; 0xe28 <gfx_mono_draw_string>
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	08 95       	ret

00001a2a <lcd_show_template>:
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	6b e0       	ldi	r22, 0x0B	; 11
    1a36:	71 e0       	ldi	r23, 0x01	; 1
    1a38:	8e e7       	ldi	r24, 0x7E	; 126
    1a3a:	94 e0       	ldi	r25, 0x04	; 4
    1a3c:	0e 94 aa 24 	call	0x4954	; 0x4954 <strcpy>
    1a40:	24 e0       	ldi	r18, 0x04	; 4
    1a42:	31 e0       	ldi	r19, 0x01	; 1
    1a44:	4b e0       	ldi	r20, 0x0B	; 11
    1a46:	63 e0       	ldi	r22, 0x03	; 3
    1a48:	8e e7       	ldi	r24, 0x7E	; 126
    1a4a:	94 e0       	ldi	r25, 0x04	; 4
    1a4c:	ed d9       	rcall	.-3110   	; 0xe28 <gfx_mono_draw_string>
    1a4e:	68 e1       	ldi	r22, 0x18	; 24
    1a50:	71 e0       	ldi	r23, 0x01	; 1
    1a52:	8e e7       	ldi	r24, 0x7E	; 126
    1a54:	94 e0       	ldi	r25, 0x04	; 4
    1a56:	0e 94 aa 24 	call	0x4954	; 0x4954 <strcpy>
    1a5a:	24 e0       	ldi	r18, 0x04	; 4
    1a5c:	31 e0       	ldi	r19, 0x01	; 1
    1a5e:	44 e1       	ldi	r20, 0x14	; 20
    1a60:	63 e0       	ldi	r22, 0x03	; 3
    1a62:	8e e7       	ldi	r24, 0x7E	; 126
    1a64:	94 e0       	ldi	r25, 0x04	; 4
    1a66:	e0 d9       	rcall	.-3136   	; 0xe28 <gfx_mono_draw_string>
    1a68:	62 e2       	ldi	r22, 0x22	; 34
    1a6a:	71 e0       	ldi	r23, 0x01	; 1
    1a6c:	8e e7       	ldi	r24, 0x7E	; 126
    1a6e:	94 e0       	ldi	r25, 0x04	; 4
    1a70:	0e 94 aa 24 	call	0x4954	; 0x4954 <strcpy>
    1a74:	24 e0       	ldi	r18, 0x04	; 4
    1a76:	31 e0       	ldi	r19, 0x01	; 1
    1a78:	4d e1       	ldi	r20, 0x1D	; 29
    1a7a:	63 e0       	ldi	r22, 0x03	; 3
    1a7c:	8e e7       	ldi	r24, 0x7E	; 126
    1a7e:	94 e0       	ldi	r25, 0x04	; 4
    1a80:	d3 d9       	rcall	.-3162   	; 0xe28 <gfx_mono_draw_string>
    1a82:	1f 92       	push	r1
    1a84:	1f 92       	push	r1
    1a86:	1f 92       	push	r1
    1a88:	1f 92       	push	r1
    1a8a:	89 e3       	ldi	r24, 0x39	; 57
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	9f 93       	push	r25
    1a90:	8f 93       	push	r24
    1a92:	1f 92       	push	r1
    1a94:	10 e3       	ldi	r17, 0x30	; 48
    1a96:	1f 93       	push	r17
    1a98:	ce e7       	ldi	r28, 0x7E	; 126
    1a9a:	d4 e0       	ldi	r29, 0x04	; 4
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1aa4:	24 e0       	ldi	r18, 0x04	; 4
    1aa6:	31 e0       	ldi	r19, 0x01	; 1
    1aa8:	46 e2       	ldi	r20, 0x26	; 38
    1aaa:	63 e0       	ldi	r22, 0x03	; 3
    1aac:	ce 01       	movw	r24, r28
    1aae:	bc d9       	rcall	.-3208   	; 0xe28 <gfx_mono_draw_string>
    1ab0:	1f 92       	push	r1
    1ab2:	1f 92       	push	r1
    1ab4:	1f 92       	push	r1
    1ab6:	1f 92       	push	r1
    1ab8:	1f 92       	push	r1
    1aba:	1f 92       	push	r1
    1abc:	1f 92       	push	r1
    1abe:	1f 92       	push	r1
    1ac0:	81 e5       	ldi	r24, 0x51	; 81
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	9f 93       	push	r25
    1ac6:	8f 93       	push	r24
    1ac8:	1f 92       	push	r1
    1aca:	1f 93       	push	r17
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1ad4:	24 e0       	ldi	r18, 0x04	; 4
    1ad6:	31 e0       	ldi	r19, 0x01	; 1
    1ad8:	4f e2       	ldi	r20, 0x2F	; 47
    1ada:	63 e0       	ldi	r22, 0x03	; 3
    1adc:	ce 01       	movw	r24, r28
    1ade:	a4 d9       	rcall	.-3256   	; 0xe28 <gfx_mono_draw_string>
    1ae0:	1f 92       	push	r1
    1ae2:	1f 92       	push	r1
    1ae4:	1f 92       	push	r1
    1ae6:	1f 92       	push	r1
    1ae8:	84 e7       	ldi	r24, 0x74	; 116
    1aea:	91 e0       	ldi	r25, 0x01	; 1
    1aec:	9f 93       	push	r25
    1aee:	8f 93       	push	r24
    1af0:	1f 92       	push	r1
    1af2:	1f 93       	push	r17
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1afc:	8d b7       	in	r24, 0x3d	; 61
    1afe:	9e b7       	in	r25, 0x3e	; 62
    1b00:	82 96       	adiw	r24, 0x22	; 34
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	9e bf       	out	0x3e, r25	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	8d bf       	out	0x3d, r24	; 61
    1b0c:	24 e0       	ldi	r18, 0x04	; 4
    1b0e:	31 e0       	ldi	r19, 0x01	; 1
    1b10:	48 e3       	ldi	r20, 0x38	; 56
    1b12:	63 e0       	ldi	r22, 0x03	; 3
    1b14:	ce 01       	movw	r24, r28
    1b16:	88 d9       	rcall	.-3312   	; 0xe28 <gfx_mono_draw_string>
    1b18:	1f 92       	push	r1
    1b1a:	1f 92       	push	r1
    1b1c:	1f 92       	push	r1
    1b1e:	1f 92       	push	r1
    1b20:	89 e8       	ldi	r24, 0x89	; 137
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	9f 93       	push	r25
    1b26:	8f 93       	push	r24
    1b28:	1f 92       	push	r1
    1b2a:	1f 93       	push	r17
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1b34:	24 e0       	ldi	r18, 0x04	; 4
    1b36:	31 e0       	ldi	r19, 0x01	; 1
    1b38:	48 e3       	ldi	r20, 0x38	; 56
    1b3a:	6b e7       	ldi	r22, 0x7B	; 123
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	74 d9       	rcall	.-3352   	; 0xe28 <gfx_mono_draw_string>
    1b40:	1f 92       	push	r1
    1b42:	1f 92       	push	r1
    1b44:	1f 92       	push	r1
    1b46:	1f 92       	push	r1
    1b48:	1f 92       	push	r1
    1b4a:	1f 92       	push	r1
    1b4c:	8f e9       	ldi	r24, 0x9F	; 159
    1b4e:	91 e0       	ldi	r25, 0x01	; 1
    1b50:	9f 93       	push	r25
    1b52:	8f 93       	push	r24
    1b54:	1f 92       	push	r1
    1b56:	1f 93       	push	r17
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1b60:	24 e0       	ldi	r18, 0x04	; 4
    1b62:	31 e0       	ldi	r19, 0x01	; 1
    1b64:	41 e4       	ldi	r20, 0x41	; 65
    1b66:	63 e0       	ldi	r22, 0x03	; 3
    1b68:	ce 01       	movw	r24, r28
    1b6a:	5e d9       	rcall	.-3396   	; 0xe28 <gfx_mono_draw_string>
    1b6c:	1f 92       	push	r1
    1b6e:	1f 92       	push	r1
    1b70:	1f 92       	push	r1
    1b72:	1f 92       	push	r1
    1b74:	8c ec       	ldi	r24, 0xCC	; 204
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	9f 93       	push	r25
    1b7a:	8f 93       	push	r24
    1b7c:	1f 92       	push	r1
    1b7e:	1f 93       	push	r17
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1b88:	8d b7       	in	r24, 0x3d	; 61
    1b8a:	9e b7       	in	r25, 0x3e	; 62
    1b8c:	80 96       	adiw	r24, 0x20	; 32
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	9e bf       	out	0x3e, r25	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	8d bf       	out	0x3d, r24	; 61
    1b98:	24 e0       	ldi	r18, 0x04	; 4
    1b9a:	31 e0       	ldi	r19, 0x01	; 1
    1b9c:	4a e4       	ldi	r20, 0x4A	; 74
    1b9e:	63 e0       	ldi	r22, 0x03	; 3
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	42 d9       	rcall	.-3452   	; 0xe28 <gfx_mono_draw_string>
    1ba4:	1f 92       	push	r1
    1ba6:	1f 92       	push	r1
    1ba8:	1f 92       	push	r1
    1baa:	1f 92       	push	r1
    1bac:	80 ee       	ldi	r24, 0xE0	; 224
    1bae:	91 e0       	ldi	r25, 0x01	; 1
    1bb0:	9f 93       	push	r25
    1bb2:	8f 93       	push	r24
    1bb4:	1f 92       	push	r1
    1bb6:	1f 93       	push	r17
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1bc0:	24 e0       	ldi	r18, 0x04	; 4
    1bc2:	31 e0       	ldi	r19, 0x01	; 1
    1bc4:	43 e5       	ldi	r20, 0x53	; 83
    1bc6:	63 e0       	ldi	r22, 0x03	; 3
    1bc8:	ce 01       	movw	r24, r28
    1bca:	2e d9       	rcall	.-3492   	; 0xe28 <gfx_mono_draw_string>
    1bcc:	1f 92       	push	r1
    1bce:	1f 92       	push	r1
    1bd0:	1f 92       	push	r1
    1bd2:	1f 92       	push	r1
    1bd4:	1f 92       	push	r1
    1bd6:	0e e7       	ldi	r16, 0x7E	; 126
    1bd8:	0f 93       	push	r16
    1bda:	1f 92       	push	r1
    1bdc:	1f 92       	push	r1
    1bde:	1f 92       	push	r1
    1be0:	80 e2       	ldi	r24, 0x20	; 32
    1be2:	f8 2e       	mov	r15, r24
    1be4:	ff 92       	push	r15
    1be6:	88 ef       	ldi	r24, 0xF8	; 248
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	9f 93       	push	r25
    1bec:	8f 93       	push	r24
    1bee:	1f 92       	push	r1
    1bf0:	1f 93       	push	r17
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1bfa:	24 e0       	ldi	r18, 0x04	; 4
    1bfc:	31 e0       	ldi	r19, 0x01	; 1
    1bfe:	4c e5       	ldi	r20, 0x5C	; 92
    1c00:	63 e0       	ldi	r22, 0x03	; 3
    1c02:	ce 01       	movw	r24, r28
    1c04:	11 d9       	rcall	.-3550   	; 0xe28 <gfx_mono_draw_string>
    1c06:	1f 92       	push	r1
    1c08:	1f 92       	push	r1
    1c0a:	1f 92       	push	r1
    1c0c:	1f 92       	push	r1
    1c0e:	1f 92       	push	r1
    1c10:	0f 93       	push	r16
    1c12:	1f 92       	push	r1
    1c14:	1f 92       	push	r1
    1c16:	1f 92       	push	r1
    1c18:	ff 92       	push	r15
    1c1a:	87 e1       	ldi	r24, 0x17	; 23
    1c1c:	92 e0       	ldi	r25, 0x02	; 2
    1c1e:	9f 93       	push	r25
    1c20:	8f 93       	push	r24
    1c22:	1f 92       	push	r1
    1c24:	1f 93       	push	r17
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1c2e:	8d b7       	in	r24, 0x3d	; 61
    1c30:	9e b7       	in	r25, 0x3e	; 62
    1c32:	8a 96       	adiw	r24, 0x2a	; 42
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	9e bf       	out	0x3e, r25	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	8d bf       	out	0x3d, r24	; 61
    1c3e:	24 e0       	ldi	r18, 0x04	; 4
    1c40:	31 e0       	ldi	r19, 0x01	; 1
    1c42:	45 e6       	ldi	r20, 0x65	; 101
    1c44:	63 e0       	ldi	r22, 0x03	; 3
    1c46:	ce 01       	movw	r24, r28
    1c48:	ef d8       	rcall	.-3618   	; 0xe28 <gfx_mono_draw_string>
    1c4a:	1f 92       	push	r1
    1c4c:	1f 92       	push	r1
    1c4e:	1f 92       	push	r1
    1c50:	1f 92       	push	r1
    1c52:	85 e3       	ldi	r24, 0x35	; 53
    1c54:	92 e0       	ldi	r25, 0x02	; 2
    1c56:	9f 93       	push	r25
    1c58:	8f 93       	push	r24
    1c5a:	1f 92       	push	r1
    1c5c:	1f 93       	push	r17
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1c66:	24 e0       	ldi	r18, 0x04	; 4
    1c68:	31 e0       	ldi	r19, 0x01	; 1
    1c6a:	4e e6       	ldi	r20, 0x6E	; 110
    1c6c:	63 e0       	ldi	r22, 0x03	; 3
    1c6e:	ce 01       	movw	r24, r28
    1c70:	db d8       	rcall	.-3658   	; 0xe28 <gfx_mono_draw_string>
    1c72:	1f 92       	push	r1
    1c74:	0f 93       	push	r16
    1c76:	1f 92       	push	r1
    1c78:	1f 92       	push	r1
    1c7a:	8b e4       	ldi	r24, 0x4B	; 75
    1c7c:	92 e0       	ldi	r25, 0x02	; 2
    1c7e:	9f 93       	push	r25
    1c80:	8f 93       	push	r24
    1c82:	1f 92       	push	r1
    1c84:	1f 93       	push	r17
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1c8e:	24 e0       	ldi	r18, 0x04	; 4
    1c90:	31 e0       	ldi	r19, 0x01	; 1
    1c92:	4e e6       	ldi	r20, 0x6E	; 110
    1c94:	6f e9       	ldi	r22, 0x9F	; 159
    1c96:	ce 01       	movw	r24, r28
    1c98:	c7 d8       	rcall	.-3698   	; 0xe28 <gfx_mono_draw_string>
    1c9a:	8d b7       	in	r24, 0x3d	; 61
    1c9c:	9e b7       	in	r25, 0x3e	; 62
    1c9e:	44 96       	adiw	r24, 0x14	; 20
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	9e bf       	out	0x3e, r25	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	8d bf       	out	0x3d, r24	; 61
    1caa:	24 e0       	ldi	r18, 0x04	; 4
    1cac:	31 e0       	ldi	r19, 0x01	; 1
    1cae:	47 e7       	ldi	r20, 0x77	; 119
    1cb0:	63 e0       	ldi	r22, 0x03	; 3
    1cb2:	8a e5       	ldi	r24, 0x5A	; 90
    1cb4:	92 e0       	ldi	r25, 0x02	; 2
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	ff 90       	pop	r15
    1cc0:	b3 c8       	rjmp	.-3738   	; 0xe28 <gfx_mono_draw_string>

00001cc2 <lcd_show_new_refosc_data>:
    1cc2:	3f 92       	push	r3
    1cc4:	4f 92       	push	r4
    1cc6:	5f 92       	push	r5
    1cc8:	6f 92       	push	r6
    1cca:	7f 92       	push	r7
    1ccc:	8f 92       	push	r8
    1cce:	9f 92       	push	r9
    1cd0:	af 92       	push	r10
    1cd2:	bf 92       	push	r11
    1cd4:	cf 92       	push	r12
    1cd6:	df 92       	push	r13
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	cf dd       	rcall	.-1122   	; 0x1884 <cpu_irq_save>
    1ce6:	c8 2f       	mov	r28, r24
    1ce8:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <g_showData>
    1cec:	92 ff       	sbrs	r25, 2
    1cee:	2f c0       	rjmp	.+94     	; 0x1d4e <lcd_show_new_refosc_data+0x8c>
    1cf0:	9b 7f       	andi	r25, 0xFB	; 251
    1cf2:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <g_showData>
    1cf6:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <g_showData+0x2f>
    1cfa:	1f 92       	push	r1
    1cfc:	8f 93       	push	r24
    1cfe:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <g_showData+0x2e>
    1d02:	1f 92       	push	r1
    1d04:	8f 93       	push	r24
    1d06:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <g_showData+0x2d>
    1d0a:	1f 92       	push	r1
    1d0c:	8f 93       	push	r24
    1d0e:	84 e6       	ldi	r24, 0x64	; 100
    1d10:	92 e0       	ldi	r25, 0x02	; 2
    1d12:	9f 93       	push	r25
    1d14:	8f 93       	push	r24
    1d16:	1f 92       	push	r1
    1d18:	80 e3       	ldi	r24, 0x30	; 48
    1d1a:	8f 93       	push	r24
    1d1c:	8e e7       	ldi	r24, 0x7E	; 126
    1d1e:	94 e0       	ldi	r25, 0x04	; 4
    1d20:	9f 93       	push	r25
    1d22:	8f 93       	push	r24
    1d24:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1d28:	cf bf       	out	0x3f, r28	; 63
    1d2a:	24 e0       	ldi	r18, 0x04	; 4
    1d2c:	31 e0       	ldi	r19, 0x01	; 1
    1d2e:	4d e1       	ldi	r20, 0x1D	; 29
    1d30:	6f e3       	ldi	r22, 0x3F	; 63
    1d32:	8e e7       	ldi	r24, 0x7E	; 126
    1d34:	94 e0       	ldi	r25, 0x04	; 4
    1d36:	78 d8       	rcall	.-3856   	; 0xe28 <gfx_mono_draw_string>
    1d38:	13 d8       	rcall	.-4058   	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1d3a:	8d b7       	in	r24, 0x3d	; 61
    1d3c:	9e b7       	in	r25, 0x3e	; 62
    1d3e:	0c 96       	adiw	r24, 0x0c	; 12
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	9e bf       	out	0x3e, r25	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	8d bf       	out	0x3d, r24	; 61
    1d4a:	8f ef       	ldi	r24, 0xFF	; 255
    1d4c:	17 c4       	rjmp	.+2094   	; 0x257c <lcd_show_new_refosc_data+0x8ba>
    1d4e:	91 ff       	sbrs	r25, 1
    1d50:	32 c0       	rjmp	.+100    	; 0x1db6 <lcd_show_new_refosc_data+0xf4>
    1d52:	9d 7f       	andi	r25, 0xFD	; 253
    1d54:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <g_showData>
    1d58:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <g_showData+0x1b>
    1d5c:	8f 93       	push	r24
    1d5e:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_showData+0x1a>
    1d62:	8f 93       	push	r24
    1d64:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <g_showData+0x2b>
    1d68:	1f 92       	push	r1
    1d6a:	8f 93       	push	r24
    1d6c:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <g_showData+0x2c>
    1d70:	1f 92       	push	r1
    1d72:	8f 93       	push	r24
    1d74:	83 e7       	ldi	r24, 0x73	; 115
    1d76:	92 e0       	ldi	r25, 0x02	; 2
    1d78:	9f 93       	push	r25
    1d7a:	8f 93       	push	r24
    1d7c:	1f 92       	push	r1
    1d7e:	80 e3       	ldi	r24, 0x30	; 48
    1d80:	8f 93       	push	r24
    1d82:	8e e7       	ldi	r24, 0x7E	; 126
    1d84:	94 e0       	ldi	r25, 0x04	; 4
    1d86:	9f 93       	push	r25
    1d88:	8f 93       	push	r24
    1d8a:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1d8e:	cf bf       	out	0x3f, r28	; 63
    1d90:	24 e0       	ldi	r18, 0x04	; 4
    1d92:	31 e0       	ldi	r19, 0x01	; 1
    1d94:	44 e1       	ldi	r20, 0x14	; 20
    1d96:	6f e3       	ldi	r22, 0x3F	; 63
    1d98:	8e e7       	ldi	r24, 0x7E	; 126
    1d9a:	94 e0       	ldi	r25, 0x04	; 4
    1d9c:	45 d8       	rcall	.-3958   	; 0xe28 <gfx_mono_draw_string>
    1d9e:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1da2:	8d b7       	in	r24, 0x3d	; 61
    1da4:	9e b7       	in	r25, 0x3e	; 62
    1da6:	0c 96       	adiw	r24, 0x0c	; 12
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	9e bf       	out	0x3e, r25	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	8d bf       	out	0x3d, r24	; 61
    1db2:	8e ef       	ldi	r24, 0xFE	; 254
    1db4:	e3 c3       	rjmp	.+1990   	; 0x257c <lcd_show_new_refosc_data+0x8ba>
    1db6:	89 2f       	mov	r24, r25
    1db8:	81 70       	andi	r24, 0x01	; 1
    1dba:	90 ff       	sbrs	r25, 0
    1dbc:	57 c1       	rjmp	.+686    	; 0x206c <lcd_show_new_refosc_data+0x3aa>
    1dbe:	9e 7f       	andi	r25, 0xFE	; 254
    1dc0:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <g_showData>
    1dc4:	cf bf       	out	0x3f, r28	; 63
    1dc6:	c0 91 d1 04 	lds	r28, 0x04D1	; 0x8004d1 <g_showData+0x18>
    1dca:	d0 91 d2 04 	lds	r29, 0x04D2	; 0x8004d2 <g_showData+0x19>
    1dce:	a0 90 cf 04 	lds	r10, 0x04CF	; 0x8004cf <g_showData+0x16>
    1dd2:	b0 90 d0 04 	lds	r11, 0x04D0	; 0x8004d0 <g_showData+0x17>
    1dd6:	90 90 e3 04 	lds	r9, 0x04E3	; 0x8004e3 <g_showData+0x2a>
    1dda:	c1 35       	cpi	r28, 0x51	; 81
    1ddc:	96 e4       	ldi	r25, 0x46	; 70
    1dde:	d9 07       	cpc	r29, r25
    1de0:	9c f4       	brge	.+38     	; 0x1e08 <lcd_show_new_refosc_data+0x146>
    1de2:	c0 3b       	cpi	r28, 0xB0	; 176
    1de4:	89 eb       	ldi	r24, 0xB9	; 185
    1de6:	d8 07       	cpc	r29, r24
    1de8:	2c f0       	brlt	.+10     	; 0x1df4 <lcd_show_new_refosc_data+0x132>
    1dea:	c5 39       	cpi	r28, 0x95	; 149
    1dec:	91 e1       	ldi	r25, 0x11	; 17
    1dee:	d9 07       	cpc	r29, r25
    1df0:	1c f0       	brlt	.+6      	; 0x1df8 <lcd_show_new_refosc_data+0x136>
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <lcd_show_new_refosc_data+0x150>
    1df4:	c0 eb       	ldi	r28, 0xB0	; 176
    1df6:	d9 eb       	ldi	r29, 0xB9	; 185
    1df8:	be 01       	movw	r22, r28
    1dfa:	cc 36       	cpi	r28, 0x6C	; 108
    1dfc:	8e ee       	ldi	r24, 0xEE	; 238
    1dfe:	d8 07       	cpc	r29, r24
    1e00:	54 f4       	brge	.+20     	; 0x1e16 <lcd_show_new_refosc_data+0x154>
    1e02:	6c e6       	ldi	r22, 0x6C	; 108
    1e04:	7e ee       	ldi	r23, 0xEE	; 238
    1e06:	07 c0       	rjmp	.+14     	; 0x1e16 <lcd_show_new_refosc_data+0x154>
    1e08:	c0 e5       	ldi	r28, 0x50	; 80
    1e0a:	d6 e4       	ldi	r29, 0x46	; 70
    1e0c:	60 e5       	ldi	r22, 0x50	; 80
    1e0e:	76 e4       	ldi	r23, 0x46	; 70
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <lcd_show_new_refosc_data+0x154>
    1e12:	60 e5       	ldi	r22, 0x50	; 80
    1e14:	76 e4       	ldi	r23, 0x46	; 70
    1e16:	07 2e       	mov	r0, r23
    1e18:	00 0c       	add	r0, r0
    1e1a:	88 0b       	sbc	r24, r24
    1e1c:	99 0b       	sbc	r25, r25
    1e1e:	0e 94 cc 22 	call	0x4598	; 0x4598 <__floatsisf>
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 ea       	ldi	r19, 0xA0	; 160
    1e26:	4c e8       	ldi	r20, 0x8C	; 140
    1e28:	55 e4       	ldi	r21, 0x45	; 69
    1e2a:	0e 94 31 22 	call	0x4462	; 0x4462 <__divsf3>
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	48 e9       	ldi	r20, 0x98	; 152
    1e34:	52 e4       	ldi	r21, 0x42	; 66
    1e36:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__mulsf3>
    1e3a:	0e 94 99 22 	call	0x4532	; 0x4532 <__fixsfsi>
    1e3e:	2b 01       	movw	r4, r22
    1e40:	3c 01       	movw	r6, r24
    1e42:	7b 01       	movw	r14, r22
    1e44:	77 ff       	sbrs	r23, 7
    1e46:	08 c0       	rjmp	.+16     	; 0x1e58 <lcd_show_new_refosc_data+0x196>
    1e48:	36 e9       	ldi	r19, 0x96	; 150
    1e4a:	83 2e       	mov	r8, r19
    1e4c:	86 0e       	add	r8, r22
    1e4e:	cc 24       	eor	r12, r12
    1e50:	dd 24       	eor	r13, r13
    1e52:	c6 1a       	sub	r12, r22
    1e54:	d7 0a       	sbc	r13, r23
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <lcd_show_new_refosc_data+0x19c>
    1e58:	6b 01       	movw	r12, r22
    1e5a:	26 e9       	ldi	r18, 0x96	; 150
    1e5c:	82 2e       	mov	r8, r18
    1e5e:	1f 92       	push	r1
    1e60:	9f 92       	push	r9
    1e62:	82 e8       	ldi	r24, 0x82	; 130
    1e64:	92 e0       	ldi	r25, 0x02	; 2
    1e66:	9f 93       	push	r25
    1e68:	8f 93       	push	r24
    1e6a:	1f 92       	push	r1
    1e6c:	90 e3       	ldi	r25, 0x30	; 48
    1e6e:	39 2e       	mov	r3, r25
    1e70:	3f 92       	push	r3
    1e72:	0e e7       	ldi	r16, 0x7E	; 126
    1e74:	14 e0       	ldi	r17, 0x04	; 4
    1e76:	1f 93       	push	r17
    1e78:	0f 93       	push	r16
    1e7a:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1e7e:	24 e0       	ldi	r18, 0x04	; 4
    1e80:	31 e0       	ldi	r19, 0x01	; 1
    1e82:	4b e0       	ldi	r20, 0x0B	; 11
    1e84:	6b e4       	ldi	r22, 0x4B	; 75
    1e86:	c8 01       	movw	r24, r16
    1e88:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    1e8c:	c5 01       	movw	r24, r10
    1e8e:	68 ee       	ldi	r22, 0xE8	; 232
    1e90:	73 e0       	ldi	r23, 0x03	; 3
    1e92:	0e 94 42 24 	call	0x4884	; 0x4884 <__udivmodhi4>
    1e96:	9f 93       	push	r25
    1e98:	8f 93       	push	r24
    1e9a:	7f 93       	push	r23
    1e9c:	6f 93       	push	r22
    1e9e:	86 e8       	ldi	r24, 0x86	; 134
    1ea0:	92 e0       	ldi	r25, 0x02	; 2
    1ea2:	9f 93       	push	r25
    1ea4:	8f 93       	push	r24
    1ea6:	1f 92       	push	r1
    1ea8:	3f 92       	push	r3
    1eaa:	1f 93       	push	r17
    1eac:	0f 93       	push	r16
    1eae:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1eb2:	24 e0       	ldi	r18, 0x04	; 4
    1eb4:	31 e0       	ldi	r19, 0x01	; 1
    1eb6:	48 e3       	ldi	r20, 0x38	; 56
    1eb8:	6d eb       	ldi	r22, 0xBD	; 189
    1eba:	c8 01       	movw	r24, r16
    1ebc:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	64 e6       	ldi	r22, 0x64	; 100
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    1eca:	7f 93       	push	r23
    1ecc:	6f 93       	push	r22
    1ece:	8f e8       	ldi	r24, 0x8F	; 143
    1ed0:	92 e0       	ldi	r25, 0x02	; 2
    1ed2:	9f 93       	push	r25
    1ed4:	8f 93       	push	r24
    1ed6:	1f 92       	push	r1
    1ed8:	3f 92       	push	r3
    1eda:	1f 93       	push	r17
    1edc:	0f 93       	push	r16
    1ede:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    1ee2:	24 e0       	ldi	r18, 0x04	; 4
    1ee4:	31 e0       	ldi	r19, 0x01	; 1
    1ee6:	4e e6       	ldi	r20, 0x6E	; 110
    1ee8:	69 ec       	ldi	r22, 0xC9	; 201
    1eea:	c8 01       	movw	r24, r16
    1eec:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    1ef0:	8d b7       	in	r24, 0x3d	; 61
    1ef2:	9e b7       	in	r25, 0x3e	; 62
    1ef4:	4a 96       	adiw	r24, 0x1a	; 26
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	9e bf       	out	0x3e, r25	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	8d bf       	out	0x3d, r24	; 61
    1f00:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <clk_state_old.3394>
    1f04:	98 12       	cpse	r9, r24
    1f06:	22 c0       	rjmp	.+68     	; 0x1f4c <lcd_show_new_refosc_data+0x28a>
    1f08:	c1 14       	cp	r12, r1
    1f0a:	d1 04       	cpc	r13, r1
    1f0c:	f9 f0       	breq	.+62     	; 0x1f4c <lcd_show_new_refosc_data+0x28a>
    1f0e:	44 2d       	mov	r20, r4
    1f10:	1e 14       	cp	r1, r14
    1f12:	1f 04       	cpc	r1, r15
    1f14:	0c f4       	brge	.+2      	; 0x1f18 <lcd_show_new_refosc_data+0x256>
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	d4 2d       	mov	r29, r4
    1f1a:	f7 fc       	sbrc	r15, 7
    1f1c:	d0 e0       	ldi	r29, 0x00	; 0
    1f1e:	97 e0       	ldi	r25, 0x07	; 7
    1f20:	99 16       	cp	r9, r25
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <lcd_show_new_refosc_data+0x264>
    1f24:	62 c0       	rjmp	.+196    	; 0x1fea <lcd_show_new_refosc_data+0x328>
    1f26:	99 15       	cp	r25, r9
    1f28:	68 f0       	brcs	.+26     	; 0x1f44 <lcd_show_new_refosc_data+0x282>
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
    1f2c:	89 0d       	add	r24, r9
    1f2e:	83 30       	cpi	r24, 0x03	; 3
    1f30:	08 f0       	brcs	.+2      	; 0x1f34 <lcd_show_new_refosc_data+0x272>
    1f32:	96 c0       	rjmp	.+300    	; 0x2060 <lcd_show_new_refosc_data+0x39e>
    1f34:	01 e0       	ldi	r16, 0x01	; 1
    1f36:	21 e0       	ldi	r18, 0x01	; 1
    1f38:	48 e9       	ldi	r20, 0x98	; 152
    1f3a:	6a e7       	ldi	r22, 0x7A	; 122
    1f3c:	8a e4       	ldi	r24, 0x4A	; 74
    1f3e:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    1f42:	8e c0       	rjmp	.+284    	; 0x2060 <lcd_show_new_refosc_data+0x39e>
    1f44:	8f e0       	ldi	r24, 0x0F	; 15
    1f46:	98 16       	cp	r9, r24
    1f48:	99 f0       	breq	.+38     	; 0x1f70 <lcd_show_new_refosc_data+0x2ae>
    1f4a:	8a c0       	rjmp	.+276    	; 0x2060 <lcd_show_new_refosc_data+0x39e>
    1f4c:	00 e0       	ldi	r16, 0x00	; 0
    1f4e:	25 e0       	ldi	r18, 0x05	; 5
    1f50:	40 ea       	ldi	r20, 0xA0	; 160
    1f52:	68 e7       	ldi	r22, 0x78	; 120
    1f54:	86 e4       	ldi	r24, 0x46	; 70
    1f56:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    1f5a:	c1 14       	cp	r12, r1
    1f5c:	d1 04       	cpc	r13, r1
    1f5e:	b9 f6       	brne	.-82     	; 0x1f0e <lcd_show_new_refosc_data+0x24c>
    1f60:	01 e0       	ldi	r16, 0x01	; 1
    1f62:	2c e7       	ldi	r18, 0x7C	; 124
    1f64:	46 e9       	ldi	r20, 0x96	; 150
    1f66:	68 e7       	ldi	r22, 0x78	; 120
    1f68:	86 e9       	ldi	r24, 0x96	; 150
    1f6a:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    1f6e:	78 c0       	rjmp	.+240    	; 0x2060 <lcd_show_new_refosc_data+0x39e>
    1f70:	40 5b       	subi	r20, 0xB0	; 176
    1f72:	00 e0       	ldi	r16, 0x00	; 0
    1f74:	25 e0       	ldi	r18, 0x05	; 5
    1f76:	68 e7       	ldi	r22, 0x78	; 120
    1f78:	86 e4       	ldi	r24, 0x46	; 70
    1f7a:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    1f7e:	f7 fe       	sbrs	r15, 7
    1f80:	0f c0       	rjmp	.+30     	; 0x1fa0 <lcd_show_new_refosc_data+0x2de>
    1f82:	01 e0       	ldi	r16, 0x01	; 1
    1f84:	28 e7       	ldi	r18, 0x78	; 120
    1f86:	48 2d       	mov	r20, r8
    1f88:	6a e7       	ldi	r22, 0x7A	; 122
    1f8a:	cc ef       	ldi	r28, 0xFC	; 252
    1f8c:	c8 0d       	add	r28, r8
    1f8e:	8c 2f       	mov	r24, r28
    1f90:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    1f94:	2c e7       	ldi	r18, 0x7C	; 124
    1f96:	48 2d       	mov	r20, r8
    1f98:	6a e7       	ldi	r22, 0x7A	; 122
    1f9a:	8c 2f       	mov	r24, r28
    1f9c:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    1fa0:	01 e0       	ldi	r16, 0x01	; 1
    1fa2:	25 e0       	ldi	r18, 0x05	; 5
    1fa4:	4c 2d       	mov	r20, r12
    1fa6:	68 e7       	ldi	r22, 0x78	; 120
    1fa8:	88 2d       	mov	r24, r8
    1faa:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    1fae:	40 e5       	ldi	r20, 0x50	; 80
    1fb0:	4d 1b       	sub	r20, r29
    1fb2:	00 e0       	ldi	r16, 0x00	; 0
    1fb4:	25 e0       	ldi	r18, 0x05	; 5
    1fb6:	68 e7       	ldi	r22, 0x78	; 120
    1fb8:	86 e9       	ldi	r24, 0x96	; 150
    1fba:	8d 0f       	add	r24, r29
    1fbc:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    1fc0:	1e 14       	cp	r1, r14
    1fc2:	1f 04       	cpc	r1, r15
    1fc4:	0c f0       	brlt	.+2      	; 0x1fc8 <lcd_show_new_refosc_data+0x306>
    1fc6:	4c c0       	rjmp	.+152    	; 0x2060 <lcd_show_new_refosc_data+0x39e>
    1fc8:	c5 e9       	ldi	r28, 0x95	; 149
    1fca:	cd 0f       	add	r28, r29
    1fcc:	d7 56       	subi	r29, 0x67	; 103
    1fce:	01 e0       	ldi	r16, 0x01	; 1
    1fd0:	28 e7       	ldi	r18, 0x78	; 120
    1fd2:	4c 2f       	mov	r20, r28
    1fd4:	6a e7       	ldi	r22, 0x7A	; 122
    1fd6:	8d 2f       	mov	r24, r29
    1fd8:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    1fdc:	2c e7       	ldi	r18, 0x7C	; 124
    1fde:	4c 2f       	mov	r20, r28
    1fe0:	6a e7       	ldi	r22, 0x7A	; 122
    1fe2:	8d 2f       	mov	r24, r29
    1fe4:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    1fe8:	3b c0       	rjmp	.+118    	; 0x2060 <lcd_show_new_refosc_data+0x39e>
    1fea:	40 5b       	subi	r20, 0xB0	; 176
    1fec:	00 e0       	ldi	r16, 0x00	; 0
    1fee:	23 e0       	ldi	r18, 0x03	; 3
    1ff0:	69 e7       	ldi	r22, 0x79	; 121
    1ff2:	86 e4       	ldi	r24, 0x46	; 70
    1ff4:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    1ff8:	f7 fe       	sbrs	r15, 7
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <lcd_show_new_refosc_data+0x358>
    1ffc:	01 e0       	ldi	r16, 0x01	; 1
    1ffe:	29 e7       	ldi	r18, 0x79	; 121
    2000:	48 2d       	mov	r20, r8
    2002:	6a e7       	ldi	r22, 0x7A	; 122
    2004:	cc ef       	ldi	r28, 0xFC	; 252
    2006:	c8 0d       	add	r28, r8
    2008:	8c 2f       	mov	r24, r28
    200a:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    200e:	2b e7       	ldi	r18, 0x7B	; 123
    2010:	48 2d       	mov	r20, r8
    2012:	6a e7       	ldi	r22, 0x7A	; 122
    2014:	8c 2f       	mov	r24, r28
    2016:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    201a:	01 e0       	ldi	r16, 0x01	; 1
    201c:	23 e0       	ldi	r18, 0x03	; 3
    201e:	4c 2d       	mov	r20, r12
    2020:	69 e7       	ldi	r22, 0x79	; 121
    2022:	88 2d       	mov	r24, r8
    2024:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2028:	40 e5       	ldi	r20, 0x50	; 80
    202a:	4d 1b       	sub	r20, r29
    202c:	00 e0       	ldi	r16, 0x00	; 0
    202e:	23 e0       	ldi	r18, 0x03	; 3
    2030:	69 e7       	ldi	r22, 0x79	; 121
    2032:	86 e9       	ldi	r24, 0x96	; 150
    2034:	8d 0f       	add	r24, r29
    2036:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    203a:	1e 14       	cp	r1, r14
    203c:	1f 04       	cpc	r1, r15
    203e:	84 f4       	brge	.+32     	; 0x2060 <lcd_show_new_refosc_data+0x39e>
    2040:	c5 e9       	ldi	r28, 0x95	; 149
    2042:	cd 0f       	add	r28, r29
    2044:	d7 56       	subi	r29, 0x67	; 103
    2046:	01 e0       	ldi	r16, 0x01	; 1
    2048:	29 e7       	ldi	r18, 0x79	; 121
    204a:	4c 2f       	mov	r20, r28
    204c:	6a e7       	ldi	r22, 0x7A	; 122
    204e:	8d 2f       	mov	r24, r29
    2050:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2054:	2b e7       	ldi	r18, 0x7B	; 123
    2056:	4c 2f       	mov	r20, r28
    2058:	6a e7       	ldi	r22, 0x7A	; 122
    205a:	8d 2f       	mov	r24, r29
    205c:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2060:	90 92 cf 03 	sts	0x03CF, r9	; 0x8003cf <clk_state_old.3394>
    2064:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2068:	8d ef       	ldi	r24, 0xFD	; 253
    206a:	88 c2       	rjmp	.+1296   	; 0x257c <lcd_show_new_refosc_data+0x8ba>
    206c:	96 ff       	sbrs	r25, 6
    206e:	38 c0       	rjmp	.+112    	; 0x20e0 <lcd_show_new_refosc_data+0x41e>
    2070:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3438>
    2074:	22 30       	cpi	r18, 0x02	; 2
    2076:	a0 f5       	brcc	.+104    	; 0x20e0 <lcd_show_new_refosc_data+0x41e>
    2078:	9f 7b       	andi	r25, 0xBF	; 191
    207a:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <g_showData>
    207e:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <g_showData+0x35>
    2082:	1f 92       	push	r1
    2084:	8f 93       	push	r24
    2086:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <g_showData+0x34>
    208a:	1f 92       	push	r1
    208c:	8f 93       	push	r24
    208e:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <g_showData+0x33>
    2092:	1f 92       	push	r1
    2094:	8f 93       	push	r24
    2096:	85 e9       	ldi	r24, 0x95	; 149
    2098:	92 e0       	ldi	r25, 0x02	; 2
    209a:	9f 93       	push	r25
    209c:	8f 93       	push	r24
    209e:	1f 92       	push	r1
    20a0:	80 e3       	ldi	r24, 0x30	; 48
    20a2:	8f 93       	push	r24
    20a4:	8e e7       	ldi	r24, 0x7E	; 126
    20a6:	94 e0       	ldi	r25, 0x04	; 4
    20a8:	9f 93       	push	r25
    20aa:	8f 93       	push	r24
    20ac:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    20b0:	cf bf       	out	0x3f, r28	; 63
    20b2:	24 e0       	ldi	r18, 0x04	; 4
    20b4:	31 e0       	ldi	r19, 0x01	; 1
    20b6:	41 e4       	ldi	r20, 0x41	; 65
    20b8:	6d e5       	ldi	r22, 0x5D	; 93
    20ba:	8e e7       	ldi	r24, 0x7E	; 126
    20bc:	94 e0       	ldi	r25, 0x04	; 4
    20be:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    20c2:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3438>
    20cc:	8d b7       	in	r24, 0x3d	; 61
    20ce:	9e b7       	in	r25, 0x3e	; 62
    20d0:	0c 96       	adiw	r24, 0x0c	; 12
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	9e bf       	out	0x3e, r25	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	8d bf       	out	0x3d, r24	; 61
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	4e c2       	rjmp	.+1180   	; 0x257c <lcd_show_new_refosc_data+0x8ba>
    20e0:	97 ff       	sbrs	r25, 7
    20e2:	49 c0       	rjmp	.+146    	; 0x2176 <lcd_show_new_refosc_data+0x4b4>
    20e4:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3438>
    20e8:	23 30       	cpi	r18, 0x03	; 3
    20ea:	08 f0       	brcs	.+2      	; 0x20ee <lcd_show_new_refosc_data+0x42c>
    20ec:	44 c0       	rjmp	.+136    	; 0x2176 <lcd_show_new_refosc_data+0x4b4>
    20ee:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <g_showData>
    20f2:	8f 77       	andi	r24, 0x7F	; 127
    20f4:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <g_showData>
    20f8:	20 91 db 04 	lds	r18, 0x04DB	; 0x8004db <g_showData+0x22>
    20fc:	30 91 dc 04 	lds	r19, 0x04DC	; 0x8004dc <g_showData+0x23>
    2100:	c9 01       	movw	r24, r18
    2102:	64 e6       	ldi	r22, 0x64	; 100
    2104:	70 e0       	ldi	r23, 0x00	; 0
    2106:	0e 94 42 24 	call	0x4884	; 0x4884 <__udivmodhi4>
    210a:	9f 93       	push	r25
    210c:	8f 93       	push	r24
    210e:	b9 01       	movw	r22, r18
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 ca 22 	call	0x4594	; 0x4594 <__floatunsisf>
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	48 ec       	ldi	r20, 0xC8	; 200
    211e:	52 e4       	ldi	r21, 0x42	; 66
    2120:	0e 94 31 22 	call	0x4462	; 0x4462 <__divsf3>
    2124:	0e 94 99 22 	call	0x4532	; 0x4532 <__fixsfsi>
    2128:	7f 93       	push	r23
    212a:	6f 93       	push	r22
    212c:	86 ed       	ldi	r24, 0xD6	; 214
    212e:	91 e0       	ldi	r25, 0x01	; 1
    2130:	9f 93       	push	r25
    2132:	8f 93       	push	r24
    2134:	1f 92       	push	r1
    2136:	80 e3       	ldi	r24, 0x30	; 48
    2138:	8f 93       	push	r24
    213a:	8e e7       	ldi	r24, 0x7E	; 126
    213c:	94 e0       	ldi	r25, 0x04	; 4
    213e:	9f 93       	push	r25
    2140:	8f 93       	push	r24
    2142:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    2146:	cf bf       	out	0x3f, r28	; 63
    2148:	24 e0       	ldi	r18, 0x04	; 4
    214a:	31 e0       	ldi	r19, 0x01	; 1
    214c:	4a e4       	ldi	r20, 0x4A	; 74
    214e:	6f e3       	ldi	r22, 0x3F	; 63
    2150:	8e e7       	ldi	r24, 0x7E	; 126
    2152:	94 e0       	ldi	r25, 0x04	; 4
    2154:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2158:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    215c:	83 e0       	ldi	r24, 0x03	; 3
    215e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3438>
    2162:	8d b7       	in	r24, 0x3d	; 61
    2164:	9e b7       	in	r25, 0x3e	; 62
    2166:	0a 96       	adiw	r24, 0x0a	; 10
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	9e bf       	out	0x3e, r25	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	8d bf       	out	0x3d, r24	; 61
    2172:	82 e0       	ldi	r24, 0x02	; 2
    2174:	03 c2       	rjmp	.+1030   	; 0x257c <lcd_show_new_refosc_data+0x8ba>
    2176:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <g_showData+0x1>
    217a:	20 ff       	sbrs	r18, 0
    217c:	34 c0       	rjmp	.+104    	; 0x21e6 <lcd_show_new_refosc_data+0x524>
    217e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3438>
    2182:	34 30       	cpi	r19, 0x04	; 4
    2184:	80 f5       	brcc	.+96     	; 0x21e6 <lcd_show_new_refosc_data+0x524>
    2186:	2e 7f       	andi	r18, 0xFE	; 254
    2188:	20 93 ba 04 	sts	0x04BA, r18	; 0x8004ba <g_showData+0x1>
    218c:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <g_showData+0x37>
    2190:	1f 92       	push	r1
    2192:	8f 93       	push	r24
    2194:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <g_showData+0x36>
    2198:	1f 92       	push	r1
    219a:	8f 93       	push	r24
    219c:	8d ee       	ldi	r24, 0xED	; 237
    219e:	91 e0       	ldi	r25, 0x01	; 1
    21a0:	9f 93       	push	r25
    21a2:	8f 93       	push	r24
    21a4:	1f 92       	push	r1
    21a6:	80 e3       	ldi	r24, 0x30	; 48
    21a8:	8f 93       	push	r24
    21aa:	8e e7       	ldi	r24, 0x7E	; 126
    21ac:	94 e0       	ldi	r25, 0x04	; 4
    21ae:	9f 93       	push	r25
    21b0:	8f 93       	push	r24
    21b2:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    21b6:	cf bf       	out	0x3f, r28	; 63
    21b8:	24 e0       	ldi	r18, 0x04	; 4
    21ba:	31 e0       	ldi	r19, 0x01	; 1
    21bc:	43 e5       	ldi	r20, 0x53	; 83
    21be:	61 e5       	ldi	r22, 0x51	; 81
    21c0:	8e e7       	ldi	r24, 0x7E	; 126
    21c2:	94 e0       	ldi	r25, 0x04	; 4
    21c4:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    21c8:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    21cc:	84 e0       	ldi	r24, 0x04	; 4
    21ce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3438>
    21d2:	8d b7       	in	r24, 0x3d	; 61
    21d4:	9e b7       	in	r25, 0x3e	; 62
    21d6:	0a 96       	adiw	r24, 0x0a	; 10
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	9e bf       	out	0x3e, r25	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	8d bf       	out	0x3d, r24	; 61
    21e2:	83 e0       	ldi	r24, 0x03	; 3
    21e4:	cb c1       	rjmp	.+918    	; 0x257c <lcd_show_new_refosc_data+0x8ba>
    21e6:	21 ff       	sbrs	r18, 1
    21e8:	44 c0       	rjmp	.+136    	; 0x2272 <lcd_show_new_refosc_data+0x5b0>
    21ea:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3438>
    21ee:	35 30       	cpi	r19, 0x05	; 5
    21f0:	08 f0       	brcs	.+2      	; 0x21f4 <lcd_show_new_refosc_data+0x532>
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <lcd_show_new_refosc_data+0x5b0>
    21f4:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <g_showData+0x1>
    21f8:	8d 7f       	andi	r24, 0xFD	; 253
    21fa:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <g_showData+0x1>
    21fe:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <g_showData+0x25>
    2202:	8f 93       	push	r24
    2204:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <g_showData+0x24>
    2208:	8f 93       	push	r24
    220a:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <g_showData+0x3a>
    220e:	1f 92       	push	r1
    2210:	8f 93       	push	r24
    2212:	1f 92       	push	r1
    2214:	8e e7       	ldi	r24, 0x7E	; 126
    2216:	8f 93       	push	r24
    2218:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <g_showData+0x39>
    221c:	1f 92       	push	r1
    221e:	8f 93       	push	r24
    2220:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <g_showData+0x38>
    2224:	1f 92       	push	r1
    2226:	8f 93       	push	r24
    2228:	8e ea       	ldi	r24, 0xAE	; 174
    222a:	92 e0       	ldi	r25, 0x02	; 2
    222c:	9f 93       	push	r25
    222e:	8f 93       	push	r24
    2230:	1f 92       	push	r1
    2232:	80 e3       	ldi	r24, 0x30	; 48
    2234:	8f 93       	push	r24
    2236:	8e e7       	ldi	r24, 0x7E	; 126
    2238:	94 e0       	ldi	r25, 0x04	; 4
    223a:	9f 93       	push	r25
    223c:	8f 93       	push	r24
    223e:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    2242:	cf bf       	out	0x3f, r28	; 63
    2244:	24 e0       	ldi	r18, 0x04	; 4
    2246:	31 e0       	ldi	r19, 0x01	; 1
    2248:	4c e5       	ldi	r20, 0x5C	; 92
    224a:	6f e3       	ldi	r22, 0x3F	; 63
    224c:	8e e7       	ldi	r24, 0x7E	; 126
    224e:	94 e0       	ldi	r25, 0x04	; 4
    2250:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2254:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2258:	85 e0       	ldi	r24, 0x05	; 5
    225a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3438>
    225e:	8d b7       	in	r24, 0x3d	; 61
    2260:	9e b7       	in	r25, 0x3e	; 62
    2262:	40 96       	adiw	r24, 0x10	; 16
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	9e bf       	out	0x3e, r25	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	8d bf       	out	0x3d, r24	; 61
    226e:	84 e0       	ldi	r24, 0x04	; 4
    2270:	85 c1       	rjmp	.+778    	; 0x257c <lcd_show_new_refosc_data+0x8ba>
    2272:	22 ff       	sbrs	r18, 2
    2274:	44 c0       	rjmp	.+136    	; 0x22fe <lcd_show_new_refosc_data+0x63c>
    2276:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3438>
    227a:	36 30       	cpi	r19, 0x06	; 6
    227c:	08 f0       	brcs	.+2      	; 0x2280 <lcd_show_new_refosc_data+0x5be>
    227e:	3f c0       	rjmp	.+126    	; 0x22fe <lcd_show_new_refosc_data+0x63c>
    2280:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <g_showData+0x1>
    2284:	8b 7f       	andi	r24, 0xFB	; 251
    2286:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <g_showData+0x1>
    228a:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <g_showData+0x27>
    228e:	8f 93       	push	r24
    2290:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <g_showData+0x26>
    2294:	8f 93       	push	r24
    2296:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <g_showData+0x3d>
    229a:	1f 92       	push	r1
    229c:	8f 93       	push	r24
    229e:	1f 92       	push	r1
    22a0:	8e e7       	ldi	r24, 0x7E	; 126
    22a2:	8f 93       	push	r24
    22a4:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <g_showData+0x3c>
    22a8:	1f 92       	push	r1
    22aa:	8f 93       	push	r24
    22ac:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <g_showData+0x3b>
    22b0:	1f 92       	push	r1
    22b2:	8f 93       	push	r24
    22b4:	82 ec       	ldi	r24, 0xC2	; 194
    22b6:	92 e0       	ldi	r25, 0x02	; 2
    22b8:	9f 93       	push	r25
    22ba:	8f 93       	push	r24
    22bc:	1f 92       	push	r1
    22be:	80 e3       	ldi	r24, 0x30	; 48
    22c0:	8f 93       	push	r24
    22c2:	8e e7       	ldi	r24, 0x7E	; 126
    22c4:	94 e0       	ldi	r25, 0x04	; 4
    22c6:	9f 93       	push	r25
    22c8:	8f 93       	push	r24
    22ca:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    22ce:	cf bf       	out	0x3f, r28	; 63
    22d0:	24 e0       	ldi	r18, 0x04	; 4
    22d2:	31 e0       	ldi	r19, 0x01	; 1
    22d4:	45 e6       	ldi	r20, 0x65	; 101
    22d6:	6f e3       	ldi	r22, 0x3F	; 63
    22d8:	8e e7       	ldi	r24, 0x7E	; 126
    22da:	94 e0       	ldi	r25, 0x04	; 4
    22dc:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    22e0:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    22e4:	86 e0       	ldi	r24, 0x06	; 6
    22e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3438>
    22ea:	8d b7       	in	r24, 0x3d	; 61
    22ec:	9e b7       	in	r25, 0x3e	; 62
    22ee:	40 96       	adiw	r24, 0x10	; 16
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	9e bf       	out	0x3e, r25	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	8d bf       	out	0x3d, r24	; 61
    22fa:	85 e0       	ldi	r24, 0x05	; 5
    22fc:	3f c1       	rjmp	.+638    	; 0x257c <lcd_show_new_refosc_data+0x8ba>
    22fe:	23 ff       	sbrs	r18, 3
    2300:	38 c0       	rjmp	.+112    	; 0x2372 <lcd_show_new_refosc_data+0x6b0>
    2302:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3438>
    2306:	27 30       	cpi	r18, 0x07	; 7
    2308:	a0 f5       	brcc	.+104    	; 0x2372 <lcd_show_new_refosc_data+0x6b0>
    230a:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <g_showData+0x1>
    230e:	87 7f       	andi	r24, 0xF7	; 247
    2310:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <g_showData+0x1>
    2314:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <g_showData+0x3e>
    2318:	1f 92       	push	r1
    231a:	8f 93       	push	r24
    231c:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <g_showData+0x29>
    2320:	8f 93       	push	r24
    2322:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <g_showData+0x28>
    2326:	8f 93       	push	r24
    2328:	85 ed       	ldi	r24, 0xD5	; 213
    232a:	92 e0       	ldi	r25, 0x02	; 2
    232c:	9f 93       	push	r25
    232e:	8f 93       	push	r24
    2330:	1f 92       	push	r1
    2332:	80 e3       	ldi	r24, 0x30	; 48
    2334:	8f 93       	push	r24
    2336:	8e e7       	ldi	r24, 0x7E	; 126
    2338:	94 e0       	ldi	r25, 0x04	; 4
    233a:	9f 93       	push	r25
    233c:	8f 93       	push	r24
    233e:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    2342:	cf bf       	out	0x3f, r28	; 63
    2344:	24 e0       	ldi	r18, 0x04	; 4
    2346:	31 e0       	ldi	r19, 0x01	; 1
    2348:	4e e6       	ldi	r20, 0x6E	; 110
    234a:	6f e3       	ldi	r22, 0x3F	; 63
    234c:	8e e7       	ldi	r24, 0x7E	; 126
    234e:	94 e0       	ldi	r25, 0x04	; 4
    2350:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2354:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2358:	87 e0       	ldi	r24, 0x07	; 7
    235a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3438>
    235e:	8d b7       	in	r24, 0x3d	; 61
    2360:	9e b7       	in	r25, 0x3e	; 62
    2362:	0a 96       	adiw	r24, 0x0a	; 10
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	9e bf       	out	0x3e, r25	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	8d bf       	out	0x3d, r24	; 61
    236e:	86 e0       	ldi	r24, 0x06	; 6
    2370:	05 c1       	rjmp	.+522    	; 0x257c <lcd_show_new_refosc_data+0x8ba>
    2372:	93 ff       	sbrs	r25, 3
    2374:	3a c0       	rjmp	.+116    	; 0x23ea <lcd_show_new_refosc_data+0x728>
    2376:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3438>
    237a:	28 30       	cpi	r18, 0x08	; 8
    237c:	b0 f5       	brcc	.+108    	; 0x23ea <lcd_show_new_refosc_data+0x728>
    237e:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <g_showData>
    2382:	87 7f       	andi	r24, 0xF7	; 247
    2384:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <g_showData>
    2388:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <g_showData+0x1f>
    238c:	8f 93       	push	r24
    238e:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <g_showData+0x1e>
    2392:	8f 93       	push	r24
    2394:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <g_showData+0x1d>
    2398:	8f 93       	push	r24
    239a:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_showData+0x1c>
    239e:	8f 93       	push	r24
    23a0:	8e ed       	ldi	r24, 0xDE	; 222
    23a2:	92 e0       	ldi	r25, 0x02	; 2
    23a4:	9f 93       	push	r25
    23a6:	8f 93       	push	r24
    23a8:	1f 92       	push	r1
    23aa:	80 e3       	ldi	r24, 0x30	; 48
    23ac:	8f 93       	push	r24
    23ae:	8e e7       	ldi	r24, 0x7E	; 126
    23b0:	94 e0       	ldi	r25, 0x04	; 4
    23b2:	9f 93       	push	r25
    23b4:	8f 93       	push	r24
    23b6:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    23ba:	cf bf       	out	0x3f, r28	; 63
    23bc:	24 e0       	ldi	r18, 0x04	; 4
    23be:	31 e0       	ldi	r19, 0x01	; 1
    23c0:	46 e2       	ldi	r20, 0x26	; 38
    23c2:	6f e3       	ldi	r22, 0x3F	; 63
    23c4:	8e e7       	ldi	r24, 0x7E	; 126
    23c6:	94 e0       	ldi	r25, 0x04	; 4
    23c8:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    23cc:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    23d0:	88 e0       	ldi	r24, 0x08	; 8
    23d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3438>
    23d6:	8d b7       	in	r24, 0x3d	; 61
    23d8:	9e b7       	in	r25, 0x3e	; 62
    23da:	0a 96       	adiw	r24, 0x0a	; 10
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	9e bf       	out	0x3e, r25	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	8d bf       	out	0x3d, r24	; 61
    23e6:	87 e0       	ldi	r24, 0x07	; 7
    23e8:	c9 c0       	rjmp	.+402    	; 0x257c <lcd_show_new_refosc_data+0x8ba>
    23ea:	94 ff       	sbrs	r25, 4
    23ec:	89 c0       	rjmp	.+274    	; 0x2500 <lcd_show_new_refosc_data+0x83e>
    23ee:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3438>
    23f2:	29 30       	cpi	r18, 0x09	; 9
    23f4:	08 f0       	brcs	.+2      	; 0x23f8 <lcd_show_new_refosc_data+0x736>
    23f6:	84 c0       	rjmp	.+264    	; 0x2500 <lcd_show_new_refosc_data+0x83e>
    23f8:	f0 90 e9 04 	lds	r15, 0x04E9	; 0x8004e9 <g_showData+0x30>
    23fc:	60 91 ea 04 	lds	r22, 0x04EA	; 0x8004ea <g_showData+0x31>
    2400:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <g_showData>
    2404:	8f 7e       	andi	r24, 0xEF	; 239
    2406:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <g_showData>
    240a:	cf bf       	out	0x3f, r28	; 63
    240c:	70 e0       	ldi	r23, 0x00	; 0
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 94 cc 22 	call	0x4598	; 0x4598 <__floatsisf>
    2416:	2b 01       	movw	r4, r22
    2418:	3c 01       	movw	r6, r24
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	4a e7       	ldi	r20, 0x7A	; 122
    2420:	50 e4       	ldi	r21, 0x40	; 64
    2422:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__mulsf3>
    2426:	0e 94 99 22 	call	0x4532	; 0x4532 <__fixsfsi>
    242a:	7f 93       	push	r23
    242c:	6f 93       	push	r22
    242e:	1f 92       	push	r1
    2430:	ff 92       	push	r15
    2432:	08 ee       	ldi	r16, 0xE8	; 232
    2434:	12 e0       	ldi	r17, 0x02	; 2
    2436:	1f 93       	push	r17
    2438:	0f 93       	push	r16
    243a:	1f 92       	push	r1
    243c:	80 e3       	ldi	r24, 0x30	; 48
    243e:	b8 2e       	mov	r11, r24
    2440:	bf 92       	push	r11
    2442:	ce e7       	ldi	r28, 0x7E	; 126
    2444:	d4 e0       	ldi	r29, 0x04	; 4
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    244e:	24 e0       	ldi	r18, 0x04	; 4
    2450:	31 e0       	ldi	r19, 0x01	; 1
    2452:	4f e2       	ldi	r20, 0x2F	; 47
    2454:	6f e3       	ldi	r22, 0x3F	; 63
    2456:	ce 01       	movw	r24, r28
    2458:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    245c:	6f 2d       	mov	r22, r15
    245e:	70 e0       	ldi	r23, 0x00	; 0
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0e 94 ca 22 	call	0x4594	; 0x4594 <__floatunsisf>
    2468:	6b 01       	movw	r12, r22
    246a:	7c 01       	movw	r14, r24
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e8       	ldi	r20, 0x80	; 128
    2472:	5b e3       	ldi	r21, 0x3B	; 59
    2474:	c3 01       	movw	r24, r6
    2476:	b2 01       	movw	r22, r4
    2478:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__mulsf3>
    247c:	a7 01       	movw	r20, r14
    247e:	96 01       	movw	r18, r12
    2480:	0e 94 c9 21 	call	0x4392	; 0x4392 <__addsf3>
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	48 ec       	ldi	r20, 0xC8	; 200
    248a:	5e e3       	ldi	r21, 0x3E	; 62
    248c:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__mulsf3>
    2490:	6b 01       	movw	r12, r22
    2492:	7c 01       	movw	r14, r24
    2494:	0e 94 07 23 	call	0x460e	; 0x460e <floor>
    2498:	9b 01       	movw	r18, r22
    249a:	ac 01       	movw	r20, r24
    249c:	c7 01       	movw	r24, r14
    249e:	b6 01       	movw	r22, r12
    24a0:	0e 94 c8 21 	call	0x4390	; 0x4390 <__subsf3>
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	4a e7       	ldi	r20, 0x7A	; 122
    24aa:	54 e4       	ldi	r21, 0x44	; 68
    24ac:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__mulsf3>
    24b0:	0e 94 99 22 	call	0x4532	; 0x4532 <__fixsfsi>
    24b4:	7f 93       	push	r23
    24b6:	6f 93       	push	r22
    24b8:	c7 01       	movw	r24, r14
    24ba:	b6 01       	movw	r22, r12
    24bc:	0e 94 99 22 	call	0x4532	; 0x4532 <__fixsfsi>
    24c0:	7f 93       	push	r23
    24c2:	6f 93       	push	r22
    24c4:	1f 93       	push	r17
    24c6:	0f 93       	push	r16
    24c8:	1f 92       	push	r1
    24ca:	bf 92       	push	r11
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    24d4:	24 e0       	ldi	r18, 0x04	; 4
    24d6:	31 e0       	ldi	r19, 0x01	; 1
    24d8:	4f e2       	ldi	r20, 0x2F	; 47
    24da:	6d e8       	ldi	r22, 0x8D	; 141
    24dc:	ce 01       	movw	r24, r28
    24de:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    24e2:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    24e6:	89 e0       	ldi	r24, 0x09	; 9
    24e8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3438>
    24ec:	8d b7       	in	r24, 0x3d	; 61
    24ee:	9e b7       	in	r25, 0x3e	; 62
    24f0:	44 96       	adiw	r24, 0x14	; 20
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	9e bf       	out	0x3e, r25	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	8d bf       	out	0x3d, r24	; 61
    24fc:	88 e0       	ldi	r24, 0x08	; 8
    24fe:	3e c0       	rjmp	.+124    	; 0x257c <lcd_show_new_refosc_data+0x8ba>
    2500:	95 ff       	sbrs	r25, 5
    2502:	38 c0       	rjmp	.+112    	; 0x2574 <lcd_show_new_refosc_data+0x8b2>
    2504:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <idx.3438>
    2508:	9a 30       	cpi	r25, 0x0A	; 10
    250a:	a0 f5       	brcc	.+104    	; 0x2574 <lcd_show_new_refosc_data+0x8b2>
    250c:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <g_showData>
    2510:	8f 7d       	andi	r24, 0xDF	; 223
    2512:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <g_showData>
    2516:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <g_showData+0x21>
    251a:	8f 93       	push	r24
    251c:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <g_showData+0x20>
    2520:	8f 93       	push	r24
    2522:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <g_showData+0x32>
    2526:	1f 92       	push	r1
    2528:	8f 93       	push	r24
    252a:	86 e8       	ldi	r24, 0x86	; 134
    252c:	92 e0       	ldi	r25, 0x02	; 2
    252e:	9f 93       	push	r25
    2530:	8f 93       	push	r24
    2532:	1f 92       	push	r1
    2534:	80 e3       	ldi	r24, 0x30	; 48
    2536:	8f 93       	push	r24
    2538:	8e e7       	ldi	r24, 0x7E	; 126
    253a:	94 e0       	ldi	r25, 0x04	; 4
    253c:	9f 93       	push	r25
    253e:	8f 93       	push	r24
    2540:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    2544:	cf bf       	out	0x3f, r28	; 63
    2546:	24 e0       	ldi	r18, 0x04	; 4
    2548:	31 e0       	ldi	r19, 0x01	; 1
    254a:	48 e3       	ldi	r20, 0x38	; 56
    254c:	6f e3       	ldi	r22, 0x3F	; 63
    254e:	8e e7       	ldi	r24, 0x7E	; 126
    2550:	94 e0       	ldi	r25, 0x04	; 4
    2552:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2556:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    255a:	8a e0       	ldi	r24, 0x0A	; 10
    255c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3438>
    2560:	8d b7       	in	r24, 0x3d	; 61
    2562:	9e b7       	in	r25, 0x3e	; 62
    2564:	0a 96       	adiw	r24, 0x0a	; 10
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	9e bf       	out	0x3e, r25	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	8d bf       	out	0x3d, r24	; 61
    2570:	89 e0       	ldi	r24, 0x09	; 9
    2572:	04 c0       	rjmp	.+8      	; 0x257c <lcd_show_new_refosc_data+0x8ba>
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <idx.3438>
    257a:	cf bf       	out	0x3f, r28	; 63
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	1f 91       	pop	r17
    2582:	0f 91       	pop	r16
    2584:	ff 90       	pop	r15
    2586:	ef 90       	pop	r14
    2588:	df 90       	pop	r13
    258a:	cf 90       	pop	r12
    258c:	bf 90       	pop	r11
    258e:	af 90       	pop	r10
    2590:	9f 90       	pop	r9
    2592:	8f 90       	pop	r8
    2594:	7f 90       	pop	r7
    2596:	6f 90       	pop	r6
    2598:	5f 90       	pop	r5
    259a:	4f 90       	pop	r4
    259c:	3f 90       	pop	r3
    259e:	08 95       	ret

000025a0 <lcd_animation_prepare>:
    25a0:	ef 92       	push	r14
    25a2:	ff 92       	push	r15
    25a4:	0f 93       	push	r16
    25a6:	1f 93       	push	r17
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	83 ec       	ldi	r24, 0xC3	; 195
    25ae:	9f ef       	ldi	r25, 0xFF	; 255
    25b0:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <s_animation_train_origin+0x1>
    25b4:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <s_animation_train_origin>
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <s_animation_dx>
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	8b e0       	ldi	r24, 0x0B	; 11
    25c4:	e8 2e       	mov	r14, r24
    25c6:	f1 2c       	mov	r15, r1
    25c8:	c0 e4       	ldi	r28, 0x40	; 64
    25ca:	48 ef       	ldi	r20, 0xF8	; 248
    25cc:	d8 ec       	ldi	r29, 0xC8	; 200
    25ce:	18 ed       	ldi	r17, 0xD8	; 216
    25d0:	0f ed       	ldi	r16, 0xDF	; 223
    25d2:	21 15       	cp	r18, r1
    25d4:	31 05       	cpc	r19, r1
    25d6:	19 f4       	brne	.+6      	; 0x25de <lcd_animation_prepare+0x3e>
    25d8:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <s_animation_train_left>
    25dc:	43 c0       	rjmp	.+134    	; 0x2664 <lcd_animation_prepare+0xc4>
    25de:	23 30       	cpi	r18, 0x03	; 3
    25e0:	31 05       	cpc	r19, r1
    25e2:	5c f4       	brge	.+22     	; 0x25fa <lcd_animation_prepare+0x5a>
    25e4:	f9 01       	movw	r30, r18
    25e6:	e3 5f       	subi	r30, 0xF3	; 243
    25e8:	fb 4f       	sbci	r31, 0xFB	; 251
    25ea:	40 83       	st	Z, r20
    25ec:	2f 5f       	subi	r18, 0xFF	; 255
    25ee:	3f 4f       	sbci	r19, 0xFF	; 255
    25f0:	f9 01       	movw	r30, r18
    25f2:	e3 5f       	subi	r30, 0xF3	; 243
    25f4:	fb 4f       	sbci	r31, 0xFB	; 251
    25f6:	10 83       	st	Z, r17
    25f8:	35 c0       	rjmp	.+106    	; 0x2664 <lcd_animation_prepare+0xc4>
    25fa:	25 30       	cpi	r18, 0x05	; 5
    25fc:	31 05       	cpc	r19, r1
    25fe:	2c f4       	brge	.+10     	; 0x260a <lcd_animation_prepare+0x6a>
    2600:	f9 01       	movw	r30, r18
    2602:	e3 5f       	subi	r30, 0xF3	; 243
    2604:	fb 4f       	sbci	r31, 0xFB	; 251
    2606:	00 83       	st	Z, r16
    2608:	2d c0       	rjmp	.+90     	; 0x2664 <lcd_animation_prepare+0xc4>
    260a:	2b 30       	cpi	r18, 0x0B	; 11
    260c:	31 05       	cpc	r19, r1
    260e:	2c f4       	brge	.+10     	; 0x261a <lcd_animation_prepare+0x7a>
    2610:	f9 01       	movw	r30, r18
    2612:	e3 5f       	subi	r30, 0xF3	; 243
    2614:	fb 4f       	sbci	r31, 0xFB	; 251
    2616:	10 83       	st	Z, r17
    2618:	25 c0       	rjmp	.+74     	; 0x2664 <lcd_animation_prepare+0xc4>
    261a:	20 31       	cpi	r18, 0x10	; 16
    261c:	31 05       	cpc	r19, r1
    261e:	e4 f0       	brlt	.+56     	; 0x2658 <lcd_animation_prepare+0xb8>
    2620:	2c 33       	cpi	r18, 0x3C	; 60
    2622:	31 05       	cpc	r19, r1
    2624:	19 f4       	brne	.+6      	; 0x262c <lcd_animation_prepare+0x8c>
    2626:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <s_animation_train_left+0x3c>
    262a:	1c c0       	rjmp	.+56     	; 0x2664 <lcd_animation_prepare+0xc4>
    262c:	c9 01       	movw	r24, r18
    262e:	40 97       	sbiw	r24, 0x10	; 16
    2630:	b7 01       	movw	r22, r14
    2632:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    2636:	f9 01       	movw	r30, r18
    2638:	e3 5f       	subi	r30, 0xF3	; 243
    263a:	fb 4f       	sbci	r31, 0xFB	; 251
    263c:	89 2b       	or	r24, r25
    263e:	89 f4       	brne	.+34     	; 0x2662 <lcd_animation_prepare+0xc2>
    2640:	c0 83       	st	Z, r28
    2642:	c1 83       	std	Z+1, r28	; 0x01
    2644:	c2 83       	std	Z+2, r28	; 0x02
    2646:	43 83       	std	Z+3, r20	; 0x03
    2648:	44 83       	std	Z+4, r20	; 0x04
    264a:	d5 83       	std	Z+5, r29	; 0x05
    264c:	46 83       	std	Z+6, r20	; 0x06
    264e:	47 83       	std	Z+7, r20	; 0x07
    2650:	d0 87       	std	Z+8, r29	; 0x08
    2652:	41 87       	std	Z+9, r20	; 0x09
    2654:	26 5f       	subi	r18, 0xF6	; 246
    2656:	3f 4f       	sbci	r19, 0xFF	; 255
    2658:	f9 01       	movw	r30, r18
    265a:	e3 5f       	subi	r30, 0xF3	; 243
    265c:	fb 4f       	sbci	r31, 0xFB	; 251
    265e:	40 83       	st	Z, r20
    2660:	01 c0       	rjmp	.+2      	; 0x2664 <lcd_animation_prepare+0xc4>
    2662:	10 82       	st	Z, r1
    2664:	2f 5f       	subi	r18, 0xFF	; 255
    2666:	3f 4f       	sbci	r19, 0xFF	; 255
    2668:	2d 33       	cpi	r18, 0x3D	; 61
    266a:	31 05       	cpc	r19, r1
    266c:	0c f4       	brge	.+2      	; 0x2670 <lcd_animation_prepare+0xd0>
    266e:	b1 cf       	rjmp	.-158    	; 0x25d2 <lcd_animation_prepare+0x32>
    2670:	ad e0       	ldi	r26, 0x0D	; 13
    2672:	b4 e0       	ldi	r27, 0x04	; 4
    2674:	ed e0       	ldi	r30, 0x0D	; 13
    2676:	f4 e0       	ldi	r31, 0x04	; 4
    2678:	8d 91       	ld	r24, X+
    267a:	82 93       	st	-Z, r24
    267c:	83 e0       	ldi	r24, 0x03	; 3
    267e:	e0 3d       	cpi	r30, 0xD0	; 208
    2680:	f8 07       	cpc	r31, r24
    2682:	d1 f7       	brne	.-12     	; 0x2678 <lcd_animation_prepare+0xd8>
    2684:	00 e0       	ldi	r16, 0x00	; 0
    2686:	28 e0       	ldi	r18, 0x08	; 8
    2688:	40 ef       	ldi	r20, 0xF0	; 240
    268a:	68 e7       	ldi	r22, 0x78	; 120
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	1f 91       	pop	r17
    2698:	0f 91       	pop	r16
    269a:	ff 90       	pop	r15
    269c:	ef 90       	pop	r14
    269e:	08 95       	ret

000026a0 <lcd_animation_loop>:
    26a0:	2f 92       	push	r2
    26a2:	3f 92       	push	r3
    26a4:	4f 92       	push	r4
    26a6:	5f 92       	push	r5
    26a8:	6f 92       	push	r6
    26aa:	7f 92       	push	r7
    26ac:	8f 92       	push	r8
    26ae:	9f 92       	push	r9
    26b0:	af 92       	push	r10
    26b2:	bf 92       	push	r11
    26b4:	cf 92       	push	r12
    26b6:	df 92       	push	r13
    26b8:	ef 92       	push	r14
    26ba:	ff 92       	push	r15
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <lcd_animation_loop+0x26>
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <lcd_animation_loop+0x28>
    26c8:	1f 92       	push	r1
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	da d8       	rcall	.-3660   	; 0x1884 <cpu_irq_save>
    26d0:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_status>
    26d4:	91 70       	andi	r25, 0x01	; 1
    26d6:	8f bf       	out	0x3f, r24	; 63
    26d8:	10 e3       	ldi	r17, 0x30	; 48
    26da:	2e e7       	ldi	r18, 0x7E	; 126
    26dc:	e2 2e       	mov	r14, r18
    26de:	24 e0       	ldi	r18, 0x04	; 4
    26e0:	f2 2e       	mov	r15, r18
    26e2:	34 e6       	ldi	r19, 0x64	; 100
    26e4:	23 2e       	mov	r2, r19
    26e6:	31 2c       	mov	r3, r1
    26e8:	41 ef       	ldi	r20, 0xF1	; 241
    26ea:	c4 2e       	mov	r12, r20
    26ec:	42 e0       	ldi	r20, 0x02	; 2
    26ee:	d4 2e       	mov	r13, r20
    26f0:	99 23       	and	r25, r25
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <lcd_animation_loop+0x56>
    26f4:	25 c2       	rjmp	.+1098   	; 0x2b40 <lcd_animation_loop+0x4a0>
    26f6:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <s_animation_dx>
    26fa:	88 23       	and	r24, r24
    26fc:	09 f4       	brne	.+2      	; 0x2700 <lcd_animation_loop+0x60>
    26fe:	20 c2       	rjmp	.+1088   	; 0x2b40 <lcd_animation_loop+0x4a0>
    2700:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <get_abs_time>
    2704:	2b 01       	movw	r4, r22
    2706:	3c 01       	movw	r6, r24
    2708:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <s_animation_time_last_train>
    270c:	30 91 4b 04 	lds	r19, 0x044B	; 0x80044b <s_animation_time_last_train+0x1>
    2710:	40 91 4c 04 	lds	r20, 0x044C	; 0x80044c <s_animation_time_last_train+0x2>
    2714:	50 91 4d 04 	lds	r21, 0x044D	; 0x80044d <s_animation_time_last_train+0x3>
    2718:	0e 94 c8 21 	call	0x4390	; 0x4390 <__subsf3>
    271c:	2a e0       	ldi	r18, 0x0A	; 10
    271e:	37 ed       	ldi	r19, 0xD7	; 215
    2720:	43 e2       	ldi	r20, 0x23	; 35
    2722:	5d e3       	ldi	r21, 0x3D	; 61
    2724:	0e 94 cf 23 	call	0x479e	; 0x479e <__gesf2>
    2728:	87 fd       	sbrc	r24, 7
    272a:	61 c0       	rjmp	.+194    	; 0x27ee <lcd_animation_loop+0x14e>
    272c:	40 92 4a 04 	sts	0x044A, r4	; 0x80044a <s_animation_time_last_train>
    2730:	50 92 4b 04 	sts	0x044B, r5	; 0x80044b <s_animation_time_last_train+0x1>
    2734:	60 92 4c 04 	sts	0x044C, r6	; 0x80044c <s_animation_time_last_train+0x2>
    2738:	70 92 4d 04 	sts	0x044D, r7	; 0x80044d <s_animation_time_last_train+0x3>
    273c:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <s_animation_dx>
    2740:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <s_animation_train_origin>
    2744:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <s_animation_train_origin+0x1>
    2748:	82 0f       	add	r24, r18
    274a:	91 1d       	adc	r25, r1
    274c:	27 fd       	sbrc	r18, 7
    274e:	9a 95       	dec	r25
    2750:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <s_animation_train_origin+0x1>
    2754:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <s_animation_train_origin>
    2758:	8a 3b       	cpi	r24, 0xBA	; 186
    275a:	2f ef       	ldi	r18, 0xFF	; 255
    275c:	92 07       	cpc	r25, r18
    275e:	24 f4       	brge	.+8      	; 0x2768 <lcd_animation_loop+0xc8>
    2760:	e1 e0       	ldi	r30, 0x01	; 1
    2762:	e0 93 52 04 	sts	0x0452, r30	; 0x800452 <s_animation_dx>
    2766:	06 c0       	rjmp	.+12     	; 0x2774 <lcd_animation_loop+0xd4>
    2768:	8a 3f       	cpi	r24, 0xFA	; 250
    276a:	91 05       	cpc	r25, r1
    276c:	1c f0       	brlt	.+6      	; 0x2774 <lcd_animation_loop+0xd4>
    276e:	ff ef       	ldi	r31, 0xFF	; 255
    2770:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <s_animation_dx>
    2774:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <s_animation_dx>
    2778:	27 ff       	sbrs	r18, 7
    277a:	1d c0       	rjmp	.+58     	; 0x27b6 <lcd_animation_loop+0x116>
    277c:	80 3f       	cpi	r24, 0xF0	; 240
    277e:	91 05       	cpc	r25, r1
    2780:	40 f4       	brcc	.+16     	; 0x2792 <lcd_animation_loop+0xf2>
    2782:	2d e3       	ldi	r18, 0x3D	; 61
    2784:	48 2f       	mov	r20, r24
    2786:	6f e0       	ldi	r22, 0x0F	; 15
    2788:	8d e0       	ldi	r24, 0x0D	; 13
    278a:	94 e0       	ldi	r25, 0x04	; 4
    278c:	0e 94 0a 06 	call	0xc14	; 0xc14 <gfx_mono_lcd_uc1608_put_page>
    2790:	2e c0       	rjmp	.+92     	; 0x27ee <lcd_animation_loop+0x14e>
    2792:	9c 01       	movw	r18, r24
    2794:	24 5c       	subi	r18, 0xC4	; 196
    2796:	3f 4f       	sbci	r19, 0xFF	; 255
    2798:	2c 33       	cpi	r18, 0x3C	; 60
    279a:	31 05       	cpc	r19, r1
    279c:	40 f5       	brcc	.+80     	; 0x27ee <lcd_animation_loop+0x14e>
    279e:	2d e3       	ldi	r18, 0x3D	; 61
    27a0:	28 0f       	add	r18, r24
    27a2:	40 e0       	ldi	r20, 0x00	; 0
    27a4:	6f e0       	ldi	r22, 0x0F	; 15
    27a6:	ed e0       	ldi	r30, 0x0D	; 13
    27a8:	f4 e0       	ldi	r31, 0x04	; 4
    27aa:	e8 1b       	sub	r30, r24
    27ac:	f9 0b       	sbc	r31, r25
    27ae:	cf 01       	movw	r24, r30
    27b0:	0e 94 0a 06 	call	0xc14	; 0xc14 <gfx_mono_lcd_uc1608_put_page>
    27b4:	1c c0       	rjmp	.+56     	; 0x27ee <lcd_animation_loop+0x14e>
    27b6:	80 3f       	cpi	r24, 0xF0	; 240
    27b8:	91 05       	cpc	r25, r1
    27ba:	40 f4       	brcc	.+16     	; 0x27cc <lcd_animation_loop+0x12c>
    27bc:	2d e3       	ldi	r18, 0x3D	; 61
    27be:	48 2f       	mov	r20, r24
    27c0:	6f e0       	ldi	r22, 0x0F	; 15
    27c2:	80 ed       	ldi	r24, 0xD0	; 208
    27c4:	93 e0       	ldi	r25, 0x03	; 3
    27c6:	0e 94 0a 06 	call	0xc14	; 0xc14 <gfx_mono_lcd_uc1608_put_page>
    27ca:	11 c0       	rjmp	.+34     	; 0x27ee <lcd_animation_loop+0x14e>
    27cc:	9c 01       	movw	r18, r24
    27ce:	24 5c       	subi	r18, 0xC4	; 196
    27d0:	3f 4f       	sbci	r19, 0xFF	; 255
    27d2:	2c 33       	cpi	r18, 0x3C	; 60
    27d4:	31 05       	cpc	r19, r1
    27d6:	58 f4       	brcc	.+22     	; 0x27ee <lcd_animation_loop+0x14e>
    27d8:	2d e3       	ldi	r18, 0x3D	; 61
    27da:	28 0f       	add	r18, r24
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	6f e0       	ldi	r22, 0x0F	; 15
    27e0:	e0 ed       	ldi	r30, 0xD0	; 208
    27e2:	f3 e0       	ldi	r31, 0x03	; 3
    27e4:	e8 1b       	sub	r30, r24
    27e6:	f9 0b       	sbc	r31, r25
    27e8:	cf 01       	movw	r24, r30
    27ea:	0e 94 0a 06 	call	0xc14	; 0xc14 <gfx_mono_lcd_uc1608_put_page>
    27ee:	c3 01       	movw	r24, r6
    27f0:	b2 01       	movw	r22, r4
    27f2:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <task>
    27f6:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <s_animation_time_last_temp>
    27fa:	30 91 4f 04 	lds	r19, 0x044F	; 0x80044f <s_animation_time_last_temp+0x1>
    27fe:	40 91 50 04 	lds	r20, 0x0450	; 0x800450 <s_animation_time_last_temp+0x2>
    2802:	50 91 51 04 	lds	r21, 0x0451	; 0x800451 <s_animation_time_last_temp+0x3>
    2806:	c3 01       	movw	r24, r6
    2808:	b2 01       	movw	r22, r4
    280a:	0e 94 c8 21 	call	0x4390	; 0x4390 <__subsf3>
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e0       	ldi	r20, 0x00	; 0
    2814:	5f e3       	ldi	r21, 0x3F	; 63
    2816:	0e 94 cf 23 	call	0x479e	; 0x479e <__gesf2>
    281a:	87 fd       	sbrc	r24, 7
    281c:	51 c1       	rjmp	.+674    	; 0x2ac0 <lcd_animation_loop+0x420>
    281e:	40 92 4e 04 	sts	0x044E, r4	; 0x80044e <s_animation_time_last_temp>
    2822:	50 92 4f 04 	sts	0x044F, r5	; 0x80044f <s_animation_time_last_temp+0x1>
    2826:	60 92 50 04 	sts	0x0450, r6	; 0x800450 <s_animation_time_last_temp+0x2>
    282a:	70 92 51 04 	sts	0x0451, r7	; 0x800451 <s_animation_time_last_temp+0x3>
    282e:	2a d8       	rcall	.-4012   	; 0x1884 <cpu_irq_save>
    2830:	40 90 02 05 	lds	r4, 0x0502	; 0x800502 <g_temp>
    2834:	50 90 03 05 	lds	r5, 0x0503	; 0x800503 <g_temp+0x1>
    2838:	60 90 04 05 	lds	r6, 0x0504	; 0x800504 <g_temp+0x2>
    283c:	70 90 05 05 	lds	r7, 0x0505	; 0x800505 <g_temp+0x3>
    2840:	8f bf       	out	0x3f, r24	; 63
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	a9 01       	movw	r20, r18
    2848:	c3 01       	movw	r24, r6
    284a:	b2 01       	movw	r22, r4
    284c:	0e 94 2d 22 	call	0x445a	; 0x445a <__cmpsf2>
    2850:	87 ff       	sbrs	r24, 7
    2852:	03 c0       	rjmp	.+6      	; 0x285a <lcd_animation_loop+0x1ba>
    2854:	41 2c       	mov	r4, r1
    2856:	51 2c       	mov	r5, r1
    2858:	32 01       	movw	r6, r4
    285a:	20 91 cb 03 	lds	r18, 0x03CB	; 0x8003cb <t_last.3459>
    285e:	30 91 cc 03 	lds	r19, 0x03CC	; 0x8003cc <t_last.3459+0x1>
    2862:	40 91 cd 03 	lds	r20, 0x03CD	; 0x8003cd <t_last.3459+0x2>
    2866:	50 91 ce 03 	lds	r21, 0x03CE	; 0x8003ce <t_last.3459+0x3>
    286a:	c3 01       	movw	r24, r6
    286c:	b2 01       	movw	r22, r4
    286e:	0e 94 c8 21 	call	0x4390	; 0x4390 <__subsf3>
    2872:	9f 77       	andi	r25, 0x7F	; 127
    2874:	2a e0       	ldi	r18, 0x0A	; 10
    2876:	37 ed       	ldi	r19, 0xD7	; 215
    2878:	43 e2       	ldi	r20, 0x23	; 35
    287a:	5c e3       	ldi	r21, 0x3C	; 60
    287c:	0e 94 2d 22 	call	0x445a	; 0x445a <__cmpsf2>
    2880:	87 fd       	sbrc	r24, 7
    2882:	33 c0       	rjmp	.+102    	; 0x28ea <lcd_animation_loop+0x24a>
    2884:	40 92 cb 03 	sts	0x03CB, r4	; 0x8003cb <t_last.3459>
    2888:	50 92 cc 03 	sts	0x03CC, r5	; 0x8003cc <t_last.3459+0x1>
    288c:	60 92 cd 03 	sts	0x03CD, r6	; 0x8003cd <t_last.3459+0x2>
    2890:	70 92 ce 03 	sts	0x03CE, r7	; 0x8003ce <t_last.3459+0x3>
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	48 ec       	ldi	r20, 0xC8	; 200
    289a:	52 e4       	ldi	r21, 0x42	; 66
    289c:	c3 01       	movw	r24, r6
    289e:	b2 01       	movw	r22, r4
    28a0:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__mulsf3>
    28a4:	0e 94 99 22 	call	0x4532	; 0x4532 <__fixsfsi>
    28a8:	cb 01       	movw	r24, r22
    28aa:	b1 01       	movw	r22, r2
    28ac:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    28b0:	9f 93       	push	r25
    28b2:	8f 93       	push	r24
    28b4:	c3 01       	movw	r24, r6
    28b6:	b2 01       	movw	r22, r4
    28b8:	0e 94 99 22 	call	0x4532	; 0x4532 <__fixsfsi>
    28bc:	7f 93       	push	r23
    28be:	6f 93       	push	r22
    28c0:	df 92       	push	r13
    28c2:	cf 92       	push	r12
    28c4:	1f 92       	push	r1
    28c6:	1f 93       	push	r17
    28c8:	ff 92       	push	r15
    28ca:	ef 92       	push	r14
    28cc:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    28d0:	24 e0       	ldi	r18, 0x04	; 4
    28d2:	31 e0       	ldi	r19, 0x01	; 1
    28d4:	4e e4       	ldi	r20, 0x4E	; 78
    28d6:	66 e7       	ldi	r22, 0x76	; 118
    28d8:	8e e7       	ldi	r24, 0x7E	; 126
    28da:	94 e0       	ldi	r25, 0x04	; 4
    28dc:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	0e 94 42 0c 	call	0x1884	; 0x1884 <cpu_irq_save>
    28ee:	40 90 0a 05 	lds	r4, 0x050A	; 0x80050a <g_adc_light>
    28f2:	50 90 0b 05 	lds	r5, 0x050B	; 0x80050b <g_adc_light+0x1>
    28f6:	60 90 0c 05 	lds	r6, 0x050C	; 0x80050c <g_adc_light+0x2>
    28fa:	70 90 0d 05 	lds	r7, 0x050D	; 0x80050d <g_adc_light+0x3>
    28fe:	8f bf       	out	0x3f, r24	; 63
    2900:	20 91 c7 03 	lds	r18, 0x03C7	; 0x8003c7 <l_last.3465>
    2904:	30 91 c8 03 	lds	r19, 0x03C8	; 0x8003c8 <l_last.3465+0x1>
    2908:	40 91 c9 03 	lds	r20, 0x03C9	; 0x8003c9 <l_last.3465+0x2>
    290c:	50 91 ca 03 	lds	r21, 0x03CA	; 0x8003ca <l_last.3465+0x3>
    2910:	c3 01       	movw	r24, r6
    2912:	b2 01       	movw	r22, r4
    2914:	0e 94 c8 21 	call	0x4390	; 0x4390 <__subsf3>
    2918:	9f 77       	andi	r25, 0x7F	; 127
    291a:	2d ec       	ldi	r18, 0xCD	; 205
    291c:	3c ec       	ldi	r19, 0xCC	; 204
    291e:	4c ec       	ldi	r20, 0xCC	; 204
    2920:	5d e3       	ldi	r21, 0x3D	; 61
    2922:	0e 94 2d 22 	call	0x445a	; 0x445a <__cmpsf2>
    2926:	87 fd       	sbrc	r24, 7
    2928:	36 c0       	rjmp	.+108    	; 0x2996 <lcd_animation_loop+0x2f6>
    292a:	40 92 c7 03 	sts	0x03C7, r4	; 0x8003c7 <l_last.3465>
    292e:	50 92 c8 03 	sts	0x03C8, r5	; 0x8003c8 <l_last.3465+0x1>
    2932:	60 92 c9 03 	sts	0x03C9, r6	; 0x8003c9 <l_last.3465+0x2>
    2936:	70 92 ca 03 	sts	0x03CA, r7	; 0x8003ca <l_last.3465+0x3>
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e2       	ldi	r20, 0x20	; 32
    2940:	51 e4       	ldi	r21, 0x41	; 65
    2942:	c3 01       	movw	r24, r6
    2944:	b2 01       	movw	r22, r4
    2946:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__mulsf3>
    294a:	0e 94 99 22 	call	0x4532	; 0x4532 <__fixsfsi>
    294e:	cb 01       	movw	r24, r22
    2950:	6a e0       	ldi	r22, 0x0A	; 10
    2952:	70 e0       	ldi	r23, 0x00	; 0
    2954:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    2958:	9f 93       	push	r25
    295a:	8f 93       	push	r24
    295c:	c3 01       	movw	r24, r6
    295e:	b2 01       	movw	r22, r4
    2960:	0e 94 99 22 	call	0x4532	; 0x4532 <__fixsfsi>
    2964:	7f 93       	push	r23
    2966:	6f 93       	push	r22
    2968:	ec ef       	ldi	r30, 0xFC	; 252
    296a:	f2 e0       	ldi	r31, 0x02	; 2
    296c:	ff 93       	push	r31
    296e:	ef 93       	push	r30
    2970:	1f 92       	push	r1
    2972:	1f 93       	push	r17
    2974:	ff 92       	push	r15
    2976:	ef 92       	push	r14
    2978:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    297c:	24 e0       	ldi	r18, 0x04	; 4
    297e:	31 e0       	ldi	r19, 0x01	; 1
    2980:	48 e5       	ldi	r20, 0x58	; 88
    2982:	66 e7       	ldi	r22, 0x76	; 118
    2984:	8e e7       	ldi	r24, 0x7E	; 126
    2986:	94 e0       	ldi	r25, 0x04	; 4
    2988:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    298c:	0f b6       	in	r0, 0x3f	; 63
    298e:	f8 94       	cli
    2990:	de bf       	out	0x3e, r29	; 62
    2992:	0f be       	out	0x3f, r0	; 63
    2994:	cd bf       	out	0x3d, r28	; 61
    2996:	0e 94 42 0c 	call	0x1884	; 0x1884 <cpu_irq_save>
    299a:	95 e0       	ldi	r25, 0x05	; 5
    299c:	e4 eb       	ldi	r30, 0xB4	; 180
    299e:	f4 e0       	ldi	r31, 0x04	; 4
    29a0:	de 01       	movw	r26, r28
    29a2:	11 96       	adiw	r26, 0x01	; 1
    29a4:	01 90       	ld	r0, Z+
    29a6:	0d 92       	st	X+, r0
    29a8:	9a 95       	dec	r25
    29aa:	e1 f7       	brne	.-8      	; 0x29a4 <lcd_animation_loop+0x304>
    29ac:	40 91 b4 04 	lds	r20, 0x04B4	; 0x8004b4 <g_buttons>
    29b0:	50 91 b5 04 	lds	r21, 0x04B5	; 0x8004b5 <g_buttons+0x1>
    29b4:	60 91 b6 04 	lds	r22, 0x04B6	; 0x8004b6 <g_buttons+0x2>
    29b8:	70 91 b7 04 	lds	r23, 0x04B7	; 0x8004b7 <g_buttons+0x3>
    29bc:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <g_buttons+0x4>
    29c0:	fe 2f       	mov	r31, r30
    29c2:	f1 70       	andi	r31, 0x01	; 1
    29c4:	e6 95       	lsr	r30
    29c6:	e6 95       	lsr	r30
    29c8:	e6 95       	lsr	r30
    29ca:	e3 70       	andi	r30, 0x03	; 3
    29cc:	8f bf       	out	0x3f, r24	; 63
    29ce:	2a 01       	movw	r4, r20
    29d0:	3b 01       	movw	r6, r22
    29d2:	82 e0       	ldi	r24, 0x02	; 2
    29d4:	44 0c       	add	r4, r4
    29d6:	55 1c       	adc	r5, r5
    29d8:	66 1c       	adc	r6, r6
    29da:	77 1c       	adc	r7, r7
    29dc:	8a 95       	dec	r24
    29de:	d1 f7       	brne	.-12     	; 0x29d4 <lcd_animation_loop+0x334>
    29e0:	4e 2a       	or	r4, r30
    29e2:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <cntr_old.3471>
    29e6:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <cntr_old.3471+0x1>
    29ea:	a0 91 c5 03 	lds	r26, 0x03C5	; 0x8003c5 <cntr_old.3471+0x2>
    29ee:	b0 91 c6 03 	lds	r27, 0x03C6	; 0x8003c6 <cntr_old.3471+0x3>
    29f2:	53 01       	movw	r10, r6
    29f4:	42 01       	movw	r8, r4
    29f6:	88 1a       	sub	r8, r24
    29f8:	99 0a       	sbc	r9, r25
    29fa:	aa 0a       	sbc	r10, r26
    29fc:	bb 0a       	sbc	r11, r27
    29fe:	49 f4       	brne	.+18     	; 0x2a12 <lcd_animation_loop+0x372>
    2a00:	2f 2f       	mov	r18, r31
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <push_old.3472>
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	28 17       	cp	r18, r24
    2a0c:	39 07       	cpc	r19, r25
    2a0e:	09 f4       	brne	.+2      	; 0x2a12 <lcd_animation_loop+0x372>
    2a10:	57 c0       	rjmp	.+174    	; 0x2ac0 <lcd_animation_loop+0x420>
    2a12:	40 92 c3 03 	sts	0x03C3, r4	; 0x8003c3 <cntr_old.3471>
    2a16:	50 92 c4 03 	sts	0x03C4, r5	; 0x8003c4 <cntr_old.3471+0x1>
    2a1a:	60 92 c5 03 	sts	0x03C5, r6	; 0x8003c5 <cntr_old.3471+0x2>
    2a1e:	70 92 c6 03 	sts	0x03C6, r7	; 0x8003c6 <cntr_old.3471+0x3>
    2a22:	f0 93 c2 03 	sts	0x03C2, r31	; 0x8003c2 <push_old.3472>
    2a26:	8d 81       	ldd	r24, Y+5	; 0x05
    2a28:	f0 fb       	bst	r31, 0
    2a2a:	80 f9       	bld	r24, 0
    2a2c:	9e 2f       	mov	r25, r30
    2a2e:	93 70       	andi	r25, 0x03	; 3
    2a30:	99 0f       	add	r25, r25
    2a32:	99 0f       	add	r25, r25
    2a34:	99 0f       	add	r25, r25
    2a36:	87 7e       	andi	r24, 0xE7	; 231
    2a38:	89 2b       	or	r24, r25
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	80 fd       	sbrc	r24, 0
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <lcd_animation_loop+0x3a4>
    2a40:	9e e2       	ldi	r25, 0x2E	; 46
    2a42:	01 c0       	rjmp	.+2      	; 0x2a46 <lcd_animation_loop+0x3a6>
    2a44:	92 e4       	ldi	r25, 0x42	; 66
    2a46:	81 fd       	sbrc	r24, 1
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <lcd_animation_loop+0x3ae>
    2a4a:	2e e2       	ldi	r18, 0x2E	; 46
    2a4c:	01 c0       	rjmp	.+2      	; 0x2a50 <lcd_animation_loop+0x3b0>
    2a4e:	29 e4       	ldi	r18, 0x49	; 73
    2a50:	82 fd       	sbrc	r24, 2
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <lcd_animation_loop+0x3b8>
    2a54:	3e e2       	ldi	r19, 0x2E	; 46
    2a56:	01 c0       	rjmp	.+2      	; 0x2a5a <lcd_animation_loop+0x3ba>
    2a58:	31 e5       	ldi	r19, 0x51	; 81
    2a5a:	18 14       	cp	r1, r8
    2a5c:	19 04       	cpc	r1, r9
    2a5e:	1a 04       	cpc	r1, r10
    2a60:	1b 04       	cpc	r1, r11
    2a62:	34 f0       	brlt	.+12     	; 0x2a70 <lcd_animation_loop+0x3d0>
    2a64:	89 28       	or	r8, r9
    2a66:	8a 28       	or	r8, r10
    2a68:	8b 28       	or	r8, r11
    2a6a:	21 f4       	brne	.+8      	; 0x2a74 <lcd_animation_loop+0x3d4>
    2a6c:	8d e2       	ldi	r24, 0x2D	; 45
    2a6e:	03 c0       	rjmp	.+6      	; 0x2a76 <lcd_animation_loop+0x3d6>
    2a70:	8e e5       	ldi	r24, 0x5E	; 94
    2a72:	01 c0       	rjmp	.+2      	; 0x2a76 <lcd_animation_loop+0x3d6>
    2a74:	86 e7       	ldi	r24, 0x76	; 118
    2a76:	1f 92       	push	r1
    2a78:	8f 93       	push	r24
    2a7a:	1f 92       	push	r1
    2a7c:	ef 93       	push	r30
    2a7e:	7f 93       	push	r23
    2a80:	6f 93       	push	r22
    2a82:	5f 93       	push	r21
    2a84:	4f 93       	push	r20
    2a86:	1f 92       	push	r1
    2a88:	3f 93       	push	r19
    2a8a:	1f 92       	push	r1
    2a8c:	2f 93       	push	r18
    2a8e:	1f 92       	push	r1
    2a90:	9f 93       	push	r25
    2a92:	e7 e0       	ldi	r30, 0x07	; 7
    2a94:	f3 e0       	ldi	r31, 0x03	; 3
    2a96:	ff 93       	push	r31
    2a98:	ef 93       	push	r30
    2a9a:	1f 92       	push	r1
    2a9c:	1f 93       	push	r17
    2a9e:	ff 92       	push	r15
    2aa0:	ef 92       	push	r14
    2aa2:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    2aa6:	24 e0       	ldi	r18, 0x04	; 4
    2aa8:	31 e0       	ldi	r19, 0x01	; 1
    2aaa:	42 e6       	ldi	r20, 0x62	; 98
    2aac:	66 e7       	ldi	r22, 0x76	; 118
    2aae:	8e e7       	ldi	r24, 0x7E	; 126
    2ab0:	94 e0       	ldi	r25, 0x04	; 4
    2ab2:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <loop.3450>
    2ac4:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <loop.3450+0x1>
    2ac8:	f9 01       	movw	r30, r18
    2aca:	31 96       	adiw	r30, 0x01	; 1
    2acc:	f0 93 c1 03 	sts	0x03C1, r31	; 0x8003c1 <loop.3450+0x1>
    2ad0:	e0 93 c0 03 	sts	0x03C0, r30	; 0x8003c0 <loop.3450>
    2ad4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2ad8:	22 31       	cpi	r18, 0x12	; 18
    2ada:	31 05       	cpc	r19, r1
    2adc:	6c f4       	brge	.+26     	; 0x2af8 <lcd_animation_loop+0x458>
    2ade:	63 e0       	ldi	r22, 0x03	; 3
    2ae0:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    2ae4:	2b e1       	ldi	r18, 0x1B	; 27
    2ae6:	2e 1b       	sub	r18, r30
    2ae8:	6a e0       	ldi	r22, 0x0A	; 10
    2aea:	6e 0f       	add	r22, r30
    2aec:	09 2f       	mov	r16, r25
    2aee:	4f ee       	ldi	r20, 0xEF	; 239
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2af6:	1d c0       	rjmp	.+58     	; 0x2b32 <lcd_animation_loop+0x492>
    2af8:	e2 30       	cpi	r30, 0x02	; 2
    2afa:	91 e0       	ldi	r25, 0x01	; 1
    2afc:	f9 07       	cpc	r31, r25
    2afe:	6c f4       	brge	.+26     	; 0x2b1a <lcd_animation_loop+0x47a>
    2b00:	63 e0       	ldi	r22, 0x03	; 3
    2b02:	0e 94 36 24 	call	0x486c	; 0x486c <__udivmodqi4>
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	4e 1b       	sub	r20, r30
    2b0a:	09 2f       	mov	r16, r25
    2b0c:	2a e0       	ldi	r18, 0x0A	; 10
    2b0e:	6b e1       	ldi	r22, 0x1B	; 27
    2b10:	8e ee       	ldi	r24, 0xEE	; 238
    2b12:	8e 0f       	add	r24, r30
    2b14:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2b18:	0c c0       	rjmp	.+24     	; 0x2b32 <lcd_animation_loop+0x492>
    2b1a:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <loop.3450+0x1>
    2b1e:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <loop.3450>
    2b22:	8f 5f       	subi	r24, 0xFF	; 255
    2b24:	83 30       	cpi	r24, 0x03	; 3
    2b26:	18 f4       	brcc	.+6      	; 0x2b2e <lcd_animation_loop+0x48e>
    2b28:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2b2c:	02 c0       	rjmp	.+4      	; 0x2b32 <lcd_animation_loop+0x492>
    2b2e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
    2b32:	0e 94 42 0c 	call	0x1884	; 0x1884 <cpu_irq_save>
    2b36:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_status>
    2b3a:	91 70       	andi	r25, 0x01	; 1
    2b3c:	8f bf       	out	0x3f, r24	; 63
    2b3e:	d8 cd       	rjmp	.-1104   	; 0x26f0 <lcd_animation_loop+0x50>
    2b40:	0e 94 42 0c 	call	0x1884	; 0x1884 <cpu_irq_save>
    2b44:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_status>
    2b48:	9e 7f       	andi	r25, 0xFE	; 254
    2b4a:	90 93 f8 04 	sts	0x04F8, r25	; 0x8004f8 <g_status>
    2b4e:	8f bf       	out	0x3f, r24	; 63
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	df 91       	pop	r29
    2b5c:	cf 91       	pop	r28
    2b5e:	1f 91       	pop	r17
    2b60:	0f 91       	pop	r16
    2b62:	ff 90       	pop	r15
    2b64:	ef 90       	pop	r14
    2b66:	df 90       	pop	r13
    2b68:	cf 90       	pop	r12
    2b6a:	bf 90       	pop	r11
    2b6c:	af 90       	pop	r10
    2b6e:	9f 90       	pop	r9
    2b70:	8f 90       	pop	r8
    2b72:	7f 90       	pop	r7
    2b74:	6f 90       	pop	r6
    2b76:	5f 90       	pop	r5
    2b78:	4f 90       	pop	r4
    2b7a:	3f 90       	pop	r3
    2b7c:	2f 90       	pop	r2
    2b7e:	08 95       	ret

00002b80 <lcd_test>:
    2b80:	ef 92       	push	r14
    2b82:	ff 92       	push	r15
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	c8 2f       	mov	r28, r24
    2b8e:	0e 94 42 0c 	call	0x1884	; 0x1884 <cpu_irq_save>
    2b92:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_status>
    2b96:	9e 7f       	andi	r25, 0xFE	; 254
    2b98:	9d 7f       	andi	r25, 0xFD	; 253
    2b9a:	90 93 f8 04 	sts	0x04F8, r25	; 0x8004f8 <g_status>
    2b9e:	8f bf       	out	0x3f, r24	; 63
    2ba0:	c0 fd       	sbrc	r28, 0
    2ba2:	03 c0       	rjmp	.+6      	; 0x2baa <lcd_test+0x2a>
    2ba4:	c1 ff       	sbrs	r28, 1
    2ba6:	32 c0       	rjmp	.+100    	; 0x2c0c <lcd_test+0x8c>
    2ba8:	10 c0       	rjmp	.+32     	; 0x2bca <lcd_test+0x4a>
    2baa:	80 eb       	ldi	r24, 0xB0	; 176
    2bac:	0e 94 66 0c 	call	0x18cc	; 0x18cc <lcd_bus_write_cmd>
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <s_lcd_ram_read_nonvalid>
    2bb6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <lcd_cr>
    2bba:	10 e0       	ldi	r17, 0x00	; 0
    2bbc:	81 2f       	mov	r24, r17
    2bbe:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <lcd_bus_write_ram>
    2bc2:	1f 5f       	subi	r17, 0xFF	; 255
    2bc4:	10 3f       	cpi	r17, 0xF0	; 240
    2bc6:	d1 f7       	brne	.-12     	; 0x2bbc <lcd_test+0x3c>
    2bc8:	ed cf       	rjmp	.-38     	; 0x2ba4 <lcd_test+0x24>
    2bca:	81 eb       	ldi	r24, 0xB1	; 177
    2bcc:	0e 94 66 0c 	call	0x18cc	; 0x18cc <lcd_bus_write_cmd>
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <s_lcd_ram_read_nonvalid>
    2bd6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <lcd_cr>
    2bda:	00 e0       	ldi	r16, 0x00	; 0
    2bdc:	10 e0       	ldi	r17, 0x00	; 0
    2bde:	87 e0       	ldi	r24, 0x07	; 7
    2be0:	e8 2e       	mov	r14, r24
    2be2:	f1 2c       	mov	r15, r1
    2be4:	c8 01       	movw	r24, r16
    2be6:	b7 01       	movw	r22, r14
    2be8:	0e 94 56 24 	call	0x48ac	; 0x48ac <__divmodhi4>
    2bec:	89 2b       	or	r24, r25
    2bee:	19 f4       	brne	.+6      	; 0x2bf6 <lcd_test+0x76>
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <lcd_bus_write_ram>
    2bf6:	f8 01       	movw	r30, r16
    2bf8:	e2 5e       	subi	r30, 0xE2	; 226
    2bfa:	fb 4f       	sbci	r31, 0xFB	; 251
    2bfc:	84 91       	lpm	r24, Z
    2bfe:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <lcd_bus_write_ram>
    2c02:	0f 5f       	subi	r16, 0xFF	; 255
    2c04:	1f 4f       	sbci	r17, 0xFF	; 255
    2c06:	00 3f       	cpi	r16, 0xF0	; 240
    2c08:	11 05       	cpc	r17, r1
    2c0a:	61 f7       	brne	.-40     	; 0x2be4 <lcd_test+0x64>
    2c0c:	c2 ff       	sbrs	r28, 2
    2c0e:	14 c0       	rjmp	.+40     	; 0x2c38 <lcd_test+0xb8>
    2c10:	41 e0       	ldi	r20, 0x01	; 1
    2c12:	6c e3       	ldi	r22, 0x3C	; 60
    2c14:	89 e1       	ldi	r24, 0x19	; 25
    2c16:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2c1a:	41 e0       	ldi	r20, 0x01	; 1
    2c1c:	63 e5       	ldi	r22, 0x53	; 83
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2c24:	41 e0       	ldi	r20, 0x01	; 1
    2c26:	63 e5       	ldi	r22, 0x53	; 83
    2c28:	82 e3       	ldi	r24, 0x32	; 50
    2c2a:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2c2e:	41 e0       	ldi	r20, 0x01	; 1
    2c30:	69 e6       	ldi	r22, 0x69	; 105
    2c32:	89 e1       	ldi	r24, 0x19	; 25
    2c34:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2c38:	c3 ff       	sbrs	r28, 3
    2c3a:	0d c0       	rjmp	.+26     	; 0x2c56 <lcd_test+0xd6>
    2c3c:	01 e0       	ldi	r16, 0x01	; 1
    2c3e:	2e e5       	ldi	r18, 0x5E	; 94
    2c40:	48 e2       	ldi	r20, 0x28	; 40
    2c42:	66 e4       	ldi	r22, 0x46	; 70
    2c44:	8a e0       	ldi	r24, 0x0A	; 10
    2c46:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2c4a:	26 e4       	ldi	r18, 0x46	; 70
    2c4c:	48 e2       	ldi	r20, 0x28	; 40
    2c4e:	6e e5       	ldi	r22, 0x5E	; 94
    2c50:	8a e0       	ldi	r24, 0x0A	; 10
    2c52:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2c56:	c4 ff       	sbrs	r28, 4
    2c58:	0d c0       	rjmp	.+26     	; 0x2c74 <lcd_test+0xf4>
    2c5a:	01 e0       	ldi	r16, 0x01	; 1
    2c5c:	24 e1       	ldi	r18, 0x14	; 20
    2c5e:	44 e1       	ldi	r20, 0x14	; 20
    2c60:	6c e3       	ldi	r22, 0x3C	; 60
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_rect>
    2c68:	24 e1       	ldi	r18, 0x14	; 20
    2c6a:	44 e1       	ldi	r20, 0x14	; 20
    2c6c:	6c e3       	ldi	r22, 0x3C	; 60
    2c6e:	8e e1       	ldi	r24, 0x1E	; 30
    2c70:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2c74:	c5 ff       	sbrs	r28, 5
    2c76:	0d c0       	rjmp	.+26     	; 0x2c92 <lcd_test+0x112>
    2c78:	0f ef       	ldi	r16, 0xFF	; 255
    2c7a:	21 e0       	ldi	r18, 0x01	; 1
    2c7c:	4a e0       	ldi	r20, 0x0A	; 10
    2c7e:	6e e5       	ldi	r22, 0x5E	; 94
    2c80:	8a e0       	ldi	r24, 0x0A	; 10
    2c82:	0e 94 5a 05 	call	0xab4	; 0xab4 <gfx_mono_generic_draw_filled_circle>
    2c86:	21 e0       	ldi	r18, 0x01	; 1
    2c88:	4a e0       	ldi	r20, 0x0A	; 10
    2c8a:	6e e5       	ldi	r22, 0x5E	; 94
    2c8c:	88 e2       	ldi	r24, 0x28	; 40
    2c8e:	0e 94 ac 04 	call	0x958	; 0x958 <gfx_mono_generic_draw_circle>
    2c92:	c6 ff       	sbrs	r28, 6
    2c94:	57 c0       	rjmp	.+174    	; 0x2d44 <lcd_test+0x1c4>
    2c96:	24 e0       	ldi	r18, 0x04	; 4
    2c98:	31 e0       	ldi	r19, 0x01	; 1
    2c9a:	45 e2       	ldi	r20, 0x25	; 37
    2c9c:	66 e4       	ldi	r22, 0x46	; 70
    2c9e:	8e e1       	ldi	r24, 0x1E	; 30
    2ca0:	93 e0       	ldi	r25, 0x03	; 3
    2ca2:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2ca6:	83 e0       	ldi	r24, 0x03	; 3
    2ca8:	8f 93       	push	r24
    2caa:	87 e2       	ldi	r24, 0x27	; 39
    2cac:	8f 93       	push	r24
    2cae:	1f 92       	push	r1
    2cb0:	8a ea       	ldi	r24, 0xAA	; 170
    2cb2:	8f 93       	push	r24
    2cb4:	8f e2       	ldi	r24, 0x2F	; 47
    2cb6:	93 e0       	ldi	r25, 0x03	; 3
    2cb8:	9f 93       	push	r25
    2cba:	8f 93       	push	r24
    2cbc:	1f 92       	push	r1
    2cbe:	d0 e3       	ldi	r29, 0x30	; 48
    2cc0:	df 93       	push	r29
    2cc2:	0e e7       	ldi	r16, 0x7E	; 126
    2cc4:	14 e0       	ldi	r17, 0x04	; 4
    2cc6:	1f 93       	push	r17
    2cc8:	0f 93       	push	r16
    2cca:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    2cce:	24 e0       	ldi	r18, 0x04	; 4
    2cd0:	31 e0       	ldi	r19, 0x01	; 1
    2cd2:	4a e3       	ldi	r20, 0x3A	; 58
    2cd4:	66 e4       	ldi	r22, 0x46	; 70
    2cd6:	c8 01       	movw	r24, r16
    2cd8:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2cdc:	1f 92       	push	r1
    2cde:	81 e1       	ldi	r24, 0x11	; 17
    2ce0:	8f 93       	push	r24
    2ce2:	81 e4       	ldi	r24, 0x41	; 65
    2ce4:	93 e0       	ldi	r25, 0x03	; 3
    2ce6:	9f 93       	push	r25
    2ce8:	8f 93       	push	r24
    2cea:	1f 92       	push	r1
    2cec:	df 93       	push	r29
    2cee:	1f 93       	push	r17
    2cf0:	0f 93       	push	r16
    2cf2:	0e 94 bc 24 	call	0x4978	; 0x4978 <snprintf>
    2cf6:	24 e0       	ldi	r18, 0x04	; 4
    2cf8:	31 e0       	ldi	r19, 0x01	; 1
    2cfa:	44 e4       	ldi	r20, 0x44	; 68
    2cfc:	66 e4       	ldi	r22, 0x46	; 70
    2cfe:	c8 01       	movw	r24, r16
    2d00:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2d04:	24 e0       	ldi	r18, 0x04	; 4
    2d06:	31 e0       	ldi	r19, 0x01	; 1
    2d08:	4e e4       	ldi	r20, 0x4E	; 78
    2d0a:	66 e4       	ldi	r22, 0x46	; 70
    2d0c:	81 e5       	ldi	r24, 0x51	; 81
    2d0e:	93 e0       	ldi	r25, 0x03	; 3
    2d10:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2d14:	24 e0       	ldi	r18, 0x04	; 4
    2d16:	31 e0       	ldi	r19, 0x01	; 1
    2d18:	48 e5       	ldi	r20, 0x58	; 88
    2d1a:	66 e4       	ldi	r22, 0x46	; 70
    2d1c:	84 e6       	ldi	r24, 0x64	; 100
    2d1e:	93 e0       	ldi	r25, 0x03	; 3
    2d20:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2d24:	24 e0       	ldi	r18, 0x04	; 4
    2d26:	31 e0       	ldi	r19, 0x01	; 1
    2d28:	42 e6       	ldi	r20, 0x62	; 98
    2d2a:	66 e4       	ldi	r22, 0x46	; 70
    2d2c:	87 e7       	ldi	r24, 0x77	; 119
    2d2e:	93 e0       	ldi	r25, 0x03	; 3
    2d30:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2d34:	8d b7       	in	r24, 0x3d	; 61
    2d36:	9e b7       	in	r25, 0x3e	; 62
    2d38:	42 96       	adiw	r24, 0x12	; 18
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	f8 94       	cli
    2d3e:	9e bf       	out	0x3e, r25	; 62
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	8d bf       	out	0x3d, r24	; 61
    2d44:	c7 ff       	sbrs	r28, 7
    2d46:	10 c0       	rjmp	.+32     	; 0x2d68 <lcd_test+0x1e8>
    2d48:	2b dc       	rcall	.-1962   	; 0x25a0 <lcd_animation_prepare>
    2d4a:	0e 94 42 0c 	call	0x1884	; 0x1884 <cpu_irq_save>
    2d4e:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_status>
    2d52:	91 60       	ori	r25, 0x01	; 1
    2d54:	90 93 f8 04 	sts	0x04F8, r25	; 0x8004f8 <g_status>
    2d58:	8f bf       	out	0x3f, r24	; 63
    2d5a:	df 91       	pop	r29
    2d5c:	cf 91       	pop	r28
    2d5e:	1f 91       	pop	r17
    2d60:	0f 91       	pop	r16
    2d62:	ff 90       	pop	r15
    2d64:	ef 90       	pop	r14
    2d66:	9c cc       	rjmp	.-1736   	; 0x26a0 <lcd_animation_loop>
    2d68:	df 91       	pop	r29
    2d6a:	cf 91       	pop	r28
    2d6c:	1f 91       	pop	r17
    2d6e:	0f 91       	pop	r16
    2d70:	ff 90       	pop	r15
    2d72:	ef 90       	pop	r14
    2d74:	08 95       	ret

00002d76 <lcd_get_sysfont>:
    2d76:	84 e0       	ldi	r24, 0x04	; 4
    2d78:	91 e0       	ldi	r25, 0x01	; 1
    2d7a:	08 95       	ret

00002d7c <lcd_init>:
    2d7c:	82 ee       	ldi	r24, 0xE2	; 226
    2d7e:	0e 94 66 0c 	call	0x18cc	; 0x18cc <lcd_bus_write_cmd>
    2d82:	6b e2       	ldi	r22, 0x2B	; 43
    2d84:	78 e6       	ldi	r23, 0x68	; 104
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	0e 94 4f 0c 	call	0x189e	; 0x189e <__portable_avr_delay_cycles>
    2d8e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <lcd_bus_read_status>
    2d92:	87 fd       	sbrc	r24, 7
    2d94:	06 c0       	rjmp	.+12     	; 0x2da2 <lcd_init+0x26>
    2d96:	0e 94 9c 0c 	call	0x1938	; 0x1938 <lcd_enable.part.0>
    2d9a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <lcd_cls>
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	08 95       	ret
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	08 95       	ret

00002da6 <lcd_show_new_smartlcd_data>:

	clk_state_old = clk_state;
}

uint8_t lcd_show_new_smartlcd_data(void)
{
    2da6:	df 92       	push	r13
    2da8:	ef 92       	push	r14
    2daa:	ff 92       	push	r15
    2dac:	0f 93       	push	r16
    2dae:	1f 93       	push	r17
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	28 97       	sbiw	r28, 0x08	; 8
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
	gfx_coord_t l_pencil_x, l_pencil_y, l_to_x, l_to_y, l_width, l_height, l_radius;
	gfx_mono_color_t l_pixelType;
	uint8_t i;
	char buf[8];

	irqflags_t flags = cpu_irq_save();
    2dc4:	0e 94 42 0c 	call	0x1884	; 0x1884 <cpu_irq_save>
    2dc8:	f8 2e       	mov	r15, r24

	switch (g_showData.cmd) {
    2dca:	10 91 bb 04 	lds	r17, 0x04BB	; 0x8004bb <g_showData+0x2>
    2dce:	10 33       	cpi	r17, 0x30	; 48
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <lcd_show_new_smartlcd_data+0x2e>
    2dd2:	41 c0       	rjmp	.+130    	; 0x2e56 <lcd_show_new_smartlcd_data+0xb0>
    2dd4:	f8 f4       	brcc	.+62     	; 0x2e14 <lcd_show_new_smartlcd_data+0x6e>
    2dd6:	11 31       	cpi	r17, 0x11	; 17
    2dd8:	71 f1       	breq	.+92     	; 0x2e36 <lcd_show_new_smartlcd_data+0x90>
    2dda:	58 f4       	brcc	.+22     	; 0x2df2 <lcd_show_new_smartlcd_data+0x4c>
    2ddc:	10 31       	cpi	r17, 0x10	; 16
    2dde:	09 f0       	breq	.+2      	; 0x2de2 <lcd_show_new_smartlcd_data+0x3c>
    2de0:	ca c0       	rjmp	.+404    	; 0x2f76 <lcd_show_new_smartlcd_data+0x1d0>
		case TWI_SMART_LCD_CMD_RESET:
			gfx_mono_lcd_uc1608_cache_clear();
    2de2:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
			lcd_reset();
			g_showData.cmd = 0;
    2de6:	ca df       	rcall	.-108    	; 0x2d7c <lcd_init>
    2de8:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <g_showData+0x2>
			cpu_irq_restore(flags);
			return TWI_SMART_LCD_CMD_CLS;
    2dec:	ff be       	out	0x3f, r15	; 63
    2dee:	11 e1       	ldi	r17, 0x11	; 17
	uint8_t i;
	char buf[8];

	irqflags_t flags = cpu_irq_save();

	switch (g_showData.cmd) {
    2df0:	c4 c0       	rjmp	.+392    	; 0x2f7a <lcd_show_new_smartlcd_data+0x1d4>
    2df2:	14 31       	cpi	r17, 0x14	; 20
    2df4:	41 f1       	breq	.+80     	; 0x2e46 <lcd_show_new_smartlcd_data+0xa0>
    2df6:	10 32       	cpi	r17, 0x20	; 32
    2df8:	09 f0       	breq	.+2      	; 0x2dfc <lcd_show_new_smartlcd_data+0x56>
			cpu_irq_restore(flags);
			return TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
		break;

		case TWI_SMART_LCD_CMD_SET_POS_X_Y:
			g_showData.pencil_x = (gfx_coord_t) g_showData.data[0];
    2dfa:	bd c0       	rjmp	.+378    	; 0x2f76 <lcd_show_new_smartlcd_data+0x1d0>
    2dfc:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <g_showData+0x3>
    2e00:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <g_showData+0x14>
			g_showData.pencil_y = (gfx_coord_t) g_showData.data[1];
    2e04:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <g_showData+0x4>
    2e08:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <g_showData+0x15>
			g_showData.cmd = 0;
    2e0c:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <g_showData+0x2>
			cpu_irq_restore(flags);
			return TWI_SMART_LCD_CMD_SET_POS_X_Y;
    2e10:	ff be       	out	0x3f, r15	; 63
	uint8_t i;
	char buf[8];

	irqflags_t flags = cpu_irq_save();

	switch (g_showData.cmd) {
    2e12:	b3 c0       	rjmp	.+358    	; 0x2f7a <lcd_show_new_smartlcd_data+0x1d4>
    2e14:	16 33       	cpi	r17, 0x36	; 54
    2e16:	09 f4       	brne	.+2      	; 0x2e1a <lcd_show_new_smartlcd_data+0x74>
    2e18:	6e c0       	rjmp	.+220    	; 0x2ef6 <lcd_show_new_smartlcd_data+0x150>
    2e1a:	30 f4       	brcc	.+12     	; 0x2e28 <lcd_show_new_smartlcd_data+0x82>
    2e1c:	12 33       	cpi	r17, 0x32	; 50
    2e1e:	c9 f1       	breq	.+114    	; 0x2e92 <lcd_show_new_smartlcd_data+0xec>
    2e20:	14 33       	cpi	r17, 0x34	; 52
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <lcd_show_new_smartlcd_data+0x80>
    2e24:	52 c0       	rjmp	.+164    	; 0x2eca <lcd_show_new_smartlcd_data+0x124>
    2e26:	a7 c0       	rjmp	.+334    	; 0x2f76 <lcd_show_new_smartlcd_data+0x1d0>
    2e28:	18 33       	cpi	r17, 0x38	; 56
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <lcd_show_new_smartlcd_data+0x88>
    2e2c:	7a c0       	rjmp	.+244    	; 0x2f22 <lcd_show_new_smartlcd_data+0x17c>
    2e2e:	1a 33       	cpi	r17, 0x3A	; 58
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <lcd_show_new_smartlcd_data+0x8e>
    2e32:	8c c0       	rjmp	.+280    	; 0x2f4c <lcd_show_new_smartlcd_data+0x1a6>
			cpu_irq_restore(flags);
			return TWI_SMART_LCD_CMD_CLS;
		break;

		case TWI_SMART_LCD_CMD_CLS:
			gfx_mono_lcd_uc1608_cache_clear();
    2e34:	a0 c0       	rjmp	.+320    	; 0x2f76 <lcd_show_new_smartlcd_data+0x1d0>
    2e36:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
			lcd_cls();
    2e3a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <lcd_cls>
			g_showData.cmd = 0;
    2e3e:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <g_showData+0x2>
			cpu_irq_restore(flags);
			return TWI_SMART_LCD_CMD_CLS;
    2e42:	ff be       	out	0x3f, r15	; 63
		break;

		case TWI_SMART_LCD_CMD_SET_PIXEL_TYPE:
			g_showData.pixelType = (gfx_mono_color_t) g_showData.data[0];
    2e44:	9a c0       	rjmp	.+308    	; 0x2f7a <lcd_show_new_smartlcd_data+0x1d4>
    2e46:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <g_showData+0x3>
    2e4a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <g_showData+0x13>
			g_showData.cmd = 0;
    2e4e:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <g_showData+0x2>
			cpu_irq_restore(flags);
			return TWI_SMART_LCD_CMD_SET_PIXEL_TYPE;
    2e52:	ff be       	out	0x3f, r15	; 63
			cpu_irq_restore(flags);
			return TWI_SMART_LCD_CMD_SET_POS_X_Y;
		break;

		case TWI_SMART_LCD_CMD_WRITE:
			len = g_showData.data[0];
    2e54:	92 c0       	rjmp	.+292    	; 0x2f7a <lcd_show_new_smartlcd_data+0x1d4>
    2e56:	20 91 bc 04 	lds	r18, 0x04BC	; 0x8004bc <g_showData+0x3>
    2e5a:	ad eb       	ldi	r26, 0xBD	; 189
    2e5c:	b4 e0       	ldi	r27, 0x04	; 4
    2e5e:	ce 01       	movw	r24, r28
			for (i = 0; i < len; ++i) {
    2e60:	01 96       	adiw	r24, 0x01	; 1
    2e62:	fc 01       	movw	r30, r24
    2e64:	3e 2f       	mov	r19, r30
    2e66:	38 1b       	sub	r19, r24
    2e68:	32 17       	cp	r19, r18
				buf[i] = g_showData.data[1+i];
    2e6a:	18 f4       	brcc	.+6      	; 0x2e72 <lcd_show_new_smartlcd_data+0xcc>
    2e6c:	3d 91       	ld	r19, X+
    2e6e:	31 93       	st	Z+, r19
			}
			buf[len] = 0;
    2e70:	f9 cf       	rjmp	.-14     	; 0x2e64 <lcd_show_new_smartlcd_data+0xbe>
    2e72:	fc 01       	movw	r30, r24
    2e74:	e2 0f       	add	r30, r18
    2e76:	f1 1d       	adc	r31, r1
			l_pencil_x = g_showData.pencil_x;
			l_pencil_y = g_showData.pencil_y;
			lcd_write(buf, l_pencil_x, l_pencil_y);
    2e78:	10 82       	st	Z, r1
    2e7a:	40 91 ce 04 	lds	r20, 0x04CE	; 0x8004ce <g_showData+0x15>
    2e7e:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <g_showData+0x14>
    2e82:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <lcd_write>
			gfx_mono_lcd_uc1608_cache_clear();
    2e86:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
			g_showData.cmd = 0;
    2e8a:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <g_showData+0x2>
			cpu_irq_restore(flags);
			return TWI_SMART_LCD_CMD_WRITE;
    2e8e:	ff be       	out	0x3f, r15	; 63
		break;

		case TWI_SMART_LCD_CMD_DRAW_LINE:			// Draw line from current pencil position to next position (x, y)
			l_pencil_x = g_showData.pencil_x;
    2e90:	74 c0       	rjmp	.+232    	; 0x2f7a <lcd_show_new_smartlcd_data+0x1d4>
    2e92:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <g_showData+0x14>
			l_pencil_y = g_showData.pencil_y;
    2e96:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <g_showData+0x15>
			l_to_x = g_showData.data[0];
    2e9a:	d0 90 bc 04 	lds	r13, 0x04BC	; 0x8004bc <g_showData+0x3>
			l_to_y = g_showData.data[1];
    2e9e:	e0 90 bd 04 	lds	r14, 0x04BD	; 0x8004bd <g_showData+0x4>
			l_pixelType = g_showData.data[2];
    2ea2:	00 91 be 04 	lds	r16, 0x04BE	; 0x8004be <g_showData+0x5>
			if (l_pixelType == 255) {
    2ea6:	0f 3f       	cpi	r16, 0xFF	; 255
				l_pixelType = g_showData.pixelType;
    2ea8:	11 f4       	brne	.+4      	; 0x2eae <lcd_show_new_smartlcd_data+0x108>
    2eaa:	00 91 cc 04 	lds	r16, 0x04CC	; 0x8004cc <g_showData+0x13>
			}
			gfx_mono_generic_draw_line(l_pencil_x, l_pencil_y, l_to_x, l_to_y, l_pixelType);
    2eae:	2e 2d       	mov	r18, r14
    2eb0:	4d 2d       	mov	r20, r13
    2eb2:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
			gfx_mono_lcd_uc1608_cache_clear();
    2eb6:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
			g_showData.pencil_x = l_to_x;
    2eba:	d0 92 cd 04 	sts	0x04CD, r13	; 0x8004cd <g_showData+0x14>
			g_showData.pencil_y = l_to_y;
    2ebe:	e0 92 ce 04 	sts	0x04CE, r14	; 0x8004ce <g_showData+0x15>
			g_showData.cmd = 0;
    2ec2:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <g_showData+0x2>
			cpu_irq_restore(flags);
			return TWI_SMART_LCD_CMD_DRAW_LINE;
    2ec6:	ff be       	out	0x3f, r15	; 63
		break;

		case TWI_SMART_LCD_CMD_DRAW_RECT:			// Draw rectangular frame with pencil's start position with dimension (width, height)
			l_pencil_x = g_showData.pencil_x;
    2ec8:	58 c0       	rjmp	.+176    	; 0x2f7a <lcd_show_new_smartlcd_data+0x1d4>
    2eca:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <g_showData+0x14>
			l_pencil_y = g_showData.pencil_y;
    2ece:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <g_showData+0x15>
			l_width = g_showData.data[0];
    2ed2:	40 91 bc 04 	lds	r20, 0x04BC	; 0x8004bc <g_showData+0x3>
			l_height = g_showData.data[1];
    2ed6:	20 91 bd 04 	lds	r18, 0x04BD	; 0x8004bd <g_showData+0x4>
			l_pixelType = g_showData.data[2];
    2eda:	00 91 be 04 	lds	r16, 0x04BE	; 0x8004be <g_showData+0x5>
			if (l_pixelType == 255) {
    2ede:	0f 3f       	cpi	r16, 0xFF	; 255
				l_pixelType = g_showData.pixelType;
    2ee0:	11 f4       	brne	.+4      	; 0x2ee6 <lcd_show_new_smartlcd_data+0x140>
    2ee2:	00 91 cc 04 	lds	r16, 0x04CC	; 0x8004cc <g_showData+0x13>
			}
			gfx_mono_generic_draw_rect(l_pencil_x, l_pencil_y, l_width, l_height, l_pixelType);
    2ee6:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_rect>
			gfx_mono_lcd_uc1608_cache_clear();
    2eea:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
			g_showData.cmd = 0;
    2eee:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <g_showData+0x2>
			cpu_irq_restore(flags);
			return TWI_SMART_LCD_CMD_DRAW_RECT;
    2ef2:	ff be       	out	0x3f, r15	; 63
		break;

		case TWI_SMART_LCD_CMD_DRAW_FILLED_RECT:	// Draw filled rectangular frame with pencil's start position with dimension (width, height)
			l_pencil_x = g_showData.pencil_x;
    2ef4:	42 c0       	rjmp	.+132    	; 0x2f7a <lcd_show_new_smartlcd_data+0x1d4>
    2ef6:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <g_showData+0x14>
			l_pencil_y = g_showData.pencil_y;
    2efa:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <g_showData+0x15>
			l_width = g_showData.data[0];
    2efe:	40 91 bc 04 	lds	r20, 0x04BC	; 0x8004bc <g_showData+0x3>
			l_height = g_showData.data[1];
    2f02:	20 91 bd 04 	lds	r18, 0x04BD	; 0x8004bd <g_showData+0x4>
			l_pixelType = g_showData.data[2];
    2f06:	00 91 be 04 	lds	r16, 0x04BE	; 0x8004be <g_showData+0x5>
			if (l_pixelType == 255) {
    2f0a:	0f 3f       	cpi	r16, 0xFF	; 255
				l_pixelType = g_showData.pixelType;
    2f0c:	11 f4       	brne	.+4      	; 0x2f12 <lcd_show_new_smartlcd_data+0x16c>
    2f0e:	00 91 cc 04 	lds	r16, 0x04CC	; 0x8004cc <g_showData+0x13>
			}
			gfx_mono_generic_draw_filled_rect(l_pencil_x, l_pencil_y, l_width, l_height, l_pixelType);
    2f12:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
			gfx_mono_lcd_uc1608_cache_clear();
    2f16:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
			g_showData.cmd = 0;
    2f1a:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <g_showData+0x2>
			cpu_irq_restore(flags);
			return TWI_SMART_LCD_CMD_DRAW_FILLED_RECT;
    2f1e:	ff be       	out	0x3f, r15	; 63
		break;

		case TWI_SMART_LCD_CMD_DRAW_CIRC:			// Draw circle or ellipse from the pencil's center point with (radius)
			l_pencil_x = g_showData.pencil_x;
    2f20:	2c c0       	rjmp	.+88     	; 0x2f7a <lcd_show_new_smartlcd_data+0x1d4>
    2f22:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <g_showData+0x14>
			l_pencil_y = g_showData.pencil_y;
    2f26:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <g_showData+0x15>
			l_radius = g_showData.data[0];
    2f2a:	40 91 bc 04 	lds	r20, 0x04BC	; 0x8004bc <g_showData+0x3>
			l_pixelType = g_showData.data[1];
    2f2e:	20 91 bd 04 	lds	r18, 0x04BD	; 0x8004bd <g_showData+0x4>
			if (l_pixelType == 255) {
    2f32:	2f 3f       	cpi	r18, 0xFF	; 255
				l_pixelType = g_showData.pixelType;
    2f34:	11 f4       	brne	.+4      	; 0x2f3a <lcd_show_new_smartlcd_data+0x194>
    2f36:	20 91 cc 04 	lds	r18, 0x04CC	; 0x8004cc <g_showData+0x13>
			}
			gfx_mono_generic_draw_circle(l_pencil_x, l_pencil_y, l_radius, l_pixelType, GFX_QUADRANT0 | GFX_QUADRANT1 | GFX_QUADRANT2 | GFX_QUADRANT3);
    2f3a:	0f ef       	ldi	r16, 0xFF	; 255
    2f3c:	0e 94 ac 04 	call	0x958	; 0x958 <gfx_mono_generic_draw_circle>
			gfx_mono_lcd_uc1608_cache_clear();
    2f40:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
			g_showData.cmd = 0;
    2f44:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <g_showData+0x2>
			cpu_irq_restore(flags);
			return TWI_SMART_LCD_CMD_DRAW_CIRC;
    2f48:	ff be       	out	0x3f, r15	; 63
		break;

		case TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC:	// Draw filled circle or ellipse from the pencil's center point with (radius)
			l_pencil_x = g_showData.pencil_x;
    2f4a:	17 c0       	rjmp	.+46     	; 0x2f7a <lcd_show_new_smartlcd_data+0x1d4>
    2f4c:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <g_showData+0x14>
			l_pencil_y = g_showData.pencil_y;
    2f50:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <g_showData+0x15>
			l_radius = g_showData.data[0];
    2f54:	40 91 bc 04 	lds	r20, 0x04BC	; 0x8004bc <g_showData+0x3>
			l_pixelType = g_showData.data[1];
    2f58:	20 91 bd 04 	lds	r18, 0x04BD	; 0x8004bd <g_showData+0x4>
			if (l_pixelType == 255) {
    2f5c:	2f 3f       	cpi	r18, 0xFF	; 255
				l_pixelType = g_showData.pixelType;
    2f5e:	11 f4       	brne	.+4      	; 0x2f64 <lcd_show_new_smartlcd_data+0x1be>
    2f60:	20 91 cc 04 	lds	r18, 0x04CC	; 0x8004cc <g_showData+0x13>
			}
			gfx_mono_generic_draw_filled_circle(l_pencil_x, l_pencil_y, l_radius, l_pixelType, GFX_QUADRANT0 | GFX_QUADRANT1 | GFX_QUADRANT2 | GFX_QUADRANT3);
    2f64:	0f ef       	ldi	r16, 0xFF	; 255
    2f66:	0e 94 5a 05 	call	0xab4	; 0xab4 <gfx_mono_generic_draw_filled_circle>
			gfx_mono_lcd_uc1608_cache_clear();
    2f6a:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
			g_showData.cmd = 0;
    2f6e:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <g_showData+0x2>
			cpu_irq_restore(flags);
			return TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC;
    2f72:	ff be       	out	0x3f, r15	; 63
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <lcd_show_new_smartlcd_data+0x1d4>
		break;
	}

	cpu_irq_restore(flags);
	return 0;
    2f76:	ff be       	out	0x3f, r15	; 63
}
    2f78:	10 e0       	ldi	r17, 0x00	; 0
    2f7a:	81 2f       	mov	r24, r17
    2f7c:	28 96       	adiw	r28, 0x08	; 8
    2f7e:	0f b6       	in	r0, 0x3f	; 63
    2f80:	f8 94       	cli
    2f82:	de bf       	out	0x3e, r29	; 62
    2f84:	0f be       	out	0x3f, r0	; 63
    2f86:	cd bf       	out	0x3d, r28	; 61
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	1f 91       	pop	r17
    2f8e:	0f 91       	pop	r16
    2f90:	ff 90       	pop	r15
    2f92:	ef 90       	pop	r14
    2f94:	df 90       	pop	r13
// hold a copy of a font size in the PROG memory section
SYSFONT_DEFINE_GLYPHS;


uint8_t lcd_bus_read_status(void)
{
    2f96:	08 95       	ret

00002f98 <lcd_shutdown>:
    2f98:	82 ee       	ldi	r24, 0xE2	; 226
    2f9a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <lcd_bus_write_cmd>
    2f9e:	6b e6       	ldi	r22, 0x6B	; 107
    2fa0:	7a e0       	ldi	r23, 0x0A	; 10
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <__portable_avr_delay_cycles>

00002faa <s_twi_tx_done>:
#endif

static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
    2faa:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <s_tx_next_len>
    2fae:	ee 23       	and	r30, r30
    2fb0:	51 f0       	breq	.+20     	; 0x2fc6 <s_twi_tx_done+0x1c>
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	e2 59       	subi	r30, 0x92	; 146
    2fb6:	fb 4f       	sbci	r31, 0xFB	; 251
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
			s_tx_d[idx] = s_tx_next_d[idx];
    2fb8:	12 92       	st	-Z, r1
static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
    2fba:	84 e0       	ldi	r24, 0x04	; 4
    2fbc:	ed 36       	cpi	r30, 0x6D	; 109
    2fbe:	f8 07       	cpc	r31, r24
    2fc0:	d9 f7       	brne	.-10     	; 0x2fb8 <s_twi_tx_done+0xe>
			s_tx_d[idx] = s_tx_next_d[idx];
		}
		s_tx_len = s_tx_next_len;
		s_tx_next_len = 0;
    2fc2:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <s_tx_next_len>
    2fc6:	08 95       	ret

00002fc8 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6>:
	uint8_t err = 1;
	// TODO: implementation
	return err;
}

static void s_isr_twi_rcvd_command_closed_form(uint8_t data[], uint8_t cnt)
    2fc8:	cf 92       	push	r12
    2fca:	df 92       	push	r13
    2fcc:	ef 92       	push	r14
    2fce:	ff 92       	push	r15
    2fd0:	cf 93       	push	r28
    2fd2:	df 93       	push	r29
				// do nothing
			}
		}
	}  // if (isGCA)

	else if ((data[0] == TWI_SLAVE_ADDR_SMARTLCD)) {
    2fd4:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <s_rx_d>
    2fd8:	82 32       	cpi	r24, 0x22	; 34
    2fda:	09 f0       	breq	.+2      	; 0x2fde <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x16>
    2fdc:	d9 c4       	rjmp	.+2482   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
}

static void s_isr_twi_rcvd_command_closed_form(uint8_t data[], uint8_t cnt)
{
	uint8_t isGCA	= !data[0];
	uint8_t cmd		=  data[1];
    2fde:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <s_rx_d+0x1>
		}
	}  // if (isGCA)

	else if ((data[0] == TWI_SLAVE_ADDR_SMARTLCD)) {
		/* unique command section for all modes */
		switch (cmd) {
    2fe2:	e2 30       	cpi	r30, 0x02	; 2
    2fe4:	51 f0       	breq	.+20     	; 0x2ffa <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x32>
    2fe6:	e3 30       	cpi	r30, 0x03	; 3
    2fe8:	e9 f0       	breq	.+58     	; 0x3024 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x5c>
    2fea:	e1 30       	cpi	r30, 0x01	; 1
    2fec:	41 f5       	brne	.+80     	; 0x303e <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x76>
			case TWI_SMART_LCD_CMD_GET_VER:
			s_rx_ret_d[0] = I2C_VERSION;
    2fee:	81 e1       	ldi	r24, 0x11	; 17
    2ff0:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <s_rx_ret_d>
			s_rx_ret_len = 1;
    2ff4:	e0 93 5a 04 	sts	0x045A, r30	; 0x80045a <s_rx_ret_len>
    2ff8:	cb c4       	rjmp	.+2454   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
			return;

			case TWI_SMART_LCD_CMD_SET_MODE:
			s_isr_lcd_set_mode(data[2]);
    2ffa:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <s_rx_d+0x2>

/* ISR - interrupt disabled functions called within the TWI interrupt handling */

static void s_isr_lcd_set_mode(int8_t mode)
{
	g_SmartLCD_mode = mode;
    2ffe:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <g_SmartLCD_mode>
	if (mode) {
    3002:	88 23       	and	r24, r24
    3004:	31 f0       	breq	.+12     	; 0x3012 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x4a>
		g_status.doAnimation = false;	// Stop animation demo
    3006:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <g_status>
    300a:	8e 7f       	andi	r24, 0xFE	; 254
    300c:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <g_status>

		} else {
		// Reset display
		lcd_init();
    3010:	bf c4       	rjmp	.+2430   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
		lcd_test(0b11110001);			// Start animation again
    3012:	b4 de       	rcall	.-664    	; 0x2d7c <lcd_init>
					// do nothing for unsupported commands
				}
			}  // switch (cmd)
		}  // if (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC)
	}  // if ((data[0] == TWI_SLAVE_ADDR_SMARTLCD))
}
    3014:	81 ef       	ldi	r24, 0xF1	; 241
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	ff 90       	pop	r15
    301c:	ef 90       	pop	r14
		g_status.doAnimation = false;	// Stop animation demo

		} else {
		// Reset display
		lcd_init();
		lcd_test(0b11110001);			// Start animation again
    301e:	df 90       	pop	r13
    3020:	cf 90       	pop	r12
			case TWI_SMART_LCD_CMD_SET_MODE:
			s_isr_lcd_set_mode(data[2]);
			return;

			case TWI_SMART_LCD_CMD_GET_STATE:
			s_rx_ret_d[0] = g_showData.cmd ?  0x81 : 0x80;		// (Valid << 7) | (Busy << 0)
    3022:	ae cd       	rjmp	.-1188   	; 0x2b80 <lcd_test>
    3024:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <g_showData+0x2>
    3028:	88 23       	and	r24, r24
    302a:	11 f0       	breq	.+4      	; 0x3030 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x68>
    302c:	81 e8       	ldi	r24, 0x81	; 129
    302e:	01 c0       	rjmp	.+2      	; 0x3032 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x6a>
    3030:	80 e8       	ldi	r24, 0x80	; 128
    3032:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <s_rx_ret_d>
			s_rx_ret_len = 1;
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <s_rx_ret_len>
			return;

			default:
			s_rx_ret_len = 0;
    303c:	a9 c4       	rjmp	.+2386   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    303e:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <s_rx_ret_len>
		}

		if (g_SmartLCD_mode == C_SMART_LCD_MODE_SMARTLCD) {
    3042:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <g_SmartLCD_mode>
    3046:	80 31       	cpi	r24, 0x10	; 16
    3048:	09 f0       	breq	.+2      	; 0x304c <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x84>
			if (!(g_showData.cmd)) {							// Do when no command in process only
    304a:	f7 c2       	rjmp	.+1518   	; 0x363a <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x672>
    304c:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <g_showData+0x2>
    3050:	81 11       	cpse	r24, r1
				switch (cmd) {
    3052:	9e c4       	rjmp	.+2364   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3054:	e8 33       	cpi	r30, 0x38	; 56
    3056:	09 f4       	brne	.+2      	; 0x305a <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x92>
    3058:	0e c2       	rjmp	.+1052   	; 0x3476 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x4ae>
    305a:	08 f5       	brcc	.+66     	; 0x309e <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xd6>
    305c:	e0 32       	cpi	r30, 0x20	; 32
    305e:	09 f4       	brne	.+2      	; 0x3062 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9a>
    3060:	0a c2       	rjmp	.+1044   	; 0x3476 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x4ae>
    3062:	78 f4       	brcc	.+30     	; 0x3082 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xba>
    3064:	e0 31       	cpi	r30, 0x10	; 16
    3066:	08 f4       	brcc	.+2      	; 0x306a <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xa2>
    3068:	93 c4       	rjmp	.+2342   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    306a:	e2 31       	cpi	r30, 0x12	; 18
    306c:	a8 f1       	brcs	.+106    	; 0x30d8 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x110>
    306e:	e4 31       	cpi	r30, 0x14	; 20
    3070:	09 f0       	breq	.+2      	; 0x3074 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xac>
					case TWI_SMART_LCD_CMD_CLS:					// Clear screen
						s_isr_smartlcd_cmd(cmd);
					break;

					case TWI_SMART_LCD_CMD_SET_PIXEL_TYPE:		// Set next pixels (OFF / ON / XOR)
						s_isr_smartlcd_cmd_data1(cmd, data[2]);
    3072:	8e c4       	rjmp	.+2332   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3074:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <s_rx_d+0x2>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3078:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    307c:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <g_showData+0x3>
			s_rx_ret_len = 0;
		}

		if (g_SmartLCD_mode == C_SMART_LCD_MODE_SMARTLCD) {
			if (!(g_showData.cmd)) {							// Do when no command in process only
				switch (cmd) {
    3080:	87 c4       	rjmp	.+2318   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3082:	e2 33       	cpi	r30, 0x32	; 50
    3084:	09 f4       	brne	.+2      	; 0x3088 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xc0>
    3086:	e8 c1       	rjmp	.+976    	; 0x3458 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x490>
    3088:	18 f4       	brcc	.+6      	; 0x3090 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xc8>
    308a:	e0 33       	cpi	r30, 0x30	; 48
    308c:	41 f1       	breq	.+80     	; 0x30de <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x116>
    308e:	80 c4       	rjmp	.+2304   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3090:	e4 33       	cpi	r30, 0x34	; 52
    3092:	09 f4       	brne	.+2      	; 0x3096 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xce>
    3094:	e1 c1       	rjmp	.+962    	; 0x3458 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x490>
    3096:	e6 33       	cpi	r30, 0x36	; 54
    3098:	09 f4       	brne	.+2      	; 0x309c <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xd4>
    309a:	de c1       	rjmp	.+956    	; 0x3458 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x490>
    309c:	79 c4       	rjmp	.+2290   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    309e:	e5 36       	cpi	r30, 0x65	; 101
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xdc>
    30a2:	24 c2       	rjmp	.+1096   	; 0x34ec <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x524>
    30a4:	50 f4       	brcc	.+20     	; 0x30ba <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xf2>
    30a6:	e0 36       	cpi	r30, 0x60	; 96
    30a8:	09 f4       	brne	.+2      	; 0x30ac <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xe4>
    30aa:	f0 c1       	rjmp	.+992    	; 0x348c <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x4c4>
    30ac:	e4 36       	cpi	r30, 0x64	; 100
    30ae:	09 f4       	brne	.+2      	; 0x30b2 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xea>
    30b0:	09 c2       	rjmp	.+1042   	; 0x34c4 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x4fc>
    30b2:	ea 33       	cpi	r30, 0x3A	; 58
    30b4:	09 f0       	breq	.+2      	; 0x30b8 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xf0>
    30b6:	6c c4       	rjmp	.+2264   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    30b8:	de c1       	rjmp	.+956    	; 0x3476 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x4ae>
    30ba:	e1 37       	cpi	r30, 0x71	; 113
    30bc:	09 f4       	brne	.+2      	; 0x30c0 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0xf8>
    30be:	6b c2       	rjmp	.+1238   	; 0x3596 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x5ce>
    30c0:	20 f4       	brcc	.+8      	; 0x30ca <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x102>
    30c2:	e0 37       	cpi	r30, 0x70	; 112
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x100>
    30c6:	5d c2       	rjmp	.+1210   	; 0x3582 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x5ba>
    30c8:	63 c4       	rjmp	.+2246   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    30ca:	e4 37       	cpi	r30, 0x74	; 116
    30cc:	09 f4       	brne	.+2      	; 0x30d0 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x108>
    30ce:	87 c2       	rjmp	.+1294   	; 0x35de <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x616>
    30d0:	e5 37       	cpi	r30, 0x75	; 117
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x10e>
    30d4:	a0 c2       	rjmp	.+1344   	; 0x3616 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x64e>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    30d6:	5c c4       	rjmp	.+2232   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    30d8:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <g_showData+0x2>
						s_isr_smartlcd_cmd_data2(cmd, data[2], data[3]);
					break;

					case TWI_SMART_LCD_CMD_WRITE:				// Write text of length (length, buffer...)
					{
						switch (data[2]) {
    30dc:	59 c4       	rjmp	.+2226   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    30de:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <s_rx_d+0x2>
    30e2:	8e 2f       	mov	r24, r30
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	fc 01       	movw	r30, r24
    30e8:	31 97       	sbiw	r30, 0x01	; 1
    30ea:	ed 30       	cpi	r30, 0x0D	; 13
    30ec:	f1 05       	cpc	r31, r1
    30ee:	08 f0       	brcs	.+2      	; 0x30f2 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x12a>
    30f0:	4f c4       	rjmp	.+2206   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    30f2:	ec 5c       	subi	r30, 0xCC	; 204
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <s_rx_d+0x3>
    30fa:	0c 94 8b 24 	jmp	0x4916	; 0x4916 <__tablejump2__>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    30fe:	90 e3       	ldi	r25, 0x30	; 48
    3100:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3104:	91 e0       	ldi	r25, 0x01	; 1
    3106:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    310a:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>
							case 1:
								s_isr_smartlcd_cmd_data2(cmd, data[2], data[3]);
							break;

							case 2:
								s_isr_smartlcd_cmd_data3(cmd, data[2], data[3], data[4]);
    310e:	40 c4       	rjmp	.+2176   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3110:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3114:	20 e3       	ldi	r18, 0x30	; 48
    3116:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    311a:	22 e0       	ldi	r18, 0x02	; 2
    311c:	20 93 bc 04 	sts	0x04BC, r18	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    3120:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    3124:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <g_showData+0x5>
							case 2:
								s_isr_smartlcd_cmd_data3(cmd, data[2], data[3], data[4]);
							break;

							case 3:
								s_isr_smartlcd_cmd_data4(cmd, data[2], data[3], data[4], data[5]);
    3128:	33 c4       	rjmp	.+2150   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    312a:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <s_rx_d+0x5>
    312e:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3132:	30 e3       	ldi	r19, 0x30	; 48
    3134:	30 93 bb 04 	sts	0x04BB, r19	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3138:	33 e0       	ldi	r19, 0x03	; 3
    313a:	30 93 bc 04 	sts	0x04BC, r19	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    313e:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    3142:	20 93 be 04 	sts	0x04BE, r18	; 0x8004be <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    3146:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <g_showData+0x6>
							case 3:
								s_isr_smartlcd_cmd_data4(cmd, data[2], data[3], data[4], data[5]);
							break;

							case 4:
								s_isr_smartlcd_cmd_data5(cmd, data[2], data[3], data[4], data[5], data[6]);
    314a:	22 c4       	rjmp	.+2116   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    314c:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <s_rx_d+0x6>
    3150:	20 91 62 04 	lds	r18, 0x0462	; 0x800462 <s_rx_d+0x5>
    3154:	30 91 61 04 	lds	r19, 0x0461	; 0x800461 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3158:	40 e3       	ldi	r20, 0x30	; 48
    315a:	40 93 bb 04 	sts	0x04BB, r20	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    315e:	44 e0       	ldi	r20, 0x04	; 4
    3160:	40 93 bc 04 	sts	0x04BC, r20	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    3164:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    3168:	30 93 be 04 	sts	0x04BE, r19	; 0x8004be <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    316c:	20 93 bf 04 	sts	0x04BF, r18	; 0x8004bf <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    3170:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <g_showData+0x7>
							case 4:
								s_isr_smartlcd_cmd_data5(cmd, data[2], data[3], data[4], data[5], data[6]);
							break;

							case 5:
								s_isr_smartlcd_cmd_data6(cmd, data[2], data[3], data[4], data[5], data[6], data[7]);
    3174:	0d c4       	rjmp	.+2074   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3176:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <s_rx_d+0x7>
    317a:	20 91 63 04 	lds	r18, 0x0463	; 0x800463 <s_rx_d+0x6>
    317e:	30 91 62 04 	lds	r19, 0x0462	; 0x800462 <s_rx_d+0x5>
    3182:	40 91 61 04 	lds	r20, 0x0461	; 0x800461 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3186:	50 e3       	ldi	r21, 0x30	; 48
    3188:	50 93 bb 04 	sts	0x04BB, r21	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    318c:	55 e0       	ldi	r21, 0x05	; 5
    318e:	50 93 bc 04 	sts	0x04BC, r21	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    3192:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    3196:	40 93 be 04 	sts	0x04BE, r20	; 0x8004be <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    319a:	30 93 bf 04 	sts	0x04BF, r19	; 0x8004bf <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    319e:	20 93 c0 04 	sts	0x04C0, r18	; 0x8004c0 <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    31a2:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <g_showData+0x8>
							case 5:
								s_isr_smartlcd_cmd_data6(cmd, data[2], data[3], data[4], data[5], data[6], data[7]);
							break;

							case 6:
								s_isr_smartlcd_cmd_data7(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8]);
    31a6:	f4 c3       	rjmp	.+2024   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    31a8:	90 91 65 04 	lds	r25, 0x0465	; 0x800465 <s_rx_d+0x8>
    31ac:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <s_rx_d+0x7>
    31b0:	30 91 63 04 	lds	r19, 0x0463	; 0x800463 <s_rx_d+0x6>
    31b4:	40 91 62 04 	lds	r20, 0x0462	; 0x800462 <s_rx_d+0x5>
    31b8:	50 91 61 04 	lds	r21, 0x0461	; 0x800461 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    31bc:	60 e3       	ldi	r22, 0x30	; 48
    31be:	60 93 bb 04 	sts	0x04BB, r22	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    31c2:	66 e0       	ldi	r22, 0x06	; 6
    31c4:	60 93 bc 04 	sts	0x04BC, r22	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    31c8:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    31cc:	50 93 be 04 	sts	0x04BE, r21	; 0x8004be <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    31d0:	40 93 bf 04 	sts	0x04BF, r20	; 0x8004bf <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    31d4:	30 93 c0 04 	sts	0x04C0, r19	; 0x8004c0 <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    31d8:	20 93 c1 04 	sts	0x04C1, r18	; 0x8004c1 <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    31dc:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <g_showData+0x9>
							case 6:
								s_isr_smartlcd_cmd_data7(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8]);
							break;

							case 7:
								s_isr_smartlcd_cmd_data8(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9]);
    31e0:	d7 c3       	rjmp	.+1966   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    31e2:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <s_rx_d+0x9>
    31e6:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <s_rx_d+0x8>
    31ea:	30 91 64 04 	lds	r19, 0x0464	; 0x800464 <s_rx_d+0x7>
    31ee:	40 91 63 04 	lds	r20, 0x0463	; 0x800463 <s_rx_d+0x6>
    31f2:	50 91 62 04 	lds	r21, 0x0462	; 0x800462 <s_rx_d+0x5>
    31f6:	60 91 61 04 	lds	r22, 0x0461	; 0x800461 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    31fa:	70 e3       	ldi	r23, 0x30	; 48
    31fc:	70 93 bb 04 	sts	0x04BB, r23	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3200:	77 e0       	ldi	r23, 0x07	; 7
    3202:	70 93 bc 04 	sts	0x04BC, r23	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    3206:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    320a:	60 93 be 04 	sts	0x04BE, r22	; 0x8004be <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    320e:	50 93 bf 04 	sts	0x04BF, r21	; 0x8004bf <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    3212:	40 93 c0 04 	sts	0x04C0, r20	; 0x8004c0 <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    3216:	30 93 c1 04 	sts	0x04C1, r19	; 0x8004c1 <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    321a:	20 93 c2 04 	sts	0x04C2, r18	; 0x8004c2 <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    321e:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <g_showData+0xa>
							case 7:
								s_isr_smartlcd_cmd_data8(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9]);
							break;

							case 8:
								s_isr_smartlcd_cmd_data9(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10]);
    3222:	b6 c3       	rjmp	.+1900   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3224:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <s_rx_d+0xa>
    3228:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <s_rx_d+0x9>
    322c:	30 91 65 04 	lds	r19, 0x0465	; 0x800465 <s_rx_d+0x8>
    3230:	40 91 64 04 	lds	r20, 0x0464	; 0x800464 <s_rx_d+0x7>
    3234:	50 91 63 04 	lds	r21, 0x0463	; 0x800463 <s_rx_d+0x6>
    3238:	60 91 62 04 	lds	r22, 0x0462	; 0x800462 <s_rx_d+0x5>
    323c:	70 91 61 04 	lds	r23, 0x0461	; 0x800461 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3240:	e0 e3       	ldi	r30, 0x30	; 48
    3242:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3246:	e8 e0       	ldi	r30, 0x08	; 8
    3248:	e0 93 bc 04 	sts	0x04BC, r30	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    324c:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    3250:	70 93 be 04 	sts	0x04BE, r23	; 0x8004be <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    3254:	60 93 bf 04 	sts	0x04BF, r22	; 0x8004bf <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    3258:	50 93 c0 04 	sts	0x04C0, r21	; 0x8004c0 <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    325c:	40 93 c1 04 	sts	0x04C1, r20	; 0x8004c1 <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    3260:	30 93 c2 04 	sts	0x04C2, r19	; 0x8004c2 <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    3264:	20 93 c3 04 	sts	0x04C3, r18	; 0x8004c3 <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    3268:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <g_showData+0xb>
							case 8:
								s_isr_smartlcd_cmd_data9(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10]);
							break;

							case 9:
								s_isr_smartlcd_cmd_data10(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11]);
    326c:	91 c3       	rjmp	.+1826   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    326e:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <s_rx_d+0xb>
    3272:	20 91 67 04 	lds	r18, 0x0467	; 0x800467 <s_rx_d+0xa>
    3276:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <s_rx_d+0x9>
    327a:	40 91 65 04 	lds	r20, 0x0465	; 0x800465 <s_rx_d+0x8>
    327e:	50 91 64 04 	lds	r21, 0x0464	; 0x800464 <s_rx_d+0x7>
    3282:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <s_rx_d+0x6>
    3286:	70 91 62 04 	lds	r23, 0x0462	; 0x800462 <s_rx_d+0x5>
    328a:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    328e:	f0 e3       	ldi	r31, 0x30	; 48
    3290:	f0 93 bb 04 	sts	0x04BB, r31	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3294:	f9 e0       	ldi	r31, 0x09	; 9
    3296:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    329a:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    329e:	e0 93 be 04 	sts	0x04BE, r30	; 0x8004be <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    32a2:	70 93 bf 04 	sts	0x04BF, r23	; 0x8004bf <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    32a6:	60 93 c0 04 	sts	0x04C0, r22	; 0x8004c0 <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    32aa:	50 93 c1 04 	sts	0x04C1, r21	; 0x8004c1 <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    32ae:	40 93 c2 04 	sts	0x04C2, r20	; 0x8004c2 <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    32b2:	30 93 c3 04 	sts	0x04C3, r19	; 0x8004c3 <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    32b6:	20 93 c4 04 	sts	0x04C4, r18	; 0x8004c4 <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    32ba:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <g_showData+0xc>
							case 9:
								s_isr_smartlcd_cmd_data10(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11]);
							break;

							case 10:
								s_isr_smartlcd_cmd_data11(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12]);
    32be:	68 c3       	rjmp	.+1744   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    32c0:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <s_rx_d+0xc>
    32c4:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <s_rx_d+0xb>
    32c8:	30 91 67 04 	lds	r19, 0x0467	; 0x800467 <s_rx_d+0xa>
    32cc:	40 91 66 04 	lds	r20, 0x0466	; 0x800466 <s_rx_d+0x9>
    32d0:	50 91 65 04 	lds	r21, 0x0465	; 0x800465 <s_rx_d+0x8>
    32d4:	60 91 64 04 	lds	r22, 0x0464	; 0x800464 <s_rx_d+0x7>
    32d8:	70 91 63 04 	lds	r23, 0x0463	; 0x800463 <s_rx_d+0x6>
    32dc:	e0 91 62 04 	lds	r30, 0x0462	; 0x800462 <s_rx_d+0x5>
    32e0:	f0 91 61 04 	lds	r31, 0x0461	; 0x800461 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    32e4:	a0 e3       	ldi	r26, 0x30	; 48
    32e6:	a0 93 bb 04 	sts	0x04BB, r26	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    32ea:	aa e0       	ldi	r26, 0x0A	; 10
    32ec:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    32f0:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    32f4:	f0 93 be 04 	sts	0x04BE, r31	; 0x8004be <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    32f8:	e0 93 bf 04 	sts	0x04BF, r30	; 0x8004bf <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    32fc:	70 93 c0 04 	sts	0x04C0, r23	; 0x8004c0 <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    3300:	60 93 c1 04 	sts	0x04C1, r22	; 0x8004c1 <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    3304:	50 93 c2 04 	sts	0x04C2, r21	; 0x8004c2 <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    3308:	40 93 c3 04 	sts	0x04C3, r20	; 0x8004c3 <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    330c:	30 93 c4 04 	sts	0x04C4, r19	; 0x8004c4 <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    3310:	20 93 c5 04 	sts	0x04C5, r18	; 0x8004c5 <g_showData+0xc>
}

static void s_isr_smartlcd_cmd_data11(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10)
{
	s_isr_smartlcd_cmd_data10(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9);
	g_showData.data[10] = data10;
    3314:	90 93 c6 04 	sts	0x04C6, r25	; 0x8004c6 <g_showData+0xd>
							case 10:
								s_isr_smartlcd_cmd_data11(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12]);
							break;

							case 11:
								s_isr_smartlcd_cmd_data12(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13]);
    3318:	3b c3       	rjmp	.+1654   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    331a:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <s_rx_d+0xd>
    331e:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <s_rx_d+0xc>
    3322:	30 91 68 04 	lds	r19, 0x0468	; 0x800468 <s_rx_d+0xb>
    3326:	40 91 67 04 	lds	r20, 0x0467	; 0x800467 <s_rx_d+0xa>
    332a:	50 91 66 04 	lds	r21, 0x0466	; 0x800466 <s_rx_d+0x9>
    332e:	60 91 65 04 	lds	r22, 0x0465	; 0x800465 <s_rx_d+0x8>
    3332:	70 91 64 04 	lds	r23, 0x0464	; 0x800464 <s_rx_d+0x7>
    3336:	e0 91 63 04 	lds	r30, 0x0463	; 0x800463 <s_rx_d+0x6>
    333a:	f0 91 62 04 	lds	r31, 0x0462	; 0x800462 <s_rx_d+0x5>
    333e:	a0 91 61 04 	lds	r26, 0x0461	; 0x800461 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3342:	b0 e3       	ldi	r27, 0x30	; 48
    3344:	b0 93 bb 04 	sts	0x04BB, r27	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3348:	bb e0       	ldi	r27, 0x0B	; 11
    334a:	b0 93 bc 04 	sts	0x04BC, r27	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    334e:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    3352:	a0 93 be 04 	sts	0x04BE, r26	; 0x8004be <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    3356:	f0 93 bf 04 	sts	0x04BF, r31	; 0x8004bf <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    335a:	e0 93 c0 04 	sts	0x04C0, r30	; 0x8004c0 <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    335e:	70 93 c1 04 	sts	0x04C1, r23	; 0x8004c1 <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    3362:	60 93 c2 04 	sts	0x04C2, r22	; 0x8004c2 <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    3366:	50 93 c3 04 	sts	0x04C3, r21	; 0x8004c3 <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    336a:	40 93 c4 04 	sts	0x04C4, r20	; 0x8004c4 <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    336e:	30 93 c5 04 	sts	0x04C5, r19	; 0x8004c5 <g_showData+0xc>
}

static void s_isr_smartlcd_cmd_data11(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10)
{
	s_isr_smartlcd_cmd_data10(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9);
	g_showData.data[10] = data10;
    3372:	20 93 c6 04 	sts	0x04C6, r18	; 0x8004c6 <g_showData+0xd>
}

static void s_isr_smartlcd_cmd_data12(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11)
{
	s_isr_smartlcd_cmd_data11(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10);
	g_showData.data[11] = data11;
    3376:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <g_showData+0xe>
							case 11:
								s_isr_smartlcd_cmd_data12(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13]);
							break;

							case 12:
								s_isr_smartlcd_cmd_data13(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13], data[14]);
    337a:	0a c3       	rjmp	.+1556   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    337c:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <s_rx_d+0xe>
    3380:	20 91 6a 04 	lds	r18, 0x046A	; 0x80046a <s_rx_d+0xd>
    3384:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <s_rx_d+0xc>
    3388:	40 91 68 04 	lds	r20, 0x0468	; 0x800468 <s_rx_d+0xb>
    338c:	50 91 67 04 	lds	r21, 0x0467	; 0x800467 <s_rx_d+0xa>
    3390:	60 91 66 04 	lds	r22, 0x0466	; 0x800466 <s_rx_d+0x9>
    3394:	70 91 65 04 	lds	r23, 0x0465	; 0x800465 <s_rx_d+0x8>
    3398:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <s_rx_d+0x7>
    339c:	f0 91 63 04 	lds	r31, 0x0463	; 0x800463 <s_rx_d+0x6>
    33a0:	a0 91 62 04 	lds	r26, 0x0462	; 0x800462 <s_rx_d+0x5>
    33a4:	b0 91 61 04 	lds	r27, 0x0461	; 0x800461 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    33a8:	c0 e3       	ldi	r28, 0x30	; 48
    33aa:	c0 93 bb 04 	sts	0x04BB, r28	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    33ae:	cc e0       	ldi	r28, 0x0C	; 12
    33b0:	c0 93 bc 04 	sts	0x04BC, r28	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    33b4:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    33b8:	b0 93 be 04 	sts	0x04BE, r27	; 0x8004be <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    33bc:	a0 93 bf 04 	sts	0x04BF, r26	; 0x8004bf <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    33c0:	f0 93 c0 04 	sts	0x04C0, r31	; 0x8004c0 <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    33c4:	e0 93 c1 04 	sts	0x04C1, r30	; 0x8004c1 <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    33c8:	70 93 c2 04 	sts	0x04C2, r23	; 0x8004c2 <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    33cc:	60 93 c3 04 	sts	0x04C3, r22	; 0x8004c3 <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    33d0:	50 93 c4 04 	sts	0x04C4, r21	; 0x8004c4 <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    33d4:	40 93 c5 04 	sts	0x04C5, r20	; 0x8004c5 <g_showData+0xc>
}

static void s_isr_smartlcd_cmd_data11(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10)
{
	s_isr_smartlcd_cmd_data10(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9);
	g_showData.data[10] = data10;
    33d8:	30 93 c6 04 	sts	0x04C6, r19	; 0x8004c6 <g_showData+0xd>
}

static void s_isr_smartlcd_cmd_data12(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11)
{
	s_isr_smartlcd_cmd_data11(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10);
	g_showData.data[11] = data11;
    33dc:	20 93 c7 04 	sts	0x04C7, r18	; 0x8004c7 <g_showData+0xe>
}

static void s_isr_smartlcd_cmd_data13(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11, uint8_t data12)
{
	s_isr_smartlcd_cmd_data12(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11);
	g_showData.data[12] = data12;
    33e0:	90 93 c8 04 	sts	0x04C8, r25	; 0x8004c8 <g_showData+0xf>
							case 12:
								s_isr_smartlcd_cmd_data13(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13], data[14]);
							break;

							case 13:
								s_isr_smartlcd_cmd_data14(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);
    33e4:	d5 c2       	rjmp	.+1450   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    33e6:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <s_rx_d+0xf>
    33ea:	20 91 6b 04 	lds	r18, 0x046B	; 0x80046b <s_rx_d+0xe>
    33ee:	30 91 6a 04 	lds	r19, 0x046A	; 0x80046a <s_rx_d+0xd>
    33f2:	40 91 69 04 	lds	r20, 0x0469	; 0x800469 <s_rx_d+0xc>
    33f6:	50 91 68 04 	lds	r21, 0x0468	; 0x800468 <s_rx_d+0xb>
    33fa:	60 91 67 04 	lds	r22, 0x0467	; 0x800467 <s_rx_d+0xa>
    33fe:	70 91 66 04 	lds	r23, 0x0466	; 0x800466 <s_rx_d+0x9>
    3402:	e0 91 65 04 	lds	r30, 0x0465	; 0x800465 <s_rx_d+0x8>
    3406:	f0 91 64 04 	lds	r31, 0x0464	; 0x800464 <s_rx_d+0x7>
    340a:	a0 91 63 04 	lds	r26, 0x0463	; 0x800463 <s_rx_d+0x6>
    340e:	b0 91 62 04 	lds	r27, 0x0462	; 0x800462 <s_rx_d+0x5>
    3412:	c0 91 61 04 	lds	r28, 0x0461	; 0x800461 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3416:	d0 e3       	ldi	r29, 0x30	; 48
    3418:	d0 93 bb 04 	sts	0x04BB, r29	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    341c:	dd e0       	ldi	r29, 0x0D	; 13
    341e:	d0 93 bc 04 	sts	0x04BC, r29	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    3422:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    3426:	c0 93 be 04 	sts	0x04BE, r28	; 0x8004be <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    342a:	b0 93 bf 04 	sts	0x04BF, r27	; 0x8004bf <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    342e:	a0 93 c0 04 	sts	0x04C0, r26	; 0x8004c0 <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    3432:	f0 93 c1 04 	sts	0x04C1, r31	; 0x8004c1 <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    3436:	e0 93 c2 04 	sts	0x04C2, r30	; 0x8004c2 <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    343a:	70 93 c3 04 	sts	0x04C3, r23	; 0x8004c3 <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    343e:	60 93 c4 04 	sts	0x04C4, r22	; 0x8004c4 <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    3442:	50 93 c5 04 	sts	0x04C5, r21	; 0x8004c5 <g_showData+0xc>
}

static void s_isr_smartlcd_cmd_data11(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10)
{
	s_isr_smartlcd_cmd_data10(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9);
	g_showData.data[10] = data10;
    3446:	40 93 c6 04 	sts	0x04C6, r20	; 0x8004c6 <g_showData+0xd>
}

static void s_isr_smartlcd_cmd_data12(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11)
{
	s_isr_smartlcd_cmd_data11(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10);
	g_showData.data[11] = data11;
    344a:	30 93 c7 04 	sts	0x04C7, r19	; 0x8004c7 <g_showData+0xe>
}

static void s_isr_smartlcd_cmd_data13(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11, uint8_t data12)
{
	s_isr_smartlcd_cmd_data12(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11);
	g_showData.data[12] = data12;
    344e:	20 93 c8 04 	sts	0x04C8, r18	; 0x8004c8 <g_showData+0xf>
}

static void s_isr_smartlcd_cmd_data14(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11, uint8_t data12, uint8_t data13)
{
	s_isr_smartlcd_cmd_data13(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12);
	g_showData.data[13] = data13;
    3452:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <g_showData+0x10>
					case TWI_SMART_LCD_CMD_DRAW_RECT:			// Draw rectangular frame with pencil's start position with dimension (width, height) with color
						s_isr_smartlcd_cmd_data3(cmd, data[2], data[3], data[4]);
					break;

					case TWI_SMART_LCD_CMD_DRAW_FILLED_RECT:	// Draw filled rectangular frame with pencil's start position with dimension (width, height) with color
						s_isr_smartlcd_cmd_data3(cmd, data[2], data[3], data[4]);
    3456:	9c c2       	rjmp	.+1336   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3458:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <s_rx_d+0x4>
    345c:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <s_rx_d+0x3>
    3460:	20 91 5f 04 	lds	r18, 0x045F	; 0x80045f <s_rx_d+0x2>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3464:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3468:	20 93 bc 04 	sts	0x04BC, r18	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    346c:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    3470:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <g_showData+0x5>
					case TWI_SMART_LCD_CMD_DRAW_CIRC:			// Draw circle or ellipse from the pencil's center point with (radius) with color
						s_isr_smartlcd_cmd_data2(cmd, data[2], data[3]);
					break;

					case TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC:	// Draw filled circle or ellipse from the pencil's center point with (radius) with color
						s_isr_smartlcd_cmd_data2(cmd, data[2], data[3]);
    3474:	8d c2       	rjmp	.+1306   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3476:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <s_rx_d+0x3>
    347a:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <s_rx_d+0x2>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    347e:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3482:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    3486:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <g_showData+0x4>


static uint8_t s_isr_smartlcd_cmd_req_rotbut(uint8_t* data_out)
{
	if (data_out) {
		*data_out	= (uint8_t) ( g_rotenc_events        & 0xff);
    348a:	82 c2       	rjmp	.+1284   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    348c:	30 91 b0 04 	lds	r19, 0x04B0	; 0x8004b0 <g_rotenc_events>
    3490:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <g_rotenc_events+0x1>
    3494:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <g_rotenc_events+0x2>
    3498:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <g_rotenc_events+0x3>
    349c:	30 93 5b 04 	sts	0x045B, r19	; 0x80045b <s_rx_ret_d>
		*++data_out	= (uint8_t) ((g_rotenc_events >>  8) & 0xff);
    34a0:	20 93 5c 04 	sts	0x045C, r18	; 0x80045c <s_rx_ret_d+0x1>
		*++data_out	= (uint8_t) ((g_rotenc_events >> 16) & 0xff);
    34a4:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <s_rx_d>
		*++data_out	= (uint8_t) ((g_rotenc_events >> 24) & 0xff);
    34a8:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <s_rx_d+0x1>

		/* Reset list of events */
		g_rotenc_events = 0;
    34ac:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <g_rotenc_events>
    34b0:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <g_rotenc_events+0x1>
    34b4:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <g_rotenc_events+0x2>
    34b8:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <g_rotenc_events+0x3>
					case TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC:	// Draw filled circle or ellipse from the pencil's center point with (radius) with color
						s_isr_smartlcd_cmd_data2(cmd, data[2], data[3]);
					break;

					case TWI_SMART_LCD_CMD_GET_ROTBUT:			// State of rotary encoder and button: factor of 4 bytes each - 4bits per event - 0: I/Q down, 1: I/Q up, 2: button released, 3: button pressed | 4: another event follows | 8: event list overflowed.
						s_rx_ret_len = s_isr_smartlcd_cmd_req_rotbut(s_rx_ret_d);
    34bc:	84 e0       	ldi	r24, 0x04	; 4
    34be:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <s_rx_ret_len>
}

static uint8_t s_isr_smartlcd_cmd_req_light(uint8_t* data_out)
{
	if (data_out) {
		*data_out = (uint8_t) ((uint16_t)g_adc_light >> 2);
    34c2:	66 c2       	rjmp	.+1228   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    34c4:	60 91 0a 05 	lds	r22, 0x050A	; 0x80050a <g_adc_light>
    34c8:	70 91 0b 05 	lds	r23, 0x050B	; 0x80050b <g_adc_light+0x1>
    34cc:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <g_adc_light+0x2>
    34d0:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <g_adc_light+0x3>
    34d4:	0e 94 9e 22 	call	0x453c	; 0x453c <__fixunssfsi>
    34d8:	76 95       	lsr	r23
    34da:	67 95       	ror	r22
    34dc:	76 95       	lsr	r23
    34de:	67 95       	ror	r22
    34e0:	60 93 5b 04 	sts	0x045B, r22	; 0x80045b <s_rx_ret_d>
						s_rx_ret_len = s_isr_smartlcd_cmd_req_rotbut(s_rx_ret_d);
						return;
					break;

					case TWI_SMART_LCD_CMD_GET_LIGHT:			// Request ambient light: 1 byte - 0..255
						s_rx_ret_len = s_isr_smartlcd_cmd_req_light(s_rx_ret_d);
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <s_rx_ret_len>
	if (data_out) {
		uint8_t hi;
		uint8_t lo;
		float l_temp;

		if (g_temp >= 0.f) {
    34ea:	52 c2       	rjmp	.+1188   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    34ec:	c0 90 02 05 	lds	r12, 0x0502	; 0x800502 <g_temp>
    34f0:	d0 90 03 05 	lds	r13, 0x0503	; 0x800503 <g_temp+0x1>
    34f4:	e0 90 04 05 	lds	r14, 0x0504	; 0x800504 <g_temp+0x2>
    34f8:	f0 90 05 05 	lds	r15, 0x0505	; 0x800505 <g_temp+0x3>
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	a9 01       	movw	r20, r18
    3502:	c7 01       	movw	r24, r14
    3504:	b6 01       	movw	r22, r12
    3506:	0e 94 cf 23 	call	0x479e	; 0x479e <__gesf2>
    350a:	87 fd       	sbrc	r24, 7
			l_temp = g_temp;
			hi = (int8_t)l_temp;
    350c:	18 c0       	rjmp	.+48     	; 0x353e <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x576>
    350e:	c7 01       	movw	r24, r14
    3510:	b6 01       	movw	r22, r12
    3512:	0e 94 99 22 	call	0x4532	; 0x4532 <__fixsfsi>
			lo = (uint8_t) ((l_temp - hi) * 100.f);
    3516:	c6 2f       	mov	r28, r22
    3518:	70 e0       	ldi	r23, 0x00	; 0
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	0e 94 cc 22 	call	0x4598	; 0x4598 <__floatsisf>
    3522:	9b 01       	movw	r18, r22
    3524:	ac 01       	movw	r20, r24
    3526:	c7 01       	movw	r24, r14
    3528:	b6 01       	movw	r22, r12
    352a:	32 d7       	rcall	.+3684   	; 0x4390 <__subsf3>
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	48 ec       	ldi	r20, 0xC8	; 200
    3532:	52 e4       	ldi	r21, 0x42	; 66
    3534:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__mulsf3>
    3538:	0e 94 9e 22 	call	0x453c	; 0x453c <__fixunssfsi>

		} else {
			l_temp = -g_temp;
    353c:	1a c0       	rjmp	.+52     	; 0x3572 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x5aa>
    353e:	f7 fa       	bst	r15, 7
    3540:	f0 94       	com	r15
			hi = (int8_t)l_temp;
    3542:	f7 f8       	bld	r15, 7
    3544:	f0 94       	com	r15
    3546:	c7 01       	movw	r24, r14
    3548:	b6 01       	movw	r22, r12
    354a:	f3 d7       	rcall	.+4070   	; 0x4532 <__fixsfsi>
			lo = (uint8_t) ((l_temp - hi) * 100.f);
    354c:	c6 2f       	mov	r28, r22
    354e:	70 e0       	ldi	r23, 0x00	; 0
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	0e 94 cc 22 	call	0x4598	; 0x4598 <__floatsisf>
    3558:	9b 01       	movw	r18, r22
    355a:	ac 01       	movw	r20, r24
    355c:	c7 01       	movw	r24, r14
    355e:	b6 01       	movw	r22, r12
    3560:	17 d7       	rcall	.+3630   	; 0x4390 <__subsf3>
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	48 ec       	ldi	r20, 0xC8	; 200
    3568:	52 e4       	ldi	r21, 0x42	; 66
    356a:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <__mulsf3>
			hi = -hi;
    356e:	e6 d7       	rcall	.+4044   	; 0x453c <__fixunssfsi>
		}

		*data_out	= hi;
    3570:	c1 95       	neg	r28
    3572:	c0 93 5b 04 	sts	0x045B, r28	; 0x80045b <s_rx_ret_d>
		*++data_out	= lo;
    3576:	60 93 5c 04 	sts	0x045C, r22	; 0x80045c <s_rx_ret_d+0x1>
						s_rx_ret_len = s_isr_smartlcd_cmd_req_light(s_rx_ret_d);
						return;
					break;

					case TWI_SMART_LCD_CMD_GET_TEMP:			// Request temperature: 2 bytes - deg . 1/100 degree
						s_rx_ret_len = s_isr_smartlcd_cmd_req_temp(s_rx_ret_d);
    357a:	82 e0       	ldi	r24, 0x02	; 2
    357c:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <s_rx_ret_len>
						return;
					break;

					case TWI_SMART_LCD_CMD_SET_LEDS:			// LEDs: 1 byte - 0x01 red  0x02 green
						s_isr_smartlcd_cmd_set_leds(cmd, data[2]);
    3580:	07 c2       	rjmp	.+1038   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3582:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <s_rx_d+0x2>
	}
}

static void s_isr_smartlcd_cmd_set_leds(uint8_t cmd, uint8_t leds)
{
	uint8_t cur = PORTB & 0x3f;
    3586:	85 b1       	in	r24, 0x05	; 5

	/* Red LED */
	if (leds & 0x01) {
    3588:	8f 73       	andi	r24, 0x3F	; 63
		cur |= _BV(PORTB6);
    358a:	90 fd       	sbrc	r25, 0
	}

	/* Green LED */
	if (leds & 0x02) {
    358c:	80 64       	ori	r24, 0x40	; 64
		cur |= _BV(PORTB7);
    358e:	91 fd       	sbrc	r25, 1
	}

	PORTB = cur;
    3590:	80 68       	ori	r24, 0x80	; 128
    3592:	85 b9       	out	0x05, r24	; 5
					case TWI_SMART_LCD_CMD_SET_LEDS:			// LEDs: 1 byte - 0x01 red  0x02 green
						s_isr_smartlcd_cmd_set_leds(cmd, data[2]);
					break;

					case TWI_SMART_LCD_CMD_SET_BEEP:			// Sound beep: 2 bytes - length x10ms, pitch x10Hz
						s_isr_smartlcd_cmd_set_beep(cmd, data[2], data[3]);
    3594:	fd c1       	rjmp	.+1018   	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3596:	c0 91 5f 04 	lds	r28, 0x045F	; 0x80045f <s_rx_d+0x2>
static void s_isr_smartlcd_cmd_set_beep(uint8_t cmd, uint8_t length_10ms, uint8_t pitch_10Hz)
{
	/* Set the pitch of the tone */
	{
		uint32_t l_audio_out_inc = ((uint32_t)pitch_10Hz * 10 * 0x00010000UL) / 15625U;
		g_audio_out_inc = (uint16_t) (l_audio_out_inc < 0xffff ?  l_audio_out_inc : 0xffff);
    359a:	a0 91 60 04 	lds	r26, 0x0460	; 0x800460 <s_rx_d+0x3>
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	4a e0       	ldi	r20, 0x0A	; 10
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	0e 94 a0 24 	call	0x4940	; 0x4940 <__muluhisi3>
    35ac:	29 e0       	ldi	r18, 0x09	; 9
    35ae:	3d e3       	ldi	r19, 0x3D	; 61
    35b0:	40 e0       	ldi	r20, 0x00	; 0
    35b2:	50 e0       	ldi	r21, 0x00	; 0
    35b4:	0e 94 69 24 	call	0x48d2	; 0x48d2 <__udivmodsi4>
    35b8:	30 93 fe 04 	sts	0x04FE, r19	; 0x8004fe <g_audio_out_inc+0x1>
    35bc:	20 93 fd 04 	sts	0x04FD, r18	; 0x8004fd <g_audio_out_inc>
	}

	/* Set duration of beep - 122 equals to one second */
	{
		uint16_t l_audio_out_length = (122U * length_10ms) / 100;
    35c0:	2a e7       	ldi	r18, 0x7A	; 122
    35c2:	c2 9f       	mul	r28, r18
    35c4:	c0 01       	movw	r24, r0
    35c6:	11 24       	eor	r1, r1
    35c8:	64 e6       	ldi	r22, 0x64	; 100
    35ca:	70 e0       	ldi	r23, 0x00	; 0
    35cc:	0e 94 42 24 	call	0x4884	; 0x4884 <__udivmodhi4>
		g_audio_out_length = (uint8_t) (l_audio_out_length < 255 ?  l_audio_out_length : 255);
    35d0:	6f 3f       	cpi	r22, 0xFF	; 255
    35d2:	71 05       	cpc	r23, r1
    35d4:	08 f0       	brcs	.+2      	; 0x35d8 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x610>
    35d6:	6f ef       	ldi	r22, 0xFF	; 255
    35d8:	60 93 fc 04 	sts	0x04FC, r22	; 0x8004fc <g_audio_out_length>
	}
}

static void s_isr_smartlcd_cmd_set_backlight(uint8_t cmd, uint8_t mode, uint8_t pwm)
{
	if (mode & 0x01) {
    35dc:	d9 c1       	rjmp	.+946    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    35de:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <s_rx_d+0x2>
    35e2:	80 ff       	sbrs	r24, 0
		g_lcdbl_auto = true;
    35e4:	04 c0       	rjmp	.+8      	; 0x35ee <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x626>
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <g_lcdbl_auto>
					case TWI_SMART_LCD_CMD_SET_BEEP:			// Sound beep: 2 bytes - length x10ms, pitch x10Hz
						s_isr_smartlcd_cmd_set_beep(cmd, data[2], data[3]);
					break;

					case TWI_SMART_LCD_CMD_SET_BACKLIGHT:		// LCD backlight: 2 bytes - 0x01 automatic, 0..255 (0% .. 100%)
						s_isr_smartlcd_cmd_set_backlight(cmd, data[2], data[3]);
    35ec:	d1 c1       	rjmp	.+930    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    35ee:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <s_rx_d+0x3>
{
	if (mode & 0x01) {
		g_lcdbl_auto = true;

	} else {
		g_lcdbl_auto = false;
    35f2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <g_lcdbl_auto>

		if (pwm) {
    35f6:	88 23       	and	r24, r24
			OCR2A = pwm;
    35f8:	41 f0       	breq	.+16     	; 0x360a <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x642>
    35fa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

			/* Switch on PWM */
			TCCR2A |= (0b10 << COM2A0);
    35fe:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3602:	80 68       	ori	r24, 0x80	; 128
    3604:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>

		} else {
			/* Switch off PWM */
			TCCR2A &= ~(0b11  << COM2A0);
    3608:	c3 c1       	rjmp	.+902    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    360a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    360e:	8f 73       	andi	r24, 0x3F	; 63
    3610:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
					case TWI_SMART_LCD_CMD_SET_BACKLIGHT:		// LCD backlight: 2 bytes - 0x01 automatic, 0..255 (0% .. 100%)
						s_isr_smartlcd_cmd_set_backlight(cmd, data[2], data[3]);
					break;

					case TWI_SMART_LCD_CMD_SET_CONTRAST:		// LCD contrast: 1 byte - 0..63 (bias voltage)
						s_isr_smartlcd_cmd_set_contrast(cmd, data[2]);
    3614:	bd c1       	rjmp	.+890    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3616:	c0 91 5f 04 	lds	r28, 0x045F	; 0x80045f <s_rx_d+0x2>
	}
}

static void s_isr_smartlcd_cmd_set_contrast(uint8_t cmd, uint8_t bias)
{
	g_lcd_contrast_pm = bias & 0x3f;
    361a:	8c 2f       	mov	r24, r28
    361c:	8f 73       	andi	r24, 0x3F	; 63
    361e:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <g_lcd_contrast_pm>
	lcd_contrast_update();
    3622:	0e 94 95 0c 	call	0x192a	; 0x192a <lcd_contrast_update>

	if (bias & 0x80) {
    3626:	c7 ff       	sbrs	r28, 7
		eeprom_nvm_settings_write(C_EEPROM_NVM_SETTING_LCD_CONTRAST);
    3628:	b3 c1       	rjmp	.+870    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
					// do nothing for unsupported commands
				}
			}  // switch (cmd)
		}  // if (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC)
	}  // if ((data[0] == TWI_SLAVE_ADDR_SMARTLCD))
}
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	ff 90       	pop	r15
    3632:	ef 90       	pop	r14
{
	g_lcd_contrast_pm = bias & 0x3f;
	lcd_contrast_update();

	if (bias & 0x80) {
		eeprom_nvm_settings_write(C_EEPROM_NVM_SETTING_LCD_CONTRAST);
    3634:	df 90       	pop	r13
    3636:	cf 90       	pop	r12
					}
				}  // switch (cmd)
			}  // if (!(g_showData.cmd))
		}  // if (g_SmartLCD_mode == C_SMART_LCD_MODE_SMARTLCD)

		else if (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC) {
    3638:	a8 c3       	rjmp	.+1872   	; 0x3d8a <eeprom_nvm_settings_write>
    363a:	80 32       	cpi	r24, 0x20	; 32
    363c:	09 f0       	breq	.+2      	; 0x3640 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x678>
			switch (cmd) {
    363e:	a8 c1       	rjmp	.+848    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3640:	8e 2f       	mov	r24, r30
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	fc 01       	movw	r30, r24
    3646:	e0 58       	subi	r30, 0x80	; 128
    3648:	f1 09       	sbc	r31, r1
    364a:	ee 30       	cpi	r30, 0x0E	; 14
    364c:	f1 05       	cpc	r31, r1
    364e:	08 f0       	brcs	.+2      	; 0x3652 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x68a>
    3650:	9f c1       	rjmp	.+830    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3652:	ef 5b       	subi	r30, 0xBF	; 191
    3654:	ff 4f       	sbci	r31, 0xFF	; 255
    3656:	0c 94 8b 24 	jmp	0x4916	; 0x4916 <__tablejump2__>
				case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
					s_isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100(data[2], (uint16_t) (data[3] | (data[4] << 8)), (int16_t) (data[5] | (data[6] << 8)));
    365a:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <s_rx_d+0x5>
    365e:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <s_rx_d+0x6>
    3662:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <s_rx_d+0x3>
    3666:	30 91 61 04 	lds	r19, 0x0461	; 0x800461 <s_rx_d+0x4>
    366a:	40 91 5f 04 	lds	r20, 0x045F	; 0x80045f <s_rx_d+0x2>


static void s_isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100(uint8_t clk_state, uint16_t phaseVolt1000, int16_t phaseDeg100)
{
	// interrupt is already disabled, here
	if ((g_showData.clkState_clk_state     != clk_state    )  ||
    366e:	50 91 e3 04 	lds	r21, 0x04E3	; 0x8004e3 <g_showData+0x2a>
    3672:	45 13       	cpse	r20, r21
    3674:	0f c0       	rjmp	.+30     	; 0x3694 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x6cc>
    3676:	60 91 cf 04 	lds	r22, 0x04CF	; 0x8004cf <g_showData+0x16>
    367a:	70 91 d0 04 	lds	r23, 0x04D0	; 0x8004d0 <g_showData+0x17>
    367e:	62 17       	cp	r22, r18
    3680:	73 07       	cpc	r23, r19
	(g_showData.clkState_phaseVolt1000 != phaseVolt1000)  ||
    3682:	41 f4       	brne	.+16     	; 0x3694 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x6cc>
    3684:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <g_showData+0x18>
    3688:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <g_showData+0x19>
    368c:	86 17       	cp	r24, r22
    368e:	97 07       	cpc	r25, r23
    3690:	09 f4       	brne	.+2      	; 0x3694 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x6cc>
	(g_showData.clkState_phaseDeg100   != phaseDeg100  )) {
		g_showData.newClkState            = true;
    3692:	7e c1       	rjmp	.+764    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3694:	50 91 b9 04 	lds	r21, 0x04B9	; 0x8004b9 <g_showData>
    3698:	51 60       	ori	r21, 0x01	; 1
    369a:	50 93 b9 04 	sts	0x04B9, r21	; 0x8004b9 <g_showData>
		g_showData.clkState_clk_state     = clk_state;
    369e:	40 93 e3 04 	sts	0x04E3, r20	; 0x8004e3 <g_showData+0x2a>
		g_showData.clkState_phaseVolt1000 = phaseVolt1000;
    36a2:	30 93 d0 04 	sts	0x04D0, r19	; 0x8004d0 <g_showData+0x17>
    36a6:	20 93 cf 04 	sts	0x04CF, r18	; 0x8004cf <g_showData+0x16>
		g_showData.clkState_phaseDeg100   = phaseDeg100;
    36aa:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <g_showData+0x19>
    36ae:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <g_showData+0x18>
				case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
					s_isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100(data[2], (uint16_t) (data[3] | (data[4] << 8)), (int16_t) (data[5] | (data[6] << 8)));
				break;

				case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
					s_isr_lcd_10mhz_ref_osc_show_date(data[2] | (data[3] << 8), data[4], data[5]);
    36b2:	6e c1       	rjmp	.+732    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    36b4:	20 91 62 04 	lds	r18, 0x0462	; 0x800462 <s_rx_d+0x5>
    36b8:	30 91 61 04 	lds	r19, 0x0461	; 0x800461 <s_rx_d+0x4>
    36bc:	40 91 5f 04 	lds	r20, 0x045F	; 0x80045f <s_rx_d+0x2>
    36c0:	50 91 60 04 	lds	r21, 0x0460	; 0x800460 <s_rx_d+0x3>
}

static void s_isr_lcd_10mhz_ref_osc_show_date(uint16_t year, int8_t month, uint8_t day)
{
	// interrupt is already disabled, here
	if (g_showData.date_year != year ||
    36c4:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_showData+0x1a>
    36c8:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <g_showData+0x1b>
    36cc:	84 17       	cp	r24, r20
    36ce:	95 07       	cpc	r25, r21
    36d0:	79 f4       	brne	.+30     	; 0x36f0 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x728>
    36d2:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <g_showData+0x2b>
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	63 2f       	mov	r22, r19
    36da:	03 2e       	mov	r0, r19
    36dc:	00 0c       	add	r0, r0
    36de:	77 0b       	sbc	r23, r23
    36e0:	86 17       	cp	r24, r22
    36e2:	97 07       	cpc	r25, r23
	g_showData.date_month != month ||
    36e4:	29 f4       	brne	.+10     	; 0x36f0 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x728>
    36e6:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <g_showData+0x2c>
    36ea:	28 17       	cp	r18, r24
    36ec:	09 f4       	brne	.+2      	; 0x36f0 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x728>
	g_showData.date_day != day) {
		g_showData.newDate = true;
    36ee:	50 c1       	rjmp	.+672    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    36f0:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <g_showData>
    36f4:	82 60       	ori	r24, 0x02	; 2
    36f6:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <g_showData>
		g_showData.date_year = year;
    36fa:	50 93 d4 04 	sts	0x04D4, r21	; 0x8004d4 <g_showData+0x1b>
    36fe:	40 93 d3 04 	sts	0x04D3, r20	; 0x8004d3 <g_showData+0x1a>
		g_showData.date_month = month;
    3702:	30 93 e4 04 	sts	0x04E4, r19	; 0x8004e4 <g_showData+0x2b>
		g_showData.date_day = day;
    3706:	20 93 e5 04 	sts	0x04E5, r18	; 0x8004e5 <g_showData+0x2c>
				case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
					s_isr_lcd_10mhz_ref_osc_show_date(data[2] | (data[3] << 8), data[4], data[5]);
				break;

				case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
					s_isr_lcd_10mhz_ref_osc_show_time(data[2], data[3], data[4]);
    370a:	42 c1       	rjmp	.+644    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    370c:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <s_rx_d+0x4>
    3710:	30 91 60 04 	lds	r19, 0x0460	; 0x800460 <s_rx_d+0x3>
    3714:	40 91 5f 04 	lds	r20, 0x045F	; 0x80045f <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_time(uint8_t hour, int8_t minute, uint8_t second)
{
	// interrupt is already disabled, here
	if (g_showData.time_hour != hour ||
    3718:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <g_showData+0x2d>
    371c:	48 13       	cpse	r20, r24
    371e:	0f c0       	rjmp	.+30     	; 0x373e <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x776>
    3720:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <g_showData+0x2e>
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	63 2f       	mov	r22, r19
    3728:	03 2e       	mov	r0, r19
    372a:	00 0c       	add	r0, r0
    372c:	77 0b       	sbc	r23, r23
    372e:	86 17       	cp	r24, r22
    3730:	97 07       	cpc	r25, r23
	g_showData.time_minute != minute ||
    3732:	29 f4       	brne	.+10     	; 0x373e <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x776>
    3734:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <g_showData+0x2f>
    3738:	28 17       	cp	r18, r24
    373a:	09 f4       	brne	.+2      	; 0x373e <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x776>
	g_showData.time_second != second) {
		g_showData.newTime = true;
    373c:	29 c1       	rjmp	.+594    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    373e:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <g_showData>
    3742:	84 60       	ori	r24, 0x04	; 4
    3744:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <g_showData>
		g_showData.time_hour = hour;
    3748:	40 93 e6 04 	sts	0x04E6, r20	; 0x8004e6 <g_showData+0x2d>
		g_showData.time_minute = minute;
    374c:	30 93 e7 04 	sts	0x04E7, r19	; 0x8004e7 <g_showData+0x2e>
		g_showData.time_second = second;
    3750:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <g_showData+0x2f>
    3754:	1d c1       	rjmp	.+570    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3756:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <s_rx_d+0x4>
    375a:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <s_rx_d+0x5>
				case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
					s_isr_lcd_10mhz_ref_osc_show_time(data[2], data[3], data[4]);
				break;

				case TWI_SMART_LCD_CMD_SHOW_PPB:
					s_isr_lcd_10mhz_ref_osc_show_ppm((int16_t) (data[2] | (data[3] << 8)), data[4] | (data[5] << 8));
    375e:	20 91 5f 04 	lds	r18, 0x045F	; 0x80045f <s_rx_d+0x2>
    3762:	30 91 60 04 	lds	r19, 0x0460	; 0x800460 <s_rx_d+0x3>
}

static void s_isr_lcd_10mhz_ref_osc_show_ppm(int16_t ppm_int, uint16_t ppm_frac1000)
{
	// interrupt is already disabled, here
	if (g_showData.ppb_int != ppm_int ||
    3766:	40 91 d5 04 	lds	r20, 0x04D5	; 0x8004d5 <g_showData+0x1c>
    376a:	50 91 d6 04 	lds	r21, 0x04D6	; 0x8004d6 <g_showData+0x1d>
    376e:	24 17       	cp	r18, r20
    3770:	35 07       	cpc	r19, r21
    3772:	41 f4       	brne	.+16     	; 0x3784 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x7bc>
    3774:	40 91 d7 04 	lds	r20, 0x04D7	; 0x8004d7 <g_showData+0x1e>
    3778:	50 91 d8 04 	lds	r21, 0x04D8	; 0x8004d8 <g_showData+0x1f>
    377c:	48 17       	cp	r20, r24
    377e:	59 07       	cpc	r21, r25
    3780:	09 f4       	brne	.+2      	; 0x3784 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x7bc>
	g_showData.ppb_frac1000 != ppm_frac1000) {
		g_showData.newPpb = true;
    3782:	06 c1       	rjmp	.+524    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3784:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <g_showData>
    3788:	48 60       	ori	r20, 0x08	; 8
    378a:	40 93 b9 04 	sts	0x04B9, r20	; 0x8004b9 <g_showData>
		g_showData.ppb_int = ppm_int;
    378e:	30 93 d6 04 	sts	0x04D6, r19	; 0x8004d6 <g_showData+0x1d>
    3792:	20 93 d5 04 	sts	0x04D5, r18	; 0x8004d5 <g_showData+0x1c>
		g_showData.ppb_frac1000 = ppm_frac1000;
    3796:	90 93 d8 04 	sts	0x04D8, r25	; 0x8004d8 <g_showData+0x1f>
    379a:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <g_showData+0x1e>
				case TWI_SMART_LCD_CMD_SHOW_PPB:
					s_isr_lcd_10mhz_ref_osc_show_ppm((int16_t) (data[2] | (data[3] << 8)), data[4] | (data[5] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
					s_isr_lcd_10mhz_ref_osc_show_pwm(data[2], data[3]);
    379e:	f8 c0       	rjmp	.+496    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    37a0:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <s_rx_d+0x3>
    37a4:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pwm(uint8_t pwm_int, uint8_t pwm_frac256)
{
	// interrupt is already disabled, here
	if (g_showData.pwm_int != pwm_int ||
    37a8:	20 91 e9 04 	lds	r18, 0x04E9	; 0x8004e9 <g_showData+0x30>
    37ac:	92 13       	cpse	r25, r18
    37ae:	05 c0       	rjmp	.+10     	; 0x37ba <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x7f2>
    37b0:	20 91 ea 04 	lds	r18, 0x04EA	; 0x8004ea <g_showData+0x31>
    37b4:	82 17       	cp	r24, r18
    37b6:	09 f4       	brne	.+2      	; 0x37ba <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x7f2>
	g_showData.pwm_frac256 != pwm_frac256) {
		g_showData.newPwm = true;
    37b8:	eb c0       	rjmp	.+470    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    37ba:	20 91 b9 04 	lds	r18, 0x04B9	; 0x8004b9 <g_showData>
    37be:	20 61       	ori	r18, 0x10	; 16
    37c0:	20 93 b9 04 	sts	0x04B9, r18	; 0x8004b9 <g_showData>
		g_showData.pwm_int = pwm_int;
    37c4:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <g_showData+0x30>
		g_showData.pwm_frac256 = pwm_frac256;
    37c8:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <g_showData+0x31>
    37cc:	e1 c0       	rjmp	.+450    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    37ce:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <s_rx_d+0x3>
    37d2:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <s_rx_d+0x4>
				case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
					s_isr_lcd_10mhz_ref_osc_show_pwm(data[2], data[3]);
				break;

				case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
					s_isr_lcd_10mhz_ref_osc_show_pv(data[2], data[3] | (data[4] << 8));
    37d6:	20 91 5f 04 	lds	r18, 0x045F	; 0x80045f <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pv(uint8_t pv_int, uint16_t pv_frac1000)
{
	// interrupt is already disabled, here
	if (g_showData.pv_int != pv_int ||
    37da:	30 91 eb 04 	lds	r19, 0x04EB	; 0x8004eb <g_showData+0x32>
    37de:	23 13       	cpse	r18, r19
    37e0:	08 c0       	rjmp	.+16     	; 0x37f2 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x82a>
    37e2:	40 91 d9 04 	lds	r20, 0x04D9	; 0x8004d9 <g_showData+0x20>
    37e6:	50 91 da 04 	lds	r21, 0x04DA	; 0x8004da <g_showData+0x21>
    37ea:	48 17       	cp	r20, r24
    37ec:	59 07       	cpc	r21, r25
    37ee:	09 f4       	brne	.+2      	; 0x37f2 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x82a>
	g_showData.pv_frac1000 != pv_frac1000) {
		g_showData.newPv = true;
    37f0:	cf c0       	rjmp	.+414    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    37f2:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <g_showData>
    37f6:	30 62       	ori	r19, 0x20	; 32
    37f8:	30 93 b9 04 	sts	0x04B9, r19	; 0x8004b9 <g_showData>
		g_showData.pv_int = pv_int;
    37fc:	20 93 eb 04 	sts	0x04EB, r18	; 0x8004eb <g_showData+0x32>
		g_showData.pv_frac1000 = pv_frac1000;
    3800:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <g_showData+0x21>
    3804:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <g_showData+0x20>
				case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
					s_isr_lcd_10mhz_ref_osc_show_pv(data[2], data[3] | (data[4] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_SATS:
					s_isr_lcd_10mhz_ref_osc_show_sat_use(data[2], data[3], data[4]);
    3808:	c3 c0       	rjmp	.+390    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    380a:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <s_rx_d+0x4>
    380e:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <s_rx_d+0x3>
    3812:	20 91 5f 04 	lds	r18, 0x045F	; 0x80045f <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_sat_use(uint8_t sat_west, uint8_t sat_east, uint8_t sat_used)
{
	// interrupt is already disabled, here
	if (g_showData.satUse_west != sat_west ||
    3816:	30 91 ec 04 	lds	r19, 0x04EC	; 0x8004ec <g_showData+0x33>
    381a:	23 13       	cpse	r18, r19
    381c:	09 c0       	rjmp	.+18     	; 0x3830 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x868>
    381e:	30 91 ed 04 	lds	r19, 0x04ED	; 0x8004ed <g_showData+0x34>
    3822:	93 13       	cpse	r25, r19
	g_showData.satUse_east != sat_east ||
    3824:	05 c0       	rjmp	.+10     	; 0x3830 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x868>
    3826:	30 91 ee 04 	lds	r19, 0x04EE	; 0x8004ee <g_showData+0x35>
    382a:	83 17       	cp	r24, r19
    382c:	09 f4       	brne	.+2      	; 0x3830 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x868>
	g_showData.satUse_used != sat_used) {
		g_showData.newSatUse = true;
    382e:	b0 c0       	rjmp	.+352    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3830:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <g_showData>
    3834:	30 64       	ori	r19, 0x40	; 64
    3836:	30 93 b9 04 	sts	0x04B9, r19	; 0x8004b9 <g_showData>
		g_showData.satUse_west = sat_west;
    383a:	20 93 ec 04 	sts	0x04EC, r18	; 0x8004ec <g_showData+0x33>
		g_showData.satUse_east = sat_east;
    383e:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <g_showData+0x34>
		g_showData.satUse_used = sat_used;
    3842:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <g_showData+0x35>
    3846:	a4 c0       	rjmp	.+328    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3848:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <s_rx_d+0x2>
    384c:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <s_rx_d+0x3>
}

static void s_isr_lcd_10mhz_ref_osc_show_sat_dop(uint16_t sat_dop100)
{
	// interrupt is already disabled, here
	if (g_showData.satDop_dop100 != sat_dop100) {
    3850:	20 91 db 04 	lds	r18, 0x04DB	; 0x8004db <g_showData+0x22>
    3854:	30 91 dc 04 	lds	r19, 0x04DC	; 0x8004dc <g_showData+0x23>
    3858:	28 17       	cp	r18, r24
    385a:	39 07       	cpc	r19, r25
    385c:	09 f4       	brne	.+2      	; 0x3860 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x898>
		g_showData.newSatDop = true;
    385e:	98 c0       	rjmp	.+304    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3860:	20 91 b9 04 	lds	r18, 0x04B9	; 0x8004b9 <g_showData>
    3864:	20 68       	ori	r18, 0x80	; 128
    3866:	20 93 b9 04 	sts	0x04B9, r18	; 0x8004b9 <g_showData>
		g_showData.satDop_dop100 = sat_dop100;
    386a:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <g_showData+0x23>
    386e:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <g_showData+0x22>
				case TWI_SMART_LCD_CMD_SHOW_DOP:
					s_isr_lcd_10mhz_ref_osc_show_sat_dop(data[2] | (data[3] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
					s_isr_lcd_10mhz_ref_osc_show_pos_state(data[2], data[3]);
    3872:	8e c0       	rjmp	.+284    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3874:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <s_rx_d+0x3>
    3878:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pos_state(uint8_t state_fi, uint8_t state_m2)
{
	// interrupt is already disabled, here
	if (g_showData.posState_fi != state_fi ||
    387c:	20 91 ef 04 	lds	r18, 0x04EF	; 0x8004ef <g_showData+0x36>
    3880:	92 13       	cpse	r25, r18
    3882:	05 c0       	rjmp	.+10     	; 0x388e <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x8c6>
    3884:	20 91 f0 04 	lds	r18, 0x04F0	; 0x8004f0 <g_showData+0x37>
    3888:	82 17       	cp	r24, r18
    388a:	09 f4       	brne	.+2      	; 0x388e <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x8c6>
	g_showData.posState_m2 != state_m2) {
		g_showData.newPosState = true;
    388c:	81 c0       	rjmp	.+258    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    388e:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <g_showData+0x1>
    3892:	21 60       	ori	r18, 0x01	; 1
    3894:	20 93 ba 04 	sts	0x04BA, r18	; 0x8004ba <g_showData+0x1>
		g_showData.posState_fi = state_fi;
    3898:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <g_showData+0x36>
		g_showData.posState_m2 = state_m2;
    389c:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <g_showData+0x37>
    38a0:	77 c0       	rjmp	.+238    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    38a2:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <s_rx_d+0x5>
    38a6:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <s_rx_d+0x6>
				case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
					s_isr_lcd_10mhz_ref_osc_show_pos_state(data[2], data[3]);
				break;

				case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
					s_isr_lcd_10mhz_ref_osc_show_pos_lat(data[2], data[3], data[4], data[5] | (data[6] << 8));
    38aa:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <s_rx_d+0x4>
    38ae:	30 91 60 04 	lds	r19, 0x0460	; 0x800460 <s_rx_d+0x3>
    38b2:	40 91 5f 04 	lds	r20, 0x045F	; 0x80045f <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pos_lat(uint8_t lat_sgn, uint8_t lat_deg, uint8_t lat_min_int, uint16_t lat_min_frac10000)
{
	// interrupt is already disabled, here
	if (g_showData.posLat_sgn != lat_sgn ||
    38b6:	50 91 f1 04 	lds	r21, 0x04F1	; 0x8004f1 <g_showData+0x38>
    38ba:	45 13       	cpse	r20, r21
    38bc:	10 c0       	rjmp	.+32     	; 0x38de <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x916>
    38be:	50 91 f2 04 	lds	r21, 0x04F2	; 0x8004f2 <g_showData+0x39>
    38c2:	35 13       	cpse	r19, r21
	g_showData.posLat_deg != lat_deg ||
    38c4:	0c c0       	rjmp	.+24     	; 0x38de <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x916>
    38c6:	50 91 f3 04 	lds	r21, 0x04F3	; 0x8004f3 <g_showData+0x3a>
    38ca:	25 13       	cpse	r18, r21
	g_showData.posLat_min_int != lat_min_int ||
	g_showData.posLat_min_int != lat_min_int ||
    38cc:	08 c0       	rjmp	.+16     	; 0x38de <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x916>
    38ce:	60 91 dd 04 	lds	r22, 0x04DD	; 0x8004dd <g_showData+0x24>
    38d2:	70 91 de 04 	lds	r23, 0x04DE	; 0x8004de <g_showData+0x25>
    38d6:	68 17       	cp	r22, r24
    38d8:	79 07       	cpc	r23, r25
    38da:	09 f4       	brne	.+2      	; 0x38de <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x916>
	g_showData.posLat_min_frac10000 != lat_min_frac10000) {
		g_showData.newPosLat = true;
    38dc:	59 c0       	rjmp	.+178    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    38de:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <g_showData+0x1>
    38e2:	52 60       	ori	r21, 0x02	; 2
    38e4:	50 93 ba 04 	sts	0x04BA, r21	; 0x8004ba <g_showData+0x1>
		g_showData.posLat_sgn = lat_sgn;
    38e8:	40 93 f1 04 	sts	0x04F1, r20	; 0x8004f1 <g_showData+0x38>
		g_showData.posLat_deg = lat_deg;
    38ec:	30 93 f2 04 	sts	0x04F2, r19	; 0x8004f2 <g_showData+0x39>
		g_showData.posLat_min_int = lat_min_int;
    38f0:	20 93 f3 04 	sts	0x04F3, r18	; 0x8004f3 <g_showData+0x3a>
		g_showData.posLat_min_frac10000 = lat_min_frac10000;
    38f4:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <g_showData+0x25>
    38f8:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <g_showData+0x24>
    38fc:	49 c0       	rjmp	.+146    	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    38fe:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <s_rx_d+0x5>
    3902:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <s_rx_d+0x6>
				case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
					s_isr_lcd_10mhz_ref_osc_show_pos_lat(data[2], data[3], data[4], data[5] | (data[6] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_POS_LON:
					s_isr_lcd_10mhz_ref_osc_show_pos_lon(data[2], data[3], data[4], data[5] | (data[6] << 8));
    3906:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <s_rx_d+0x4>
    390a:	30 91 60 04 	lds	r19, 0x0460	; 0x800460 <s_rx_d+0x3>
    390e:	40 91 5f 04 	lds	r20, 0x045F	; 0x80045f <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pos_lon(uint8_t lon_sgn, uint8_t lon_deg, uint8_t lon_min_int, uint16_t lon_min_frac10000)
{
	// interrupt is already disabled, here
	if (g_showData.posLon_sgn != lon_sgn ||
    3912:	50 91 f4 04 	lds	r21, 0x04F4	; 0x8004f4 <g_showData+0x3b>
    3916:	45 13       	cpse	r20, r21
    3918:	0f c0       	rjmp	.+30     	; 0x3938 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x970>
    391a:	50 91 f5 04 	lds	r21, 0x04F5	; 0x8004f5 <g_showData+0x3c>
    391e:	35 13       	cpse	r19, r21
	g_showData.posLon_deg != lon_deg ||
	g_showData.posLon_deg != lon_deg ||
    3920:	0b c0       	rjmp	.+22     	; 0x3938 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x970>
    3922:	50 91 f6 04 	lds	r21, 0x04F6	; 0x8004f6 <g_showData+0x3d>
    3926:	25 13       	cpse	r18, r21
	g_showData.posLon_min_int != lon_min_int ||
    3928:	07 c0       	rjmp	.+14     	; 0x3938 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x970>
    392a:	60 91 df 04 	lds	r22, 0x04DF	; 0x8004df <g_showData+0x26>
    392e:	70 91 e0 04 	lds	r23, 0x04E0	; 0x8004e0 <g_showData+0x27>
    3932:	68 17       	cp	r22, r24
    3934:	79 07       	cpc	r23, r25
	g_showData.posLon_min_frac10000 != lon_min_frac10000) {
		g_showData.newPosLon = true;
    3936:	61 f1       	breq	.+88     	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3938:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <g_showData+0x1>
    393c:	54 60       	ori	r21, 0x04	; 4
    393e:	50 93 ba 04 	sts	0x04BA, r21	; 0x8004ba <g_showData+0x1>
		g_showData.posLon_sgn = lon_sgn;
    3942:	40 93 f4 04 	sts	0x04F4, r20	; 0x8004f4 <g_showData+0x3b>
		g_showData.posLon_deg = lon_deg;
    3946:	30 93 f5 04 	sts	0x04F5, r19	; 0x8004f5 <g_showData+0x3c>
		g_showData.posLon_min_int = lon_min_int;
    394a:	20 93 f6 04 	sts	0x04F6, r18	; 0x8004f6 <g_showData+0x3d>
		g_showData.posLon_min_frac10000 = lon_min_frac10000;
    394e:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <g_showData+0x27>
    3952:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <g_showData+0x26>
				case TWI_SMART_LCD_CMD_SHOW_POS_LON:
					s_isr_lcd_10mhz_ref_osc_show_pos_lon(data[2], data[3], data[4], data[5] | (data[6] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT:
					s_isr_lcd_10mhz_ref_osc_show_pos_height((data[2] | (data[3] << 8)), data[4]);
    3956:	1c c0       	rjmp	.+56     	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    3958:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <s_rx_d+0x4>
    395c:	20 91 5f 04 	lds	r18, 0x045F	; 0x80045f <s_rx_d+0x2>
    3960:	30 91 60 04 	lds	r19, 0x0460	; 0x800460 <s_rx_d+0x3>
}

static void s_isr_lcd_10mhz_ref_osc_show_pos_height(int16_t height_int, uint8_t height_frac10)
{
	// interrupt is already disabled, here
	if ((g_showData.pos_height_int != height_int) || (g_showData.pos_height_frac10 != height_frac10)) {
    3964:	40 91 e1 04 	lds	r20, 0x04E1	; 0x8004e1 <g_showData+0x28>
    3968:	50 91 e2 04 	lds	r21, 0x04E2	; 0x8004e2 <g_showData+0x29>
    396c:	24 17       	cp	r18, r20
    396e:	35 07       	cpc	r19, r21
    3970:	21 f4       	brne	.+8      	; 0x397a <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9b2>
    3972:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <g_showData+0x3e>
    3976:	89 17       	cp	r24, r25
		g_showData.newPosHeight = true;
    3978:	59 f0       	breq	.+22     	; 0x3990 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6+0x9c8>
    397a:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <g_showData+0x1>
    397e:	98 60       	ori	r25, 0x08	; 8
    3980:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <g_showData+0x1>
		g_showData.pos_height_int = height_int;
    3984:	30 93 e2 04 	sts	0x04E2, r19	; 0x8004e2 <g_showData+0x29>
    3988:	20 93 e1 04 	sts	0x04E1, r18	; 0x8004e1 <g_showData+0x28>
		g_showData.pos_height_frac10 = height_frac10;
    398c:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <g_showData+0x3e>
					// do nothing for unsupported commands
				}
			}  // switch (cmd)
		}  // if (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC)
	}  // if ((data[0] == TWI_SLAVE_ADDR_SMARTLCD))
}
    3990:	df 91       	pop	r29
    3992:	cf 91       	pop	r28
    3994:	ff 90       	pop	r15
    3996:	ef 90       	pop	r14
    3998:	df 90       	pop	r13
    399a:	cf 90       	pop	r12
    399c:	08 95       	ret

0000399e <__vector_24__bottom>:


uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur)
{
    399e:	cf 93       	push	r28
    39a0:	df 93       	push	r29
    39a2:	d6 2f       	mov	r29, r22
	static uint8_t pos_i	= 0;
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur & 0b01000101;
    39a4:	c4 2f       	mov	r28, r20
    39a6:	c5 74       	andi	r28, 0x45	; 69

	switch(tws) {
    39a8:	88 36       	cpi	r24, 0x68	; 104
    39aa:	09 f4       	brne	.+2      	; 0x39ae <__vector_24__bottom+0x10>
    39ac:	8b c0       	rjmp	.+278    	; 0x3ac4 <__vector_24__bottom+0x126>
    39ae:	08 f0       	brcs	.+2      	; 0x39b2 <__vector_24__bottom+0x14>
    39b0:	42 c0       	rjmp	.+132    	; 0x3a36 <__vector_24__bottom+0x98>
    39b2:	80 33       	cpi	r24, 0x30	; 48
    39b4:	09 f4       	brne	.+2      	; 0x39b8 <__vector_24__bottom+0x1a>
    39b6:	7f c0       	rjmp	.+254    	; 0x3ab6 <__vector_24__bottom+0x118>
    39b8:	48 f5       	brcc	.+82     	; 0x3a0c <__vector_24__bottom+0x6e>
    39ba:	80 31       	cpi	r24, 0x10	; 16
    39bc:	09 f4       	brne	.+2      	; 0x39c0 <__vector_24__bottom+0x22>
    39be:	66 c0       	rjmp	.+204    	; 0x3a8c <__vector_24__bottom+0xee>
    39c0:	d8 f4       	brcc	.+54     	; 0x39f8 <__vector_24__bottom+0x5a>
    39c2:	88 23       	and	r24, r24
    39c4:	09 f4       	brne	.+2      	; 0x39c8 <__vector_24__bottom+0x2a>
    39c6:	87 c1       	rjmp	.+782    	; 0x3cd6 <__vector_24__bottom+0x338>
    39c8:	88 30       	cpi	r24, 0x08	; 8
    39ca:	09 f0       	breq	.+2      	; 0x39ce <__vector_24__bottom+0x30>
    39cc:	84 c1       	rjmp	.+776    	; 0x3cd6 <__vector_24__bottom+0x338>

	/* Master Transmitter Mode */

	case TWI_TWSR_START:						// Start condition transmitted
		s_tx_lock = 1;
		pos_o = 0;
    39ce:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <pos_o.3176>

		cnt_o = 2;								// TEST
    39d2:	82 e0       	ldi	r24, 0x02	; 2
    39d4:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <cnt_o.3178>
		s_tx_d[0] = (0x12 << TWD1) | (0b0 << TWD0);	// TEST
    39d8:	84 e2       	ldi	r24, 0x24	; 36
    39da:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <s_tx_d>
		s_tx_d[1] = 0x34;						// TEST
    39de:	84 e3       	ldi	r24, 0x34	; 52
    39e0:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <s_tx_d+0x1>
		s_tx_d[2] = 0x56;						// TEST
    39e4:	86 e5       	ldi	r24, 0x56	; 86
    39e6:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <s_tx_d+0x2>
		s_tx_d[3] = 0x78;						// TEST
    39ea:	88 e7       	ldi	r24, 0x78	; 120
    39ec:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <s_tx_d+0x3>
		s_tx_d[4] = 0x9a;						// TEST
    39f0:	8a e9       	ldi	r24, 0x9A	; 154
    39f2:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <s_tx_d+0x4>
    39f6:	4a c0       	rjmp	.+148    	; 0x3a8c <__vector_24__bottom+0xee>
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur & 0b01000101;

	switch(tws) {
    39f8:	80 32       	cpi	r24, 0x20	; 32
    39fa:	09 f4       	brne	.+2      	; 0x39fe <__vector_24__bottom+0x60>
    39fc:	5d c0       	rjmp	.+186    	; 0x3ab8 <__vector_24__bottom+0x11a>
    39fe:	88 32       	cpi	r24, 0x28	; 40
    3a00:	09 f4       	brne	.+2      	; 0x3a04 <__vector_24__bottom+0x66>
    3a02:	48 c0       	rjmp	.+144    	; 0x3a94 <__vector_24__bottom+0xf6>
    3a04:	88 31       	cpi	r24, 0x18	; 24
    3a06:	09 f0       	breq	.+2      	; 0x3a0a <__vector_24__bottom+0x6c>
    3a08:	66 c1       	rjmp	.+716    	; 0x3cd6 <__vector_24__bottom+0x338>
    3a0a:	41 c0       	rjmp	.+130    	; 0x3a8e <__vector_24__bottom+0xf0>
    3a0c:	88 34       	cpi	r24, 0x48	; 72
    3a0e:	09 f4       	brne	.+2      	; 0x3a12 <__vector_24__bottom+0x74>
    3a10:	57 c0       	rjmp	.+174    	; 0x3ac0 <__vector_24__bottom+0x122>
    3a12:	38 f4       	brcc	.+14     	; 0x3a22 <__vector_24__bottom+0x84>
    3a14:	88 33       	cpi	r24, 0x38	; 56
    3a16:	09 f4       	brne	.+2      	; 0x3a1a <__vector_24__bottom+0x7c>
    3a18:	51 c0       	rjmp	.+162    	; 0x3abc <__vector_24__bottom+0x11e>
    3a1a:	80 34       	cpi	r24, 0x40	; 64
    3a1c:	09 f4       	brne	.+2      	; 0x3a20 <__vector_24__bottom+0x82>
    3a1e:	50 c0       	rjmp	.+160    	; 0x3ac0 <__vector_24__bottom+0x122>
    3a20:	5a c1       	rjmp	.+692    	; 0x3cd6 <__vector_24__bottom+0x338>
    3a22:	88 35       	cpi	r24, 0x58	; 88
    3a24:	09 f4       	brne	.+2      	; 0x3a28 <__vector_24__bottom+0x8a>
    3a26:	4c c0       	rjmp	.+152    	; 0x3ac0 <__vector_24__bottom+0x122>
    3a28:	80 36       	cpi	r24, 0x60	; 96
    3a2a:	09 f4       	brne	.+2      	; 0x3a2e <__vector_24__bottom+0x90>
    3a2c:	4b c0       	rjmp	.+150    	; 0x3ac4 <__vector_24__bottom+0x126>
    3a2e:	80 35       	cpi	r24, 0x50	; 80
    3a30:	09 f4       	brne	.+2      	; 0x3a34 <__vector_24__bottom+0x96>
    3a32:	46 c0       	rjmp	.+140    	; 0x3ac0 <__vector_24__bottom+0x122>
    3a34:	50 c1       	rjmp	.+672    	; 0x3cd6 <__vector_24__bottom+0x338>
    3a36:	80 3a       	cpi	r24, 0xA0	; 160
    3a38:	09 f4       	brne	.+2      	; 0x3a3c <__vector_24__bottom+0x9e>
    3a3a:	29 c1       	rjmp	.+594    	; 0x3c8e <__vector_24__bottom+0x2f0>
    3a3c:	a8 f4       	brcc	.+42     	; 0x3a68 <__vector_24__bottom+0xca>
    3a3e:	80 38       	cpi	r24, 0x80	; 128
    3a40:	09 f4       	brne	.+2      	; 0x3a44 <__vector_24__bottom+0xa6>
    3a42:	4d c0       	rjmp	.+154    	; 0x3ade <__vector_24__bottom+0x140>
    3a44:	38 f4       	brcc	.+14     	; 0x3a54 <__vector_24__bottom+0xb6>
    3a46:	80 37       	cpi	r24, 0x70	; 112
    3a48:	09 f4       	brne	.+2      	; 0x3a4c <__vector_24__bottom+0xae>
    3a4a:	41 c0       	rjmp	.+130    	; 0x3ace <__vector_24__bottom+0x130>
    3a4c:	88 37       	cpi	r24, 0x78	; 120
    3a4e:	09 f4       	brne	.+2      	; 0x3a52 <__vector_24__bottom+0xb4>
    3a50:	3e c0       	rjmp	.+124    	; 0x3ace <__vector_24__bottom+0x130>
    3a52:	41 c1       	rjmp	.+642    	; 0x3cd6 <__vector_24__bottom+0x338>
    3a54:	80 39       	cpi	r24, 0x90	; 144
    3a56:	09 f4       	brne	.+2      	; 0x3a5a <__vector_24__bottom+0xbc>
    3a58:	42 c0       	rjmp	.+132    	; 0x3ade <__vector_24__bottom+0x140>
    3a5a:	88 39       	cpi	r24, 0x98	; 152
    3a5c:	09 f4       	brne	.+2      	; 0x3a60 <__vector_24__bottom+0xc2>
    3a5e:	07 c1       	rjmp	.+526    	; 0x3c6e <__vector_24__bottom+0x2d0>
    3a60:	88 38       	cpi	r24, 0x88	; 136
    3a62:	09 f0       	breq	.+2      	; 0x3a66 <__vector_24__bottom+0xc8>
    3a64:	38 c1       	rjmp	.+624    	; 0x3cd6 <__vector_24__bottom+0x338>
    3a66:	03 c1       	rjmp	.+518    	; 0x3c6e <__vector_24__bottom+0x2d0>
    3a68:	88 3b       	cpi	r24, 0xB8	; 184
    3a6a:	09 f4       	brne	.+2      	; 0x3a6e <__vector_24__bottom+0xd0>
    3a6c:	19 c1       	rjmp	.+562    	; 0x3ca0 <__vector_24__bottom+0x302>
    3a6e:	20 f4       	brcc	.+8      	; 0x3a78 <__vector_24__bottom+0xda>
    3a70:	88 3a       	cpi	r24, 0xA8	; 168
    3a72:	09 f4       	brne	.+2      	; 0x3a76 <__vector_24__bottom+0xd8>
    3a74:	15 c1       	rjmp	.+554    	; 0x3ca0 <__vector_24__bottom+0x302>
    3a76:	2f c1       	rjmp	.+606    	; 0x3cd6 <__vector_24__bottom+0x338>
    3a78:	88 3c       	cpi	r24, 0xC8	; 200
    3a7a:	09 f4       	brne	.+2      	; 0x3a7e <__vector_24__bottom+0xe0>
    3a7c:	2a c1       	rjmp	.+596    	; 0x3cd2 <__vector_24__bottom+0x334>
    3a7e:	88 3f       	cpi	r24, 0xF8	; 248
    3a80:	09 f4       	brne	.+2      	; 0x3a84 <__vector_24__bottom+0xe6>
    3a82:	29 c1       	rjmp	.+594    	; 0x3cd6 <__vector_24__bottom+0x338>
    3a84:	80 3c       	cpi	r24, 0xC0	; 192
    3a86:	09 f4       	brne	.+2      	; 0x3a8a <__vector_24__bottom+0xec>
    3a88:	24 c1       	rjmp	.+584    	; 0x3cd2 <__vector_24__bottom+0x334>
    3a8a:	25 c1       	rjmp	.+586    	; 0x3cd6 <__vector_24__bottom+0x338>
		s_tx_d[2] = 0x56;						// TEST
		s_tx_d[3] = 0x78;						// TEST
		s_tx_d[4] = 0x9a;						// TEST
		// fall-through.
	case TWI_TWSR_REPEATEDSTART:				// Repeated start condition transmitted
		nop();
    3a8c:	00 00       	nop
		// fall-through.
	case TWI_TWSR_M_SLAW_ADDR_ACK:				// SLA+W transmitted and ACK received
		TWDR = s_tx_d[pos_o++];
    3a8e:	e0 91 59 04 	lds	r30, 0x0459	; 0x800459 <pos_o.3176>
    3a92:	06 c0       	rjmp	.+12     	; 0x3aa0 <__vector_24__bottom+0x102>
	case TWI_TWSR_M_SLAW_ADDR_NACK:				// SLA+W transmitted and NACK received
		twcr_new |= _BV(TWSTO);					// Send STOP
	break;

	case TWI_TWSR_M_SLAW_DATA_ACK:				// Data byte sent and ACK received
		if (pos_o < cnt_o) {
    3a94:	e0 91 59 04 	lds	r30, 0x0459	; 0x800459 <pos_o.3176>
    3a98:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <cnt_o.3178>
    3a9c:	e8 17       	cp	r30, r24
    3a9e:	58 f4       	brcc	.+22     	; 0x3ab6 <__vector_24__bottom+0x118>
			TWDR = s_tx_d[pos_o++];				// Send new data byte
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	8e 0f       	add	r24, r30
    3aa4:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <pos_o.3176>
    3aa8:	f0 e0       	ldi	r31, 0x00	; 0
    3aaa:	e3 59       	subi	r30, 0x93	; 147
    3aac:	fb 4f       	sbci	r31, 0xFB	; 251
    3aae:	80 81       	ld	r24, Z
    3ab0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		} else {
			s_tx_lock = 0;
			s_twi_tx_done();					// Message sent
    3ab4:	11 c1       	rjmp	.+546    	; 0x3cd8 <__vector_24__bottom+0x33a>
			twcr_new |= _BV(TWSTO);				// Send STOP - no more data available
    3ab6:	79 da       	rcall	.-2830   	; 0x2faa <s_twi_tx_done>
    3ab8:	c0 61       	ori	r28, 0x10	; 16
		s_twi_tx_done();						// Message failure
		twcr_new |= _BV(TWSTO);					// Send STOP - due to an error or slave not ready situation
	break;

	case TWI_TWSR_M_SLAW_ARBIT_LOST:			// Arbitration lost
		twcr_new |= _BV(TWSTA);					// Send START (again)
    3aba:	0e c1       	rjmp	.+540    	; 0x3cd8 <__vector_24__bottom+0x33a>
	break;
    3abc:	c0 62       	ori	r28, 0x20	; 32
	case TWI_TWSR_M_SLAR_DATA_ACK:
		nop();
	break;

	case TWI_TWSR_M_SLAR_DATA_NACK:
		nop();
    3abe:	0c c1       	rjmp	.+536    	; 0x3cd8 <__vector_24__bottom+0x33a>
	break;
    3ac0:	00 00       	nop

	/* Slave Receiver Mode */

	case TWI_TWSR_S_SLAW_MYADDR_RECEIVED:		// SLA+W received and ACK returned
	case TWI_TWSR_S_SLAW_MYADDR_ARBIT_LOST:
		mem_set(s_rx_d, TWI_SMART_LCD_SLAVE_BUF_LEN, 0x00);
    3ac2:	0a c1       	rjmp	.+532    	; 0x3cd8 <__vector_24__bottom+0x33a>
    3ac4:	40 e0       	ldi	r20, 0x00	; 0
    3ac6:	60 e1       	ldi	r22, 0x10	; 16
    3ac8:	8d e5       	ldi	r24, 0x5D	; 93
    3aca:	94 e0       	ldi	r25, 0x04	; 4
		twcr_new |= _BV(TWEA);					// Send ACK
	break;

	case TWI_TWSR_S_SLAW_OMNIADDR_RECEIVED:		// GCA received and ACK sent
	case TWI_TWSR_S_SLAW_OMNIADDR_ARBIT_LOST:
		s_rx_d[0] = twd >> 1;					// GCA
    3acc:	53 d1       	rcall	.+678    	; 0x3d74 <mem_set>
    3ace:	d6 95       	lsr	r29
    3ad0:	d0 93 5d 04 	sts	0x045D, r29	; 0x80045d <s_rx_d>
		pos_i = 1;								// Starting of reception
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <pos_i.3175>
		twcr_new |= _BV(TWEA);					// Send after next coming data byte ACK
	break;
    3ada:	c0 64       	ori	r28, 0x40	; 64

	case TWI_TWSR_S_SLAW_MYADDR_DATA_ACK:		// Data after SLA+W received
	case TWI_TWSR_S_SLAW_OMNIADDR_DATA_ACK:
		if (cnt_i != 0b1111) {					// Closed parameter form
    3adc:	fd c0       	rjmp	.+506    	; 0x3cd8 <__vector_24__bottom+0x33a>
    3ade:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <cnt_i.3177>
    3ae2:	8f 30       	cpi	r24, 0x0F	; 15
    3ae4:	09 f4       	brne	.+2      	; 0x3ae8 <__vector_24__bottom+0x14a>
			if (pos_i < 0b1111) {
    3ae6:	bc c0       	rjmp	.+376    	; 0x3c60 <__vector_24__bottom+0x2c2>
    3ae8:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <pos_i.3175>
    3aec:	9f 30       	cpi	r25, 0x0F	; 15
    3aee:	08 f0       	brcs	.+2      	; 0x3af2 <__vector_24__bottom+0x154>
				s_rx_d[pos_i] = twd;			// [1]=cmd, [2..]=parameters
    3af0:	ad c0       	rjmp	.+346    	; 0x3c4c <__vector_24__bottom+0x2ae>
    3af2:	e9 2f       	mov	r30, r25
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	e3 5a       	subi	r30, 0xA3	; 163
    3af8:	fb 4f       	sbci	r31, 0xFB	; 251
			}

			if (pos_i == 1) {
    3afa:	d0 83       	st	Z, r29
    3afc:	91 30       	cpi	r25, 0x01	; 1
    3afe:	09 f0       	breq	.+2      	; 0x3b02 <__vector_24__bottom+0x164>
				/* Load receive counter */
				if (s_rx_d[0] == TWI_SLAVE_ADDR_SMARTLCD) {
    3b00:	91 c0       	rjmp	.+290    	; 0x3c24 <__vector_24__bottom+0x286>
    3b02:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <s_rx_d>
    3b06:	82 32       	cpi	r24, 0x22	; 34
    3b08:	09 f0       	breq	.+2      	; 0x3b0c <__vector_24__bottom+0x16e>
					cnt_i = 0;
    3b0a:	a2 c0       	rjmp	.+324    	; 0x3c50 <__vector_24__bottom+0x2b2>
    3b0c:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <cnt_i.3177>
					cnt_o = 0;
    3b10:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <cnt_o.3178>

					switch (s_rx_d[1]) {
    3b14:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <s_rx_d+0x1>
    3b18:	85 36       	cpi	r24, 0x65	; 101
    3b1a:	09 f4       	brne	.+2      	; 0x3b1e <__vector_24__bottom+0x180>
    3b1c:	62 c0       	rjmp	.+196    	; 0x3be2 <__vector_24__bottom+0x244>
    3b1e:	b0 f5       	brcc	.+108    	; 0x3b8c <__vector_24__bottom+0x1ee>
    3b20:	80 32       	cpi	r24, 0x20	; 32
    3b22:	09 f4       	brne	.+2      	; 0x3b26 <__vector_24__bottom+0x188>
    3b24:	6f c0       	rjmp	.+222    	; 0x3c04 <__vector_24__bottom+0x266>
    3b26:	a0 f4       	brcc	.+40     	; 0x3b50 <__vector_24__bottom+0x1b2>
    3b28:	83 30       	cpi	r24, 0x03	; 3
    3b2a:	09 f4       	brne	.+2      	; 0x3b2e <__vector_24__bottom+0x190>
    3b2c:	54 c0       	rjmp	.+168    	; 0x3bd6 <__vector_24__bottom+0x238>
    3b2e:	30 f4       	brcc	.+12     	; 0x3b3c <__vector_24__bottom+0x19e>
    3b30:	81 30       	cpi	r24, 0x01	; 1
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <__vector_24__bottom+0x198>
    3b34:	50 c0       	rjmp	.+160    	; 0x3bd6 <__vector_24__bottom+0x238>
    3b36:	08 f4       	brcc	.+2      	; 0x3b3a <__vector_24__bottom+0x19c>
    3b38:	61 c0       	rjmp	.+194    	; 0x3bfc <__vector_24__bottom+0x25e>
    3b3a:	84 c0       	rjmp	.+264    	; 0x3c44 <__vector_24__bottom+0x2a6>
    3b3c:	80 31       	cpi	r24, 0x10	; 16
    3b3e:	08 f4       	brcc	.+2      	; 0x3b42 <__vector_24__bottom+0x1a4>
    3b40:	87 c0       	rjmp	.+270    	; 0x3c50 <__vector_24__bottom+0x2b2>
    3b42:	82 31       	cpi	r24, 0x12	; 18
    3b44:	08 f4       	brcc	.+2      	; 0x3b48 <__vector_24__bottom+0x1aa>
    3b46:	5a c0       	rjmp	.+180    	; 0x3bfc <__vector_24__bottom+0x25e>
    3b48:	84 31       	cpi	r24, 0x14	; 20
    3b4a:	09 f4       	brne	.+2      	; 0x3b4e <__vector_24__bottom+0x1b0>
    3b4c:	7b c0       	rjmp	.+246    	; 0x3c44 <__vector_24__bottom+0x2a6>
    3b4e:	80 c0       	rjmp	.+256    	; 0x3c50 <__vector_24__bottom+0x2b2>
    3b50:	86 33       	cpi	r24, 0x36	; 54
    3b52:	09 f4       	brne	.+2      	; 0x3b56 <__vector_24__bottom+0x1b8>
    3b54:	5b c0       	rjmp	.+182    	; 0x3c0c <__vector_24__bottom+0x26e>
    3b56:	68 f4       	brcc	.+26     	; 0x3b72 <__vector_24__bottom+0x1d4>
    3b58:	82 33       	cpi	r24, 0x32	; 50
    3b5a:	09 f4       	brne	.+2      	; 0x3b5e <__vector_24__bottom+0x1c0>
    3b5c:	57 c0       	rjmp	.+174    	; 0x3c0c <__vector_24__bottom+0x26e>
    3b5e:	84 33       	cpi	r24, 0x34	; 52
    3b60:	09 f4       	brne	.+2      	; 0x3b64 <__vector_24__bottom+0x1c6>
    3b62:	54 c0       	rjmp	.+168    	; 0x3c0c <__vector_24__bottom+0x26e>
    3b64:	80 33       	cpi	r24, 0x30	; 48
    3b66:	09 f0       	breq	.+2      	; 0x3b6a <__vector_24__bottom+0x1cc>
						case TWI_SMART_LCD_CMD_SHOW_POS_LON:
							cnt_i = 6;
						break;

						case TWI_SMART_LCD_CMD_WRITE:
							cnt_i = TWI_SMART_LCD_SLAVE_BUF_LEN;	// Max length of incoming data
    3b68:	73 c0       	rjmp	.+230    	; 0x3c50 <__vector_24__bottom+0x2b2>
    3b6a:	80 e1       	ldi	r24, 0x10	; 16
    3b6c:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <cnt_i.3177>
				/* Load receive counter */
				if (s_rx_d[0] == TWI_SLAVE_ADDR_SMARTLCD) {
					cnt_i = 0;
					cnt_o = 0;

					switch (s_rx_d[1]) {
    3b70:	6f c0       	rjmp	.+222    	; 0x3c50 <__vector_24__bottom+0x2b2>
    3b72:	8a 33       	cpi	r24, 0x3A	; 58
    3b74:	09 f4       	brne	.+2      	; 0x3b78 <__vector_24__bottom+0x1da>
    3b76:	46 c0       	rjmp	.+140    	; 0x3c04 <__vector_24__bottom+0x266>
    3b78:	20 f4       	brcc	.+8      	; 0x3b82 <__vector_24__bottom+0x1e4>
    3b7a:	88 33       	cpi	r24, 0x38	; 56
    3b7c:	09 f4       	brne	.+2      	; 0x3b80 <__vector_24__bottom+0x1e2>
    3b7e:	42 c0       	rjmp	.+132    	; 0x3c04 <__vector_24__bottom+0x266>
    3b80:	67 c0       	rjmp	.+206    	; 0x3c50 <__vector_24__bottom+0x2b2>
    3b82:	80 36       	cpi	r24, 0x60	; 96
    3b84:	a1 f1       	breq	.+104    	; 0x3bee <__vector_24__bottom+0x250>
    3b86:	84 36       	cpi	r24, 0x64	; 100
    3b88:	31 f1       	breq	.+76     	; 0x3bd6 <__vector_24__bottom+0x238>
    3b8a:	62 c0       	rjmp	.+196    	; 0x3c50 <__vector_24__bottom+0x2b2>
    3b8c:	83 38       	cpi	r24, 0x83	; 131
    3b8e:	09 f4       	brne	.+2      	; 0x3b92 <__vector_24__bottom+0x1f4>
    3b90:	41 c0       	rjmp	.+130    	; 0x3c14 <__vector_24__bottom+0x276>
    3b92:	90 f4       	brcc	.+36     	; 0x3bb8 <__vector_24__bottom+0x21a>
    3b94:	85 37       	cpi	r24, 0x75	; 117
    3b96:	09 f4       	brne	.+2      	; 0x3b9a <__vector_24__bottom+0x1fc>
    3b98:	55 c0       	rjmp	.+170    	; 0x3c44 <__vector_24__bottom+0x2a6>
    3b9a:	40 f4       	brcc	.+16     	; 0x3bac <__vector_24__bottom+0x20e>
    3b9c:	81 37       	cpi	r24, 0x71	; 113
    3b9e:	91 f1       	breq	.+100    	; 0x3c04 <__vector_24__bottom+0x266>
    3ba0:	84 37       	cpi	r24, 0x74	; 116
    3ba2:	81 f1       	breq	.+96     	; 0x3c04 <__vector_24__bottom+0x266>
    3ba4:	80 37       	cpi	r24, 0x70	; 112
    3ba6:	09 f0       	breq	.+2      	; 0x3baa <__vector_24__bottom+0x20c>
    3ba8:	53 c0       	rjmp	.+166    	; 0x3c50 <__vector_24__bottom+0x2b2>
    3baa:	4c c0       	rjmp	.+152    	; 0x3c44 <__vector_24__bottom+0x2a6>
    3bac:	81 38       	cpi	r24, 0x81	; 129
    3bae:	91 f1       	breq	.+100    	; 0x3c14 <__vector_24__bottom+0x276>
    3bb0:	68 f5       	brcc	.+90     	; 0x3c0c <__vector_24__bottom+0x26e>
    3bb2:	80 38       	cpi	r24, 0x80	; 128
    3bb4:	99 f1       	breq	.+102    	; 0x3c1c <__vector_24__bottom+0x27e>
    3bb6:	4c c0       	rjmp	.+152    	; 0x3c50 <__vector_24__bottom+0x2b2>
    3bb8:	8b 38       	cpi	r24, 0x8B	; 139
    3bba:	40 f4       	brcc	.+16     	; 0x3bcc <__vector_24__bottom+0x22e>
    3bbc:	89 38       	cpi	r24, 0x89	; 137
    3bbe:	10 f5       	brcc	.+68     	; 0x3c04 <__vector_24__bottom+0x266>
    3bc0:	85 38       	cpi	r24, 0x85	; 133
    3bc2:	21 f1       	breq	.+72     	; 0x3c0c <__vector_24__bottom+0x26e>
    3bc4:	f8 f0       	brcs	.+62     	; 0x3c04 <__vector_24__bottom+0x266>
    3bc6:	88 38       	cpi	r24, 0x88	; 136
    3bc8:	09 f1       	breq	.+66     	; 0x3c0c <__vector_24__bottom+0x26e>
    3bca:	42 c0       	rjmp	.+132    	; 0x3c50 <__vector_24__bottom+0x2b2>
    3bcc:	8d 38       	cpi	r24, 0x8D	; 141
    3bce:	30 f1       	brcs	.+76     	; 0x3c1c <__vector_24__bottom+0x27e>
    3bd0:	8d 38       	cpi	r24, 0x8D	; 141
    3bd2:	e1 f0       	breq	.+56     	; 0x3c0c <__vector_24__bottom+0x26e>
						case TWI_SMART_LCD_CMD_GET_VER:
						case TWI_SMART_LCD_CMD_GET_STATE:
						case TWI_SMART_LCD_CMD_GET_LIGHT:
							cnt_i = 1;
    3bd4:	3d c0       	rjmp	.+122    	; 0x3c50 <__vector_24__bottom+0x2b2>
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <cnt_i.3177>
							cnt_o = 1;
    3bdc:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <cnt_o.3178>
						break;

						case TWI_SMART_LCD_CMD_GET_TEMP:
							cnt_i = 1;
    3be0:	37 c0       	rjmp	.+110    	; 0x3c50 <__vector_24__bottom+0x2b2>
    3be2:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <cnt_i.3177>
							cnt_o = 2;
    3be6:	82 e0       	ldi	r24, 0x02	; 2
    3be8:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <cnt_o.3178>
						break;

						case TWI_SMART_LCD_CMD_GET_ROTBUT:
							cnt_i = 1;
    3bec:	31 c0       	rjmp	.+98     	; 0x3c50 <__vector_24__bottom+0x2b2>
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <cnt_i.3177>
							cnt_o = 4;
    3bf4:	84 e0       	ldi	r24, 0x04	; 4
    3bf6:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <cnt_o.3178>


						case TWI_SMART_LCD_CMD_NOOP:
						case TWI_SMART_LCD_CMD_RESET:
						case TWI_SMART_LCD_CMD_CLS:
						cnt_i = 1;
    3bfa:	2a c0       	rjmp	.+84     	; 0x3c50 <__vector_24__bottom+0x2b2>
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <cnt_i.3177>
						case TWI_SMART_LCD_CMD_SET_BEEP:
						case TWI_SMART_LCD_CMD_SET_BACKLIGHT:
						case TWI_SMART_LCD_CMD_SHOW_DOP:
						case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
						case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
							cnt_i = 3;
    3c02:	26 c0       	rjmp	.+76     	; 0x3c50 <__vector_24__bottom+0x2b2>
    3c04:	83 e0       	ldi	r24, 0x03	; 3
    3c06:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <cnt_i.3177>
						case TWI_SMART_LCD_CMD_DRAW_FILLED_RECT:
						case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
						case TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT:
						case TWI_SMART_LCD_CMD_SHOW_SATS:
						case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
							cnt_i = 4;
    3c0a:	22 c0       	rjmp	.+68     	; 0x3c50 <__vector_24__bottom+0x2b2>
    3c0c:	84 e0       	ldi	r24, 0x04	; 4
    3c0e:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <cnt_i.3177>
						break;

						case TWI_SMART_LCD_CMD_SHOW_PPB:
						case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
							cnt_i = 5;
    3c12:	1e c0       	rjmp	.+60     	; 0x3c50 <__vector_24__bottom+0x2b2>
    3c14:	85 e0       	ldi	r24, 0x05	; 5
    3c16:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <cnt_i.3177>
						break;

						case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
						case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
						case TWI_SMART_LCD_CMD_SHOW_POS_LON:
							cnt_i = 6;
    3c1a:	1a c0       	rjmp	.+52     	; 0x3c50 <__vector_24__bottom+0x2b2>
    3c1c:	86 e0       	ldi	r24, 0x06	; 6
    3c1e:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <cnt_i.3177>
							cnt_i = TWI_SMART_LCD_SLAVE_BUF_LEN;	// Max length of incoming data
						break;
					}
				}
			}
			else if (pos_i == 2) {
    3c22:	16 c0       	rjmp	.+44     	; 0x3c50 <__vector_24__bottom+0x2b2>
    3c24:	92 30       	cpi	r25, 0x02	; 2
				if (s_rx_d[0] == TWI_SLAVE_ADDR_SMARTLCD) {
    3c26:	91 f4       	brne	.+36     	; 0x3c4c <__vector_24__bottom+0x2ae>
    3c28:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <s_rx_d>
    3c2c:	82 32       	cpi	r24, 0x22	; 34
					if (s_rx_d[1] == TWI_SMART_LCD_CMD_WRITE) {
    3c2e:	81 f4       	brne	.+32     	; 0x3c50 <__vector_24__bottom+0x2b2>
    3c30:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <s_rx_d+0x1>
    3c34:	80 33       	cpi	r24, 0x30	; 48
						/* Correct length of string to actual size */
						uint8_t str_len = s_rx_d[2];
    3c36:	61 f4       	brne	.+24     	; 0x3c50 <__vector_24__bottom+0x2b2>
    3c38:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <s_rx_d+0x2>
						cnt_i = ((str_len <= (TWI_SMART_LCD_SLAVE_BUF_LEN - 2)) && (str_len < 0b1111)) ?  (str_len + 2) : 2;
    3c3c:	8f 30       	cpi	r24, 0x0F	; 15
    3c3e:	10 f4       	brcc	.+4      	; 0x3c44 <__vector_24__bottom+0x2a6>
    3c40:	8e 5f       	subi	r24, 0xFE	; 254
    3c42:	01 c0       	rjmp	.+2      	; 0x3c46 <__vector_24__bottom+0x2a8>
    3c44:	82 e0       	ldi	r24, 0x02	; 2
    3c46:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <cnt_i.3177>
					}
				}
			}

			if (pos_i < 0b1110) {
    3c4a:	02 c0       	rjmp	.+4      	; 0x3c50 <__vector_24__bottom+0x2b2>
    3c4c:	9e 30       	cpi	r25, 0x0E	; 14
				if (++pos_i <= cnt_i) {
    3c4e:	60 f4       	brcc	.+24     	; 0x3c68 <__vector_24__bottom+0x2ca>
    3c50:	9f 5f       	subi	r25, 0xFF	; 255
    3c52:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <pos_i.3175>
    3c56:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <cnt_i.3177>
    3c5a:	89 17       	cp	r24, r25
    3c5c:	28 f0       	brcs	.+10     	; 0x3c68 <__vector_24__bottom+0x2ca>
			} else {
				twcr_new &= ~_BV(TWEA);			// Send NACK
			}

		} else {								// Open parameter form
			s_rx_d[2] = twd;
    3c5e:	39 c0       	rjmp	.+114    	; 0x3cd2 <__vector_24__bottom+0x334>
    3c60:	d0 93 5f 04 	sts	0x045F, r29	; 0x80045f <s_rx_d+0x2>
			if (!s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i)) {
				twcr_new |= _BV(TWEA);			// Send ACK
			} else {
				pos_i = 0;
    3c64:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <pos_i.3175>
				twcr_new &= ~_BV(TWEA);			// Send NACK
    3c68:	c4 2f       	mov	r28, r20
    3c6a:	c5 70       	andi	r28, 0x05	; 5
		}
	break;

	case TWI_TWSR_S_SLAW_MYADDR_DATA_NACK:		// NACK after last data byte sent
	case TWI_TWSR_S_SLAW_OMNIADDR_DATA_NACK:
		if (cnt_i != 0b1111) {
    3c6c:	35 c0       	rjmp	.+106    	; 0x3cd8 <__vector_24__bottom+0x33a>
    3c6e:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <cnt_i.3177>
			s_isr_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    3c72:	8f 30       	cpi	r24, 0x0F	; 15
    3c74:	09 f0       	breq	.+2      	; 0x3c78 <__vector_24__bottom+0x2da>
		} else {
			s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    3c76:	a8 d9       	rcall	.-3248   	; 0x2fc8 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6>
    3c78:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <pos_i.3175>
		cnt_i = 0;
    3c7c:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <cnt_i.3177>
		mem_set(s_rx_d, 8, 0x00);
    3c80:	40 e0       	ldi	r20, 0x00	; 0
    3c82:	68 e0       	ldi	r22, 0x08	; 8
    3c84:	8d e5       	ldi	r24, 0x5D	; 93
    3c86:	94 e0       	ldi	r25, 0x04	; 4
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    3c88:	75 d0       	rcall	.+234    	; 0x3d74 <mem_set>
	break;

	case TWI_TWSR_S_SLAW_STOP_REPEATEDSTART_RECEIVED:	// STOP or RESTART received while still addressed as slave
		if (cnt_i != 0b1111) {
    3c8a:	c0 64       	ori	r28, 0x40	; 64
    3c8c:	25 c0       	rjmp	.+74     	; 0x3cd8 <__vector_24__bottom+0x33a>
    3c8e:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <cnt_i.3177>
			s_isr_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    3c92:	8f 30       	cpi	r24, 0x0F	; 15
		} else {
			s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    3c94:	09 f0       	breq	.+2      	; 0x3c98 <__vector_24__bottom+0x2fa>
    3c96:	98 d9       	rcall	.-3280   	; 0x2fc8 <s_isr_twi_rcvd_command_closed_form.isra.5.constprop.6>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    3c98:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <pos_i.3175>

	/* Slave Transmitter Mode */

	case TWI_TWSR_S_SLAR_MYADDR_DATA_ACK:		// SLA+R received and ACK has been returned
	case TWI_TWSR_S_SLAR_OMNIADDR_DATA_ACK:		// Data sent and ACK has been returned
		pos_o = 0;
    3c9c:	c0 64       	ori	r28, 0x40	; 64
    3c9e:	1c c0       	rjmp	.+56     	; 0x3cd8 <__vector_24__bottom+0x33a>
		cnt_o = s_rx_ret_len;
    3ca0:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <pos_o.3176>
    3ca4:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <s_rx_ret_len>
		s_rx_ret_len = 0;
    3ca8:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <cnt_o.3178>
		TWDR = cnt_o > pos_o ?  s_rx_ret_d[pos_o++] : 0x00;
    3cac:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <s_rx_ret_len>
    3cb0:	88 23       	and	r24, r24
    3cb2:	31 f0       	breq	.+12     	; 0x3cc0 <__vector_24__bottom+0x322>
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <pos_o.3176>
    3cba:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <s_rx_ret_d>
    3cbe:	01 c0       	rjmp	.+2      	; 0x3cc2 <__vector_24__bottom+0x324>
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
		if (cnt_o > pos_o) {
    3cc2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3cc6:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <cnt_o.3178>
    3cca:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <pos_o.3176>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
	break;

	case TWI_TWSR_S_SLAR_MYADDR_LASTDATA_ACK:	// Last data sent and ACK has been returned
		/* message transmitted successfully in slave mode */
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    3cce:	89 17       	cp	r24, r25
	break;
    3cd0:	58 f6       	brcc	.-106    	; 0x3c68 <__vector_24__bottom+0x2ca>
	case TWI_TWSR_BUS_ERROR_UNKNOWN:
		twcr_new |= _BV(TWSTO) | _BV(TWEA);		// TWI goes to unaddressed, be active again
	break;

	default:
		twcr_new |= _BV(TWSTO) | _BV(TWEA);		// TWI goes to unaddressed, be active again
    3cd2:	c0 64       	ori	r28, 0x40	; 64
	}

	return twcr_new;
}
    3cd4:	01 c0       	rjmp	.+2      	; 0x3cd8 <__vector_24__bottom+0x33a>
    3cd6:	c0 65       	ori	r28, 0x50	; 80
    3cd8:	8c 2f       	mov	r24, r28
    3cda:	df 91       	pop	r29
    3cdc:	cf 91       	pop	r28
    3cde:	08 95       	ret

00003ce0 <cpu_irq_save>:
/* MAIN section */

void halt(void)
{
	/* MAIN Loop Shutdown */
	runmode = 0;
    3ce0:	cf 93       	push	r28
    3ce2:	df 93       	push	r29
    3ce4:	1f 92       	push	r1
    3ce6:	cd b7       	in	r28, 0x3d	; 61
    3ce8:	de b7       	in	r29, 0x3e	; 62
    3cea:	8f b7       	in	r24, 0x3f	; 63
    3cec:	89 83       	std	Y+1, r24	; 0x01
    3cee:	f8 94       	cli
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	0f 90       	pop	r0
    3cf4:	df 91       	pop	r29
    3cf6:	cf 91       	pop	r28
    3cf8:	08 95       	ret

00003cfa <get_abs_time>:
    3cfa:	8f 92       	push	r8
    3cfc:	9f 92       	push	r9
    3cfe:	af 92       	push	r10
    3d00:	bf 92       	push	r11
    3d02:	cf 92       	push	r12
    3d04:	df 92       	push	r13
    3d06:	ef 92       	push	r14
    3d08:	ff 92       	push	r15
    3d0a:	ea df       	rcall	.-44     	; 0x3ce0 <cpu_irq_save>
    3d0c:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    3d10:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3d14:	c0 90 0f 05 	lds	r12, 0x050F	; 0x80050f <g_timer_abs_msb>
    3d18:	d0 90 10 05 	lds	r13, 0x0510	; 0x800510 <g_timer_abs_msb+0x1>
    3d1c:	e0 90 11 05 	lds	r14, 0x0511	; 0x800511 <g_timer_abs_msb+0x2>
    3d20:	f0 90 12 05 	lds	r15, 0x0512	; 0x800512 <g_timer_abs_msb+0x3>
    3d24:	8f bf       	out	0x3f, r24	; 63
    3d26:	70 e0       	ldi	r23, 0x00	; 0
    3d28:	79 2b       	or	r23, r25
    3d2a:	07 2e       	mov	r0, r23
    3d2c:	00 0c       	add	r0, r0
    3d2e:	88 0b       	sbc	r24, r24
    3d30:	99 0b       	sbc	r25, r25
    3d32:	32 d4       	rcall	.+2148   	; 0x4598 <__floatsisf>
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	34 e2       	ldi	r19, 0x24	; 36
    3d38:	44 ef       	ldi	r20, 0xF4	; 244
    3d3a:	5a e4       	ldi	r21, 0x4A	; 74
    3d3c:	92 d3       	rcall	.+1828   	; 0x4462 <__divsf3>
    3d3e:	4b 01       	movw	r8, r22
    3d40:	5c 01       	movw	r10, r24
    3d42:	c7 01       	movw	r24, r14
    3d44:	b6 01       	movw	r22, r12
    3d46:	26 d4       	rcall	.+2124   	; 0x4594 <__floatunsisf>
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	40 e0       	ldi	r20, 0x00	; 0
    3d4e:	54 e4       	ldi	r21, 0x44	; 68
    3d50:	2a d5       	rcall	.+2644   	; 0x47a6 <__mulsf3>
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	34 e2       	ldi	r19, 0x24	; 36
    3d56:	44 ef       	ldi	r20, 0xF4	; 244
    3d58:	5a e4       	ldi	r21, 0x4A	; 74
    3d5a:	83 d3       	rcall	.+1798   	; 0x4462 <__divsf3>
    3d5c:	a5 01       	movw	r20, r10
    3d5e:	94 01       	movw	r18, r8
    3d60:	18 d3       	rcall	.+1584   	; 0x4392 <__addsf3>
    3d62:	ff 90       	pop	r15
    3d64:	ef 90       	pop	r14
    3d66:	df 90       	pop	r13
    3d68:	cf 90       	pop	r12
    3d6a:	bf 90       	pop	r11
    3d6c:	af 90       	pop	r10
    3d6e:	9f 90       	pop	r9
    3d70:	8f 90       	pop	r8
    3d72:	08 95       	ret

00003d74 <mem_set>:
    3d74:	70 e0       	ldi	r23, 0x00	; 0
    3d76:	61 15       	cp	r22, r1
    3d78:	71 05       	cpc	r23, r1
    3d7a:	31 f0       	breq	.+12     	; 0x3d88 <mem_set+0x14>
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	41 93       	st	Z+, r20
    3d80:	cf 01       	movw	r24, r30
    3d82:	61 50       	subi	r22, 0x01	; 1
    3d84:	71 09       	sbc	r23, r1
    3d86:	f7 cf       	rjmp	.-18     	; 0x3d76 <mem_set+0x2>
    3d88:	08 95       	ret

00003d8a <eeprom_nvm_settings_write>:
    3d8a:	cf 93       	push	r28
    3d8c:	c8 2f       	mov	r28, r24
    3d8e:	87 ff       	sbrs	r24, 7
    3d90:	05 c0       	rjmp	.+10     	; 0x3d9c <eeprom_nvm_settings_write+0x12>
    3d92:	61 e1       	ldi	r22, 0x11	; 17
    3d94:	80 e0       	ldi	r24, 0x00	; 0
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <eeprom_write_byte>
    3d9c:	c0 ff       	sbrs	r28, 0
    3d9e:	08 c0       	rjmp	.+16     	; 0x3db0 <eeprom_nvm_settings_write+0x26>
    3da0:	60 91 00 05 	lds	r22, 0x0500	; 0x800500 <g_lcd_contrast_pm>
    3da4:	6f 73       	andi	r22, 0x3F	; 63
    3da6:	80 e1       	ldi	r24, 0x10	; 16
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	cf 91       	pop	r28
    3dac:	0c 94 68 27 	jmp	0x4ed0	; 0x4ed0 <eeprom_write_byte>
    3db0:	cf 91       	pop	r28
    3db2:	08 95       	ret

00003db4 <eeprom_nvm_settings_read>:
    3db4:	87 ff       	sbrs	r24, 7
    3db6:	08 c0       	rjmp	.+16     	; 0x3dc8 <eeprom_nvm_settings_read+0x14>
    3db8:	80 e0       	ldi	r24, 0x00	; 0
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <eeprom_read_byte>
    3dc0:	81 31       	cpi	r24, 0x11	; 17
    3dc2:	11 f0       	breq	.+4      	; 0x3dc8 <eeprom_nvm_settings_read+0x14>
    3dc4:	80 e8       	ldi	r24, 0x80	; 128
    3dc6:	e1 df       	rcall	.-62     	; 0x3d8a <eeprom_nvm_settings_write>
    3dc8:	86 e1       	ldi	r24, 0x16	; 22
    3dca:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <g_lcd_contrast_pm>
    3dce:	08 95       	ret

00003dd0 <task>:
    3dd0:	3f 92       	push	r3
    3dd2:	4f 92       	push	r4
    3dd4:	5f 92       	push	r5
    3dd6:	6f 92       	push	r6
    3dd8:	7f 92       	push	r7
    3dda:	8f 92       	push	r8
    3ddc:	9f 92       	push	r9
    3dde:	af 92       	push	r10
    3de0:	bf 92       	push	r11
    3de2:	cf 92       	push	r12
    3de4:	df 92       	push	r13
    3de6:	ef 92       	push	r14
    3de8:	ff 92       	push	r15
    3dea:	0f 93       	push	r16
    3dec:	1f 93       	push	r17
    3dee:	cf 93       	push	r28
    3df0:	df 93       	push	r29
    3df2:	cd b7       	in	r28, 0x3d	; 61
    3df4:	de b7       	in	r29, 0x3e	; 62
    3df6:	a8 97       	sbiw	r28, 0x28	; 40
    3df8:	0f b6       	in	r0, 0x3f	; 63
    3dfa:	f8 94       	cli
    3dfc:	de bf       	out	0x3e, r29	; 62
    3dfe:	0f be       	out	0x3f, r0	; 63
    3e00:	cd bf       	out	0x3d, r28	; 61
    3e02:	4b 01       	movw	r8, r22
    3e04:	5c 01       	movw	r10, r24
    3e06:	6c df       	rcall	.-296    	; 0x3ce0 <cpu_irq_save>
    3e08:	c0 90 06 05 	lds	r12, 0x0506	; 0x800506 <g_adc_temp>
    3e0c:	d0 90 07 05 	lds	r13, 0x0507	; 0x800507 <g_adc_temp+0x1>
    3e10:	e0 90 08 05 	lds	r14, 0x0508	; 0x800508 <g_adc_temp+0x2>
    3e14:	f0 90 09 05 	lds	r15, 0x0509	; 0x800509 <g_adc_temp+0x3>
    3e18:	40 90 0a 05 	lds	r4, 0x050A	; 0x80050a <g_adc_light>
    3e1c:	50 90 0b 05 	lds	r5, 0x050B	; 0x80050b <g_adc_light+0x1>
    3e20:	60 90 0c 05 	lds	r6, 0x050C	; 0x80050c <g_adc_light+0x2>
    3e24:	70 90 0d 05 	lds	r7, 0x050D	; 0x80050d <g_adc_light+0x3>
    3e28:	33 b0       	in	r3, 0x03	; 3
    3e2a:	06 b1       	in	r16, 0x06	; 6
    3e2c:	8f bf       	out	0x3f, r24	; 63
    3e2e:	58 df       	rcall	.-336    	; 0x3ce0 <cpu_irq_save>
    3e30:	18 2f       	mov	r17, r24
    3e32:	29 e1       	ldi	r18, 0x19	; 25
    3e34:	37 e6       	ldi	r19, 0x67	; 103
    3e36:	42 eb       	ldi	r20, 0xB2	; 178
    3e38:	53 e4       	ldi	r21, 0x43	; 67
    3e3a:	c7 01       	movw	r24, r14
    3e3c:	b6 01       	movw	r22, r12
    3e3e:	a8 d2       	rcall	.+1360   	; 0x4390 <__subsf3>
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 ea       	ldi	r19, 0xA0	; 160
    3e44:	47 e8       	ldi	r20, 0x87	; 135
    3e46:	5f e3       	ldi	r21, 0x3F	; 63
    3e48:	ae d4       	rcall	.+2396   	; 0x47a6 <__mulsf3>
    3e4a:	20 e0       	ldi	r18, 0x00	; 0
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	48 ec       	ldi	r20, 0xC8	; 200
    3e50:	51 e4       	ldi	r21, 0x41	; 65
    3e52:	9f d2       	rcall	.+1342   	; 0x4392 <__addsf3>
    3e54:	60 93 02 05 	sts	0x0502, r22	; 0x800502 <g_temp>
    3e58:	70 93 03 05 	sts	0x0503, r23	; 0x800503 <g_temp+0x1>
    3e5c:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <g_temp+0x2>
    3e60:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <g_temp+0x3>
    3e64:	1f bf       	out	0x3f, r17	; 63
    3e66:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <g_lcdbl_auto>
    3e6a:	88 23       	and	r24, r24
    3e6c:	09 f4       	brne	.+2      	; 0x3e70 <task+0xa0>
    3e6e:	6b c0       	rjmp	.+214    	; 0x3f46 <task+0x176>
    3e70:	20 e0       	ldi	r18, 0x00	; 0
    3e72:	30 e8       	ldi	r19, 0x80	; 128
    3e74:	4d e6       	ldi	r20, 0x6D	; 109
    3e76:	54 e4       	ldi	r21, 0x44	; 68
    3e78:	c3 01       	movw	r24, r6
    3e7a:	b2 01       	movw	r22, r4
    3e7c:	ee d2       	rcall	.+1500   	; 0x445a <__cmpsf2>
    3e7e:	87 ff       	sbrs	r24, 7
    3e80:	5b c0       	rjmp	.+182    	; 0x3f38 <task+0x168>
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	40 e0       	ldi	r20, 0x00	; 0
    3e88:	50 e4       	ldi	r21, 0x40	; 64
    3e8a:	c3 01       	movw	r24, r6
    3e8c:	b2 01       	movw	r22, r4
    3e8e:	80 d2       	rcall	.+1280   	; 0x4390 <__subsf3>
    3e90:	20 e0       	ldi	r18, 0x00	; 0
    3e92:	30 e8       	ldi	r19, 0x80	; 128
    3e94:	4d e6       	ldi	r20, 0x6D	; 109
    3e96:	54 e4       	ldi	r21, 0x44	; 68
    3e98:	e4 d2       	rcall	.+1480   	; 0x4462 <__divsf3>
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	4d e7       	ldi	r20, 0x7D	; 125
    3ea0:	53 e4       	ldi	r21, 0x43	; 67
    3ea2:	81 d4       	rcall	.+2306   	; 0x47a6 <__mulsf3>
    3ea4:	20 e0       	ldi	r18, 0x00	; 0
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	40 e0       	ldi	r20, 0x00	; 0
    3eaa:	50 e4       	ldi	r21, 0x40	; 64
    3eac:	72 d2       	rcall	.+1252   	; 0x4392 <__addsf3>
    3eae:	41 d3       	rcall	.+1666   	; 0x4532 <__fixsfsi>
    3eb0:	16 2f       	mov	r17, r22
    3eb2:	e7 2e       	mov	r14, r23
    3eb4:	86 2f       	mov	r24, r22
    3eb6:	9e 2d       	mov	r25, r14
    3eb8:	20 91 7b 04 	lds	r18, 0x047B	; 0x80047b <pwm_last.3225>
    3ebc:	30 91 7c 04 	lds	r19, 0x047C	; 0x80047c <pwm_last.3225+0x1>
    3ec0:	a9 01       	movw	r20, r18
    3ec2:	4f 5f       	subi	r20, 0xFF	; 255
    3ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ec6:	48 17       	cp	r20, r24
    3ec8:	59 07       	cpc	r21, r25
    3eca:	04 f1       	brlt	.+64     	; 0x3f0c <task+0x13c>
    3ecc:	21 50       	subi	r18, 0x01	; 1
    3ece:	31 09       	sbc	r19, r1
    3ed0:	82 17       	cp	r24, r18
    3ed2:	93 07       	cpc	r25, r19
    3ed4:	dc f0       	brlt	.+54     	; 0x3f0c <task+0x13c>
    3ed6:	40 90 77 04 	lds	r4, 0x0477	; 0x800477 <ts_last.3226>
    3eda:	50 90 78 04 	lds	r5, 0x0478	; 0x800478 <ts_last.3226+0x1>
    3ede:	60 90 79 04 	lds	r6, 0x0479	; 0x800479 <ts_last.3226+0x2>
    3ee2:	70 90 7a 04 	lds	r7, 0x047A	; 0x80047a <ts_last.3226+0x3>
    3ee6:	a3 01       	movw	r20, r6
    3ee8:	92 01       	movw	r18, r4
    3eea:	c5 01       	movw	r24, r10
    3eec:	b4 01       	movw	r22, r8
    3eee:	50 d2       	rcall	.+1184   	; 0x4390 <__subsf3>
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	40 e0       	ldi	r20, 0x00	; 0
    3ef6:	5f e3       	ldi	r21, 0x3F	; 63
    3ef8:	52 d4       	rcall	.+2212   	; 0x479e <__gesf2>
    3efa:	18 16       	cp	r1, r24
    3efc:	3c f0       	brlt	.+14     	; 0x3f0c <task+0x13c>
    3efe:	a3 01       	movw	r20, r6
    3f00:	92 01       	movw	r18, r4
    3f02:	c5 01       	movw	r24, r10
    3f04:	b4 01       	movw	r22, r8
    3f06:	a9 d2       	rcall	.+1362   	; 0x445a <__cmpsf2>
    3f08:	87 ff       	sbrs	r24, 7
    3f0a:	10 c0       	rjmp	.+32     	; 0x3f2c <task+0x15c>
    3f0c:	10 93 b3 00 	sts	0x00B3, r17	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    3f10:	81 2f       	mov	r24, r17
    3f12:	9e 2d       	mov	r25, r14
    3f14:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <pwm_last.3225+0x1>
    3f18:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <pwm_last.3225>
    3f1c:	80 92 77 04 	sts	0x0477, r8	; 0x800477 <ts_last.3226>
    3f20:	90 92 78 04 	sts	0x0478, r9	; 0x800478 <ts_last.3226+0x1>
    3f24:	a0 92 79 04 	sts	0x0479, r10	; 0x800479 <ts_last.3226+0x2>
    3f28:	b0 92 7a 04 	sts	0x047A, r11	; 0x80047a <ts_last.3226+0x3>
    3f2c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3f30:	80 68       	ori	r24, 0x80	; 128
    3f32:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3f36:	07 c0       	rjmp	.+14     	; 0x3f46 <task+0x176>
    3f38:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    3f3c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3f40:	8f 73       	andi	r24, 0x3F	; 63
    3f42:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3f46:	cc de       	rcall	.-616    	; 0x3ce0 <cpu_irq_save>
    3f48:	95 e0       	ldi	r25, 0x05	; 5
    3f4a:	e4 eb       	ldi	r30, 0xB4	; 180
    3f4c:	f4 e0       	ldi	r31, 0x04	; 4
    3f4e:	de 01       	movw	r26, r28
    3f50:	11 96       	adiw	r26, 0x01	; 1
    3f52:	01 90       	ld	r0, Z+
    3f54:	0d 92       	st	X+, r0
    3f56:	9a 95       	dec	r25
    3f58:	e1 f7       	brne	.-8      	; 0x3f52 <task+0x182>
    3f5a:	89 80       	ldd	r8, Y+1	; 0x01
    3f5c:	9a 80       	ldd	r9, Y+2	; 0x02
    3f5e:	ab 80       	ldd	r10, Y+3	; 0x03
    3f60:	bc 80       	ldd	r11, Y+4	; 0x04
    3f62:	8f bf       	out	0x3f, r24	; 63
    3f64:	11 e0       	ldi	r17, 0x01	; 1
    3f66:	32 fa       	bst	r3, 2
    3f68:	ff 24       	eor	r15, r15
    3f6a:	f0 f8       	bld	r15, 0
    3f6c:	f1 26       	eor	r15, r17
    3f6e:	01 fb       	bst	r16, 1
    3f70:	ee 24       	eor	r14, r14
    3f72:	e0 f8       	bld	r14, 0
    3f74:	e1 26       	eor	r14, r17
    3f76:	02 fb       	bst	r16, 2
    3f78:	00 27       	eor	r16, r16
    3f7a:	00 f9       	bld	r16, 0
    3f7c:	10 27       	eor	r17, r16
    3f7e:	91 2f       	mov	r25, r17
    3f80:	99 0f       	add	r25, r25
    3f82:	9e 29       	or	r25, r14
    3f84:	89 2f       	mov	r24, r25
    3f86:	86 95       	lsr	r24
    3f88:	98 27       	eor	r25, r24
    3f8a:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <dec_old.3233>
    3f8e:	29 2f       	mov	r18, r25
    3f90:	28 1b       	sub	r18, r24
    3f92:	09 2f       	mov	r16, r25
    3f94:	03 70       	andi	r16, 0x03	; 3
    3f96:	21 30       	cpi	r18, 0x01	; 1
    3f98:	11 f0       	breq	.+4      	; 0x3f9e <task+0x1ce>
    3f9a:	2d 3f       	cpi	r18, 0xFD	; 253
    3f9c:	b1 f4       	brne	.+44     	; 0x3fca <task+0x1fa>
    3f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa0:	f0 fa       	bst	r15, 0
    3fa2:	80 f9       	bld	r24, 0
    3fa4:	e0 fa       	bst	r14, 0
    3fa6:	81 f9       	bld	r24, 1
    3fa8:	10 fb       	bst	r17, 0
    3faa:	82 f9       	bld	r24, 2
    3fac:	87 7e       	andi	r24, 0xE7	; 231
    3fae:	20 2f       	mov	r18, r16
    3fb0:	22 0f       	add	r18, r18
    3fb2:	22 0f       	add	r18, r18
    3fb4:	22 0f       	add	r18, r18
    3fb6:	82 2b       	or	r24, r18
    3fb8:	8d 83       	std	Y+5, r24	; 0x05
    3fba:	88 71       	andi	r24, 0x18	; 24
    3fbc:	01 f5       	brne	.+64     	; 0x3ffe <task+0x22e>
    3fbe:	8f ef       	ldi	r24, 0xFF	; 255
    3fc0:	88 1a       	sub	r8, r24
    3fc2:	98 0a       	sbc	r9, r24
    3fc4:	a8 0a       	sbc	r10, r24
    3fc6:	b8 0a       	sbc	r11, r24
    3fc8:	1a c0       	rjmp	.+52     	; 0x3ffe <task+0x22e>
    3fca:	2f 3f       	cpi	r18, 0xFF	; 255
    3fcc:	11 f0       	breq	.+4      	; 0x3fd2 <task+0x202>
    3fce:	23 30       	cpi	r18, 0x03	; 3
    3fd0:	b1 f4       	brne	.+44     	; 0x3ffe <task+0x22e>
    3fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd4:	f0 fa       	bst	r15, 0
    3fd6:	80 f9       	bld	r24, 0
    3fd8:	e0 fa       	bst	r14, 0
    3fda:	81 f9       	bld	r24, 1
    3fdc:	10 fb       	bst	r17, 0
    3fde:	82 f9       	bld	r24, 2
    3fe0:	87 7e       	andi	r24, 0xE7	; 231
    3fe2:	20 2f       	mov	r18, r16
    3fe4:	22 0f       	add	r18, r18
    3fe6:	22 0f       	add	r18, r18
    3fe8:	22 0f       	add	r18, r18
    3fea:	82 2b       	or	r24, r18
    3fec:	8d 83       	std	Y+5, r24	; 0x05
    3fee:	88 71       	andi	r24, 0x18	; 24
    3ff0:	88 31       	cpi	r24, 0x18	; 24
    3ff2:	29 f4       	brne	.+10     	; 0x3ffe <task+0x22e>
    3ff4:	21 e0       	ldi	r18, 0x01	; 1
    3ff6:	82 1a       	sub	r8, r18
    3ff8:	91 08       	sbc	r9, r1
    3ffa:	a1 08       	sbc	r10, r1
    3ffc:	b1 08       	sbc	r11, r1
    3ffe:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <dec_old.3233>
    4002:	6e de       	rcall	.-804    	; 0x3ce0 <cpu_irq_save>
    4004:	89 82       	std	Y+1, r8	; 0x01
    4006:	9a 82       	std	Y+2, r9	; 0x02
    4008:	ab 82       	std	Y+3, r10	; 0x03
    400a:	bc 82       	std	Y+4, r11	; 0x04
    400c:	9d 81       	ldd	r25, Y+5	; 0x05
    400e:	f0 fa       	bst	r15, 0
    4010:	90 f9       	bld	r25, 0
    4012:	e0 fa       	bst	r14, 0
    4014:	91 f9       	bld	r25, 1
    4016:	10 fb       	bst	r17, 0
    4018:	92 f9       	bld	r25, 2
    401a:	00 0f       	add	r16, r16
    401c:	00 0f       	add	r16, r16
    401e:	00 0f       	add	r16, r16
    4020:	97 7e       	andi	r25, 0xE7	; 231
    4022:	90 2b       	or	r25, r16
    4024:	9d 83       	std	Y+5, r25	; 0x05
    4026:	95 e0       	ldi	r25, 0x05	; 5
    4028:	fe 01       	movw	r30, r28
    402a:	31 96       	adiw	r30, 0x01	; 1
    402c:	a4 eb       	ldi	r26, 0xB4	; 180
    402e:	b4 e0       	ldi	r27, 0x04	; 4
    4030:	01 90       	ld	r0, Z+
    4032:	0d 92       	st	X+, r0
    4034:	9a 95       	dec	r25
    4036:	e1 f7       	brne	.-8      	; 0x4030 <task+0x260>
    4038:	8f bf       	out	0x3f, r24	; 63
    403a:	52 de       	rcall	.-860    	; 0x3ce0 <cpu_irq_save>
    403c:	00 91 af 04 	lds	r16, 0x04AF	; 0x8004af <g_SmartLCD_mode>
    4040:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_status>
    4044:	90 fb       	bst	r25, 0
    4046:	ff 24       	eor	r15, r15
    4048:	f0 f8       	bld	r15, 0
    404a:	96 95       	lsr	r25
    404c:	91 70       	andi	r25, 0x01	; 1
    404e:	8f bf       	out	0x3f, r24	; 63
    4050:	99 23       	and	r25, r25
    4052:	e1 f1       	breq	.+120    	; 0x40cc <task+0x2fc>
    4054:	00 31       	cpi	r16, 0x10	; 16
    4056:	21 f4       	brne	.+8      	; 0x4060 <task+0x290>
    4058:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <lcd_show_new_smartlcd_data>
    405c:	18 2f       	mov	r17, r24
    405e:	05 c0       	rjmp	.+10     	; 0x406a <task+0x29a>
    4060:	00 32       	cpi	r16, 0x20	; 32
    4062:	a1 f5       	brne	.+104    	; 0x40cc <task+0x2fc>
    4064:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <lcd_show_new_refosc_data>
    4068:	18 2f       	mov	r17, r24
    406a:	f1 10       	cpse	r15, r1
    406c:	2c c0       	rjmp	.+88     	; 0x40c6 <task+0x2f6>
    406e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <s_last_animation.3249>
    4072:	88 23       	and	r24, r24
    4074:	41 f1       	breq	.+80     	; 0x40c6 <task+0x2f6>
    4076:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <s_last_animation.3249>
    407a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <lcd_cls>
    407e:	00 32       	cpi	r16, 0x20	; 32
    4080:	d9 f4       	brne	.+54     	; 0x40b8 <task+0x2e8>
    4082:	01 e0       	ldi	r16, 0x01	; 1
    4084:	20 e8       	ldi	r18, 0x80	; 128
    4086:	40 ef       	ldi	r20, 0xF0	; 240
    4088:	60 e0       	ldi	r22, 0x00	; 0
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_rect>
    4090:	88 e2       	ldi	r24, 0x28	; 40
    4092:	e1 e9       	ldi	r30, 0x91	; 145
    4094:	f3 e0       	ldi	r31, 0x03	; 3
    4096:	de 01       	movw	r26, r28
    4098:	11 96       	adiw	r26, 0x01	; 1
    409a:	01 90       	ld	r0, Z+
    409c:	0d 92       	st	X+, r0
    409e:	8a 95       	dec	r24
    40a0:	e1 f7       	brne	.-8      	; 0x409a <task+0x2ca>
    40a2:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <lcd_get_sysfont>
    40a6:	9c 01       	movw	r18, r24
    40a8:	42 e0       	ldi	r20, 0x02	; 2
    40aa:	63 e0       	ldi	r22, 0x03	; 3
    40ac:	ce 01       	movw	r24, r28
    40ae:	01 96       	adiw	r24, 0x01	; 1
    40b0:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    40b4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <lcd_show_template>
    40b8:	13 de       	rcall	.-986    	; 0x3ce0 <cpu_irq_save>
    40ba:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_status>
    40be:	92 60       	ori	r25, 0x02	; 2
    40c0:	90 93 f8 04 	sts	0x04F8, r25	; 0x8004f8 <g_status>
    40c4:	8f bf       	out	0x3f, r24	; 63
    40c6:	11 11       	cpse	r17, r1
    40c8:	b8 cf       	rjmp	.-144    	; 0x403a <task+0x26a>
    40ca:	04 c0       	rjmp	.+8      	; 0x40d4 <task+0x304>
    40cc:	f1 10       	cpse	r15, r1
    40ce:	02 c0       	rjmp	.+4      	; 0x40d4 <task+0x304>
    40d0:	10 e0       	ldi	r17, 0x00	; 0
    40d2:	cd cf       	rjmp	.-102    	; 0x406e <task+0x29e>
    40d4:	a8 96       	adiw	r28, 0x28	; 40
    40d6:	0f b6       	in	r0, 0x3f	; 63
    40d8:	f8 94       	cli
    40da:	de bf       	out	0x3e, r29	; 62
    40dc:	0f be       	out	0x3f, r0	; 63
    40de:	cd bf       	out	0x3d, r28	; 61
    40e0:	df 91       	pop	r29
    40e2:	cf 91       	pop	r28
    40e4:	1f 91       	pop	r17
    40e6:	0f 91       	pop	r16
    40e8:	ff 90       	pop	r15
    40ea:	ef 90       	pop	r14
    40ec:	df 90       	pop	r13
    40ee:	cf 90       	pop	r12
    40f0:	bf 90       	pop	r11
    40f2:	af 90       	pop	r10
    40f4:	9f 90       	pop	r9
    40f6:	8f 90       	pop	r8
    40f8:	7f 90       	pop	r7
    40fa:	6f 90       	pop	r6
    40fc:	5f 90       	pop	r5
    40fe:	4f 90       	pop	r4
    4100:	3f 90       	pop	r3
    4102:	08 95       	ret

00004104 <enter_sleep>:
    4104:	88 0f       	add	r24, r24
    4106:	81 60       	ori	r24, 0x01	; 1
    4108:	83 bf       	out	0x33, r24	; 51
    410a:	88 95       	sleep
    410c:	83 b7       	in	r24, 0x33	; 51
    410e:	8e 7f       	andi	r24, 0xFE	; 254
    4110:	83 bf       	out	0x33, r24	; 51
    4112:	08 95       	ret

00004114 <main>:
}

int main (void)
{
    4114:	1f 93       	push	r17
    4116:	cf 93       	push	r28
    4118:	df 93       	push	r29
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts,
	 * most critical pins are handled first.
	 */

	PORTC = 0b01111110;		// PC0: LDR-ADC in-NoPU, PC1: SW_I in-PU, PC2: SW_Q in-PU, PC3: LCD-CS out-HI
    411a:	8e e7       	ldi	r24, 0x7E	; 126
    411c:	88 b9       	out	0x08, r24	; 8
	DDRC  = 0b00001000;		// PC4: I2C-SDA in-PU-AF-TWI, PC5: I2C-SCL in-PU-AF-TWI, PC6: RESET in-PU, PC7: -
    411e:	88 e0       	ldi	r24, 0x08	; 8
    4120:	87 b9       	out	0x07, r24	; 7

	PORTB = 0b00010100;		// PB0: LCD-CD out-LO, PB1: AUDIO out-AF-OC1A, PB2: SW_P in-PU, PB3: LCDBL out-AF-OC2A,
    4122:	84 e1       	ldi	r24, 0x14	; 20
    4124:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0b11111011;		// PB4: LCD-R/!W out-HI, PB5: LCD-EN out-LO, PB6: LEDRD out-LO, LEDGN out-LO
    4126:	8b ef       	ldi	r24, 0xFB	; 251
    4128:	84 b9       	out	0x04, r24	; 4

	PORTD = 0xff;			// PD0..PD7: LCD-D0..LCD-D7 in-PU
    412a:	8f ef       	ldi	r24, 0xFF	; 255
    412c:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x00;
    412e:	1a b8       	out	0x0a, r1	; 10

	// Analog input: Digital Disable Register
	DIDR0 = 0b00000001;		// PC0: LDR-ADC
    4130:	c1 e0       	ldi	r28, 0x01	; 1
    4132:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

	/* Rapid I/O settings */
	s_io_preinit();

	/* Init of sub-modules */
	sysclk_init();	PRR = 0b11101011;			// For debugging this module has to be powered on, again
    4136:	0e 94 06 03 	call	0x60c	; 0x60c <sysclk_init>
    413a:	8b ee       	ldi	r24, 0xEB	; 235
    413c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
}


static void s_adc_init(void)
{
	sysclk_enable_module(POWER_RED_REG0, PRADC_bm);	// enable ADC sub-module
    4140:	61 e0       	ldi	r22, 0x01	; 1
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    4148:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    414c:	86 e8       	ldi	r24, 0x86	; 134
    414e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    4152:	80 ec       	ldi	r24, 0xC0	; 192
    4154:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    4158:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    415c:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
    415e:	84 60       	ori	r24, 0x04	; 4
	ADC_ADTS_REG = temp;
    4160:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
}

/*  \brief Enable ADC Auto Trigger */
static inline void adc_enable_autotrigger(void)
{
	ADCSRA |= (1 << ADATE);
    4164:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4168:	80 62       	ori	r24, 0x20	; 32
    416a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	adc_enable_autotrigger();
#else
	adc_disable_autotrigger();
#endif

	ADCSRA |= _BV(ADIF);						// clear interrupt status bit by setting it to clear
    416e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4172:	80 61       	ori	r24, 0x10	; 16
    4174:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}

/*  \brief Enable ADC interrupt */
static inline void adc_enable_interrupt(void)
{
	ADCSRA |= (1 << ADIE);
    4178:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    417c:	88 60       	ori	r24, 0x08	; 8
    417e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}

/*  \brief Start ADC conversion */
static inline void adc_start_conversion(void)
{
	ADCSRA |= (1 << ADSC);
    4182:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4186:	80 64       	ori	r24, 0x40	; 64
    4188:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
static void s_tc_init(void)
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts. */

	/* Timer Synchronous Mode - prepare for  s_tc_start(void) */
	GTCCR = _BV(TSM)							// Timer Synchronous Mode active
    418c:	13 e8       	ldi	r17, 0x83	; 131
    418e:	13 bd       	out	0x23, r17	; 35
		  | _BV(PSRASY)							// Timer 2   prescaler is synced
		  | _BV(PSRSYNC);						// Timer 0/1 prescaler is synced

	/* TC0 - Overflows with about 122 Hz for the ADC convertion */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    4190:	60 e2       	ldi	r22, 0x20	; 32
    4192:	80 e0       	ldi	r24, 0x00	; 0
    4194:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>

		TCCR0A  = (0b00  << COM0A0)				// Normal port operations
    4198:	14 bc       	out	0x24, r1	; 36
				| (0b00  << WGM00);				// Counter mode

		TCCR0B  = ( 0b0  << WGM02)
    419a:	84 e0       	ldi	r24, 0x04	; 4
    419c:	85 bd       	out	0x25, r24	; 37
				| (0b100 << CS00);				// CLKio DIV 256 = 31250 Hz --> / 2**8 = 122 Hz looping rate

		TCNT0   = 0;							// Clear current value
    419e:	16 bc       	out	0x26, r1	; 38

		OCR0A   = 0x00;							// Compare value not used
    41a0:	17 bc       	out	0x27, r1	; 39

		TIFR0   = 0b00000111;					// Clear all flags
    41a2:	d7 e0       	ldi	r29, 0x07	; 7
    41a4:	d5 bb       	out	0x15, r29	; 21
		TIMSK0  = _BV(TOIE0);					// TOIE0: overflow interrupt
    41a6:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	}

	/* TC1 - OC1A: Audio output @ 16-bit counter PWM, used: 9-bit resolution - overflows with 15625 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    41aa:	68 e0       	ldi	r22, 0x08	; 8
    41ac:	80 e0       	ldi	r24, 0x00	; 0
    41ae:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>

		TCCR1A  = (0b10  << COM1A0)		 		// HI --> LO when compare value is reached - non-inverted PWM mode
    41b2:	82 e8       	ldi	r24, 0x82	; 130
    41b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				| (0b10  << WGM10);				// WGM: 0b0110 = Fast PWM 9 bit

		TCCR1B  = ( 0b01 << WGM12)
    41b8:	89 e0       	ldi	r24, 0x09	; 9
    41ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
				| (0b001 << CS10);				// CLKio DIV1 = 8 MHz

		TCNT1H  = 0b00000000           ;		// Clear current value for synchronous start (when restarting without reset)
    41be:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		barrier();
		TCNT1L	=            0b00000000;
    41c2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

		OCR1AH  =        0b0           ;		// Mid-range compare value for zero audio output
    41c6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL  =            0b10000000;
    41ca:	80 e8       	ldi	r24, 0x80	; 128
    41cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

		TIFR1   = 0b00100111;					// Clear all flags (when restarting without reset)
    41d0:	87 e2       	ldi	r24, 0x27	; 39
    41d2:	86 bb       	out	0x16, r24	; 22
		TIMSK1  = _BV(TOIE1);					// TOIE1 interrupt
    41d4:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	}

	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    41d8:	60 e4       	ldi	r22, 0x40	; 64
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>

		ASSR    = 0;							// No async. TOSC1 mode
    41e0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>

		TCCR2A  = (0b10  << COM2A0)				// HI --> LO when compare value is reached - non-inverted PWM mode
    41e4:	10 93 b0 00 	sts	0x00B0, r17	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				| (0b11  << WGM20);				// WGM: 0b011 = Fast PWM mode 8 bit

		TCCR2B  = ( 0b0  << WGM22)
    41e8:	85 e0       	ldi	r24, 0x05	; 5
    41ea:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
				| (0b101 << CS20);				// CLKio DIV 128 = 62500 Hz --> / 2**8 = 244 Hz looping rate

		TCNT2   = 0;							// Clear current value for synchronous start (when restarting without reset)
    41ee:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

		OCR2A   = 0x00;							// LCD backlight dimmed down
    41f2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

		TIFR2   = 0b00000111;					// Clear all flags
    41f6:	d7 bb       	out	0x17, r29	; 23
		TIMSK2  = _BV(TOIE2);					// TOIE2: overflow interrupt
    41f8:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	ioport_init();
	s_adc_init();
	s_tc_init();

	/* I/O pins go active here */
	board_init();
    41fc:	0e 94 05 03 	call	0x60a	; 0x60a <board_init>
//@}
static inline reset_cause_t reset_cause_get_causes(void)
{
#if (MEGA_XX4 ||MEGA_XX4_A || MEGA_XX8 || MEGA_XX8_A || \
	MEGA_XX || MEGA_XX_UN2 || MEGA_XX0_1 || MEGA_RF || MEGA_UNCATEGORIZED) && !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t temp_mcsr = MCUSR ;
    4200:	84 b7       	in	r24, 0x34	; 52

	reset_cause_t rc = reset_cause_get_causes();
	g_resetCause = rc;
    4202:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <g_resetCause>
	if (rc & CHIP_RESET_CAUSE_EXTRST	||
		rc & CHIP_RESET_CAUSE_BOD_CPU	||
    4206:	98 2f       	mov	r25, r24
    4208:	97 70       	andi	r25, 0x07	; 7
    420a:	11 f4       	brne	.+4      	; 0x4210 <main+0xfc>
		rc & CHIP_RESET_CAUSE_POR		||
    420c:	81 11       	cpse	r24, r1

/* HELPERS */

static void s_reset_global_vars(void)
{
	irqflags_t flags	= cpu_irq_save();
    420e:	2b c0       	rjmp	.+86     	; 0x4266 <main+0x152>
	cpu_irq_disable();
    4210:	67 dd       	rcall	.-1330   	; 0x3ce0 <cpu_irq_save>

	g_adc_state			= ADC_STATE_PRE_LDR;
    4212:	f8 94       	cli
    4214:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <g_adc_state>
	g_adc_light			= 0.f;
    4218:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <g_adc_light>
    421c:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <g_adc_light+0x1>
    4220:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <g_adc_light+0x2>
    4224:	10 92 0d 05 	sts	0x050D, r1	; 0x80050d <g_adc_light+0x3>
	g_adc_temp			= 0.f;
    4228:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <g_adc_temp>
    422c:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <g_adc_temp+0x1>
    4230:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <g_adc_temp+0x2>
    4234:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <g_adc_temp+0x3>

	g_temp				= 25.f;
    4238:	40 e0       	ldi	r20, 0x00	; 0
    423a:	50 e0       	ldi	r21, 0x00	; 0
    423c:	68 ec       	ldi	r22, 0xC8	; 200
    423e:	71 e4       	ldi	r23, 0x41	; 65
    4240:	40 93 02 05 	sts	0x0502, r20	; 0x800502 <g_temp>
    4244:	50 93 03 05 	sts	0x0503, r21	; 0x800503 <g_temp+0x1>
    4248:	60 93 04 05 	sts	0x0504, r22	; 0x800504 <g_temp+0x2>
    424c:	70 93 05 05 	sts	0x0505, r23	; 0x800505 <g_temp+0x3>
	g_lcdbl_dimmer		= 64;
    4250:	90 e4       	ldi	r25, 0x40	; 64
    4252:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <g_lcdbl_dimmer>

	g_status.doAnimation = false;
    4256:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_status>
	g_status.isAnimationStopped = false;
    425a:	9e 7f       	andi	r25, 0xFE	; 254
    425c:	9d 7f       	andi	r25, 0xFD	; 253
    425e:	90 93 f8 04 	sts	0x04F8, r25	; 0x8004f8 <g_status>
    4262:	8f bf       	out	0x3f, r24	; 63
		rc & CHIP_RESET_CAUSE_POR		||
		!rc) {
		s_reset_global_vars();
	} else {
		/* DEBUG */
		asm_break();
    4264:	02 c0       	rjmp	.+4      	; 0x426a <main+0x156>
	}

	/* Read non-volatile settings */
	eeprom_nvm_settings_read(C_EEPROM_NVM_SETTING_ALL);			// load all entries from NVM
    4266:	0e 94 40 07 	call	0xe80	; 0xe80 <asm_break>
	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
}

static void s_twi_init(uint8_t twi_addr, uint8_t twi_addr_bm)
{
	sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    426a:	8f ef       	ldi	r24, 0xFF	; 255
    426c:	a3 dd       	rcall	.-1210   	; 0x3db4 <eeprom_nvm_settings_read>
    426e:	60 e8       	ldi	r22, 0x80	; 128

	irqflags_t flags = cpu_irq_save();
    4270:	80 e0       	ldi	r24, 0x00	; 0
    4272:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>

	TWSR = (0b00 << TWPS0);						// Prescaler value = 1
    4276:	34 dd       	rcall	.-1432   	; 0x3ce0 <cpu_irq_save>
	TWBR = 2;									// TWI bit-rate = 400 kBit/sec @ 8 MHz when master mode active
    4278:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    427c:	92 e0       	ldi	r25, 0x02	; 2

	TWAR  = (twi_addr    << 1) /* | (TWI_SLAVE_ADDR_GCE << TWGCE)*/ ;
    427e:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    4282:	94 e4       	ldi	r25, 0x44	; 68
	TWAMR = (twi_addr_bm << 1);
    4284:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	TWCR = _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// Enable Acknowledge, Enable TWI port, Interrupt Enable, no START or STOP bit
    4288:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__TEXT_REGION_LENGTH__+0x7e00bd>
    428c:	95 e4       	ldi	r25, 0x45	; 69
    428e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	/* TC0: Overflows with about 30 Hz for the ADC convertion */
	/* TC1: Audio output @ 16-bit counter PWM, used: 10-bit resolution */
	/* TC2: LCD backlight w/ 8-bit resolution */
	{
		/* Timer Synchronous Mode - trigger */
		GTCCR = 0;								// trigger the sync for all counters
    4292:	8f bf       	out	0x3f, r24	; 63

	/* Start of sub-modules */
	s_tc_start();								// All clocks and PWM timers start here

	/* Initialize external components */
	lcd_init();
    4294:	78 94       	sei
    4296:	13 bc       	out	0x23, r1	; 35
	lcd_test(0b11111101);						// Debugging purposes
    4298:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <lcd_init>
    429c:	8d ef       	ldi	r24, 0xFD	; 253


	/* main loop */
	runmode = 1;
    429e:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <lcd_test>
    42a2:	81 e0       	ldi	r24, 0x01	; 1
    while (runmode) {
    42a4:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <runmode>
	    task(get_abs_time());
    42a8:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <runmode>
	    enter_sleep(SLEEP_MODE_IDLE);
    42ac:	88 23       	and	r24, r24
    42ae:	29 f0       	breq	.+10     	; 0x42ba <main+0x1a6>
    42b0:	24 dd       	rcall	.-1464   	; 0x3cfa <get_abs_time>
    42b2:	8e dd       	rcall	.-1252   	; 0x3dd0 <task>
    }


	/* Shutdown external components */
	lcd_shutdown();
    42b4:	80 e0       	ldi	r24, 0x00	; 0
    42b6:	26 df       	rcall	.-436    	; 0x4104 <enter_sleep>

	cpu_irq_disable();
    42b8:	f7 cf       	rjmp	.-18     	; 0x42a8 <main+0x194>

	/* disable sub-modules */
	ACSR |= _BV(ACD);							// disable AnalogCompare sub-module
    42ba:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <lcd_shutdown>
    42be:	f8 94       	cli

	sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    42c0:	80 b7       	in	r24, 0x30	; 48
    42c2:	80 68       	ori	r24, 0x80	; 128
    42c4:	80 bf       	out	0x30, r24	; 48
	sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    42c6:	64 e0       	ldi	r22, 0x04	; 4
    42c8:	80 e0       	ldi	r24, 0x00	; 0
    42ca:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
	cpu_irq_restore(flags);
}

static void s_twi_disable(void)
{
	irqflags_t flags = cpu_irq_save();
    42ce:	62 e0       	ldi	r22, 0x02	; 2
    42d0:	80 e0       	ldi	r24, 0x00	; 0

	TWCR = _BV(TWEN);							// disable the interrupt source
    42d2:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
    42d6:	04 dd       	rcall	.-1528   	; 0x3ce0 <cpu_irq_save>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    42d8:	94 e0       	ldi	r25, 0x04	; 4
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
    42da:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    42de:	3c 98       	cbi	0x07, 4	; 7
	ioport_set_pin_mode(SDA_GPIO, IOPORT_MODE_PULLUP);

	ioport_set_pin_dir(SCL_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(SCL_GPIO, IOPORT_MODE_PULLUP);

	TWCR = 0;									// disable the TWI port
    42e0:	44 9a       	sbi	0x08, 4	; 8
    42e2:	3d 98       	cbi	0x07, 5	; 7
    42e4:	45 9a       	sbi	0x08, 5	; 8

	cpu_irq_restore(flags);

	sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    42e6:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    42ea:	8f bf       	out	0x3f, r24	; 63
    42ec:	60 e8       	ldi	r22, 0x80	; 128
}

/*  \brief Disable ADC interrupt */
static inline void adc_disable_interrupt(void)
{
	ADCSRA &= ~(1 << ADIE);
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
    42f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}

/*  \brief Disable ADC Auto Trigger */
static inline void adc_disable_autotrigger(void)
{
	ADCSRA &= ~(1 << ADATE);
    42f8:	87 7f       	andi	r24, 0xF7	; 247
    42fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    42fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    4302:	8f 7d       	andi	r24, 0xDF	; 223
    4304:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	temp |= (uint8_t)trg;
	ADC_ADTS_REG = temp;
    4308:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    430c:	88 7f       	andi	r24, 0xF8	; 248
	adc_disable_autotrigger();
	adc_set_autotrigger_source(0);
	adc_set_admux(0);
	//adc_disable_digital_inputs(0);

	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
    430e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    4312:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	}
}

static void s_tc_disable(void)
{
	irqflags_t flags = cpu_irq_save();
    4316:	61 e0       	ldi	r22, 0x01	; 1
    4318:	80 e0       	ldi	r24, 0x00	; 0
    431a:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>

	/* TC0 - Overflows with about 122 Hz for the ADC convertion */
	{
		TIMSK0  = 0;							// no interrupts
    431e:	e0 dc       	rcall	.-1600   	; 0x3ce0 <cpu_irq_save>

		TCCR0A  = 0;
    4320:	c8 2f       	mov	r28, r24
		TCCR0B  = 0;
    4322:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>

		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    4326:	14 bc       	out	0x24, r1	; 36
    4328:	15 bc       	out	0x25, r1	; 37
    432a:	60 e2       	ldi	r22, 0x20	; 32
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    432c:	80 e0       	ldi	r24, 0x00	; 0
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
    432e:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
	{
		// bring pin to high Z mode to reduce audible plop noise
		ioport_set_pin_dir(AUDIO_PWM, IOPORT_DIR_INPUT);
		ioport_set_pin_mode(AUDIO_PWM, IOPORT_MODE_PULLDOWN);

		TIMSK1  = 0;							// no interrupts
    4332:	21 98       	cbi	0x04, 1	; 4

		TCCR1A  = 0;							// release alternate port function
    4334:	29 98       	cbi	0x05, 1	; 5
    4336:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		TCCR1B  = 0;
    433a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1C  = 0;
    433e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    4342:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    4346:	68 e0       	ldi	r22, 0x08	; 8
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
    4348:	80 e0       	ldi	r24, 0x00	; 0
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    434a:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		ioport_set_pin_dir(LCDBL_PWM, IOPORT_DIR_OUTPUT);
		ioport_set_pin_level(LCDBL_PWM, false);	// turn backlight off

		TIMSK2  = 0;							// no interrupts
    434e:	23 9a       	sbi	0x04, 3	; 4

		ASSR    = 0;							// no async TOSC1 mode
    4350:	2b 98       	cbi	0x05, 3	; 5

		TCCR2A  = 0;							// release alternate port function
    4352:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		TCCR2B  = 0;
    4356:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>

		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    435a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    435e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 */

static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();
    4362:	60 e4       	ldi	r22, 0x40	; 64

	ASM(
    4364:	80 e0       	ldi	r24, 0x00	; 0
    4366:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
    436a:	ba dc       	rcall	.-1676   	; 0x3ce0 <cpu_irq_save>
    436c:	5f 93       	push	r21
    436e:	50 e8       	ldi	r21, 0x80	; 128
    4370:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    4374:	50 e0       	ldi	r21, 0x00	; 0

	s_twi_disable();
	s_adc_disable();
	s_tc_disable();

    enter_sleep(SLEEP_MODE_PWR_DOWN);
    4376:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    437a:	5f 91       	pop	r21

    return retcode;								// should never be reached
}
    437c:	8f bf       	out	0x3f, r24	; 63
    437e:	cf bf       	out	0x3f, r28	; 63
    4380:	84 e0       	ldi	r24, 0x04	; 4
    4382:	c0 de       	rcall	.-640    	; 0x4104 <enter_sleep>
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	df 91       	pop	r29
    438a:	cf 91       	pop	r28
    438c:	1f 91       	pop	r17
    438e:	08 95       	ret

00004390 <__subsf3>:
    4390:	50 58       	subi	r21, 0x80	; 128

00004392 <__addsf3>:
    4392:	bb 27       	eor	r27, r27
    4394:	aa 27       	eor	r26, r26
    4396:	0e d0       	rcall	.+28     	; 0x43b4 <__addsf3x>
    4398:	b1 c1       	rjmp	.+866    	; 0x46fc <__fp_round>
    439a:	a2 d1       	rcall	.+836    	; 0x46e0 <__fp_pscA>
    439c:	30 f0       	brcs	.+12     	; 0x43aa <__addsf3+0x18>
    439e:	a7 d1       	rcall	.+846    	; 0x46ee <__fp_pscB>
    43a0:	20 f0       	brcs	.+8      	; 0x43aa <__addsf3+0x18>
    43a2:	31 f4       	brne	.+12     	; 0x43b0 <__addsf3+0x1e>
    43a4:	9f 3f       	cpi	r25, 0xFF	; 255
    43a6:	11 f4       	brne	.+4      	; 0x43ac <__addsf3+0x1a>
    43a8:	1e f4       	brtc	.+6      	; 0x43b0 <__addsf3+0x1e>
    43aa:	97 c1       	rjmp	.+814    	; 0x46da <__fp_nan>
    43ac:	0e f4       	brtc	.+2      	; 0x43b0 <__addsf3+0x1e>
    43ae:	e0 95       	com	r30
    43b0:	e7 fb       	bst	r30, 7
    43b2:	64 c1       	rjmp	.+712    	; 0x467c <__fp_inf>

000043b4 <__addsf3x>:
    43b4:	e9 2f       	mov	r30, r25
    43b6:	b3 d1       	rcall	.+870    	; 0x471e <__fp_split3>
    43b8:	80 f3       	brcs	.-32     	; 0x439a <__addsf3+0x8>
    43ba:	ba 17       	cp	r27, r26
    43bc:	62 07       	cpc	r22, r18
    43be:	73 07       	cpc	r23, r19
    43c0:	84 07       	cpc	r24, r20
    43c2:	95 07       	cpc	r25, r21
    43c4:	18 f0       	brcs	.+6      	; 0x43cc <__addsf3x+0x18>
    43c6:	71 f4       	brne	.+28     	; 0x43e4 <__addsf3x+0x30>
    43c8:	9e f5       	brtc	.+102    	; 0x4430 <__addsf3x+0x7c>
    43ca:	e2 c1       	rjmp	.+964    	; 0x4790 <__fp_zero>
    43cc:	0e f4       	brtc	.+2      	; 0x43d0 <__addsf3x+0x1c>
    43ce:	e0 95       	com	r30
    43d0:	0b 2e       	mov	r0, r27
    43d2:	ba 2f       	mov	r27, r26
    43d4:	a0 2d       	mov	r26, r0
    43d6:	0b 01       	movw	r0, r22
    43d8:	b9 01       	movw	r22, r18
    43da:	90 01       	movw	r18, r0
    43dc:	0c 01       	movw	r0, r24
    43de:	ca 01       	movw	r24, r20
    43e0:	a0 01       	movw	r20, r0
    43e2:	11 24       	eor	r1, r1
    43e4:	ff 27       	eor	r31, r31
    43e6:	59 1b       	sub	r21, r25
    43e8:	99 f0       	breq	.+38     	; 0x4410 <__addsf3x+0x5c>
    43ea:	59 3f       	cpi	r21, 0xF9	; 249
    43ec:	50 f4       	brcc	.+20     	; 0x4402 <__addsf3x+0x4e>
    43ee:	50 3e       	cpi	r21, 0xE0	; 224
    43f0:	68 f1       	brcs	.+90     	; 0x444c <__addsf3x+0x98>
    43f2:	1a 16       	cp	r1, r26
    43f4:	f0 40       	sbci	r31, 0x00	; 0
    43f6:	a2 2f       	mov	r26, r18
    43f8:	23 2f       	mov	r18, r19
    43fa:	34 2f       	mov	r19, r20
    43fc:	44 27       	eor	r20, r20
    43fe:	58 5f       	subi	r21, 0xF8	; 248
    4400:	f3 cf       	rjmp	.-26     	; 0x43e8 <__addsf3x+0x34>
    4402:	46 95       	lsr	r20
    4404:	37 95       	ror	r19
    4406:	27 95       	ror	r18
    4408:	a7 95       	ror	r26
    440a:	f0 40       	sbci	r31, 0x00	; 0
    440c:	53 95       	inc	r21
    440e:	c9 f7       	brne	.-14     	; 0x4402 <__addsf3x+0x4e>
    4410:	7e f4       	brtc	.+30     	; 0x4430 <__addsf3x+0x7c>
    4412:	1f 16       	cp	r1, r31
    4414:	ba 0b       	sbc	r27, r26
    4416:	62 0b       	sbc	r22, r18
    4418:	73 0b       	sbc	r23, r19
    441a:	84 0b       	sbc	r24, r20
    441c:	ba f0       	brmi	.+46     	; 0x444c <__addsf3x+0x98>
    441e:	91 50       	subi	r25, 0x01	; 1
    4420:	a1 f0       	breq	.+40     	; 0x444a <__addsf3x+0x96>
    4422:	ff 0f       	add	r31, r31
    4424:	bb 1f       	adc	r27, r27
    4426:	66 1f       	adc	r22, r22
    4428:	77 1f       	adc	r23, r23
    442a:	88 1f       	adc	r24, r24
    442c:	c2 f7       	brpl	.-16     	; 0x441e <__addsf3x+0x6a>
    442e:	0e c0       	rjmp	.+28     	; 0x444c <__addsf3x+0x98>
    4430:	ba 0f       	add	r27, r26
    4432:	62 1f       	adc	r22, r18
    4434:	73 1f       	adc	r23, r19
    4436:	84 1f       	adc	r24, r20
    4438:	48 f4       	brcc	.+18     	; 0x444c <__addsf3x+0x98>
    443a:	87 95       	ror	r24
    443c:	77 95       	ror	r23
    443e:	67 95       	ror	r22
    4440:	b7 95       	ror	r27
    4442:	f7 95       	ror	r31
    4444:	9e 3f       	cpi	r25, 0xFE	; 254
    4446:	08 f0       	brcs	.+2      	; 0x444a <__addsf3x+0x96>
    4448:	b3 cf       	rjmp	.-154    	; 0x43b0 <__addsf3+0x1e>
    444a:	93 95       	inc	r25
    444c:	88 0f       	add	r24, r24
    444e:	08 f0       	brcs	.+2      	; 0x4452 <__addsf3x+0x9e>
    4450:	99 27       	eor	r25, r25
    4452:	ee 0f       	add	r30, r30
    4454:	97 95       	ror	r25
    4456:	87 95       	ror	r24
    4458:	08 95       	ret

0000445a <__cmpsf2>:
    445a:	ec d0       	rcall	.+472    	; 0x4634 <__fp_cmp>
    445c:	08 f4       	brcc	.+2      	; 0x4460 <__cmpsf2+0x6>
    445e:	81 e0       	ldi	r24, 0x01	; 1
    4460:	08 95       	ret

00004462 <__divsf3>:
    4462:	0c d0       	rcall	.+24     	; 0x447c <__divsf3x>
    4464:	4b c1       	rjmp	.+662    	; 0x46fc <__fp_round>
    4466:	43 d1       	rcall	.+646    	; 0x46ee <__fp_pscB>
    4468:	40 f0       	brcs	.+16     	; 0x447a <__divsf3+0x18>
    446a:	3a d1       	rcall	.+628    	; 0x46e0 <__fp_pscA>
    446c:	30 f0       	brcs	.+12     	; 0x447a <__divsf3+0x18>
    446e:	21 f4       	brne	.+8      	; 0x4478 <__divsf3+0x16>
    4470:	5f 3f       	cpi	r21, 0xFF	; 255
    4472:	19 f0       	breq	.+6      	; 0x447a <__divsf3+0x18>
    4474:	03 c1       	rjmp	.+518    	; 0x467c <__fp_inf>
    4476:	51 11       	cpse	r21, r1
    4478:	8c c1       	rjmp	.+792    	; 0x4792 <__fp_szero>
    447a:	2f c1       	rjmp	.+606    	; 0x46da <__fp_nan>

0000447c <__divsf3x>:
    447c:	50 d1       	rcall	.+672    	; 0x471e <__fp_split3>
    447e:	98 f3       	brcs	.-26     	; 0x4466 <__divsf3+0x4>

00004480 <__divsf3_pse>:
    4480:	99 23       	and	r25, r25
    4482:	c9 f3       	breq	.-14     	; 0x4476 <__divsf3+0x14>
    4484:	55 23       	and	r21, r21
    4486:	b1 f3       	breq	.-20     	; 0x4474 <__divsf3+0x12>
    4488:	95 1b       	sub	r25, r21
    448a:	55 0b       	sbc	r21, r21
    448c:	bb 27       	eor	r27, r27
    448e:	aa 27       	eor	r26, r26
    4490:	62 17       	cp	r22, r18
    4492:	73 07       	cpc	r23, r19
    4494:	84 07       	cpc	r24, r20
    4496:	38 f0       	brcs	.+14     	; 0x44a6 <__divsf3_pse+0x26>
    4498:	9f 5f       	subi	r25, 0xFF	; 255
    449a:	5f 4f       	sbci	r21, 0xFF	; 255
    449c:	22 0f       	add	r18, r18
    449e:	33 1f       	adc	r19, r19
    44a0:	44 1f       	adc	r20, r20
    44a2:	aa 1f       	adc	r26, r26
    44a4:	a9 f3       	breq	.-22     	; 0x4490 <__divsf3_pse+0x10>
    44a6:	33 d0       	rcall	.+102    	; 0x450e <__divsf3_pse+0x8e>
    44a8:	0e 2e       	mov	r0, r30
    44aa:	3a f0       	brmi	.+14     	; 0x44ba <__divsf3_pse+0x3a>
    44ac:	e0 e8       	ldi	r30, 0x80	; 128
    44ae:	30 d0       	rcall	.+96     	; 0x4510 <__divsf3_pse+0x90>
    44b0:	91 50       	subi	r25, 0x01	; 1
    44b2:	50 40       	sbci	r21, 0x00	; 0
    44b4:	e6 95       	lsr	r30
    44b6:	00 1c       	adc	r0, r0
    44b8:	ca f7       	brpl	.-14     	; 0x44ac <__divsf3_pse+0x2c>
    44ba:	29 d0       	rcall	.+82     	; 0x450e <__divsf3_pse+0x8e>
    44bc:	fe 2f       	mov	r31, r30
    44be:	27 d0       	rcall	.+78     	; 0x450e <__divsf3_pse+0x8e>
    44c0:	66 0f       	add	r22, r22
    44c2:	77 1f       	adc	r23, r23
    44c4:	88 1f       	adc	r24, r24
    44c6:	bb 1f       	adc	r27, r27
    44c8:	26 17       	cp	r18, r22
    44ca:	37 07       	cpc	r19, r23
    44cc:	48 07       	cpc	r20, r24
    44ce:	ab 07       	cpc	r26, r27
    44d0:	b0 e8       	ldi	r27, 0x80	; 128
    44d2:	09 f0       	breq	.+2      	; 0x44d6 <__divsf3_pse+0x56>
    44d4:	bb 0b       	sbc	r27, r27
    44d6:	80 2d       	mov	r24, r0
    44d8:	bf 01       	movw	r22, r30
    44da:	ff 27       	eor	r31, r31
    44dc:	93 58       	subi	r25, 0x83	; 131
    44de:	5f 4f       	sbci	r21, 0xFF	; 255
    44e0:	2a f0       	brmi	.+10     	; 0x44ec <__divsf3_pse+0x6c>
    44e2:	9e 3f       	cpi	r25, 0xFE	; 254
    44e4:	51 05       	cpc	r21, r1
    44e6:	68 f0       	brcs	.+26     	; 0x4502 <__divsf3_pse+0x82>
    44e8:	c9 c0       	rjmp	.+402    	; 0x467c <__fp_inf>
    44ea:	53 c1       	rjmp	.+678    	; 0x4792 <__fp_szero>
    44ec:	5f 3f       	cpi	r21, 0xFF	; 255
    44ee:	ec f3       	brlt	.-6      	; 0x44ea <__divsf3_pse+0x6a>
    44f0:	98 3e       	cpi	r25, 0xE8	; 232
    44f2:	dc f3       	brlt	.-10     	; 0x44ea <__divsf3_pse+0x6a>
    44f4:	86 95       	lsr	r24
    44f6:	77 95       	ror	r23
    44f8:	67 95       	ror	r22
    44fa:	b7 95       	ror	r27
    44fc:	f7 95       	ror	r31
    44fe:	9f 5f       	subi	r25, 0xFF	; 255
    4500:	c9 f7       	brne	.-14     	; 0x44f4 <__divsf3_pse+0x74>
    4502:	88 0f       	add	r24, r24
    4504:	91 1d       	adc	r25, r1
    4506:	96 95       	lsr	r25
    4508:	87 95       	ror	r24
    450a:	97 f9       	bld	r25, 7
    450c:	08 95       	ret
    450e:	e1 e0       	ldi	r30, 0x01	; 1
    4510:	66 0f       	add	r22, r22
    4512:	77 1f       	adc	r23, r23
    4514:	88 1f       	adc	r24, r24
    4516:	bb 1f       	adc	r27, r27
    4518:	62 17       	cp	r22, r18
    451a:	73 07       	cpc	r23, r19
    451c:	84 07       	cpc	r24, r20
    451e:	ba 07       	cpc	r27, r26
    4520:	20 f0       	brcs	.+8      	; 0x452a <__divsf3_pse+0xaa>
    4522:	62 1b       	sub	r22, r18
    4524:	73 0b       	sbc	r23, r19
    4526:	84 0b       	sbc	r24, r20
    4528:	ba 0b       	sbc	r27, r26
    452a:	ee 1f       	adc	r30, r30
    452c:	88 f7       	brcc	.-30     	; 0x4510 <__divsf3_pse+0x90>
    452e:	e0 95       	com	r30
    4530:	08 95       	ret

00004532 <__fixsfsi>:
    4532:	04 d0       	rcall	.+8      	; 0x453c <__fixunssfsi>
    4534:	68 94       	set
    4536:	b1 11       	cpse	r27, r1
    4538:	2c c1       	rjmp	.+600    	; 0x4792 <__fp_szero>
    453a:	08 95       	ret

0000453c <__fixunssfsi>:
    453c:	f8 d0       	rcall	.+496    	; 0x472e <__fp_splitA>
    453e:	88 f0       	brcs	.+34     	; 0x4562 <__fixunssfsi+0x26>
    4540:	9f 57       	subi	r25, 0x7F	; 127
    4542:	90 f0       	brcs	.+36     	; 0x4568 <__fixunssfsi+0x2c>
    4544:	b9 2f       	mov	r27, r25
    4546:	99 27       	eor	r25, r25
    4548:	b7 51       	subi	r27, 0x17	; 23
    454a:	a0 f0       	brcs	.+40     	; 0x4574 <__fixunssfsi+0x38>
    454c:	d1 f0       	breq	.+52     	; 0x4582 <__fixunssfsi+0x46>
    454e:	66 0f       	add	r22, r22
    4550:	77 1f       	adc	r23, r23
    4552:	88 1f       	adc	r24, r24
    4554:	99 1f       	adc	r25, r25
    4556:	1a f0       	brmi	.+6      	; 0x455e <__fixunssfsi+0x22>
    4558:	ba 95       	dec	r27
    455a:	c9 f7       	brne	.-14     	; 0x454e <__fixunssfsi+0x12>
    455c:	12 c0       	rjmp	.+36     	; 0x4582 <__fixunssfsi+0x46>
    455e:	b1 30       	cpi	r27, 0x01	; 1
    4560:	81 f0       	breq	.+32     	; 0x4582 <__fixunssfsi+0x46>
    4562:	16 d1       	rcall	.+556    	; 0x4790 <__fp_zero>
    4564:	b1 e0       	ldi	r27, 0x01	; 1
    4566:	08 95       	ret
    4568:	13 c1       	rjmp	.+550    	; 0x4790 <__fp_zero>
    456a:	67 2f       	mov	r22, r23
    456c:	78 2f       	mov	r23, r24
    456e:	88 27       	eor	r24, r24
    4570:	b8 5f       	subi	r27, 0xF8	; 248
    4572:	39 f0       	breq	.+14     	; 0x4582 <__fixunssfsi+0x46>
    4574:	b9 3f       	cpi	r27, 0xF9	; 249
    4576:	cc f3       	brlt	.-14     	; 0x456a <__fixunssfsi+0x2e>
    4578:	86 95       	lsr	r24
    457a:	77 95       	ror	r23
    457c:	67 95       	ror	r22
    457e:	b3 95       	inc	r27
    4580:	d9 f7       	brne	.-10     	; 0x4578 <__fixunssfsi+0x3c>
    4582:	3e f4       	brtc	.+14     	; 0x4592 <__fixunssfsi+0x56>
    4584:	90 95       	com	r25
    4586:	80 95       	com	r24
    4588:	70 95       	com	r23
    458a:	61 95       	neg	r22
    458c:	7f 4f       	sbci	r23, 0xFF	; 255
    458e:	8f 4f       	sbci	r24, 0xFF	; 255
    4590:	9f 4f       	sbci	r25, 0xFF	; 255
    4592:	08 95       	ret

00004594 <__floatunsisf>:
    4594:	e8 94       	clt
    4596:	09 c0       	rjmp	.+18     	; 0x45aa <__floatsisf+0x12>

00004598 <__floatsisf>:
    4598:	97 fb       	bst	r25, 7
    459a:	3e f4       	brtc	.+14     	; 0x45aa <__floatsisf+0x12>
    459c:	90 95       	com	r25
    459e:	80 95       	com	r24
    45a0:	70 95       	com	r23
    45a2:	61 95       	neg	r22
    45a4:	7f 4f       	sbci	r23, 0xFF	; 255
    45a6:	8f 4f       	sbci	r24, 0xFF	; 255
    45a8:	9f 4f       	sbci	r25, 0xFF	; 255
    45aa:	99 23       	and	r25, r25
    45ac:	a9 f0       	breq	.+42     	; 0x45d8 <__floatsisf+0x40>
    45ae:	f9 2f       	mov	r31, r25
    45b0:	96 e9       	ldi	r25, 0x96	; 150
    45b2:	bb 27       	eor	r27, r27
    45b4:	93 95       	inc	r25
    45b6:	f6 95       	lsr	r31
    45b8:	87 95       	ror	r24
    45ba:	77 95       	ror	r23
    45bc:	67 95       	ror	r22
    45be:	b7 95       	ror	r27
    45c0:	f1 11       	cpse	r31, r1
    45c2:	f8 cf       	rjmp	.-16     	; 0x45b4 <__floatsisf+0x1c>
    45c4:	fa f4       	brpl	.+62     	; 0x4604 <__floatsisf+0x6c>
    45c6:	bb 0f       	add	r27, r27
    45c8:	11 f4       	brne	.+4      	; 0x45ce <__floatsisf+0x36>
    45ca:	60 ff       	sbrs	r22, 0
    45cc:	1b c0       	rjmp	.+54     	; 0x4604 <__floatsisf+0x6c>
    45ce:	6f 5f       	subi	r22, 0xFF	; 255
    45d0:	7f 4f       	sbci	r23, 0xFF	; 255
    45d2:	8f 4f       	sbci	r24, 0xFF	; 255
    45d4:	9f 4f       	sbci	r25, 0xFF	; 255
    45d6:	16 c0       	rjmp	.+44     	; 0x4604 <__floatsisf+0x6c>
    45d8:	88 23       	and	r24, r24
    45da:	11 f0       	breq	.+4      	; 0x45e0 <__floatsisf+0x48>
    45dc:	96 e9       	ldi	r25, 0x96	; 150
    45de:	11 c0       	rjmp	.+34     	; 0x4602 <__floatsisf+0x6a>
    45e0:	77 23       	and	r23, r23
    45e2:	21 f0       	breq	.+8      	; 0x45ec <__floatsisf+0x54>
    45e4:	9e e8       	ldi	r25, 0x8E	; 142
    45e6:	87 2f       	mov	r24, r23
    45e8:	76 2f       	mov	r23, r22
    45ea:	05 c0       	rjmp	.+10     	; 0x45f6 <__floatsisf+0x5e>
    45ec:	66 23       	and	r22, r22
    45ee:	71 f0       	breq	.+28     	; 0x460c <__floatsisf+0x74>
    45f0:	96 e8       	ldi	r25, 0x86	; 134
    45f2:	86 2f       	mov	r24, r22
    45f4:	70 e0       	ldi	r23, 0x00	; 0
    45f6:	60 e0       	ldi	r22, 0x00	; 0
    45f8:	2a f0       	brmi	.+10     	; 0x4604 <__floatsisf+0x6c>
    45fa:	9a 95       	dec	r25
    45fc:	66 0f       	add	r22, r22
    45fe:	77 1f       	adc	r23, r23
    4600:	88 1f       	adc	r24, r24
    4602:	da f7       	brpl	.-10     	; 0x45fa <__floatsisf+0x62>
    4604:	88 0f       	add	r24, r24
    4606:	96 95       	lsr	r25
    4608:	87 95       	ror	r24
    460a:	97 f9       	bld	r25, 7
    460c:	08 95       	ret

0000460e <floor>:
    460e:	a9 d0       	rcall	.+338    	; 0x4762 <__fp_trunc>
    4610:	80 f0       	brcs	.+32     	; 0x4632 <floor+0x24>
    4612:	9f 37       	cpi	r25, 0x7F	; 127
    4614:	40 f4       	brcc	.+16     	; 0x4626 <floor+0x18>
    4616:	91 11       	cpse	r25, r1
    4618:	0e f0       	brts	.+2      	; 0x461c <floor+0xe>
    461a:	bb c0       	rjmp	.+374    	; 0x4792 <__fp_szero>
    461c:	60 e0       	ldi	r22, 0x00	; 0
    461e:	70 e0       	ldi	r23, 0x00	; 0
    4620:	80 e8       	ldi	r24, 0x80	; 128
    4622:	9f eb       	ldi	r25, 0xBF	; 191
    4624:	08 95       	ret
    4626:	26 f4       	brtc	.+8      	; 0x4630 <floor+0x22>
    4628:	1b 16       	cp	r1, r27
    462a:	61 1d       	adc	r22, r1
    462c:	71 1d       	adc	r23, r1
    462e:	81 1d       	adc	r24, r1
    4630:	2b c0       	rjmp	.+86     	; 0x4688 <__fp_mintl>
    4632:	45 c0       	rjmp	.+138    	; 0x46be <__fp_mpack>

00004634 <__fp_cmp>:
    4634:	99 0f       	add	r25, r25
    4636:	00 08       	sbc	r0, r0
    4638:	55 0f       	add	r21, r21
    463a:	aa 0b       	sbc	r26, r26
    463c:	e0 e8       	ldi	r30, 0x80	; 128
    463e:	fe ef       	ldi	r31, 0xFE	; 254
    4640:	16 16       	cp	r1, r22
    4642:	17 06       	cpc	r1, r23
    4644:	e8 07       	cpc	r30, r24
    4646:	f9 07       	cpc	r31, r25
    4648:	c0 f0       	brcs	.+48     	; 0x467a <__fp_cmp+0x46>
    464a:	12 16       	cp	r1, r18
    464c:	13 06       	cpc	r1, r19
    464e:	e4 07       	cpc	r30, r20
    4650:	f5 07       	cpc	r31, r21
    4652:	98 f0       	brcs	.+38     	; 0x467a <__fp_cmp+0x46>
    4654:	62 1b       	sub	r22, r18
    4656:	73 0b       	sbc	r23, r19
    4658:	84 0b       	sbc	r24, r20
    465a:	95 0b       	sbc	r25, r21
    465c:	39 f4       	brne	.+14     	; 0x466c <__fp_cmp+0x38>
    465e:	0a 26       	eor	r0, r26
    4660:	61 f0       	breq	.+24     	; 0x467a <__fp_cmp+0x46>
    4662:	23 2b       	or	r18, r19
    4664:	24 2b       	or	r18, r20
    4666:	25 2b       	or	r18, r21
    4668:	21 f4       	brne	.+8      	; 0x4672 <__fp_cmp+0x3e>
    466a:	08 95       	ret
    466c:	0a 26       	eor	r0, r26
    466e:	09 f4       	brne	.+2      	; 0x4672 <__fp_cmp+0x3e>
    4670:	a1 40       	sbci	r26, 0x01	; 1
    4672:	a6 95       	lsr	r26
    4674:	8f ef       	ldi	r24, 0xFF	; 255
    4676:	81 1d       	adc	r24, r1
    4678:	81 1d       	adc	r24, r1
    467a:	08 95       	ret

0000467c <__fp_inf>:
    467c:	97 f9       	bld	r25, 7
    467e:	9f 67       	ori	r25, 0x7F	; 127
    4680:	80 e8       	ldi	r24, 0x80	; 128
    4682:	70 e0       	ldi	r23, 0x00	; 0
    4684:	60 e0       	ldi	r22, 0x00	; 0
    4686:	08 95       	ret

00004688 <__fp_mintl>:
    4688:	88 23       	and	r24, r24
    468a:	71 f4       	brne	.+28     	; 0x46a8 <__fp_mintl+0x20>
    468c:	77 23       	and	r23, r23
    468e:	21 f0       	breq	.+8      	; 0x4698 <__fp_mintl+0x10>
    4690:	98 50       	subi	r25, 0x08	; 8
    4692:	87 2b       	or	r24, r23
    4694:	76 2f       	mov	r23, r22
    4696:	07 c0       	rjmp	.+14     	; 0x46a6 <__fp_mintl+0x1e>
    4698:	66 23       	and	r22, r22
    469a:	11 f4       	brne	.+4      	; 0x46a0 <__fp_mintl+0x18>
    469c:	99 27       	eor	r25, r25
    469e:	0d c0       	rjmp	.+26     	; 0x46ba <__fp_mintl+0x32>
    46a0:	90 51       	subi	r25, 0x10	; 16
    46a2:	86 2b       	or	r24, r22
    46a4:	70 e0       	ldi	r23, 0x00	; 0
    46a6:	60 e0       	ldi	r22, 0x00	; 0
    46a8:	2a f0       	brmi	.+10     	; 0x46b4 <__fp_mintl+0x2c>
    46aa:	9a 95       	dec	r25
    46ac:	66 0f       	add	r22, r22
    46ae:	77 1f       	adc	r23, r23
    46b0:	88 1f       	adc	r24, r24
    46b2:	da f7       	brpl	.-10     	; 0x46aa <__fp_mintl+0x22>
    46b4:	88 0f       	add	r24, r24
    46b6:	96 95       	lsr	r25
    46b8:	87 95       	ror	r24
    46ba:	97 f9       	bld	r25, 7
    46bc:	08 95       	ret

000046be <__fp_mpack>:
    46be:	9f 3f       	cpi	r25, 0xFF	; 255
    46c0:	31 f0       	breq	.+12     	; 0x46ce <__fp_mpack_finite+0xc>

000046c2 <__fp_mpack_finite>:
    46c2:	91 50       	subi	r25, 0x01	; 1
    46c4:	20 f4       	brcc	.+8      	; 0x46ce <__fp_mpack_finite+0xc>
    46c6:	87 95       	ror	r24
    46c8:	77 95       	ror	r23
    46ca:	67 95       	ror	r22
    46cc:	b7 95       	ror	r27
    46ce:	88 0f       	add	r24, r24
    46d0:	91 1d       	adc	r25, r1
    46d2:	96 95       	lsr	r25
    46d4:	87 95       	ror	r24
    46d6:	97 f9       	bld	r25, 7
    46d8:	08 95       	ret

000046da <__fp_nan>:
    46da:	9f ef       	ldi	r25, 0xFF	; 255
    46dc:	80 ec       	ldi	r24, 0xC0	; 192
    46de:	08 95       	ret

000046e0 <__fp_pscA>:
    46e0:	00 24       	eor	r0, r0
    46e2:	0a 94       	dec	r0
    46e4:	16 16       	cp	r1, r22
    46e6:	17 06       	cpc	r1, r23
    46e8:	18 06       	cpc	r1, r24
    46ea:	09 06       	cpc	r0, r25
    46ec:	08 95       	ret

000046ee <__fp_pscB>:
    46ee:	00 24       	eor	r0, r0
    46f0:	0a 94       	dec	r0
    46f2:	12 16       	cp	r1, r18
    46f4:	13 06       	cpc	r1, r19
    46f6:	14 06       	cpc	r1, r20
    46f8:	05 06       	cpc	r0, r21
    46fa:	08 95       	ret

000046fc <__fp_round>:
    46fc:	09 2e       	mov	r0, r25
    46fe:	03 94       	inc	r0
    4700:	00 0c       	add	r0, r0
    4702:	11 f4       	brne	.+4      	; 0x4708 <__fp_round+0xc>
    4704:	88 23       	and	r24, r24
    4706:	52 f0       	brmi	.+20     	; 0x471c <__fp_round+0x20>
    4708:	bb 0f       	add	r27, r27
    470a:	40 f4       	brcc	.+16     	; 0x471c <__fp_round+0x20>
    470c:	bf 2b       	or	r27, r31
    470e:	11 f4       	brne	.+4      	; 0x4714 <__fp_round+0x18>
    4710:	60 ff       	sbrs	r22, 0
    4712:	04 c0       	rjmp	.+8      	; 0x471c <__fp_round+0x20>
    4714:	6f 5f       	subi	r22, 0xFF	; 255
    4716:	7f 4f       	sbci	r23, 0xFF	; 255
    4718:	8f 4f       	sbci	r24, 0xFF	; 255
    471a:	9f 4f       	sbci	r25, 0xFF	; 255
    471c:	08 95       	ret

0000471e <__fp_split3>:
    471e:	57 fd       	sbrc	r21, 7
    4720:	90 58       	subi	r25, 0x80	; 128
    4722:	44 0f       	add	r20, r20
    4724:	55 1f       	adc	r21, r21
    4726:	59 f0       	breq	.+22     	; 0x473e <__fp_splitA+0x10>
    4728:	5f 3f       	cpi	r21, 0xFF	; 255
    472a:	71 f0       	breq	.+28     	; 0x4748 <__fp_splitA+0x1a>
    472c:	47 95       	ror	r20

0000472e <__fp_splitA>:
    472e:	88 0f       	add	r24, r24
    4730:	97 fb       	bst	r25, 7
    4732:	99 1f       	adc	r25, r25
    4734:	61 f0       	breq	.+24     	; 0x474e <__fp_splitA+0x20>
    4736:	9f 3f       	cpi	r25, 0xFF	; 255
    4738:	79 f0       	breq	.+30     	; 0x4758 <__fp_splitA+0x2a>
    473a:	87 95       	ror	r24
    473c:	08 95       	ret
    473e:	12 16       	cp	r1, r18
    4740:	13 06       	cpc	r1, r19
    4742:	14 06       	cpc	r1, r20
    4744:	55 1f       	adc	r21, r21
    4746:	f2 cf       	rjmp	.-28     	; 0x472c <__fp_split3+0xe>
    4748:	46 95       	lsr	r20
    474a:	f1 df       	rcall	.-30     	; 0x472e <__fp_splitA>
    474c:	08 c0       	rjmp	.+16     	; 0x475e <__fp_splitA+0x30>
    474e:	16 16       	cp	r1, r22
    4750:	17 06       	cpc	r1, r23
    4752:	18 06       	cpc	r1, r24
    4754:	99 1f       	adc	r25, r25
    4756:	f1 cf       	rjmp	.-30     	; 0x473a <__fp_splitA+0xc>
    4758:	86 95       	lsr	r24
    475a:	71 05       	cpc	r23, r1
    475c:	61 05       	cpc	r22, r1
    475e:	08 94       	sec
    4760:	08 95       	ret

00004762 <__fp_trunc>:
    4762:	e5 df       	rcall	.-54     	; 0x472e <__fp_splitA>
    4764:	a0 f0       	brcs	.+40     	; 0x478e <__fp_trunc+0x2c>
    4766:	be e7       	ldi	r27, 0x7E	; 126
    4768:	b9 17       	cp	r27, r25
    476a:	88 f4       	brcc	.+34     	; 0x478e <__fp_trunc+0x2c>
    476c:	bb 27       	eor	r27, r27
    476e:	9f 38       	cpi	r25, 0x8F	; 143
    4770:	60 f4       	brcc	.+24     	; 0x478a <__fp_trunc+0x28>
    4772:	16 16       	cp	r1, r22
    4774:	b1 1d       	adc	r27, r1
    4776:	67 2f       	mov	r22, r23
    4778:	78 2f       	mov	r23, r24
    477a:	88 27       	eor	r24, r24
    477c:	98 5f       	subi	r25, 0xF8	; 248
    477e:	f7 cf       	rjmp	.-18     	; 0x476e <__fp_trunc+0xc>
    4780:	86 95       	lsr	r24
    4782:	77 95       	ror	r23
    4784:	67 95       	ror	r22
    4786:	b1 1d       	adc	r27, r1
    4788:	93 95       	inc	r25
    478a:	96 39       	cpi	r25, 0x96	; 150
    478c:	c8 f3       	brcs	.-14     	; 0x4780 <__fp_trunc+0x1e>
    478e:	08 95       	ret

00004790 <__fp_zero>:
    4790:	e8 94       	clt

00004792 <__fp_szero>:
    4792:	bb 27       	eor	r27, r27
    4794:	66 27       	eor	r22, r22
    4796:	77 27       	eor	r23, r23
    4798:	cb 01       	movw	r24, r22
    479a:	97 f9       	bld	r25, 7
    479c:	08 95       	ret

0000479e <__gesf2>:
    479e:	4a df       	rcall	.-364    	; 0x4634 <__fp_cmp>
    47a0:	08 f4       	brcc	.+2      	; 0x47a4 <__gesf2+0x6>
    47a2:	8f ef       	ldi	r24, 0xFF	; 255
    47a4:	08 95       	ret

000047a6 <__mulsf3>:
    47a6:	0b d0       	rcall	.+22     	; 0x47be <__mulsf3x>
    47a8:	a9 cf       	rjmp	.-174    	; 0x46fc <__fp_round>
    47aa:	9a df       	rcall	.-204    	; 0x46e0 <__fp_pscA>
    47ac:	28 f0       	brcs	.+10     	; 0x47b8 <__mulsf3+0x12>
    47ae:	9f df       	rcall	.-194    	; 0x46ee <__fp_pscB>
    47b0:	18 f0       	brcs	.+6      	; 0x47b8 <__mulsf3+0x12>
    47b2:	95 23       	and	r25, r21
    47b4:	09 f0       	breq	.+2      	; 0x47b8 <__mulsf3+0x12>
    47b6:	62 cf       	rjmp	.-316    	; 0x467c <__fp_inf>
    47b8:	90 cf       	rjmp	.-224    	; 0x46da <__fp_nan>
    47ba:	11 24       	eor	r1, r1
    47bc:	ea cf       	rjmp	.-44     	; 0x4792 <__fp_szero>

000047be <__mulsf3x>:
    47be:	af df       	rcall	.-162    	; 0x471e <__fp_split3>
    47c0:	a0 f3       	brcs	.-24     	; 0x47aa <__mulsf3+0x4>

000047c2 <__mulsf3_pse>:
    47c2:	95 9f       	mul	r25, r21
    47c4:	d1 f3       	breq	.-12     	; 0x47ba <__mulsf3+0x14>
    47c6:	95 0f       	add	r25, r21
    47c8:	50 e0       	ldi	r21, 0x00	; 0
    47ca:	55 1f       	adc	r21, r21
    47cc:	62 9f       	mul	r22, r18
    47ce:	f0 01       	movw	r30, r0
    47d0:	72 9f       	mul	r23, r18
    47d2:	bb 27       	eor	r27, r27
    47d4:	f0 0d       	add	r31, r0
    47d6:	b1 1d       	adc	r27, r1
    47d8:	63 9f       	mul	r22, r19
    47da:	aa 27       	eor	r26, r26
    47dc:	f0 0d       	add	r31, r0
    47de:	b1 1d       	adc	r27, r1
    47e0:	aa 1f       	adc	r26, r26
    47e2:	64 9f       	mul	r22, r20
    47e4:	66 27       	eor	r22, r22
    47e6:	b0 0d       	add	r27, r0
    47e8:	a1 1d       	adc	r26, r1
    47ea:	66 1f       	adc	r22, r22
    47ec:	82 9f       	mul	r24, r18
    47ee:	22 27       	eor	r18, r18
    47f0:	b0 0d       	add	r27, r0
    47f2:	a1 1d       	adc	r26, r1
    47f4:	62 1f       	adc	r22, r18
    47f6:	73 9f       	mul	r23, r19
    47f8:	b0 0d       	add	r27, r0
    47fa:	a1 1d       	adc	r26, r1
    47fc:	62 1f       	adc	r22, r18
    47fe:	83 9f       	mul	r24, r19
    4800:	a0 0d       	add	r26, r0
    4802:	61 1d       	adc	r22, r1
    4804:	22 1f       	adc	r18, r18
    4806:	74 9f       	mul	r23, r20
    4808:	33 27       	eor	r19, r19
    480a:	a0 0d       	add	r26, r0
    480c:	61 1d       	adc	r22, r1
    480e:	23 1f       	adc	r18, r19
    4810:	84 9f       	mul	r24, r20
    4812:	60 0d       	add	r22, r0
    4814:	21 1d       	adc	r18, r1
    4816:	82 2f       	mov	r24, r18
    4818:	76 2f       	mov	r23, r22
    481a:	6a 2f       	mov	r22, r26
    481c:	11 24       	eor	r1, r1
    481e:	9f 57       	subi	r25, 0x7F	; 127
    4820:	50 40       	sbci	r21, 0x00	; 0
    4822:	8a f0       	brmi	.+34     	; 0x4846 <__mulsf3_pse+0x84>
    4824:	e1 f0       	breq	.+56     	; 0x485e <__mulsf3_pse+0x9c>
    4826:	88 23       	and	r24, r24
    4828:	4a f0       	brmi	.+18     	; 0x483c <__mulsf3_pse+0x7a>
    482a:	ee 0f       	add	r30, r30
    482c:	ff 1f       	adc	r31, r31
    482e:	bb 1f       	adc	r27, r27
    4830:	66 1f       	adc	r22, r22
    4832:	77 1f       	adc	r23, r23
    4834:	88 1f       	adc	r24, r24
    4836:	91 50       	subi	r25, 0x01	; 1
    4838:	50 40       	sbci	r21, 0x00	; 0
    483a:	a9 f7       	brne	.-22     	; 0x4826 <__mulsf3_pse+0x64>
    483c:	9e 3f       	cpi	r25, 0xFE	; 254
    483e:	51 05       	cpc	r21, r1
    4840:	70 f0       	brcs	.+28     	; 0x485e <__mulsf3_pse+0x9c>
    4842:	1c cf       	rjmp	.-456    	; 0x467c <__fp_inf>
    4844:	a6 cf       	rjmp	.-180    	; 0x4792 <__fp_szero>
    4846:	5f 3f       	cpi	r21, 0xFF	; 255
    4848:	ec f3       	brlt	.-6      	; 0x4844 <__mulsf3_pse+0x82>
    484a:	98 3e       	cpi	r25, 0xE8	; 232
    484c:	dc f3       	brlt	.-10     	; 0x4844 <__mulsf3_pse+0x82>
    484e:	86 95       	lsr	r24
    4850:	77 95       	ror	r23
    4852:	67 95       	ror	r22
    4854:	b7 95       	ror	r27
    4856:	f7 95       	ror	r31
    4858:	e7 95       	ror	r30
    485a:	9f 5f       	subi	r25, 0xFF	; 255
    485c:	c1 f7       	brne	.-16     	; 0x484e <__mulsf3_pse+0x8c>
    485e:	fe 2b       	or	r31, r30
    4860:	88 0f       	add	r24, r24
    4862:	91 1d       	adc	r25, r1
    4864:	96 95       	lsr	r25
    4866:	87 95       	ror	r24
    4868:	97 f9       	bld	r25, 7
    486a:	08 95       	ret

0000486c <__udivmodqi4>:
    486c:	99 1b       	sub	r25, r25
    486e:	79 e0       	ldi	r23, 0x09	; 9
    4870:	04 c0       	rjmp	.+8      	; 0x487a <__udivmodqi4_ep>

00004872 <__udivmodqi4_loop>:
    4872:	99 1f       	adc	r25, r25
    4874:	96 17       	cp	r25, r22
    4876:	08 f0       	brcs	.+2      	; 0x487a <__udivmodqi4_ep>
    4878:	96 1b       	sub	r25, r22

0000487a <__udivmodqi4_ep>:
    487a:	88 1f       	adc	r24, r24
    487c:	7a 95       	dec	r23
    487e:	c9 f7       	brne	.-14     	; 0x4872 <__udivmodqi4_loop>
    4880:	80 95       	com	r24
    4882:	08 95       	ret

00004884 <__udivmodhi4>:
    4884:	aa 1b       	sub	r26, r26
    4886:	bb 1b       	sub	r27, r27
    4888:	51 e1       	ldi	r21, 0x11	; 17
    488a:	07 c0       	rjmp	.+14     	; 0x489a <__udivmodhi4_ep>

0000488c <__udivmodhi4_loop>:
    488c:	aa 1f       	adc	r26, r26
    488e:	bb 1f       	adc	r27, r27
    4890:	a6 17       	cp	r26, r22
    4892:	b7 07       	cpc	r27, r23
    4894:	10 f0       	brcs	.+4      	; 0x489a <__udivmodhi4_ep>
    4896:	a6 1b       	sub	r26, r22
    4898:	b7 0b       	sbc	r27, r23

0000489a <__udivmodhi4_ep>:
    489a:	88 1f       	adc	r24, r24
    489c:	99 1f       	adc	r25, r25
    489e:	5a 95       	dec	r21
    48a0:	a9 f7       	brne	.-22     	; 0x488c <__udivmodhi4_loop>
    48a2:	80 95       	com	r24
    48a4:	90 95       	com	r25
    48a6:	bc 01       	movw	r22, r24
    48a8:	cd 01       	movw	r24, r26
    48aa:	08 95       	ret

000048ac <__divmodhi4>:
    48ac:	97 fb       	bst	r25, 7
    48ae:	07 2e       	mov	r0, r23
    48b0:	16 f4       	brtc	.+4      	; 0x48b6 <__divmodhi4+0xa>
    48b2:	00 94       	com	r0
    48b4:	06 d0       	rcall	.+12     	; 0x48c2 <__divmodhi4_neg1>
    48b6:	77 fd       	sbrc	r23, 7
    48b8:	08 d0       	rcall	.+16     	; 0x48ca <__divmodhi4_neg2>
    48ba:	e4 df       	rcall	.-56     	; 0x4884 <__udivmodhi4>
    48bc:	07 fc       	sbrc	r0, 7
    48be:	05 d0       	rcall	.+10     	; 0x48ca <__divmodhi4_neg2>
    48c0:	3e f4       	brtc	.+14     	; 0x48d0 <__divmodhi4_exit>

000048c2 <__divmodhi4_neg1>:
    48c2:	90 95       	com	r25
    48c4:	81 95       	neg	r24
    48c6:	9f 4f       	sbci	r25, 0xFF	; 255
    48c8:	08 95       	ret

000048ca <__divmodhi4_neg2>:
    48ca:	70 95       	com	r23
    48cc:	61 95       	neg	r22
    48ce:	7f 4f       	sbci	r23, 0xFF	; 255

000048d0 <__divmodhi4_exit>:
    48d0:	08 95       	ret

000048d2 <__udivmodsi4>:
    48d2:	a1 e2       	ldi	r26, 0x21	; 33
    48d4:	1a 2e       	mov	r1, r26
    48d6:	aa 1b       	sub	r26, r26
    48d8:	bb 1b       	sub	r27, r27
    48da:	fd 01       	movw	r30, r26
    48dc:	0d c0       	rjmp	.+26     	; 0x48f8 <__udivmodsi4_ep>

000048de <__udivmodsi4_loop>:
    48de:	aa 1f       	adc	r26, r26
    48e0:	bb 1f       	adc	r27, r27
    48e2:	ee 1f       	adc	r30, r30
    48e4:	ff 1f       	adc	r31, r31
    48e6:	a2 17       	cp	r26, r18
    48e8:	b3 07       	cpc	r27, r19
    48ea:	e4 07       	cpc	r30, r20
    48ec:	f5 07       	cpc	r31, r21
    48ee:	20 f0       	brcs	.+8      	; 0x48f8 <__udivmodsi4_ep>
    48f0:	a2 1b       	sub	r26, r18
    48f2:	b3 0b       	sbc	r27, r19
    48f4:	e4 0b       	sbc	r30, r20
    48f6:	f5 0b       	sbc	r31, r21

000048f8 <__udivmodsi4_ep>:
    48f8:	66 1f       	adc	r22, r22
    48fa:	77 1f       	adc	r23, r23
    48fc:	88 1f       	adc	r24, r24
    48fe:	99 1f       	adc	r25, r25
    4900:	1a 94       	dec	r1
    4902:	69 f7       	brne	.-38     	; 0x48de <__udivmodsi4_loop>
    4904:	60 95       	com	r22
    4906:	70 95       	com	r23
    4908:	80 95       	com	r24
    490a:	90 95       	com	r25
    490c:	9b 01       	movw	r18, r22
    490e:	ac 01       	movw	r20, r24
    4910:	bd 01       	movw	r22, r26
    4912:	cf 01       	movw	r24, r30
    4914:	08 95       	ret

00004916 <__tablejump2__>:
    4916:	ee 0f       	add	r30, r30
    4918:	ff 1f       	adc	r31, r31
    491a:	05 90       	lpm	r0, Z+
    491c:	f4 91       	lpm	r31, Z
    491e:	e0 2d       	mov	r30, r0
    4920:	09 94       	ijmp

00004922 <__umulhisi3>:
    4922:	a2 9f       	mul	r26, r18
    4924:	b0 01       	movw	r22, r0
    4926:	b3 9f       	mul	r27, r19
    4928:	c0 01       	movw	r24, r0
    492a:	a3 9f       	mul	r26, r19
    492c:	70 0d       	add	r23, r0
    492e:	81 1d       	adc	r24, r1
    4930:	11 24       	eor	r1, r1
    4932:	91 1d       	adc	r25, r1
    4934:	b2 9f       	mul	r27, r18
    4936:	70 0d       	add	r23, r0
    4938:	81 1d       	adc	r24, r1
    493a:	11 24       	eor	r1, r1
    493c:	91 1d       	adc	r25, r1
    493e:	08 95       	ret

00004940 <__muluhisi3>:
    4940:	f0 df       	rcall	.-32     	; 0x4922 <__umulhisi3>
    4942:	a5 9f       	mul	r26, r21
    4944:	90 0d       	add	r25, r0
    4946:	b4 9f       	mul	r27, r20
    4948:	90 0d       	add	r25, r0
    494a:	a4 9f       	mul	r26, r20
    494c:	80 0d       	add	r24, r0
    494e:	91 1d       	adc	r25, r1
    4950:	11 24       	eor	r1, r1
    4952:	08 95       	ret

00004954 <strcpy>:
    4954:	fb 01       	movw	r30, r22
    4956:	dc 01       	movw	r26, r24
    4958:	01 90       	ld	r0, Z+
    495a:	0d 92       	st	X+, r0
    495c:	00 20       	and	r0, r0
    495e:	e1 f7       	brne	.-8      	; 0x4958 <strcpy+0x4>
    4960:	08 95       	ret

00004962 <strnlen>:
    4962:	fc 01       	movw	r30, r24
    4964:	61 50       	subi	r22, 0x01	; 1
    4966:	70 40       	sbci	r23, 0x00	; 0
    4968:	01 90       	ld	r0, Z+
    496a:	01 10       	cpse	r0, r1
    496c:	d8 f7       	brcc	.-10     	; 0x4964 <strnlen+0x2>
    496e:	80 95       	com	r24
    4970:	90 95       	com	r25
    4972:	8e 0f       	add	r24, r30
    4974:	9f 1f       	adc	r25, r31
    4976:	08 95       	ret

00004978 <snprintf>:
    4978:	ae e0       	ldi	r26, 0x0E	; 14
    497a:	b0 e0       	ldi	r27, 0x00	; 0
    497c:	e1 ec       	ldi	r30, 0xC1	; 193
    497e:	f4 e2       	ldi	r31, 0x24	; 36
    4980:	c3 c2       	rjmp	.+1414   	; 0x4f08 <__prologue_saves__+0x1c>
    4982:	0d 89       	ldd	r16, Y+21	; 0x15
    4984:	1e 89       	ldd	r17, Y+22	; 0x16
    4986:	8f 89       	ldd	r24, Y+23	; 0x17
    4988:	98 8d       	ldd	r25, Y+24	; 0x18
    498a:	26 e0       	ldi	r18, 0x06	; 6
    498c:	2c 83       	std	Y+4, r18	; 0x04
    498e:	1a 83       	std	Y+2, r17	; 0x02
    4990:	09 83       	std	Y+1, r16	; 0x01
    4992:	97 ff       	sbrs	r25, 7
    4994:	02 c0       	rjmp	.+4      	; 0x499a <snprintf+0x22>
    4996:	80 e0       	ldi	r24, 0x00	; 0
    4998:	90 e8       	ldi	r25, 0x80	; 128
    499a:	01 97       	sbiw	r24, 0x01	; 1
    499c:	9e 83       	std	Y+6, r25	; 0x06
    499e:	8d 83       	std	Y+5, r24	; 0x05
    49a0:	ae 01       	movw	r20, r28
    49a2:	45 5e       	subi	r20, 0xE5	; 229
    49a4:	5f 4f       	sbci	r21, 0xFF	; 255
    49a6:	69 8d       	ldd	r22, Y+25	; 0x19
    49a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49aa:	ce 01       	movw	r24, r28
    49ac:	01 96       	adiw	r24, 0x01	; 1
    49ae:	11 d0       	rcall	.+34     	; 0x49d2 <vfprintf>
    49b0:	4d 81       	ldd	r20, Y+5	; 0x05
    49b2:	5e 81       	ldd	r21, Y+6	; 0x06
    49b4:	57 fd       	sbrc	r21, 7
    49b6:	0a c0       	rjmp	.+20     	; 0x49cc <snprintf+0x54>
    49b8:	2f 81       	ldd	r18, Y+7	; 0x07
    49ba:	38 85       	ldd	r19, Y+8	; 0x08
    49bc:	42 17       	cp	r20, r18
    49be:	53 07       	cpc	r21, r19
    49c0:	0c f4       	brge	.+2      	; 0x49c4 <snprintf+0x4c>
    49c2:	9a 01       	movw	r18, r20
    49c4:	f8 01       	movw	r30, r16
    49c6:	e2 0f       	add	r30, r18
    49c8:	f3 1f       	adc	r31, r19
    49ca:	10 82       	st	Z, r1
    49cc:	2e 96       	adiw	r28, 0x0e	; 14
    49ce:	e4 e0       	ldi	r30, 0x04	; 4
    49d0:	b7 c2       	rjmp	.+1390   	; 0x4f40 <__epilogue_restores__+0x1c>

000049d2 <vfprintf>:
    49d2:	ab e0       	ldi	r26, 0x0B	; 11
    49d4:	b0 e0       	ldi	r27, 0x00	; 0
    49d6:	ee ee       	ldi	r30, 0xEE	; 238
    49d8:	f4 e2       	ldi	r31, 0x24	; 36
    49da:	88 c2       	rjmp	.+1296   	; 0x4eec <__prologue_saves__>
    49dc:	6c 01       	movw	r12, r24
    49de:	7b 01       	movw	r14, r22
    49e0:	8a 01       	movw	r16, r20
    49e2:	fc 01       	movw	r30, r24
    49e4:	17 82       	std	Z+7, r1	; 0x07
    49e6:	16 82       	std	Z+6, r1	; 0x06
    49e8:	83 81       	ldd	r24, Z+3	; 0x03
    49ea:	81 ff       	sbrs	r24, 1
    49ec:	bf c1       	rjmp	.+894    	; 0x4d6c <vfprintf+0x39a>
    49ee:	ce 01       	movw	r24, r28
    49f0:	01 96       	adiw	r24, 0x01	; 1
    49f2:	3c 01       	movw	r6, r24
    49f4:	f6 01       	movw	r30, r12
    49f6:	93 81       	ldd	r25, Z+3	; 0x03
    49f8:	f7 01       	movw	r30, r14
    49fa:	93 fd       	sbrc	r25, 3
    49fc:	85 91       	lpm	r24, Z+
    49fe:	93 ff       	sbrs	r25, 3
    4a00:	81 91       	ld	r24, Z+
    4a02:	7f 01       	movw	r14, r30
    4a04:	88 23       	and	r24, r24
    4a06:	09 f4       	brne	.+2      	; 0x4a0a <vfprintf+0x38>
    4a08:	ad c1       	rjmp	.+858    	; 0x4d64 <vfprintf+0x392>
    4a0a:	85 32       	cpi	r24, 0x25	; 37
    4a0c:	39 f4       	brne	.+14     	; 0x4a1c <vfprintf+0x4a>
    4a0e:	93 fd       	sbrc	r25, 3
    4a10:	85 91       	lpm	r24, Z+
    4a12:	93 ff       	sbrs	r25, 3
    4a14:	81 91       	ld	r24, Z+
    4a16:	7f 01       	movw	r14, r30
    4a18:	85 32       	cpi	r24, 0x25	; 37
    4a1a:	21 f4       	brne	.+8      	; 0x4a24 <vfprintf+0x52>
    4a1c:	b6 01       	movw	r22, r12
    4a1e:	90 e0       	ldi	r25, 0x00	; 0
    4a20:	b5 d1       	rcall	.+874    	; 0x4d8c <fputc>
    4a22:	e8 cf       	rjmp	.-48     	; 0x49f4 <vfprintf+0x22>
    4a24:	91 2c       	mov	r9, r1
    4a26:	21 2c       	mov	r2, r1
    4a28:	31 2c       	mov	r3, r1
    4a2a:	ff e1       	ldi	r31, 0x1F	; 31
    4a2c:	f3 15       	cp	r31, r3
    4a2e:	d8 f0       	brcs	.+54     	; 0x4a66 <vfprintf+0x94>
    4a30:	8b 32       	cpi	r24, 0x2B	; 43
    4a32:	79 f0       	breq	.+30     	; 0x4a52 <vfprintf+0x80>
    4a34:	38 f4       	brcc	.+14     	; 0x4a44 <vfprintf+0x72>
    4a36:	80 32       	cpi	r24, 0x20	; 32
    4a38:	79 f0       	breq	.+30     	; 0x4a58 <vfprintf+0x86>
    4a3a:	83 32       	cpi	r24, 0x23	; 35
    4a3c:	a1 f4       	brne	.+40     	; 0x4a66 <vfprintf+0x94>
    4a3e:	23 2d       	mov	r18, r3
    4a40:	20 61       	ori	r18, 0x10	; 16
    4a42:	1d c0       	rjmp	.+58     	; 0x4a7e <vfprintf+0xac>
    4a44:	8d 32       	cpi	r24, 0x2D	; 45
    4a46:	61 f0       	breq	.+24     	; 0x4a60 <vfprintf+0x8e>
    4a48:	80 33       	cpi	r24, 0x30	; 48
    4a4a:	69 f4       	brne	.+26     	; 0x4a66 <vfprintf+0x94>
    4a4c:	23 2d       	mov	r18, r3
    4a4e:	21 60       	ori	r18, 0x01	; 1
    4a50:	16 c0       	rjmp	.+44     	; 0x4a7e <vfprintf+0xac>
    4a52:	83 2d       	mov	r24, r3
    4a54:	82 60       	ori	r24, 0x02	; 2
    4a56:	38 2e       	mov	r3, r24
    4a58:	e3 2d       	mov	r30, r3
    4a5a:	e4 60       	ori	r30, 0x04	; 4
    4a5c:	3e 2e       	mov	r3, r30
    4a5e:	2a c0       	rjmp	.+84     	; 0x4ab4 <vfprintf+0xe2>
    4a60:	f3 2d       	mov	r31, r3
    4a62:	f8 60       	ori	r31, 0x08	; 8
    4a64:	1d c0       	rjmp	.+58     	; 0x4aa0 <vfprintf+0xce>
    4a66:	37 fc       	sbrc	r3, 7
    4a68:	2d c0       	rjmp	.+90     	; 0x4ac4 <vfprintf+0xf2>
    4a6a:	20 ed       	ldi	r18, 0xD0	; 208
    4a6c:	28 0f       	add	r18, r24
    4a6e:	2a 30       	cpi	r18, 0x0A	; 10
    4a70:	40 f0       	brcs	.+16     	; 0x4a82 <vfprintf+0xb0>
    4a72:	8e 32       	cpi	r24, 0x2E	; 46
    4a74:	b9 f4       	brne	.+46     	; 0x4aa4 <vfprintf+0xd2>
    4a76:	36 fc       	sbrc	r3, 6
    4a78:	75 c1       	rjmp	.+746    	; 0x4d64 <vfprintf+0x392>
    4a7a:	23 2d       	mov	r18, r3
    4a7c:	20 64       	ori	r18, 0x40	; 64
    4a7e:	32 2e       	mov	r3, r18
    4a80:	19 c0       	rjmp	.+50     	; 0x4ab4 <vfprintf+0xe2>
    4a82:	36 fe       	sbrs	r3, 6
    4a84:	06 c0       	rjmp	.+12     	; 0x4a92 <vfprintf+0xc0>
    4a86:	8a e0       	ldi	r24, 0x0A	; 10
    4a88:	98 9e       	mul	r9, r24
    4a8a:	20 0d       	add	r18, r0
    4a8c:	11 24       	eor	r1, r1
    4a8e:	92 2e       	mov	r9, r18
    4a90:	11 c0       	rjmp	.+34     	; 0x4ab4 <vfprintf+0xe2>
    4a92:	ea e0       	ldi	r30, 0x0A	; 10
    4a94:	2e 9e       	mul	r2, r30
    4a96:	20 0d       	add	r18, r0
    4a98:	11 24       	eor	r1, r1
    4a9a:	22 2e       	mov	r2, r18
    4a9c:	f3 2d       	mov	r31, r3
    4a9e:	f0 62       	ori	r31, 0x20	; 32
    4aa0:	3f 2e       	mov	r3, r31
    4aa2:	08 c0       	rjmp	.+16     	; 0x4ab4 <vfprintf+0xe2>
    4aa4:	8c 36       	cpi	r24, 0x6C	; 108
    4aa6:	21 f4       	brne	.+8      	; 0x4ab0 <vfprintf+0xde>
    4aa8:	83 2d       	mov	r24, r3
    4aaa:	80 68       	ori	r24, 0x80	; 128
    4aac:	38 2e       	mov	r3, r24
    4aae:	02 c0       	rjmp	.+4      	; 0x4ab4 <vfprintf+0xe2>
    4ab0:	88 36       	cpi	r24, 0x68	; 104
    4ab2:	41 f4       	brne	.+16     	; 0x4ac4 <vfprintf+0xf2>
    4ab4:	f7 01       	movw	r30, r14
    4ab6:	93 fd       	sbrc	r25, 3
    4ab8:	85 91       	lpm	r24, Z+
    4aba:	93 ff       	sbrs	r25, 3
    4abc:	81 91       	ld	r24, Z+
    4abe:	7f 01       	movw	r14, r30
    4ac0:	81 11       	cpse	r24, r1
    4ac2:	b3 cf       	rjmp	.-154    	; 0x4a2a <vfprintf+0x58>
    4ac4:	98 2f       	mov	r25, r24
    4ac6:	9f 7d       	andi	r25, 0xDF	; 223
    4ac8:	95 54       	subi	r25, 0x45	; 69
    4aca:	93 30       	cpi	r25, 0x03	; 3
    4acc:	28 f4       	brcc	.+10     	; 0x4ad8 <vfprintf+0x106>
    4ace:	0c 5f       	subi	r16, 0xFC	; 252
    4ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad2:	9f e3       	ldi	r25, 0x3F	; 63
    4ad4:	99 83       	std	Y+1, r25	; 0x01
    4ad6:	0d c0       	rjmp	.+26     	; 0x4af2 <vfprintf+0x120>
    4ad8:	83 36       	cpi	r24, 0x63	; 99
    4ada:	31 f0       	breq	.+12     	; 0x4ae8 <vfprintf+0x116>
    4adc:	83 37       	cpi	r24, 0x73	; 115
    4ade:	71 f0       	breq	.+28     	; 0x4afc <vfprintf+0x12a>
    4ae0:	83 35       	cpi	r24, 0x53	; 83
    4ae2:	09 f0       	breq	.+2      	; 0x4ae6 <vfprintf+0x114>
    4ae4:	55 c0       	rjmp	.+170    	; 0x4b90 <vfprintf+0x1be>
    4ae6:	20 c0       	rjmp	.+64     	; 0x4b28 <vfprintf+0x156>
    4ae8:	f8 01       	movw	r30, r16
    4aea:	80 81       	ld	r24, Z
    4aec:	89 83       	std	Y+1, r24	; 0x01
    4aee:	0e 5f       	subi	r16, 0xFE	; 254
    4af0:	1f 4f       	sbci	r17, 0xFF	; 255
    4af2:	88 24       	eor	r8, r8
    4af4:	83 94       	inc	r8
    4af6:	91 2c       	mov	r9, r1
    4af8:	53 01       	movw	r10, r6
    4afa:	12 c0       	rjmp	.+36     	; 0x4b20 <vfprintf+0x14e>
    4afc:	28 01       	movw	r4, r16
    4afe:	f2 e0       	ldi	r31, 0x02	; 2
    4b00:	4f 0e       	add	r4, r31
    4b02:	51 1c       	adc	r5, r1
    4b04:	f8 01       	movw	r30, r16
    4b06:	a0 80       	ld	r10, Z
    4b08:	b1 80       	ldd	r11, Z+1	; 0x01
    4b0a:	36 fe       	sbrs	r3, 6
    4b0c:	03 c0       	rjmp	.+6      	; 0x4b14 <vfprintf+0x142>
    4b0e:	69 2d       	mov	r22, r9
    4b10:	70 e0       	ldi	r23, 0x00	; 0
    4b12:	02 c0       	rjmp	.+4      	; 0x4b18 <vfprintf+0x146>
    4b14:	6f ef       	ldi	r22, 0xFF	; 255
    4b16:	7f ef       	ldi	r23, 0xFF	; 255
    4b18:	c5 01       	movw	r24, r10
    4b1a:	23 df       	rcall	.-442    	; 0x4962 <strnlen>
    4b1c:	4c 01       	movw	r8, r24
    4b1e:	82 01       	movw	r16, r4
    4b20:	f3 2d       	mov	r31, r3
    4b22:	ff 77       	andi	r31, 0x7F	; 127
    4b24:	3f 2e       	mov	r3, r31
    4b26:	15 c0       	rjmp	.+42     	; 0x4b52 <vfprintf+0x180>
    4b28:	28 01       	movw	r4, r16
    4b2a:	22 e0       	ldi	r18, 0x02	; 2
    4b2c:	42 0e       	add	r4, r18
    4b2e:	51 1c       	adc	r5, r1
    4b30:	f8 01       	movw	r30, r16
    4b32:	a0 80       	ld	r10, Z
    4b34:	b1 80       	ldd	r11, Z+1	; 0x01
    4b36:	36 fe       	sbrs	r3, 6
    4b38:	03 c0       	rjmp	.+6      	; 0x4b40 <vfprintf+0x16e>
    4b3a:	69 2d       	mov	r22, r9
    4b3c:	70 e0       	ldi	r23, 0x00	; 0
    4b3e:	02 c0       	rjmp	.+4      	; 0x4b44 <vfprintf+0x172>
    4b40:	6f ef       	ldi	r22, 0xFF	; 255
    4b42:	7f ef       	ldi	r23, 0xFF	; 255
    4b44:	c5 01       	movw	r24, r10
    4b46:	17 d1       	rcall	.+558    	; 0x4d76 <strnlen_P>
    4b48:	4c 01       	movw	r8, r24
    4b4a:	f3 2d       	mov	r31, r3
    4b4c:	f0 68       	ori	r31, 0x80	; 128
    4b4e:	3f 2e       	mov	r3, r31
    4b50:	82 01       	movw	r16, r4
    4b52:	33 fc       	sbrc	r3, 3
    4b54:	19 c0       	rjmp	.+50     	; 0x4b88 <vfprintf+0x1b6>
    4b56:	82 2d       	mov	r24, r2
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	88 16       	cp	r8, r24
    4b5c:	99 06       	cpc	r9, r25
    4b5e:	a0 f4       	brcc	.+40     	; 0x4b88 <vfprintf+0x1b6>
    4b60:	b6 01       	movw	r22, r12
    4b62:	80 e2       	ldi	r24, 0x20	; 32
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	12 d1       	rcall	.+548    	; 0x4d8c <fputc>
    4b68:	2a 94       	dec	r2
    4b6a:	f5 cf       	rjmp	.-22     	; 0x4b56 <vfprintf+0x184>
    4b6c:	f5 01       	movw	r30, r10
    4b6e:	37 fc       	sbrc	r3, 7
    4b70:	85 91       	lpm	r24, Z+
    4b72:	37 fe       	sbrs	r3, 7
    4b74:	81 91       	ld	r24, Z+
    4b76:	5f 01       	movw	r10, r30
    4b78:	b6 01       	movw	r22, r12
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	07 d1       	rcall	.+526    	; 0x4d8c <fputc>
    4b7e:	21 10       	cpse	r2, r1
    4b80:	2a 94       	dec	r2
    4b82:	21 e0       	ldi	r18, 0x01	; 1
    4b84:	82 1a       	sub	r8, r18
    4b86:	91 08       	sbc	r9, r1
    4b88:	81 14       	cp	r8, r1
    4b8a:	91 04       	cpc	r9, r1
    4b8c:	79 f7       	brne	.-34     	; 0x4b6c <vfprintf+0x19a>
    4b8e:	e1 c0       	rjmp	.+450    	; 0x4d52 <vfprintf+0x380>
    4b90:	84 36       	cpi	r24, 0x64	; 100
    4b92:	11 f0       	breq	.+4      	; 0x4b98 <vfprintf+0x1c6>
    4b94:	89 36       	cpi	r24, 0x69	; 105
    4b96:	39 f5       	brne	.+78     	; 0x4be6 <vfprintf+0x214>
    4b98:	f8 01       	movw	r30, r16
    4b9a:	37 fe       	sbrs	r3, 7
    4b9c:	07 c0       	rjmp	.+14     	; 0x4bac <vfprintf+0x1da>
    4b9e:	60 81       	ld	r22, Z
    4ba0:	71 81       	ldd	r23, Z+1	; 0x01
    4ba2:	82 81       	ldd	r24, Z+2	; 0x02
    4ba4:	93 81       	ldd	r25, Z+3	; 0x03
    4ba6:	0c 5f       	subi	r16, 0xFC	; 252
    4ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    4baa:	08 c0       	rjmp	.+16     	; 0x4bbc <vfprintf+0x1ea>
    4bac:	60 81       	ld	r22, Z
    4bae:	71 81       	ldd	r23, Z+1	; 0x01
    4bb0:	07 2e       	mov	r0, r23
    4bb2:	00 0c       	add	r0, r0
    4bb4:	88 0b       	sbc	r24, r24
    4bb6:	99 0b       	sbc	r25, r25
    4bb8:	0e 5f       	subi	r16, 0xFE	; 254
    4bba:	1f 4f       	sbci	r17, 0xFF	; 255
    4bbc:	f3 2d       	mov	r31, r3
    4bbe:	ff 76       	andi	r31, 0x6F	; 111
    4bc0:	3f 2e       	mov	r3, r31
    4bc2:	97 ff       	sbrs	r25, 7
    4bc4:	09 c0       	rjmp	.+18     	; 0x4bd8 <vfprintf+0x206>
    4bc6:	90 95       	com	r25
    4bc8:	80 95       	com	r24
    4bca:	70 95       	com	r23
    4bcc:	61 95       	neg	r22
    4bce:	7f 4f       	sbci	r23, 0xFF	; 255
    4bd0:	8f 4f       	sbci	r24, 0xFF	; 255
    4bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    4bd4:	f0 68       	ori	r31, 0x80	; 128
    4bd6:	3f 2e       	mov	r3, r31
    4bd8:	2a e0       	ldi	r18, 0x0A	; 10
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	a3 01       	movw	r20, r6
    4bde:	12 d1       	rcall	.+548    	; 0x4e04 <__ultoa_invert>
    4be0:	88 2e       	mov	r8, r24
    4be2:	86 18       	sub	r8, r6
    4be4:	44 c0       	rjmp	.+136    	; 0x4c6e <vfprintf+0x29c>
    4be6:	85 37       	cpi	r24, 0x75	; 117
    4be8:	31 f4       	brne	.+12     	; 0x4bf6 <vfprintf+0x224>
    4bea:	23 2d       	mov	r18, r3
    4bec:	2f 7e       	andi	r18, 0xEF	; 239
    4bee:	b2 2e       	mov	r11, r18
    4bf0:	2a e0       	ldi	r18, 0x0A	; 10
    4bf2:	30 e0       	ldi	r19, 0x00	; 0
    4bf4:	25 c0       	rjmp	.+74     	; 0x4c40 <vfprintf+0x26e>
    4bf6:	93 2d       	mov	r25, r3
    4bf8:	99 7f       	andi	r25, 0xF9	; 249
    4bfa:	b9 2e       	mov	r11, r25
    4bfc:	8f 36       	cpi	r24, 0x6F	; 111
    4bfe:	c1 f0       	breq	.+48     	; 0x4c30 <vfprintf+0x25e>
    4c00:	18 f4       	brcc	.+6      	; 0x4c08 <vfprintf+0x236>
    4c02:	88 35       	cpi	r24, 0x58	; 88
    4c04:	79 f0       	breq	.+30     	; 0x4c24 <vfprintf+0x252>
    4c06:	ae c0       	rjmp	.+348    	; 0x4d64 <vfprintf+0x392>
    4c08:	80 37       	cpi	r24, 0x70	; 112
    4c0a:	19 f0       	breq	.+6      	; 0x4c12 <vfprintf+0x240>
    4c0c:	88 37       	cpi	r24, 0x78	; 120
    4c0e:	21 f0       	breq	.+8      	; 0x4c18 <vfprintf+0x246>
    4c10:	a9 c0       	rjmp	.+338    	; 0x4d64 <vfprintf+0x392>
    4c12:	e9 2f       	mov	r30, r25
    4c14:	e0 61       	ori	r30, 0x10	; 16
    4c16:	be 2e       	mov	r11, r30
    4c18:	b4 fe       	sbrs	r11, 4
    4c1a:	0d c0       	rjmp	.+26     	; 0x4c36 <vfprintf+0x264>
    4c1c:	fb 2d       	mov	r31, r11
    4c1e:	f4 60       	ori	r31, 0x04	; 4
    4c20:	bf 2e       	mov	r11, r31
    4c22:	09 c0       	rjmp	.+18     	; 0x4c36 <vfprintf+0x264>
    4c24:	34 fe       	sbrs	r3, 4
    4c26:	0a c0       	rjmp	.+20     	; 0x4c3c <vfprintf+0x26a>
    4c28:	29 2f       	mov	r18, r25
    4c2a:	26 60       	ori	r18, 0x06	; 6
    4c2c:	b2 2e       	mov	r11, r18
    4c2e:	06 c0       	rjmp	.+12     	; 0x4c3c <vfprintf+0x26a>
    4c30:	28 e0       	ldi	r18, 0x08	; 8
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	05 c0       	rjmp	.+10     	; 0x4c40 <vfprintf+0x26e>
    4c36:	20 e1       	ldi	r18, 0x10	; 16
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	02 c0       	rjmp	.+4      	; 0x4c40 <vfprintf+0x26e>
    4c3c:	20 e1       	ldi	r18, 0x10	; 16
    4c3e:	32 e0       	ldi	r19, 0x02	; 2
    4c40:	f8 01       	movw	r30, r16
    4c42:	b7 fe       	sbrs	r11, 7
    4c44:	07 c0       	rjmp	.+14     	; 0x4c54 <vfprintf+0x282>
    4c46:	60 81       	ld	r22, Z
    4c48:	71 81       	ldd	r23, Z+1	; 0x01
    4c4a:	82 81       	ldd	r24, Z+2	; 0x02
    4c4c:	93 81       	ldd	r25, Z+3	; 0x03
    4c4e:	0c 5f       	subi	r16, 0xFC	; 252
    4c50:	1f 4f       	sbci	r17, 0xFF	; 255
    4c52:	06 c0       	rjmp	.+12     	; 0x4c60 <vfprintf+0x28e>
    4c54:	60 81       	ld	r22, Z
    4c56:	71 81       	ldd	r23, Z+1	; 0x01
    4c58:	80 e0       	ldi	r24, 0x00	; 0
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	0e 5f       	subi	r16, 0xFE	; 254
    4c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c60:	a3 01       	movw	r20, r6
    4c62:	d0 d0       	rcall	.+416    	; 0x4e04 <__ultoa_invert>
    4c64:	88 2e       	mov	r8, r24
    4c66:	86 18       	sub	r8, r6
    4c68:	fb 2d       	mov	r31, r11
    4c6a:	ff 77       	andi	r31, 0x7F	; 127
    4c6c:	3f 2e       	mov	r3, r31
    4c6e:	36 fe       	sbrs	r3, 6
    4c70:	0d c0       	rjmp	.+26     	; 0x4c8c <vfprintf+0x2ba>
    4c72:	23 2d       	mov	r18, r3
    4c74:	2e 7f       	andi	r18, 0xFE	; 254
    4c76:	a2 2e       	mov	r10, r18
    4c78:	89 14       	cp	r8, r9
    4c7a:	58 f4       	brcc	.+22     	; 0x4c92 <vfprintf+0x2c0>
    4c7c:	34 fe       	sbrs	r3, 4
    4c7e:	0b c0       	rjmp	.+22     	; 0x4c96 <vfprintf+0x2c4>
    4c80:	32 fc       	sbrc	r3, 2
    4c82:	09 c0       	rjmp	.+18     	; 0x4c96 <vfprintf+0x2c4>
    4c84:	83 2d       	mov	r24, r3
    4c86:	8e 7e       	andi	r24, 0xEE	; 238
    4c88:	a8 2e       	mov	r10, r24
    4c8a:	05 c0       	rjmp	.+10     	; 0x4c96 <vfprintf+0x2c4>
    4c8c:	b8 2c       	mov	r11, r8
    4c8e:	a3 2c       	mov	r10, r3
    4c90:	03 c0       	rjmp	.+6      	; 0x4c98 <vfprintf+0x2c6>
    4c92:	b8 2c       	mov	r11, r8
    4c94:	01 c0       	rjmp	.+2      	; 0x4c98 <vfprintf+0x2c6>
    4c96:	b9 2c       	mov	r11, r9
    4c98:	a4 fe       	sbrs	r10, 4
    4c9a:	0f c0       	rjmp	.+30     	; 0x4cba <vfprintf+0x2e8>
    4c9c:	fe 01       	movw	r30, r28
    4c9e:	e8 0d       	add	r30, r8
    4ca0:	f1 1d       	adc	r31, r1
    4ca2:	80 81       	ld	r24, Z
    4ca4:	80 33       	cpi	r24, 0x30	; 48
    4ca6:	21 f4       	brne	.+8      	; 0x4cb0 <vfprintf+0x2de>
    4ca8:	9a 2d       	mov	r25, r10
    4caa:	99 7e       	andi	r25, 0xE9	; 233
    4cac:	a9 2e       	mov	r10, r25
    4cae:	09 c0       	rjmp	.+18     	; 0x4cc2 <vfprintf+0x2f0>
    4cb0:	a2 fe       	sbrs	r10, 2
    4cb2:	06 c0       	rjmp	.+12     	; 0x4cc0 <vfprintf+0x2ee>
    4cb4:	b3 94       	inc	r11
    4cb6:	b3 94       	inc	r11
    4cb8:	04 c0       	rjmp	.+8      	; 0x4cc2 <vfprintf+0x2f0>
    4cba:	8a 2d       	mov	r24, r10
    4cbc:	86 78       	andi	r24, 0x86	; 134
    4cbe:	09 f0       	breq	.+2      	; 0x4cc2 <vfprintf+0x2f0>
    4cc0:	b3 94       	inc	r11
    4cc2:	a3 fc       	sbrc	r10, 3
    4cc4:	10 c0       	rjmp	.+32     	; 0x4ce6 <vfprintf+0x314>
    4cc6:	a0 fe       	sbrs	r10, 0
    4cc8:	06 c0       	rjmp	.+12     	; 0x4cd6 <vfprintf+0x304>
    4cca:	b2 14       	cp	r11, r2
    4ccc:	80 f4       	brcc	.+32     	; 0x4cee <vfprintf+0x31c>
    4cce:	28 0c       	add	r2, r8
    4cd0:	92 2c       	mov	r9, r2
    4cd2:	9b 18       	sub	r9, r11
    4cd4:	0d c0       	rjmp	.+26     	; 0x4cf0 <vfprintf+0x31e>
    4cd6:	b2 14       	cp	r11, r2
    4cd8:	58 f4       	brcc	.+22     	; 0x4cf0 <vfprintf+0x31e>
    4cda:	b6 01       	movw	r22, r12
    4cdc:	80 e2       	ldi	r24, 0x20	; 32
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	55 d0       	rcall	.+170    	; 0x4d8c <fputc>
    4ce2:	b3 94       	inc	r11
    4ce4:	f8 cf       	rjmp	.-16     	; 0x4cd6 <vfprintf+0x304>
    4ce6:	b2 14       	cp	r11, r2
    4ce8:	18 f4       	brcc	.+6      	; 0x4cf0 <vfprintf+0x31e>
    4cea:	2b 18       	sub	r2, r11
    4cec:	02 c0       	rjmp	.+4      	; 0x4cf2 <vfprintf+0x320>
    4cee:	98 2c       	mov	r9, r8
    4cf0:	21 2c       	mov	r2, r1
    4cf2:	a4 fe       	sbrs	r10, 4
    4cf4:	0f c0       	rjmp	.+30     	; 0x4d14 <vfprintf+0x342>
    4cf6:	b6 01       	movw	r22, r12
    4cf8:	80 e3       	ldi	r24, 0x30	; 48
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	47 d0       	rcall	.+142    	; 0x4d8c <fputc>
    4cfe:	a2 fe       	sbrs	r10, 2
    4d00:	16 c0       	rjmp	.+44     	; 0x4d2e <vfprintf+0x35c>
    4d02:	a1 fc       	sbrc	r10, 1
    4d04:	03 c0       	rjmp	.+6      	; 0x4d0c <vfprintf+0x33a>
    4d06:	88 e7       	ldi	r24, 0x78	; 120
    4d08:	90 e0       	ldi	r25, 0x00	; 0
    4d0a:	02 c0       	rjmp	.+4      	; 0x4d10 <vfprintf+0x33e>
    4d0c:	88 e5       	ldi	r24, 0x58	; 88
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	b6 01       	movw	r22, r12
    4d12:	0c c0       	rjmp	.+24     	; 0x4d2c <vfprintf+0x35a>
    4d14:	8a 2d       	mov	r24, r10
    4d16:	86 78       	andi	r24, 0x86	; 134
    4d18:	51 f0       	breq	.+20     	; 0x4d2e <vfprintf+0x35c>
    4d1a:	a1 fe       	sbrs	r10, 1
    4d1c:	02 c0       	rjmp	.+4      	; 0x4d22 <vfprintf+0x350>
    4d1e:	8b e2       	ldi	r24, 0x2B	; 43
    4d20:	01 c0       	rjmp	.+2      	; 0x4d24 <vfprintf+0x352>
    4d22:	80 e2       	ldi	r24, 0x20	; 32
    4d24:	a7 fc       	sbrc	r10, 7
    4d26:	8d e2       	ldi	r24, 0x2D	; 45
    4d28:	b6 01       	movw	r22, r12
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	2f d0       	rcall	.+94     	; 0x4d8c <fputc>
    4d2e:	89 14       	cp	r8, r9
    4d30:	30 f4       	brcc	.+12     	; 0x4d3e <vfprintf+0x36c>
    4d32:	b6 01       	movw	r22, r12
    4d34:	80 e3       	ldi	r24, 0x30	; 48
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	29 d0       	rcall	.+82     	; 0x4d8c <fputc>
    4d3a:	9a 94       	dec	r9
    4d3c:	f8 cf       	rjmp	.-16     	; 0x4d2e <vfprintf+0x35c>
    4d3e:	8a 94       	dec	r8
    4d40:	f3 01       	movw	r30, r6
    4d42:	e8 0d       	add	r30, r8
    4d44:	f1 1d       	adc	r31, r1
    4d46:	80 81       	ld	r24, Z
    4d48:	b6 01       	movw	r22, r12
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	1f d0       	rcall	.+62     	; 0x4d8c <fputc>
    4d4e:	81 10       	cpse	r8, r1
    4d50:	f6 cf       	rjmp	.-20     	; 0x4d3e <vfprintf+0x36c>
    4d52:	22 20       	and	r2, r2
    4d54:	09 f4       	brne	.+2      	; 0x4d58 <vfprintf+0x386>
    4d56:	4e ce       	rjmp	.-868    	; 0x49f4 <vfprintf+0x22>
    4d58:	b6 01       	movw	r22, r12
    4d5a:	80 e2       	ldi	r24, 0x20	; 32
    4d5c:	90 e0       	ldi	r25, 0x00	; 0
    4d5e:	16 d0       	rcall	.+44     	; 0x4d8c <fputc>
    4d60:	2a 94       	dec	r2
    4d62:	f7 cf       	rjmp	.-18     	; 0x4d52 <vfprintf+0x380>
    4d64:	f6 01       	movw	r30, r12
    4d66:	86 81       	ldd	r24, Z+6	; 0x06
    4d68:	97 81       	ldd	r25, Z+7	; 0x07
    4d6a:	02 c0       	rjmp	.+4      	; 0x4d70 <vfprintf+0x39e>
    4d6c:	8f ef       	ldi	r24, 0xFF	; 255
    4d6e:	9f ef       	ldi	r25, 0xFF	; 255
    4d70:	2b 96       	adiw	r28, 0x0b	; 11
    4d72:	e2 e1       	ldi	r30, 0x12	; 18
    4d74:	d7 c0       	rjmp	.+430    	; 0x4f24 <__epilogue_restores__>

00004d76 <strnlen_P>:
    4d76:	fc 01       	movw	r30, r24
    4d78:	05 90       	lpm	r0, Z+
    4d7a:	61 50       	subi	r22, 0x01	; 1
    4d7c:	70 40       	sbci	r23, 0x00	; 0
    4d7e:	01 10       	cpse	r0, r1
    4d80:	d8 f7       	brcc	.-10     	; 0x4d78 <strnlen_P+0x2>
    4d82:	80 95       	com	r24
    4d84:	90 95       	com	r25
    4d86:	8e 0f       	add	r24, r30
    4d88:	9f 1f       	adc	r25, r31
    4d8a:	08 95       	ret

00004d8c <fputc>:
    4d8c:	0f 93       	push	r16
    4d8e:	1f 93       	push	r17
    4d90:	cf 93       	push	r28
    4d92:	df 93       	push	r29
    4d94:	fb 01       	movw	r30, r22
    4d96:	23 81       	ldd	r18, Z+3	; 0x03
    4d98:	21 fd       	sbrc	r18, 1
    4d9a:	03 c0       	rjmp	.+6      	; 0x4da2 <fputc+0x16>
    4d9c:	8f ef       	ldi	r24, 0xFF	; 255
    4d9e:	9f ef       	ldi	r25, 0xFF	; 255
    4da0:	2c c0       	rjmp	.+88     	; 0x4dfa <fputc+0x6e>
    4da2:	22 ff       	sbrs	r18, 2
    4da4:	16 c0       	rjmp	.+44     	; 0x4dd2 <fputc+0x46>
    4da6:	46 81       	ldd	r20, Z+6	; 0x06
    4da8:	57 81       	ldd	r21, Z+7	; 0x07
    4daa:	24 81       	ldd	r18, Z+4	; 0x04
    4dac:	35 81       	ldd	r19, Z+5	; 0x05
    4dae:	42 17       	cp	r20, r18
    4db0:	53 07       	cpc	r21, r19
    4db2:	44 f4       	brge	.+16     	; 0x4dc4 <fputc+0x38>
    4db4:	a0 81       	ld	r26, Z
    4db6:	b1 81       	ldd	r27, Z+1	; 0x01
    4db8:	9d 01       	movw	r18, r26
    4dba:	2f 5f       	subi	r18, 0xFF	; 255
    4dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    4dbe:	31 83       	std	Z+1, r19	; 0x01
    4dc0:	20 83       	st	Z, r18
    4dc2:	8c 93       	st	X, r24
    4dc4:	26 81       	ldd	r18, Z+6	; 0x06
    4dc6:	37 81       	ldd	r19, Z+7	; 0x07
    4dc8:	2f 5f       	subi	r18, 0xFF	; 255
    4dca:	3f 4f       	sbci	r19, 0xFF	; 255
    4dcc:	37 83       	std	Z+7, r19	; 0x07
    4dce:	26 83       	std	Z+6, r18	; 0x06
    4dd0:	14 c0       	rjmp	.+40     	; 0x4dfa <fputc+0x6e>
    4dd2:	8b 01       	movw	r16, r22
    4dd4:	ec 01       	movw	r28, r24
    4dd6:	fb 01       	movw	r30, r22
    4dd8:	00 84       	ldd	r0, Z+8	; 0x08
    4dda:	f1 85       	ldd	r31, Z+9	; 0x09
    4ddc:	e0 2d       	mov	r30, r0
    4dde:	09 95       	icall
    4de0:	89 2b       	or	r24, r25
    4de2:	e1 f6       	brne	.-72     	; 0x4d9c <fputc+0x10>
    4de4:	d8 01       	movw	r26, r16
    4de6:	16 96       	adiw	r26, 0x06	; 6
    4de8:	8d 91       	ld	r24, X+
    4dea:	9c 91       	ld	r25, X
    4dec:	17 97       	sbiw	r26, 0x07	; 7
    4dee:	01 96       	adiw	r24, 0x01	; 1
    4df0:	17 96       	adiw	r26, 0x07	; 7
    4df2:	9c 93       	st	X, r25
    4df4:	8e 93       	st	-X, r24
    4df6:	16 97       	sbiw	r26, 0x06	; 6
    4df8:	ce 01       	movw	r24, r28
    4dfa:	df 91       	pop	r29
    4dfc:	cf 91       	pop	r28
    4dfe:	1f 91       	pop	r17
    4e00:	0f 91       	pop	r16
    4e02:	08 95       	ret

00004e04 <__ultoa_invert>:
    4e04:	fa 01       	movw	r30, r20
    4e06:	aa 27       	eor	r26, r26
    4e08:	28 30       	cpi	r18, 0x08	; 8
    4e0a:	51 f1       	breq	.+84     	; 0x4e60 <__ultoa_invert+0x5c>
    4e0c:	20 31       	cpi	r18, 0x10	; 16
    4e0e:	81 f1       	breq	.+96     	; 0x4e70 <__ultoa_invert+0x6c>
    4e10:	e8 94       	clt
    4e12:	6f 93       	push	r22
    4e14:	6e 7f       	andi	r22, 0xFE	; 254
    4e16:	6e 5f       	subi	r22, 0xFE	; 254
    4e18:	7f 4f       	sbci	r23, 0xFF	; 255
    4e1a:	8f 4f       	sbci	r24, 0xFF	; 255
    4e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e1e:	af 4f       	sbci	r26, 0xFF	; 255
    4e20:	b1 e0       	ldi	r27, 0x01	; 1
    4e22:	3e d0       	rcall	.+124    	; 0x4ea0 <__ultoa_invert+0x9c>
    4e24:	b4 e0       	ldi	r27, 0x04	; 4
    4e26:	3c d0       	rcall	.+120    	; 0x4ea0 <__ultoa_invert+0x9c>
    4e28:	67 0f       	add	r22, r23
    4e2a:	78 1f       	adc	r23, r24
    4e2c:	89 1f       	adc	r24, r25
    4e2e:	9a 1f       	adc	r25, r26
    4e30:	a1 1d       	adc	r26, r1
    4e32:	68 0f       	add	r22, r24
    4e34:	79 1f       	adc	r23, r25
    4e36:	8a 1f       	adc	r24, r26
    4e38:	91 1d       	adc	r25, r1
    4e3a:	a1 1d       	adc	r26, r1
    4e3c:	6a 0f       	add	r22, r26
    4e3e:	71 1d       	adc	r23, r1
    4e40:	81 1d       	adc	r24, r1
    4e42:	91 1d       	adc	r25, r1
    4e44:	a1 1d       	adc	r26, r1
    4e46:	20 d0       	rcall	.+64     	; 0x4e88 <__ultoa_invert+0x84>
    4e48:	09 f4       	brne	.+2      	; 0x4e4c <__ultoa_invert+0x48>
    4e4a:	68 94       	set
    4e4c:	3f 91       	pop	r19
    4e4e:	2a e0       	ldi	r18, 0x0A	; 10
    4e50:	26 9f       	mul	r18, r22
    4e52:	11 24       	eor	r1, r1
    4e54:	30 19       	sub	r19, r0
    4e56:	30 5d       	subi	r19, 0xD0	; 208
    4e58:	31 93       	st	Z+, r19
    4e5a:	de f6       	brtc	.-74     	; 0x4e12 <__ultoa_invert+0xe>
    4e5c:	cf 01       	movw	r24, r30
    4e5e:	08 95       	ret
    4e60:	46 2f       	mov	r20, r22
    4e62:	47 70       	andi	r20, 0x07	; 7
    4e64:	40 5d       	subi	r20, 0xD0	; 208
    4e66:	41 93       	st	Z+, r20
    4e68:	b3 e0       	ldi	r27, 0x03	; 3
    4e6a:	0f d0       	rcall	.+30     	; 0x4e8a <__ultoa_invert+0x86>
    4e6c:	c9 f7       	brne	.-14     	; 0x4e60 <__ultoa_invert+0x5c>
    4e6e:	f6 cf       	rjmp	.-20     	; 0x4e5c <__ultoa_invert+0x58>
    4e70:	46 2f       	mov	r20, r22
    4e72:	4f 70       	andi	r20, 0x0F	; 15
    4e74:	40 5d       	subi	r20, 0xD0	; 208
    4e76:	4a 33       	cpi	r20, 0x3A	; 58
    4e78:	18 f0       	brcs	.+6      	; 0x4e80 <__ultoa_invert+0x7c>
    4e7a:	49 5d       	subi	r20, 0xD9	; 217
    4e7c:	31 fd       	sbrc	r19, 1
    4e7e:	40 52       	subi	r20, 0x20	; 32
    4e80:	41 93       	st	Z+, r20
    4e82:	02 d0       	rcall	.+4      	; 0x4e88 <__ultoa_invert+0x84>
    4e84:	a9 f7       	brne	.-22     	; 0x4e70 <__ultoa_invert+0x6c>
    4e86:	ea cf       	rjmp	.-44     	; 0x4e5c <__ultoa_invert+0x58>
    4e88:	b4 e0       	ldi	r27, 0x04	; 4
    4e8a:	a6 95       	lsr	r26
    4e8c:	97 95       	ror	r25
    4e8e:	87 95       	ror	r24
    4e90:	77 95       	ror	r23
    4e92:	67 95       	ror	r22
    4e94:	ba 95       	dec	r27
    4e96:	c9 f7       	brne	.-14     	; 0x4e8a <__ultoa_invert+0x86>
    4e98:	00 97       	sbiw	r24, 0x00	; 0
    4e9a:	61 05       	cpc	r22, r1
    4e9c:	71 05       	cpc	r23, r1
    4e9e:	08 95       	ret
    4ea0:	9b 01       	movw	r18, r22
    4ea2:	ac 01       	movw	r20, r24
    4ea4:	0a 2e       	mov	r0, r26
    4ea6:	06 94       	lsr	r0
    4ea8:	57 95       	ror	r21
    4eaa:	47 95       	ror	r20
    4eac:	37 95       	ror	r19
    4eae:	27 95       	ror	r18
    4eb0:	ba 95       	dec	r27
    4eb2:	c9 f7       	brne	.-14     	; 0x4ea6 <__ultoa_invert+0xa2>
    4eb4:	62 0f       	add	r22, r18
    4eb6:	73 1f       	adc	r23, r19
    4eb8:	84 1f       	adc	r24, r20
    4eba:	95 1f       	adc	r25, r21
    4ebc:	a0 1d       	adc	r26, r0
    4ebe:	08 95       	ret

00004ec0 <eeprom_read_byte>:
    4ec0:	f9 99       	sbic	0x1f, 1	; 31
    4ec2:	fe cf       	rjmp	.-4      	; 0x4ec0 <eeprom_read_byte>
    4ec4:	92 bd       	out	0x22, r25	; 34
    4ec6:	81 bd       	out	0x21, r24	; 33
    4ec8:	f8 9a       	sbi	0x1f, 0	; 31
    4eca:	99 27       	eor	r25, r25
    4ecc:	80 b5       	in	r24, 0x20	; 32
    4ece:	08 95       	ret

00004ed0 <eeprom_write_byte>:
    4ed0:	26 2f       	mov	r18, r22

00004ed2 <eeprom_write_r18>:
    4ed2:	f9 99       	sbic	0x1f, 1	; 31
    4ed4:	fe cf       	rjmp	.-4      	; 0x4ed2 <eeprom_write_r18>
    4ed6:	1f ba       	out	0x1f, r1	; 31
    4ed8:	92 bd       	out	0x22, r25	; 34
    4eda:	81 bd       	out	0x21, r24	; 33
    4edc:	20 bd       	out	0x20, r18	; 32
    4ede:	0f b6       	in	r0, 0x3f	; 63
    4ee0:	f8 94       	cli
    4ee2:	fa 9a       	sbi	0x1f, 2	; 31
    4ee4:	f9 9a       	sbi	0x1f, 1	; 31
    4ee6:	0f be       	out	0x3f, r0	; 63
    4ee8:	01 96       	adiw	r24, 0x01	; 1
    4eea:	08 95       	ret

00004eec <__prologue_saves__>:
    4eec:	2f 92       	push	r2
    4eee:	3f 92       	push	r3
    4ef0:	4f 92       	push	r4
    4ef2:	5f 92       	push	r5
    4ef4:	6f 92       	push	r6
    4ef6:	7f 92       	push	r7
    4ef8:	8f 92       	push	r8
    4efa:	9f 92       	push	r9
    4efc:	af 92       	push	r10
    4efe:	bf 92       	push	r11
    4f00:	cf 92       	push	r12
    4f02:	df 92       	push	r13
    4f04:	ef 92       	push	r14
    4f06:	ff 92       	push	r15
    4f08:	0f 93       	push	r16
    4f0a:	1f 93       	push	r17
    4f0c:	cf 93       	push	r28
    4f0e:	df 93       	push	r29
    4f10:	cd b7       	in	r28, 0x3d	; 61
    4f12:	de b7       	in	r29, 0x3e	; 62
    4f14:	ca 1b       	sub	r28, r26
    4f16:	db 0b       	sbc	r29, r27
    4f18:	0f b6       	in	r0, 0x3f	; 63
    4f1a:	f8 94       	cli
    4f1c:	de bf       	out	0x3e, r29	; 62
    4f1e:	0f be       	out	0x3f, r0	; 63
    4f20:	cd bf       	out	0x3d, r28	; 61
    4f22:	09 94       	ijmp

00004f24 <__epilogue_restores__>:
    4f24:	2a 88       	ldd	r2, Y+18	; 0x12
    4f26:	39 88       	ldd	r3, Y+17	; 0x11
    4f28:	48 88       	ldd	r4, Y+16	; 0x10
    4f2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f30:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f32:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f34:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f36:	b9 84       	ldd	r11, Y+9	; 0x09
    4f38:	c8 84       	ldd	r12, Y+8	; 0x08
    4f3a:	df 80       	ldd	r13, Y+7	; 0x07
    4f3c:	ee 80       	ldd	r14, Y+6	; 0x06
    4f3e:	fd 80       	ldd	r15, Y+5	; 0x05
    4f40:	0c 81       	ldd	r16, Y+4	; 0x04
    4f42:	1b 81       	ldd	r17, Y+3	; 0x03
    4f44:	aa 81       	ldd	r26, Y+2	; 0x02
    4f46:	b9 81       	ldd	r27, Y+1	; 0x01
    4f48:	ce 0f       	add	r28, r30
    4f4a:	d1 1d       	adc	r29, r1
    4f4c:	0f b6       	in	r0, 0x3f	; 63
    4f4e:	f8 94       	cli
    4f50:	de bf       	out	0x3e, r29	; 62
    4f52:	0f be       	out	0x3f, r0	; 63
    4f54:	cd bf       	out	0x3d, r28	; 61
    4f56:	ed 01       	movw	r28, r26
    4f58:	08 95       	ret

00004f5a <_exit>:
    4f5a:	f8 94       	cli

00004f5c <__stop_program>:
    4f5c:	ff cf       	rjmp	.-2      	; 0x4f5c <__stop_program>
