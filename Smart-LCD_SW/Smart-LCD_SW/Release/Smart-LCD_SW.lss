
Smart-LCD_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b8  00800100  00004c4c  00004ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004c4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000153  008003b8  008003b8  00004f98  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004f98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004ff4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00005038  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a4cd  00000000  00000000  000053a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d93  00000000  00000000  0000f86d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b81  00000000  00000000  00011600  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001608  00000000  00000000  00015184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021ab  00000000  00000000  0001678c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000099c0  00000000  00000000  00018937  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  000222f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e7 c2       	rjmp	.+1486   	; 0x5d0 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <__vector_1>
       8:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__vector_2>
       c:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__vector_3>
      10:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__vector_4>
      14:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__vector_5>
      18:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__vector_6>
      1c:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__vector_7>
      20:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__vector_8>
      24:	30 c7       	rjmp	.+3680   	; 0xe86 <__vector_9>
      26:	00 00       	nop
      28:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__vector_10>
      2c:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__vector_11>
      30:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__vector_12>
      34:	c2 c7       	rjmp	.+3972   	; 0xfba <__vector_13>
      36:	00 00       	nop
      38:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_14>
      3c:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__vector_15>
      40:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_16>
      44:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__vector_17>
      48:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <__vector_18>
      4c:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__vector_19>
      50:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__vector_20>
      54:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_21>
      58:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__vector_22>
      5c:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__vector_23>
      60:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__vector_24>
      64:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__vector_25>
      68:	42 18       	sub	r4, r2
      6a:	4b 18       	sub	r4, r11
      6c:	58 18       	sub	r5, r8
      6e:	69 18       	sub	r6, r9
      70:	7e 18       	sub	r7, r14
      72:	97 18       	sub	r9, r7
      74:	b4 18       	sub	r11, r4
      76:	d5 18       	sub	r13, r5
      78:	fa 18       	sub	r15, r10
      7a:	23 19       	sub	r18, r3
      7c:	50 19       	sub	r21, r0
      7e:	81 19       	sub	r24, r1
      80:	b6 19       	sub	r27, r6
      82:	11 1a       	sub	r1, r17
      84:	3e 1a       	sub	r3, r30
      86:	6a 1a       	sub	r6, r26
      88:	8f 1a       	sub	r8, r31
      8a:	b4 1a       	sub	r11, r20
      8c:	cb 1a       	sub	r12, r27
      8e:	ac 1b       	sub	r26, r28
      90:	ac 1b       	sub	r26, r28
      92:	e9 1a       	sub	r14, r25
      94:	08 1b       	sub	r16, r24
      96:	1e 1b       	sub	r17, r30
      98:	35 1b       	sub	r19, r21
      9a:	63 1b       	sub	r22, r19
      9c:	90 1b       	sub	r25, r16

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 00       	nop
      a4:	00 20       	and	r0, r0
      a6:	20 20       	and	r2, r0
      a8:	20 20       	and	r2, r0
      aa:	00 20       	and	r0, r0
      ac:	50 50       	subi	r21, 0x00	; 0
      ae:	50 00       	.word	0x0050	; ????
      b0:	00 00       	nop
      b2:	00 50       	subi	r16, 0x00	; 0
      b4:	50 f8       	bld	r5, 0
      b6:	50 f8       	bld	r5, 0
      b8:	50 50       	subi	r21, 0x00	; 0
      ba:	20 78       	andi	r18, 0x80	; 128
      bc:	a0 70       	andi	r26, 0x00	; 0
      be:	28 f0       	brcs	.+10     	; 0xca <__trampolines_end+0x2c>
      c0:	20 c0       	rjmp	.+64     	; 0x102 <__trampolines_end+0x64>
      c2:	c8 10       	cpse	r12, r8
      c4:	20 40       	sbci	r18, 0x00	; 0
      c6:	98 18       	sub	r9, r8
      c8:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x3b95>
      cc:	a8 90       	.word	0x90a8	; ????
      ce:	68 60       	ori	r22, 0x08	; 8
      d0:	20 40       	sbci	r18, 0x00	; 0
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	10 20       	and	r1, r0
      d8:	40 40       	sbci	r20, 0x00	; 0
      da:	40 20       	and	r4, r0
      dc:	10 40       	sbci	r17, 0x00	; 0
      de:	20 10       	cpse	r2, r0
      e0:	10 10       	cpse	r1, r0
      e2:	20 40       	sbci	r18, 0x00	; 0
      e4:	00 50       	subi	r16, 0x00	; 0
      e6:	20 f8       	bld	r2, 0
      e8:	20 50       	subi	r18, 0x00	; 0
      ea:	00 00       	nop
      ec:	20 20       	and	r2, r0
      ee:	f8 20       	and	r15, r8
      f0:	20 00       	.word	0x0020	; ????
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	60 20       	and	r6, r0
      f8:	40 00       	.word	0x0040	; ????
      fa:	00 00       	nop
      fc:	f8 00       	.word	0x00f8	; ????
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	00 00       	nop
     104:	00 60       	ori	r16, 0x00	; 0
     106:	60 00       	.word	0x0060	; ????
     108:	08 10       	cpse	r0, r8
     10a:	20 40       	sbci	r18, 0x00	; 0
     10c:	80 00       	.word	0x0080	; ????
     10e:	70 88       	ldd	r7, Z+16	; 0x10
     110:	98 a8       	ldd	r9, Y+48	; 0x30
     112:	c8 88       	ldd	r12, Y+16	; 0x10
     114:	70 20       	and	r7, r0
     116:	60 20       	and	r6, r0
     118:	20 20       	and	r2, r0
     11a:	20 70       	andi	r18, 0x00	; 0
     11c:	70 88       	ldd	r7, Z+16	; 0x10
     11e:	08 10       	cpse	r0, r8
     120:	20 40       	sbci	r18, 0x00	; 0
     122:	f8 f8       	.word	0xf8f8	; ????
     124:	10 20       	and	r1, r0
     126:	10 08       	sbc	r1, r0
     128:	88 70       	andi	r24, 0x08	; 8
     12a:	10 30       	cpi	r17, 0x00	; 0
     12c:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__bss_end+0xbed>
     130:	10 f8       	bld	r1, 0
     132:	80 f0       	brcs	.+32     	; 0x154 <__trampolines_end+0xb6>
     134:	08 08       	sbc	r0, r8
     136:	88 70       	andi	r24, 0x08	; 8
     138:	30 40       	sbci	r19, 0x00	; 0
     13a:	80 f0       	brcs	.+32     	; 0x15c <__trampolines_end+0xbe>
     13c:	88 88       	ldd	r8, Y+16	; 0x10
     13e:	70 f8       	bld	r7, 0
     140:	08 10       	cpse	r0, r8
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	40 40       	sbci	r20, 0x00	; 0
     146:	70 88       	ldd	r7, Z+16	; 0x10
     148:	88 70       	andi	r24, 0x08	; 8
     14a:	88 88       	ldd	r8, Y+16	; 0x10
     14c:	70 70       	andi	r23, 0x00	; 0
     14e:	88 88       	ldd	r8, Y+16	; 0x10
     150:	78 08       	sbc	r7, r8
     152:	10 60       	ori	r17, 0x00	; 0
     154:	00 60       	ori	r16, 0x00	; 0
     156:	60 00       	.word	0x0060	; ????
     158:	60 60       	ori	r22, 0x00	; 0
     15a:	00 00       	nop
     15c:	60 60       	ori	r22, 0x00	; 0
     15e:	00 60       	ori	r16, 0x00	; 0
     160:	20 40       	sbci	r18, 0x00	; 0
     162:	08 10       	cpse	r0, r8
     164:	20 40       	sbci	r18, 0x00	; 0
     166:	20 10       	cpse	r2, r0
     168:	08 00       	.word	0x0008	; ????
     16a:	00 f8       	bld	r0, 0
     16c:	00 f8       	bld	r0, 0
     16e:	00 00       	nop
     170:	80 40       	sbci	r24, 0x00	; 0
     172:	20 10       	cpse	r2, r0
     174:	20 40       	sbci	r18, 0x00	; 0
     176:	80 70       	andi	r24, 0x00	; 0
     178:	88 08       	sbc	r8, r8
     17a:	10 20       	and	r1, r0
     17c:	00 20       	and	r0, r0
     17e:	70 88       	ldd	r7, Z+16	; 0x10
     180:	08 68       	ori	r16, 0x88	; 136
     182:	a8 a8       	ldd	r10, Y+48	; 0x30
     184:	70 70       	andi	r23, 0x00	; 0
     186:	88 88       	ldd	r8, Y+16	; 0x10
     188:	88 f8       	.word	0xf888	; ????
     18a:	88 88       	ldd	r8, Y+16	; 0x10
     18c:	f0 88       	ldd	r15, Z+16	; 0x10
     18e:	88 f0       	brcs	.+34     	; 0x1b2 <__trampolines_end+0x114>
     190:	88 88       	ldd	r8, Y+16	; 0x10
     192:	f0 70       	andi	r31, 0x00	; 0
     194:	88 80       	ld	r8, Y
     196:	80 80       	ld	r8, Z
     198:	88 70       	andi	r24, 0x08	; 8
     19a:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x837d>
     19e:	88 90       	.word	0x9088	; ????
     1a0:	e0 f8       	bld	r14, 0
     1a2:	80 80       	ld	r8, Z
     1a4:	f0 80       	ld	r15, Z
     1a6:	80 f8       	bld	r8, 0
     1a8:	f8 80       	ld	r15, Y
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	80 80       	ld	r8, Z
     1ae:	80 70       	andi	r24, 0x00	; 0
     1b0:	88 80       	ld	r8, Y
     1b2:	80 98       	cbi	0x10, 0	; 16
     1b4:	88 70       	andi	r24, 0x08	; 8
     1b6:	88 88       	ldd	r8, Y+16	; 0x10
     1b8:	88 f8       	.word	0xf888	; ????
     1ba:	88 88       	ldd	r8, Y+16	; 0x10
     1bc:	88 70       	andi	r24, 0x08	; 8
     1be:	20 20       	and	r2, r0
     1c0:	20 20       	and	r2, r0
     1c2:	20 70       	andi	r18, 0x00	; 0
     1c4:	38 10       	cpse	r3, r8
     1c6:	10 10       	cpse	r1, r0
     1c8:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x8355>
     1cc:	90 a0       	ldd	r9, Z+32	; 0x20
     1ce:	c0 a0       	ldd	r12, Z+32	; 0x20
     1d0:	90 88       	ldd	r9, Z+16	; 0x10
     1d2:	80 80       	ld	r8, Z
     1d4:	80 80       	ld	r8, Z
     1d6:	80 80       	ld	r8, Z
     1d8:	f8 88       	ldd	r15, Y+16	; 0x10
     1da:	d8 a8       	ldd	r13, Y+48	; 0x30
     1dc:	88 88       	ldd	r8, Y+16	; 0x10
     1de:	88 88       	ldd	r8, Y+16	; 0x10
     1e0:	88 88       	ldd	r8, Y+16	; 0x10
     1e2:	c8 a8       	ldd	r12, Y+48	; 0x30
     1e4:	98 88       	ldd	r9, Y+16	; 0x10
     1e6:	88 70       	andi	r24, 0x08	; 8
     1e8:	88 88       	ldd	r8, Y+16	; 0x10
     1ea:	88 88       	ldd	r8, Y+16	; 0x10
     1ec:	88 70       	andi	r24, 0x08	; 8
     1ee:	f0 88       	ldd	r15, Z+16	; 0x10
     1f0:	88 f0       	brcs	.+34     	; 0x214 <__trampolines_end+0x176>
     1f2:	80 80       	ld	r8, Z
     1f4:	80 70       	andi	r24, 0x00	; 0
     1f6:	88 88       	ldd	r8, Y+16	; 0x10
     1f8:	88 a8       	ldd	r8, Y+48	; 0x30
     1fa:	90 68       	ori	r25, 0x80	; 128
     1fc:	f0 88       	ldd	r15, Z+16	; 0x10
     1fe:	88 f0       	brcs	.+34     	; 0x222 <__trampolines_end+0x184>
     200:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x737d>
     204:	80 80       	ld	r8, Z
     206:	70 08       	sbc	r7, r0
     208:	08 f0       	brcs	.+2      	; 0x20c <__trampolines_end+0x16e>
     20a:	f8 20       	and	r15, r8
     20c:	20 20       	and	r2, r0
     20e:	20 20       	and	r2, r0
     210:	20 88       	ldd	r2, Z+16	; 0x10
     212:	88 88       	ldd	r8, Y+16	; 0x10
     214:	88 88       	ldd	r8, Y+16	; 0x10
     216:	88 70       	andi	r24, 0x08	; 8
     218:	88 88       	ldd	r8, Y+16	; 0x10
     21a:	88 88       	ldd	r8, Y+16	; 0x10
     21c:	88 50       	subi	r24, 0x08	; 8
     21e:	20 88       	ldd	r2, Z+16	; 0x10
     220:	88 88       	ldd	r8, Y+16	; 0x10
     222:	a8 a8       	ldd	r10, Y+48	; 0x30
     224:	d8 88       	ldd	r13, Y+16	; 0x10
     226:	88 88       	ldd	r8, Y+16	; 0x10
     228:	50 20       	and	r5, r0
     22a:	50 88       	ldd	r5, Z+16	; 0x10
     22c:	88 88       	ldd	r8, Y+16	; 0x10
     22e:	88 50       	subi	r24, 0x08	; 8
     230:	20 20       	and	r2, r0
     232:	20 20       	and	r2, r0
     234:	f8 08       	sbc	r15, r8
     236:	10 20       	and	r1, r0
     238:	40 80       	ld	r4, Z
     23a:	f8 38       	cpi	r31, 0x88	; 136
     23c:	20 20       	and	r2, r0
     23e:	20 20       	and	r2, r0
     240:	20 38       	cpi	r18, 0x80	; 128
     242:	00 80       	ld	r0, Z
     244:	40 20       	and	r4, r0
     246:	10 08       	sbc	r1, r0
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	20 20       	and	r2, r0
     24c:	20 20       	and	r2, r0
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	20 50       	subi	r18, 0x00	; 0
     252:	88 00       	.word	0x0088	; ????
	...
     25c:	00 f8       	bld	r0, 0
     25e:	40 20       	and	r4, r0
     260:	10 00       	.word	0x0010	; ????
     262:	00 00       	nop
     264:	00 00       	nop
     266:	00 70       	andi	r16, 0x00	; 0
     268:	08 78       	andi	r16, 0x88	; 136
     26a:	88 78       	andi	r24, 0x88	; 136
     26c:	80 80       	ld	r8, Z
     26e:	b0 c8       	rjmp	.-3744   	; 0xfffff3d0 <__eeprom_end+0xff7ef3d0>
     270:	88 88       	ldd	r8, Y+16	; 0x10
     272:	f0 00       	.word	0x00f0	; ????
     274:	00 70       	andi	r16, 0x00	; 0
     276:	80 80       	ld	r8, Z
     278:	88 70       	andi	r24, 0x08	; 8
     27a:	08 08       	sbc	r0, r8
     27c:	68 98       	cbi	0x0d, 0	; 13
     27e:	88 88       	ldd	r8, Y+16	; 0x10
     280:	78 00       	.word	0x0078	; ????
     282:	00 70       	andi	r16, 0x00	; 0
     284:	88 f8       	.word	0xf888	; ????
     286:	80 70       	andi	r24, 0x00	; 0
     288:	30 48       	sbci	r19, 0x80	; 128
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	40 40       	sbci	r20, 0x00	; 0
     28e:	40 00       	.word	0x0040	; ????
     290:	00 78       	andi	r16, 0x80	; 128
     292:	88 78       	andi	r24, 0x88	; 136
     294:	08 30       	cpi	r16, 0x08	; 8
     296:	80 80       	ld	r8, Z
     298:	b0 c8       	rjmp	.-3744   	; 0xfffff3fa <__eeprom_end+0xff7ef3fa>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	88 20       	and	r8, r8
     29e:	00 60       	ori	r16, 0x00	; 0
     2a0:	20 20       	and	r2, r0
     2a2:	20 70       	andi	r18, 0x00	; 0
     2a4:	10 00       	.word	0x0010	; ????
     2a6:	30 10       	cpse	r3, r0
     2a8:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x3b55>
     2ac:	40 48       	sbci	r20, 0x80	; 128
     2ae:	50 60       	ori	r21, 0x00	; 0
     2b0:	50 48       	sbci	r21, 0x80	; 128
     2b2:	60 20       	and	r6, r0
     2b4:	20 20       	and	r2, r0
     2b6:	20 20       	and	r2, r0
     2b8:	70 00       	.word	0x0070	; ????
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <__trampolines_end+0x21e>
     2bc:	a8 a8       	ldd	r10, Y+48	; 0x30
     2be:	88 88       	ldd	r8, Y+16	; 0x10
     2c0:	00 00       	nop
     2c2:	b0 c8       	rjmp	.-3744   	; 0xfffff424 <__eeprom_end+0xff7ef424>
     2c4:	88 88       	ldd	r8, Y+16	; 0x10
     2c6:	88 00       	.word	0x0088	; ????
     2c8:	00 70       	andi	r16, 0x00	; 0
     2ca:	88 88       	ldd	r8, Y+16	; 0x10
     2cc:	88 70       	andi	r24, 0x08	; 8
     2ce:	00 00       	nop
     2d0:	f0 88       	ldd	r15, Z+16	; 0x10
     2d2:	f0 80       	ld	r15, Z
     2d4:	80 00       	.word	0x0080	; ????
     2d6:	00 68       	ori	r16, 0x80	; 128
     2d8:	98 78       	andi	r25, 0x88	; 136
     2da:	08 08       	sbc	r0, r8
     2dc:	00 00       	nop
     2de:	b0 c8       	rjmp	.-3744   	; 0xfffff440 <__eeprom_end+0xff7ef440>
     2e0:	80 80       	ld	r8, Z
     2e2:	80 00       	.word	0x0080	; ????
     2e4:	00 70       	andi	r16, 0x00	; 0
     2e6:	80 70       	andi	r24, 0x00	; 0
     2e8:	08 f0       	brcs	.+2      	; 0x2ec <__trampolines_end+0x24e>
     2ea:	40 40       	sbci	r20, 0x00	; 0
     2ec:	e0 40       	sbci	r30, 0x00	; 0
     2ee:	40 48       	sbci	r20, 0x80	; 128
     2f0:	30 00       	.word	0x0030	; ????
     2f2:	00 88       	ldd	r0, Z+16	; 0x10
     2f4:	88 88       	ldd	r8, Y+16	; 0x10
     2f6:	98 68       	ori	r25, 0x88	; 136
     2f8:	00 00       	nop
     2fa:	88 88       	ldd	r8, Y+16	; 0x10
     2fc:	88 50       	subi	r24, 0x08	; 8
     2fe:	20 00       	.word	0x0020	; ????
     300:	00 88       	ldd	r0, Z+16	; 0x10
     302:	88 a8       	ldd	r8, Y+48	; 0x30
     304:	a8 50       	subi	r26, 0x08	; 8
     306:	00 00       	nop
     308:	88 50       	subi	r24, 0x08	; 8
     30a:	20 50       	subi	r18, 0x00	; 0
     30c:	88 00       	.word	0x0088	; ????
     30e:	00 88       	ldd	r0, Z+16	; 0x10
     310:	88 78       	andi	r24, 0x88	; 136
     312:	08 70       	andi	r16, 0x08	; 8
     314:	00 00       	nop
     316:	f8 10       	cpse	r15, r8
     318:	20 40       	sbci	r18, 0x00	; 0
     31a:	f8 10       	cpse	r15, r8
     31c:	20 20       	and	r2, r0
     31e:	40 20       	and	r4, r0
     320:	20 10       	cpse	r2, r0
     322:	20 20       	and	r2, r0
     324:	20 20       	and	r2, r0
     326:	20 20       	and	r2, r0
     328:	20 40       	sbci	r18, 0x00	; 0
     32a:	20 20       	and	r2, r0
     32c:	10 20       	and	r1, r0
     32e:	20 40       	sbci	r18, 0x00	; 0
     330:	20 50       	subi	r18, 0x00	; 0
     332:	20 00       	.word	0x0020	; ????
     334:	00 00       	nop
	...

00000337 <sysfont_glyphs>:
     337:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     347:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     357:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     367:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     377:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     387:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     397:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     3a7:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     3b7:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     3c7:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     3d7:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     3e7:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     3f7:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     407:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     417:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     427:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     437:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     447:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     457:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     467:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     477:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     487:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     497:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     4a7:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     4b7:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     4c7:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     4d7:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     4e7:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     4f7:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     507:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     517:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     527:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     537:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     547:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     557:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     567:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     577:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     587:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     597:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     5a7:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     5b7:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     5c7:	20 40 20 50 20 00 00 00 00                           @ P ....

000005d0 <__ctors_end>:
     5d0:	11 24       	eor	r1, r1
     5d2:	1f be       	out	0x3f, r1	; 63
     5d4:	cf ef       	ldi	r28, 0xFF	; 255
     5d6:	d8 e0       	ldi	r29, 0x08	; 8
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	cd bf       	out	0x3d, r28	; 61

000005dc <__do_copy_data>:
     5dc:	13 e0       	ldi	r17, 0x03	; 3
     5de:	a0 e0       	ldi	r26, 0x00	; 0
     5e0:	b1 e0       	ldi	r27, 0x01	; 1
     5e2:	ec e4       	ldi	r30, 0x4C	; 76
     5e4:	fc e4       	ldi	r31, 0x4C	; 76
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <__do_copy_data+0x10>
     5e8:	05 90       	lpm	r0, Z+
     5ea:	0d 92       	st	X+, r0
     5ec:	a8 3b       	cpi	r26, 0xB8	; 184
     5ee:	b1 07       	cpc	r27, r17
     5f0:	d9 f7       	brne	.-10     	; 0x5e8 <__do_copy_data+0xc>

000005f2 <__do_clear_bss>:
     5f2:	25 e0       	ldi	r18, 0x05	; 5
     5f4:	a8 eb       	ldi	r26, 0xB8	; 184
     5f6:	b3 e0       	ldi	r27, 0x03	; 3
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <.do_clear_bss_start>

000005fa <.do_clear_bss_loop>:
     5fa:	1d 92       	st	X+, r1

000005fc <.do_clear_bss_start>:
     5fc:	ab 30       	cpi	r26, 0x0B	; 11
     5fe:	b2 07       	cpc	r27, r18
     600:	e1 f7       	brne	.-8      	; 0x5fa <.do_clear_bss_loop>
     602:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <main>
     606:	0c 94 24 26 	jmp	0x4c48	; 0x4c48 <_exit>

0000060a <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     60a:	08 95       	ret

0000060c <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	1f 92       	push	r1
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     61c:	8f b7       	in	r24, 0x3f	; 63
     61e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     620:	f8 94       	cli
	return flags;
     622:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     624:	5f 93       	push	r21
     626:	50 e8       	ldi	r21, 0x80	; 128
     628:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     632:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     634:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     636:	0f 90       	pop	r0
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	1f 92       	push	r1
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     648:	9f b7       	in	r25, 0x3f	; 63
     64a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     64c:	f8 94       	cli
	return flags;
     64e:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     650:	81 11       	cpse	r24, r1
     652:	06 c0       	rjmp	.+12     	; 0x660 <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
     654:	60 95       	com	r22
     656:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     65a:	68 23       	and	r22, r24
     65c:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     660:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     662:	0f 90       	pop	r0
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	1f 92       	push	r1
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     674:	9f b7       	in	r25, 0x3f	; 63
     676:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     678:	f8 94       	cli
	return flags;
     67a:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     67c:	81 11       	cpse	r24, r1
     67e:	05 c0       	rjmp	.+10     	; 0x68a <sysclk_disable_module+0x20>
		*(reg + port) |= id;
     680:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     684:	68 2b       	or	r22, r24
     686:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     68a:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     68c:	0f 90       	pop	r0
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <gfx_mono_generic_draw_horizontal_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	08 2f       	mov	r16, r24
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     6a0:	84 2f       	mov	r24, r20
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	80 0f       	add	r24, r16
     6a6:	91 1d       	adc	r25, r1
     6a8:	81 3f       	cpi	r24, 0xF1	; 241
     6aa:	91 05       	cpc	r25, r1
     6ac:	14 f0       	brlt	.+4      	; 0x6b2 <gfx_mono_generic_draw_horizontal_line+0x1e>
		length = GFX_MONO_LCD_WIDTH - x;
     6ae:	40 ef       	ldi	r20, 0xF0	; 240
     6b0:	40 1b       	sub	r20, r16
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     6b2:	44 23       	and	r20, r20
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <gfx_mono_generic_draw_horizontal_line+0x24>
     6b6:	47 c0       	rjmp	.+142    	; 0x746 <gfx_mono_generic_draw_horizontal_line+0xb2>
	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
		length = GFX_MONO_LCD_WIDTH - x;
	}

	page = y / 8;
     6b8:	d6 2f       	mov	r29, r22
     6ba:	d6 95       	lsr	r29
     6bc:	d6 95       	lsr	r29
     6be:	d6 95       	lsr	r29
	pixelmask = (1 << (y - (page * 8)));
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	88 e0       	ldi	r24, 0x08	; 8
     6c4:	d8 9f       	mul	r29, r24
     6c6:	60 19       	sub	r22, r0
     6c8:	71 09       	sbc	r23, r1
     6ca:	11 24       	eor	r1, r1
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <gfx_mono_generic_draw_horizontal_line+0x40>
     6d2:	88 0f       	add	r24, r24
     6d4:	6a 95       	dec	r22
     6d6:	ea f7       	brpl	.-6      	; 0x6d2 <gfx_mono_generic_draw_horizontal_line+0x3e>
     6d8:	f8 2e       	mov	r15, r24
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     6da:	21 30       	cpi	r18, 0x01	; 1
     6dc:	31 f0       	breq	.+12     	; 0x6ea <gfx_mono_generic_draw_horizontal_line+0x56>
     6de:	40 f0       	brcs	.+16     	; 0x6f0 <gfx_mono_generic_draw_horizontal_line+0x5c>
     6e0:	22 30       	cpi	r18, 0x02	; 2
     6e2:	89 f5       	brne	.+98     	; 0x746 <gfx_mono_generic_draw_horizontal_line+0xb2>
     6e4:	cf ef       	ldi	r28, 0xFF	; 255
     6e6:	c4 0f       	add	r28, r20
     6e8:	22 c0       	rjmp	.+68     	; 0x72e <gfx_mono_generic_draw_horizontal_line+0x9a>
     6ea:	cf ef       	ldi	r28, 0xFF	; 255
     6ec:	c4 0f       	add	r28, r20
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <gfx_mono_generic_draw_horizontal_line+0x66>
     6f0:	cf ef       	ldi	r28, 0xFF	; 255
     6f2:	c4 0f       	add	r28, r20
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
			temp &= ~pixelmask;
     6f4:	18 2f       	mov	r17, r24
     6f6:	10 95       	com	r17
     6f8:	0d c0       	rjmp	.+26     	; 0x714 <gfx_mono_generic_draw_horizontal_line+0x80>
     6fa:	10 2f       	mov	r17, r16
     6fc:	1c 0f       	add	r17, r28
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     6fe:	61 2f       	mov	r22, r17
     700:	8d 2f       	mov	r24, r29
     702:	cc d2       	rcall	.+1432   	; 0xc9c <gfx_mono_lcd_uc1608_get_byte>
			temp |= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     704:	4f 2d       	mov	r20, r15
     706:	48 2b       	or	r20, r24
     708:	61 2f       	mov	r22, r17
     70a:	8d 2f       	mov	r24, r29
     70c:	af d2       	rcall	.+1374   	; 0xc6c <gfx_mono_lcd_uc1608_put_byte>
     70e:	c1 50       	subi	r28, 0x01	; 1
     710:	a0 f7       	brcc	.-24     	; 0x6fa <gfx_mono_generic_draw_horizontal_line+0x66>
     712:	19 c0       	rjmp	.+50     	; 0x746 <gfx_mono_generic_draw_horizontal_line+0xb2>
     714:	f0 2e       	mov	r15, r16
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     716:	fc 0e       	add	r15, r28
     718:	6f 2d       	mov	r22, r15
     71a:	8d 2f       	mov	r24, r29
			temp &= ~pixelmask;
     71c:	bf d2       	rcall	.+1406   	; 0xc9c <gfx_mono_lcd_uc1608_get_byte>
			gfx_mono_put_byte(page, x + length, temp);
     71e:	41 2f       	mov	r20, r17
     720:	48 23       	and	r20, r24
     722:	6f 2d       	mov	r22, r15
     724:	8d 2f       	mov	r24, r29
     726:	a2 d2       	rcall	.+1348   	; 0xc6c <gfx_mono_lcd_uc1608_put_byte>
     728:	c1 50       	subi	r28, 0x01	; 1
     72a:	a0 f7       	brcc	.-24     	; 0x714 <gfx_mono_generic_draw_horizontal_line+0x80>
     72c:	0c c0       	rjmp	.+24     	; 0x746 <gfx_mono_generic_draw_horizontal_line+0xb2>
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     72e:	10 2f       	mov	r17, r16
     730:	1c 0f       	add	r17, r28
     732:	61 2f       	mov	r22, r17
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     734:	8d 2f       	mov	r24, r29
     736:	b2 d2       	rcall	.+1380   	; 0xc9c <gfx_mono_lcd_uc1608_get_byte>
     738:	4f 2d       	mov	r20, r15
     73a:	48 27       	eor	r20, r24
     73c:	61 2f       	mov	r22, r17
     73e:	8d 2f       	mov	r24, r29
     740:	95 d2       	rcall	.+1322   	; 0xc6c <gfx_mono_lcd_uc1608_put_byte>
     742:	c1 50       	subi	r28, 0x01	; 1
		break;

	default:
		break;
	}
}
     744:	a0 f7       	brcc	.-24     	; 0x72e <gfx_mono_generic_draw_horizontal_line+0x9a>
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	08 95       	ret

00000752 <gfx_mono_generic_draw_vertical_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	94 2f       	mov	r25, r20
	if (length == 0) {
     760:	44 23       	and	r20, r20
     762:	09 f4       	brne	.+2      	; 0x766 <gfx_mono_generic_draw_vertical_line+0x14>
     764:	46 c0       	rjmp	.+140    	; 0x7f2 <gfx_mono_generic_draw_vertical_line+0xa0>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
     766:	4f ef       	ldi	r20, 0xFF	; 255
     768:	46 0f       	add	r20, r22
     76a:	94 0f       	add	r25, r20

	if (y == y2) {
     76c:	69 13       	cpse	r22, r25
     76e:	08 c0       	rjmp	.+16     	; 0x780 <gfx_mono_generic_draw_vertical_line+0x2e>
		gfx_mono_draw_pixel(x, y, color);
     770:	42 2f       	mov	r20, r18
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
	}
}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
	}

	gfx_coord_t y2 = y + length - 1;

	if (y == y2) {
		gfx_mono_draw_pixel(x, y, color);
     77c:	ef 90       	pop	r14
		return;
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
     77e:	da c2       	rjmp	.+1460   	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     780:	9f 37       	cpi	r25, 0x7F	; 127
		y2 = GFX_MONO_LCD_HEIGHT - 1;
     782:	08 f0       	brcs	.+2      	; 0x786 <gfx_mono_generic_draw_vertical_line+0x34>
	}

	gfx_coord_t y1page = y / 8;
     784:	9f e7       	ldi	r25, 0x7F	; 127
     786:	16 2f       	mov	r17, r22
     788:	16 95       	lsr	r17
     78a:	16 95       	lsr	r17
	gfx_coord_t y2page = y2 / 8;
     78c:	16 95       	lsr	r17
     78e:	09 2f       	mov	r16, r25
     790:	06 95       	lsr	r16
     792:	06 95       	lsr	r16

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
     794:	06 95       	lsr	r16
     796:	67 70       	andi	r22, 0x07	; 7
     798:	ef ef       	ldi	r30, 0xFF	; 255
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	af 01       	movw	r20, r30
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <gfx_mono_generic_draw_vertical_line+0x50>
     7a0:	44 0f       	add	r20, r20
     7a2:	6a 95       	dec	r22
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
     7a4:	ea f7       	brpl	.-6      	; 0x7a0 <gfx_mono_generic_draw_vertical_line+0x4e>
     7a6:	97 70       	andi	r25, 0x07	; 7
     7a8:	67 e0       	ldi	r22, 0x07	; 7
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	69 1b       	sub	r22, r25
     7ae:	71 09       	sbc	r23, r1
     7b0:	7f 01       	movw	r14, r30
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <gfx_mono_generic_draw_vertical_line+0x66>
     7b4:	f5 94       	asr	r15
     7b6:	e7 94       	ror	r14
     7b8:	6a 95       	dec	r22

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <gfx_mono_generic_draw_vertical_line+0x62>
     7bc:	10 13       	cpse	r17, r16
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
     7be:	04 c0       	rjmp	.+8      	; 0x7c8 <gfx_mono_generic_draw_vertical_line+0x76>
     7c0:	4e 21       	and	r20, r14
     7c2:	68 2f       	mov	r22, r24
     7c4:	81 2f       	mov	r24, r17
     7c6:	0e c0       	rjmp	.+28     	; 0x7e4 <gfx_mono_generic_draw_vertical_line+0x92>
     7c8:	d2 2f       	mov	r29, r18
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     7ca:	c8 2f       	mov	r28, r24
     7cc:	6c 2f       	mov	r22, r28
     7ce:	81 2f       	mov	r24, r17
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     7d0:	8c d2       	rcall	.+1304   	; 0xcea <gfx_mono_lcd_uc1608_mask_byte>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     7d2:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     7d4:	2d 2f       	mov	r18, r29
     7d6:	10 17       	cp	r17, r16
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     7d8:	10 f4       	brcc	.+4      	; 0x7de <gfx_mono_generic_draw_vertical_line+0x8c>
     7da:	4f ef       	ldi	r20, 0xFF	; 255
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     7dc:	f7 cf       	rjmp	.-18     	; 0x7cc <gfx_mono_generic_draw_vertical_line+0x7a>
     7de:	4e 2d       	mov	r20, r14
     7e0:	6c 2f       	mov	r22, r28
	}
}
     7e2:	80 2f       	mov	r24, r16
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16

		while (++y1page < y2page) {
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
	}
}
     7f0:	7c c2       	rjmp	.+1272   	; 0xcea <gfx_mono_lcd_uc1608_mask_byte>
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	08 95       	ret

00000800 <gfx_mono_generic_draw_line>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
     800:	8f 92       	push	r8
     802:	9f 92       	push	r9
     804:	af 92       	push	r10
     806:	bf 92       	push	r11
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	18 2f       	mov	r17, r24
     81a:	b6 2e       	mov	r11, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     81c:	48 17       	cp	r20, r24
     81e:	28 f4       	brcc	.+10     	; 0x82a <gfx_mono_generic_draw_line+0x2a>
		dx = x1;
		x1 = x2;
		x2 = dx;
		dy = y1;
		y1 = y2;
     820:	b2 2e       	mov	r11, r18
		y2 = dy;
     822:	26 2f       	mov	r18, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     824:	81 2f       	mov	r24, r17
     826:	14 2f       	mov	r17, r20
     828:	48 2f       	mov	r20, r24
		dy = y1;
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
     82a:	c4 2f       	mov	r28, r20
     82c:	d0 e0       	ldi	r29, 0x00	; 0
     82e:	c1 1b       	sub	r28, r17
     830:	d1 09       	sbc	r29, r1
	dy = y2 - y1;
     832:	e2 2e       	mov	r14, r18
     834:	f1 2c       	mov	r15, r1
     836:	eb 18       	sub	r14, r11
     838:	f1 08       	sbc	r15, r1

	x = x1;
	y = y1;

	if (dx < 0) {
     83a:	d7 ff       	sbrs	r29, 7
     83c:	06 c0       	rjmp	.+12     	; 0x84a <gfx_mono_generic_draw_line+0x4a>
		xinc = -1;
		dx = -dx;
     83e:	d1 95       	neg	r29
     840:	c1 95       	neg	r28
     842:	d1 09       	sbc	r29, r1

	x = x1;
	y = y1;

	if (dx < 0) {
		xinc = -1;
     844:	99 24       	eor	r9, r9
     846:	9a 94       	dec	r9
     848:	02 c0       	rjmp	.+4      	; 0x84e <gfx_mono_generic_draw_line+0x4e>
		dx = -dx;
	} else {
		xinc = 1;
     84a:	99 24       	eor	r9, r9
     84c:	93 94       	inc	r9
	}

	if (dy < 0) {
     84e:	f7 fe       	sbrs	r15, 7
     850:	06 c0       	rjmp	.+12     	; 0x85e <gfx_mono_generic_draw_line+0x5e>
		yinc = -1;
		dy = -dy;
     852:	f1 94       	neg	r15
     854:	e1 94       	neg	r14
     856:	f1 08       	sbc	r15, r1
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     858:	88 24       	eor	r8, r8
     85a:	8a 94       	dec	r8
     85c:	02 c0       	rjmp	.+4      	; 0x862 <gfx_mono_generic_draw_line+0x62>
		dy = -dy;
	} else {
		yinc = 1;
     85e:	88 24       	eor	r8, r8
     860:	83 94       	inc	r8
	}

	if (dx > dy) {
     862:	ec 16       	cp	r14, r28
     864:	fd 06       	cpc	r15, r29
     866:	bc f4       	brge	.+46     	; 0x896 <gfx_mono_generic_draw_line+0x96>
		e = dy - dx;
     868:	67 01       	movw	r12, r14
     86a:	cc 1a       	sub	r12, r28
     86c:	dd 0a       	sbc	r13, r29
		for (i = 0; i <= dx; i++) {
     86e:	a1 2c       	mov	r10, r1
     870:	8a 2d       	mov	r24, r10
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	c8 17       	cp	r28, r24
     876:	d9 07       	cpc	r29, r25
     878:	2c f1       	brlt	.+74     	; 0x8c4 <gfx_mono_generic_draw_line+0xc4>
			gfx_mono_draw_pixel(x, y, color);
     87a:	40 2f       	mov	r20, r16
     87c:	6b 2d       	mov	r22, r11
     87e:	81 2f       	mov	r24, r17
     880:	59 d2       	rcall	.+1202   	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     882:	d7 fc       	sbrc	r13, 7
     884:	03 c0       	rjmp	.+6      	; 0x88c <gfx_mono_generic_draw_line+0x8c>
				e -= dx;
     886:	cc 1a       	sub	r12, r28
     888:	dd 0a       	sbc	r13, r29
				y += yinc;
     88a:	b8 0c       	add	r11, r8
			}

			e += dy;
     88c:	ce 0c       	add	r12, r14
     88e:	df 1c       	adc	r13, r15
     890:	19 0d       	add	r17, r9
		yinc = 1;
	}

	if (dx > dy) {
		e = dy - dx;
		for (i = 0; i <= dx; i++) {
     892:	a3 94       	inc	r10
     894:	ed cf       	rjmp	.-38     	; 0x870 <gfx_mono_generic_draw_line+0x70>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     896:	6e 01       	movw	r12, r28
     898:	ce 18       	sub	r12, r14
     89a:	df 08       	sbc	r13, r15
		for (i = 0; i <= dy; i++) {
     89c:	a1 2c       	mov	r10, r1
     89e:	8a 2d       	mov	r24, r10
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	e8 16       	cp	r14, r24
     8a4:	f9 06       	cpc	r15, r25
     8a6:	74 f0       	brlt	.+28     	; 0x8c4 <gfx_mono_generic_draw_line+0xc4>
			gfx_mono_draw_pixel(x, y, color);
     8a8:	40 2f       	mov	r20, r16
     8aa:	6b 2d       	mov	r22, r11
     8ac:	81 2f       	mov	r24, r17
     8ae:	42 d2       	rcall	.+1156   	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     8b0:	d7 fc       	sbrc	r13, 7
     8b2:	03 c0       	rjmp	.+6      	; 0x8ba <gfx_mono_generic_draw_line+0xba>
				e -= dy;
     8b4:	ce 18       	sub	r12, r14
     8b6:	df 08       	sbc	r13, r15
				x += xinc;
     8b8:	19 0d       	add	r17, r9
			}

			e += dx;
     8ba:	cc 0e       	add	r12, r28
     8bc:	dd 1e       	adc	r13, r29
     8be:	b8 0c       	add	r11, r8
			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
     8c0:	a3 94       	inc	r10
     8c2:	ed cf       	rjmp	.-38     	; 0x89e <gfx_mono_generic_draw_line+0x9e>

			e += dx;
			y += yinc;
		}
	}
}
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	df 90       	pop	r13
     8d2:	cf 90       	pop	r12
     8d4:	bf 90       	pop	r11
     8d6:	af 90       	pop	r10
     8d8:	9f 90       	pop	r9
     8da:	8f 90       	pop	r8
     8dc:	08 95       	ret

000008de <gfx_mono_generic_draw_rect>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	d8 2f       	mov	r29, r24
     8ea:	16 2f       	mov	r17, r22
     8ec:	c4 2f       	mov	r28, r20
     8ee:	f2 2e       	mov	r15, r18
	gfx_mono_draw_horizontal_line(x, y, width, color);
     8f0:	20 2f       	mov	r18, r16
     8f2:	d0 de       	rcall	.-608    	; 0x694 <gfx_mono_generic_draw_horizontal_line>
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
     8f4:	6f ef       	ldi	r22, 0xFF	; 255
     8f6:	6f 0d       	add	r22, r15
     8f8:	61 0f       	add	r22, r17
     8fa:	20 2f       	mov	r18, r16
     8fc:	4c 2f       	mov	r20, r28
     8fe:	8d 2f       	mov	r24, r29
     900:	c9 de       	rcall	.-622    	; 0x694 <gfx_mono_generic_draw_horizontal_line>

	gfx_mono_draw_vertical_line(x, y, height, color);
     902:	20 2f       	mov	r18, r16
     904:	4f 2d       	mov	r20, r15
     906:	61 2f       	mov	r22, r17
     908:	8d 2f       	mov	r24, r29
     90a:	23 df       	rcall	.-442    	; 0x752 <gfx_mono_generic_draw_vertical_line>
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     90c:	8f ef       	ldi	r24, 0xFF	; 255
     90e:	8c 0f       	add	r24, r28
     910:	20 2f       	mov	r18, r16
     912:	4f 2d       	mov	r20, r15
     914:	61 2f       	mov	r22, r17
     916:	8d 0f       	add	r24, r29
}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
{
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     920:	ff 90       	pop	r15
     922:	17 cf       	rjmp	.-466    	; 0x752 <gfx_mono_generic_draw_vertical_line>

00000924 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
	if (height == 0) {
     92e:	22 23       	and	r18, r18
     930:	69 f0       	breq	.+26     	; 0x94c <gfx_mono_generic_draw_filled_rect+0x28>
     932:	14 2f       	mov	r17, r20
     934:	f6 2e       	mov	r15, r22
     936:	d8 2f       	mov	r29, r24
     938:	cf ef       	ldi	r28, 0xFF	; 255
     93a:	c2 0f       	add	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     93c:	6f 2d       	mov	r22, r15
     93e:	6c 0f       	add	r22, r28
     940:	20 2f       	mov	r18, r16
     942:	41 2f       	mov	r20, r17
     944:	8d 2f       	mov	r24, r29
     946:	a6 de       	rcall	.-692    	; 0x694 <gfx_mono_generic_draw_horizontal_line>
     948:	c1 50       	subi	r28, 0x01	; 1
     94a:	c0 f7       	brcc	.-16     	; 0x93c <gfx_mono_generic_draw_filled_rect+0x18>
	}
}
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	ff 90       	pop	r15
     956:	08 95       	ret

00000958 <gfx_mono_generic_draw_circle>:
 * \param  octant_mask Bitmask indicating which octants to draw.
 */
void gfx_mono_generic_draw_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t octant_mask)
{
     958:	5f 92       	push	r5
     95a:	6f 92       	push	r6
     95c:	7f 92       	push	r7
     95e:	8f 92       	push	r8
     960:	9f 92       	push	r9
     962:	af 92       	push	r10
     964:	bf 92       	push	r11
     966:	cf 92       	push	r12
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	18 2f       	mov	r17, r24
     978:	f6 2e       	mov	r15, r22
     97a:	c4 2f       	mov	r28, r20
     97c:	e2 2e       	mov	r14, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     97e:	41 11       	cpse	r20, r1
     980:	11 c0       	rjmp	.+34     	; 0x9a4 <gfx_mono_generic_draw_circle+0x4c>
		gfx_mono_draw_pixel(x, y, color);
     982:	42 2f       	mov	r20, r18
		}

		/* Next X. */
		++offset_x;
	}
}
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	bf 90       	pop	r11
     996:	af 90       	pop	r10
     998:	9f 90       	pop	r9
     99a:	8f 90       	pop	r8
     99c:	7f 90       	pop	r7
     99e:	6f 90       	pop	r6
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
		gfx_mono_draw_pixel(x, y, color);
     9a0:	5f 90       	pop	r5
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     9a2:	c8 c1       	rjmp	.+912    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	6c 01       	movw	r12, r24
     9aa:	22 e0       	ldi	r18, 0x02	; 2
     9ac:	42 9f       	mul	r20, r18
     9ae:	c0 18       	sub	r12, r0
     9b0:	d1 08       	sbc	r13, r1
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     9b2:	11 24       	eor	r1, r1
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     9b4:	d0 e0       	ldi	r29, 0x00	; 0
     9b6:	80 2f       	mov	r24, r16
     9b8:	81 70       	andi	r24, 0x01	; 1
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT1) {
     9ba:	b8 2e       	mov	r11, r24
     9bc:	20 2f       	mov	r18, r16
     9be:	22 70       	andi	r18, 0x02	; 2
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT2) {
     9c0:	a2 2e       	mov	r10, r18
     9c2:	80 2f       	mov	r24, r16
     9c4:	84 70       	andi	r24, 0x04	; 4
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT3) {
     9c6:	98 2e       	mov	r9, r24
     9c8:	20 2f       	mov	r18, r16
     9ca:	28 70       	andi	r18, 0x08	; 8
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT4) {
     9cc:	82 2e       	mov	r8, r18
     9ce:	80 2f       	mov	r24, r16
     9d0:	80 71       	andi	r24, 0x10	; 16
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
		}

		if (octant_mask & GFX_OCTANT5) {
     9d2:	78 2e       	mov	r7, r24
     9d4:	20 2f       	mov	r18, r16
     9d6:	20 72       	andi	r18, 0x20	; 32
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
		}

		if (octant_mask & GFX_OCTANT6) {
     9d8:	62 2e       	mov	r6, r18
     9da:	80 2f       	mov	r24, r16
     9dc:	80 74       	andi	r24, 0x40	; 64
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     9de:	58 2e       	mov	r5, r24
     9e0:	bb 20       	and	r11, r11
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
     9e2:	31 f0       	breq	.+12     	; 0x9f0 <gfx_mono_generic_draw_circle+0x98>
     9e4:	4e 2d       	mov	r20, r14
     9e6:	6f 2d       	mov	r22, r15
     9e8:	6d 1b       	sub	r22, r29
     9ea:	81 2f       	mov	r24, r17
     9ec:	8c 0f       	add	r24, r28
		}

		if (octant_mask & GFX_OCTANT1) {
     9ee:	a2 d1       	rcall	.+836    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     9f0:	aa 20       	and	r10, r10
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
     9f2:	31 f0       	breq	.+12     	; 0xa00 <gfx_mono_generic_draw_circle+0xa8>
     9f4:	4e 2d       	mov	r20, r14
     9f6:	6f 2d       	mov	r22, r15
     9f8:	6c 1b       	sub	r22, r28
     9fa:	81 2f       	mov	r24, r17
     9fc:	8d 0f       	add	r24, r29
		}

		if (octant_mask & GFX_OCTANT2) {
     9fe:	9a d1       	rcall	.+820    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a00:	99 20       	and	r9, r9
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
     a02:	31 f0       	breq	.+12     	; 0xa10 <gfx_mono_generic_draw_circle+0xb8>
     a04:	4e 2d       	mov	r20, r14
     a06:	6f 2d       	mov	r22, r15
     a08:	6c 1b       	sub	r22, r28
     a0a:	81 2f       	mov	r24, r17
     a0c:	8d 1b       	sub	r24, r29
		}

		if (octant_mask & GFX_OCTANT3) {
     a0e:	92 d1       	rcall	.+804    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a10:	88 20       	and	r8, r8
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
     a12:	31 f0       	breq	.+12     	; 0xa20 <gfx_mono_generic_draw_circle+0xc8>
     a14:	4e 2d       	mov	r20, r14
     a16:	6f 2d       	mov	r22, r15
     a18:	6d 1b       	sub	r22, r29
     a1a:	81 2f       	mov	r24, r17
     a1c:	8c 1b       	sub	r24, r28
		}

		if (octant_mask & GFX_OCTANT4) {
     a1e:	8a d1       	rcall	.+788    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
     a20:	77 20       	and	r7, r7
     a22:	31 f0       	breq	.+12     	; 0xa30 <gfx_mono_generic_draw_circle+0xd8>
     a24:	4e 2d       	mov	r20, r14
     a26:	6f 2d       	mov	r22, r15
     a28:	6d 0f       	add	r22, r29
     a2a:	81 2f       	mov	r24, r17
		}

		if (octant_mask & GFX_OCTANT5) {
     a2c:	8c 1b       	sub	r24, r28
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
     a2e:	82 d1       	rcall	.+772    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a30:	66 20       	and	r6, r6
     a32:	31 f0       	breq	.+12     	; 0xa40 <gfx_mono_generic_draw_circle+0xe8>
     a34:	4e 2d       	mov	r20, r14
     a36:	6f 2d       	mov	r22, r15
     a38:	6c 0f       	add	r22, r28
		}

		if (octant_mask & GFX_OCTANT6) {
     a3a:	81 2f       	mov	r24, r17
			gfx_mono_draw_pixel(x + offset_x, y + offset_y, color);
     a3c:	8d 1b       	sub	r24, r29
     a3e:	7a d1       	rcall	.+756    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a40:	55 20       	and	r5, r5
     a42:	31 f0       	breq	.+12     	; 0xa50 <gfx_mono_generic_draw_circle+0xf8>
     a44:	4e 2d       	mov	r20, r14
     a46:	6f 2d       	mov	r22, r15
		}

		if (octant_mask & GFX_OCTANT7) {
     a48:	6c 0f       	add	r22, r28
     a4a:	81 2f       	mov	r24, r17
			gfx_mono_draw_pixel(x + offset_y, y + offset_x, color);
     a4c:	8d 0f       	add	r24, r29
     a4e:	72 d1       	rcall	.+740    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a50:	07 ff       	sbrs	r16, 7
     a52:	06 c0       	rjmp	.+12     	; 0xa60 <gfx_mono_generic_draw_circle+0x108>
     a54:	4e 2d       	mov	r20, r14
     a56:	6f 2d       	mov	r22, r15
     a58:	6d 0f       	add	r22, r29
     a5a:	81 2f       	mov	r24, r17
     a5c:	8c 0f       	add	r24, r28
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     a5e:	6a d1       	rcall	.+724    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a60:	8d 2f       	mov	r24, r29
			error += ((offset_x << 2) + 6);
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	d7 fe       	sbrs	r13, 7
     a66:	08 c0       	rjmp	.+16     	; 0xa78 <gfx_mono_generic_draw_circle+0x120>
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	06 96       	adiw	r24, 0x06	; 6
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     a72:	c8 0e       	add	r12, r24
     a74:	d9 1e       	adc	r13, r25
     a76:	0a c0       	rjmp	.+20     	; 0xa8c <gfx_mono_generic_draw_circle+0x134>
     a78:	8c 1b       	sub	r24, r28
     a7a:	91 09       	sbc	r25, r1
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
			--offset_y;
     a84:	0a 96       	adiw	r24, 0x0a	; 10
		}

		/* Next X. */
		++offset_x;
     a86:	c8 0e       	add	r12, r24
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
     a88:	d9 1e       	adc	r13, r25
     a8a:	c1 50       	subi	r28, 0x01	; 1
     a8c:	df 5f       	subi	r29, 0xFF	; 255
		}

		/* Next X. */
		++offset_x;
	}
}
     a8e:	cd 17       	cp	r28, r29
     a90:	08 f0       	brcs	.+2      	; 0xa94 <gfx_mono_generic_draw_circle+0x13c>
     a92:	a6 cf       	rjmp	.-180    	; 0x9e0 <gfx_mono_generic_draw_circle+0x88>
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	bf 90       	pop	r11
     aa6:	af 90       	pop	r10
     aa8:	9f 90       	pop	r9
     aaa:	8f 90       	pop	r8
     aac:	7f 90       	pop	r7
     aae:	6f 90       	pop	r6
     ab0:	5f 90       	pop	r5
     ab2:	08 95       	ret

00000ab4 <gfx_mono_generic_draw_filled_circle>:
 * \param  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
     ab4:	8f 92       	push	r8
     ab6:	9f 92       	push	r9
     ab8:	af 92       	push	r10
     aba:	bf 92       	push	r11
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	18 2f       	mov	r17, r24
     ace:	d6 2e       	mov	r13, r22
     ad0:	c4 2f       	mov	r28, r20
     ad2:	c2 2e       	mov	r12, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     ad4:	41 11       	cpse	r20, r1
     ad6:	0e c0       	rjmp	.+28     	; 0xaf4 <gfx_mono_generic_draw_filled_circle+0x40>
		gfx_mono_draw_pixel(x, y, color);
     ad8:	42 2f       	mov	r20, r18
		}

		/* Next X. */
		++offset_x;
	}
}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
		gfx_mono_draw_pixel(x, y, color);
     af0:	8f 90       	pop	r8
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     af2:	20 c1       	rjmp	.+576    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	7c 01       	movw	r14, r24
     afa:	22 e0       	ldi	r18, 0x02	; 2
     afc:	42 9f       	mul	r20, r18
     afe:	e0 18       	sub	r14, r0
     b00:	f1 08       	sbc	r15, r1
     b02:	11 24       	eor	r1, r1
     b04:	bb 24       	eor	r11, r11
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     b06:	b3 94       	inc	r11
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     b08:	d0 e0       	ldi	r29, 0x00	; 0
     b0a:	80 2f       	mov	r24, r16
     b0c:	83 70       	andi	r24, 0x03	; 3
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     b0e:	a8 2e       	mov	r10, r24
     b10:	20 2f       	mov	r18, r16
     b12:	2c 70       	andi	r18, 0x0C	; 12
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     b14:	92 2e       	mov	r9, r18
     b16:	80 2f       	mov	r24, r16
     b18:	80 73       	andi	r24, 0x30	; 48
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     b1a:	88 2e       	mov	r8, r24
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     b1c:	00 7c       	andi	r16, 0xC0	; 192
     b1e:	aa 20       	and	r10, r10
			gfx_mono_draw_vertical_line(x + offset_y,
     b20:	79 f0       	breq	.+30     	; 0xb40 <gfx_mono_generic_draw_filled_circle+0x8c>
     b22:	2c 2d       	mov	r18, r12
     b24:	4b 2d       	mov	r20, r11
     b26:	6d 2d       	mov	r22, r13
     b28:	6d 1b       	sub	r22, r29
     b2a:	81 2f       	mov	r24, r17
     b2c:	8c 0f       	add	r24, r28
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     b2e:	11 de       	rcall	.-990    	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b30:	2c 2d       	mov	r18, r12
     b32:	41 e0       	ldi	r20, 0x01	; 1
     b34:	4c 0f       	add	r20, r28
     b36:	6d 2d       	mov	r22, r13
     b38:	6c 1b       	sub	r22, r28
     b3a:	81 2f       	mov	r24, r17
     b3c:	8d 0f       	add	r24, r29
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     b3e:	09 de       	rcall	.-1006   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b40:	99 20       	and	r9, r9
			gfx_mono_draw_vertical_line(x - offset_y,
     b42:	79 f0       	breq	.+30     	; 0xb62 <gfx_mono_generic_draw_filled_circle+0xae>
     b44:	2c 2d       	mov	r18, r12
     b46:	4b 2d       	mov	r20, r11
     b48:	6d 2d       	mov	r22, r13
     b4a:	6d 1b       	sub	r22, r29
     b4c:	81 2f       	mov	r24, r17
     b4e:	8c 1b       	sub	r24, r28
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     b50:	00 de       	rcall	.-1024   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b52:	2c 2d       	mov	r18, r12
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	4c 0f       	add	r20, r28
     b58:	6d 2d       	mov	r22, r13
     b5a:	6c 1b       	sub	r22, r28
     b5c:	81 2f       	mov	r24, r17
     b5e:	8d 1b       	sub	r24, r29
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     b60:	f8 dd       	rcall	.-1040   	; 0x752 <gfx_mono_generic_draw_vertical_line>
			gfx_mono_draw_vertical_line(x - offset_y,
     b62:	88 20       	and	r8, r8
     b64:	69 f0       	breq	.+26     	; 0xb80 <gfx_mono_generic_draw_filled_circle+0xcc>
     b66:	2c 2d       	mov	r18, r12
     b68:	4b 2d       	mov	r20, r11
     b6a:	6d 2d       	mov	r22, r13
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     b6c:	81 2f       	mov	r24, r17
     b6e:	8c 1b       	sub	r24, r28
     b70:	f0 dd       	rcall	.-1056   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b72:	2c 2d       	mov	r18, r12
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	4c 0f       	add	r20, r28
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     b78:	6d 2d       	mov	r22, r13
			gfx_mono_draw_vertical_line(x + offset_y,
     b7a:	81 2f       	mov	r24, r17
     b7c:	8d 1b       	sub	r24, r29
     b7e:	e9 dd       	rcall	.-1070   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b80:	00 23       	and	r16, r16
     b82:	69 f0       	breq	.+26     	; 0xb9e <gfx_mono_generic_draw_filled_circle+0xea>
     b84:	2c 2d       	mov	r18, r12
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     b86:	4b 2d       	mov	r20, r11
     b88:	6d 2d       	mov	r22, r13
     b8a:	81 2f       	mov	r24, r17
     b8c:	8c 0f       	add	r24, r28
     b8e:	e1 dd       	rcall	.-1086   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b90:	2c 2d       	mov	r18, r12
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	4c 0f       	add	r20, r28
     b96:	6d 2d       	mov	r22, r13
     b98:	81 2f       	mov	r24, r17
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     b9a:	8d 0f       	add	r24, r29
     b9c:	da dd       	rcall	.-1100   	; 0x752 <gfx_mono_generic_draw_vertical_line>
			error += ((offset_x << 2) + 6);
     b9e:	8d 2f       	mov	r24, r29
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	f7 fe       	sbrs	r15, 7
     ba4:	08 c0       	rjmp	.+16     	; 0xbb6 <gfx_mono_generic_draw_filled_circle+0x102>
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     bae:	06 96       	adiw	r24, 0x06	; 6
     bb0:	e8 0e       	add	r14, r24
     bb2:	f9 1e       	adc	r15, r25
     bb4:	0a c0       	rjmp	.+20     	; 0xbca <gfx_mono_generic_draw_filled_circle+0x116>
     bb6:	8c 1b       	sub	r24, r28
     bb8:	91 09       	sbc	r25, r1
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	88 0f       	add	r24, r24
			--offset_y;
     bc0:	99 1f       	adc	r25, r25
		}

		/* Next X. */
		++offset_x;
     bc2:	0a 96       	adiw	r24, 0x0a	; 10
     bc4:	e8 0e       	add	r14, r24
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
     bc6:	f9 1e       	adc	r15, r25
     bc8:	c1 50       	subi	r28, 0x01	; 1
     bca:	df 5f       	subi	r29, 0xFF	; 255
		}

		/* Next X. */
		++offset_x;
	}
}
     bcc:	b3 94       	inc	r11
     bce:	cd 17       	cp	r28, r29
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <gfx_mono_generic_draw_filled_circle+0x120>
     bd2:	a5 cf       	rjmp	.-182    	; 0xb1e <gfx_mono_generic_draw_filled_circle+0x6a>
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	bf 90       	pop	r11
     be6:	af 90       	pop	r10
     be8:	9f 90       	pop	r9
     bea:	8f 90       	pop	r8
     bec:	08 95       	ret

00000bee <gfx_mono_lcd_uc1608_cache_write_byte>:
		uint8_t				byte = gfx_mono_lcd_uc1608_get_byte(page, x);

		isSet = (byte & pixel_mask) ?  GFX_PIXEL_SET : GFX_PIXEL_CLR;
	}
	return isSet;
}
     bee:	80 31       	cpi	r24, 0x10	; 16
     bf0:	30 f4       	brcc	.+12     	; 0xbfe <gfx_mono_lcd_uc1608_cache_write_byte+0x10>
     bf2:	60 3f       	cpi	r22, 0xF0	; 240
     bf4:	20 f4       	brcc	.+8      	; 0xbfe <gfx_mono_lcd_uc1608_cache_write_byte+0x10>
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	70 64       	ori	r23, 0x40	; 64
     bfa:	78 2b       	or	r23, r24
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <gfx_mono_lcd_uc1608_cache_write_byte+0x14>
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e8       	ldi	r23, 0x80	; 128
     c02:	76 ff       	sbrs	r23, 6
     c04:	06 c0       	rjmp	.+12     	; 0xc12 <gfx_mono_lcd_uc1608_cache_write_byte+0x24>
     c06:	70 93 b9 03 	sts	0x03B9, r23	; 0x8003b9 <__data_end+0x1>
     c0a:	60 93 b8 03 	sts	0x03B8, r22	; 0x8003b8 <__data_end>
     c0e:	40 93 ba 03 	sts	0x03BA, r20	; 0x8003ba <__data_end+0x2>
     c12:	08 95       	ret

00000c14 <gfx_mono_lcd_uc1608_put_page>:
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	8c 01       	movw	r16, r24
     c1e:	86 2f       	mov	r24, r22
     c20:	d4 2f       	mov	r29, r20
     c22:	c2 2f       	mov	r28, r18
     c24:	01 15       	cp	r16, r1
     c26:	11 05       	cpc	r17, r1
     c28:	49 f4       	brne	.+18     	; 0xc3c <gfx_mono_lcd_uc1608_put_page+0x28>
     c2a:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <__data_end+0x1>
     c2e:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <__data_end>
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret
     c3c:	60 31       	cpi	r22, 0x10	; 16
     c3e:	a8 f7       	brcc	.-22     	; 0xc2a <gfx_mono_lcd_uc1608_put_page+0x16>
     c40:	40 3f       	cpi	r20, 0xF0	; 240
     c42:	98 f7       	brcc	.-26     	; 0xc2a <gfx_mono_lcd_uc1608_put_page+0x16>
     c44:	90 d6       	rcall	.+3360   	; 0x1966 <lcd_page_set>
     c46:	8d 2f       	mov	r24, r29
     c48:	96 d6       	rcall	.+3372   	; 0x1976 <lcd_col_set>
     c4a:	8c 2f       	mov	r24, r28
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	8d 0f       	add	r24, r29
     c50:	91 1d       	adc	r25, r1
     c52:	81 3f       	cpi	r24, 0xF1	; 241
     c54:	91 05       	cpc	r25, r1
     c56:	14 f0       	brlt	.+4      	; 0xc5c <gfx_mono_lcd_uc1608_put_page+0x48>
     c58:	c0 ef       	ldi	r28, 0xF0	; 240
     c5a:	cd 1b       	sub	r28, r29
     c5c:	cc 23       	and	r28, r28
     c5e:	29 f3       	breq	.-54     	; 0xc2a <gfx_mono_lcd_uc1608_put_page+0x16>
     c60:	f8 01       	movw	r30, r16
     c62:	81 91       	ld	r24, Z+
     c64:	8f 01       	movw	r16, r30
     c66:	34 d6       	rcall	.+3176   	; 0x18d0 <lcd_bus_write_ram>
     c68:	c1 50       	subi	r28, 0x01	; 1
     c6a:	f8 cf       	rjmp	.-16     	; 0xc5c <gfx_mono_lcd_uc1608_put_page+0x48>

00000c6c <gfx_mono_lcd_uc1608_put_byte>:
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	80 31       	cpi	r24, 0x10	; 16
     c74:	78 f4       	brcc	.+30     	; 0xc94 <gfx_mono_lcd_uc1608_put_byte+0x28>
     c76:	60 3f       	cpi	r22, 0xF0	; 240
     c78:	68 f4       	brcc	.+26     	; 0xc94 <gfx_mono_lcd_uc1608_put_byte+0x28>
     c7a:	14 2f       	mov	r17, r20
     c7c:	c6 2f       	mov	r28, r22
     c7e:	d8 2f       	mov	r29, r24
     c80:	b6 df       	rcall	.-148    	; 0xbee <gfx_mono_lcd_uc1608_cache_write_byte>
     c82:	8d 2f       	mov	r24, r29
     c84:	70 d6       	rcall	.+3296   	; 0x1966 <lcd_page_set>
     c86:	8c 2f       	mov	r24, r28
     c88:	76 d6       	rcall	.+3308   	; 0x1976 <lcd_col_set>
     c8a:	81 2f       	mov	r24, r17
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	1e c6       	rjmp	.+3132   	; 0x18d0 <lcd_bus_write_ram>
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	08 95       	ret

00000c9c <gfx_mono_lcd_uc1608_get_byte>:
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	80 31       	cpi	r24, 0x10	; 16
     ca4:	80 f4       	brcc	.+32     	; 0xcc6 <gfx_mono_lcd_uc1608_get_byte+0x2a>
     ca6:	60 3f       	cpi	r22, 0xF0	; 240
     ca8:	70 f4       	brcc	.+28     	; 0xcc6 <gfx_mono_lcd_uc1608_get_byte+0x2a>
     caa:	26 2f       	mov	r18, r22
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	30 64       	ori	r19, 0x40	; 64
     cb0:	38 2b       	or	r19, r24
     cb2:	40 91 b8 03 	lds	r20, 0x03B8	; 0x8003b8 <__data_end>
     cb6:	50 91 b9 03 	lds	r21, 0x03B9	; 0x8003b9 <__data_end+0x1>
     cba:	42 17       	cp	r20, r18
     cbc:	53 07       	cpc	r21, r19
     cbe:	29 f4       	brne	.+10     	; 0xcca <gfx_mono_lcd_uc1608_get_byte+0x2e>
     cc0:	10 91 ba 03 	lds	r17, 0x03BA	; 0x8003ba <__data_end+0x2>
     cc4:	0d c0       	rjmp	.+26     	; 0xce0 <gfx_mono_lcd_uc1608_get_byte+0x44>
     cc6:	10 e0       	ldi	r17, 0x00	; 0
     cc8:	0b c0       	rjmp	.+22     	; 0xce0 <gfx_mono_lcd_uc1608_get_byte+0x44>
     cca:	d6 2f       	mov	r29, r22
     ccc:	c8 2f       	mov	r28, r24
     cce:	4b d6       	rcall	.+3222   	; 0x1966 <lcd_page_set>
     cd0:	8d 2f       	mov	r24, r29
     cd2:	51 d6       	rcall	.+3234   	; 0x1976 <lcd_col_set>
     cd4:	0a d6       	rcall	.+3092   	; 0x18ea <lcd_bus_read_ram>
     cd6:	18 2f       	mov	r17, r24
     cd8:	48 2f       	mov	r20, r24
     cda:	6d 2f       	mov	r22, r29
     cdc:	8c 2f       	mov	r24, r28
     cde:	87 df       	rcall	.-242    	; 0xbee <gfx_mono_lcd_uc1608_cache_write_byte>
     ce0:	81 2f       	mov	r24, r17
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	08 95       	ret

00000cea <gfx_mono_lcd_uc1608_mask_byte>:
 * \param column     Page offset (x coordinate)
 * \param pixel_mask Mask for pixel operation
 * \param color      Pixel operation
 */
void gfx_mono_lcd_uc1608_mask_byte(gfx_coord_t page, gfx_coord_t column, gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
	uint8_t data = 0;

	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
     cf2:	80 31       	cpi	r24, 0x10	; 16
     cf4:	d0 f4       	brcc	.+52     	; 0xd2a <gfx_mono_lcd_uc1608_mask_byte+0x40>
     cf6:	60 3f       	cpi	r22, 0xF0	; 240
     cf8:	c0 f4       	brcc	.+48     	; 0xd2a <gfx_mono_lcd_uc1608_mask_byte+0x40>
     cfa:	02 2f       	mov	r16, r18
     cfc:	c4 2f       	mov	r28, r20
     cfe:	16 2f       	mov	r17, r22
		data = gfx_mono_lcd_uc1608_get_byte(page, column);
     d00:	d8 2f       	mov	r29, r24

		switch (color) {
     d02:	cc df       	rcall	.-104    	; 0xc9c <gfx_mono_lcd_uc1608_get_byte>
     d04:	01 30       	cpi	r16, 0x01	; 1
     d06:	41 f0       	breq	.+16     	; 0xd18 <gfx_mono_lcd_uc1608_mask_byte+0x2e>
     d08:	20 f0       	brcs	.+8      	; 0xd12 <gfx_mono_lcd_uc1608_mask_byte+0x28>
     d0a:	02 30       	cpi	r16, 0x02	; 2
			case GFX_PIXEL_SET:
				data |= pixel_mask;
				break;

			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
     d0c:	31 f4       	brne	.+12     	; 0xd1a <gfx_mono_lcd_uc1608_mask_byte+0x30>
     d0e:	8c 27       	eor	r24, r28
	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
		data = gfx_mono_lcd_uc1608_get_byte(page, column);

		switch (color) {
			case GFX_PIXEL_CLR:
				data &= ~pixel_mask;
     d10:	04 c0       	rjmp	.+8      	; 0xd1a <gfx_mono_lcd_uc1608_mask_byte+0x30>
     d12:	c0 95       	com	r28
     d14:	8c 23       	and	r24, r28
				break;

			case GFX_PIXEL_SET:
				data |= pixel_mask;
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <gfx_mono_lcd_uc1608_mask_byte+0x30>
			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
				break;
		}

		gfx_mono_lcd_uc1608_put_byte(page, column, data);
     d18:	8c 2b       	or	r24, r28
     d1a:	48 2f       	mov	r20, r24
     d1c:	61 2f       	mov	r22, r17
	}
}
     d1e:	8d 2f       	mov	r24, r29
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
				break;
		}

		gfx_mono_lcd_uc1608_put_byte(page, column, data);
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
	}
}
     d28:	a1 cf       	rjmp	.-190    	; 0xc6c <gfx_mono_lcd_uc1608_put_byte>
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	08 95       	ret

00000d34 <gfx_mono_lcd_uc1608_draw_pixel>:
 * \param x         X coordinate of the pixel
 * \param y         Y coordinate of the pixel
 * \param color     Pixel operation.
 */
void gfx_mono_lcd_uc1608_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_mono_color_t color)
{
     d34:	96 2f       	mov	r25, r22
     d36:	24 2f       	mov	r18, r20
	if ((x < GFX_MONO_LCD_WIDTH) && (y < GFX_MONO_LCD_HEIGHT)) {
     d38:	80 3f       	cpi	r24, 0xF0	; 240
     d3a:	88 f4       	brcc	.+34     	; 0xd5e <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     d3c:	67 fd       	sbrc	r22, 7
     d3e:	0f c0       	rjmp	.+30     	; 0xd5e <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
		gfx_coord_t			page		= y / GFX_MONO_LCD_PIXELS_PER_BYTE;
		gfx_mono_color_t	pixel_mask	= 1 << (y % GFX_MONO_LCD_PIXELS_PER_BYTE);

		gfx_mono_lcd_uc1608_mask_byte(page, x, pixel_mask, color);
     d40:	36 2f       	mov	r19, r22
     d42:	37 70       	andi	r19, 0x07	; 7
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	ab 01       	movw	r20, r22
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <gfx_mono_lcd_uc1608_draw_pixel+0x1a>
     d4c:	44 0f       	add	r20, r20
     d4e:	3a 95       	dec	r19
     d50:	ea f7       	brpl	.-6      	; 0xd4c <gfx_mono_lcd_uc1608_draw_pixel+0x18>
     d52:	68 2f       	mov	r22, r24
     d54:	89 2f       	mov	r24, r25
     d56:	86 95       	lsr	r24
     d58:	86 95       	lsr	r24
     d5a:	86 95       	lsr	r24
     d5c:	c6 cf       	rjmp	.-116    	; 0xcea <gfx_mono_lcd_uc1608_mask_byte>
     d5e:	08 95       	ret

00000d60 <gfx_mono_lcd_uc1608_cache_clear>:
 *
 */
inline
void gfx_mono_lcd_uc1608_cache_clear()
{
	g_gfx_mono_lcd_uc1608_cache.adr = 0;
     d60:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <__data_end+0x1>
     d64:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <__data_end>
     d68:	08 95       	ret

00000d6a <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     d6a:	9f 92       	push	r9
     d6c:	af 92       	push	r10
     d6e:	bf 92       	push	r11
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	d8 2f       	mov	r29, r24
     d82:	c6 2e       	mov	r12, r22
     d84:	d4 2e       	mov	r13, r20
     d86:	79 01       	movw	r14, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     d88:	00 e0       	ldi	r16, 0x00	; 0
     d8a:	f9 01       	movw	r30, r18
     d8c:	24 81       	ldd	r18, Z+4	; 0x04
     d8e:	43 81       	ldd	r20, Z+3	; 0x03
     d90:	6d 2d       	mov	r22, r13
     d92:	8c 2d       	mov	r24, r12
     d94:	c7 dd       	rcall	.-1138   	; 0x924 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     d96:	f7 01       	movw	r30, r14
     d98:	80 81       	ld	r24, Z
     d9a:	81 11       	cpse	r24, r1
     d9c:	39 c0       	rjmp	.+114    	; 0xe10 <gfx_mono_draw_char+0xa6>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     d9e:	83 81       	ldd	r24, Z+3	; 0x03
     da0:	28 2f       	mov	r18, r24
     da2:	26 95       	lsr	r18
     da4:	26 95       	lsr	r18
     da6:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     da8:	87 70       	andi	r24, 0x07	; 7
     daa:	09 f0       	breq	.+2      	; 0xdae <gfx_mono_draw_char+0x44>
		char_row_size++;
     dac:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     dae:	f7 01       	movw	r30, r14
     db0:	c4 81       	ldd	r28, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     db2:	8d 2f       	mov	r24, r29
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	35 81       	ldd	r19, Z+5	; 0x05
     db8:	83 1b       	sub	r24, r19
     dba:	91 09       	sbc	r25, r1
     dbc:	2c 9f       	mul	r18, r28
     dbe:	90 01       	movw	r18, r0
     dc0:	11 24       	eor	r1, r1
     dc2:	82 9f       	mul	r24, r18
     dc4:	a0 01       	movw	r20, r0
     dc6:	83 9f       	mul	r24, r19
     dc8:	50 0d       	add	r21, r0
     dca:	92 9f       	mul	r25, r18
     dcc:	50 0d       	add	r21, r0
     dce:	11 24       	eor	r1, r1
     dd0:	01 81       	ldd	r16, Z+1	; 0x01
     dd2:	12 81       	ldd	r17, Z+2	; 0x02
     dd4:	04 0f       	add	r16, r20
     dd6:	15 1f       	adc	r17, r21
     dd8:	dc 0e       	add	r13, r28
     dda:	9d 2c       	mov	r9, r13
     ddc:	9c 1a       	sub	r9, r28
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     dde:	f7 01       	movw	r30, r14
     de0:	a3 80       	ldd	r10, Z+3	; 0x03
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
     de2:	b1 2c       	mov	r11, r1
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     de4:	d0 e0       	ldi	r29, 0x00	; 0
     de6:	8c 2d       	mov	r24, r12
     de8:	8d 0f       	add	r24, r29
     dea:	ad 16       	cp	r10, r29
     dec:	79 f0       	breq	.+30     	; 0xe0c <gfx_mono_draw_char+0xa2>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     dee:	9d 2f       	mov	r25, r29
     df0:	97 70       	andi	r25, 0x07	; 7
     df2:	21 f4       	brne	.+8      	; 0xdfc <gfx_mono_draw_char+0x92>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     df4:	f8 01       	movw	r30, r16
     df6:	b4 90       	lpm	r11, Z
				glyph_data++;
     df8:	0f 5f       	subi	r16, 0xFF	; 255
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     dfc:	b7 fe       	sbrs	r11, 7
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <gfx_mono_draw_char+0x9c>
				gfx_mono_draw_pixel(inc_x, inc_y,
     e00:	41 e0       	ldi	r20, 0x01	; 1
     e02:	69 2d       	mov	r22, r9
     e04:	97 df       	rcall	.-210    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     e06:	bb 0c       	add	r11, r11

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     e08:	df 5f       	subi	r29, 0xFF	; 255
     e0a:	ed cf       	rjmp	.-38     	; 0xde6 <gfx_mono_draw_char+0x7c>
			glyph_byte <<= 1;
		}

		inc_y += 1;
		inc_x = x;
		rows_left--;
     e0c:	c1 50       	subi	r28, 0x01	; 1
	} while (rows_left > 0);
     e0e:	29 f7       	brne	.-54     	; 0xdda <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	cf 90       	pop	r12
     e20:	bf 90       	pop	r11
     e22:	af 90       	pop	r10
     e24:	9f 90       	pop	r9
     e26:	08 95       	ret

00000e28 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     e28:	df 92       	push	r13
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	d6 2e       	mov	r13, r22
     e38:	d4 2f       	mov	r29, r20
     e3a:	79 01       	movw	r14, r18
     e3c:	8c 01       	movw	r16, r24
     e3e:	c6 2f       	mov	r28, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     e40:	f8 01       	movw	r30, r16
     e42:	81 91       	ld	r24, Z+
     e44:	8f 01       	movw	r16, r30
     e46:	8a 30       	cpi	r24, 0x0A	; 10
     e48:	31 f4       	brne	.+12     	; 0xe56 <gfx_mono_draw_string+0x2e>
			x = start_of_string_position_x;
			y += font->height + 1;
     e4a:	f7 01       	movw	r30, r14
     e4c:	84 81       	ldd	r24, Z+4	; 0x04
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	d8 0f       	add	r29, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     e52:	cd 2d       	mov	r28, r13
     e54:	09 c0       	rjmp	.+18     	; 0xe68 <gfx_mono_draw_string+0x40>
			y += font->height + 1;
		} else if (*str == '\r') {
     e56:	8d 30       	cpi	r24, 0x0D	; 13
     e58:	39 f0       	breq	.+14     	; 0xe68 <gfx_mono_draw_string+0x40>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     e5a:	97 01       	movw	r18, r14
     e5c:	4d 2f       	mov	r20, r29
     e5e:	6c 2f       	mov	r22, r28
     e60:	84 df       	rcall	.-248    	; 0xd6a <gfx_mono_draw_char>
			x += font->width;
     e62:	f7 01       	movw	r30, r14
     e64:	83 81       	ldd	r24, Z+3	; 0x03
     e66:	c8 0f       	add	r28, r24
		}
	} while (*(++str));
     e68:	f8 01       	movw	r30, r16
     e6a:	80 81       	ld	r24, Z
     e6c:	81 11       	cpse	r24, r1
     e6e:	e8 cf       	rjmp	.-48     	; 0xe40 <gfx_mono_draw_string+0x18>
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	08 95       	ret

00000e80 <asm_break>:

/* Helper functions */

void asm_break(void)
{
	__asm__ __volatile__ ("break" ::: "memory");
     e80:	98 95       	break
	nop();
     e82:	00 00       	nop
     e84:	08 95       	ret

00000e86 <__vector_9>:
{	/* TIMER 2 COMP-B */
	s_bad_interrupt();
}

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
     e86:	1f 92       	push	r1
     e88:	0f 92       	push	r0
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	0f 92       	push	r0
     e8e:	11 24       	eor	r1, r1
     e90:	2f 93       	push	r18
     e92:	3f 93       	push	r19
     e94:	4f 93       	push	r20
     e96:	5f 93       	push	r21
     e98:	6f 93       	push	r22
     e9a:	7f 93       	push	r23
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
	if (g_status.isAnimationStopped && (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC)) {
     ea8:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <g_status>
     eac:	81 ff       	sbrs	r24, 1
     eae:	74 c0       	rjmp	.+232    	; 0xf98 <__vector_9+0x112>
     eb0:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <g_SmartLCD_mode>
     eb4:	80 32       	cpi	r24, 0x20	; 32
     eb6:	09 f0       	breq	.+2      	; 0xeba <__vector_9+0x34>
     eb8:	6f c0       	rjmp	.+222    	; 0xf98 <__vector_9+0x112>
		static uint8_t state_old = 0;
		static uint8_t state_ctr = 0;
		static uint8_t second_old = 0;
		static uint8_t button_ctr = 0;
		uint8_t cur = PORTB & 0x3f;
     eba:	85 b1       	in	r24, 0x05	; 5
     ebc:	8f 73       	andi	r24, 0x3F	; 63

		/* signaling the grade of deviation */
		g_audio_out_loudness = 0;
		if (g_showData.clkState_clk_state < 0xf) {
     ebe:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <g_showData+0x2a>
     ec2:	9f 30       	cpi	r25, 0x0F	; 15
     ec4:	60 f4       	brcc	.+24     	; 0xede <__vector_9+0x58>
			cur |= _BV(PORTB6);  // LED = red
     ec6:	80 64       	ori	r24, 0x40	; 64
			if (state_old != 0x02) {
     ec8:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <state_old.2906>
     ecc:	92 30       	cpi	r25, 0x02	; 2
     ece:	19 f0       	breq	.+6      	; 0xed6 <__vector_9+0x50>
				state_ctr = 122;  // 1 sec
     ed0:	9a e7       	ldi	r25, 0x7A	; 122
     ed2:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <state_ctr.2907>
			}
			state_old = 0x02;
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <state_old.2906>
     edc:	24 c0       	rjmp	.+72     	; 0xf26 <__vector_9+0xa0>

		} else if ((g_showData.clkState_clk_state == 0xf) && (-4 < g_showData.ppb_int) && (g_showData.ppb_int < 4)) {
     ede:	9f 30       	cpi	r25, 0x0F	; 15
     ee0:	c1 f4       	brne	.+48     	; 0xf12 <__vector_9+0x8c>
     ee2:	20 91 d0 04 	lds	r18, 0x04D0	; 0x8004d0 <g_showData+0x1c>
     ee6:	30 91 d1 04 	lds	r19, 0x04D1	; 0x8004d1 <g_showData+0x1d>
     eea:	2d 5f       	subi	r18, 0xFD	; 253
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	27 30       	cpi	r18, 0x07	; 7
     ef0:	31 05       	cpc	r19, r1
     ef2:	78 f4       	brcc	.+30     	; 0xf12 <__vector_9+0x8c>
			cur |= _BV(PORTB7);  // LED = green
     ef4:	80 68       	ori	r24, 0x80	; 128
			state_old = 0x00;
     ef6:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <state_old.2906>

			/* Acoustic phase tracker */
			if (g_showData.time_second != second_old) {
     efa:	90 91 e3 04 	lds	r25, 0x04E3	; 0x8004e3 <g_showData+0x2f>
     efe:	20 91 bc 03 	lds	r18, 0x03BC	; 0x8003bc <second_old.2908>
     f02:	92 17       	cp	r25, r18
     f04:	81 f0       	breq	.+32     	; 0xf26 <__vector_9+0xa0>
				second_old = g_showData.time_second;
     f06:	90 93 bc 03 	sts	0x03BC, r25	; 0x8003bc <second_old.2908>
				state_ctr = 6;
     f0a:	96 e0       	ldi	r25, 0x06	; 6
     f0c:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <state_ctr.2907>
     f10:	0a c0       	rjmp	.+20     	; 0xf26 <__vector_9+0xa0>
			}

		} else {
			if (!state_old) {
     f12:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <state_old.2906>
     f16:	91 11       	cpse	r25, r1
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <__vector_9+0x9a>
				state_ctr = 30;  // 1/4 sec
     f1a:	9e e1       	ldi	r25, 0x1E	; 30
     f1c:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <state_ctr.2907>
			}
			state_old = 0x01;
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <state_old.2906>
		}

		if (state_ctr) {
     f26:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <state_ctr.2907>
     f2a:	99 23       	and	r25, r25
     f2c:	39 f0       	breq	.+14     	; 0xf3c <__vector_9+0xb6>
			--state_ctr;
     f2e:	91 50       	subi	r25, 0x01	; 1
     f30:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <state_ctr.2907>
			g_audio_out_loudness = 9;  // max 9
     f34:	99 e0       	ldi	r25, 0x09	; 9
     f36:	90 93 f7 04 	sts	0x04F7, r25	; 0x8004f7 <g_audio_out_loudness>
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <__vector_9+0xba>
		} else {
			g_audio_out_loudness = 0;
     f3c:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <g_audio_out_loudness>
		}

		PORTB = cur;
     f40:	85 b9       	out	0x05, r24	; 5

		/* sampling I/Q and push buttons */
		if (button_ctr) {
     f42:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <button_ctr.2909>
     f46:	88 23       	and	r24, r24
     f48:	21 f0       	breq	.+8      	; 0xf52 <__vector_9+0xcc>
			--button_ctr;
     f4a:	81 50       	subi	r24, 0x01	; 1
     f4c:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <button_ctr.2909>
     f50:	23 c0       	rjmp	.+70     	; 0xf98 <__vector_9+0x112>
		} else {
			button_ctr = 12;
     f52:	8c e0       	ldi	r24, 0x0C	; 12
     f54:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <button_ctr.2909>
			uint8_t sw = (PINC & 0x06) >> 1;
     f58:	86 b1       	in	r24, 0x06	; 6
     f5a:	86 70       	andi	r24, 0x06	; 6
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	95 95       	asr	r25
     f60:	87 95       	ror	r24
			if (!(sw & 0x01)) {									// SW-I: decrement contrast voltage
     f62:	80 fd       	sbrc	r24, 0
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <__vector_9+0xf2>
				if (g_lcd_contrast_pm) {
     f66:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <g_lcd_contrast_pm>
     f6a:	88 23       	and	r24, r24
     f6c:	a9 f0       	breq	.+42     	; 0xf98 <__vector_9+0x112>
					--g_lcd_contrast_pm;
     f6e:	81 50       	subi	r24, 0x01	; 1
     f70:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <g_lcd_contrast_pm>
					lcd_contrast_update();
     f74:	cf d4       	rcall	.+2462   	; 0x1914 <lcd_contrast_update>
				}
			} else if (!(sw & 0x02)) {							// SW-Q: increment contrast voltage
     f76:	10 c0       	rjmp	.+32     	; 0xf98 <__vector_9+0x112>
     f78:	81 fd       	sbrc	r24, 1
				if (g_lcd_contrast_pm < 0x3F) {
     f7a:	09 c0       	rjmp	.+18     	; 0xf8e <__vector_9+0x108>
     f7c:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <g_lcd_contrast_pm>
     f80:	8f 33       	cpi	r24, 0x3F	; 63
					++g_lcd_contrast_pm;
     f82:	50 f4       	brcc	.+20     	; 0xf98 <__vector_9+0x112>
     f84:	8f 5f       	subi	r24, 0xFF	; 255
					lcd_contrast_update();
     f86:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <g_lcd_contrast_pm>
     f8a:	c4 d4       	rcall	.+2440   	; 0x1914 <lcd_contrast_update>
				}
			} else if (!(PINB & _BV(PINB2))) {					// Pushbutton: store value in EEPROM
     f8c:	05 c0       	rjmp	.+10     	; 0xf98 <__vector_9+0x112>
     f8e:	1a 99       	sbic	0x03, 2	; 3
				eeprom_nvm_settings_write(C_EEPROM_NVM_SETTING_LCD_CONTRAST);
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <__vector_9+0x112>
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <eeprom_nvm_settings_write>
			}
		}
	}
}
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	bf 91       	pop	r27
     f9e:	af 91       	pop	r26
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	7f 91       	pop	r23
     fa6:	6f 91       	pop	r22
     fa8:	5f 91       	pop	r21
     faa:	4f 91       	pop	r20
     fac:	3f 91       	pop	r19
     fae:	2f 91       	pop	r18
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <__vector_13>:
{	/* TIMER 1 COMP-B */
	s_bad_interrupt();
}

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
	++g_timer_abs_msb;
     fd8:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <g_timer_abs_msb>
     fdc:	90 91 08 05 	lds	r25, 0x0508	; 0x800508 <g_timer_abs_msb+0x1>
     fe0:	a0 91 09 05 	lds	r26, 0x0509	; 0x800509 <g_timer_abs_msb+0x2>
     fe4:	b0 91 0a 05 	lds	r27, 0x050A	; 0x80050a <g_timer_abs_msb+0x3>
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	a1 1d       	adc	r26, r1
     fec:	b1 1d       	adc	r27, r1
     fee:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <g_timer_abs_msb>
     ff2:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <g_timer_abs_msb+0x1>
     ff6:	a0 93 09 05 	sts	0x0509, r26	; 0x800509 <g_timer_abs_msb+0x2>
     ffa:	b0 93 0a 05 	sts	0x050A, r27	; 0x80050a <g_timer_abs_msb+0x3>

	if (g_status.isAnimationStopped && g_audio_out_loudness) {
     ffe:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <g_status>
    1002:	81 ff       	sbrs	r24, 1
    1004:	56 c0       	rjmp	.+172    	; 0x10b2 <__vector_13+0xf8>
    1006:	40 91 f7 04 	lds	r20, 0x04F7	; 0x8004f7 <g_audio_out_loudness>
    100a:	44 23       	and	r20, r20
    100c:	09 f4       	brne	.+2      	; 0x1010 <__vector_13+0x56>
    100e:	51 c0       	rjmp	.+162    	; 0x10b2 <__vector_13+0xf8>
		int16_t l_audio_pwm_inc = 3691 + (g_showData.clkState_phaseDeg100 >> 2);  // (880 Hz / 15625 Hz) * 16384 Steps * 8
    1010:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <g_showData+0x18>
    1014:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <g_showData+0x19>
    1018:	95 95       	asr	r25
    101a:	87 95       	ror	r24
    101c:	95 95       	asr	r25
    101e:	87 95       	ror	r24
    1020:	9c 01       	movw	r18, r24
    1022:	25 59       	subi	r18, 0x95	; 149
    1024:	31 4f       	sbci	r19, 0xF1	; 241

		/* Generate triangle signal */
		if (g_audio_pwm_ramp_dwn) {
    1026:	50 91 f4 04 	lds	r21, 0x04F4	; 0x8004f4 <g_audio_pwm_ramp_dwn>
    102a:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <g_audio_pwm_accu>
    102e:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <g_audio_pwm_accu+0x1>
    1032:	55 23       	and	r21, r21
    1034:	b1 f0       	breq	.+44     	; 0x1062 <__vector_13+0xa8>
			g_audio_pwm_accu -= l_audio_pwm_inc;
    1036:	82 1b       	sub	r24, r18
    1038:	93 0b       	sbc	r25, r19
    103a:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <g_audio_pwm_accu+0x1>
    103e:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <g_audio_pwm_accu>
			if (g_audio_pwm_accu <= -16383) {
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	20 ec       	ldi	r18, 0xC0	; 192
    1046:	92 07       	cpc	r25, r18
    1048:	14 f5       	brge	.+68     	; 0x108e <__vector_13+0xd4>
				g_audio_pwm_ramp_dwn = false;
    104a:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <g_audio_pwm_ramp_dwn>
				int16_t residue = -g_audio_pwm_accu - 16383;
				g_audio_pwm_accu = -16383 + residue;
    104e:	22 e0       	ldi	r18, 0x02	; 2
    1050:	30 e8       	ldi	r19, 0x80	; 128
    1052:	b9 01       	movw	r22, r18
    1054:	68 1b       	sub	r22, r24
    1056:	79 0b       	sbc	r23, r25
    1058:	70 93 f6 04 	sts	0x04F6, r23	; 0x8004f6 <g_audio_pwm_accu+0x1>
    105c:	60 93 f5 04 	sts	0x04F5, r22	; 0x8004f5 <g_audio_pwm_accu>
    1060:	16 c0       	rjmp	.+44     	; 0x108e <__vector_13+0xd4>
			}
		} else {
			g_audio_pwm_accu += l_audio_pwm_inc;
    1062:	82 0f       	add	r24, r18
    1064:	93 1f       	adc	r25, r19
    1066:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <g_audio_pwm_accu+0x1>
    106a:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <g_audio_pwm_accu>
			if (g_audio_pwm_accu >= +16383) {
    106e:	8f 3f       	cpi	r24, 0xFF	; 255
    1070:	7f e3       	ldi	r23, 0x3F	; 63
    1072:	97 07       	cpc	r25, r23
    1074:	64 f0       	brlt	.+24     	; 0x108e <__vector_13+0xd4>
				g_audio_pwm_ramp_dwn = true;
    1076:	21 e0       	ldi	r18, 0x01	; 1
    1078:	20 93 f4 04 	sts	0x04F4, r18	; 0x8004f4 <g_audio_pwm_ramp_dwn>
				int16_t residue = g_audio_pwm_accu - 16383;
				g_audio_pwm_accu = 16383 - residue;
    107c:	2e ef       	ldi	r18, 0xFE	; 254
    107e:	3f e7       	ldi	r19, 0x7F	; 127
    1080:	b9 01       	movw	r22, r18
    1082:	68 1b       	sub	r22, r24
    1084:	79 0b       	sbc	r23, r25
    1086:	70 93 f6 04 	sts	0x04F6, r23	; 0x8004f6 <g_audio_pwm_accu+0x1>
    108a:	60 93 f5 04 	sts	0x04F5, r22	; 0x8004f5 <g_audio_pwm_accu>
			}
		}

		int16_t audio_out = 256 + (g_audio_pwm_accu >> (15 - g_audio_out_loudness));  // 6 + 9
    108e:	2f e0       	ldi	r18, 0x0F	; 15
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	24 1b       	sub	r18, r20
    1094:	31 09       	sbc	r19, r1
    1096:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <g_audio_pwm_accu>
    109a:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <g_audio_pwm_accu+0x1>
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <__vector_13+0xea>
    10a0:	95 95       	asr	r25
    10a2:	87 95       	ror	r24
    10a4:	2a 95       	dec	r18
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <__vector_13+0xe6>
    10a8:	93 95       	inc	r25
		OCR1AH = (uint8_t) (audio_out >> 8);					// 9 bit
    10aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL = (uint8_t) (audio_out & 0xff);
    10ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	cpu_irq_enable();
	//adc_start_conversion();						// TODO ???
	enter_sleep(SLEEP_MODE_ADC);
	adc_disable_interrupt();
#endif
}
    10b2:	bf 91       	pop	r27
    10b4:	af 91       	pop	r26
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	7f 91       	pop	r23
    10bc:	6f 91       	pop	r22
    10be:	5f 91       	pop	r21
    10c0:	4f 91       	pop	r20
    10c2:	3f 91       	pop	r19
    10c4:	2f 91       	pop	r18
    10c6:	0f 90       	pop	r0
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	0f 90       	pop	r0
    10cc:	1f 90       	pop	r1
    10ce:	18 95       	reti

000010d0 <__vector_16>:
{	/* TIMER 0 COMP-B */
	s_bad_interrupt();
}

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
	cpu_irq_enable();

	enter_sleep(SLEEP_MODE_ADC);
	adc_disable_interrupt();
#endif
}
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f 90       	pop	r0
    10e0:	1f 90       	pop	r1
    10e2:	18 95       	reti

000010e4 <__vector_21>:
{	/* USART, TX - Complete */
	s_bad_interrupt();
}

ISR(__vector_21, ISR_BLOCK)
{	/* ADC */
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	8f 92       	push	r8
    10f0:	9f 92       	push	r9
    10f2:	af 92       	push	r10
    10f4:	bf 92       	push	r11
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	2f 93       	push	r18
    1100:	3f 93       	push	r19
    1102:	4f 93       	push	r20
    1104:	5f 93       	push	r21
    1106:	6f 93       	push	r22
    1108:	7f 93       	push	r23
    110a:	8f 93       	push	r24
    110c:	9f 93       	push	r25
    110e:	af 93       	push	r26
    1110:	bf 93       	push	r27
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	ef 93       	push	r30
    1118:	ff 93       	push	r31
	uint16_t adc_val = ADCL | (ADCH << 8);
    111a:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    111e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	ea 01       	movw	r28, r20
    1126:	d8 2b       	or	r29, r24
	uint8_t  reason  = g_adc_state;

	//TIFR1 |= _BV(TOV1);							// Reset Timer1 overflow status bit (when no ISR for TOV1 activated!)

	switch (reason) {
    1128:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <g_adc_state>
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	61 f0       	breq	.+24     	; 0x1148 <__vector_21+0x64>
    1130:	38 f0       	brcs	.+14     	; 0x1140 <__vector_21+0x5c>
    1132:	82 30       	cpi	r24, 0x02	; 2
    1134:	09 f4       	brne	.+2      	; 0x1138 <__vector_21+0x54>
    1136:	4c c0       	rjmp	.+152    	; 0x11d0 <__vector_21+0xec>
    1138:	83 30       	cpi	r24, 0x03	; 3
    113a:	09 f4       	brne	.+2      	; 0x113e <__vector_21+0x5a>
    113c:	4d c0       	rjmp	.+154    	; 0x11d8 <__vector_21+0xf4>
    113e:	89 c0       	rjmp	.+274    	; 0x1252 <__vector_21+0x16e>
		case ADC_STATE_PRE_LDR:
			// drop one ADC value after switching MUX
			g_adc_state = ADC_STATE_VLD_LDR;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <g_adc_state>
		break;
    1146:	8a c0       	rjmp	.+276    	; 0x125c <__vector_21+0x178>

		case ADC_STATE_VLD_LDR:
		{
			/* Low pass filtering and enhancing the data depth */
			float l_adc_light = g_adc_light;
    1148:	c0 90 02 05 	lds	r12, 0x0502	; 0x800502 <g_adc_light>
    114c:	d0 90 03 05 	lds	r13, 0x0503	; 0x800503 <g_adc_light+0x1>
    1150:	e0 90 04 05 	lds	r14, 0x0504	; 0x800504 <g_adc_light+0x2>
    1154:	f0 90 05 05 	lds	r15, 0x0505	; 0x800505 <g_adc_light+0x3>
			cpu_irq_enable();
    1158:	78 94       	sei
			float calc = l_adc_light ?  0.980f * l_adc_light + 0.020f * adc_val : adc_val;	// load with initial value if none is set before
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	c7 01       	movw	r24, r14
    1162:	b6 01       	movw	r22, r12
    1164:	0e 94 df 20 	call	0x41be	; 0x41be <__cmpsf2>
    1168:	ae 01       	movw	r20, r28
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	88 23       	and	r24, r24
    1170:	d9 f0       	breq	.+54     	; 0x11a8 <__vector_21+0xc4>
    1172:	cb 01       	movw	r24, r22
    1174:	ba 01       	movw	r22, r20
    1176:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <__floatunsisf>
    117a:	2a e0       	ldi	r18, 0x0A	; 10
    117c:	37 ed       	ldi	r19, 0xD7	; 215
    117e:	43 ea       	ldi	r20, 0xA3	; 163
    1180:	5c e3       	ldi	r21, 0x3C	; 60
    1182:	0e 94 85 22 	call	0x450a	; 0x450a <__mulsf3>
    1186:	4b 01       	movw	r8, r22
    1188:	5c 01       	movw	r10, r24
    118a:	28 e4       	ldi	r18, 0x48	; 72
    118c:	31 ee       	ldi	r19, 0xE1	; 225
    118e:	4a e7       	ldi	r20, 0x7A	; 122
    1190:	5f e3       	ldi	r21, 0x3F	; 63
    1192:	c7 01       	movw	r24, r14
    1194:	b6 01       	movw	r22, r12
    1196:	0e 94 85 22 	call	0x450a	; 0x450a <__mulsf3>
    119a:	9b 01       	movw	r18, r22
    119c:	ac 01       	movw	r20, r24
    119e:	c5 01       	movw	r24, r10
    11a0:	b4 01       	movw	r22, r8
    11a2:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__addsf3>
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <__vector_21+0xcc>
    11a8:	cb 01       	movw	r24, r22
    11aa:	ba 01       	movw	r22, r20
    11ac:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <__floatunsisf>
			cpu_irq_disable();
    11b0:	f8 94       	cli
			g_adc_light = calc;
    11b2:	60 93 02 05 	sts	0x0502, r22	; 0x800502 <g_adc_light>
    11b6:	70 93 03 05 	sts	0x0503, r23	; 0x800503 <g_adc_light+0x1>
    11ba:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <g_adc_light+0x2>
    11be:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <g_adc_light+0x3>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    11c2:	88 ec       	ldi	r24, 0xC8	; 200
    11c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

			adc_set_admux(ADC_MUX_TEMPSENSE | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
			g_adc_state = ADC_STATE_PRE_TEMP;
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <g_adc_state>
		}
		break;
    11ce:	46 c0       	rjmp	.+140    	; 0x125c <__vector_21+0x178>

		case ADC_STATE_PRE_TEMP:
			// drop one ADC value after switching MUX
			g_adc_state = ADC_STATE_VLD_TEMP;
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <g_adc_state>
		break;
    11d6:	42 c0       	rjmp	.+132    	; 0x125c <__vector_21+0x178>

		case ADC_STATE_VLD_TEMP:
		{
			/* Low pass filtering and enhancing the data depth */
			float l_adc_temp  = g_adc_temp;
    11d8:	c0 90 fe 04 	lds	r12, 0x04FE	; 0x8004fe <g_adc_temp>
    11dc:	d0 90 ff 04 	lds	r13, 0x04FF	; 0x8004ff <g_adc_temp+0x1>
    11e0:	e0 90 00 05 	lds	r14, 0x0500	; 0x800500 <g_adc_temp+0x2>
    11e4:	f0 90 01 05 	lds	r15, 0x0501	; 0x800501 <g_adc_temp+0x3>
			cpu_irq_enable();
    11e8:	78 94       	sei
			float calc = l_adc_temp ?  0.998f * l_adc_temp  + 0.002f * adc_val : adc_val;	// load with initial value if none is set before
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	a9 01       	movw	r20, r18
    11f0:	c7 01       	movw	r24, r14
    11f2:	b6 01       	movw	r22, r12
    11f4:	0e 94 df 20 	call	0x41be	; 0x41be <__cmpsf2>
    11f8:	ae 01       	movw	r20, r28
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	88 23       	and	r24, r24
    1200:	d9 f0       	breq	.+54     	; 0x1238 <__vector_21+0x154>
    1202:	cb 01       	movw	r24, r22
    1204:	ba 01       	movw	r22, r20
    1206:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <__floatunsisf>
    120a:	2f e6       	ldi	r18, 0x6F	; 111
    120c:	32 e1       	ldi	r19, 0x12	; 18
    120e:	43 e0       	ldi	r20, 0x03	; 3
    1210:	5b e3       	ldi	r21, 0x3B	; 59
    1212:	0e 94 85 22 	call	0x450a	; 0x450a <__mulsf3>
    1216:	4b 01       	movw	r8, r22
    1218:	5c 01       	movw	r10, r24
    121a:	2e ee       	ldi	r18, 0xEE	; 238
    121c:	3c e7       	ldi	r19, 0x7C	; 124
    121e:	4f e7       	ldi	r20, 0x7F	; 127
    1220:	5f e3       	ldi	r21, 0x3F	; 63
    1222:	c7 01       	movw	r24, r14
    1224:	b6 01       	movw	r22, r12
    1226:	0e 94 85 22 	call	0x450a	; 0x450a <__mulsf3>
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	c5 01       	movw	r24, r10
    1230:	b4 01       	movw	r22, r8
    1232:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__addsf3>
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <__vector_21+0x15c>
    1238:	cb 01       	movw	r24, r22
    123a:	ba 01       	movw	r22, r20
    123c:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <__floatunsisf>
			cpu_irq_disable();
    1240:	f8 94       	cli
			g_adc_temp = calc;
    1242:	60 93 fe 04 	sts	0x04FE, r22	; 0x8004fe <g_adc_temp>
    1246:	70 93 ff 04 	sts	0x04FF, r23	; 0x8004ff <g_adc_temp+0x1>
    124a:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <g_adc_temp+0x2>
    124e:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <g_adc_temp+0x3>
    1252:	80 ec       	ldi	r24, 0xC0	; 192
    1254:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		}
			// fall-through.
		default:
			adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
			g_adc_state = ADC_STATE_PRE_LDR;
    1258:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <g_adc_state>
	}
}
    125c:	ff 91       	pop	r31
    125e:	ef 91       	pop	r30
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	bf 90       	pop	r11
    1282:	af 90       	pop	r10
    1284:	9f 90       	pop	r9
    1286:	8f 90       	pop	r8
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <__vector_24>:
{	/* ANALOG COMP */
	s_bad_interrupt();
}

ISR(__vector_24, ISR_BLOCK)
{	/* TWI */
    1292:	1f 92       	push	r1
    1294:	0f 92       	push	r0
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	0f 92       	push	r0
    129a:	11 24       	eor	r1, r1
    129c:	2f 93       	push	r18
    129e:	3f 93       	push	r19
    12a0:	4f 93       	push	r20
    12a2:	5f 93       	push	r21
    12a4:	6f 93       	push	r22
    12a6:	7f 93       	push	r23
    12a8:	8f 93       	push	r24
    12aa:	9f 93       	push	r25
    12ac:	af 93       	push	r26
    12ae:	bf 93       	push	r27
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	ef 93       	push	r30
    12b6:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b11111 << TWS3);
    12b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	uint8_t twd = TWDR;
    12bc:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	uint8_t twcr_cur = TWCR;
    12c0:	cc eb       	ldi	r28, 0xBC	; 188
    12c2:	d0 e0       	ldi	r29, 0x00	; 0
    12c4:	48 81       	ld	r20, Y

	uint8_t twcr_new = __vector_24__bottom(tws, twd, twcr_cur);
    12c6:	88 7f       	andi	r24, 0xF8	; 248
    12c8:	0e 94 af 1b 	call	0x375e	; 0x375e <__vector_24__bottom>
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
    12cc:	85 68       	ori	r24, 0x85	; 133
    12ce:	88 83       	st	Y, r24
}
    12d0:	ff 91       	pop	r31
    12d2:	ef 91       	pop	r30
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	0f 90       	pop	r0
    12f2:	1f 90       	pop	r1
    12f4:	18 95       	reti

000012f6 <__vector_25>:

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
    12f6:	1f 92       	push	r1
    12f8:	0f 92       	push	r0
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	0f 92       	push	r0
    12fe:	11 24       	eor	r1, r1
    1300:	2f 93       	push	r18
    1302:	3f 93       	push	r19
    1304:	4f 93       	push	r20
    1306:	5f 93       	push	r21
    1308:	6f 93       	push	r22
    130a:	7f 93       	push	r23
    130c:	8f 93       	push	r24
    130e:	9f 93       	push	r25
    1310:	af 93       	push	r26
    1312:	bf 93       	push	r27
    1314:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1316:	ff 93       	push	r31
}

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
	s_bad_interrupt();
}
    1318:	b3 dd       	rcall	.-1178   	; 0xe80 <asm_break>
    131a:	ff 91       	pop	r31
    131c:	ef 91       	pop	r30
    131e:	bf 91       	pop	r27
    1320:	af 91       	pop	r26
    1322:	9f 91       	pop	r25
    1324:	8f 91       	pop	r24
    1326:	7f 91       	pop	r23
    1328:	6f 91       	pop	r22
    132a:	5f 91       	pop	r21
    132c:	4f 91       	pop	r20
    132e:	3f 91       	pop	r19
    1330:	2f 91       	pop	r18
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti

0000133c <__vector_23>:
    133c:	1f 92       	push	r1
    133e:	0f 92       	push	r0
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	0f 92       	push	r0
    1344:	11 24       	eor	r1, r1
    1346:	2f 93       	push	r18
    1348:	3f 93       	push	r19
    134a:	4f 93       	push	r20
    134c:	5f 93       	push	r21
    134e:	6f 93       	push	r22
    1350:	7f 93       	push	r23
    1352:	8f 93       	push	r24
    1354:	9f 93       	push	r25
    1356:	af 93       	push	r26
    1358:	bf 93       	push	r27
    135a:	ef 93       	push	r30
    135c:	ff 93       	push	r31
    135e:	cb df       	rcall	.-106    	; 0x12f6 <__vector_25>
    1360:	ff 91       	pop	r31
    1362:	ef 91       	pop	r30
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	4f 91       	pop	r20
    1374:	3f 91       	pop	r19
    1376:	2f 91       	pop	r18
    1378:	0f 90       	pop	r0
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	0f 90       	pop	r0
    137e:	1f 90       	pop	r1
    1380:	18 95       	reti

00001382 <__vector_22>:
    1382:	1f 92       	push	r1
    1384:	0f 92       	push	r0
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	0f 92       	push	r0
    138a:	11 24       	eor	r1, r1
    138c:	2f 93       	push	r18
    138e:	3f 93       	push	r19
    1390:	4f 93       	push	r20
    1392:	5f 93       	push	r21
    1394:	6f 93       	push	r22
    1396:	7f 93       	push	r23
    1398:	8f 93       	push	r24
    139a:	9f 93       	push	r25
    139c:	af 93       	push	r26
    139e:	bf 93       	push	r27
    13a0:	ef 93       	push	r30
    13a2:	ff 93       	push	r31
    13a4:	a8 df       	rcall	.-176    	; 0x12f6 <__vector_25>
    13a6:	ff 91       	pop	r31
    13a8:	ef 91       	pop	r30
    13aa:	bf 91       	pop	r27
    13ac:	af 91       	pop	r26
    13ae:	9f 91       	pop	r25
    13b0:	8f 91       	pop	r24
    13b2:	7f 91       	pop	r23
    13b4:	6f 91       	pop	r22
    13b6:	5f 91       	pop	r21
    13b8:	4f 91       	pop	r20
    13ba:	3f 91       	pop	r19
    13bc:	2f 91       	pop	r18
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <__vector_20>:
    13c8:	1f 92       	push	r1
    13ca:	0f 92       	push	r0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
    13d2:	2f 93       	push	r18
    13d4:	3f 93       	push	r19
    13d6:	4f 93       	push	r20
    13d8:	5f 93       	push	r21
    13da:	6f 93       	push	r22
    13dc:	7f 93       	push	r23
    13de:	8f 93       	push	r24
    13e0:	9f 93       	push	r25
    13e2:	af 93       	push	r26
    13e4:	bf 93       	push	r27
    13e6:	ef 93       	push	r30
    13e8:	ff 93       	push	r31
    13ea:	85 df       	rcall	.-246    	; 0x12f6 <__vector_25>
    13ec:	ff 91       	pop	r31
    13ee:	ef 91       	pop	r30
    13f0:	bf 91       	pop	r27
    13f2:	af 91       	pop	r26
    13f4:	9f 91       	pop	r25
    13f6:	8f 91       	pop	r24
    13f8:	7f 91       	pop	r23
    13fa:	6f 91       	pop	r22
    13fc:	5f 91       	pop	r21
    13fe:	4f 91       	pop	r20
    1400:	3f 91       	pop	r19
    1402:	2f 91       	pop	r18
    1404:	0f 90       	pop	r0
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	0f 90       	pop	r0
    140a:	1f 90       	pop	r1
    140c:	18 95       	reti

0000140e <__vector_19>:
    140e:	1f 92       	push	r1
    1410:	0f 92       	push	r0
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	0f 92       	push	r0
    1416:	11 24       	eor	r1, r1
    1418:	2f 93       	push	r18
    141a:	3f 93       	push	r19
    141c:	4f 93       	push	r20
    141e:	5f 93       	push	r21
    1420:	6f 93       	push	r22
    1422:	7f 93       	push	r23
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
    1430:	62 df       	rcall	.-316    	; 0x12f6 <__vector_25>
    1432:	ff 91       	pop	r31
    1434:	ef 91       	pop	r30
    1436:	bf 91       	pop	r27
    1438:	af 91       	pop	r26
    143a:	9f 91       	pop	r25
    143c:	8f 91       	pop	r24
    143e:	7f 91       	pop	r23
    1440:	6f 91       	pop	r22
    1442:	5f 91       	pop	r21
    1444:	4f 91       	pop	r20
    1446:	3f 91       	pop	r19
    1448:	2f 91       	pop	r18
    144a:	0f 90       	pop	r0
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	0f 90       	pop	r0
    1450:	1f 90       	pop	r1
    1452:	18 95       	reti

00001454 <__vector_18>:
    1454:	1f 92       	push	r1
    1456:	0f 92       	push	r0
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	0f 92       	push	r0
    145c:	11 24       	eor	r1, r1
    145e:	2f 93       	push	r18
    1460:	3f 93       	push	r19
    1462:	4f 93       	push	r20
    1464:	5f 93       	push	r21
    1466:	6f 93       	push	r22
    1468:	7f 93       	push	r23
    146a:	8f 93       	push	r24
    146c:	9f 93       	push	r25
    146e:	af 93       	push	r26
    1470:	bf 93       	push	r27
    1472:	ef 93       	push	r30
    1474:	ff 93       	push	r31
    1476:	3f df       	rcall	.-386    	; 0x12f6 <__vector_25>
    1478:	ff 91       	pop	r31
    147a:	ef 91       	pop	r30
    147c:	bf 91       	pop	r27
    147e:	af 91       	pop	r26
    1480:	9f 91       	pop	r25
    1482:	8f 91       	pop	r24
    1484:	7f 91       	pop	r23
    1486:	6f 91       	pop	r22
    1488:	5f 91       	pop	r21
    148a:	4f 91       	pop	r20
    148c:	3f 91       	pop	r19
    148e:	2f 91       	pop	r18
    1490:	0f 90       	pop	r0
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	0f 90       	pop	r0
    1496:	1f 90       	pop	r1
    1498:	18 95       	reti

0000149a <__vector_17>:
    149a:	1f 92       	push	r1
    149c:	0f 92       	push	r0
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	0f 92       	push	r0
    14a2:	11 24       	eor	r1, r1
    14a4:	2f 93       	push	r18
    14a6:	3f 93       	push	r19
    14a8:	4f 93       	push	r20
    14aa:	5f 93       	push	r21
    14ac:	6f 93       	push	r22
    14ae:	7f 93       	push	r23
    14b0:	8f 93       	push	r24
    14b2:	9f 93       	push	r25
    14b4:	af 93       	push	r26
    14b6:	bf 93       	push	r27
    14b8:	ef 93       	push	r30
    14ba:	ff 93       	push	r31
    14bc:	1c df       	rcall	.-456    	; 0x12f6 <__vector_25>
    14be:	ff 91       	pop	r31
    14c0:	ef 91       	pop	r30
    14c2:	bf 91       	pop	r27
    14c4:	af 91       	pop	r26
    14c6:	9f 91       	pop	r25
    14c8:	8f 91       	pop	r24
    14ca:	7f 91       	pop	r23
    14cc:	6f 91       	pop	r22
    14ce:	5f 91       	pop	r21
    14d0:	4f 91       	pop	r20
    14d2:	3f 91       	pop	r19
    14d4:	2f 91       	pop	r18
    14d6:	0f 90       	pop	r0
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	0f 90       	pop	r0
    14dc:	1f 90       	pop	r1
    14de:	18 95       	reti

000014e0 <__vector_15>:
    14e0:	1f 92       	push	r1
    14e2:	0f 92       	push	r0
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	0f 92       	push	r0
    14e8:	11 24       	eor	r1, r1
    14ea:	2f 93       	push	r18
    14ec:	3f 93       	push	r19
    14ee:	4f 93       	push	r20
    14f0:	5f 93       	push	r21
    14f2:	6f 93       	push	r22
    14f4:	7f 93       	push	r23
    14f6:	8f 93       	push	r24
    14f8:	9f 93       	push	r25
    14fa:	af 93       	push	r26
    14fc:	bf 93       	push	r27
    14fe:	ef 93       	push	r30
    1500:	ff 93       	push	r31
    1502:	f9 de       	rcall	.-526    	; 0x12f6 <__vector_25>
    1504:	ff 91       	pop	r31
    1506:	ef 91       	pop	r30
    1508:	bf 91       	pop	r27
    150a:	af 91       	pop	r26
    150c:	9f 91       	pop	r25
    150e:	8f 91       	pop	r24
    1510:	7f 91       	pop	r23
    1512:	6f 91       	pop	r22
    1514:	5f 91       	pop	r21
    1516:	4f 91       	pop	r20
    1518:	3f 91       	pop	r19
    151a:	2f 91       	pop	r18
    151c:	0f 90       	pop	r0
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	0f 90       	pop	r0
    1522:	1f 90       	pop	r1
    1524:	18 95       	reti

00001526 <__vector_14>:
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	2f 93       	push	r18
    1532:	3f 93       	push	r19
    1534:	4f 93       	push	r20
    1536:	5f 93       	push	r21
    1538:	6f 93       	push	r22
    153a:	7f 93       	push	r23
    153c:	8f 93       	push	r24
    153e:	9f 93       	push	r25
    1540:	af 93       	push	r26
    1542:	bf 93       	push	r27
    1544:	ef 93       	push	r30
    1546:	ff 93       	push	r31
    1548:	d6 de       	rcall	.-596    	; 0x12f6 <__vector_25>
    154a:	ff 91       	pop	r31
    154c:	ef 91       	pop	r30
    154e:	bf 91       	pop	r27
    1550:	af 91       	pop	r26
    1552:	9f 91       	pop	r25
    1554:	8f 91       	pop	r24
    1556:	7f 91       	pop	r23
    1558:	6f 91       	pop	r22
    155a:	5f 91       	pop	r21
    155c:	4f 91       	pop	r20
    155e:	3f 91       	pop	r19
    1560:	2f 91       	pop	r18
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	0f 90       	pop	r0
    1568:	1f 90       	pop	r1
    156a:	18 95       	reti

0000156c <__vector_12>:
    156c:	1f 92       	push	r1
    156e:	0f 92       	push	r0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	0f 92       	push	r0
    1574:	11 24       	eor	r1, r1
    1576:	2f 93       	push	r18
    1578:	3f 93       	push	r19
    157a:	4f 93       	push	r20
    157c:	5f 93       	push	r21
    157e:	6f 93       	push	r22
    1580:	7f 93       	push	r23
    1582:	8f 93       	push	r24
    1584:	9f 93       	push	r25
    1586:	af 93       	push	r26
    1588:	bf 93       	push	r27
    158a:	ef 93       	push	r30
    158c:	ff 93       	push	r31
    158e:	b3 de       	rcall	.-666    	; 0x12f6 <__vector_25>
    1590:	ff 91       	pop	r31
    1592:	ef 91       	pop	r30
    1594:	bf 91       	pop	r27
    1596:	af 91       	pop	r26
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	7f 91       	pop	r23
    159e:	6f 91       	pop	r22
    15a0:	5f 91       	pop	r21
    15a2:	4f 91       	pop	r20
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <__vector_11>:
    15b2:	1f 92       	push	r1
    15b4:	0f 92       	push	r0
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	0f 92       	push	r0
    15ba:	11 24       	eor	r1, r1
    15bc:	2f 93       	push	r18
    15be:	3f 93       	push	r19
    15c0:	4f 93       	push	r20
    15c2:	5f 93       	push	r21
    15c4:	6f 93       	push	r22
    15c6:	7f 93       	push	r23
    15c8:	8f 93       	push	r24
    15ca:	9f 93       	push	r25
    15cc:	af 93       	push	r26
    15ce:	bf 93       	push	r27
    15d0:	ef 93       	push	r30
    15d2:	ff 93       	push	r31
    15d4:	90 de       	rcall	.-736    	; 0x12f6 <__vector_25>
    15d6:	ff 91       	pop	r31
    15d8:	ef 91       	pop	r30
    15da:	bf 91       	pop	r27
    15dc:	af 91       	pop	r26
    15de:	9f 91       	pop	r25
    15e0:	8f 91       	pop	r24
    15e2:	7f 91       	pop	r23
    15e4:	6f 91       	pop	r22
    15e6:	5f 91       	pop	r21
    15e8:	4f 91       	pop	r20
    15ea:	3f 91       	pop	r19
    15ec:	2f 91       	pop	r18
    15ee:	0f 90       	pop	r0
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	0f 90       	pop	r0
    15f4:	1f 90       	pop	r1
    15f6:	18 95       	reti

000015f8 <__vector_10>:
    15f8:	1f 92       	push	r1
    15fa:	0f 92       	push	r0
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	0f 92       	push	r0
    1600:	11 24       	eor	r1, r1
    1602:	2f 93       	push	r18
    1604:	3f 93       	push	r19
    1606:	4f 93       	push	r20
    1608:	5f 93       	push	r21
    160a:	6f 93       	push	r22
    160c:	7f 93       	push	r23
    160e:	8f 93       	push	r24
    1610:	9f 93       	push	r25
    1612:	af 93       	push	r26
    1614:	bf 93       	push	r27
    1616:	ef 93       	push	r30
    1618:	ff 93       	push	r31
    161a:	6d de       	rcall	.-806    	; 0x12f6 <__vector_25>
    161c:	ff 91       	pop	r31
    161e:	ef 91       	pop	r30
    1620:	bf 91       	pop	r27
    1622:	af 91       	pop	r26
    1624:	9f 91       	pop	r25
    1626:	8f 91       	pop	r24
    1628:	7f 91       	pop	r23
    162a:	6f 91       	pop	r22
    162c:	5f 91       	pop	r21
    162e:	4f 91       	pop	r20
    1630:	3f 91       	pop	r19
    1632:	2f 91       	pop	r18
    1634:	0f 90       	pop	r0
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	0f 90       	pop	r0
    163a:	1f 90       	pop	r1
    163c:	18 95       	reti

0000163e <__vector_8>:
    163e:	1f 92       	push	r1
    1640:	0f 92       	push	r0
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	0f 92       	push	r0
    1646:	11 24       	eor	r1, r1
    1648:	2f 93       	push	r18
    164a:	3f 93       	push	r19
    164c:	4f 93       	push	r20
    164e:	5f 93       	push	r21
    1650:	6f 93       	push	r22
    1652:	7f 93       	push	r23
    1654:	8f 93       	push	r24
    1656:	9f 93       	push	r25
    1658:	af 93       	push	r26
    165a:	bf 93       	push	r27
    165c:	ef 93       	push	r30
    165e:	ff 93       	push	r31
    1660:	4a de       	rcall	.-876    	; 0x12f6 <__vector_25>
    1662:	ff 91       	pop	r31
    1664:	ef 91       	pop	r30
    1666:	bf 91       	pop	r27
    1668:	af 91       	pop	r26
    166a:	9f 91       	pop	r25
    166c:	8f 91       	pop	r24
    166e:	7f 91       	pop	r23
    1670:	6f 91       	pop	r22
    1672:	5f 91       	pop	r21
    1674:	4f 91       	pop	r20
    1676:	3f 91       	pop	r19
    1678:	2f 91       	pop	r18
    167a:	0f 90       	pop	r0
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	0f 90       	pop	r0
    1680:	1f 90       	pop	r1
    1682:	18 95       	reti

00001684 <__vector_7>:
    1684:	1f 92       	push	r1
    1686:	0f 92       	push	r0
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	0f 92       	push	r0
    168c:	11 24       	eor	r1, r1
    168e:	2f 93       	push	r18
    1690:	3f 93       	push	r19
    1692:	4f 93       	push	r20
    1694:	5f 93       	push	r21
    1696:	6f 93       	push	r22
    1698:	7f 93       	push	r23
    169a:	8f 93       	push	r24
    169c:	9f 93       	push	r25
    169e:	af 93       	push	r26
    16a0:	bf 93       	push	r27
    16a2:	ef 93       	push	r30
    16a4:	ff 93       	push	r31
    16a6:	27 de       	rcall	.-946    	; 0x12f6 <__vector_25>
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	bf 91       	pop	r27
    16ae:	af 91       	pop	r26
    16b0:	9f 91       	pop	r25
    16b2:	8f 91       	pop	r24
    16b4:	7f 91       	pop	r23
    16b6:	6f 91       	pop	r22
    16b8:	5f 91       	pop	r21
    16ba:	4f 91       	pop	r20
    16bc:	3f 91       	pop	r19
    16be:	2f 91       	pop	r18
    16c0:	0f 90       	pop	r0
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	0f 90       	pop	r0
    16c6:	1f 90       	pop	r1
    16c8:	18 95       	reti

000016ca <__vector_6>:
    16ca:	1f 92       	push	r1
    16cc:	0f 92       	push	r0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	0f 92       	push	r0
    16d2:	11 24       	eor	r1, r1
    16d4:	2f 93       	push	r18
    16d6:	3f 93       	push	r19
    16d8:	4f 93       	push	r20
    16da:	5f 93       	push	r21
    16dc:	6f 93       	push	r22
    16de:	7f 93       	push	r23
    16e0:	8f 93       	push	r24
    16e2:	9f 93       	push	r25
    16e4:	af 93       	push	r26
    16e6:	bf 93       	push	r27
    16e8:	ef 93       	push	r30
    16ea:	ff 93       	push	r31
    16ec:	04 de       	rcall	.-1016   	; 0x12f6 <__vector_25>
    16ee:	ff 91       	pop	r31
    16f0:	ef 91       	pop	r30
    16f2:	bf 91       	pop	r27
    16f4:	af 91       	pop	r26
    16f6:	9f 91       	pop	r25
    16f8:	8f 91       	pop	r24
    16fa:	7f 91       	pop	r23
    16fc:	6f 91       	pop	r22
    16fe:	5f 91       	pop	r21
    1700:	4f 91       	pop	r20
    1702:	3f 91       	pop	r19
    1704:	2f 91       	pop	r18
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	0f 90       	pop	r0
    170c:	1f 90       	pop	r1
    170e:	18 95       	reti

00001710 <__vector_5>:
    1710:	1f 92       	push	r1
    1712:	0f 92       	push	r0
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	0f 92       	push	r0
    1718:	11 24       	eor	r1, r1
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
    1732:	e1 dd       	rcall	.-1086   	; 0x12f6 <__vector_25>
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	7f 91       	pop	r23
    1742:	6f 91       	pop	r22
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	0f 90       	pop	r0
    1752:	1f 90       	pop	r1
    1754:	18 95       	reti

00001756 <__vector_4>:
    1756:	1f 92       	push	r1
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
    1778:	be dd       	rcall	.-1156   	; 0x12f6 <__vector_25>
    177a:	ff 91       	pop	r31
    177c:	ef 91       	pop	r30
    177e:	bf 91       	pop	r27
    1780:	af 91       	pop	r26
    1782:	9f 91       	pop	r25
    1784:	8f 91       	pop	r24
    1786:	7f 91       	pop	r23
    1788:	6f 91       	pop	r22
    178a:	5f 91       	pop	r21
    178c:	4f 91       	pop	r20
    178e:	3f 91       	pop	r19
    1790:	2f 91       	pop	r18
    1792:	0f 90       	pop	r0
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	0f 90       	pop	r0
    1798:	1f 90       	pop	r1
    179a:	18 95       	reti

0000179c <__vector_3>:
    179c:	1f 92       	push	r1
    179e:	0f 92       	push	r0
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	0f 92       	push	r0
    17a4:	11 24       	eor	r1, r1
    17a6:	2f 93       	push	r18
    17a8:	3f 93       	push	r19
    17aa:	4f 93       	push	r20
    17ac:	5f 93       	push	r21
    17ae:	6f 93       	push	r22
    17b0:	7f 93       	push	r23
    17b2:	8f 93       	push	r24
    17b4:	9f 93       	push	r25
    17b6:	af 93       	push	r26
    17b8:	bf 93       	push	r27
    17ba:	ef 93       	push	r30
    17bc:	ff 93       	push	r31
    17be:	9b dd       	rcall	.-1226   	; 0x12f6 <__vector_25>
    17c0:	ff 91       	pop	r31
    17c2:	ef 91       	pop	r30
    17c4:	bf 91       	pop	r27
    17c6:	af 91       	pop	r26
    17c8:	9f 91       	pop	r25
    17ca:	8f 91       	pop	r24
    17cc:	7f 91       	pop	r23
    17ce:	6f 91       	pop	r22
    17d0:	5f 91       	pop	r21
    17d2:	4f 91       	pop	r20
    17d4:	3f 91       	pop	r19
    17d6:	2f 91       	pop	r18
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	0f 90       	pop	r0
    17de:	1f 90       	pop	r1
    17e0:	18 95       	reti

000017e2 <__vector_2>:
    17e2:	1f 92       	push	r1
    17e4:	0f 92       	push	r0
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	0f 92       	push	r0
    17ea:	11 24       	eor	r1, r1
    17ec:	2f 93       	push	r18
    17ee:	3f 93       	push	r19
    17f0:	4f 93       	push	r20
    17f2:	5f 93       	push	r21
    17f4:	6f 93       	push	r22
    17f6:	7f 93       	push	r23
    17f8:	8f 93       	push	r24
    17fa:	9f 93       	push	r25
    17fc:	af 93       	push	r26
    17fe:	bf 93       	push	r27
    1800:	ef 93       	push	r30
    1802:	ff 93       	push	r31
    1804:	78 dd       	rcall	.-1296   	; 0x12f6 <__vector_25>
    1806:	ff 91       	pop	r31
    1808:	ef 91       	pop	r30
    180a:	bf 91       	pop	r27
    180c:	af 91       	pop	r26
    180e:	9f 91       	pop	r25
    1810:	8f 91       	pop	r24
    1812:	7f 91       	pop	r23
    1814:	6f 91       	pop	r22
    1816:	5f 91       	pop	r21
    1818:	4f 91       	pop	r20
    181a:	3f 91       	pop	r19
    181c:	2f 91       	pop	r18
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	0f 90       	pop	r0
    1824:	1f 90       	pop	r1
    1826:	18 95       	reti

00001828 <__vector_1>:
    1828:	1f 92       	push	r1
    182a:	0f 92       	push	r0
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	0f 92       	push	r0
    1830:	11 24       	eor	r1, r1
    1832:	2f 93       	push	r18
    1834:	3f 93       	push	r19
    1836:	4f 93       	push	r20
    1838:	5f 93       	push	r21
    183a:	6f 93       	push	r22
    183c:	7f 93       	push	r23
    183e:	8f 93       	push	r24
    1840:	9f 93       	push	r25
    1842:	af 93       	push	r26
    1844:	bf 93       	push	r27
    1846:	ef 93       	push	r30
    1848:	ff 93       	push	r31
    184a:	55 dd       	rcall	.-1366   	; 0x12f6 <__vector_25>
    184c:	ff 91       	pop	r31
    184e:	ef 91       	pop	r30
    1850:	bf 91       	pop	r27
    1852:	af 91       	pop	r26
    1854:	9f 91       	pop	r25
    1856:	8f 91       	pop	r24
    1858:	7f 91       	pop	r23
    185a:	6f 91       	pop	r22
    185c:	5f 91       	pop	r21
    185e:	4f 91       	pop	r20
    1860:	3f 91       	pop	r19
    1862:	2f 91       	pop	r18
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	0f 90       	pop	r0
    186a:	1f 90       	pop	r1
    186c:	18 95       	reti

0000186e <cpu_irq_save>:
}

void lcd_enable(uint8_t on)
{
	if (!on) {
		lcd_bus_write_cmd(0b10101110);									// Disable DC[2] (Display)
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	1f 92       	push	r1
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	8f b7       	in	r24, 0x3f	; 63
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	f8 94       	cli
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	0f 90       	pop	r0
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	08 95       	ret

00001888 <__portable_avr_delay_cycles>:
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <__portable_avr_delay_cycles+0xa>
    188a:	61 50       	subi	r22, 0x01	; 1
    188c:	71 09       	sbc	r23, r1
    188e:	81 09       	sbc	r24, r1
    1890:	91 09       	sbc	r25, r1
    1892:	61 15       	cp	r22, r1
    1894:	71 05       	cpc	r23, r1
    1896:	81 05       	cpc	r24, r1
    1898:	91 05       	cpc	r25, r1
    189a:	b9 f7       	brne	.-18     	; 0x188a <__portable_avr_delay_cycles+0x2>
    189c:	08 95       	ret

0000189e <lcd_bus_read_status>:
    189e:	e7 df       	rcall	.-50     	; 0x186e <cpu_irq_save>
    18a0:	98 2f       	mov	r25, r24
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	8b b9       	out	0x0b, r24	; 11
    18a6:	1a b8       	out	0x0a, r1	; 10
    18a8:	28 98       	cbi	0x05, 0	; 5
    18aa:	2c 9a       	sbi	0x05, 4	; 5
    18ac:	2d 9a       	sbi	0x05, 5	; 5
    18ae:	2d 98       	cbi	0x05, 5	; 5
    18b0:	89 b1       	in	r24, 0x09	; 9
    18b2:	9f bf       	out	0x3f, r25	; 63
    18b4:	08 95       	ret

000018b6 <lcd_bus_write_cmd>:
    18b6:	cf 93       	push	r28
    18b8:	c8 2f       	mov	r28, r24
    18ba:	d9 df       	rcall	.-78     	; 0x186e <cpu_irq_save>
    18bc:	cb b9       	out	0x0b, r28	; 11
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	9a b9       	out	0x0a, r25	; 10
    18c2:	28 98       	cbi	0x05, 0	; 5
    18c4:	2c 98       	cbi	0x05, 4	; 5
    18c6:	2d 9a       	sbi	0x05, 5	; 5
    18c8:	2d 98       	cbi	0x05, 5	; 5
    18ca:	8f bf       	out	0x3f, r24	; 63
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <lcd_bus_write_ram>:
    18d0:	cf 93       	push	r28
    18d2:	c8 2f       	mov	r28, r24
    18d4:	cc df       	rcall	.-104    	; 0x186e <cpu_irq_save>
    18d6:	cb b9       	out	0x0b, r28	; 11
    18d8:	9f ef       	ldi	r25, 0xFF	; 255
    18da:	9a b9       	out	0x0a, r25	; 10
    18dc:	28 9a       	sbi	0x05, 0	; 5
    18de:	2c 98       	cbi	0x05, 4	; 5
    18e0:	2d 9a       	sbi	0x05, 5	; 5
    18e2:	2d 98       	cbi	0x05, 5	; 5
    18e4:	8f bf       	out	0x3f, r24	; 63
    18e6:	cf 91       	pop	r28
    18e8:	08 95       	ret

000018ea <lcd_bus_read_ram>:
    18ea:	c1 df       	rcall	.-126    	; 0x186e <cpu_irq_save>
    18ec:	98 2f       	mov	r25, r24
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	8b b9       	out	0x0b, r24	; 11
    18f2:	1a b8       	out	0x0a, r1	; 10
    18f4:	28 9a       	sbi	0x05, 0	; 5
    18f6:	2c 9a       	sbi	0x05, 4	; 5
    18f8:	2d 9a       	sbi	0x05, 5	; 5
    18fa:	2d 98       	cbi	0x05, 5	; 5
    18fc:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <s_lcd_ram_read_nonvalid>
    1900:	88 23       	and	r24, r24
    1902:	19 f0       	breq	.+6      	; 0x190a <lcd_bus_read_ram+0x20>
    1904:	89 b1       	in	r24, 0x09	; 9
    1906:	2d 9a       	sbi	0x05, 5	; 5
    1908:	2d 98       	cbi	0x05, 5	; 5
    190a:	89 b1       	in	r24, 0x09	; 9
    190c:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <s_lcd_ram_read_nonvalid>
    1910:	9f bf       	out	0x3f, r25	; 63
    1912:	08 95       	ret

00001914 <lcd_contrast_update>:
    1914:	81 e8       	ldi	r24, 0x81	; 129
    1916:	cf df       	rcall	.-98     	; 0x18b6 <lcd_bus_write_cmd>
    1918:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <g_lcd_contrast_pm>
    191c:	8f 73       	andi	r24, 0x3F	; 63
    191e:	80 68       	ori	r24, 0x80	; 128
    1920:	ca cf       	rjmp	.-108    	; 0x18b6 <lcd_bus_write_cmd>

00001922 <lcd_enable.part.0>:
    1922:	8d e2       	ldi	r24, 0x2D	; 45
    1924:	c8 df       	rcall	.-112    	; 0x18b6 <lcd_bus_write_cmd>
    1926:	84 e2       	ldi	r24, 0x24	; 36
    1928:	c6 df       	rcall	.-116    	; 0x18b6 <lcd_bus_write_cmd>
    192a:	8a ee       	ldi	r24, 0xEA	; 234
    192c:	c4 df       	rcall	.-120    	; 0x18b6 <lcd_bus_write_cmd>
    192e:	f2 df       	rcall	.-28     	; 0x1914 <lcd_contrast_update>
    1930:	88 ec       	ldi	r24, 0xC8	; 200
    1932:	c1 df       	rcall	.-126    	; 0x18b6 <lcd_bus_write_cmd>
    1934:	88 e8       	ldi	r24, 0x88	; 136
    1936:	bf df       	rcall	.-130    	; 0x18b6 <lcd_bus_write_cmd>
    1938:	80 e4       	ldi	r24, 0x40	; 64
    193a:	bd df       	rcall	.-134    	; 0x18b6 <lcd_bus_write_cmd>
    193c:	80 e9       	ldi	r24, 0x90	; 144
    193e:	bb df       	rcall	.-138    	; 0x18b6 <lcd_bus_write_cmd>
    1940:	80 eb       	ldi	r24, 0xB0	; 176
    1942:	b9 df       	rcall	.-142    	; 0x18b6 <lcd_bus_write_cmd>
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	b7 df       	rcall	.-146    	; 0x18b6 <lcd_bus_write_cmd>
    1948:	80 e1       	ldi	r24, 0x10	; 16
    194a:	b5 df       	rcall	.-150    	; 0x18b6 <lcd_bus_write_cmd>
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <s_lcd_ram_read_nonvalid>
    1952:	8f ee       	ldi	r24, 0xEF	; 239
    1954:	b0 df       	rcall	.-160    	; 0x18b6 <lcd_bus_write_cmd>
    1956:	8e ee       	ldi	r24, 0xEE	; 238
    1958:	ae df       	rcall	.-164    	; 0x18b6 <lcd_bus_write_cmd>
    195a:	84 ea       	ldi	r24, 0xA4	; 164
    195c:	ac df       	rcall	.-168    	; 0x18b6 <lcd_bus_write_cmd>
    195e:	86 ea       	ldi	r24, 0xA6	; 166
    1960:	aa df       	rcall	.-172    	; 0x18b6 <lcd_bus_write_cmd>
    1962:	8f ea       	ldi	r24, 0xAF	; 175
    1964:	a8 cf       	rjmp	.-176    	; 0x18b6 <lcd_bus_write_cmd>

00001966 <lcd_page_set>:
	}
}

void lcd_page_set(uint8_t page)
{
	if ((0 <= page) && (page < GFX_MONO_LCD_PAGES)) {
    1966:	80 31       	cpi	r24, 0x10	; 16
    1968:	28 f4       	brcc	.+10     	; 0x1974 <lcd_page_set+0xe>
		lcd_bus_write_cmd(0b10110000 | page);					// Set Page Address
    196a:	80 6b       	ori	r24, 0xB0	; 176
    196c:	a4 df       	rcall	.-184    	; 0x18b6 <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <s_lcd_ram_read_nonvalid>
    1974:	08 95       	ret

00001976 <lcd_col_set>:
// hold a copy of a font size in the PROG memory section
SYSFONT_DEFINE_GLYPHS;


uint8_t lcd_bus_read_status(void)
{
    1976:	cf 93       	push	r28
    1978:	80 3f       	cpi	r24, 0xF0	; 240
    197a:	58 f4       	brcc	.+22     	; 0x1992 <lcd_col_set+0x1c>
    197c:	c8 2f       	mov	r28, r24
    197e:	8f 70       	andi	r24, 0x0F	; 15
    1980:	9a df       	rcall	.-204    	; 0x18b6 <lcd_bus_write_cmd>
    1982:	8c 2f       	mov	r24, r28
    1984:	82 95       	swap	r24
    1986:	8f 70       	andi	r24, 0x0F	; 15
    1988:	80 61       	ori	r24, 0x10	; 16
    198a:	95 df       	rcall	.-214    	; 0x18b6 <lcd_bus_write_cmd>
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <s_lcd_ram_read_nonvalid>
    1992:	cf 91       	pop	r28
    1994:	08 95       	ret

00001996 <lcd_cr>:
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	8e df       	rcall	.-228    	; 0x18b6 <lcd_bus_write_cmd>
    199a:	80 e1       	ldi	r24, 0x10	; 16
    199c:	8c df       	rcall	.-232    	; 0x18b6 <lcd_bus_write_cmd>
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <s_lcd_ram_read_nonvalid>
    19a4:	08 95       	ret

000019a6 <lcd_home>:
    19a6:	80 eb       	ldi	r24, 0xB0	; 176
    19a8:	86 df       	rcall	.-244    	; 0x18b6 <lcd_bus_write_cmd>
    19aa:	f5 cf       	rjmp	.-22     	; 0x1996 <lcd_cr>

000019ac <lcd_cls>:
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	c0 e0       	ldi	r28, 0x00	; 0
    19b2:	8c 2f       	mov	r24, r28
    19b4:	80 6b       	ori	r24, 0xB0	; 176
    19b6:	7f df       	rcall	.-258    	; 0x18b6 <lcd_bus_write_cmd>
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	7d df       	rcall	.-262    	; 0x18b6 <lcd_bus_write_cmd>
    19bc:	80 e1       	ldi	r24, 0x10	; 16
    19be:	7b df       	rcall	.-266    	; 0x18b6 <lcd_bus_write_cmd>
    19c0:	d0 ef       	ldi	r29, 0xF0	; 240
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	85 df       	rcall	.-246    	; 0x18d0 <lcd_bus_write_ram>
    19c6:	d1 50       	subi	r29, 0x01	; 1
    19c8:	e1 f7       	brne	.-8      	; 0x19c2 <lcd_cls+0x16>
    19ca:	cf 5f       	subi	r28, 0xFF	; 255
    19cc:	c0 31       	cpi	r28, 0x10	; 16
    19ce:	89 f7       	brne	.-30     	; 0x19b2 <lcd_cls+0x6>
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	e8 cf       	rjmp	.-48     	; 0x19a6 <lcd_home>

000019d6 <lcd_write>:
    19d6:	0f 93       	push	r16
    19d8:	1f 93       	push	r17
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	a1 f0       	breq	.+40     	; 0x1a0a <lcd_write+0x34>
    19e2:	04 2f       	mov	r16, r20
    19e4:	16 2f       	mov	r17, r22
    19e6:	ec 01       	movw	r28, r24
    19e8:	6f ef       	ldi	r22, 0xFF	; 255
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	0e 94 28 23 	call	0x4650	; 0x4650 <strnlen>
    19f0:	81 50       	subi	r24, 0x01	; 1
    19f2:	8e 3f       	cpi	r24, 0xFE	; 254
    19f4:	50 f4       	brcc	.+20     	; 0x1a0a <lcd_write+0x34>
    19f6:	23 e0       	ldi	r18, 0x03	; 3
    19f8:	31 e0       	ldi	r19, 0x01	; 1
    19fa:	40 2f       	mov	r20, r16
    19fc:	61 2f       	mov	r22, r17
    19fe:	ce 01       	movw	r24, r28
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	0f ca       	rjmp	.-3042   	; 0xe28 <gfx_mono_draw_string>
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	08 95       	ret

00001a14 <lcd_show_template>:
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	6a e0       	ldi	r22, 0x0A	; 10
    1a20:	71 e0       	ldi	r23, 0x01	; 1
    1a22:	8d e7       	ldi	r24, 0x7D	; 125
    1a24:	94 e0       	ldi	r25, 0x04	; 4
    1a26:	0e 94 21 23 	call	0x4642	; 0x4642 <strcpy>
    1a2a:	23 e0       	ldi	r18, 0x03	; 3
    1a2c:	31 e0       	ldi	r19, 0x01	; 1
    1a2e:	4b e0       	ldi	r20, 0x0B	; 11
    1a30:	63 e0       	ldi	r22, 0x03	; 3
    1a32:	8d e7       	ldi	r24, 0x7D	; 125
    1a34:	94 e0       	ldi	r25, 0x04	; 4
    1a36:	f8 d9       	rcall	.-3088   	; 0xe28 <gfx_mono_draw_string>
    1a38:	67 e1       	ldi	r22, 0x17	; 23
    1a3a:	71 e0       	ldi	r23, 0x01	; 1
    1a3c:	8d e7       	ldi	r24, 0x7D	; 125
    1a3e:	94 e0       	ldi	r25, 0x04	; 4
    1a40:	0e 94 21 23 	call	0x4642	; 0x4642 <strcpy>
    1a44:	23 e0       	ldi	r18, 0x03	; 3
    1a46:	31 e0       	ldi	r19, 0x01	; 1
    1a48:	44 e1       	ldi	r20, 0x14	; 20
    1a4a:	63 e0       	ldi	r22, 0x03	; 3
    1a4c:	8d e7       	ldi	r24, 0x7D	; 125
    1a4e:	94 e0       	ldi	r25, 0x04	; 4
    1a50:	eb d9       	rcall	.-3114   	; 0xe28 <gfx_mono_draw_string>
    1a52:	61 e2       	ldi	r22, 0x21	; 33
    1a54:	71 e0       	ldi	r23, 0x01	; 1
    1a56:	8d e7       	ldi	r24, 0x7D	; 125
    1a58:	94 e0       	ldi	r25, 0x04	; 4
    1a5a:	0e 94 21 23 	call	0x4642	; 0x4642 <strcpy>
    1a5e:	23 e0       	ldi	r18, 0x03	; 3
    1a60:	31 e0       	ldi	r19, 0x01	; 1
    1a62:	4d e1       	ldi	r20, 0x1D	; 29
    1a64:	63 e0       	ldi	r22, 0x03	; 3
    1a66:	8d e7       	ldi	r24, 0x7D	; 125
    1a68:	94 e0       	ldi	r25, 0x04	; 4
    1a6a:	de d9       	rcall	.-3140   	; 0xe28 <gfx_mono_draw_string>
    1a6c:	1f 92       	push	r1
    1a6e:	1f 92       	push	r1
    1a70:	1f 92       	push	r1
    1a72:	1f 92       	push	r1
    1a74:	88 e3       	ldi	r24, 0x38	; 56
    1a76:	91 e0       	ldi	r25, 0x01	; 1
    1a78:	9f 93       	push	r25
    1a7a:	8f 93       	push	r24
    1a7c:	1f 92       	push	r1
    1a7e:	10 e3       	ldi	r17, 0x30	; 48
    1a80:	1f 93       	push	r17
    1a82:	cd e7       	ldi	r28, 0x7D	; 125
    1a84:	d4 e0       	ldi	r29, 0x04	; 4
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    1a8e:	23 e0       	ldi	r18, 0x03	; 3
    1a90:	31 e0       	ldi	r19, 0x01	; 1
    1a92:	46 e2       	ldi	r20, 0x26	; 38
    1a94:	63 e0       	ldi	r22, 0x03	; 3
    1a96:	ce 01       	movw	r24, r28
    1a98:	c7 d9       	rcall	.-3186   	; 0xe28 <gfx_mono_draw_string>
    1a9a:	1f 92       	push	r1
    1a9c:	1f 92       	push	r1
    1a9e:	1f 92       	push	r1
    1aa0:	1f 92       	push	r1
    1aa2:	1f 92       	push	r1
    1aa4:	1f 92       	push	r1
    1aa6:	1f 92       	push	r1
    1aa8:	1f 92       	push	r1
    1aaa:	80 e5       	ldi	r24, 0x50	; 80
    1aac:	91 e0       	ldi	r25, 0x01	; 1
    1aae:	9f 93       	push	r25
    1ab0:	8f 93       	push	r24
    1ab2:	1f 92       	push	r1
    1ab4:	1f 93       	push	r17
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    1abe:	23 e0       	ldi	r18, 0x03	; 3
    1ac0:	31 e0       	ldi	r19, 0x01	; 1
    1ac2:	4f e2       	ldi	r20, 0x2F	; 47
    1ac4:	63 e0       	ldi	r22, 0x03	; 3
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	af d9       	rcall	.-3234   	; 0xe28 <gfx_mono_draw_string>
    1aca:	1f 92       	push	r1
    1acc:	1f 92       	push	r1
    1ace:	1f 92       	push	r1
    1ad0:	1f 92       	push	r1
    1ad2:	83 e7       	ldi	r24, 0x73	; 115
    1ad4:	91 e0       	ldi	r25, 0x01	; 1
    1ad6:	9f 93       	push	r25
    1ad8:	8f 93       	push	r24
    1ada:	1f 92       	push	r1
    1adc:	1f 93       	push	r17
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    1ae6:	8d b7       	in	r24, 0x3d	; 61
    1ae8:	9e b7       	in	r25, 0x3e	; 62
    1aea:	82 96       	adiw	r24, 0x22	; 34
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	9e bf       	out	0x3e, r25	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	8d bf       	out	0x3d, r24	; 61
    1af6:	23 e0       	ldi	r18, 0x03	; 3
    1af8:	31 e0       	ldi	r19, 0x01	; 1
    1afa:	48 e3       	ldi	r20, 0x38	; 56
    1afc:	63 e0       	ldi	r22, 0x03	; 3
    1afe:	ce 01       	movw	r24, r28
    1b00:	93 d9       	rcall	.-3290   	; 0xe28 <gfx_mono_draw_string>
    1b02:	1f 92       	push	r1
    1b04:	1f 92       	push	r1
    1b06:	1f 92       	push	r1
    1b08:	1f 92       	push	r1
    1b0a:	88 e8       	ldi	r24, 0x88	; 136
    1b0c:	91 e0       	ldi	r25, 0x01	; 1
    1b0e:	9f 93       	push	r25
    1b10:	8f 93       	push	r24
    1b12:	1f 92       	push	r1
    1b14:	1f 93       	push	r17
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    1b1e:	23 e0       	ldi	r18, 0x03	; 3
    1b20:	31 e0       	ldi	r19, 0x01	; 1
    1b22:	48 e3       	ldi	r20, 0x38	; 56
    1b24:	6b e7       	ldi	r22, 0x7B	; 123
    1b26:	ce 01       	movw	r24, r28
    1b28:	7f d9       	rcall	.-3330   	; 0xe28 <gfx_mono_draw_string>
    1b2a:	1f 92       	push	r1
    1b2c:	1f 92       	push	r1
    1b2e:	1f 92       	push	r1
    1b30:	1f 92       	push	r1
    1b32:	1f 92       	push	r1
    1b34:	1f 92       	push	r1
    1b36:	8e e9       	ldi	r24, 0x9E	; 158
    1b38:	91 e0       	ldi	r25, 0x01	; 1
    1b3a:	9f 93       	push	r25
    1b3c:	8f 93       	push	r24
    1b3e:	1f 92       	push	r1
    1b40:	1f 93       	push	r17
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    1b4a:	23 e0       	ldi	r18, 0x03	; 3
    1b4c:	31 e0       	ldi	r19, 0x01	; 1
    1b4e:	41 e4       	ldi	r20, 0x41	; 65
    1b50:	63 e0       	ldi	r22, 0x03	; 3
    1b52:	ce 01       	movw	r24, r28
    1b54:	69 d9       	rcall	.-3374   	; 0xe28 <gfx_mono_draw_string>
    1b56:	1f 92       	push	r1
    1b58:	1f 92       	push	r1
    1b5a:	1f 92       	push	r1
    1b5c:	1f 92       	push	r1
    1b5e:	8b ec       	ldi	r24, 0xCB	; 203
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	9f 93       	push	r25
    1b64:	8f 93       	push	r24
    1b66:	1f 92       	push	r1
    1b68:	1f 93       	push	r17
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    1b72:	8d b7       	in	r24, 0x3d	; 61
    1b74:	9e b7       	in	r25, 0x3e	; 62
    1b76:	80 96       	adiw	r24, 0x20	; 32
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	9e bf       	out	0x3e, r25	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	8d bf       	out	0x3d, r24	; 61
    1b82:	23 e0       	ldi	r18, 0x03	; 3
    1b84:	31 e0       	ldi	r19, 0x01	; 1
    1b86:	4a e4       	ldi	r20, 0x4A	; 74
    1b88:	63 e0       	ldi	r22, 0x03	; 3
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	4d d9       	rcall	.-3430   	; 0xe28 <gfx_mono_draw_string>
    1b8e:	1f 92       	push	r1
    1b90:	1f 92       	push	r1
    1b92:	1f 92       	push	r1
    1b94:	1f 92       	push	r1
    1b96:	8f ed       	ldi	r24, 0xDF	; 223
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	9f 93       	push	r25
    1b9c:	8f 93       	push	r24
    1b9e:	1f 92       	push	r1
    1ba0:	1f 93       	push	r17
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    1baa:	23 e0       	ldi	r18, 0x03	; 3
    1bac:	31 e0       	ldi	r19, 0x01	; 1
    1bae:	43 e5       	ldi	r20, 0x53	; 83
    1bb0:	63 e0       	ldi	r22, 0x03	; 3
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	39 d9       	rcall	.-3470   	; 0xe28 <gfx_mono_draw_string>
    1bb6:	1f 92       	push	r1
    1bb8:	1f 92       	push	r1
    1bba:	1f 92       	push	r1
    1bbc:	1f 92       	push	r1
    1bbe:	1f 92       	push	r1
    1bc0:	0e e7       	ldi	r16, 0x7E	; 126
    1bc2:	0f 93       	push	r16
    1bc4:	1f 92       	push	r1
    1bc6:	1f 92       	push	r1
    1bc8:	1f 92       	push	r1
    1bca:	80 e2       	ldi	r24, 0x20	; 32
    1bcc:	f8 2e       	mov	r15, r24
    1bce:	ff 92       	push	r15
    1bd0:	87 ef       	ldi	r24, 0xF7	; 247
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	9f 93       	push	r25
    1bd6:	8f 93       	push	r24
    1bd8:	1f 92       	push	r1
    1bda:	1f 93       	push	r17
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    1be4:	23 e0       	ldi	r18, 0x03	; 3
    1be6:	31 e0       	ldi	r19, 0x01	; 1
    1be8:	4c e5       	ldi	r20, 0x5C	; 92
    1bea:	63 e0       	ldi	r22, 0x03	; 3
    1bec:	ce 01       	movw	r24, r28
    1bee:	1c d9       	rcall	.-3528   	; 0xe28 <gfx_mono_draw_string>
    1bf0:	1f 92       	push	r1
    1bf2:	1f 92       	push	r1
    1bf4:	1f 92       	push	r1
    1bf6:	1f 92       	push	r1
    1bf8:	1f 92       	push	r1
    1bfa:	0f 93       	push	r16
    1bfc:	1f 92       	push	r1
    1bfe:	1f 92       	push	r1
    1c00:	1f 92       	push	r1
    1c02:	ff 92       	push	r15
    1c04:	86 e1       	ldi	r24, 0x16	; 22
    1c06:	92 e0       	ldi	r25, 0x02	; 2
    1c08:	9f 93       	push	r25
    1c0a:	8f 93       	push	r24
    1c0c:	1f 92       	push	r1
    1c0e:	1f 93       	push	r17
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    1c18:	8d b7       	in	r24, 0x3d	; 61
    1c1a:	9e b7       	in	r25, 0x3e	; 62
    1c1c:	8a 96       	adiw	r24, 0x2a	; 42
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	9e bf       	out	0x3e, r25	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	8d bf       	out	0x3d, r24	; 61
    1c28:	23 e0       	ldi	r18, 0x03	; 3
    1c2a:	31 e0       	ldi	r19, 0x01	; 1
    1c2c:	45 e6       	ldi	r20, 0x65	; 101
    1c2e:	63 e0       	ldi	r22, 0x03	; 3
    1c30:	ce 01       	movw	r24, r28
    1c32:	fa d8       	rcall	.-3596   	; 0xe28 <gfx_mono_draw_string>
    1c34:	1f 92       	push	r1
    1c36:	1f 92       	push	r1
    1c38:	1f 92       	push	r1
    1c3a:	1f 92       	push	r1
    1c3c:	84 e3       	ldi	r24, 0x34	; 52
    1c3e:	92 e0       	ldi	r25, 0x02	; 2
    1c40:	9f 93       	push	r25
    1c42:	8f 93       	push	r24
    1c44:	1f 92       	push	r1
    1c46:	1f 93       	push	r17
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    1c50:	23 e0       	ldi	r18, 0x03	; 3
    1c52:	31 e0       	ldi	r19, 0x01	; 1
    1c54:	4e e6       	ldi	r20, 0x6E	; 110
    1c56:	63 e0       	ldi	r22, 0x03	; 3
    1c58:	ce 01       	movw	r24, r28
    1c5a:	e6 d8       	rcall	.-3636   	; 0xe28 <gfx_mono_draw_string>
    1c5c:	1f 92       	push	r1
    1c5e:	0f 93       	push	r16
    1c60:	1f 92       	push	r1
    1c62:	1f 92       	push	r1
    1c64:	8a e4       	ldi	r24, 0x4A	; 74
    1c66:	92 e0       	ldi	r25, 0x02	; 2
    1c68:	9f 93       	push	r25
    1c6a:	8f 93       	push	r24
    1c6c:	1f 92       	push	r1
    1c6e:	1f 93       	push	r17
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    1c78:	23 e0       	ldi	r18, 0x03	; 3
    1c7a:	31 e0       	ldi	r19, 0x01	; 1
    1c7c:	4e e6       	ldi	r20, 0x6E	; 110
    1c7e:	6f e9       	ldi	r22, 0x9F	; 159
    1c80:	ce 01       	movw	r24, r28
    1c82:	d2 d8       	rcall	.-3676   	; 0xe28 <gfx_mono_draw_string>
    1c84:	8d b7       	in	r24, 0x3d	; 61
    1c86:	9e b7       	in	r25, 0x3e	; 62
    1c88:	44 96       	adiw	r24, 0x14	; 20
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	9e bf       	out	0x3e, r25	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	8d bf       	out	0x3d, r24	; 61
    1c94:	23 e0       	ldi	r18, 0x03	; 3
    1c96:	31 e0       	ldi	r19, 0x01	; 1
    1c98:	47 e7       	ldi	r20, 0x77	; 119
    1c9a:	63 e0       	ldi	r22, 0x03	; 3
    1c9c:	89 e5       	ldi	r24, 0x59	; 89
    1c9e:	92 e0       	ldi	r25, 0x02	; 2
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	ff 90       	pop	r15
    1caa:	be c8       	rjmp	.-3716   	; 0xe28 <gfx_mono_draw_string>

00001cac <lcd_show_new_smartlcd_data>:
    1cac:	df 92       	push	r13
    1cae:	ef 92       	push	r14
    1cb0:	ff 92       	push	r15
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	28 97       	sbiw	r28, 0x08	; 8
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	d1 dd       	rcall	.-1118   	; 0x186e <cpu_irq_save>
    1ccc:	f8 2e       	mov	r15, r24
    1cce:	10 91 b6 04 	lds	r17, 0x04B6	; 0x8004b6 <g_showData+0x2>
    1cd2:	12 33       	cpi	r17, 0x32	; 50
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <lcd_show_new_smartlcd_data+0x2c>
    1cd6:	53 c0       	rjmp	.+166    	; 0x1d7e <lcd_show_new_smartlcd_data+0xd2>
    1cd8:	c8 f4       	brcc	.+50     	; 0x1d0c <lcd_show_new_smartlcd_data+0x60>
    1cda:	14 31       	cpi	r17, 0x14	; 20
    1cdc:	31 f1       	breq	.+76     	; 0x1d2a <lcd_show_new_smartlcd_data+0x7e>
    1cde:	48 f4       	brcc	.+18     	; 0x1cf2 <lcd_show_new_smartlcd_data+0x46>
    1ce0:	10 31       	cpi	r17, 0x10	; 16
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <lcd_show_new_smartlcd_data+0x3a>
    1ce4:	be c0       	rjmp	.+380    	; 0x1e62 <lcd_show_new_smartlcd_data+0x1b6>
    1ce6:	3c d8       	rcall	.-3976   	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1ce8:	61 de       	rcall	.-830    	; 0x19ac <lcd_cls>
    1cea:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <g_showData+0x2>
    1cee:	ff be       	out	0x3f, r15	; 63
    1cf0:	ba c0       	rjmp	.+372    	; 0x1e66 <lcd_show_new_smartlcd_data+0x1ba>
    1cf2:	10 32       	cpi	r17, 0x20	; 32
    1cf4:	11 f1       	breq	.+68     	; 0x1d3a <lcd_show_new_smartlcd_data+0x8e>
    1cf6:	10 33       	cpi	r17, 0x30	; 48
    1cf8:	09 f0       	breq	.+2      	; 0x1cfc <lcd_show_new_smartlcd_data+0x50>
    1cfa:	b3 c0       	rjmp	.+358    	; 0x1e62 <lcd_show_new_smartlcd_data+0x1b6>
    1cfc:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <g_showData+0x3>
    1d00:	a8 eb       	ldi	r26, 0xB8	; 184
    1d02:	b4 e0       	ldi	r27, 0x04	; 4
    1d04:	ce 01       	movw	r24, r28
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	fc 01       	movw	r30, r24
    1d0a:	23 c0       	rjmp	.+70     	; 0x1d52 <lcd_show_new_smartlcd_data+0xa6>
    1d0c:	16 33       	cpi	r17, 0x36	; 54
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <lcd_show_new_smartlcd_data+0x66>
    1d10:	68 c0       	rjmp	.+208    	; 0x1de2 <lcd_show_new_smartlcd_data+0x136>
    1d12:	20 f4       	brcc	.+8      	; 0x1d1c <lcd_show_new_smartlcd_data+0x70>
    1d14:	14 33       	cpi	r17, 0x34	; 52
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <lcd_show_new_smartlcd_data+0x6e>
    1d18:	4e c0       	rjmp	.+156    	; 0x1db6 <lcd_show_new_smartlcd_data+0x10a>
    1d1a:	a3 c0       	rjmp	.+326    	; 0x1e62 <lcd_show_new_smartlcd_data+0x1b6>
    1d1c:	18 33       	cpi	r17, 0x38	; 56
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <lcd_show_new_smartlcd_data+0x76>
    1d20:	76 c0       	rjmp	.+236    	; 0x1e0e <lcd_show_new_smartlcd_data+0x162>
    1d22:	1a 33       	cpi	r17, 0x3A	; 58
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <lcd_show_new_smartlcd_data+0x7c>
    1d26:	88 c0       	rjmp	.+272    	; 0x1e38 <lcd_show_new_smartlcd_data+0x18c>
    1d28:	9c c0       	rjmp	.+312    	; 0x1e62 <lcd_show_new_smartlcd_data+0x1b6>
    1d2a:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <g_showData+0x3>
    1d2e:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <g_showData+0x13>
    1d32:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <g_showData+0x2>
    1d36:	ff be       	out	0x3f, r15	; 63
    1d38:	96 c0       	rjmp	.+300    	; 0x1e66 <lcd_show_new_smartlcd_data+0x1ba>
    1d3a:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <g_showData+0x3>
    1d3e:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <g_showData+0x14>
    1d42:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <g_showData+0x4>
    1d46:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <g_showData+0x15>
    1d4a:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <g_showData+0x2>
    1d4e:	ff be       	out	0x3f, r15	; 63
    1d50:	8a c0       	rjmp	.+276    	; 0x1e66 <lcd_show_new_smartlcd_data+0x1ba>
    1d52:	3e 2f       	mov	r19, r30
    1d54:	38 1b       	sub	r19, r24
    1d56:	32 17       	cp	r19, r18
    1d58:	18 f4       	brcc	.+6      	; 0x1d60 <lcd_show_new_smartlcd_data+0xb4>
    1d5a:	3d 91       	ld	r19, X+
    1d5c:	31 93       	st	Z+, r19
    1d5e:	f9 cf       	rjmp	.-14     	; 0x1d52 <lcd_show_new_smartlcd_data+0xa6>
    1d60:	fc 01       	movw	r30, r24
    1d62:	e2 0f       	add	r30, r18
    1d64:	f1 1d       	adc	r31, r1
    1d66:	10 82       	st	Z, r1
    1d68:	40 91 c9 04 	lds	r20, 0x04C9	; 0x8004c9 <g_showData+0x15>
    1d6c:	60 91 c8 04 	lds	r22, 0x04C8	; 0x8004c8 <g_showData+0x14>
    1d70:	32 de       	rcall	.-924    	; 0x19d6 <lcd_write>
    1d72:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1d76:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <g_showData+0x2>
    1d7a:	ff be       	out	0x3f, r15	; 63
    1d7c:	74 c0       	rjmp	.+232    	; 0x1e66 <lcd_show_new_smartlcd_data+0x1ba>
    1d7e:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <g_showData+0x14>
    1d82:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <g_showData+0x15>
    1d86:	d0 90 b7 04 	lds	r13, 0x04B7	; 0x8004b7 <g_showData+0x3>
    1d8a:	e0 90 b8 04 	lds	r14, 0x04B8	; 0x8004b8 <g_showData+0x4>
    1d8e:	00 91 b9 04 	lds	r16, 0x04B9	; 0x8004b9 <g_showData+0x5>
    1d92:	0f 3f       	cpi	r16, 0xFF	; 255
    1d94:	11 f4       	brne	.+4      	; 0x1d9a <lcd_show_new_smartlcd_data+0xee>
    1d96:	00 91 c7 04 	lds	r16, 0x04C7	; 0x8004c7 <g_showData+0x13>
    1d9a:	2e 2d       	mov	r18, r14
    1d9c:	4d 2d       	mov	r20, r13
    1d9e:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    1da2:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1da6:	d0 92 c8 04 	sts	0x04C8, r13	; 0x8004c8 <g_showData+0x14>
    1daa:	e0 92 c9 04 	sts	0x04C9, r14	; 0x8004c9 <g_showData+0x15>
    1dae:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <g_showData+0x2>
    1db2:	ff be       	out	0x3f, r15	; 63
    1db4:	58 c0       	rjmp	.+176    	; 0x1e66 <lcd_show_new_smartlcd_data+0x1ba>
    1db6:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <g_showData+0x14>
    1dba:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <g_showData+0x15>
    1dbe:	40 91 b7 04 	lds	r20, 0x04B7	; 0x8004b7 <g_showData+0x3>
    1dc2:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <g_showData+0x4>
    1dc6:	00 91 b9 04 	lds	r16, 0x04B9	; 0x8004b9 <g_showData+0x5>
    1dca:	0f 3f       	cpi	r16, 0xFF	; 255
    1dcc:	11 f4       	brne	.+4      	; 0x1dd2 <lcd_show_new_smartlcd_data+0x126>
    1dce:	00 91 c7 04 	lds	r16, 0x04C7	; 0x8004c7 <g_showData+0x13>
    1dd2:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_rect>
    1dd6:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1dda:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <g_showData+0x2>
    1dde:	ff be       	out	0x3f, r15	; 63
    1de0:	42 c0       	rjmp	.+132    	; 0x1e66 <lcd_show_new_smartlcd_data+0x1ba>
    1de2:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <g_showData+0x14>
    1de6:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <g_showData+0x15>
    1dea:	40 91 b7 04 	lds	r20, 0x04B7	; 0x8004b7 <g_showData+0x3>
    1dee:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <g_showData+0x4>
    1df2:	00 91 b9 04 	lds	r16, 0x04B9	; 0x8004b9 <g_showData+0x5>
    1df6:	0f 3f       	cpi	r16, 0xFF	; 255
    1df8:	11 f4       	brne	.+4      	; 0x1dfe <lcd_show_new_smartlcd_data+0x152>
    1dfa:	00 91 c7 04 	lds	r16, 0x04C7	; 0x8004c7 <g_showData+0x13>
    1dfe:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    1e02:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1e06:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <g_showData+0x2>
    1e0a:	ff be       	out	0x3f, r15	; 63
    1e0c:	2c c0       	rjmp	.+88     	; 0x1e66 <lcd_show_new_smartlcd_data+0x1ba>
    1e0e:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <g_showData+0x14>
    1e12:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <g_showData+0x15>
    1e16:	40 91 b7 04 	lds	r20, 0x04B7	; 0x8004b7 <g_showData+0x3>
    1e1a:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <g_showData+0x4>
    1e1e:	2f 3f       	cpi	r18, 0xFF	; 255
    1e20:	11 f4       	brne	.+4      	; 0x1e26 <lcd_show_new_smartlcd_data+0x17a>
    1e22:	20 91 c7 04 	lds	r18, 0x04C7	; 0x8004c7 <g_showData+0x13>
    1e26:	0f ef       	ldi	r16, 0xFF	; 255
    1e28:	0e 94 ac 04 	call	0x958	; 0x958 <gfx_mono_generic_draw_circle>
    1e2c:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1e30:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <g_showData+0x2>
    1e34:	ff be       	out	0x3f, r15	; 63
    1e36:	17 c0       	rjmp	.+46     	; 0x1e66 <lcd_show_new_smartlcd_data+0x1ba>
    1e38:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <g_showData+0x14>
    1e3c:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <g_showData+0x15>
    1e40:	40 91 b7 04 	lds	r20, 0x04B7	; 0x8004b7 <g_showData+0x3>
    1e44:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <g_showData+0x4>
    1e48:	2f 3f       	cpi	r18, 0xFF	; 255
    1e4a:	11 f4       	brne	.+4      	; 0x1e50 <lcd_show_new_smartlcd_data+0x1a4>
    1e4c:	20 91 c7 04 	lds	r18, 0x04C7	; 0x8004c7 <g_showData+0x13>
    1e50:	0f ef       	ldi	r16, 0xFF	; 255
    1e52:	0e 94 5a 05 	call	0xab4	; 0xab4 <gfx_mono_generic_draw_filled_circle>
    1e56:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1e5a:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <g_showData+0x2>
    1e5e:	ff be       	out	0x3f, r15	; 63
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <lcd_show_new_smartlcd_data+0x1ba>
    1e62:	ff be       	out	0x3f, r15	; 63
    1e64:	10 e0       	ldi	r17, 0x00	; 0
    1e66:	81 2f       	mov	r24, r17
    1e68:	28 96       	adiw	r28, 0x08	; 8
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	ff 90       	pop	r15
    1e7e:	ef 90       	pop	r14
    1e80:	df 90       	pop	r13
    1e82:	08 95       	ret

00001e84 <lcd_show_new_refosc_data>:
    1e84:	3f 92       	push	r3
    1e86:	4f 92       	push	r4
    1e88:	5f 92       	push	r5
    1e8a:	6f 92       	push	r6
    1e8c:	7f 92       	push	r7
    1e8e:	8f 92       	push	r8
    1e90:	9f 92       	push	r9
    1e92:	af 92       	push	r10
    1e94:	bf 92       	push	r11
    1e96:	cf 92       	push	r12
    1e98:	df 92       	push	r13
    1e9a:	ef 92       	push	r14
    1e9c:	ff 92       	push	r15
    1e9e:	0f 93       	push	r16
    1ea0:	1f 93       	push	r17
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	e3 dc       	rcall	.-1594   	; 0x186e <cpu_irq_save>
    1ea8:	c8 2f       	mov	r28, r24
    1eaa:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <g_showData>
    1eae:	92 ff       	sbrs	r25, 2
    1eb0:	31 c0       	rjmp	.+98     	; 0x1f14 <lcd_show_new_refosc_data+0x90>
    1eb2:	9b 7f       	andi	r25, 0xFB	; 251
    1eb4:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <g_showData>
    1eb8:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <g_showData+0x2f>
    1ebc:	1f 92       	push	r1
    1ebe:	8f 93       	push	r24
    1ec0:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <g_showData+0x2e>
    1ec4:	1f 92       	push	r1
    1ec6:	8f 93       	push	r24
    1ec8:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <g_showData+0x2d>
    1ecc:	1f 92       	push	r1
    1ece:	8f 93       	push	r24
    1ed0:	83 e6       	ldi	r24, 0x63	; 99
    1ed2:	92 e0       	ldi	r25, 0x02	; 2
    1ed4:	9f 93       	push	r25
    1ed6:	8f 93       	push	r24
    1ed8:	1f 92       	push	r1
    1eda:	80 e3       	ldi	r24, 0x30	; 48
    1edc:	8f 93       	push	r24
    1ede:	8d e7       	ldi	r24, 0x7D	; 125
    1ee0:	94 e0       	ldi	r25, 0x04	; 4
    1ee2:	9f 93       	push	r25
    1ee4:	8f 93       	push	r24
    1ee6:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    1eea:	cf bf       	out	0x3f, r28	; 63
    1eec:	23 e0       	ldi	r18, 0x03	; 3
    1eee:	31 e0       	ldi	r19, 0x01	; 1
    1ef0:	4d e1       	ldi	r20, 0x1D	; 29
    1ef2:	6f e3       	ldi	r22, 0x3F	; 63
    1ef4:	8d e7       	ldi	r24, 0x7D	; 125
    1ef6:	94 e0       	ldi	r25, 0x04	; 4
    1ef8:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    1efc:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1f00:	8d b7       	in	r24, 0x3d	; 61
    1f02:	9e b7       	in	r25, 0x3e	; 62
    1f04:	0c 96       	adiw	r24, 0x0c	; 12
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	9e bf       	out	0x3e, r25	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	8d bf       	out	0x3d, r24	; 61
    1f10:	8f ef       	ldi	r24, 0xFF	; 255
    1f12:	18 c4       	rjmp	.+2096   	; 0x2744 <lcd_show_new_refosc_data+0x8c0>
    1f14:	91 ff       	sbrs	r25, 1
    1f16:	33 c0       	rjmp	.+102    	; 0x1f7e <lcd_show_new_refosc_data+0xfa>
    1f18:	9d 7f       	andi	r25, 0xFD	; 253
    1f1a:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <g_showData>
    1f1e:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <g_showData+0x1b>
    1f22:	8f 93       	push	r24
    1f24:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <g_showData+0x1a>
    1f28:	8f 93       	push	r24
    1f2a:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <g_showData+0x2b>
    1f2e:	1f 92       	push	r1
    1f30:	8f 93       	push	r24
    1f32:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <g_showData+0x2c>
    1f36:	1f 92       	push	r1
    1f38:	8f 93       	push	r24
    1f3a:	82 e7       	ldi	r24, 0x72	; 114
    1f3c:	92 e0       	ldi	r25, 0x02	; 2
    1f3e:	9f 93       	push	r25
    1f40:	8f 93       	push	r24
    1f42:	1f 92       	push	r1
    1f44:	80 e3       	ldi	r24, 0x30	; 48
    1f46:	8f 93       	push	r24
    1f48:	8d e7       	ldi	r24, 0x7D	; 125
    1f4a:	94 e0       	ldi	r25, 0x04	; 4
    1f4c:	9f 93       	push	r25
    1f4e:	8f 93       	push	r24
    1f50:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    1f54:	cf bf       	out	0x3f, r28	; 63
    1f56:	23 e0       	ldi	r18, 0x03	; 3
    1f58:	31 e0       	ldi	r19, 0x01	; 1
    1f5a:	44 e1       	ldi	r20, 0x14	; 20
    1f5c:	6f e3       	ldi	r22, 0x3F	; 63
    1f5e:	8d e7       	ldi	r24, 0x7D	; 125
    1f60:	94 e0       	ldi	r25, 0x04	; 4
    1f62:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    1f66:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1f6a:	8d b7       	in	r24, 0x3d	; 61
    1f6c:	9e b7       	in	r25, 0x3e	; 62
    1f6e:	0c 96       	adiw	r24, 0x0c	; 12
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	9e bf       	out	0x3e, r25	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	8d bf       	out	0x3d, r24	; 61
    1f7a:	8e ef       	ldi	r24, 0xFE	; 254
    1f7c:	e3 c3       	rjmp	.+1990   	; 0x2744 <lcd_show_new_refosc_data+0x8c0>
    1f7e:	89 2f       	mov	r24, r25
    1f80:	81 70       	andi	r24, 0x01	; 1
    1f82:	90 ff       	sbrs	r25, 0
    1f84:	57 c1       	rjmp	.+686    	; 0x2234 <lcd_show_new_refosc_data+0x3b0>
    1f86:	9e 7f       	andi	r25, 0xFE	; 254
    1f88:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <g_showData>
    1f8c:	cf bf       	out	0x3f, r28	; 63
    1f8e:	c0 91 cc 04 	lds	r28, 0x04CC	; 0x8004cc <g_showData+0x18>
    1f92:	d0 91 cd 04 	lds	r29, 0x04CD	; 0x8004cd <g_showData+0x19>
    1f96:	a0 90 ca 04 	lds	r10, 0x04CA	; 0x8004ca <g_showData+0x16>
    1f9a:	b0 90 cb 04 	lds	r11, 0x04CB	; 0x8004cb <g_showData+0x17>
    1f9e:	90 90 de 04 	lds	r9, 0x04DE	; 0x8004de <g_showData+0x2a>
    1fa2:	c1 35       	cpi	r28, 0x51	; 81
    1fa4:	96 e4       	ldi	r25, 0x46	; 70
    1fa6:	d9 07       	cpc	r29, r25
    1fa8:	9c f4       	brge	.+38     	; 0x1fd0 <lcd_show_new_refosc_data+0x14c>
    1faa:	c0 3b       	cpi	r28, 0xB0	; 176
    1fac:	89 eb       	ldi	r24, 0xB9	; 185
    1fae:	d8 07       	cpc	r29, r24
    1fb0:	2c f0       	brlt	.+10     	; 0x1fbc <lcd_show_new_refosc_data+0x138>
    1fb2:	c5 39       	cpi	r28, 0x95	; 149
    1fb4:	91 e1       	ldi	r25, 0x11	; 17
    1fb6:	d9 07       	cpc	r29, r25
    1fb8:	1c f0       	brlt	.+6      	; 0x1fc0 <lcd_show_new_refosc_data+0x13c>
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <lcd_show_new_refosc_data+0x156>
    1fbc:	c0 eb       	ldi	r28, 0xB0	; 176
    1fbe:	d9 eb       	ldi	r29, 0xB9	; 185
    1fc0:	be 01       	movw	r22, r28
    1fc2:	cc 36       	cpi	r28, 0x6C	; 108
    1fc4:	8e ee       	ldi	r24, 0xEE	; 238
    1fc6:	d8 07       	cpc	r29, r24
    1fc8:	54 f4       	brge	.+20     	; 0x1fde <lcd_show_new_refosc_data+0x15a>
    1fca:	6c e6       	ldi	r22, 0x6C	; 108
    1fcc:	7e ee       	ldi	r23, 0xEE	; 238
    1fce:	07 c0       	rjmp	.+14     	; 0x1fde <lcd_show_new_refosc_data+0x15a>
    1fd0:	c0 e5       	ldi	r28, 0x50	; 80
    1fd2:	d6 e4       	ldi	r29, 0x46	; 70
    1fd4:	60 e5       	ldi	r22, 0x50	; 80
    1fd6:	76 e4       	ldi	r23, 0x46	; 70
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <lcd_show_new_refosc_data+0x15a>
    1fda:	60 e5       	ldi	r22, 0x50	; 80
    1fdc:	76 e4       	ldi	r23, 0x46	; 70
    1fde:	07 2e       	mov	r0, r23
    1fe0:	00 0c       	add	r0, r0
    1fe2:	88 0b       	sbc	r24, r24
    1fe4:	99 0b       	sbc	r25, r25
    1fe6:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__floatsisf>
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 ea       	ldi	r19, 0xA0	; 160
    1fee:	4c e8       	ldi	r20, 0x8C	; 140
    1ff0:	55 e4       	ldi	r21, 0x45	; 69
    1ff2:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <__divsf3>
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	48 e9       	ldi	r20, 0x98	; 152
    1ffc:	52 e4       	ldi	r21, 0x42	; 66
    1ffe:	0e 94 85 22 	call	0x450a	; 0x450a <__mulsf3>
    2002:	0e 94 4b 21 	call	0x4296	; 0x4296 <__fixsfsi>
    2006:	2b 01       	movw	r4, r22
    2008:	3c 01       	movw	r6, r24
    200a:	7b 01       	movw	r14, r22
    200c:	77 ff       	sbrs	r23, 7
    200e:	08 c0       	rjmp	.+16     	; 0x2020 <lcd_show_new_refosc_data+0x19c>
    2010:	36 e9       	ldi	r19, 0x96	; 150
    2012:	83 2e       	mov	r8, r19
    2014:	86 0e       	add	r8, r22
    2016:	cc 24       	eor	r12, r12
    2018:	dd 24       	eor	r13, r13
    201a:	c6 1a       	sub	r12, r22
    201c:	d7 0a       	sbc	r13, r23
    201e:	03 c0       	rjmp	.+6      	; 0x2026 <lcd_show_new_refosc_data+0x1a2>
    2020:	6b 01       	movw	r12, r22
    2022:	26 e9       	ldi	r18, 0x96	; 150
    2024:	82 2e       	mov	r8, r18
    2026:	1f 92       	push	r1
    2028:	9f 92       	push	r9
    202a:	81 e8       	ldi	r24, 0x81	; 129
    202c:	92 e0       	ldi	r25, 0x02	; 2
    202e:	9f 93       	push	r25
    2030:	8f 93       	push	r24
    2032:	1f 92       	push	r1
    2034:	90 e3       	ldi	r25, 0x30	; 48
    2036:	39 2e       	mov	r3, r25
    2038:	3f 92       	push	r3
    203a:	0d e7       	ldi	r16, 0x7D	; 125
    203c:	14 e0       	ldi	r17, 0x04	; 4
    203e:	1f 93       	push	r17
    2040:	0f 93       	push	r16
    2042:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    2046:	23 e0       	ldi	r18, 0x03	; 3
    2048:	31 e0       	ldi	r19, 0x01	; 1
    204a:	4b e0       	ldi	r20, 0x0B	; 11
    204c:	6b e4       	ldi	r22, 0x4B	; 75
    204e:	c8 01       	movw	r24, r16
    2050:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2054:	c5 01       	movw	r24, r10
    2056:	68 ee       	ldi	r22, 0xE8	; 232
    2058:	73 e0       	ldi	r23, 0x03	; 3
    205a:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <__udivmodhi4>
    205e:	9f 93       	push	r25
    2060:	8f 93       	push	r24
    2062:	7f 93       	push	r23
    2064:	6f 93       	push	r22
    2066:	85 e8       	ldi	r24, 0x85	; 133
    2068:	92 e0       	ldi	r25, 0x02	; 2
    206a:	9f 93       	push	r25
    206c:	8f 93       	push	r24
    206e:	1f 92       	push	r1
    2070:	3f 92       	push	r3
    2072:	1f 93       	push	r17
    2074:	0f 93       	push	r16
    2076:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    207a:	23 e0       	ldi	r18, 0x03	; 3
    207c:	31 e0       	ldi	r19, 0x01	; 1
    207e:	48 e3       	ldi	r20, 0x38	; 56
    2080:	6d eb       	ldi	r22, 0xBD	; 189
    2082:	c8 01       	movw	r24, r16
    2084:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2088:	ce 01       	movw	r24, r28
    208a:	64 e6       	ldi	r22, 0x64	; 100
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	0e 94 08 23 	call	0x4610	; 0x4610 <__divmodhi4>
    2092:	7f 93       	push	r23
    2094:	6f 93       	push	r22
    2096:	8e e8       	ldi	r24, 0x8E	; 142
    2098:	92 e0       	ldi	r25, 0x02	; 2
    209a:	9f 93       	push	r25
    209c:	8f 93       	push	r24
    209e:	1f 92       	push	r1
    20a0:	3f 92       	push	r3
    20a2:	1f 93       	push	r17
    20a4:	0f 93       	push	r16
    20a6:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    20aa:	23 e0       	ldi	r18, 0x03	; 3
    20ac:	31 e0       	ldi	r19, 0x01	; 1
    20ae:	4e e6       	ldi	r20, 0x6E	; 110
    20b0:	69 ec       	ldi	r22, 0xC9	; 201
    20b2:	c8 01       	movw	r24, r16
    20b4:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    20b8:	8d b7       	in	r24, 0x3d	; 61
    20ba:	9e b7       	in	r25, 0x3e	; 62
    20bc:	4a 96       	adiw	r24, 0x1a	; 26
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	9e bf       	out	0x3e, r25	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	8d bf       	out	0x3d, r24	; 61
    20c8:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <clk_state_old.3389>
    20cc:	98 12       	cpse	r9, r24
    20ce:	22 c0       	rjmp	.+68     	; 0x2114 <lcd_show_new_refosc_data+0x290>
    20d0:	c1 14       	cp	r12, r1
    20d2:	d1 04       	cpc	r13, r1
    20d4:	f9 f0       	breq	.+62     	; 0x2114 <lcd_show_new_refosc_data+0x290>
    20d6:	44 2d       	mov	r20, r4
    20d8:	1e 14       	cp	r1, r14
    20da:	1f 04       	cpc	r1, r15
    20dc:	0c f4       	brge	.+2      	; 0x20e0 <lcd_show_new_refosc_data+0x25c>
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	d4 2d       	mov	r29, r4
    20e2:	f7 fc       	sbrc	r15, 7
    20e4:	d0 e0       	ldi	r29, 0x00	; 0
    20e6:	97 e0       	ldi	r25, 0x07	; 7
    20e8:	99 16       	cp	r9, r25
    20ea:	09 f4       	brne	.+2      	; 0x20ee <lcd_show_new_refosc_data+0x26a>
    20ec:	62 c0       	rjmp	.+196    	; 0x21b2 <lcd_show_new_refosc_data+0x32e>
    20ee:	99 15       	cp	r25, r9
    20f0:	68 f0       	brcs	.+26     	; 0x210c <lcd_show_new_refosc_data+0x288>
    20f2:	8f ef       	ldi	r24, 0xFF	; 255
    20f4:	89 0d       	add	r24, r9
    20f6:	83 30       	cpi	r24, 0x03	; 3
    20f8:	08 f0       	brcs	.+2      	; 0x20fc <lcd_show_new_refosc_data+0x278>
    20fa:	96 c0       	rjmp	.+300    	; 0x2228 <lcd_show_new_refosc_data+0x3a4>
    20fc:	01 e0       	ldi	r16, 0x01	; 1
    20fe:	21 e0       	ldi	r18, 0x01	; 1
    2100:	48 e9       	ldi	r20, 0x98	; 152
    2102:	6a e7       	ldi	r22, 0x7A	; 122
    2104:	8a e4       	ldi	r24, 0x4A	; 74
    2106:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    210a:	8e c0       	rjmp	.+284    	; 0x2228 <lcd_show_new_refosc_data+0x3a4>
    210c:	8f e0       	ldi	r24, 0x0F	; 15
    210e:	98 16       	cp	r9, r24
    2110:	99 f0       	breq	.+38     	; 0x2138 <lcd_show_new_refosc_data+0x2b4>
    2112:	8a c0       	rjmp	.+276    	; 0x2228 <lcd_show_new_refosc_data+0x3a4>
    2114:	00 e0       	ldi	r16, 0x00	; 0
    2116:	25 e0       	ldi	r18, 0x05	; 5
    2118:	40 ea       	ldi	r20, 0xA0	; 160
    211a:	68 e7       	ldi	r22, 0x78	; 120
    211c:	86 e4       	ldi	r24, 0x46	; 70
    211e:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2122:	c1 14       	cp	r12, r1
    2124:	d1 04       	cpc	r13, r1
    2126:	b9 f6       	brne	.-82     	; 0x20d6 <lcd_show_new_refosc_data+0x252>
    2128:	01 e0       	ldi	r16, 0x01	; 1
    212a:	2c e7       	ldi	r18, 0x7C	; 124
    212c:	46 e9       	ldi	r20, 0x96	; 150
    212e:	68 e7       	ldi	r22, 0x78	; 120
    2130:	86 e9       	ldi	r24, 0x96	; 150
    2132:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2136:	78 c0       	rjmp	.+240    	; 0x2228 <lcd_show_new_refosc_data+0x3a4>
    2138:	40 5b       	subi	r20, 0xB0	; 176
    213a:	00 e0       	ldi	r16, 0x00	; 0
    213c:	25 e0       	ldi	r18, 0x05	; 5
    213e:	68 e7       	ldi	r22, 0x78	; 120
    2140:	86 e4       	ldi	r24, 0x46	; 70
    2142:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2146:	f7 fe       	sbrs	r15, 7
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <lcd_show_new_refosc_data+0x2e4>
    214a:	01 e0       	ldi	r16, 0x01	; 1
    214c:	28 e7       	ldi	r18, 0x78	; 120
    214e:	48 2d       	mov	r20, r8
    2150:	6a e7       	ldi	r22, 0x7A	; 122
    2152:	cc ef       	ldi	r28, 0xFC	; 252
    2154:	c8 0d       	add	r28, r8
    2156:	8c 2f       	mov	r24, r28
    2158:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    215c:	2c e7       	ldi	r18, 0x7C	; 124
    215e:	48 2d       	mov	r20, r8
    2160:	6a e7       	ldi	r22, 0x7A	; 122
    2162:	8c 2f       	mov	r24, r28
    2164:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2168:	01 e0       	ldi	r16, 0x01	; 1
    216a:	25 e0       	ldi	r18, 0x05	; 5
    216c:	4c 2d       	mov	r20, r12
    216e:	68 e7       	ldi	r22, 0x78	; 120
    2170:	88 2d       	mov	r24, r8
    2172:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2176:	40 e5       	ldi	r20, 0x50	; 80
    2178:	4d 1b       	sub	r20, r29
    217a:	00 e0       	ldi	r16, 0x00	; 0
    217c:	25 e0       	ldi	r18, 0x05	; 5
    217e:	68 e7       	ldi	r22, 0x78	; 120
    2180:	86 e9       	ldi	r24, 0x96	; 150
    2182:	8d 0f       	add	r24, r29
    2184:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2188:	1e 14       	cp	r1, r14
    218a:	1f 04       	cpc	r1, r15
    218c:	0c f0       	brlt	.+2      	; 0x2190 <lcd_show_new_refosc_data+0x30c>
    218e:	4c c0       	rjmp	.+152    	; 0x2228 <lcd_show_new_refosc_data+0x3a4>
    2190:	c5 e9       	ldi	r28, 0x95	; 149
    2192:	cd 0f       	add	r28, r29
    2194:	d7 56       	subi	r29, 0x67	; 103
    2196:	01 e0       	ldi	r16, 0x01	; 1
    2198:	28 e7       	ldi	r18, 0x78	; 120
    219a:	4c 2f       	mov	r20, r28
    219c:	6a e7       	ldi	r22, 0x7A	; 122
    219e:	8d 2f       	mov	r24, r29
    21a0:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    21a4:	2c e7       	ldi	r18, 0x7C	; 124
    21a6:	4c 2f       	mov	r20, r28
    21a8:	6a e7       	ldi	r22, 0x7A	; 122
    21aa:	8d 2f       	mov	r24, r29
    21ac:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    21b0:	3b c0       	rjmp	.+118    	; 0x2228 <lcd_show_new_refosc_data+0x3a4>
    21b2:	40 5b       	subi	r20, 0xB0	; 176
    21b4:	00 e0       	ldi	r16, 0x00	; 0
    21b6:	23 e0       	ldi	r18, 0x03	; 3
    21b8:	69 e7       	ldi	r22, 0x79	; 121
    21ba:	86 e4       	ldi	r24, 0x46	; 70
    21bc:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    21c0:	f7 fe       	sbrs	r15, 7
    21c2:	0f c0       	rjmp	.+30     	; 0x21e2 <lcd_show_new_refosc_data+0x35e>
    21c4:	01 e0       	ldi	r16, 0x01	; 1
    21c6:	29 e7       	ldi	r18, 0x79	; 121
    21c8:	48 2d       	mov	r20, r8
    21ca:	6a e7       	ldi	r22, 0x7A	; 122
    21cc:	cc ef       	ldi	r28, 0xFC	; 252
    21ce:	c8 0d       	add	r28, r8
    21d0:	8c 2f       	mov	r24, r28
    21d2:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    21d6:	2b e7       	ldi	r18, 0x7B	; 123
    21d8:	48 2d       	mov	r20, r8
    21da:	6a e7       	ldi	r22, 0x7A	; 122
    21dc:	8c 2f       	mov	r24, r28
    21de:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    21e2:	01 e0       	ldi	r16, 0x01	; 1
    21e4:	23 e0       	ldi	r18, 0x03	; 3
    21e6:	4c 2d       	mov	r20, r12
    21e8:	69 e7       	ldi	r22, 0x79	; 121
    21ea:	88 2d       	mov	r24, r8
    21ec:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    21f0:	40 e5       	ldi	r20, 0x50	; 80
    21f2:	4d 1b       	sub	r20, r29
    21f4:	00 e0       	ldi	r16, 0x00	; 0
    21f6:	23 e0       	ldi	r18, 0x03	; 3
    21f8:	69 e7       	ldi	r22, 0x79	; 121
    21fa:	86 e9       	ldi	r24, 0x96	; 150
    21fc:	8d 0f       	add	r24, r29
    21fe:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2202:	1e 14       	cp	r1, r14
    2204:	1f 04       	cpc	r1, r15
    2206:	84 f4       	brge	.+32     	; 0x2228 <lcd_show_new_refosc_data+0x3a4>
    2208:	c5 e9       	ldi	r28, 0x95	; 149
    220a:	cd 0f       	add	r28, r29
    220c:	d7 56       	subi	r29, 0x67	; 103
    220e:	01 e0       	ldi	r16, 0x01	; 1
    2210:	29 e7       	ldi	r18, 0x79	; 121
    2212:	4c 2f       	mov	r20, r28
    2214:	6a e7       	ldi	r22, 0x7A	; 122
    2216:	8d 2f       	mov	r24, r29
    2218:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    221c:	2b e7       	ldi	r18, 0x7B	; 123
    221e:	4c 2f       	mov	r20, r28
    2220:	6a e7       	ldi	r22, 0x7A	; 122
    2222:	8d 2f       	mov	r24, r29
    2224:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2228:	90 92 ce 03 	sts	0x03CE, r9	; 0x8003ce <clk_state_old.3389>
    222c:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2230:	8d ef       	ldi	r24, 0xFD	; 253
    2232:	88 c2       	rjmp	.+1296   	; 0x2744 <lcd_show_new_refosc_data+0x8c0>
    2234:	96 ff       	sbrs	r25, 6
    2236:	38 c0       	rjmp	.+112    	; 0x22a8 <lcd_show_new_refosc_data+0x424>
    2238:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3432>
    223c:	22 30       	cpi	r18, 0x02	; 2
    223e:	a0 f5       	brcc	.+104    	; 0x22a8 <lcd_show_new_refosc_data+0x424>
    2240:	9f 7b       	andi	r25, 0xBF	; 191
    2242:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <g_showData>
    2246:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <g_showData+0x35>
    224a:	1f 92       	push	r1
    224c:	8f 93       	push	r24
    224e:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <g_showData+0x34>
    2252:	1f 92       	push	r1
    2254:	8f 93       	push	r24
    2256:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <g_showData+0x33>
    225a:	1f 92       	push	r1
    225c:	8f 93       	push	r24
    225e:	84 e9       	ldi	r24, 0x94	; 148
    2260:	92 e0       	ldi	r25, 0x02	; 2
    2262:	9f 93       	push	r25
    2264:	8f 93       	push	r24
    2266:	1f 92       	push	r1
    2268:	80 e3       	ldi	r24, 0x30	; 48
    226a:	8f 93       	push	r24
    226c:	8d e7       	ldi	r24, 0x7D	; 125
    226e:	94 e0       	ldi	r25, 0x04	; 4
    2270:	9f 93       	push	r25
    2272:	8f 93       	push	r24
    2274:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    2278:	cf bf       	out	0x3f, r28	; 63
    227a:	23 e0       	ldi	r18, 0x03	; 3
    227c:	31 e0       	ldi	r19, 0x01	; 1
    227e:	41 e4       	ldi	r20, 0x41	; 65
    2280:	6d e5       	ldi	r22, 0x5D	; 93
    2282:	8d e7       	ldi	r24, 0x7D	; 125
    2284:	94 e0       	ldi	r25, 0x04	; 4
    2286:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    228a:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    228e:	82 e0       	ldi	r24, 0x02	; 2
    2290:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3432>
    2294:	8d b7       	in	r24, 0x3d	; 61
    2296:	9e b7       	in	r25, 0x3e	; 62
    2298:	0c 96       	adiw	r24, 0x0c	; 12
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	9e bf       	out	0x3e, r25	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	8d bf       	out	0x3d, r24	; 61
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	4e c2       	rjmp	.+1180   	; 0x2744 <lcd_show_new_refosc_data+0x8c0>
    22a8:	97 ff       	sbrs	r25, 7
    22aa:	49 c0       	rjmp	.+146    	; 0x233e <lcd_show_new_refosc_data+0x4ba>
    22ac:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3432>
    22b0:	23 30       	cpi	r18, 0x03	; 3
    22b2:	08 f0       	brcs	.+2      	; 0x22b6 <lcd_show_new_refosc_data+0x432>
    22b4:	44 c0       	rjmp	.+136    	; 0x233e <lcd_show_new_refosc_data+0x4ba>
    22b6:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <g_showData>
    22ba:	8f 77       	andi	r24, 0x7F	; 127
    22bc:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <g_showData>
    22c0:	20 91 d6 04 	lds	r18, 0x04D6	; 0x8004d6 <g_showData+0x22>
    22c4:	30 91 d7 04 	lds	r19, 0x04D7	; 0x8004d7 <g_showData+0x23>
    22c8:	c9 01       	movw	r24, r18
    22ca:	64 e6       	ldi	r22, 0x64	; 100
    22cc:	70 e0       	ldi	r23, 0x00	; 0
    22ce:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <__udivmodhi4>
    22d2:	9f 93       	push	r25
    22d4:	8f 93       	push	r24
    22d6:	b9 01       	movw	r22, r18
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <__floatunsisf>
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	48 ec       	ldi	r20, 0xC8	; 200
    22e6:	52 e4       	ldi	r21, 0x42	; 66
    22e8:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <__divsf3>
    22ec:	0e 94 4b 21 	call	0x4296	; 0x4296 <__fixsfsi>
    22f0:	7f 93       	push	r23
    22f2:	6f 93       	push	r22
    22f4:	85 ed       	ldi	r24, 0xD5	; 213
    22f6:	91 e0       	ldi	r25, 0x01	; 1
    22f8:	9f 93       	push	r25
    22fa:	8f 93       	push	r24
    22fc:	1f 92       	push	r1
    22fe:	80 e3       	ldi	r24, 0x30	; 48
    2300:	8f 93       	push	r24
    2302:	8d e7       	ldi	r24, 0x7D	; 125
    2304:	94 e0       	ldi	r25, 0x04	; 4
    2306:	9f 93       	push	r25
    2308:	8f 93       	push	r24
    230a:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    230e:	cf bf       	out	0x3f, r28	; 63
    2310:	23 e0       	ldi	r18, 0x03	; 3
    2312:	31 e0       	ldi	r19, 0x01	; 1
    2314:	4a e4       	ldi	r20, 0x4A	; 74
    2316:	6f e3       	ldi	r22, 0x3F	; 63
    2318:	8d e7       	ldi	r24, 0x7D	; 125
    231a:	94 e0       	ldi	r25, 0x04	; 4
    231c:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2320:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2324:	83 e0       	ldi	r24, 0x03	; 3
    2326:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3432>
    232a:	8d b7       	in	r24, 0x3d	; 61
    232c:	9e b7       	in	r25, 0x3e	; 62
    232e:	0a 96       	adiw	r24, 0x0a	; 10
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	9e bf       	out	0x3e, r25	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	8d bf       	out	0x3d, r24	; 61
    233a:	82 e0       	ldi	r24, 0x02	; 2
    233c:	03 c2       	rjmp	.+1030   	; 0x2744 <lcd_show_new_refosc_data+0x8c0>
    233e:	20 91 b5 04 	lds	r18, 0x04B5	; 0x8004b5 <g_showData+0x1>
    2342:	20 ff       	sbrs	r18, 0
    2344:	34 c0       	rjmp	.+104    	; 0x23ae <lcd_show_new_refosc_data+0x52a>
    2346:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3432>
    234a:	34 30       	cpi	r19, 0x04	; 4
    234c:	80 f5       	brcc	.+96     	; 0x23ae <lcd_show_new_refosc_data+0x52a>
    234e:	2e 7f       	andi	r18, 0xFE	; 254
    2350:	20 93 b5 04 	sts	0x04B5, r18	; 0x8004b5 <g_showData+0x1>
    2354:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <g_showData+0x37>
    2358:	1f 92       	push	r1
    235a:	8f 93       	push	r24
    235c:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <g_showData+0x36>
    2360:	1f 92       	push	r1
    2362:	8f 93       	push	r24
    2364:	8c ee       	ldi	r24, 0xEC	; 236
    2366:	91 e0       	ldi	r25, 0x01	; 1
    2368:	9f 93       	push	r25
    236a:	8f 93       	push	r24
    236c:	1f 92       	push	r1
    236e:	80 e3       	ldi	r24, 0x30	; 48
    2370:	8f 93       	push	r24
    2372:	8d e7       	ldi	r24, 0x7D	; 125
    2374:	94 e0       	ldi	r25, 0x04	; 4
    2376:	9f 93       	push	r25
    2378:	8f 93       	push	r24
    237a:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    237e:	cf bf       	out	0x3f, r28	; 63
    2380:	23 e0       	ldi	r18, 0x03	; 3
    2382:	31 e0       	ldi	r19, 0x01	; 1
    2384:	43 e5       	ldi	r20, 0x53	; 83
    2386:	61 e5       	ldi	r22, 0x51	; 81
    2388:	8d e7       	ldi	r24, 0x7D	; 125
    238a:	94 e0       	ldi	r25, 0x04	; 4
    238c:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2390:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2394:	84 e0       	ldi	r24, 0x04	; 4
    2396:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3432>
    239a:	8d b7       	in	r24, 0x3d	; 61
    239c:	9e b7       	in	r25, 0x3e	; 62
    239e:	0a 96       	adiw	r24, 0x0a	; 10
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	9e bf       	out	0x3e, r25	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	8d bf       	out	0x3d, r24	; 61
    23aa:	83 e0       	ldi	r24, 0x03	; 3
    23ac:	cb c1       	rjmp	.+918    	; 0x2744 <lcd_show_new_refosc_data+0x8c0>
    23ae:	21 ff       	sbrs	r18, 1
    23b0:	44 c0       	rjmp	.+136    	; 0x243a <lcd_show_new_refosc_data+0x5b6>
    23b2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3432>
    23b6:	35 30       	cpi	r19, 0x05	; 5
    23b8:	08 f0       	brcs	.+2      	; 0x23bc <lcd_show_new_refosc_data+0x538>
    23ba:	3f c0       	rjmp	.+126    	; 0x243a <lcd_show_new_refosc_data+0x5b6>
    23bc:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <g_showData+0x1>
    23c0:	8d 7f       	andi	r24, 0xFD	; 253
    23c2:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <g_showData+0x1>
    23c6:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <g_showData+0x25>
    23ca:	8f 93       	push	r24
    23cc:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <g_showData+0x24>
    23d0:	8f 93       	push	r24
    23d2:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <g_showData+0x3a>
    23d6:	1f 92       	push	r1
    23d8:	8f 93       	push	r24
    23da:	1f 92       	push	r1
    23dc:	8e e7       	ldi	r24, 0x7E	; 126
    23de:	8f 93       	push	r24
    23e0:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <g_showData+0x39>
    23e4:	1f 92       	push	r1
    23e6:	8f 93       	push	r24
    23e8:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <g_showData+0x38>
    23ec:	1f 92       	push	r1
    23ee:	8f 93       	push	r24
    23f0:	8d ea       	ldi	r24, 0xAD	; 173
    23f2:	92 e0       	ldi	r25, 0x02	; 2
    23f4:	9f 93       	push	r25
    23f6:	8f 93       	push	r24
    23f8:	1f 92       	push	r1
    23fa:	80 e3       	ldi	r24, 0x30	; 48
    23fc:	8f 93       	push	r24
    23fe:	8d e7       	ldi	r24, 0x7D	; 125
    2400:	94 e0       	ldi	r25, 0x04	; 4
    2402:	9f 93       	push	r25
    2404:	8f 93       	push	r24
    2406:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    240a:	cf bf       	out	0x3f, r28	; 63
    240c:	23 e0       	ldi	r18, 0x03	; 3
    240e:	31 e0       	ldi	r19, 0x01	; 1
    2410:	4c e5       	ldi	r20, 0x5C	; 92
    2412:	6f e3       	ldi	r22, 0x3F	; 63
    2414:	8d e7       	ldi	r24, 0x7D	; 125
    2416:	94 e0       	ldi	r25, 0x04	; 4
    2418:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    241c:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2420:	85 e0       	ldi	r24, 0x05	; 5
    2422:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3432>
    2426:	8d b7       	in	r24, 0x3d	; 61
    2428:	9e b7       	in	r25, 0x3e	; 62
    242a:	40 96       	adiw	r24, 0x10	; 16
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	9e bf       	out	0x3e, r25	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	8d bf       	out	0x3d, r24	; 61
    2436:	84 e0       	ldi	r24, 0x04	; 4
    2438:	85 c1       	rjmp	.+778    	; 0x2744 <lcd_show_new_refosc_data+0x8c0>
    243a:	22 ff       	sbrs	r18, 2
    243c:	44 c0       	rjmp	.+136    	; 0x24c6 <lcd_show_new_refosc_data+0x642>
    243e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3432>
    2442:	36 30       	cpi	r19, 0x06	; 6
    2444:	08 f0       	brcs	.+2      	; 0x2448 <lcd_show_new_refosc_data+0x5c4>
    2446:	3f c0       	rjmp	.+126    	; 0x24c6 <lcd_show_new_refosc_data+0x642>
    2448:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <g_showData+0x1>
    244c:	8b 7f       	andi	r24, 0xFB	; 251
    244e:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <g_showData+0x1>
    2452:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <g_showData+0x27>
    2456:	8f 93       	push	r24
    2458:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <g_showData+0x26>
    245c:	8f 93       	push	r24
    245e:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <g_showData+0x3d>
    2462:	1f 92       	push	r1
    2464:	8f 93       	push	r24
    2466:	1f 92       	push	r1
    2468:	8e e7       	ldi	r24, 0x7E	; 126
    246a:	8f 93       	push	r24
    246c:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <g_showData+0x3c>
    2470:	1f 92       	push	r1
    2472:	8f 93       	push	r24
    2474:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <g_showData+0x3b>
    2478:	1f 92       	push	r1
    247a:	8f 93       	push	r24
    247c:	81 ec       	ldi	r24, 0xC1	; 193
    247e:	92 e0       	ldi	r25, 0x02	; 2
    2480:	9f 93       	push	r25
    2482:	8f 93       	push	r24
    2484:	1f 92       	push	r1
    2486:	80 e3       	ldi	r24, 0x30	; 48
    2488:	8f 93       	push	r24
    248a:	8d e7       	ldi	r24, 0x7D	; 125
    248c:	94 e0       	ldi	r25, 0x04	; 4
    248e:	9f 93       	push	r25
    2490:	8f 93       	push	r24
    2492:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    2496:	cf bf       	out	0x3f, r28	; 63
    2498:	23 e0       	ldi	r18, 0x03	; 3
    249a:	31 e0       	ldi	r19, 0x01	; 1
    249c:	45 e6       	ldi	r20, 0x65	; 101
    249e:	6f e3       	ldi	r22, 0x3F	; 63
    24a0:	8d e7       	ldi	r24, 0x7D	; 125
    24a2:	94 e0       	ldi	r25, 0x04	; 4
    24a4:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    24a8:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    24ac:	86 e0       	ldi	r24, 0x06	; 6
    24ae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3432>
    24b2:	8d b7       	in	r24, 0x3d	; 61
    24b4:	9e b7       	in	r25, 0x3e	; 62
    24b6:	40 96       	adiw	r24, 0x10	; 16
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	9e bf       	out	0x3e, r25	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	8d bf       	out	0x3d, r24	; 61
    24c2:	85 e0       	ldi	r24, 0x05	; 5
    24c4:	3f c1       	rjmp	.+638    	; 0x2744 <lcd_show_new_refosc_data+0x8c0>
    24c6:	23 ff       	sbrs	r18, 3
    24c8:	38 c0       	rjmp	.+112    	; 0x253a <lcd_show_new_refosc_data+0x6b6>
    24ca:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3432>
    24ce:	27 30       	cpi	r18, 0x07	; 7
    24d0:	a0 f5       	brcc	.+104    	; 0x253a <lcd_show_new_refosc_data+0x6b6>
    24d2:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <g_showData+0x1>
    24d6:	87 7f       	andi	r24, 0xF7	; 247
    24d8:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <g_showData+0x1>
    24dc:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <g_showData+0x3e>
    24e0:	1f 92       	push	r1
    24e2:	8f 93       	push	r24
    24e4:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <g_showData+0x29>
    24e8:	8f 93       	push	r24
    24ea:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <g_showData+0x28>
    24ee:	8f 93       	push	r24
    24f0:	84 ed       	ldi	r24, 0xD4	; 212
    24f2:	92 e0       	ldi	r25, 0x02	; 2
    24f4:	9f 93       	push	r25
    24f6:	8f 93       	push	r24
    24f8:	1f 92       	push	r1
    24fa:	80 e3       	ldi	r24, 0x30	; 48
    24fc:	8f 93       	push	r24
    24fe:	8d e7       	ldi	r24, 0x7D	; 125
    2500:	94 e0       	ldi	r25, 0x04	; 4
    2502:	9f 93       	push	r25
    2504:	8f 93       	push	r24
    2506:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    250a:	cf bf       	out	0x3f, r28	; 63
    250c:	23 e0       	ldi	r18, 0x03	; 3
    250e:	31 e0       	ldi	r19, 0x01	; 1
    2510:	4e e6       	ldi	r20, 0x6E	; 110
    2512:	6f e3       	ldi	r22, 0x3F	; 63
    2514:	8d e7       	ldi	r24, 0x7D	; 125
    2516:	94 e0       	ldi	r25, 0x04	; 4
    2518:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    251c:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2520:	87 e0       	ldi	r24, 0x07	; 7
    2522:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3432>
    2526:	8d b7       	in	r24, 0x3d	; 61
    2528:	9e b7       	in	r25, 0x3e	; 62
    252a:	0a 96       	adiw	r24, 0x0a	; 10
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	9e bf       	out	0x3e, r25	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	8d bf       	out	0x3d, r24	; 61
    2536:	86 e0       	ldi	r24, 0x06	; 6
    2538:	05 c1       	rjmp	.+522    	; 0x2744 <lcd_show_new_refosc_data+0x8c0>
    253a:	93 ff       	sbrs	r25, 3
    253c:	3a c0       	rjmp	.+116    	; 0x25b2 <lcd_show_new_refosc_data+0x72e>
    253e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3432>
    2542:	28 30       	cpi	r18, 0x08	; 8
    2544:	b0 f5       	brcc	.+108    	; 0x25b2 <lcd_show_new_refosc_data+0x72e>
    2546:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <g_showData>
    254a:	87 7f       	andi	r24, 0xF7	; 247
    254c:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <g_showData>
    2550:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <g_showData+0x1f>
    2554:	8f 93       	push	r24
    2556:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <g_showData+0x1e>
    255a:	8f 93       	push	r24
    255c:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <g_showData+0x1d>
    2560:	8f 93       	push	r24
    2562:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <g_showData+0x1c>
    2566:	8f 93       	push	r24
    2568:	8d ed       	ldi	r24, 0xDD	; 221
    256a:	92 e0       	ldi	r25, 0x02	; 2
    256c:	9f 93       	push	r25
    256e:	8f 93       	push	r24
    2570:	1f 92       	push	r1
    2572:	80 e3       	ldi	r24, 0x30	; 48
    2574:	8f 93       	push	r24
    2576:	8d e7       	ldi	r24, 0x7D	; 125
    2578:	94 e0       	ldi	r25, 0x04	; 4
    257a:	9f 93       	push	r25
    257c:	8f 93       	push	r24
    257e:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    2582:	cf bf       	out	0x3f, r28	; 63
    2584:	23 e0       	ldi	r18, 0x03	; 3
    2586:	31 e0       	ldi	r19, 0x01	; 1
    2588:	46 e2       	ldi	r20, 0x26	; 38
    258a:	6f e3       	ldi	r22, 0x3F	; 63
    258c:	8d e7       	ldi	r24, 0x7D	; 125
    258e:	94 e0       	ldi	r25, 0x04	; 4
    2590:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2594:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2598:	88 e0       	ldi	r24, 0x08	; 8
    259a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3432>
    259e:	8d b7       	in	r24, 0x3d	; 61
    25a0:	9e b7       	in	r25, 0x3e	; 62
    25a2:	0a 96       	adiw	r24, 0x0a	; 10
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	9e bf       	out	0x3e, r25	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	8d bf       	out	0x3d, r24	; 61
    25ae:	87 e0       	ldi	r24, 0x07	; 7
    25b0:	c9 c0       	rjmp	.+402    	; 0x2744 <lcd_show_new_refosc_data+0x8c0>
    25b2:	94 ff       	sbrs	r25, 4
    25b4:	89 c0       	rjmp	.+274    	; 0x26c8 <lcd_show_new_refosc_data+0x844>
    25b6:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3432>
    25ba:	29 30       	cpi	r18, 0x09	; 9
    25bc:	08 f0       	brcs	.+2      	; 0x25c0 <lcd_show_new_refosc_data+0x73c>
    25be:	84 c0       	rjmp	.+264    	; 0x26c8 <lcd_show_new_refosc_data+0x844>
    25c0:	f0 90 e4 04 	lds	r15, 0x04E4	; 0x8004e4 <g_showData+0x30>
    25c4:	60 91 e5 04 	lds	r22, 0x04E5	; 0x8004e5 <g_showData+0x31>
    25c8:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <g_showData>
    25cc:	8f 7e       	andi	r24, 0xEF	; 239
    25ce:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <g_showData>
    25d2:	cf bf       	out	0x3f, r28	; 63
    25d4:	70 e0       	ldi	r23, 0x00	; 0
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 7e 21 	call	0x42fc	; 0x42fc <__floatsisf>
    25de:	2b 01       	movw	r4, r22
    25e0:	3c 01       	movw	r6, r24
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	4a e7       	ldi	r20, 0x7A	; 122
    25e8:	50 e4       	ldi	r21, 0x40	; 64
    25ea:	0e 94 85 22 	call	0x450a	; 0x450a <__mulsf3>
    25ee:	0e 94 4b 21 	call	0x4296	; 0x4296 <__fixsfsi>
    25f2:	7f 93       	push	r23
    25f4:	6f 93       	push	r22
    25f6:	1f 92       	push	r1
    25f8:	ff 92       	push	r15
    25fa:	07 ee       	ldi	r16, 0xE7	; 231
    25fc:	12 e0       	ldi	r17, 0x02	; 2
    25fe:	1f 93       	push	r17
    2600:	0f 93       	push	r16
    2602:	1f 92       	push	r1
    2604:	80 e3       	ldi	r24, 0x30	; 48
    2606:	b8 2e       	mov	r11, r24
    2608:	bf 92       	push	r11
    260a:	cd e7       	ldi	r28, 0x7D	; 125
    260c:	d4 e0       	ldi	r29, 0x04	; 4
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    2616:	23 e0       	ldi	r18, 0x03	; 3
    2618:	31 e0       	ldi	r19, 0x01	; 1
    261a:	4f e2       	ldi	r20, 0x2F	; 47
    261c:	6f e3       	ldi	r22, 0x3F	; 63
    261e:	ce 01       	movw	r24, r28
    2620:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2624:	6f 2d       	mov	r22, r15
    2626:	70 e0       	ldi	r23, 0x00	; 0
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <__floatunsisf>
    2630:	6b 01       	movw	r12, r22
    2632:	7c 01       	movw	r14, r24
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e8       	ldi	r20, 0x80	; 128
    263a:	5b e3       	ldi	r21, 0x3B	; 59
    263c:	c3 01       	movw	r24, r6
    263e:	b2 01       	movw	r22, r4
    2640:	0e 94 85 22 	call	0x450a	; 0x450a <__mulsf3>
    2644:	a7 01       	movw	r20, r14
    2646:	96 01       	movw	r18, r12
    2648:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <__addsf3>
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	48 ec       	ldi	r20, 0xC8	; 200
    2652:	5e e3       	ldi	r21, 0x3E	; 62
    2654:	0e 94 85 22 	call	0x450a	; 0x450a <__mulsf3>
    2658:	6b 01       	movw	r12, r22
    265a:	7c 01       	movw	r14, r24
    265c:	0e 94 b9 21 	call	0x4372	; 0x4372 <floor>
    2660:	9b 01       	movw	r18, r22
    2662:	ac 01       	movw	r20, r24
    2664:	c7 01       	movw	r24, r14
    2666:	b6 01       	movw	r22, r12
    2668:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__subsf3>
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	4a e7       	ldi	r20, 0x7A	; 122
    2672:	54 e4       	ldi	r21, 0x44	; 68
    2674:	0e 94 85 22 	call	0x450a	; 0x450a <__mulsf3>
    2678:	0e 94 4b 21 	call	0x4296	; 0x4296 <__fixsfsi>
    267c:	7f 93       	push	r23
    267e:	6f 93       	push	r22
    2680:	c7 01       	movw	r24, r14
    2682:	b6 01       	movw	r22, r12
    2684:	0e 94 4b 21 	call	0x4296	; 0x4296 <__fixsfsi>
    2688:	7f 93       	push	r23
    268a:	6f 93       	push	r22
    268c:	1f 93       	push	r17
    268e:	0f 93       	push	r16
    2690:	1f 92       	push	r1
    2692:	bf 92       	push	r11
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    269c:	23 e0       	ldi	r18, 0x03	; 3
    269e:	31 e0       	ldi	r19, 0x01	; 1
    26a0:	4f e2       	ldi	r20, 0x2F	; 47
    26a2:	6d e8       	ldi	r22, 0x8D	; 141
    26a4:	ce 01       	movw	r24, r28
    26a6:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    26aa:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    26ae:	89 e0       	ldi	r24, 0x09	; 9
    26b0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3432>
    26b4:	8d b7       	in	r24, 0x3d	; 61
    26b6:	9e b7       	in	r25, 0x3e	; 62
    26b8:	44 96       	adiw	r24, 0x14	; 20
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	9e bf       	out	0x3e, r25	; 62
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	8d bf       	out	0x3d, r24	; 61
    26c4:	88 e0       	ldi	r24, 0x08	; 8
    26c6:	3e c0       	rjmp	.+124    	; 0x2744 <lcd_show_new_refosc_data+0x8c0>
    26c8:	95 ff       	sbrs	r25, 5
    26ca:	38 c0       	rjmp	.+112    	; 0x273c <lcd_show_new_refosc_data+0x8b8>
    26cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <idx.3432>
    26d0:	9a 30       	cpi	r25, 0x0A	; 10
    26d2:	a0 f5       	brcc	.+104    	; 0x273c <lcd_show_new_refosc_data+0x8b8>
    26d4:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <g_showData>
    26d8:	8f 7d       	andi	r24, 0xDF	; 223
    26da:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <g_showData>
    26de:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_showData+0x21>
    26e2:	8f 93       	push	r24
    26e4:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <g_showData+0x20>
    26e8:	8f 93       	push	r24
    26ea:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <g_showData+0x32>
    26ee:	1f 92       	push	r1
    26f0:	8f 93       	push	r24
    26f2:	85 e8       	ldi	r24, 0x85	; 133
    26f4:	92 e0       	ldi	r25, 0x02	; 2
    26f6:	9f 93       	push	r25
    26f8:	8f 93       	push	r24
    26fa:	1f 92       	push	r1
    26fc:	80 e3       	ldi	r24, 0x30	; 48
    26fe:	8f 93       	push	r24
    2700:	8d e7       	ldi	r24, 0x7D	; 125
    2702:	94 e0       	ldi	r25, 0x04	; 4
    2704:	9f 93       	push	r25
    2706:	8f 93       	push	r24
    2708:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    270c:	cf bf       	out	0x3f, r28	; 63
    270e:	23 e0       	ldi	r18, 0x03	; 3
    2710:	31 e0       	ldi	r19, 0x01	; 1
    2712:	48 e3       	ldi	r20, 0x38	; 56
    2714:	6f e3       	ldi	r22, 0x3F	; 63
    2716:	8d e7       	ldi	r24, 0x7D	; 125
    2718:	94 e0       	ldi	r25, 0x04	; 4
    271a:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    271e:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2722:	8a e0       	ldi	r24, 0x0A	; 10
    2724:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3432>
    2728:	8d b7       	in	r24, 0x3d	; 61
    272a:	9e b7       	in	r25, 0x3e	; 62
    272c:	0a 96       	adiw	r24, 0x0a	; 10
    272e:	0f b6       	in	r0, 0x3f	; 63
    2730:	f8 94       	cli
    2732:	9e bf       	out	0x3e, r25	; 62
    2734:	0f be       	out	0x3f, r0	; 63
    2736:	8d bf       	out	0x3d, r24	; 61
    2738:	89 e0       	ldi	r24, 0x09	; 9
    273a:	04 c0       	rjmp	.+8      	; 0x2744 <lcd_show_new_refosc_data+0x8c0>
    273c:	91 e0       	ldi	r25, 0x01	; 1
    273e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <idx.3432>
    2742:	cf bf       	out	0x3f, r28	; 63
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	0f 91       	pop	r16
    274c:	ff 90       	pop	r15
    274e:	ef 90       	pop	r14
    2750:	df 90       	pop	r13
    2752:	cf 90       	pop	r12
    2754:	bf 90       	pop	r11
    2756:	af 90       	pop	r10
    2758:	9f 90       	pop	r9
    275a:	8f 90       	pop	r8
    275c:	7f 90       	pop	r7
    275e:	6f 90       	pop	r6
    2760:	5f 90       	pop	r5
    2762:	4f 90       	pop	r4
    2764:	3f 90       	pop	r3
    2766:	08 95       	ret

00002768 <lcd_animation_prepare>:
    2768:	ef 92       	push	r14
    276a:	ff 92       	push	r15
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	83 ec       	ldi	r24, 0xC3	; 195
    2776:	9f ef       	ldi	r25, 0xFF	; 255
    2778:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <s_animation_train_origin+0x1>
    277c:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <s_animation_train_origin>
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <s_animation_dx>
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	8b e0       	ldi	r24, 0x0B	; 11
    278c:	e8 2e       	mov	r14, r24
    278e:	f1 2c       	mov	r15, r1
    2790:	c0 e4       	ldi	r28, 0x40	; 64
    2792:	48 ef       	ldi	r20, 0xF8	; 248
    2794:	d8 ec       	ldi	r29, 0xC8	; 200
    2796:	18 ed       	ldi	r17, 0xD8	; 216
    2798:	0f ed       	ldi	r16, 0xDF	; 223
    279a:	21 15       	cp	r18, r1
    279c:	31 05       	cpc	r19, r1
    279e:	19 f4       	brne	.+6      	; 0x27a6 <lcd_animation_prepare+0x3e>
    27a0:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <s_animation_train_left>
    27a4:	43 c0       	rjmp	.+134    	; 0x282c <lcd_animation_prepare+0xc4>
    27a6:	23 30       	cpi	r18, 0x03	; 3
    27a8:	31 05       	cpc	r19, r1
    27aa:	5c f4       	brge	.+22     	; 0x27c2 <lcd_animation_prepare+0x5a>
    27ac:	f9 01       	movw	r30, r18
    27ae:	e4 5f       	subi	r30, 0xF4	; 244
    27b0:	fb 4f       	sbci	r31, 0xFB	; 251
    27b2:	40 83       	st	Z, r20
    27b4:	2f 5f       	subi	r18, 0xFF	; 255
    27b6:	3f 4f       	sbci	r19, 0xFF	; 255
    27b8:	f9 01       	movw	r30, r18
    27ba:	e4 5f       	subi	r30, 0xF4	; 244
    27bc:	fb 4f       	sbci	r31, 0xFB	; 251
    27be:	10 83       	st	Z, r17
    27c0:	35 c0       	rjmp	.+106    	; 0x282c <lcd_animation_prepare+0xc4>
    27c2:	25 30       	cpi	r18, 0x05	; 5
    27c4:	31 05       	cpc	r19, r1
    27c6:	2c f4       	brge	.+10     	; 0x27d2 <lcd_animation_prepare+0x6a>
    27c8:	f9 01       	movw	r30, r18
    27ca:	e4 5f       	subi	r30, 0xF4	; 244
    27cc:	fb 4f       	sbci	r31, 0xFB	; 251
    27ce:	00 83       	st	Z, r16
    27d0:	2d c0       	rjmp	.+90     	; 0x282c <lcd_animation_prepare+0xc4>
    27d2:	2b 30       	cpi	r18, 0x0B	; 11
    27d4:	31 05       	cpc	r19, r1
    27d6:	2c f4       	brge	.+10     	; 0x27e2 <lcd_animation_prepare+0x7a>
    27d8:	f9 01       	movw	r30, r18
    27da:	e4 5f       	subi	r30, 0xF4	; 244
    27dc:	fb 4f       	sbci	r31, 0xFB	; 251
    27de:	10 83       	st	Z, r17
    27e0:	25 c0       	rjmp	.+74     	; 0x282c <lcd_animation_prepare+0xc4>
    27e2:	20 31       	cpi	r18, 0x10	; 16
    27e4:	31 05       	cpc	r19, r1
    27e6:	e4 f0       	brlt	.+56     	; 0x2820 <lcd_animation_prepare+0xb8>
    27e8:	2c 33       	cpi	r18, 0x3C	; 60
    27ea:	31 05       	cpc	r19, r1
    27ec:	19 f4       	brne	.+6      	; 0x27f4 <lcd_animation_prepare+0x8c>
    27ee:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <s_animation_train_left+0x3c>
    27f2:	1c c0       	rjmp	.+56     	; 0x282c <lcd_animation_prepare+0xc4>
    27f4:	c9 01       	movw	r24, r18
    27f6:	40 97       	sbiw	r24, 0x10	; 16
    27f8:	b7 01       	movw	r22, r14
    27fa:	0e 94 08 23 	call	0x4610	; 0x4610 <__divmodhi4>
    27fe:	f9 01       	movw	r30, r18
    2800:	e4 5f       	subi	r30, 0xF4	; 244
    2802:	fb 4f       	sbci	r31, 0xFB	; 251
    2804:	89 2b       	or	r24, r25
    2806:	89 f4       	brne	.+34     	; 0x282a <lcd_animation_prepare+0xc2>
    2808:	c0 83       	st	Z, r28
    280a:	c1 83       	std	Z+1, r28	; 0x01
    280c:	c2 83       	std	Z+2, r28	; 0x02
    280e:	43 83       	std	Z+3, r20	; 0x03
    2810:	44 83       	std	Z+4, r20	; 0x04
    2812:	d5 83       	std	Z+5, r29	; 0x05
    2814:	46 83       	std	Z+6, r20	; 0x06
    2816:	47 83       	std	Z+7, r20	; 0x07
    2818:	d0 87       	std	Z+8, r29	; 0x08
    281a:	41 87       	std	Z+9, r20	; 0x09
    281c:	26 5f       	subi	r18, 0xF6	; 246
    281e:	3f 4f       	sbci	r19, 0xFF	; 255
    2820:	f9 01       	movw	r30, r18
    2822:	e4 5f       	subi	r30, 0xF4	; 244
    2824:	fb 4f       	sbci	r31, 0xFB	; 251
    2826:	40 83       	st	Z, r20
    2828:	01 c0       	rjmp	.+2      	; 0x282c <lcd_animation_prepare+0xc4>
    282a:	10 82       	st	Z, r1
    282c:	2f 5f       	subi	r18, 0xFF	; 255
    282e:	3f 4f       	sbci	r19, 0xFF	; 255
    2830:	2d 33       	cpi	r18, 0x3D	; 61
    2832:	31 05       	cpc	r19, r1
    2834:	0c f4       	brge	.+2      	; 0x2838 <lcd_animation_prepare+0xd0>
    2836:	b1 cf       	rjmp	.-158    	; 0x279a <lcd_animation_prepare+0x32>
    2838:	ac e0       	ldi	r26, 0x0C	; 12
    283a:	b4 e0       	ldi	r27, 0x04	; 4
    283c:	ec e0       	ldi	r30, 0x0C	; 12
    283e:	f4 e0       	ldi	r31, 0x04	; 4
    2840:	8d 91       	ld	r24, X+
    2842:	82 93       	st	-Z, r24
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	ef 3c       	cpi	r30, 0xCF	; 207
    2848:	f8 07       	cpc	r31, r24
    284a:	d1 f7       	brne	.-12     	; 0x2840 <lcd_animation_prepare+0xd8>
    284c:	00 e0       	ldi	r16, 0x00	; 0
    284e:	28 e0       	ldi	r18, 0x08	; 8
    2850:	40 ef       	ldi	r20, 0xF0	; 240
    2852:	68 e7       	ldi	r22, 0x78	; 120
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	1f 91       	pop	r17
    2860:	0f 91       	pop	r16
    2862:	ff 90       	pop	r15
    2864:	ef 90       	pop	r14
    2866:	08 95       	ret

00002868 <lcd_animation_loop>:
    2868:	2f 92       	push	r2
    286a:	3f 92       	push	r3
    286c:	4f 92       	push	r4
    286e:	5f 92       	push	r5
    2870:	6f 92       	push	r6
    2872:	7f 92       	push	r7
    2874:	8f 92       	push	r8
    2876:	9f 92       	push	r9
    2878:	af 92       	push	r10
    287a:	bf 92       	push	r11
    287c:	cf 92       	push	r12
    287e:	df 92       	push	r13
    2880:	ef 92       	push	r14
    2882:	ff 92       	push	r15
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	00 d0       	rcall	.+0      	; 0x288e <lcd_animation_loop+0x26>
    288e:	00 d0       	rcall	.+0      	; 0x2890 <lcd_animation_loop+0x28>
    2890:	1f 92       	push	r1
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	0e 94 37 0c 	call	0x186e	; 0x186e <cpu_irq_save>
    289a:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <g_status>
    289e:	91 70       	andi	r25, 0x01	; 1
    28a0:	8f bf       	out	0x3f, r24	; 63
    28a2:	10 e3       	ldi	r17, 0x30	; 48
    28a4:	2d e7       	ldi	r18, 0x7D	; 125
    28a6:	e2 2e       	mov	r14, r18
    28a8:	24 e0       	ldi	r18, 0x04	; 4
    28aa:	f2 2e       	mov	r15, r18
    28ac:	34 e6       	ldi	r19, 0x64	; 100
    28ae:	23 2e       	mov	r2, r19
    28b0:	31 2c       	mov	r3, r1
    28b2:	40 ef       	ldi	r20, 0xF0	; 240
    28b4:	c4 2e       	mov	r12, r20
    28b6:	42 e0       	ldi	r20, 0x02	; 2
    28b8:	d4 2e       	mov	r13, r20
    28ba:	99 23       	and	r25, r25
    28bc:	09 f4       	brne	.+2      	; 0x28c0 <lcd_animation_loop+0x58>
    28be:	26 c2       	rjmp	.+1100   	; 0x2d0c <lcd_animation_loop+0x4a4>
    28c0:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <s_animation_dx>
    28c4:	88 23       	and	r24, r24
    28c6:	09 f4       	brne	.+2      	; 0x28ca <lcd_animation_loop+0x62>
    28c8:	21 c2       	rjmp	.+1090   	; 0x2d0c <lcd_animation_loop+0x4a4>
    28ca:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <get_abs_time>
    28ce:	2b 01       	movw	r4, r22
    28d0:	3c 01       	movw	r6, r24
    28d2:	20 91 49 04 	lds	r18, 0x0449	; 0x800449 <s_animation_time_last_train>
    28d6:	30 91 4a 04 	lds	r19, 0x044A	; 0x80044a <s_animation_time_last_train+0x1>
    28da:	40 91 4b 04 	lds	r20, 0x044B	; 0x80044b <s_animation_time_last_train+0x2>
    28de:	50 91 4c 04 	lds	r21, 0x044C	; 0x80044c <s_animation_time_last_train+0x3>
    28e2:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__subsf3>
    28e6:	2a e0       	ldi	r18, 0x0A	; 10
    28e8:	37 ed       	ldi	r19, 0xD7	; 215
    28ea:	43 e2       	ldi	r20, 0x23	; 35
    28ec:	5d e3       	ldi	r21, 0x3D	; 61
    28ee:	0e 94 81 22 	call	0x4502	; 0x4502 <__gesf2>
    28f2:	87 fd       	sbrc	r24, 7
    28f4:	61 c0       	rjmp	.+194    	; 0x29b8 <lcd_animation_loop+0x150>
    28f6:	40 92 49 04 	sts	0x0449, r4	; 0x800449 <s_animation_time_last_train>
    28fa:	50 92 4a 04 	sts	0x044A, r5	; 0x80044a <s_animation_time_last_train+0x1>
    28fe:	60 92 4b 04 	sts	0x044B, r6	; 0x80044b <s_animation_time_last_train+0x2>
    2902:	70 92 4c 04 	sts	0x044C, r7	; 0x80044c <s_animation_time_last_train+0x3>
    2906:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <s_animation_dx>
    290a:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <s_animation_train_origin>
    290e:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <s_animation_train_origin+0x1>
    2912:	82 0f       	add	r24, r18
    2914:	91 1d       	adc	r25, r1
    2916:	27 fd       	sbrc	r18, 7
    2918:	9a 95       	dec	r25
    291a:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <s_animation_train_origin+0x1>
    291e:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <s_animation_train_origin>
    2922:	8a 3b       	cpi	r24, 0xBA	; 186
    2924:	2f ef       	ldi	r18, 0xFF	; 255
    2926:	92 07       	cpc	r25, r18
    2928:	24 f4       	brge	.+8      	; 0x2932 <lcd_animation_loop+0xca>
    292a:	e1 e0       	ldi	r30, 0x01	; 1
    292c:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <s_animation_dx>
    2930:	06 c0       	rjmp	.+12     	; 0x293e <lcd_animation_loop+0xd6>
    2932:	8a 3f       	cpi	r24, 0xFA	; 250
    2934:	91 05       	cpc	r25, r1
    2936:	1c f0       	brlt	.+6      	; 0x293e <lcd_animation_loop+0xd6>
    2938:	ff ef       	ldi	r31, 0xFF	; 255
    293a:	f0 93 51 04 	sts	0x0451, r31	; 0x800451 <s_animation_dx>
    293e:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <s_animation_dx>
    2942:	27 ff       	sbrs	r18, 7
    2944:	1d c0       	rjmp	.+58     	; 0x2980 <lcd_animation_loop+0x118>
    2946:	80 3f       	cpi	r24, 0xF0	; 240
    2948:	91 05       	cpc	r25, r1
    294a:	40 f4       	brcc	.+16     	; 0x295c <lcd_animation_loop+0xf4>
    294c:	2d e3       	ldi	r18, 0x3D	; 61
    294e:	48 2f       	mov	r20, r24
    2950:	6f e0       	ldi	r22, 0x0F	; 15
    2952:	8c e0       	ldi	r24, 0x0C	; 12
    2954:	94 e0       	ldi	r25, 0x04	; 4
    2956:	0e 94 0a 06 	call	0xc14	; 0xc14 <gfx_mono_lcd_uc1608_put_page>
    295a:	2e c0       	rjmp	.+92     	; 0x29b8 <lcd_animation_loop+0x150>
    295c:	9c 01       	movw	r18, r24
    295e:	24 5c       	subi	r18, 0xC4	; 196
    2960:	3f 4f       	sbci	r19, 0xFF	; 255
    2962:	2c 33       	cpi	r18, 0x3C	; 60
    2964:	31 05       	cpc	r19, r1
    2966:	40 f5       	brcc	.+80     	; 0x29b8 <lcd_animation_loop+0x150>
    2968:	2d e3       	ldi	r18, 0x3D	; 61
    296a:	28 0f       	add	r18, r24
    296c:	40 e0       	ldi	r20, 0x00	; 0
    296e:	6f e0       	ldi	r22, 0x0F	; 15
    2970:	ec e0       	ldi	r30, 0x0C	; 12
    2972:	f4 e0       	ldi	r31, 0x04	; 4
    2974:	e8 1b       	sub	r30, r24
    2976:	f9 0b       	sbc	r31, r25
    2978:	cf 01       	movw	r24, r30
    297a:	0e 94 0a 06 	call	0xc14	; 0xc14 <gfx_mono_lcd_uc1608_put_page>
    297e:	1c c0       	rjmp	.+56     	; 0x29b8 <lcd_animation_loop+0x150>
    2980:	80 3f       	cpi	r24, 0xF0	; 240
    2982:	91 05       	cpc	r25, r1
    2984:	40 f4       	brcc	.+16     	; 0x2996 <lcd_animation_loop+0x12e>
    2986:	2d e3       	ldi	r18, 0x3D	; 61
    2988:	48 2f       	mov	r20, r24
    298a:	6f e0       	ldi	r22, 0x0F	; 15
    298c:	8f ec       	ldi	r24, 0xCF	; 207
    298e:	93 e0       	ldi	r25, 0x03	; 3
    2990:	0e 94 0a 06 	call	0xc14	; 0xc14 <gfx_mono_lcd_uc1608_put_page>
    2994:	11 c0       	rjmp	.+34     	; 0x29b8 <lcd_animation_loop+0x150>
    2996:	9c 01       	movw	r18, r24
    2998:	24 5c       	subi	r18, 0xC4	; 196
    299a:	3f 4f       	sbci	r19, 0xFF	; 255
    299c:	2c 33       	cpi	r18, 0x3C	; 60
    299e:	31 05       	cpc	r19, r1
    29a0:	58 f4       	brcc	.+22     	; 0x29b8 <lcd_animation_loop+0x150>
    29a2:	2d e3       	ldi	r18, 0x3D	; 61
    29a4:	28 0f       	add	r18, r24
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	6f e0       	ldi	r22, 0x0F	; 15
    29aa:	ef ec       	ldi	r30, 0xCF	; 207
    29ac:	f3 e0       	ldi	r31, 0x03	; 3
    29ae:	e8 1b       	sub	r30, r24
    29b0:	f9 0b       	sbc	r31, r25
    29b2:	cf 01       	movw	r24, r30
    29b4:	0e 94 0a 06 	call	0xc14	; 0xc14 <gfx_mono_lcd_uc1608_put_page>
    29b8:	c3 01       	movw	r24, r6
    29ba:	b2 01       	movw	r22, r4
    29bc:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <task>
    29c0:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <s_animation_time_last_temp>
    29c4:	30 91 4e 04 	lds	r19, 0x044E	; 0x80044e <s_animation_time_last_temp+0x1>
    29c8:	40 91 4f 04 	lds	r20, 0x044F	; 0x80044f <s_animation_time_last_temp+0x2>
    29cc:	50 91 50 04 	lds	r21, 0x0450	; 0x800450 <s_animation_time_last_temp+0x3>
    29d0:	c3 01       	movw	r24, r6
    29d2:	b2 01       	movw	r22, r4
    29d4:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__subsf3>
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	5f e3       	ldi	r21, 0x3F	; 63
    29e0:	0e 94 81 22 	call	0x4502	; 0x4502 <__gesf2>
    29e4:	87 fd       	sbrc	r24, 7
    29e6:	52 c1       	rjmp	.+676    	; 0x2c8c <lcd_animation_loop+0x424>
    29e8:	40 92 4d 04 	sts	0x044D, r4	; 0x80044d <s_animation_time_last_temp>
    29ec:	50 92 4e 04 	sts	0x044E, r5	; 0x80044e <s_animation_time_last_temp+0x1>
    29f0:	60 92 4f 04 	sts	0x044F, r6	; 0x80044f <s_animation_time_last_temp+0x2>
    29f4:	70 92 50 04 	sts	0x0450, r7	; 0x800450 <s_animation_time_last_temp+0x3>
    29f8:	0e 94 37 0c 	call	0x186e	; 0x186e <cpu_irq_save>
    29fc:	40 90 fa 04 	lds	r4, 0x04FA	; 0x8004fa <g_temp>
    2a00:	50 90 fb 04 	lds	r5, 0x04FB	; 0x8004fb <g_temp+0x1>
    2a04:	60 90 fc 04 	lds	r6, 0x04FC	; 0x8004fc <g_temp+0x2>
    2a08:	70 90 fd 04 	lds	r7, 0x04FD	; 0x8004fd <g_temp+0x3>
    2a0c:	8f bf       	out	0x3f, r24	; 63
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	a9 01       	movw	r20, r18
    2a14:	c3 01       	movw	r24, r6
    2a16:	b2 01       	movw	r22, r4
    2a18:	0e 94 df 20 	call	0x41be	; 0x41be <__cmpsf2>
    2a1c:	87 ff       	sbrs	r24, 7
    2a1e:	03 c0       	rjmp	.+6      	; 0x2a26 <lcd_animation_loop+0x1be>
    2a20:	41 2c       	mov	r4, r1
    2a22:	51 2c       	mov	r5, r1
    2a24:	32 01       	movw	r6, r4
    2a26:	20 91 ca 03 	lds	r18, 0x03CA	; 0x8003ca <t_last.3453>
    2a2a:	30 91 cb 03 	lds	r19, 0x03CB	; 0x8003cb <t_last.3453+0x1>
    2a2e:	40 91 cc 03 	lds	r20, 0x03CC	; 0x8003cc <t_last.3453+0x2>
    2a32:	50 91 cd 03 	lds	r21, 0x03CD	; 0x8003cd <t_last.3453+0x3>
    2a36:	c3 01       	movw	r24, r6
    2a38:	b2 01       	movw	r22, r4
    2a3a:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__subsf3>
    2a3e:	9f 77       	andi	r25, 0x7F	; 127
    2a40:	2a e0       	ldi	r18, 0x0A	; 10
    2a42:	37 ed       	ldi	r19, 0xD7	; 215
    2a44:	43 e2       	ldi	r20, 0x23	; 35
    2a46:	5c e3       	ldi	r21, 0x3C	; 60
    2a48:	0e 94 df 20 	call	0x41be	; 0x41be <__cmpsf2>
    2a4c:	87 fd       	sbrc	r24, 7
    2a4e:	33 c0       	rjmp	.+102    	; 0x2ab6 <lcd_animation_loop+0x24e>
    2a50:	40 92 ca 03 	sts	0x03CA, r4	; 0x8003ca <t_last.3453>
    2a54:	50 92 cb 03 	sts	0x03CB, r5	; 0x8003cb <t_last.3453+0x1>
    2a58:	60 92 cc 03 	sts	0x03CC, r6	; 0x8003cc <t_last.3453+0x2>
    2a5c:	70 92 cd 03 	sts	0x03CD, r7	; 0x8003cd <t_last.3453+0x3>
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	48 ec       	ldi	r20, 0xC8	; 200
    2a66:	52 e4       	ldi	r21, 0x42	; 66
    2a68:	c3 01       	movw	r24, r6
    2a6a:	b2 01       	movw	r22, r4
    2a6c:	0e 94 85 22 	call	0x450a	; 0x450a <__mulsf3>
    2a70:	0e 94 4b 21 	call	0x4296	; 0x4296 <__fixsfsi>
    2a74:	cb 01       	movw	r24, r22
    2a76:	b1 01       	movw	r22, r2
    2a78:	0e 94 08 23 	call	0x4610	; 0x4610 <__divmodhi4>
    2a7c:	9f 93       	push	r25
    2a7e:	8f 93       	push	r24
    2a80:	c3 01       	movw	r24, r6
    2a82:	b2 01       	movw	r22, r4
    2a84:	0e 94 4b 21 	call	0x4296	; 0x4296 <__fixsfsi>
    2a88:	7f 93       	push	r23
    2a8a:	6f 93       	push	r22
    2a8c:	df 92       	push	r13
    2a8e:	cf 92       	push	r12
    2a90:	1f 92       	push	r1
    2a92:	1f 93       	push	r17
    2a94:	ff 92       	push	r15
    2a96:	ef 92       	push	r14
    2a98:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    2a9c:	23 e0       	ldi	r18, 0x03	; 3
    2a9e:	31 e0       	ldi	r19, 0x01	; 1
    2aa0:	4e e4       	ldi	r20, 0x4E	; 78
    2aa2:	66 e7       	ldi	r22, 0x76	; 118
    2aa4:	8d e7       	ldi	r24, 0x7D	; 125
    2aa6:	94 e0       	ldi	r25, 0x04	; 4
    2aa8:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	0e 94 37 0c 	call	0x186e	; 0x186e <cpu_irq_save>
    2aba:	40 90 02 05 	lds	r4, 0x0502	; 0x800502 <g_adc_light>
    2abe:	50 90 03 05 	lds	r5, 0x0503	; 0x800503 <g_adc_light+0x1>
    2ac2:	60 90 04 05 	lds	r6, 0x0504	; 0x800504 <g_adc_light+0x2>
    2ac6:	70 90 05 05 	lds	r7, 0x0505	; 0x800505 <g_adc_light+0x3>
    2aca:	8f bf       	out	0x3f, r24	; 63
    2acc:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <l_last.3459>
    2ad0:	30 91 c7 03 	lds	r19, 0x03C7	; 0x8003c7 <l_last.3459+0x1>
    2ad4:	40 91 c8 03 	lds	r20, 0x03C8	; 0x8003c8 <l_last.3459+0x2>
    2ad8:	50 91 c9 03 	lds	r21, 0x03C9	; 0x8003c9 <l_last.3459+0x3>
    2adc:	c3 01       	movw	r24, r6
    2ade:	b2 01       	movw	r22, r4
    2ae0:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__subsf3>
    2ae4:	9f 77       	andi	r25, 0x7F	; 127
    2ae6:	2d ec       	ldi	r18, 0xCD	; 205
    2ae8:	3c ec       	ldi	r19, 0xCC	; 204
    2aea:	4c ec       	ldi	r20, 0xCC	; 204
    2aec:	5d e3       	ldi	r21, 0x3D	; 61
    2aee:	0e 94 df 20 	call	0x41be	; 0x41be <__cmpsf2>
    2af2:	87 fd       	sbrc	r24, 7
    2af4:	36 c0       	rjmp	.+108    	; 0x2b62 <lcd_animation_loop+0x2fa>
    2af6:	40 92 c6 03 	sts	0x03C6, r4	; 0x8003c6 <l_last.3459>
    2afa:	50 92 c7 03 	sts	0x03C7, r5	; 0x8003c7 <l_last.3459+0x1>
    2afe:	60 92 c8 03 	sts	0x03C8, r6	; 0x8003c8 <l_last.3459+0x2>
    2b02:	70 92 c9 03 	sts	0x03C9, r7	; 0x8003c9 <l_last.3459+0x3>
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e2       	ldi	r20, 0x20	; 32
    2b0c:	51 e4       	ldi	r21, 0x41	; 65
    2b0e:	c3 01       	movw	r24, r6
    2b10:	b2 01       	movw	r22, r4
    2b12:	0e 94 85 22 	call	0x450a	; 0x450a <__mulsf3>
    2b16:	0e 94 4b 21 	call	0x4296	; 0x4296 <__fixsfsi>
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	6a e0       	ldi	r22, 0x0A	; 10
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	0e 94 08 23 	call	0x4610	; 0x4610 <__divmodhi4>
    2b24:	9f 93       	push	r25
    2b26:	8f 93       	push	r24
    2b28:	c3 01       	movw	r24, r6
    2b2a:	b2 01       	movw	r22, r4
    2b2c:	0e 94 4b 21 	call	0x4296	; 0x4296 <__fixsfsi>
    2b30:	7f 93       	push	r23
    2b32:	6f 93       	push	r22
    2b34:	eb ef       	ldi	r30, 0xFB	; 251
    2b36:	f2 e0       	ldi	r31, 0x02	; 2
    2b38:	ff 93       	push	r31
    2b3a:	ef 93       	push	r30
    2b3c:	1f 92       	push	r1
    2b3e:	1f 93       	push	r17
    2b40:	ff 92       	push	r15
    2b42:	ef 92       	push	r14
    2b44:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    2b48:	23 e0       	ldi	r18, 0x03	; 3
    2b4a:	31 e0       	ldi	r19, 0x01	; 1
    2b4c:	48 e5       	ldi	r20, 0x58	; 88
    2b4e:	66 e7       	ldi	r22, 0x76	; 118
    2b50:	8d e7       	ldi	r24, 0x7D	; 125
    2b52:	94 e0       	ldi	r25, 0x04	; 4
    2b54:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	cd bf       	out	0x3d, r28	; 61
    2b62:	0e 94 37 0c 	call	0x186e	; 0x186e <cpu_irq_save>
    2b66:	95 e0       	ldi	r25, 0x05	; 5
    2b68:	ef ea       	ldi	r30, 0xAF	; 175
    2b6a:	f4 e0       	ldi	r31, 0x04	; 4
    2b6c:	de 01       	movw	r26, r28
    2b6e:	11 96       	adiw	r26, 0x01	; 1
    2b70:	01 90       	ld	r0, Z+
    2b72:	0d 92       	st	X+, r0
    2b74:	9a 95       	dec	r25
    2b76:	e1 f7       	brne	.-8      	; 0x2b70 <lcd_animation_loop+0x308>
    2b78:	40 91 af 04 	lds	r20, 0x04AF	; 0x8004af <g_buttons>
    2b7c:	50 91 b0 04 	lds	r21, 0x04B0	; 0x8004b0 <g_buttons+0x1>
    2b80:	60 91 b1 04 	lds	r22, 0x04B1	; 0x8004b1 <g_buttons+0x2>
    2b84:	70 91 b2 04 	lds	r23, 0x04B2	; 0x8004b2 <g_buttons+0x3>
    2b88:	e0 91 b3 04 	lds	r30, 0x04B3	; 0x8004b3 <g_buttons+0x4>
    2b8c:	fe 2f       	mov	r31, r30
    2b8e:	f1 70       	andi	r31, 0x01	; 1
    2b90:	e6 95       	lsr	r30
    2b92:	e6 95       	lsr	r30
    2b94:	e6 95       	lsr	r30
    2b96:	e3 70       	andi	r30, 0x03	; 3
    2b98:	8f bf       	out	0x3f, r24	; 63
    2b9a:	2a 01       	movw	r4, r20
    2b9c:	3b 01       	movw	r6, r22
    2b9e:	82 e0       	ldi	r24, 0x02	; 2
    2ba0:	44 0c       	add	r4, r4
    2ba2:	55 1c       	adc	r5, r5
    2ba4:	66 1c       	adc	r6, r6
    2ba6:	77 1c       	adc	r7, r7
    2ba8:	8a 95       	dec	r24
    2baa:	d1 f7       	brne	.-12     	; 0x2ba0 <lcd_animation_loop+0x338>
    2bac:	4e 2a       	or	r4, r30
    2bae:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <cntr_old.3465>
    2bb2:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <cntr_old.3465+0x1>
    2bb6:	a0 91 c4 03 	lds	r26, 0x03C4	; 0x8003c4 <cntr_old.3465+0x2>
    2bba:	b0 91 c5 03 	lds	r27, 0x03C5	; 0x8003c5 <cntr_old.3465+0x3>
    2bbe:	53 01       	movw	r10, r6
    2bc0:	42 01       	movw	r8, r4
    2bc2:	88 1a       	sub	r8, r24
    2bc4:	99 0a       	sbc	r9, r25
    2bc6:	aa 0a       	sbc	r10, r26
    2bc8:	bb 0a       	sbc	r11, r27
    2bca:	49 f4       	brne	.+18     	; 0x2bde <lcd_animation_loop+0x376>
    2bcc:	2f 2f       	mov	r18, r31
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <push_old.3466>
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	28 17       	cp	r18, r24
    2bd8:	39 07       	cpc	r19, r25
    2bda:	09 f4       	brne	.+2      	; 0x2bde <lcd_animation_loop+0x376>
    2bdc:	57 c0       	rjmp	.+174    	; 0x2c8c <lcd_animation_loop+0x424>
    2bde:	40 92 c2 03 	sts	0x03C2, r4	; 0x8003c2 <cntr_old.3465>
    2be2:	50 92 c3 03 	sts	0x03C3, r5	; 0x8003c3 <cntr_old.3465+0x1>
    2be6:	60 92 c4 03 	sts	0x03C4, r6	; 0x8003c4 <cntr_old.3465+0x2>
    2bea:	70 92 c5 03 	sts	0x03C5, r7	; 0x8003c5 <cntr_old.3465+0x3>
    2bee:	f0 93 c1 03 	sts	0x03C1, r31	; 0x8003c1 <push_old.3466>
    2bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf4:	f0 fb       	bst	r31, 0
    2bf6:	80 f9       	bld	r24, 0
    2bf8:	9e 2f       	mov	r25, r30
    2bfa:	93 70       	andi	r25, 0x03	; 3
    2bfc:	99 0f       	add	r25, r25
    2bfe:	99 0f       	add	r25, r25
    2c00:	99 0f       	add	r25, r25
    2c02:	87 7e       	andi	r24, 0xE7	; 231
    2c04:	89 2b       	or	r24, r25
    2c06:	8d 83       	std	Y+5, r24	; 0x05
    2c08:	80 fd       	sbrc	r24, 0
    2c0a:	02 c0       	rjmp	.+4      	; 0x2c10 <lcd_animation_loop+0x3a8>
    2c0c:	9e e2       	ldi	r25, 0x2E	; 46
    2c0e:	01 c0       	rjmp	.+2      	; 0x2c12 <lcd_animation_loop+0x3aa>
    2c10:	92 e4       	ldi	r25, 0x42	; 66
    2c12:	81 fd       	sbrc	r24, 1
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <lcd_animation_loop+0x3b2>
    2c16:	2e e2       	ldi	r18, 0x2E	; 46
    2c18:	01 c0       	rjmp	.+2      	; 0x2c1c <lcd_animation_loop+0x3b4>
    2c1a:	29 e4       	ldi	r18, 0x49	; 73
    2c1c:	82 fd       	sbrc	r24, 2
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <lcd_animation_loop+0x3bc>
    2c20:	3e e2       	ldi	r19, 0x2E	; 46
    2c22:	01 c0       	rjmp	.+2      	; 0x2c26 <lcd_animation_loop+0x3be>
    2c24:	31 e5       	ldi	r19, 0x51	; 81
    2c26:	18 14       	cp	r1, r8
    2c28:	19 04       	cpc	r1, r9
    2c2a:	1a 04       	cpc	r1, r10
    2c2c:	1b 04       	cpc	r1, r11
    2c2e:	34 f0       	brlt	.+12     	; 0x2c3c <lcd_animation_loop+0x3d4>
    2c30:	89 28       	or	r8, r9
    2c32:	8a 28       	or	r8, r10
    2c34:	8b 28       	or	r8, r11
    2c36:	21 f4       	brne	.+8      	; 0x2c40 <lcd_animation_loop+0x3d8>
    2c38:	8d e2       	ldi	r24, 0x2D	; 45
    2c3a:	03 c0       	rjmp	.+6      	; 0x2c42 <lcd_animation_loop+0x3da>
    2c3c:	8e e5       	ldi	r24, 0x5E	; 94
    2c3e:	01 c0       	rjmp	.+2      	; 0x2c42 <lcd_animation_loop+0x3da>
    2c40:	86 e7       	ldi	r24, 0x76	; 118
    2c42:	1f 92       	push	r1
    2c44:	8f 93       	push	r24
    2c46:	1f 92       	push	r1
    2c48:	ef 93       	push	r30
    2c4a:	7f 93       	push	r23
    2c4c:	6f 93       	push	r22
    2c4e:	5f 93       	push	r21
    2c50:	4f 93       	push	r20
    2c52:	1f 92       	push	r1
    2c54:	3f 93       	push	r19
    2c56:	1f 92       	push	r1
    2c58:	2f 93       	push	r18
    2c5a:	1f 92       	push	r1
    2c5c:	9f 93       	push	r25
    2c5e:	e6 e0       	ldi	r30, 0x06	; 6
    2c60:	f3 e0       	ldi	r31, 0x03	; 3
    2c62:	ff 93       	push	r31
    2c64:	ef 93       	push	r30
    2c66:	1f 92       	push	r1
    2c68:	1f 93       	push	r17
    2c6a:	ff 92       	push	r15
    2c6c:	ef 92       	push	r14
    2c6e:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    2c72:	23 e0       	ldi	r18, 0x03	; 3
    2c74:	31 e0       	ldi	r19, 0x01	; 1
    2c76:	42 e6       	ldi	r20, 0x62	; 98
    2c78:	66 e7       	ldi	r22, 0x76	; 118
    2c7a:	8d e7       	ldi	r24, 0x7D	; 125
    2c7c:	94 e0       	ldi	r25, 0x04	; 4
    2c7e:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    2c8c:	20 91 bf 03 	lds	r18, 0x03BF	; 0x8003bf <loop.3444>
    2c90:	30 91 c0 03 	lds	r19, 0x03C0	; 0x8003c0 <loop.3444+0x1>
    2c94:	f9 01       	movw	r30, r18
    2c96:	31 96       	adiw	r30, 0x01	; 1
    2c98:	f0 93 c0 03 	sts	0x03C0, r31	; 0x8003c0 <loop.3444+0x1>
    2c9c:	e0 93 bf 03 	sts	0x03BF, r30	; 0x8003bf <loop.3444>
    2ca0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2ca4:	22 31       	cpi	r18, 0x12	; 18
    2ca6:	31 05       	cpc	r19, r1
    2ca8:	6c f4       	brge	.+26     	; 0x2cc4 <lcd_animation_loop+0x45c>
    2caa:	63 e0       	ldi	r22, 0x03	; 3
    2cac:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <__udivmodqi4>
    2cb0:	2b e1       	ldi	r18, 0x1B	; 27
    2cb2:	2e 1b       	sub	r18, r30
    2cb4:	6a e0       	ldi	r22, 0x0A	; 10
    2cb6:	6e 0f       	add	r22, r30
    2cb8:	09 2f       	mov	r16, r25
    2cba:	4f ee       	ldi	r20, 0xEF	; 239
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2cc2:	1d c0       	rjmp	.+58     	; 0x2cfe <lcd_animation_loop+0x496>
    2cc4:	e2 30       	cpi	r30, 0x02	; 2
    2cc6:	91 e0       	ldi	r25, 0x01	; 1
    2cc8:	f9 07       	cpc	r31, r25
    2cca:	6c f4       	brge	.+26     	; 0x2ce6 <lcd_animation_loop+0x47e>
    2ccc:	63 e0       	ldi	r22, 0x03	; 3
    2cce:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <__udivmodqi4>
    2cd2:	41 e0       	ldi	r20, 0x01	; 1
    2cd4:	4e 1b       	sub	r20, r30
    2cd6:	09 2f       	mov	r16, r25
    2cd8:	2a e0       	ldi	r18, 0x0A	; 10
    2cda:	6b e1       	ldi	r22, 0x1B	; 27
    2cdc:	8e ee       	ldi	r24, 0xEE	; 238
    2cde:	8e 0f       	add	r24, r30
    2ce0:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2ce4:	0c c0       	rjmp	.+24     	; 0x2cfe <lcd_animation_loop+0x496>
    2ce6:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <loop.3444+0x1>
    2cea:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <loop.3444>
    2cee:	8f 5f       	subi	r24, 0xFF	; 255
    2cf0:	83 30       	cpi	r24, 0x03	; 3
    2cf2:	18 f4       	brcc	.+6      	; 0x2cfa <lcd_animation_loop+0x492>
    2cf4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2cf8:	02 c0       	rjmp	.+4      	; 0x2cfe <lcd_animation_loop+0x496>
    2cfa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
    2cfe:	0e 94 37 0c 	call	0x186e	; 0x186e <cpu_irq_save>
    2d02:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <g_status>
    2d06:	91 70       	andi	r25, 0x01	; 1
    2d08:	8f bf       	out	0x3f, r24	; 63
    2d0a:	d7 cd       	rjmp	.-1106   	; 0x28ba <lcd_animation_loop+0x52>
    2d0c:	0e 94 37 0c 	call	0x186e	; 0x186e <cpu_irq_save>
    2d10:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <g_status>
    2d14:	9e 7f       	andi	r25, 0xFE	; 254
    2d16:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <g_status>
    2d1a:	8f bf       	out	0x3f, r24	; 63
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	1f 91       	pop	r17
    2d2c:	0f 91       	pop	r16
    2d2e:	ff 90       	pop	r15
    2d30:	ef 90       	pop	r14
    2d32:	df 90       	pop	r13
    2d34:	cf 90       	pop	r12
    2d36:	bf 90       	pop	r11
    2d38:	af 90       	pop	r10
    2d3a:	9f 90       	pop	r9
    2d3c:	8f 90       	pop	r8
    2d3e:	7f 90       	pop	r7
    2d40:	6f 90       	pop	r6
    2d42:	5f 90       	pop	r5
    2d44:	4f 90       	pop	r4
    2d46:	3f 90       	pop	r3
    2d48:	2f 90       	pop	r2
    2d4a:	08 95       	ret

00002d4c <lcd_test>:
    2d4c:	ef 92       	push	r14
    2d4e:	ff 92       	push	r15
    2d50:	0f 93       	push	r16
    2d52:	1f 93       	push	r17
    2d54:	cf 93       	push	r28
    2d56:	df 93       	push	r29
    2d58:	c8 2f       	mov	r28, r24
    2d5a:	0e 94 37 0c 	call	0x186e	; 0x186e <cpu_irq_save>
    2d5e:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <g_status>
    2d62:	9e 7f       	andi	r25, 0xFE	; 254
    2d64:	9d 7f       	andi	r25, 0xFD	; 253
    2d66:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <g_status>
    2d6a:	8f bf       	out	0x3f, r24	; 63
    2d6c:	c0 fd       	sbrc	r28, 0
    2d6e:	03 c0       	rjmp	.+6      	; 0x2d76 <lcd_test+0x2a>
    2d70:	c1 ff       	sbrs	r28, 1
    2d72:	32 c0       	rjmp	.+100    	; 0x2dd8 <lcd_test+0x8c>
    2d74:	10 c0       	rjmp	.+32     	; 0x2d96 <lcd_test+0x4a>
    2d76:	80 eb       	ldi	r24, 0xB0	; 176
    2d78:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_bus_write_cmd>
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <s_lcd_ram_read_nonvalid>
    2d82:	0e 94 cb 0c 	call	0x1996	; 0x1996 <lcd_cr>
    2d86:	10 e0       	ldi	r17, 0x00	; 0
    2d88:	81 2f       	mov	r24, r17
    2d8a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <lcd_bus_write_ram>
    2d8e:	1f 5f       	subi	r17, 0xFF	; 255
    2d90:	10 3f       	cpi	r17, 0xF0	; 240
    2d92:	d1 f7       	brne	.-12     	; 0x2d88 <lcd_test+0x3c>
    2d94:	ed cf       	rjmp	.-38     	; 0x2d70 <lcd_test+0x24>
    2d96:	81 eb       	ldi	r24, 0xB1	; 177
    2d98:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_bus_write_cmd>
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <s_lcd_ram_read_nonvalid>
    2da2:	0e 94 cb 0c 	call	0x1996	; 0x1996 <lcd_cr>
    2da6:	00 e0       	ldi	r16, 0x00	; 0
    2da8:	10 e0       	ldi	r17, 0x00	; 0
    2daa:	87 e0       	ldi	r24, 0x07	; 7
    2dac:	e8 2e       	mov	r14, r24
    2dae:	f1 2c       	mov	r15, r1
    2db0:	c8 01       	movw	r24, r16
    2db2:	b7 01       	movw	r22, r14
    2db4:	0e 94 08 23 	call	0x4610	; 0x4610 <__divmodhi4>
    2db8:	89 2b       	or	r24, r25
    2dba:	19 f4       	brne	.+6      	; 0x2dc2 <lcd_test+0x76>
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <lcd_bus_write_ram>
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	e2 5e       	subi	r30, 0xE2	; 226
    2dc6:	fb 4f       	sbci	r31, 0xFB	; 251
    2dc8:	84 91       	lpm	r24, Z
    2dca:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <lcd_bus_write_ram>
    2dce:	0f 5f       	subi	r16, 0xFF	; 255
    2dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd2:	00 3f       	cpi	r16, 0xF0	; 240
    2dd4:	11 05       	cpc	r17, r1
    2dd6:	61 f7       	brne	.-40     	; 0x2db0 <lcd_test+0x64>
    2dd8:	c2 ff       	sbrs	r28, 2
    2dda:	14 c0       	rjmp	.+40     	; 0x2e04 <lcd_test+0xb8>
    2ddc:	41 e0       	ldi	r20, 0x01	; 1
    2dde:	6c e3       	ldi	r22, 0x3C	; 60
    2de0:	89 e1       	ldi	r24, 0x19	; 25
    2de2:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2de6:	41 e0       	ldi	r20, 0x01	; 1
    2de8:	63 e5       	ldi	r22, 0x53	; 83
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2df0:	41 e0       	ldi	r20, 0x01	; 1
    2df2:	63 e5       	ldi	r22, 0x53	; 83
    2df4:	82 e3       	ldi	r24, 0x32	; 50
    2df6:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2dfa:	41 e0       	ldi	r20, 0x01	; 1
    2dfc:	69 e6       	ldi	r22, 0x69	; 105
    2dfe:	89 e1       	ldi	r24, 0x19	; 25
    2e00:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2e04:	c3 ff       	sbrs	r28, 3
    2e06:	0d c0       	rjmp	.+26     	; 0x2e22 <lcd_test+0xd6>
    2e08:	01 e0       	ldi	r16, 0x01	; 1
    2e0a:	2e e5       	ldi	r18, 0x5E	; 94
    2e0c:	48 e2       	ldi	r20, 0x28	; 40
    2e0e:	66 e4       	ldi	r22, 0x46	; 70
    2e10:	8a e0       	ldi	r24, 0x0A	; 10
    2e12:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2e16:	26 e4       	ldi	r18, 0x46	; 70
    2e18:	48 e2       	ldi	r20, 0x28	; 40
    2e1a:	6e e5       	ldi	r22, 0x5E	; 94
    2e1c:	8a e0       	ldi	r24, 0x0A	; 10
    2e1e:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2e22:	c4 ff       	sbrs	r28, 4
    2e24:	0d c0       	rjmp	.+26     	; 0x2e40 <lcd_test+0xf4>
    2e26:	01 e0       	ldi	r16, 0x01	; 1
    2e28:	24 e1       	ldi	r18, 0x14	; 20
    2e2a:	44 e1       	ldi	r20, 0x14	; 20
    2e2c:	6c e3       	ldi	r22, 0x3C	; 60
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_rect>
    2e34:	24 e1       	ldi	r18, 0x14	; 20
    2e36:	44 e1       	ldi	r20, 0x14	; 20
    2e38:	6c e3       	ldi	r22, 0x3C	; 60
    2e3a:	8e e1       	ldi	r24, 0x1E	; 30
    2e3c:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2e40:	c5 ff       	sbrs	r28, 5
    2e42:	0d c0       	rjmp	.+26     	; 0x2e5e <lcd_test+0x112>
    2e44:	0f ef       	ldi	r16, 0xFF	; 255
    2e46:	21 e0       	ldi	r18, 0x01	; 1
    2e48:	4a e0       	ldi	r20, 0x0A	; 10
    2e4a:	6e e5       	ldi	r22, 0x5E	; 94
    2e4c:	8a e0       	ldi	r24, 0x0A	; 10
    2e4e:	0e 94 5a 05 	call	0xab4	; 0xab4 <gfx_mono_generic_draw_filled_circle>
    2e52:	21 e0       	ldi	r18, 0x01	; 1
    2e54:	4a e0       	ldi	r20, 0x0A	; 10
    2e56:	6e e5       	ldi	r22, 0x5E	; 94
    2e58:	88 e2       	ldi	r24, 0x28	; 40
    2e5a:	0e 94 ac 04 	call	0x958	; 0x958 <gfx_mono_generic_draw_circle>
    2e5e:	c6 ff       	sbrs	r28, 6
    2e60:	57 c0       	rjmp	.+174    	; 0x2f10 <lcd_test+0x1c4>
    2e62:	23 e0       	ldi	r18, 0x03	; 3
    2e64:	31 e0       	ldi	r19, 0x01	; 1
    2e66:	45 e2       	ldi	r20, 0x25	; 37
    2e68:	66 e4       	ldi	r22, 0x46	; 70
    2e6a:	8d e1       	ldi	r24, 0x1D	; 29
    2e6c:	93 e0       	ldi	r25, 0x03	; 3
    2e6e:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2e72:	82 e0       	ldi	r24, 0x02	; 2
    2e74:	8f 93       	push	r24
    2e76:	85 e7       	ldi	r24, 0x75	; 117
    2e78:	8f 93       	push	r24
    2e7a:	1f 92       	push	r1
    2e7c:	8a ea       	ldi	r24, 0xAA	; 170
    2e7e:	8f 93       	push	r24
    2e80:	8e e2       	ldi	r24, 0x2E	; 46
    2e82:	93 e0       	ldi	r25, 0x03	; 3
    2e84:	9f 93       	push	r25
    2e86:	8f 93       	push	r24
    2e88:	1f 92       	push	r1
    2e8a:	d0 e3       	ldi	r29, 0x30	; 48
    2e8c:	df 93       	push	r29
    2e8e:	0d e7       	ldi	r16, 0x7D	; 125
    2e90:	14 e0       	ldi	r17, 0x04	; 4
    2e92:	1f 93       	push	r17
    2e94:	0f 93       	push	r16
    2e96:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    2e9a:	23 e0       	ldi	r18, 0x03	; 3
    2e9c:	31 e0       	ldi	r19, 0x01	; 1
    2e9e:	4a e3       	ldi	r20, 0x3A	; 58
    2ea0:	66 e4       	ldi	r22, 0x46	; 70
    2ea2:	c8 01       	movw	r24, r16
    2ea4:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2ea8:	1f 92       	push	r1
    2eaa:	81 e1       	ldi	r24, 0x11	; 17
    2eac:	8f 93       	push	r24
    2eae:	80 e4       	ldi	r24, 0x40	; 64
    2eb0:	93 e0       	ldi	r25, 0x03	; 3
    2eb2:	9f 93       	push	r25
    2eb4:	8f 93       	push	r24
    2eb6:	1f 92       	push	r1
    2eb8:	df 93       	push	r29
    2eba:	1f 93       	push	r17
    2ebc:	0f 93       	push	r16
    2ebe:	0e 94 33 23 	call	0x4666	; 0x4666 <snprintf>
    2ec2:	23 e0       	ldi	r18, 0x03	; 3
    2ec4:	31 e0       	ldi	r19, 0x01	; 1
    2ec6:	44 e4       	ldi	r20, 0x44	; 68
    2ec8:	66 e4       	ldi	r22, 0x46	; 70
    2eca:	c8 01       	movw	r24, r16
    2ecc:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2ed0:	23 e0       	ldi	r18, 0x03	; 3
    2ed2:	31 e0       	ldi	r19, 0x01	; 1
    2ed4:	4e e4       	ldi	r20, 0x4E	; 78
    2ed6:	66 e4       	ldi	r22, 0x46	; 70
    2ed8:	80 e5       	ldi	r24, 0x50	; 80
    2eda:	93 e0       	ldi	r25, 0x03	; 3
    2edc:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2ee0:	23 e0       	ldi	r18, 0x03	; 3
    2ee2:	31 e0       	ldi	r19, 0x01	; 1
    2ee4:	48 e5       	ldi	r20, 0x58	; 88
    2ee6:	66 e4       	ldi	r22, 0x46	; 70
    2ee8:	83 e6       	ldi	r24, 0x63	; 99
    2eea:	93 e0       	ldi	r25, 0x03	; 3
    2eec:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2ef0:	23 e0       	ldi	r18, 0x03	; 3
    2ef2:	31 e0       	ldi	r19, 0x01	; 1
    2ef4:	42 e6       	ldi	r20, 0x62	; 98
    2ef6:	66 e4       	ldi	r22, 0x46	; 70
    2ef8:	86 e7       	ldi	r24, 0x76	; 118
    2efa:	93 e0       	ldi	r25, 0x03	; 3
    2efc:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2f00:	8d b7       	in	r24, 0x3d	; 61
    2f02:	9e b7       	in	r25, 0x3e	; 62
    2f04:	42 96       	adiw	r24, 0x12	; 18
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	9e bf       	out	0x3e, r25	; 62
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	8d bf       	out	0x3d, r24	; 61
    2f10:	c7 ff       	sbrs	r28, 7
    2f12:	10 c0       	rjmp	.+32     	; 0x2f34 <lcd_test+0x1e8>
    2f14:	29 dc       	rcall	.-1966   	; 0x2768 <lcd_animation_prepare>
    2f16:	0e 94 37 0c 	call	0x186e	; 0x186e <cpu_irq_save>
    2f1a:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <g_status>
    2f1e:	91 60       	ori	r25, 0x01	; 1
    2f20:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <g_status>
    2f24:	8f bf       	out	0x3f, r24	; 63
    2f26:	df 91       	pop	r29
    2f28:	cf 91       	pop	r28
    2f2a:	1f 91       	pop	r17
    2f2c:	0f 91       	pop	r16
    2f2e:	ff 90       	pop	r15
    2f30:	ef 90       	pop	r14
    2f32:	9a cc       	rjmp	.-1740   	; 0x2868 <lcd_animation_loop>
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	1f 91       	pop	r17
    2f3a:	0f 91       	pop	r16
    2f3c:	ff 90       	pop	r15
    2f3e:	ef 90       	pop	r14
    2f40:	08 95       	ret

00002f42 <lcd_get_sysfont>:
    2f42:	83 e0       	ldi	r24, 0x03	; 3
    2f44:	91 e0       	ldi	r25, 0x01	; 1
    2f46:	08 95       	ret

00002f48 <lcd_init>:
    2f48:	82 ee       	ldi	r24, 0xE2	; 226
    2f4a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_bus_write_cmd>
    2f4e:	6b e2       	ldi	r22, 0x2B	; 43
    2f50:	78 e6       	ldi	r23, 0x68	; 104
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	0e 94 44 0c 	call	0x1888	; 0x1888 <__portable_avr_delay_cycles>
    2f5a:	0e 94 4f 0c 	call	0x189e	; 0x189e <lcd_bus_read_status>
    2f5e:	87 fd       	sbrc	r24, 7
    2f60:	06 c0       	rjmp	.+12     	; 0x2f6e <lcd_init+0x26>
    2f62:	0e 94 91 0c 	call	0x1922	; 0x1922 <lcd_enable.part.0>
    2f66:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <lcd_cls>
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	08 95       	ret
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	08 95       	ret

00002f72 <lcd_shutdown>:
    2f72:	82 ee       	ldi	r24, 0xE2	; 226
    2f74:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_bus_write_cmd>
    2f78:	6b e6       	ldi	r22, 0x6B	; 107
    2f7a:	7a e0       	ldi	r23, 0x0A	; 10
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__portable_avr_delay_cycles>

00002f84 <s_twi_tx_done>:
#endif

static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
    2f84:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <s_tx_next_len>
    2f88:	ee 23       	and	r30, r30
    2f8a:	51 f0       	breq	.+20     	; 0x2fa0 <s_twi_tx_done+0x1c>
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	e3 59       	subi	r30, 0x93	; 147
    2f90:	fb 4f       	sbci	r31, 0xFB	; 251
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
			s_tx_d[idx] = s_tx_next_d[idx];
    2f92:	12 92       	st	-Z, r1
static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
    2f94:	84 e0       	ldi	r24, 0x04	; 4
    2f96:	ec 36       	cpi	r30, 0x6C	; 108
    2f98:	f8 07       	cpc	r31, r24
    2f9a:	d9 f7       	brne	.-10     	; 0x2f92 <s_twi_tx_done+0xe>
			s_tx_d[idx] = s_tx_next_d[idx];
		}
		s_tx_len = s_tx_next_len;
		s_tx_next_len = 0;
    2f9c:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <s_tx_next_len>
    2fa0:	08 95       	ret

00002fa2 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2>:
	uint8_t err = 1;
	// TODO: implementation
	return err;
}

static void s_isr_twi_rcvd_command_closed_form(uint8_t data[], uint8_t cnt)
    2fa2:	cf 93       	push	r28
    2fa4:	df 93       	push	r29
				// do nothing
			}
		}
	}  // if (isGCA)

	else if ((data[0] == TWI_SLAVE_ADDR_SMARTLCD)) {
    2fa6:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <s_rx_d>
    2faa:	82 32       	cpi	r24, 0x22	; 34
    2fac:	09 f0       	breq	.+2      	; 0x2fb0 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xe>
    2fae:	d4 c3       	rjmp	.+1960   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
}

static void s_isr_twi_rcvd_command_closed_form(uint8_t data[], uint8_t cnt)
{
	uint8_t isGCA	= !data[0];
	uint8_t cmd		=  data[1];
    2fb0:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <s_rx_d+0x1>
		}
	}  // if (isGCA)

	else if ((data[0] == TWI_SLAVE_ADDR_SMARTLCD)) {
		/* unique command section for all modes */
		switch (cmd) {
    2fb4:	e2 30       	cpi	r30, 0x02	; 2
    2fb6:	51 f0       	breq	.+20     	; 0x2fcc <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x2a>
    2fb8:	e3 30       	cpi	r30, 0x03	; 3
    2fba:	c9 f0       	breq	.+50     	; 0x2fee <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x4c>
    2fbc:	e1 30       	cpi	r30, 0x01	; 1
    2fbe:	21 f5       	brne	.+72     	; 0x3008 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x66>
			case TWI_SMART_LCD_CMD_GET_VER:
			s_rx_ret_d[0] = I2C_VERSION;
    2fc0:	81 e1       	ldi	r24, 0x11	; 17
    2fc2:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <s_rx_ret_d>
			s_rx_ret_len = 1;
    2fc6:	e0 93 59 04 	sts	0x0459, r30	; 0x800459 <s_rx_ret_len>
    2fca:	c6 c3       	rjmp	.+1932   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
			return;

			case TWI_SMART_LCD_CMD_SET_MODE:
			s_isr_lcd_set_mode(data[2]);
    2fcc:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <s_rx_d+0x2>

/* ISR - interrupt disabled functions called within the TWI interrupt handling */

static void s_isr_lcd_set_mode(int8_t mode)
{
	g_SmartLCD_mode = mode;
    2fd0:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <g_SmartLCD_mode>
	if (mode) {
    2fd4:	88 23       	and	r24, r24
    2fd6:	31 f0       	breq	.+12     	; 0x2fe4 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x42>
		g_status.doAnimation = false;	// Stop animation demo
    2fd8:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <g_status>
    2fdc:	8e 7f       	andi	r24, 0xFE	; 254
    2fde:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <g_status>

		} else {
		// Reset display
		lcd_init();
    2fe2:	ba c3       	rjmp	.+1908   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
		lcd_test(0b11110001);			// Start animation again
    2fe4:	b1 df       	rcall	.-158    	; 0x2f48 <lcd_init>
					// do nothing for unsupported commands
				}
			}  // switch (cmd)
		}  // if (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC)
	}  // if ((data[0] == TWI_SLAVE_ADDR_SMARTLCD))
}
    2fe6:	81 ef       	ldi	r24, 0xF1	; 241
		g_status.doAnimation = false;	// Stop animation demo

		} else {
		// Reset display
		lcd_init();
		lcd_test(0b11110001);			// Start animation again
    2fe8:	df 91       	pop	r29
    2fea:	cf 91       	pop	r28
			case TWI_SMART_LCD_CMD_SET_MODE:
			s_isr_lcd_set_mode(data[2]);
			return;

			case TWI_SMART_LCD_CMD_GET_STATE:
			s_rx_ret_d[0] = g_showData.cmd ?  0x81 : 0x80;		// (Valid << 7) | (Busy << 0)
    2fec:	af ce       	rjmp	.-674    	; 0x2d4c <lcd_test>
    2fee:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <g_showData+0x2>
    2ff2:	88 23       	and	r24, r24
    2ff4:	11 f0       	breq	.+4      	; 0x2ffa <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x58>
    2ff6:	81 e8       	ldi	r24, 0x81	; 129
    2ff8:	01 c0       	rjmp	.+2      	; 0x2ffc <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x5a>
    2ffa:	80 e8       	ldi	r24, 0x80	; 128
    2ffc:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <s_rx_ret_d>
			s_rx_ret_len = 1;
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <s_rx_ret_len>
			return;

			default:
			s_rx_ret_len = 0;
    3006:	a8 c3       	rjmp	.+1872   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3008:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <s_rx_ret_len>
		}

		if (g_SmartLCD_mode == C_SMART_LCD_MODE_SMARTLCD) {
    300c:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <g_SmartLCD_mode>
    3010:	80 31       	cpi	r24, 0x10	; 16
    3012:	09 f0       	breq	.+2      	; 0x3016 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x74>
			if (!(g_showData.cmd)) {							// Do when no command in process only
    3014:	f6 c1       	rjmp	.+1004   	; 0x3402 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x460>
    3016:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <g_showData+0x2>
    301a:	81 11       	cpse	r24, r1
				switch (cmd) {
    301c:	9d c3       	rjmp	.+1850   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    301e:	e2 33       	cpi	r30, 0x32	; 50
    3020:	09 f4       	brne	.+2      	; 0x3024 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x82>
    3022:	dd c1       	rjmp	.+954    	; 0x33de <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x43c>
    3024:	80 f4       	brcc	.+32     	; 0x3046 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xa4>
    3026:	e4 31       	cpi	r30, 0x14	; 20
    3028:	09 f4       	brne	.+2      	; 0x302c <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x8a>
    302a:	e4 c1       	rjmp	.+968    	; 0x33f4 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x452>
    302c:	30 f4       	brcc	.+12     	; 0x303a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x98>
    302e:	e0 31       	cpi	r30, 0x10	; 16
    3030:	09 f0       	breq	.+2      	; 0x3034 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x92>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3032:	92 c3       	rjmp	.+1828   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3034:	e0 93 b6 04 	sts	0x04B6, r30	; 0x8004b6 <g_showData+0x2>
			s_rx_ret_len = 0;
		}

		if (g_SmartLCD_mode == C_SMART_LCD_MODE_SMARTLCD) {
			if (!(g_showData.cmd)) {							// Do when no command in process only
				switch (cmd) {
    3038:	8f c3       	rjmp	.+1822   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    303a:	e0 32       	cpi	r30, 0x20	; 32
    303c:	09 f4       	brne	.+2      	; 0x3040 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x9e>
    303e:	cf c1       	rjmp	.+926    	; 0x33de <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x43c>
    3040:	e0 33       	cpi	r30, 0x30	; 48
    3042:	81 f0       	breq	.+32     	; 0x3064 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xc2>
    3044:	89 c3       	rjmp	.+1810   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3046:	e6 33       	cpi	r30, 0x36	; 54
    3048:	09 f4       	brne	.+2      	; 0x304c <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xaa>
    304a:	c9 c1       	rjmp	.+914    	; 0x33de <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x43c>
    304c:	20 f4       	brcc	.+8      	; 0x3056 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xb4>
    304e:	e4 33       	cpi	r30, 0x34	; 52
    3050:	09 f4       	brne	.+2      	; 0x3054 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xb2>
    3052:	c5 c1       	rjmp	.+906    	; 0x33de <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x43c>
    3054:	81 c3       	rjmp	.+1794   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3056:	e8 33       	cpi	r30, 0x38	; 56
    3058:	09 f4       	brne	.+2      	; 0x305c <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xba>
    305a:	cc c1       	rjmp	.+920    	; 0x33f4 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x452>
    305c:	ea 33       	cpi	r30, 0x3A	; 58
    305e:	09 f4       	brne	.+2      	; 0x3062 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xc0>
    3060:	c9 c1       	rjmp	.+914    	; 0x33f4 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x452>
						s_isr_smartlcd_cmd_data2(cmd, data[2], data[3]);
					break;

					case TWI_SMART_LCD_CMD_WRITE:				// Write text of length (length, buffer...)
					{
						switch (data[2]) {
    3062:	7a c3       	rjmp	.+1780   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3064:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <s_rx_d+0x2>
    3068:	8e 2f       	mov	r24, r30
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	fc 01       	movw	r30, r24
    306e:	31 97       	sbiw	r30, 0x01	; 1
    3070:	ed 30       	cpi	r30, 0x0D	; 13
    3072:	f1 05       	cpc	r31, r1
    3074:	08 f0       	brcs	.+2      	; 0x3078 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xd6>
    3076:	70 c3       	rjmp	.+1760   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3078:	ec 5c       	subi	r30, 0xCC	; 204
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <s_rx_d+0x3>
    3080:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <__tablejump2__>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3084:	90 e3       	ldi	r25, 0x30	; 48
    3086:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    308a:	91 e0       	ldi	r25, 0x01	; 1
    308c:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    3090:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
							case 1:
								s_isr_smartlcd_cmd_data2(cmd, data[2], data[3]);
							break;

							case 2:
								s_isr_smartlcd_cmd_data3(cmd, data[2], data[3], data[4]);
    3094:	61 c3       	rjmp	.+1730   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3096:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    309a:	20 e3       	ldi	r18, 0x30	; 48
    309c:	20 93 b6 04 	sts	0x04B6, r18	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    30a0:	22 e0       	ldi	r18, 0x02	; 2
    30a2:	20 93 b7 04 	sts	0x04B7, r18	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    30a6:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    30aa:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <g_showData+0x5>
							case 2:
								s_isr_smartlcd_cmd_data3(cmd, data[2], data[3], data[4]);
							break;

							case 3:
								s_isr_smartlcd_cmd_data4(cmd, data[2], data[3], data[4], data[5]);
    30ae:	54 c3       	rjmp	.+1704   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    30b0:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <s_rx_d+0x5>
    30b4:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    30b8:	30 e3       	ldi	r19, 0x30	; 48
    30ba:	30 93 b6 04 	sts	0x04B6, r19	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    30be:	33 e0       	ldi	r19, 0x03	; 3
    30c0:	30 93 b7 04 	sts	0x04B7, r19	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    30c4:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    30c8:	20 93 b9 04 	sts	0x04B9, r18	; 0x8004b9 <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    30cc:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <g_showData+0x6>
							case 3:
								s_isr_smartlcd_cmd_data4(cmd, data[2], data[3], data[4], data[5]);
							break;

							case 4:
								s_isr_smartlcd_cmd_data5(cmd, data[2], data[3], data[4], data[5], data[6]);
    30d0:	43 c3       	rjmp	.+1670   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    30d2:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <s_rx_d+0x6>
    30d6:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <s_rx_d+0x5>
    30da:	30 91 60 04 	lds	r19, 0x0460	; 0x800460 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    30de:	40 e3       	ldi	r20, 0x30	; 48
    30e0:	40 93 b6 04 	sts	0x04B6, r20	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    30e4:	44 e0       	ldi	r20, 0x04	; 4
    30e6:	40 93 b7 04 	sts	0x04B7, r20	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    30ea:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    30ee:	30 93 b9 04 	sts	0x04B9, r19	; 0x8004b9 <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    30f2:	20 93 ba 04 	sts	0x04BA, r18	; 0x8004ba <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    30f6:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <g_showData+0x7>
							case 4:
								s_isr_smartlcd_cmd_data5(cmd, data[2], data[3], data[4], data[5], data[6]);
							break;

							case 5:
								s_isr_smartlcd_cmd_data6(cmd, data[2], data[3], data[4], data[5], data[6], data[7]);
    30fa:	2e c3       	rjmp	.+1628   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    30fc:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <s_rx_d+0x7>
    3100:	20 91 62 04 	lds	r18, 0x0462	; 0x800462 <s_rx_d+0x6>
    3104:	30 91 61 04 	lds	r19, 0x0461	; 0x800461 <s_rx_d+0x5>
    3108:	40 91 60 04 	lds	r20, 0x0460	; 0x800460 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    310c:	50 e3       	ldi	r21, 0x30	; 48
    310e:	50 93 b6 04 	sts	0x04B6, r21	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3112:	55 e0       	ldi	r21, 0x05	; 5
    3114:	50 93 b7 04 	sts	0x04B7, r21	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    3118:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    311c:	40 93 b9 04 	sts	0x04B9, r20	; 0x8004b9 <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    3120:	30 93 ba 04 	sts	0x04BA, r19	; 0x8004ba <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    3124:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    3128:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <g_showData+0x8>
							case 5:
								s_isr_smartlcd_cmd_data6(cmd, data[2], data[3], data[4], data[5], data[6], data[7]);
							break;

							case 6:
								s_isr_smartlcd_cmd_data7(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8]);
    312c:	15 c3       	rjmp	.+1578   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    312e:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <s_rx_d+0x8>
    3132:	20 91 63 04 	lds	r18, 0x0463	; 0x800463 <s_rx_d+0x7>
    3136:	30 91 62 04 	lds	r19, 0x0462	; 0x800462 <s_rx_d+0x6>
    313a:	40 91 61 04 	lds	r20, 0x0461	; 0x800461 <s_rx_d+0x5>
    313e:	50 91 60 04 	lds	r21, 0x0460	; 0x800460 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3142:	60 e3       	ldi	r22, 0x30	; 48
    3144:	60 93 b6 04 	sts	0x04B6, r22	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3148:	66 e0       	ldi	r22, 0x06	; 6
    314a:	60 93 b7 04 	sts	0x04B7, r22	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    314e:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    3152:	50 93 b9 04 	sts	0x04B9, r21	; 0x8004b9 <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    3156:	40 93 ba 04 	sts	0x04BA, r20	; 0x8004ba <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    315a:	30 93 bb 04 	sts	0x04BB, r19	; 0x8004bb <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    315e:	20 93 bc 04 	sts	0x04BC, r18	; 0x8004bc <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    3162:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <g_showData+0x9>
							case 6:
								s_isr_smartlcd_cmd_data7(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8]);
							break;

							case 7:
								s_isr_smartlcd_cmd_data8(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9]);
    3166:	f8 c2       	rjmp	.+1520   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3168:	90 91 65 04 	lds	r25, 0x0465	; 0x800465 <s_rx_d+0x9>
    316c:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <s_rx_d+0x8>
    3170:	30 91 63 04 	lds	r19, 0x0463	; 0x800463 <s_rx_d+0x7>
    3174:	40 91 62 04 	lds	r20, 0x0462	; 0x800462 <s_rx_d+0x6>
    3178:	50 91 61 04 	lds	r21, 0x0461	; 0x800461 <s_rx_d+0x5>
    317c:	60 91 60 04 	lds	r22, 0x0460	; 0x800460 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3180:	70 e3       	ldi	r23, 0x30	; 48
    3182:	70 93 b6 04 	sts	0x04B6, r23	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3186:	77 e0       	ldi	r23, 0x07	; 7
    3188:	70 93 b7 04 	sts	0x04B7, r23	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    318c:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    3190:	60 93 b9 04 	sts	0x04B9, r22	; 0x8004b9 <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    3194:	50 93 ba 04 	sts	0x04BA, r21	; 0x8004ba <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    3198:	40 93 bb 04 	sts	0x04BB, r20	; 0x8004bb <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    319c:	30 93 bc 04 	sts	0x04BC, r19	; 0x8004bc <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    31a0:	20 93 bd 04 	sts	0x04BD, r18	; 0x8004bd <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    31a4:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <g_showData+0xa>
							case 7:
								s_isr_smartlcd_cmd_data8(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9]);
							break;

							case 8:
								s_isr_smartlcd_cmd_data9(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10]);
    31a8:	d7 c2       	rjmp	.+1454   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    31aa:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <s_rx_d+0xa>
    31ae:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <s_rx_d+0x9>
    31b2:	30 91 64 04 	lds	r19, 0x0464	; 0x800464 <s_rx_d+0x8>
    31b6:	40 91 63 04 	lds	r20, 0x0463	; 0x800463 <s_rx_d+0x7>
    31ba:	50 91 62 04 	lds	r21, 0x0462	; 0x800462 <s_rx_d+0x6>
    31be:	60 91 61 04 	lds	r22, 0x0461	; 0x800461 <s_rx_d+0x5>
    31c2:	70 91 60 04 	lds	r23, 0x0460	; 0x800460 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    31c6:	e0 e3       	ldi	r30, 0x30	; 48
    31c8:	e0 93 b6 04 	sts	0x04B6, r30	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    31cc:	e8 e0       	ldi	r30, 0x08	; 8
    31ce:	e0 93 b7 04 	sts	0x04B7, r30	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    31d2:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    31d6:	70 93 b9 04 	sts	0x04B9, r23	; 0x8004b9 <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    31da:	60 93 ba 04 	sts	0x04BA, r22	; 0x8004ba <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    31de:	50 93 bb 04 	sts	0x04BB, r21	; 0x8004bb <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    31e2:	40 93 bc 04 	sts	0x04BC, r20	; 0x8004bc <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    31e6:	30 93 bd 04 	sts	0x04BD, r19	; 0x8004bd <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    31ea:	20 93 be 04 	sts	0x04BE, r18	; 0x8004be <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    31ee:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <g_showData+0xb>
							case 8:
								s_isr_smartlcd_cmd_data9(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10]);
							break;

							case 9:
								s_isr_smartlcd_cmd_data10(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11]);
    31f2:	b2 c2       	rjmp	.+1380   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    31f4:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <s_rx_d+0xb>
    31f8:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <s_rx_d+0xa>
    31fc:	30 91 65 04 	lds	r19, 0x0465	; 0x800465 <s_rx_d+0x9>
    3200:	40 91 64 04 	lds	r20, 0x0464	; 0x800464 <s_rx_d+0x8>
    3204:	50 91 63 04 	lds	r21, 0x0463	; 0x800463 <s_rx_d+0x7>
    3208:	60 91 62 04 	lds	r22, 0x0462	; 0x800462 <s_rx_d+0x6>
    320c:	70 91 61 04 	lds	r23, 0x0461	; 0x800461 <s_rx_d+0x5>
    3210:	e0 91 60 04 	lds	r30, 0x0460	; 0x800460 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3214:	f0 e3       	ldi	r31, 0x30	; 48
    3216:	f0 93 b6 04 	sts	0x04B6, r31	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    321a:	f9 e0       	ldi	r31, 0x09	; 9
    321c:	f0 93 b7 04 	sts	0x04B7, r31	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    3220:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    3224:	e0 93 b9 04 	sts	0x04B9, r30	; 0x8004b9 <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    3228:	70 93 ba 04 	sts	0x04BA, r23	; 0x8004ba <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    322c:	60 93 bb 04 	sts	0x04BB, r22	; 0x8004bb <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    3230:	50 93 bc 04 	sts	0x04BC, r21	; 0x8004bc <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    3234:	40 93 bd 04 	sts	0x04BD, r20	; 0x8004bd <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    3238:	30 93 be 04 	sts	0x04BE, r19	; 0x8004be <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    323c:	20 93 bf 04 	sts	0x04BF, r18	; 0x8004bf <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    3240:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <g_showData+0xc>
							case 9:
								s_isr_smartlcd_cmd_data10(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11]);
							break;

							case 10:
								s_isr_smartlcd_cmd_data11(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12]);
    3244:	89 c2       	rjmp	.+1298   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3246:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <s_rx_d+0xc>
    324a:	20 91 67 04 	lds	r18, 0x0467	; 0x800467 <s_rx_d+0xb>
    324e:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <s_rx_d+0xa>
    3252:	40 91 65 04 	lds	r20, 0x0465	; 0x800465 <s_rx_d+0x9>
    3256:	50 91 64 04 	lds	r21, 0x0464	; 0x800464 <s_rx_d+0x8>
    325a:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <s_rx_d+0x7>
    325e:	70 91 62 04 	lds	r23, 0x0462	; 0x800462 <s_rx_d+0x6>
    3262:	e0 91 61 04 	lds	r30, 0x0461	; 0x800461 <s_rx_d+0x5>
    3266:	f0 91 60 04 	lds	r31, 0x0460	; 0x800460 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    326a:	a0 e3       	ldi	r26, 0x30	; 48
    326c:	a0 93 b6 04 	sts	0x04B6, r26	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3270:	aa e0       	ldi	r26, 0x0A	; 10
    3272:	a0 93 b7 04 	sts	0x04B7, r26	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    3276:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    327a:	f0 93 b9 04 	sts	0x04B9, r31	; 0x8004b9 <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    327e:	e0 93 ba 04 	sts	0x04BA, r30	; 0x8004ba <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    3282:	70 93 bb 04 	sts	0x04BB, r23	; 0x8004bb <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    3286:	60 93 bc 04 	sts	0x04BC, r22	; 0x8004bc <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    328a:	50 93 bd 04 	sts	0x04BD, r21	; 0x8004bd <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    328e:	40 93 be 04 	sts	0x04BE, r20	; 0x8004be <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    3292:	30 93 bf 04 	sts	0x04BF, r19	; 0x8004bf <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    3296:	20 93 c0 04 	sts	0x04C0, r18	; 0x8004c0 <g_showData+0xc>
}

static void s_isr_smartlcd_cmd_data11(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10)
{
	s_isr_smartlcd_cmd_data10(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9);
	g_showData.data[10] = data10;
    329a:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <g_showData+0xd>
							case 10:
								s_isr_smartlcd_cmd_data11(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12]);
							break;

							case 11:
								s_isr_smartlcd_cmd_data12(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13]);
    329e:	5c c2       	rjmp	.+1208   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    32a0:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <s_rx_d+0xd>
    32a4:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <s_rx_d+0xc>
    32a8:	30 91 67 04 	lds	r19, 0x0467	; 0x800467 <s_rx_d+0xb>
    32ac:	40 91 66 04 	lds	r20, 0x0466	; 0x800466 <s_rx_d+0xa>
    32b0:	50 91 65 04 	lds	r21, 0x0465	; 0x800465 <s_rx_d+0x9>
    32b4:	60 91 64 04 	lds	r22, 0x0464	; 0x800464 <s_rx_d+0x8>
    32b8:	70 91 63 04 	lds	r23, 0x0463	; 0x800463 <s_rx_d+0x7>
    32bc:	e0 91 62 04 	lds	r30, 0x0462	; 0x800462 <s_rx_d+0x6>
    32c0:	f0 91 61 04 	lds	r31, 0x0461	; 0x800461 <s_rx_d+0x5>
    32c4:	a0 91 60 04 	lds	r26, 0x0460	; 0x800460 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    32c8:	b0 e3       	ldi	r27, 0x30	; 48
    32ca:	b0 93 b6 04 	sts	0x04B6, r27	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    32ce:	bb e0       	ldi	r27, 0x0B	; 11
    32d0:	b0 93 b7 04 	sts	0x04B7, r27	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    32d4:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    32d8:	a0 93 b9 04 	sts	0x04B9, r26	; 0x8004b9 <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    32dc:	f0 93 ba 04 	sts	0x04BA, r31	; 0x8004ba <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    32e0:	e0 93 bb 04 	sts	0x04BB, r30	; 0x8004bb <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    32e4:	70 93 bc 04 	sts	0x04BC, r23	; 0x8004bc <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    32e8:	60 93 bd 04 	sts	0x04BD, r22	; 0x8004bd <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    32ec:	50 93 be 04 	sts	0x04BE, r21	; 0x8004be <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    32f0:	40 93 bf 04 	sts	0x04BF, r20	; 0x8004bf <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    32f4:	30 93 c0 04 	sts	0x04C0, r19	; 0x8004c0 <g_showData+0xc>
}

static void s_isr_smartlcd_cmd_data11(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10)
{
	s_isr_smartlcd_cmd_data10(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9);
	g_showData.data[10] = data10;
    32f8:	20 93 c1 04 	sts	0x04C1, r18	; 0x8004c1 <g_showData+0xd>
}

static void s_isr_smartlcd_cmd_data12(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11)
{
	s_isr_smartlcd_cmd_data11(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10);
	g_showData.data[11] = data11;
    32fc:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <g_showData+0xe>
							case 11:
								s_isr_smartlcd_cmd_data12(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13]);
							break;

							case 12:
								s_isr_smartlcd_cmd_data13(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13], data[14]);
    3300:	2b c2       	rjmp	.+1110   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3302:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <s_rx_d+0xe>
    3306:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <s_rx_d+0xd>
    330a:	30 91 68 04 	lds	r19, 0x0468	; 0x800468 <s_rx_d+0xc>
    330e:	40 91 67 04 	lds	r20, 0x0467	; 0x800467 <s_rx_d+0xb>
    3312:	50 91 66 04 	lds	r21, 0x0466	; 0x800466 <s_rx_d+0xa>
    3316:	60 91 65 04 	lds	r22, 0x0465	; 0x800465 <s_rx_d+0x9>
    331a:	70 91 64 04 	lds	r23, 0x0464	; 0x800464 <s_rx_d+0x8>
    331e:	e0 91 63 04 	lds	r30, 0x0463	; 0x800463 <s_rx_d+0x7>
    3322:	f0 91 62 04 	lds	r31, 0x0462	; 0x800462 <s_rx_d+0x6>
    3326:	a0 91 61 04 	lds	r26, 0x0461	; 0x800461 <s_rx_d+0x5>
    332a:	b0 91 60 04 	lds	r27, 0x0460	; 0x800460 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    332e:	c0 e3       	ldi	r28, 0x30	; 48
    3330:	c0 93 b6 04 	sts	0x04B6, r28	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3334:	cc e0       	ldi	r28, 0x0C	; 12
    3336:	c0 93 b7 04 	sts	0x04B7, r28	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    333a:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    333e:	b0 93 b9 04 	sts	0x04B9, r27	; 0x8004b9 <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    3342:	a0 93 ba 04 	sts	0x04BA, r26	; 0x8004ba <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    3346:	f0 93 bb 04 	sts	0x04BB, r31	; 0x8004bb <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    334a:	e0 93 bc 04 	sts	0x04BC, r30	; 0x8004bc <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    334e:	70 93 bd 04 	sts	0x04BD, r23	; 0x8004bd <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    3352:	60 93 be 04 	sts	0x04BE, r22	; 0x8004be <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    3356:	50 93 bf 04 	sts	0x04BF, r21	; 0x8004bf <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    335a:	40 93 c0 04 	sts	0x04C0, r20	; 0x8004c0 <g_showData+0xc>
}

static void s_isr_smartlcd_cmd_data11(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10)
{
	s_isr_smartlcd_cmd_data10(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9);
	g_showData.data[10] = data10;
    335e:	30 93 c1 04 	sts	0x04C1, r19	; 0x8004c1 <g_showData+0xd>
}

static void s_isr_smartlcd_cmd_data12(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11)
{
	s_isr_smartlcd_cmd_data11(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10);
	g_showData.data[11] = data11;
    3362:	20 93 c2 04 	sts	0x04C2, r18	; 0x8004c2 <g_showData+0xe>
}

static void s_isr_smartlcd_cmd_data13(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11, uint8_t data12)
{
	s_isr_smartlcd_cmd_data12(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11);
	g_showData.data[12] = data12;
    3366:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <g_showData+0xf>
							case 12:
								s_isr_smartlcd_cmd_data13(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13], data[14]);
							break;

							case 13:
								s_isr_smartlcd_cmd_data14(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);
    336a:	f6 c1       	rjmp	.+1004   	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    336c:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <s_rx_d+0xf>
    3370:	20 91 6a 04 	lds	r18, 0x046A	; 0x80046a <s_rx_d+0xe>
    3374:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <s_rx_d+0xd>
    3378:	40 91 68 04 	lds	r20, 0x0468	; 0x800468 <s_rx_d+0xc>
    337c:	50 91 67 04 	lds	r21, 0x0467	; 0x800467 <s_rx_d+0xb>
    3380:	60 91 66 04 	lds	r22, 0x0466	; 0x800466 <s_rx_d+0xa>
    3384:	70 91 65 04 	lds	r23, 0x0465	; 0x800465 <s_rx_d+0x9>
    3388:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <s_rx_d+0x8>
    338c:	f0 91 63 04 	lds	r31, 0x0463	; 0x800463 <s_rx_d+0x7>
    3390:	a0 91 62 04 	lds	r26, 0x0462	; 0x800462 <s_rx_d+0x6>
    3394:	b0 91 61 04 	lds	r27, 0x0461	; 0x800461 <s_rx_d+0x5>
    3398:	c0 91 60 04 	lds	r28, 0x0460	; 0x800460 <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    339c:	d0 e3       	ldi	r29, 0x30	; 48
    339e:	d0 93 b6 04 	sts	0x04B6, r29	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    33a2:	dd e0       	ldi	r29, 0x0D	; 13
    33a4:	d0 93 b7 04 	sts	0x04B7, r29	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    33a8:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    33ac:	c0 93 b9 04 	sts	0x04B9, r28	; 0x8004b9 <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    33b0:	b0 93 ba 04 	sts	0x04BA, r27	; 0x8004ba <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    33b4:	a0 93 bb 04 	sts	0x04BB, r26	; 0x8004bb <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    33b8:	f0 93 bc 04 	sts	0x04BC, r31	; 0x8004bc <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    33bc:	e0 93 bd 04 	sts	0x04BD, r30	; 0x8004bd <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    33c0:	70 93 be 04 	sts	0x04BE, r23	; 0x8004be <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    33c4:	60 93 bf 04 	sts	0x04BF, r22	; 0x8004bf <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    33c8:	50 93 c0 04 	sts	0x04C0, r21	; 0x8004c0 <g_showData+0xc>
}

static void s_isr_smartlcd_cmd_data11(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10)
{
	s_isr_smartlcd_cmd_data10(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9);
	g_showData.data[10] = data10;
    33cc:	40 93 c1 04 	sts	0x04C1, r20	; 0x8004c1 <g_showData+0xd>
}

static void s_isr_smartlcd_cmd_data12(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11)
{
	s_isr_smartlcd_cmd_data11(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10);
	g_showData.data[11] = data11;
    33d0:	30 93 c2 04 	sts	0x04C2, r19	; 0x8004c2 <g_showData+0xe>
}

static void s_isr_smartlcd_cmd_data13(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11, uint8_t data12)
{
	s_isr_smartlcd_cmd_data12(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11);
	g_showData.data[12] = data12;
    33d4:	20 93 c3 04 	sts	0x04C3, r18	; 0x8004c3 <g_showData+0xf>
}

static void s_isr_smartlcd_cmd_data14(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11, uint8_t data12, uint8_t data13)
{
	s_isr_smartlcd_cmd_data13(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12);
	g_showData.data[13] = data13;
    33d8:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <g_showData+0x10>
					case TWI_SMART_LCD_CMD_DRAW_RECT:			// Draw rectangular frame with pencil's start position with dimension (width, height)
						s_isr_smartlcd_cmd_data2(cmd, data[2], data[3]);
					break;

					case TWI_SMART_LCD_CMD_DRAW_FILLED_RECT:	// Draw filled rectangular frame with pencil's start position with dimension (width, height)
						s_isr_smartlcd_cmd_data2(cmd, data[2], data[3]);
    33dc:	bd c1       	rjmp	.+890    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    33de:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <s_rx_d+0x3>
    33e2:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <s_rx_d+0x2>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    33e6:	e0 93 b6 04 	sts	0x04B6, r30	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    33ea:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    33ee:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <g_showData+0x4>
					case TWI_SMART_LCD_CMD_DRAW_CIRC:			// Draw circle or ellipse from the pencil's center point with (radius)
						s_isr_smartlcd_cmd_data1(cmd, data[2]);
					break;

					case TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC:	// Draw filled circle or ellipse from the pencil's center point with (radius)
						s_isr_smartlcd_cmd_data1(cmd, data[2]);
    33f2:	b2 c1       	rjmp	.+868    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    33f4:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <s_rx_d+0x2>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    33f8:	e0 93 b6 04 	sts	0x04B6, r30	; 0x8004b6 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    33fc:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <g_showData+0x3>
					}
				}  // switch (cmd)
			}  // if (!(g_showData.cmd))
		}  // if (g_SmartLCD_mode == C_SMART_LCD_MODE_SMARTLCD)

		else if (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC) {
    3400:	ab c1       	rjmp	.+854    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3402:	80 32       	cpi	r24, 0x20	; 32
    3404:	09 f0       	breq	.+2      	; 0x3408 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x466>
			switch (cmd) {
    3406:	a8 c1       	rjmp	.+848    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3408:	8e 2f       	mov	r24, r30
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	fc 01       	movw	r30, r24
    340e:	e0 58       	subi	r30, 0x80	; 128
    3410:	f1 09       	sbc	r31, r1
    3412:	ee 30       	cpi	r30, 0x0E	; 14
    3414:	f1 05       	cpc	r31, r1
    3416:	08 f0       	brcs	.+2      	; 0x341a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x478>
    3418:	9f c1       	rjmp	.+830    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    341a:	ef 5b       	subi	r30, 0xBF	; 191
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <__tablejump2__>
				case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
					s_isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100(data[2], (uint16_t) (data[3] | (data[4] << 8)), (int16_t) (data[5] | (data[6] << 8)));
    3422:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <s_rx_d+0x5>
    3426:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <s_rx_d+0x6>
    342a:	20 91 5f 04 	lds	r18, 0x045F	; 0x80045f <s_rx_d+0x3>
    342e:	30 91 60 04 	lds	r19, 0x0460	; 0x800460 <s_rx_d+0x4>
    3432:	40 91 5e 04 	lds	r20, 0x045E	; 0x80045e <s_rx_d+0x2>


static void s_isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100(uint8_t clk_state, uint16_t phaseVolt1000, int16_t phaseDeg100)
{
	// interrupt is already disabled, here
	if ((g_showData.clkState_clk_state     != clk_state    )  ||
    3436:	50 91 de 04 	lds	r21, 0x04DE	; 0x8004de <g_showData+0x2a>
    343a:	45 13       	cpse	r20, r21
    343c:	0f c0       	rjmp	.+30     	; 0x345c <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x4ba>
    343e:	60 91 ca 04 	lds	r22, 0x04CA	; 0x8004ca <g_showData+0x16>
    3442:	70 91 cb 04 	lds	r23, 0x04CB	; 0x8004cb <g_showData+0x17>
    3446:	62 17       	cp	r22, r18
    3448:	73 07       	cpc	r23, r19
	(g_showData.clkState_phaseVolt1000 != phaseVolt1000)  ||
    344a:	41 f4       	brne	.+16     	; 0x345c <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x4ba>
    344c:	60 91 cc 04 	lds	r22, 0x04CC	; 0x8004cc <g_showData+0x18>
    3450:	70 91 cd 04 	lds	r23, 0x04CD	; 0x8004cd <g_showData+0x19>
    3454:	86 17       	cp	r24, r22
    3456:	97 07       	cpc	r25, r23
    3458:	09 f4       	brne	.+2      	; 0x345c <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x4ba>
	(g_showData.clkState_phaseDeg100   != phaseDeg100  )) {
		g_showData.newClkState            = true;
    345a:	7e c1       	rjmp	.+764    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    345c:	50 91 b4 04 	lds	r21, 0x04B4	; 0x8004b4 <g_showData>
    3460:	51 60       	ori	r21, 0x01	; 1
    3462:	50 93 b4 04 	sts	0x04B4, r21	; 0x8004b4 <g_showData>
		g_showData.clkState_clk_state     = clk_state;
    3466:	40 93 de 04 	sts	0x04DE, r20	; 0x8004de <g_showData+0x2a>
		g_showData.clkState_phaseVolt1000 = phaseVolt1000;
    346a:	30 93 cb 04 	sts	0x04CB, r19	; 0x8004cb <g_showData+0x17>
    346e:	20 93 ca 04 	sts	0x04CA, r18	; 0x8004ca <g_showData+0x16>
		g_showData.clkState_phaseDeg100   = phaseDeg100;
    3472:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <g_showData+0x19>
    3476:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <g_showData+0x18>
				case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
					s_isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100(data[2], (uint16_t) (data[3] | (data[4] << 8)), (int16_t) (data[5] | (data[6] << 8)));
				break;

				case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
					s_isr_lcd_10mhz_ref_osc_show_date(data[2] | (data[3] << 8), data[4], data[5]);
    347a:	6e c1       	rjmp	.+732    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    347c:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <s_rx_d+0x5>
    3480:	30 91 60 04 	lds	r19, 0x0460	; 0x800460 <s_rx_d+0x4>
    3484:	40 91 5e 04 	lds	r20, 0x045E	; 0x80045e <s_rx_d+0x2>
    3488:	50 91 5f 04 	lds	r21, 0x045F	; 0x80045f <s_rx_d+0x3>
}

static void s_isr_lcd_10mhz_ref_osc_show_date(uint16_t year, int8_t month, uint8_t day)
{
	// interrupt is already disabled, here
	if (g_showData.date_year != year ||
    348c:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <g_showData+0x1a>
    3490:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <g_showData+0x1b>
    3494:	84 17       	cp	r24, r20
    3496:	95 07       	cpc	r25, r21
    3498:	79 f4       	brne	.+30     	; 0x34b8 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x516>
    349a:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <g_showData+0x2b>
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	63 2f       	mov	r22, r19
    34a2:	03 2e       	mov	r0, r19
    34a4:	00 0c       	add	r0, r0
    34a6:	77 0b       	sbc	r23, r23
    34a8:	86 17       	cp	r24, r22
    34aa:	97 07       	cpc	r25, r23
	g_showData.date_month != month ||
    34ac:	29 f4       	brne	.+10     	; 0x34b8 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x516>
    34ae:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <g_showData+0x2c>
    34b2:	28 17       	cp	r18, r24
    34b4:	09 f4       	brne	.+2      	; 0x34b8 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x516>
	g_showData.date_day != day) {
		g_showData.newDate = true;
    34b6:	50 c1       	rjmp	.+672    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    34b8:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <g_showData>
    34bc:	82 60       	ori	r24, 0x02	; 2
    34be:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <g_showData>
		g_showData.date_year = year;
    34c2:	50 93 cf 04 	sts	0x04CF, r21	; 0x8004cf <g_showData+0x1b>
    34c6:	40 93 ce 04 	sts	0x04CE, r20	; 0x8004ce <g_showData+0x1a>
		g_showData.date_month = month;
    34ca:	30 93 df 04 	sts	0x04DF, r19	; 0x8004df <g_showData+0x2b>
		g_showData.date_day = day;
    34ce:	20 93 e0 04 	sts	0x04E0, r18	; 0x8004e0 <g_showData+0x2c>
				case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
					s_isr_lcd_10mhz_ref_osc_show_date(data[2] | (data[3] << 8), data[4], data[5]);
				break;

				case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
					s_isr_lcd_10mhz_ref_osc_show_time(data[2], data[3], data[4]);
    34d2:	42 c1       	rjmp	.+644    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    34d4:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <s_rx_d+0x4>
    34d8:	30 91 5f 04 	lds	r19, 0x045F	; 0x80045f <s_rx_d+0x3>
    34dc:	40 91 5e 04 	lds	r20, 0x045E	; 0x80045e <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_time(uint8_t hour, int8_t minute, uint8_t second)
{
	// interrupt is already disabled, here
	if (g_showData.time_hour != hour ||
    34e0:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <g_showData+0x2d>
    34e4:	48 13       	cpse	r20, r24
    34e6:	0f c0       	rjmp	.+30     	; 0x3506 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x564>
    34e8:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <g_showData+0x2e>
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	63 2f       	mov	r22, r19
    34f0:	03 2e       	mov	r0, r19
    34f2:	00 0c       	add	r0, r0
    34f4:	77 0b       	sbc	r23, r23
    34f6:	86 17       	cp	r24, r22
    34f8:	97 07       	cpc	r25, r23
	g_showData.time_minute != minute ||
    34fa:	29 f4       	brne	.+10     	; 0x3506 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x564>
    34fc:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <g_showData+0x2f>
    3500:	28 17       	cp	r18, r24
    3502:	09 f4       	brne	.+2      	; 0x3506 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x564>
	g_showData.time_second != second) {
		g_showData.newTime = true;
    3504:	29 c1       	rjmp	.+594    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3506:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <g_showData>
    350a:	84 60       	ori	r24, 0x04	; 4
    350c:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <g_showData>
		g_showData.time_hour = hour;
    3510:	40 93 e1 04 	sts	0x04E1, r20	; 0x8004e1 <g_showData+0x2d>
		g_showData.time_minute = minute;
    3514:	30 93 e2 04 	sts	0x04E2, r19	; 0x8004e2 <g_showData+0x2e>
		g_showData.time_second = second;
    3518:	20 93 e3 04 	sts	0x04E3, r18	; 0x8004e3 <g_showData+0x2f>
    351c:	1d c1       	rjmp	.+570    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    351e:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <s_rx_d+0x4>
    3522:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <s_rx_d+0x5>
				case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
					s_isr_lcd_10mhz_ref_osc_show_time(data[2], data[3], data[4]);
				break;

				case TWI_SMART_LCD_CMD_SHOW_PPB:
					s_isr_lcd_10mhz_ref_osc_show_ppm((int16_t) (data[2] | (data[3] << 8)), data[4] | (data[5] << 8));
    3526:	20 91 5e 04 	lds	r18, 0x045E	; 0x80045e <s_rx_d+0x2>
    352a:	30 91 5f 04 	lds	r19, 0x045F	; 0x80045f <s_rx_d+0x3>
}

static void s_isr_lcd_10mhz_ref_osc_show_ppm(int16_t ppm_int, uint16_t ppm_frac1000)
{
	// interrupt is already disabled, here
	if (g_showData.ppb_int != ppm_int ||
    352e:	40 91 d0 04 	lds	r20, 0x04D0	; 0x8004d0 <g_showData+0x1c>
    3532:	50 91 d1 04 	lds	r21, 0x04D1	; 0x8004d1 <g_showData+0x1d>
    3536:	24 17       	cp	r18, r20
    3538:	35 07       	cpc	r19, r21
    353a:	41 f4       	brne	.+16     	; 0x354c <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x5aa>
    353c:	40 91 d2 04 	lds	r20, 0x04D2	; 0x8004d2 <g_showData+0x1e>
    3540:	50 91 d3 04 	lds	r21, 0x04D3	; 0x8004d3 <g_showData+0x1f>
    3544:	48 17       	cp	r20, r24
    3546:	59 07       	cpc	r21, r25
    3548:	09 f4       	brne	.+2      	; 0x354c <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x5aa>
	g_showData.ppb_frac1000 != ppm_frac1000) {
		g_showData.newPpb = true;
    354a:	06 c1       	rjmp	.+524    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    354c:	40 91 b4 04 	lds	r20, 0x04B4	; 0x8004b4 <g_showData>
    3550:	48 60       	ori	r20, 0x08	; 8
    3552:	40 93 b4 04 	sts	0x04B4, r20	; 0x8004b4 <g_showData>
		g_showData.ppb_int = ppm_int;
    3556:	30 93 d1 04 	sts	0x04D1, r19	; 0x8004d1 <g_showData+0x1d>
    355a:	20 93 d0 04 	sts	0x04D0, r18	; 0x8004d0 <g_showData+0x1c>
		g_showData.ppb_frac1000 = ppm_frac1000;
    355e:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <g_showData+0x1f>
    3562:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <g_showData+0x1e>
				case TWI_SMART_LCD_CMD_SHOW_PPB:
					s_isr_lcd_10mhz_ref_osc_show_ppm((int16_t) (data[2] | (data[3] << 8)), data[4] | (data[5] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
					s_isr_lcd_10mhz_ref_osc_show_pwm(data[2], data[3]);
    3566:	f8 c0       	rjmp	.+496    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3568:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <s_rx_d+0x3>
    356c:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pwm(uint8_t pwm_int, uint8_t pwm_frac256)
{
	// interrupt is already disabled, here
	if (g_showData.pwm_int != pwm_int ||
    3570:	20 91 e4 04 	lds	r18, 0x04E4	; 0x8004e4 <g_showData+0x30>
    3574:	92 13       	cpse	r25, r18
    3576:	05 c0       	rjmp	.+10     	; 0x3582 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x5e0>
    3578:	20 91 e5 04 	lds	r18, 0x04E5	; 0x8004e5 <g_showData+0x31>
    357c:	82 17       	cp	r24, r18
    357e:	09 f4       	brne	.+2      	; 0x3582 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x5e0>
	g_showData.pwm_frac256 != pwm_frac256) {
		g_showData.newPwm = true;
    3580:	eb c0       	rjmp	.+470    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3582:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <g_showData>
    3586:	20 61       	ori	r18, 0x10	; 16
    3588:	20 93 b4 04 	sts	0x04B4, r18	; 0x8004b4 <g_showData>
		g_showData.pwm_int = pwm_int;
    358c:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <g_showData+0x30>
		g_showData.pwm_frac256 = pwm_frac256;
    3590:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <g_showData+0x31>
    3594:	e1 c0       	rjmp	.+450    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3596:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <s_rx_d+0x3>
    359a:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <s_rx_d+0x4>
				case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
					s_isr_lcd_10mhz_ref_osc_show_pwm(data[2], data[3]);
				break;

				case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
					s_isr_lcd_10mhz_ref_osc_show_pv(data[2], data[3] | (data[4] << 8));
    359e:	20 91 5e 04 	lds	r18, 0x045E	; 0x80045e <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pv(uint8_t pv_int, uint16_t pv_frac1000)
{
	// interrupt is already disabled, here
	if (g_showData.pv_int != pv_int ||
    35a2:	30 91 e6 04 	lds	r19, 0x04E6	; 0x8004e6 <g_showData+0x32>
    35a6:	23 13       	cpse	r18, r19
    35a8:	08 c0       	rjmp	.+16     	; 0x35ba <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x618>
    35aa:	40 91 d4 04 	lds	r20, 0x04D4	; 0x8004d4 <g_showData+0x20>
    35ae:	50 91 d5 04 	lds	r21, 0x04D5	; 0x8004d5 <g_showData+0x21>
    35b2:	48 17       	cp	r20, r24
    35b4:	59 07       	cpc	r21, r25
    35b6:	09 f4       	brne	.+2      	; 0x35ba <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x618>
	g_showData.pv_frac1000 != pv_frac1000) {
		g_showData.newPv = true;
    35b8:	cf c0       	rjmp	.+414    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    35ba:	30 91 b4 04 	lds	r19, 0x04B4	; 0x8004b4 <g_showData>
    35be:	30 62       	ori	r19, 0x20	; 32
    35c0:	30 93 b4 04 	sts	0x04B4, r19	; 0x8004b4 <g_showData>
		g_showData.pv_int = pv_int;
    35c4:	20 93 e6 04 	sts	0x04E6, r18	; 0x8004e6 <g_showData+0x32>
		g_showData.pv_frac1000 = pv_frac1000;
    35c8:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <g_showData+0x21>
    35cc:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <g_showData+0x20>
				case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
					s_isr_lcd_10mhz_ref_osc_show_pv(data[2], data[3] | (data[4] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_SATS:
					s_isr_lcd_10mhz_ref_osc_show_sat_use(data[2], data[3], data[4]);
    35d0:	c3 c0       	rjmp	.+390    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    35d2:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <s_rx_d+0x4>
    35d6:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <s_rx_d+0x3>
    35da:	20 91 5e 04 	lds	r18, 0x045E	; 0x80045e <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_sat_use(uint8_t sat_west, uint8_t sat_east, uint8_t sat_used)
{
	// interrupt is already disabled, here
	if (g_showData.satUse_west != sat_west ||
    35de:	30 91 e7 04 	lds	r19, 0x04E7	; 0x8004e7 <g_showData+0x33>
    35e2:	23 13       	cpse	r18, r19
    35e4:	09 c0       	rjmp	.+18     	; 0x35f8 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x656>
    35e6:	30 91 e8 04 	lds	r19, 0x04E8	; 0x8004e8 <g_showData+0x34>
    35ea:	93 13       	cpse	r25, r19
	g_showData.satUse_east != sat_east ||
    35ec:	05 c0       	rjmp	.+10     	; 0x35f8 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x656>
    35ee:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <g_showData+0x35>
    35f2:	83 17       	cp	r24, r19
    35f4:	09 f4       	brne	.+2      	; 0x35f8 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x656>
	g_showData.satUse_used != sat_used) {
		g_showData.newSatUse = true;
    35f6:	b0 c0       	rjmp	.+352    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    35f8:	30 91 b4 04 	lds	r19, 0x04B4	; 0x8004b4 <g_showData>
    35fc:	30 64       	ori	r19, 0x40	; 64
    35fe:	30 93 b4 04 	sts	0x04B4, r19	; 0x8004b4 <g_showData>
		g_showData.satUse_west = sat_west;
    3602:	20 93 e7 04 	sts	0x04E7, r18	; 0x8004e7 <g_showData+0x33>
		g_showData.satUse_east = sat_east;
    3606:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <g_showData+0x34>
		g_showData.satUse_used = sat_used;
    360a:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <g_showData+0x35>
    360e:	a4 c0       	rjmp	.+328    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3610:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <s_rx_d+0x2>
    3614:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <s_rx_d+0x3>
}

static void s_isr_lcd_10mhz_ref_osc_show_sat_dop(uint16_t sat_dop100)
{
	// interrupt is already disabled, here
	if (g_showData.satDop_dop100 != sat_dop100) {
    3618:	20 91 d6 04 	lds	r18, 0x04D6	; 0x8004d6 <g_showData+0x22>
    361c:	30 91 d7 04 	lds	r19, 0x04D7	; 0x8004d7 <g_showData+0x23>
    3620:	28 17       	cp	r18, r24
    3622:	39 07       	cpc	r19, r25
    3624:	09 f4       	brne	.+2      	; 0x3628 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x686>
		g_showData.newSatDop = true;
    3626:	98 c0       	rjmp	.+304    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3628:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <g_showData>
    362c:	20 68       	ori	r18, 0x80	; 128
    362e:	20 93 b4 04 	sts	0x04B4, r18	; 0x8004b4 <g_showData>
		g_showData.satDop_dop100 = sat_dop100;
    3632:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <g_showData+0x23>
    3636:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <g_showData+0x22>
				case TWI_SMART_LCD_CMD_SHOW_DOP:
					s_isr_lcd_10mhz_ref_osc_show_sat_dop(data[2] | (data[3] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
					s_isr_lcd_10mhz_ref_osc_show_pos_state(data[2], data[3]);
    363a:	8e c0       	rjmp	.+284    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    363c:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <s_rx_d+0x3>
    3640:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pos_state(uint8_t state_fi, uint8_t state_m2)
{
	// interrupt is already disabled, here
	if (g_showData.posState_fi != state_fi ||
    3644:	20 91 ea 04 	lds	r18, 0x04EA	; 0x8004ea <g_showData+0x36>
    3648:	92 13       	cpse	r25, r18
    364a:	05 c0       	rjmp	.+10     	; 0x3656 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x6b4>
    364c:	20 91 eb 04 	lds	r18, 0x04EB	; 0x8004eb <g_showData+0x37>
    3650:	82 17       	cp	r24, r18
    3652:	09 f4       	brne	.+2      	; 0x3656 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x6b4>
	g_showData.posState_m2 != state_m2) {
		g_showData.newPosState = true;
    3654:	81 c0       	rjmp	.+258    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3656:	20 91 b5 04 	lds	r18, 0x04B5	; 0x8004b5 <g_showData+0x1>
    365a:	21 60       	ori	r18, 0x01	; 1
    365c:	20 93 b5 04 	sts	0x04B5, r18	; 0x8004b5 <g_showData+0x1>
		g_showData.posState_fi = state_fi;
    3660:	90 93 ea 04 	sts	0x04EA, r25	; 0x8004ea <g_showData+0x36>
		g_showData.posState_m2 = state_m2;
    3664:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <g_showData+0x37>
    3668:	77 c0       	rjmp	.+238    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    366a:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <s_rx_d+0x5>
    366e:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <s_rx_d+0x6>
				case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
					s_isr_lcd_10mhz_ref_osc_show_pos_state(data[2], data[3]);
				break;

				case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
					s_isr_lcd_10mhz_ref_osc_show_pos_lat(data[2], data[3], data[4], data[5] | (data[6] << 8));
    3672:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <s_rx_d+0x4>
    3676:	30 91 5f 04 	lds	r19, 0x045F	; 0x80045f <s_rx_d+0x3>
    367a:	40 91 5e 04 	lds	r20, 0x045E	; 0x80045e <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pos_lat(uint8_t lat_sgn, uint8_t lat_deg, uint8_t lat_min_int, uint16_t lat_min_frac10000)
{
	// interrupt is already disabled, here
	if (g_showData.posLat_sgn != lat_sgn ||
    367e:	50 91 ec 04 	lds	r21, 0x04EC	; 0x8004ec <g_showData+0x38>
    3682:	45 13       	cpse	r20, r21
    3684:	10 c0       	rjmp	.+32     	; 0x36a6 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x704>
    3686:	50 91 ed 04 	lds	r21, 0x04ED	; 0x8004ed <g_showData+0x39>
    368a:	35 13       	cpse	r19, r21
	g_showData.posLat_deg != lat_deg ||
    368c:	0c c0       	rjmp	.+24     	; 0x36a6 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x704>
    368e:	50 91 ee 04 	lds	r21, 0x04EE	; 0x8004ee <g_showData+0x3a>
    3692:	25 13       	cpse	r18, r21
	g_showData.posLat_min_int != lat_min_int ||
	g_showData.posLat_min_int != lat_min_int ||
    3694:	08 c0       	rjmp	.+16     	; 0x36a6 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x704>
    3696:	60 91 d8 04 	lds	r22, 0x04D8	; 0x8004d8 <g_showData+0x24>
    369a:	70 91 d9 04 	lds	r23, 0x04D9	; 0x8004d9 <g_showData+0x25>
    369e:	68 17       	cp	r22, r24
    36a0:	79 07       	cpc	r23, r25
    36a2:	09 f4       	brne	.+2      	; 0x36a6 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x704>
	g_showData.posLat_min_frac10000 != lat_min_frac10000) {
		g_showData.newPosLat = true;
    36a4:	59 c0       	rjmp	.+178    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    36a6:	50 91 b5 04 	lds	r21, 0x04B5	; 0x8004b5 <g_showData+0x1>
    36aa:	52 60       	ori	r21, 0x02	; 2
    36ac:	50 93 b5 04 	sts	0x04B5, r21	; 0x8004b5 <g_showData+0x1>
		g_showData.posLat_sgn = lat_sgn;
    36b0:	40 93 ec 04 	sts	0x04EC, r20	; 0x8004ec <g_showData+0x38>
		g_showData.posLat_deg = lat_deg;
    36b4:	30 93 ed 04 	sts	0x04ED, r19	; 0x8004ed <g_showData+0x39>
		g_showData.posLat_min_int = lat_min_int;
    36b8:	20 93 ee 04 	sts	0x04EE, r18	; 0x8004ee <g_showData+0x3a>
		g_showData.posLat_min_frac10000 = lat_min_frac10000;
    36bc:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <g_showData+0x25>
    36c0:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <g_showData+0x24>
    36c4:	49 c0       	rjmp	.+146    	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    36c6:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <s_rx_d+0x5>
    36ca:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <s_rx_d+0x6>
				case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
					s_isr_lcd_10mhz_ref_osc_show_pos_lat(data[2], data[3], data[4], data[5] | (data[6] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_POS_LON:
					s_isr_lcd_10mhz_ref_osc_show_pos_lon(data[2], data[3], data[4], data[5] | (data[6] << 8));
    36ce:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <s_rx_d+0x4>
    36d2:	30 91 5f 04 	lds	r19, 0x045F	; 0x80045f <s_rx_d+0x3>
    36d6:	40 91 5e 04 	lds	r20, 0x045E	; 0x80045e <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pos_lon(uint8_t lon_sgn, uint8_t lon_deg, uint8_t lon_min_int, uint16_t lon_min_frac10000)
{
	// interrupt is already disabled, here
	if (g_showData.posLon_sgn != lon_sgn ||
    36da:	50 91 ef 04 	lds	r21, 0x04EF	; 0x8004ef <g_showData+0x3b>
    36de:	45 13       	cpse	r20, r21
    36e0:	0f c0       	rjmp	.+30     	; 0x3700 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x75e>
    36e2:	50 91 f0 04 	lds	r21, 0x04F0	; 0x8004f0 <g_showData+0x3c>
    36e6:	35 13       	cpse	r19, r21
	g_showData.posLon_deg != lon_deg ||
	g_showData.posLon_deg != lon_deg ||
    36e8:	0b c0       	rjmp	.+22     	; 0x3700 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x75e>
    36ea:	50 91 f1 04 	lds	r21, 0x04F1	; 0x8004f1 <g_showData+0x3d>
    36ee:	25 13       	cpse	r18, r21
	g_showData.posLon_min_int != lon_min_int ||
    36f0:	07 c0       	rjmp	.+14     	; 0x3700 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x75e>
    36f2:	60 91 da 04 	lds	r22, 0x04DA	; 0x8004da <g_showData+0x26>
    36f6:	70 91 db 04 	lds	r23, 0x04DB	; 0x8004db <g_showData+0x27>
    36fa:	68 17       	cp	r22, r24
    36fc:	79 07       	cpc	r23, r25
	g_showData.posLon_min_frac10000 != lon_min_frac10000) {
		g_showData.newPosLon = true;
    36fe:	61 f1       	breq	.+88     	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3700:	50 91 b5 04 	lds	r21, 0x04B5	; 0x8004b5 <g_showData+0x1>
    3704:	54 60       	ori	r21, 0x04	; 4
    3706:	50 93 b5 04 	sts	0x04B5, r21	; 0x8004b5 <g_showData+0x1>
		g_showData.posLon_sgn = lon_sgn;
    370a:	40 93 ef 04 	sts	0x04EF, r20	; 0x8004ef <g_showData+0x3b>
		g_showData.posLon_deg = lon_deg;
    370e:	30 93 f0 04 	sts	0x04F0, r19	; 0x8004f0 <g_showData+0x3c>
		g_showData.posLon_min_int = lon_min_int;
    3712:	20 93 f1 04 	sts	0x04F1, r18	; 0x8004f1 <g_showData+0x3d>
		g_showData.posLon_min_frac10000 = lon_min_frac10000;
    3716:	90 93 db 04 	sts	0x04DB, r25	; 0x8004db <g_showData+0x27>
    371a:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <g_showData+0x26>
				case TWI_SMART_LCD_CMD_SHOW_POS_LON:
					s_isr_lcd_10mhz_ref_osc_show_pos_lon(data[2], data[3], data[4], data[5] | (data[6] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT:
					s_isr_lcd_10mhz_ref_osc_show_pos_height((data[2] | (data[3] << 8)), data[4]);
    371e:	1c c0       	rjmp	.+56     	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3720:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <s_rx_d+0x4>
    3724:	20 91 5e 04 	lds	r18, 0x045E	; 0x80045e <s_rx_d+0x2>
    3728:	30 91 5f 04 	lds	r19, 0x045F	; 0x80045f <s_rx_d+0x3>
}

static void s_isr_lcd_10mhz_ref_osc_show_pos_height(int16_t height_int, uint8_t height_frac10)
{
	// interrupt is already disabled, here
	if ((g_showData.pos_height_int != height_int) || (g_showData.pos_height_frac10 != height_frac10)) {
    372c:	40 91 dc 04 	lds	r20, 0x04DC	; 0x8004dc <g_showData+0x28>
    3730:	50 91 dd 04 	lds	r21, 0x04DD	; 0x8004dd <g_showData+0x29>
    3734:	24 17       	cp	r18, r20
    3736:	35 07       	cpc	r19, r21
    3738:	21 f4       	brne	.+8      	; 0x3742 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7a0>
    373a:	90 91 f2 04 	lds	r25, 0x04F2	; 0x8004f2 <g_showData+0x3e>
    373e:	89 17       	cp	r24, r25
		g_showData.newPosHeight = true;
    3740:	59 f0       	breq	.+22     	; 0x3758 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3742:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <g_showData+0x1>
    3746:	98 60       	ori	r25, 0x08	; 8
    3748:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <g_showData+0x1>
		g_showData.pos_height_int = height_int;
    374c:	30 93 dd 04 	sts	0x04DD, r19	; 0x8004dd <g_showData+0x29>
    3750:	20 93 dc 04 	sts	0x04DC, r18	; 0x8004dc <g_showData+0x28>
		g_showData.pos_height_frac10 = height_frac10;
    3754:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <g_showData+0x3e>
					// do nothing for unsupported commands
				}
			}  // switch (cmd)
		}  // if (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC)
	}  // if ((data[0] == TWI_SLAVE_ADDR_SMARTLCD))
}
    3758:	df 91       	pop	r29
    375a:	cf 91       	pop	r28
    375c:	08 95       	ret

0000375e <__vector_24__bottom>:


uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur)
{
    375e:	cf 93       	push	r28
    3760:	df 93       	push	r29
    3762:	d6 2f       	mov	r29, r22
	static uint8_t pos_i	= 0;
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur & 0b01000101;
    3764:	c4 2f       	mov	r28, r20
    3766:	c5 74       	andi	r28, 0x45	; 69

	switch(tws) {
    3768:	88 36       	cpi	r24, 0x68	; 104
    376a:	09 f4       	brne	.+2      	; 0x376e <__vector_24__bottom+0x10>
    376c:	8b c0       	rjmp	.+278    	; 0x3884 <__vector_24__bottom+0x126>
    376e:	08 f0       	brcs	.+2      	; 0x3772 <__vector_24__bottom+0x14>
    3770:	42 c0       	rjmp	.+132    	; 0x37f6 <__vector_24__bottom+0x98>
    3772:	80 33       	cpi	r24, 0x30	; 48
    3774:	09 f4       	brne	.+2      	; 0x3778 <__vector_24__bottom+0x1a>
    3776:	7f c0       	rjmp	.+254    	; 0x3876 <__vector_24__bottom+0x118>
    3778:	48 f5       	brcc	.+82     	; 0x37cc <__vector_24__bottom+0x6e>
    377a:	80 31       	cpi	r24, 0x10	; 16
    377c:	09 f4       	brne	.+2      	; 0x3780 <__vector_24__bottom+0x22>
    377e:	66 c0       	rjmp	.+204    	; 0x384c <__vector_24__bottom+0xee>
    3780:	d8 f4       	brcc	.+54     	; 0x37b8 <__vector_24__bottom+0x5a>
    3782:	88 23       	and	r24, r24
    3784:	09 f4       	brne	.+2      	; 0x3788 <__vector_24__bottom+0x2a>
    3786:	5f c1       	rjmp	.+702    	; 0x3a46 <__vector_24__bottom+0x2e8>
    3788:	88 30       	cpi	r24, 0x08	; 8
    378a:	09 f0       	breq	.+2      	; 0x378e <__vector_24__bottom+0x30>
    378c:	5c c1       	rjmp	.+696    	; 0x3a46 <__vector_24__bottom+0x2e8>

	/* Master Transmitter Mode */

	case TWI_TWSR_START:						// Start condition transmitted
		s_tx_lock = 1;
		pos_o = 0;
    378e:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <pos_o.3126>

		cnt_o = 2;								// TEST
    3792:	82 e0       	ldi	r24, 0x02	; 2
    3794:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <cnt_o.3128>
		s_tx_d[0] = (0x12 << TWD1) | (0b0 << TWD0);	// TEST
    3798:	84 e2       	ldi	r24, 0x24	; 36
    379a:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <s_tx_d>
		s_tx_d[1] = 0x34;						// TEST
    379e:	84 e3       	ldi	r24, 0x34	; 52
    37a0:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <s_tx_d+0x1>
		s_tx_d[2] = 0x56;						// TEST
    37a4:	86 e5       	ldi	r24, 0x56	; 86
    37a6:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <s_tx_d+0x2>
		s_tx_d[3] = 0x78;						// TEST
    37aa:	88 e7       	ldi	r24, 0x78	; 120
    37ac:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <s_tx_d+0x3>
		s_tx_d[4] = 0x9a;						// TEST
    37b0:	8a e9       	ldi	r24, 0x9A	; 154
    37b2:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <s_tx_d+0x4>
    37b6:	4a c0       	rjmp	.+148    	; 0x384c <__vector_24__bottom+0xee>
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur & 0b01000101;

	switch(tws) {
    37b8:	80 32       	cpi	r24, 0x20	; 32
    37ba:	09 f4       	brne	.+2      	; 0x37be <__vector_24__bottom+0x60>
    37bc:	5d c0       	rjmp	.+186    	; 0x3878 <__vector_24__bottom+0x11a>
    37be:	88 32       	cpi	r24, 0x28	; 40
    37c0:	09 f4       	brne	.+2      	; 0x37c4 <__vector_24__bottom+0x66>
    37c2:	48 c0       	rjmp	.+144    	; 0x3854 <__vector_24__bottom+0xf6>
    37c4:	88 31       	cpi	r24, 0x18	; 24
    37c6:	09 f0       	breq	.+2      	; 0x37ca <__vector_24__bottom+0x6c>
    37c8:	3e c1       	rjmp	.+636    	; 0x3a46 <__vector_24__bottom+0x2e8>
    37ca:	41 c0       	rjmp	.+130    	; 0x384e <__vector_24__bottom+0xf0>
    37cc:	88 34       	cpi	r24, 0x48	; 72
    37ce:	09 f4       	brne	.+2      	; 0x37d2 <__vector_24__bottom+0x74>
    37d0:	57 c0       	rjmp	.+174    	; 0x3880 <__vector_24__bottom+0x122>
    37d2:	38 f4       	brcc	.+14     	; 0x37e2 <__vector_24__bottom+0x84>
    37d4:	88 33       	cpi	r24, 0x38	; 56
    37d6:	09 f4       	brne	.+2      	; 0x37da <__vector_24__bottom+0x7c>
    37d8:	51 c0       	rjmp	.+162    	; 0x387c <__vector_24__bottom+0x11e>
    37da:	80 34       	cpi	r24, 0x40	; 64
    37dc:	09 f4       	brne	.+2      	; 0x37e0 <__vector_24__bottom+0x82>
    37de:	50 c0       	rjmp	.+160    	; 0x3880 <__vector_24__bottom+0x122>
    37e0:	32 c1       	rjmp	.+612    	; 0x3a46 <__vector_24__bottom+0x2e8>
    37e2:	88 35       	cpi	r24, 0x58	; 88
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <__vector_24__bottom+0x8a>
    37e6:	4c c0       	rjmp	.+152    	; 0x3880 <__vector_24__bottom+0x122>
    37e8:	80 36       	cpi	r24, 0x60	; 96
    37ea:	09 f4       	brne	.+2      	; 0x37ee <__vector_24__bottom+0x90>
    37ec:	4b c0       	rjmp	.+150    	; 0x3884 <__vector_24__bottom+0x126>
    37ee:	80 35       	cpi	r24, 0x50	; 80
    37f0:	09 f4       	brne	.+2      	; 0x37f4 <__vector_24__bottom+0x96>
    37f2:	46 c0       	rjmp	.+140    	; 0x3880 <__vector_24__bottom+0x122>
    37f4:	28 c1       	rjmp	.+592    	; 0x3a46 <__vector_24__bottom+0x2e8>
    37f6:	80 3a       	cpi	r24, 0xA0	; 160
    37f8:	09 f4       	brne	.+2      	; 0x37fc <__vector_24__bottom+0x9e>
    37fa:	01 c1       	rjmp	.+514    	; 0x39fe <__vector_24__bottom+0x2a0>
    37fc:	a8 f4       	brcc	.+42     	; 0x3828 <__vector_24__bottom+0xca>
    37fe:	80 38       	cpi	r24, 0x80	; 128
    3800:	09 f4       	brne	.+2      	; 0x3804 <__vector_24__bottom+0xa6>
    3802:	4d c0       	rjmp	.+154    	; 0x389e <__vector_24__bottom+0x140>
    3804:	38 f4       	brcc	.+14     	; 0x3814 <__vector_24__bottom+0xb6>
    3806:	80 37       	cpi	r24, 0x70	; 112
    3808:	09 f4       	brne	.+2      	; 0x380c <__vector_24__bottom+0xae>
    380a:	41 c0       	rjmp	.+130    	; 0x388e <__vector_24__bottom+0x130>
    380c:	88 37       	cpi	r24, 0x78	; 120
    380e:	09 f4       	brne	.+2      	; 0x3812 <__vector_24__bottom+0xb4>
    3810:	3e c0       	rjmp	.+124    	; 0x388e <__vector_24__bottom+0x130>
    3812:	19 c1       	rjmp	.+562    	; 0x3a46 <__vector_24__bottom+0x2e8>
    3814:	80 39       	cpi	r24, 0x90	; 144
    3816:	09 f4       	brne	.+2      	; 0x381a <__vector_24__bottom+0xbc>
    3818:	42 c0       	rjmp	.+132    	; 0x389e <__vector_24__bottom+0x140>
    381a:	88 39       	cpi	r24, 0x98	; 152
    381c:	09 f4       	brne	.+2      	; 0x3820 <__vector_24__bottom+0xc2>
    381e:	df c0       	rjmp	.+446    	; 0x39de <__vector_24__bottom+0x280>
    3820:	88 38       	cpi	r24, 0x88	; 136
    3822:	09 f0       	breq	.+2      	; 0x3826 <__vector_24__bottom+0xc8>
    3824:	10 c1       	rjmp	.+544    	; 0x3a46 <__vector_24__bottom+0x2e8>
    3826:	db c0       	rjmp	.+438    	; 0x39de <__vector_24__bottom+0x280>
    3828:	88 3b       	cpi	r24, 0xB8	; 184
    382a:	09 f4       	brne	.+2      	; 0x382e <__vector_24__bottom+0xd0>
    382c:	f1 c0       	rjmp	.+482    	; 0x3a10 <__vector_24__bottom+0x2b2>
    382e:	20 f4       	brcc	.+8      	; 0x3838 <__vector_24__bottom+0xda>
    3830:	88 3a       	cpi	r24, 0xA8	; 168
    3832:	09 f4       	brne	.+2      	; 0x3836 <__vector_24__bottom+0xd8>
    3834:	ed c0       	rjmp	.+474    	; 0x3a10 <__vector_24__bottom+0x2b2>
    3836:	07 c1       	rjmp	.+526    	; 0x3a46 <__vector_24__bottom+0x2e8>
    3838:	88 3c       	cpi	r24, 0xC8	; 200
    383a:	09 f4       	brne	.+2      	; 0x383e <__vector_24__bottom+0xe0>
    383c:	02 c1       	rjmp	.+516    	; 0x3a42 <__vector_24__bottom+0x2e4>
    383e:	88 3f       	cpi	r24, 0xF8	; 248
    3840:	09 f4       	brne	.+2      	; 0x3844 <__vector_24__bottom+0xe6>
    3842:	01 c1       	rjmp	.+514    	; 0x3a46 <__vector_24__bottom+0x2e8>
    3844:	80 3c       	cpi	r24, 0xC0	; 192
    3846:	09 f4       	brne	.+2      	; 0x384a <__vector_24__bottom+0xec>
    3848:	fc c0       	rjmp	.+504    	; 0x3a42 <__vector_24__bottom+0x2e4>
    384a:	fd c0       	rjmp	.+506    	; 0x3a46 <__vector_24__bottom+0x2e8>
		s_tx_d[2] = 0x56;						// TEST
		s_tx_d[3] = 0x78;						// TEST
		s_tx_d[4] = 0x9a;						// TEST
		// fall-through.
	case TWI_TWSR_REPEATEDSTART:				// Repeated start condition transmitted
		nop();
    384c:	00 00       	nop
		// fall-through.
	case TWI_TWSR_M_SLAW_ADDR_ACK:				// SLA+W transmitted and ACK received
		TWDR = s_tx_d[pos_o++];
    384e:	e0 91 58 04 	lds	r30, 0x0458	; 0x800458 <pos_o.3126>
    3852:	06 c0       	rjmp	.+12     	; 0x3860 <__vector_24__bottom+0x102>
	case TWI_TWSR_M_SLAW_ADDR_NACK:				// SLA+W transmitted and NACK received
		twcr_new |= _BV(TWSTO);					// Send STOP
	break;

	case TWI_TWSR_M_SLAW_DATA_ACK:				// Data byte sent and ACK received
		if (pos_o < cnt_o) {
    3854:	e0 91 58 04 	lds	r30, 0x0458	; 0x800458 <pos_o.3126>
    3858:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <cnt_o.3128>
    385c:	e8 17       	cp	r30, r24
    385e:	58 f4       	brcc	.+22     	; 0x3876 <__vector_24__bottom+0x118>
			TWDR = s_tx_d[pos_o++];				// Send new data byte
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	8e 0f       	add	r24, r30
    3864:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <pos_o.3126>
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	e4 59       	subi	r30, 0x94	; 148
    386c:	fb 4f       	sbci	r31, 0xFB	; 251
    386e:	80 81       	ld	r24, Z
    3870:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		} else {
			s_tx_lock = 0;
			s_twi_tx_done();					// Message sent
    3874:	e9 c0       	rjmp	.+466    	; 0x3a48 <__vector_24__bottom+0x2ea>
			twcr_new |= _BV(TWSTO);				// Send STOP - no more data available
    3876:	86 db       	rcall	.-2292   	; 0x2f84 <s_twi_tx_done>
    3878:	c0 61       	ori	r28, 0x10	; 16
		s_twi_tx_done();						// Message failure
		twcr_new |= _BV(TWSTO);					// Send STOP - due to an error or slave not ready situation
	break;

	case TWI_TWSR_M_SLAW_ARBIT_LOST:			// Arbitration lost
		twcr_new |= _BV(TWSTA);					// Send START (again)
    387a:	e6 c0       	rjmp	.+460    	; 0x3a48 <__vector_24__bottom+0x2ea>
	break;
    387c:	c0 62       	ori	r28, 0x20	; 32
	case TWI_TWSR_M_SLAR_DATA_ACK:
		nop();
	break;

	case TWI_TWSR_M_SLAR_DATA_NACK:
		nop();
    387e:	e4 c0       	rjmp	.+456    	; 0x3a48 <__vector_24__bottom+0x2ea>
	break;
    3880:	00 00       	nop

	/* Slave Receiver Mode */

	case TWI_TWSR_S_SLAW_MYADDR_RECEIVED:		// SLA+W received and ACK returned
	case TWI_TWSR_S_SLAW_MYADDR_ARBIT_LOST:
		mem_set(s_rx_d, TWI_SMART_LCD_SLAVE_BUF_LEN, 0x00);
    3882:	e2 c0       	rjmp	.+452    	; 0x3a48 <__vector_24__bottom+0x2ea>
    3884:	40 e0       	ldi	r20, 0x00	; 0
    3886:	60 e1       	ldi	r22, 0x10	; 16
    3888:	8c e5       	ldi	r24, 0x5C	; 92
    388a:	94 e0       	ldi	r25, 0x04	; 4
		twcr_new |= _BV(TWEA);					// Send ACK
	break;

	case TWI_TWSR_S_SLAW_OMNIADDR_RECEIVED:		// GCA received and ACK sent
	case TWI_TWSR_S_SLAW_OMNIADDR_ARBIT_LOST:
		s_rx_d[0] = twd >> 1;					// GCA
    388c:	2b d1       	rcall	.+598    	; 0x3ae4 <mem_set>
    388e:	d6 95       	lsr	r29
    3890:	d0 93 5c 04 	sts	0x045C, r29	; 0x80045c <s_rx_d>
		pos_i = 1;								// Starting of reception
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <pos_i.3125>
		twcr_new |= _BV(TWEA);					// Send after next coming data byte ACK
	break;
    389a:	c0 64       	ori	r28, 0x40	; 64

	case TWI_TWSR_S_SLAW_MYADDR_DATA_ACK:		// Data after SLA+W received
	case TWI_TWSR_S_SLAW_OMNIADDR_DATA_ACK:
		if (cnt_i != 0b1111) {					// Closed parameter form
    389c:	d5 c0       	rjmp	.+426    	; 0x3a48 <__vector_24__bottom+0x2ea>
    389e:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <cnt_i.3127>
    38a2:	8f 30       	cpi	r24, 0x0F	; 15
    38a4:	09 f4       	brne	.+2      	; 0x38a8 <__vector_24__bottom+0x14a>
			if (pos_i < 0b1111) {
    38a6:	94 c0       	rjmp	.+296    	; 0x39d0 <__vector_24__bottom+0x272>
    38a8:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <pos_i.3125>
    38ac:	9f 30       	cpi	r25, 0x0F	; 15
    38ae:	08 f0       	brcs	.+2      	; 0x38b2 <__vector_24__bottom+0x154>
				s_rx_d[pos_i] = twd;			// [1]=cmd, [2..]=parameters
    38b0:	85 c0       	rjmp	.+266    	; 0x39bc <__vector_24__bottom+0x25e>
    38b2:	e9 2f       	mov	r30, r25
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	e4 5a       	subi	r30, 0xA4	; 164
    38b8:	fb 4f       	sbci	r31, 0xFB	; 251
			}

			if (pos_i == 1) {
    38ba:	d0 83       	st	Z, r29
    38bc:	91 30       	cpi	r25, 0x01	; 1
    38be:	09 f0       	breq	.+2      	; 0x38c2 <__vector_24__bottom+0x164>
				/* Load receive counter */
				if (s_rx_d[0] == TWI_SLAVE_ADDR_SMARTLCD) {
    38c0:	69 c0       	rjmp	.+210    	; 0x3994 <__vector_24__bottom+0x236>
    38c2:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <s_rx_d>
    38c6:	82 32       	cpi	r24, 0x22	; 34
    38c8:	09 f0       	breq	.+2      	; 0x38cc <__vector_24__bottom+0x16e>
					cnt_i = 0;
    38ca:	7a c0       	rjmp	.+244    	; 0x39c0 <__vector_24__bottom+0x262>
    38cc:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <cnt_i.3127>
					cnt_o = 0;
    38d0:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <cnt_o.3128>

					switch (s_rx_d[1]) {
    38d4:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <s_rx_d+0x1>
    38d8:	8a 33       	cpi	r24, 0x3A	; 58
    38da:	09 f4       	brne	.+2      	; 0x38de <__vector_24__bottom+0x180>
    38dc:	47 c0       	rjmp	.+142    	; 0x396c <__vector_24__bottom+0x20e>
    38de:	00 f5       	brcc	.+64     	; 0x3920 <__vector_24__bottom+0x1c2>
    38e0:	80 32       	cpi	r24, 0x20	; 32
    38e2:	09 f4       	brne	.+2      	; 0x38e6 <__vector_24__bottom+0x188>
    38e4:	43 c0       	rjmp	.+134    	; 0x396c <__vector_24__bottom+0x20e>
    38e6:	78 f4       	brcc	.+30     	; 0x3906 <__vector_24__bottom+0x1a8>
    38e8:	82 30       	cpi	r24, 0x02	; 2
    38ea:	09 f4       	brne	.+2      	; 0x38ee <__vector_24__bottom+0x190>
    38ec:	63 c0       	rjmp	.+198    	; 0x39b4 <__vector_24__bottom+0x256>
    38ee:	28 f4       	brcc	.+10     	; 0x38fa <__vector_24__bottom+0x19c>
    38f0:	88 23       	and	r24, r24
    38f2:	91 f1       	breq	.+100    	; 0x3958 <__vector_24__bottom+0x1fa>
    38f4:	81 30       	cpi	r24, 0x01	; 1
    38f6:	a1 f1       	breq	.+104    	; 0x3960 <__vector_24__bottom+0x202>
    38f8:	63 c0       	rjmp	.+198    	; 0x39c0 <__vector_24__bottom+0x262>
    38fa:	83 30       	cpi	r24, 0x03	; 3
    38fc:	89 f1       	breq	.+98     	; 0x3960 <__vector_24__bottom+0x202>
    38fe:	84 31       	cpi	r24, 0x14	; 20
    3900:	09 f4       	brne	.+2      	; 0x3904 <__vector_24__bottom+0x1a6>
    3902:	58 c0       	rjmp	.+176    	; 0x39b4 <__vector_24__bottom+0x256>
    3904:	5d c0       	rjmp	.+186    	; 0x39c0 <__vector_24__bottom+0x262>
    3906:	84 33       	cpi	r24, 0x34	; 52
    3908:	a9 f1       	breq	.+106    	; 0x3974 <__vector_24__bottom+0x216>
    390a:	28 f4       	brcc	.+10     	; 0x3916 <__vector_24__bottom+0x1b8>
    390c:	80 33       	cpi	r24, 0x30	; 48
    390e:	f1 f1       	breq	.+124    	; 0x398c <__vector_24__bottom+0x22e>
    3910:	82 33       	cpi	r24, 0x32	; 50
    3912:	81 f1       	breq	.+96     	; 0x3974 <__vector_24__bottom+0x216>
    3914:	55 c0       	rjmp	.+170    	; 0x39c0 <__vector_24__bottom+0x262>
    3916:	86 33       	cpi	r24, 0x36	; 54
    3918:	69 f1       	breq	.+90     	; 0x3974 <__vector_24__bottom+0x216>
    391a:	88 33       	cpi	r24, 0x38	; 56
    391c:	39 f1       	breq	.+78     	; 0x396c <__vector_24__bottom+0x20e>
    391e:	50 c0       	rjmp	.+160    	; 0x39c0 <__vector_24__bottom+0x262>
    3920:	85 38       	cpi	r24, 0x85	; 133
    3922:	41 f1       	breq	.+80     	; 0x3974 <__vector_24__bottom+0x216>
    3924:	68 f4       	brcc	.+26     	; 0x3940 <__vector_24__bottom+0x1e2>
    3926:	82 38       	cpi	r24, 0x82	; 130
    3928:	29 f1       	breq	.+74     	; 0x3974 <__vector_24__bottom+0x216>
    392a:	28 f4       	brcc	.+10     	; 0x3936 <__vector_24__bottom+0x1d8>
    392c:	80 38       	cpi	r24, 0x80	; 128
    392e:	51 f1       	breq	.+84     	; 0x3984 <__vector_24__bottom+0x226>
    3930:	81 38       	cpi	r24, 0x81	; 129
    3932:	21 f1       	breq	.+72     	; 0x397c <__vector_24__bottom+0x21e>
    3934:	45 c0       	rjmp	.+138    	; 0x39c0 <__vector_24__bottom+0x262>
    3936:	83 38       	cpi	r24, 0x83	; 131
    3938:	09 f1       	breq	.+66     	; 0x397c <__vector_24__bottom+0x21e>
    393a:	84 38       	cpi	r24, 0x84	; 132
    393c:	b9 f0       	breq	.+46     	; 0x396c <__vector_24__bottom+0x20e>
    393e:	40 c0       	rjmp	.+128    	; 0x39c0 <__vector_24__bottom+0x262>
    3940:	8b 38       	cpi	r24, 0x8B	; 139
    3942:	28 f4       	brcc	.+10     	; 0x394e <__vector_24__bottom+0x1f0>
    3944:	89 38       	cpi	r24, 0x89	; 137
    3946:	90 f4       	brcc	.+36     	; 0x396c <__vector_24__bottom+0x20e>
    3948:	88 38       	cpi	r24, 0x88	; 136
    394a:	a1 f0       	breq	.+40     	; 0x3974 <__vector_24__bottom+0x216>
    394c:	39 c0       	rjmp	.+114    	; 0x39c0 <__vector_24__bottom+0x262>
    394e:	8d 38       	cpi	r24, 0x8D	; 141
    3950:	c8 f0       	brcs	.+50     	; 0x3984 <__vector_24__bottom+0x226>
    3952:	8d 38       	cpi	r24, 0x8D	; 141
    3954:	79 f0       	breq	.+30     	; 0x3974 <__vector_24__bottom+0x216>
						case TWI_SMART_LCD_CMD_NOOP:
							cnt_i = 1;
    3956:	34 c0       	rjmp	.+104    	; 0x39c0 <__vector_24__bottom+0x262>
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <cnt_i.3127>
						break;


						case TWI_SMART_LCD_CMD_GET_VER:
						case TWI_SMART_LCD_CMD_GET_STATE:
							cnt_i = 1;
    395e:	30 c0       	rjmp	.+96     	; 0x39c0 <__vector_24__bottom+0x262>
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <cnt_i.3127>
							cnt_o = 1;
    3966:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <cnt_o.3128>
						case TWI_SMART_LCD_CMD_DRAW_CIRC:
						case TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC:
						case TWI_SMART_LCD_CMD_SHOW_DOP:
						case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
						case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
							cnt_i = 3;
    396a:	2a c0       	rjmp	.+84     	; 0x39c0 <__vector_24__bottom+0x262>
    396c:	83 e0       	ldi	r24, 0x03	; 3
    396e:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <cnt_i.3127>
						case TWI_SMART_LCD_CMD_DRAW_FILLED_RECT:
						case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
						case TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT:
						case TWI_SMART_LCD_CMD_SHOW_SATS:
						case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
							cnt_i = 4;
    3972:	26 c0       	rjmp	.+76     	; 0x39c0 <__vector_24__bottom+0x262>
    3974:	84 e0       	ldi	r24, 0x04	; 4
    3976:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <cnt_i.3127>
						break;

						case TWI_SMART_LCD_CMD_SHOW_PPB:
						case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
							cnt_i = 5;
    397a:	22 c0       	rjmp	.+68     	; 0x39c0 <__vector_24__bottom+0x262>
    397c:	85 e0       	ldi	r24, 0x05	; 5
    397e:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <cnt_i.3127>
						break;

						case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
						case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
						case TWI_SMART_LCD_CMD_SHOW_POS_LON:
							cnt_i = 6;
    3982:	1e c0       	rjmp	.+60     	; 0x39c0 <__vector_24__bottom+0x262>
    3984:	86 e0       	ldi	r24, 0x06	; 6
    3986:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <cnt_i.3127>
						break;

						case TWI_SMART_LCD_CMD_WRITE:
							cnt_i = TWI_SMART_LCD_SLAVE_BUF_LEN;	// Max length of incoming data
    398a:	1a c0       	rjmp	.+52     	; 0x39c0 <__vector_24__bottom+0x262>
    398c:	80 e1       	ldi	r24, 0x10	; 16
    398e:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <cnt_i.3127>
						break;
					}
				}
			}
			else if (pos_i == 2) {
    3992:	16 c0       	rjmp	.+44     	; 0x39c0 <__vector_24__bottom+0x262>
    3994:	92 30       	cpi	r25, 0x02	; 2
				if (s_rx_d[0] == TWI_SLAVE_ADDR_SMARTLCD) {
    3996:	91 f4       	brne	.+36     	; 0x39bc <__vector_24__bottom+0x25e>
    3998:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <s_rx_d>
    399c:	82 32       	cpi	r24, 0x22	; 34
					if (s_rx_d[1] == TWI_SMART_LCD_CMD_WRITE) {
    399e:	81 f4       	brne	.+32     	; 0x39c0 <__vector_24__bottom+0x262>
    39a0:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <s_rx_d+0x1>
    39a4:	80 33       	cpi	r24, 0x30	; 48
						/* Correct length of string to actual size */
						uint8_t str_len = s_rx_d[2];
    39a6:	61 f4       	brne	.+24     	; 0x39c0 <__vector_24__bottom+0x262>
    39a8:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <s_rx_d+0x2>
						cnt_i = ((str_len <= (TWI_SMART_LCD_SLAVE_BUF_LEN - 2)) && (str_len < 0b1111)) ?  (str_len + 2) : 2;
    39ac:	8f 30       	cpi	r24, 0x0F	; 15
    39ae:	10 f4       	brcc	.+4      	; 0x39b4 <__vector_24__bottom+0x256>
    39b0:	8e 5f       	subi	r24, 0xFE	; 254
    39b2:	01 c0       	rjmp	.+2      	; 0x39b6 <__vector_24__bottom+0x258>
    39b4:	82 e0       	ldi	r24, 0x02	; 2
    39b6:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <cnt_i.3127>
					}
				}
			}

			if (pos_i < 0b1110) {
    39ba:	02 c0       	rjmp	.+4      	; 0x39c0 <__vector_24__bottom+0x262>
    39bc:	9e 30       	cpi	r25, 0x0E	; 14
				if (++pos_i <= cnt_i) {
    39be:	60 f4       	brcc	.+24     	; 0x39d8 <__vector_24__bottom+0x27a>
    39c0:	9f 5f       	subi	r25, 0xFF	; 255
    39c2:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <pos_i.3125>
    39c6:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <cnt_i.3127>
    39ca:	89 17       	cp	r24, r25
    39cc:	28 f0       	brcs	.+10     	; 0x39d8 <__vector_24__bottom+0x27a>
			} else {
				twcr_new &= ~_BV(TWEA);			// Send NACK
			}

		} else {								// Open parameter form
			s_rx_d[2] = twd;
    39ce:	39 c0       	rjmp	.+114    	; 0x3a42 <__vector_24__bottom+0x2e4>
    39d0:	d0 93 5e 04 	sts	0x045E, r29	; 0x80045e <s_rx_d+0x2>
			if (!s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i)) {
				twcr_new |= _BV(TWEA);			// Send ACK
			} else {
				pos_i = 0;
    39d4:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <pos_i.3125>
				twcr_new &= ~_BV(TWEA);			// Send NACK
    39d8:	c4 2f       	mov	r28, r20
    39da:	c5 70       	andi	r28, 0x05	; 5
		}
	break;

	case TWI_TWSR_S_SLAW_MYADDR_DATA_NACK:		// NACK after last data byte sent
	case TWI_TWSR_S_SLAW_OMNIADDR_DATA_NACK:
		if (cnt_i != 0b1111) {
    39dc:	35 c0       	rjmp	.+106    	; 0x3a48 <__vector_24__bottom+0x2ea>
    39de:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <cnt_i.3127>
			s_isr_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    39e2:	8f 30       	cpi	r24, 0x0F	; 15
    39e4:	09 f0       	breq	.+2      	; 0x39e8 <__vector_24__bottom+0x28a>
		} else {
			s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    39e6:	dd da       	rcall	.-2630   	; 0x2fa2 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2>
    39e8:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <pos_i.3125>
		cnt_i = 0;
    39ec:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <cnt_i.3127>
		mem_set(s_rx_d, 8, 0x00);
    39f0:	40 e0       	ldi	r20, 0x00	; 0
    39f2:	68 e0       	ldi	r22, 0x08	; 8
    39f4:	8c e5       	ldi	r24, 0x5C	; 92
    39f6:	94 e0       	ldi	r25, 0x04	; 4
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    39f8:	75 d0       	rcall	.+234    	; 0x3ae4 <mem_set>
	break;

	case TWI_TWSR_S_SLAW_STOP_REPEATEDSTART_RECEIVED:	// STOP or RESTART received while still addressed as slave
		if (cnt_i != 0b1111) {
    39fa:	c0 64       	ori	r28, 0x40	; 64
    39fc:	25 c0       	rjmp	.+74     	; 0x3a48 <__vector_24__bottom+0x2ea>
    39fe:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <cnt_i.3127>
			s_isr_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    3a02:	8f 30       	cpi	r24, 0x0F	; 15
		} else {
			s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    3a04:	09 f0       	breq	.+2      	; 0x3a08 <__vector_24__bottom+0x2aa>
    3a06:	cd da       	rcall	.-2662   	; 0x2fa2 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    3a08:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <pos_i.3125>

	/* Slave Transmitter Mode */

	case TWI_TWSR_S_SLAR_MYADDR_DATA_ACK:		// SLA+R received and ACK has been returned
	case TWI_TWSR_S_SLAR_OMNIADDR_DATA_ACK:		// Data sent and ACK has been returned
		pos_o = 0;
    3a0c:	c0 64       	ori	r28, 0x40	; 64
    3a0e:	1c c0       	rjmp	.+56     	; 0x3a48 <__vector_24__bottom+0x2ea>
		cnt_o = s_rx_ret_len;
    3a10:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <pos_o.3126>
    3a14:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <s_rx_ret_len>
		s_rx_ret_len = 0;
    3a18:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <cnt_o.3128>
		TWDR = cnt_o > pos_o ?  s_rx_ret_d[pos_o++] : 0x00;
    3a1c:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <s_rx_ret_len>
    3a20:	88 23       	and	r24, r24
    3a22:	31 f0       	breq	.+12     	; 0x3a30 <__vector_24__bottom+0x2d2>
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <pos_o.3126>
    3a2a:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <s_rx_ret_d>
    3a2e:	01 c0       	rjmp	.+2      	; 0x3a32 <__vector_24__bottom+0x2d4>
    3a30:	80 e0       	ldi	r24, 0x00	; 0
		if (cnt_o > pos_o) {
    3a32:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3a36:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <cnt_o.3128>
    3a3a:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <pos_o.3126>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
	break;

	case TWI_TWSR_S_SLAR_MYADDR_LASTDATA_ACK:	// Last data sent and ACK has been returned
		/* message transmitted successfully in slave mode */
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    3a3e:	89 17       	cp	r24, r25
	break;
    3a40:	58 f6       	brcc	.-106    	; 0x39d8 <__vector_24__bottom+0x27a>
	case TWI_TWSR_BUS_ERROR_UNKNOWN:
		twcr_new |= _BV(TWSTO) | _BV(TWEA);		// TWI goes to unaddressed, be active again
	break;

	default:
		twcr_new |= _BV(TWSTO) | _BV(TWEA);		// TWI goes to unaddressed, be active again
    3a42:	c0 64       	ori	r28, 0x40	; 64
	}

	return twcr_new;
}
    3a44:	01 c0       	rjmp	.+2      	; 0x3a48 <__vector_24__bottom+0x2ea>
    3a46:	c0 65       	ori	r28, 0x50	; 80
    3a48:	8c 2f       	mov	r24, r28
    3a4a:	df 91       	pop	r29
    3a4c:	cf 91       	pop	r28
    3a4e:	08 95       	ret

00003a50 <cpu_irq_save>:
/* MAIN section */

void halt(void)
{
	/* MAIN Loop Shutdown */
	runmode = 0;
    3a50:	cf 93       	push	r28
    3a52:	df 93       	push	r29
    3a54:	1f 92       	push	r1
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
    3a5a:	8f b7       	in	r24, 0x3f	; 63
    3a5c:	89 83       	std	Y+1, r24	; 0x01
    3a5e:	f8 94       	cli
    3a60:	89 81       	ldd	r24, Y+1	; 0x01
    3a62:	0f 90       	pop	r0
    3a64:	df 91       	pop	r29
    3a66:	cf 91       	pop	r28
    3a68:	08 95       	ret

00003a6a <get_abs_time>:
    3a6a:	8f 92       	push	r8
    3a6c:	9f 92       	push	r9
    3a6e:	af 92       	push	r10
    3a70:	bf 92       	push	r11
    3a72:	cf 92       	push	r12
    3a74:	df 92       	push	r13
    3a76:	ef 92       	push	r14
    3a78:	ff 92       	push	r15
    3a7a:	ea df       	rcall	.-44     	; 0x3a50 <cpu_irq_save>
    3a7c:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    3a80:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3a84:	c0 90 07 05 	lds	r12, 0x0507	; 0x800507 <g_timer_abs_msb>
    3a88:	d0 90 08 05 	lds	r13, 0x0508	; 0x800508 <g_timer_abs_msb+0x1>
    3a8c:	e0 90 09 05 	lds	r14, 0x0509	; 0x800509 <g_timer_abs_msb+0x2>
    3a90:	f0 90 0a 05 	lds	r15, 0x050A	; 0x80050a <g_timer_abs_msb+0x3>
    3a94:	8f bf       	out	0x3f, r24	; 63
    3a96:	70 e0       	ldi	r23, 0x00	; 0
    3a98:	79 2b       	or	r23, r25
    3a9a:	07 2e       	mov	r0, r23
    3a9c:	00 0c       	add	r0, r0
    3a9e:	88 0b       	sbc	r24, r24
    3aa0:	99 0b       	sbc	r25, r25
    3aa2:	2c d4       	rcall	.+2136   	; 0x42fc <__floatsisf>
    3aa4:	20 e0       	ldi	r18, 0x00	; 0
    3aa6:	34 e2       	ldi	r19, 0x24	; 36
    3aa8:	44 ef       	ldi	r20, 0xF4	; 244
    3aaa:	5a e4       	ldi	r21, 0x4A	; 74
    3aac:	8c d3       	rcall	.+1816   	; 0x41c6 <__divsf3>
    3aae:	4b 01       	movw	r8, r22
    3ab0:	5c 01       	movw	r10, r24
    3ab2:	c7 01       	movw	r24, r14
    3ab4:	b6 01       	movw	r22, r12
    3ab6:	20 d4       	rcall	.+2112   	; 0x42f8 <__floatunsisf>
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	40 e0       	ldi	r20, 0x00	; 0
    3abe:	54 e4       	ldi	r21, 0x44	; 68
    3ac0:	24 d5       	rcall	.+2632   	; 0x450a <__mulsf3>
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	34 e2       	ldi	r19, 0x24	; 36
    3ac6:	44 ef       	ldi	r20, 0xF4	; 244
    3ac8:	5a e4       	ldi	r21, 0x4A	; 74
    3aca:	7d d3       	rcall	.+1786   	; 0x41c6 <__divsf3>
    3acc:	a5 01       	movw	r20, r10
    3ace:	94 01       	movw	r18, r8
    3ad0:	12 d3       	rcall	.+1572   	; 0x40f6 <__addsf3>
    3ad2:	ff 90       	pop	r15
    3ad4:	ef 90       	pop	r14
    3ad6:	df 90       	pop	r13
    3ad8:	cf 90       	pop	r12
    3ada:	bf 90       	pop	r11
    3adc:	af 90       	pop	r10
    3ade:	9f 90       	pop	r9
    3ae0:	8f 90       	pop	r8
    3ae2:	08 95       	ret

00003ae4 <mem_set>:
    3ae4:	70 e0       	ldi	r23, 0x00	; 0
    3ae6:	61 15       	cp	r22, r1
    3ae8:	71 05       	cpc	r23, r1
    3aea:	31 f0       	breq	.+12     	; 0x3af8 <mem_set+0x14>
    3aec:	fc 01       	movw	r30, r24
    3aee:	41 93       	st	Z+, r20
    3af0:	cf 01       	movw	r24, r30
    3af2:	61 50       	subi	r22, 0x01	; 1
    3af4:	71 09       	sbc	r23, r1
    3af6:	f7 cf       	rjmp	.-18     	; 0x3ae6 <mem_set+0x2>
    3af8:	08 95       	ret

00003afa <eeprom_nvm_settings_write>:
    3afa:	cf 93       	push	r28
    3afc:	c8 2f       	mov	r28, r24
    3afe:	87 ff       	sbrs	r24, 7
    3b00:	05 c0       	rjmp	.+10     	; 0x3b0c <eeprom_nvm_settings_write+0x12>
    3b02:	61 e1       	ldi	r22, 0x11	; 17
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <eeprom_write_byte>
    3b0c:	c0 ff       	sbrs	r28, 0
    3b0e:	08 c0       	rjmp	.+16     	; 0x3b20 <eeprom_nvm_settings_write+0x26>
    3b10:	60 91 f8 04 	lds	r22, 0x04F8	; 0x8004f8 <g_lcd_contrast_pm>
    3b14:	6f 73       	andi	r22, 0x3F	; 63
    3b16:	80 e1       	ldi	r24, 0x10	; 16
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	cf 91       	pop	r28
    3b1c:	0c 94 df 25 	jmp	0x4bbe	; 0x4bbe <eeprom_write_byte>
    3b20:	cf 91       	pop	r28
    3b22:	08 95       	ret

00003b24 <eeprom_nvm_settings_read>:
    3b24:	87 ff       	sbrs	r24, 7
    3b26:	08 c0       	rjmp	.+16     	; 0x3b38 <eeprom_nvm_settings_read+0x14>
    3b28:	80 e0       	ldi	r24, 0x00	; 0
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	0e 94 d7 25 	call	0x4bae	; 0x4bae <eeprom_read_byte>
    3b30:	81 31       	cpi	r24, 0x11	; 17
    3b32:	11 f0       	breq	.+4      	; 0x3b38 <eeprom_nvm_settings_read+0x14>
    3b34:	80 e8       	ldi	r24, 0x80	; 128
    3b36:	e1 df       	rcall	.-62     	; 0x3afa <eeprom_nvm_settings_write>
    3b38:	86 e1       	ldi	r24, 0x16	; 22
    3b3a:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <g_lcd_contrast_pm>
    3b3e:	08 95       	ret

00003b40 <task>:
    3b40:	3f 92       	push	r3
    3b42:	4f 92       	push	r4
    3b44:	5f 92       	push	r5
    3b46:	6f 92       	push	r6
    3b48:	7f 92       	push	r7
    3b4a:	8f 92       	push	r8
    3b4c:	9f 92       	push	r9
    3b4e:	af 92       	push	r10
    3b50:	bf 92       	push	r11
    3b52:	cf 92       	push	r12
    3b54:	df 92       	push	r13
    3b56:	ef 92       	push	r14
    3b58:	ff 92       	push	r15
    3b5a:	0f 93       	push	r16
    3b5c:	1f 93       	push	r17
    3b5e:	cf 93       	push	r28
    3b60:	df 93       	push	r29
    3b62:	cd b7       	in	r28, 0x3d	; 61
    3b64:	de b7       	in	r29, 0x3e	; 62
    3b66:	a8 97       	sbiw	r28, 0x28	; 40
    3b68:	0f b6       	in	r0, 0x3f	; 63
    3b6a:	f8 94       	cli
    3b6c:	de bf       	out	0x3e, r29	; 62
    3b6e:	0f be       	out	0x3f, r0	; 63
    3b70:	cd bf       	out	0x3d, r28	; 61
    3b72:	4b 01       	movw	r8, r22
    3b74:	5c 01       	movw	r10, r24
    3b76:	6c df       	rcall	.-296    	; 0x3a50 <cpu_irq_save>
    3b78:	c0 90 fe 04 	lds	r12, 0x04FE	; 0x8004fe <g_adc_temp>
    3b7c:	d0 90 ff 04 	lds	r13, 0x04FF	; 0x8004ff <g_adc_temp+0x1>
    3b80:	e0 90 00 05 	lds	r14, 0x0500	; 0x800500 <g_adc_temp+0x2>
    3b84:	f0 90 01 05 	lds	r15, 0x0501	; 0x800501 <g_adc_temp+0x3>
    3b88:	40 90 02 05 	lds	r4, 0x0502	; 0x800502 <g_adc_light>
    3b8c:	50 90 03 05 	lds	r5, 0x0503	; 0x800503 <g_adc_light+0x1>
    3b90:	60 90 04 05 	lds	r6, 0x0504	; 0x800504 <g_adc_light+0x2>
    3b94:	70 90 05 05 	lds	r7, 0x0505	; 0x800505 <g_adc_light+0x3>
    3b98:	33 b0       	in	r3, 0x03	; 3
    3b9a:	06 b1       	in	r16, 0x06	; 6
    3b9c:	8f bf       	out	0x3f, r24	; 63
    3b9e:	58 df       	rcall	.-336    	; 0x3a50 <cpu_irq_save>
    3ba0:	18 2f       	mov	r17, r24
    3ba2:	29 e1       	ldi	r18, 0x19	; 25
    3ba4:	37 e6       	ldi	r19, 0x67	; 103
    3ba6:	42 eb       	ldi	r20, 0xB2	; 178
    3ba8:	53 e4       	ldi	r21, 0x43	; 67
    3baa:	c7 01       	movw	r24, r14
    3bac:	b6 01       	movw	r22, r12
    3bae:	a2 d2       	rcall	.+1348   	; 0x40f4 <__subsf3>
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 ea       	ldi	r19, 0xA0	; 160
    3bb4:	47 e8       	ldi	r20, 0x87	; 135
    3bb6:	5f e3       	ldi	r21, 0x3F	; 63
    3bb8:	a8 d4       	rcall	.+2384   	; 0x450a <__mulsf3>
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	48 ec       	ldi	r20, 0xC8	; 200
    3bc0:	51 e4       	ldi	r21, 0x41	; 65
    3bc2:	99 d2       	rcall	.+1330   	; 0x40f6 <__addsf3>
    3bc4:	60 93 fa 04 	sts	0x04FA, r22	; 0x8004fa <g_temp>
    3bc8:	70 93 fb 04 	sts	0x04FB, r23	; 0x8004fb <g_temp+0x1>
    3bcc:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <g_temp+0x2>
    3bd0:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <g_temp+0x3>
    3bd4:	1f bf       	out	0x3f, r17	; 63
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	30 e8       	ldi	r19, 0x80	; 128
    3bda:	4d e6       	ldi	r20, 0x6D	; 109
    3bdc:	54 e4       	ldi	r21, 0x44	; 68
    3bde:	c3 01       	movw	r24, r6
    3be0:	b2 01       	movw	r22, r4
    3be2:	ed d2       	rcall	.+1498   	; 0x41be <__cmpsf2>
    3be4:	87 ff       	sbrs	r24, 7
    3be6:	5b c0       	rjmp	.+182    	; 0x3c9e <task+0x15e>
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	40 e0       	ldi	r20, 0x00	; 0
    3bee:	50 e4       	ldi	r21, 0x40	; 64
    3bf0:	c3 01       	movw	r24, r6
    3bf2:	b2 01       	movw	r22, r4
    3bf4:	7f d2       	rcall	.+1278   	; 0x40f4 <__subsf3>
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	30 e8       	ldi	r19, 0x80	; 128
    3bfa:	4d e6       	ldi	r20, 0x6D	; 109
    3bfc:	54 e4       	ldi	r21, 0x44	; 68
    3bfe:	e3 d2       	rcall	.+1478   	; 0x41c6 <__divsf3>
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	4d e7       	ldi	r20, 0x7D	; 125
    3c06:	53 e4       	ldi	r21, 0x43	; 67
    3c08:	80 d4       	rcall	.+2304   	; 0x450a <__mulsf3>
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	40 e0       	ldi	r20, 0x00	; 0
    3c10:	50 e4       	ldi	r21, 0x40	; 64
    3c12:	71 d2       	rcall	.+1250   	; 0x40f6 <__addsf3>
    3c14:	40 d3       	rcall	.+1664   	; 0x4296 <__fixsfsi>
    3c16:	16 2f       	mov	r17, r22
    3c18:	e7 2e       	mov	r14, r23
    3c1a:	86 2f       	mov	r24, r22
    3c1c:	9e 2d       	mov	r25, r14
    3c1e:	20 91 7a 04 	lds	r18, 0x047A	; 0x80047a <pwm_last.3219>
    3c22:	30 91 7b 04 	lds	r19, 0x047B	; 0x80047b <pwm_last.3219+0x1>
    3c26:	a9 01       	movw	r20, r18
    3c28:	4f 5f       	subi	r20, 0xFF	; 255
    3c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c2c:	48 17       	cp	r20, r24
    3c2e:	59 07       	cpc	r21, r25
    3c30:	04 f1       	brlt	.+64     	; 0x3c72 <task+0x132>
    3c32:	21 50       	subi	r18, 0x01	; 1
    3c34:	31 09       	sbc	r19, r1
    3c36:	82 17       	cp	r24, r18
    3c38:	93 07       	cpc	r25, r19
    3c3a:	dc f0       	brlt	.+54     	; 0x3c72 <task+0x132>
    3c3c:	40 90 76 04 	lds	r4, 0x0476	; 0x800476 <ts_last.3220>
    3c40:	50 90 77 04 	lds	r5, 0x0477	; 0x800477 <ts_last.3220+0x1>
    3c44:	60 90 78 04 	lds	r6, 0x0478	; 0x800478 <ts_last.3220+0x2>
    3c48:	70 90 79 04 	lds	r7, 0x0479	; 0x800479 <ts_last.3220+0x3>
    3c4c:	a3 01       	movw	r20, r6
    3c4e:	92 01       	movw	r18, r4
    3c50:	c5 01       	movw	r24, r10
    3c52:	b4 01       	movw	r22, r8
    3c54:	4f d2       	rcall	.+1182   	; 0x40f4 <__subsf3>
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e0       	ldi	r20, 0x00	; 0
    3c5c:	5f e3       	ldi	r21, 0x3F	; 63
    3c5e:	51 d4       	rcall	.+2210   	; 0x4502 <__gesf2>
    3c60:	18 16       	cp	r1, r24
    3c62:	3c f0       	brlt	.+14     	; 0x3c72 <task+0x132>
    3c64:	a3 01       	movw	r20, r6
    3c66:	92 01       	movw	r18, r4
    3c68:	c5 01       	movw	r24, r10
    3c6a:	b4 01       	movw	r22, r8
    3c6c:	a8 d2       	rcall	.+1360   	; 0x41be <__cmpsf2>
    3c6e:	87 ff       	sbrs	r24, 7
    3c70:	10 c0       	rjmp	.+32     	; 0x3c92 <task+0x152>
    3c72:	10 93 b3 00 	sts	0x00B3, r17	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    3c76:	81 2f       	mov	r24, r17
    3c78:	9e 2d       	mov	r25, r14
    3c7a:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <pwm_last.3219+0x1>
    3c7e:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <pwm_last.3219>
    3c82:	80 92 76 04 	sts	0x0476, r8	; 0x800476 <ts_last.3220>
    3c86:	90 92 77 04 	sts	0x0477, r9	; 0x800477 <ts_last.3220+0x1>
    3c8a:	a0 92 78 04 	sts	0x0478, r10	; 0x800478 <ts_last.3220+0x2>
    3c8e:	b0 92 79 04 	sts	0x0479, r11	; 0x800479 <ts_last.3220+0x3>
    3c92:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3c96:	80 68       	ori	r24, 0x80	; 128
    3c98:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3c9c:	07 c0       	rjmp	.+14     	; 0x3cac <task+0x16c>
    3c9e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    3ca2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3ca6:	8f 73       	andi	r24, 0x3F	; 63
    3ca8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3cac:	d1 de       	rcall	.-606    	; 0x3a50 <cpu_irq_save>
    3cae:	95 e0       	ldi	r25, 0x05	; 5
    3cb0:	ef ea       	ldi	r30, 0xAF	; 175
    3cb2:	f4 e0       	ldi	r31, 0x04	; 4
    3cb4:	de 01       	movw	r26, r28
    3cb6:	11 96       	adiw	r26, 0x01	; 1
    3cb8:	01 90       	ld	r0, Z+
    3cba:	0d 92       	st	X+, r0
    3cbc:	9a 95       	dec	r25
    3cbe:	e1 f7       	brne	.-8      	; 0x3cb8 <task+0x178>
    3cc0:	89 80       	ldd	r8, Y+1	; 0x01
    3cc2:	9a 80       	ldd	r9, Y+2	; 0x02
    3cc4:	ab 80       	ldd	r10, Y+3	; 0x03
    3cc6:	bc 80       	ldd	r11, Y+4	; 0x04
    3cc8:	8f bf       	out	0x3f, r24	; 63
    3cca:	11 e0       	ldi	r17, 0x01	; 1
    3ccc:	32 fa       	bst	r3, 2
    3cce:	ff 24       	eor	r15, r15
    3cd0:	f0 f8       	bld	r15, 0
    3cd2:	f1 26       	eor	r15, r17
    3cd4:	01 fb       	bst	r16, 1
    3cd6:	ee 24       	eor	r14, r14
    3cd8:	e0 f8       	bld	r14, 0
    3cda:	e1 26       	eor	r14, r17
    3cdc:	02 fb       	bst	r16, 2
    3cde:	00 27       	eor	r16, r16
    3ce0:	00 f9       	bld	r16, 0
    3ce2:	10 27       	eor	r17, r16
    3ce4:	91 2f       	mov	r25, r17
    3ce6:	99 0f       	add	r25, r25
    3ce8:	9e 29       	or	r25, r14
    3cea:	89 2f       	mov	r24, r25
    3cec:	86 95       	lsr	r24
    3cee:	98 27       	eor	r25, r24
    3cf0:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <dec_old.3227>
    3cf4:	29 2f       	mov	r18, r25
    3cf6:	28 1b       	sub	r18, r24
    3cf8:	09 2f       	mov	r16, r25
    3cfa:	03 70       	andi	r16, 0x03	; 3
    3cfc:	21 30       	cpi	r18, 0x01	; 1
    3cfe:	11 f0       	breq	.+4      	; 0x3d04 <task+0x1c4>
    3d00:	2d 3f       	cpi	r18, 0xFD	; 253
    3d02:	b1 f4       	brne	.+44     	; 0x3d30 <task+0x1f0>
    3d04:	8d 81       	ldd	r24, Y+5	; 0x05
    3d06:	f0 fa       	bst	r15, 0
    3d08:	80 f9       	bld	r24, 0
    3d0a:	e0 fa       	bst	r14, 0
    3d0c:	81 f9       	bld	r24, 1
    3d0e:	10 fb       	bst	r17, 0
    3d10:	82 f9       	bld	r24, 2
    3d12:	87 7e       	andi	r24, 0xE7	; 231
    3d14:	20 2f       	mov	r18, r16
    3d16:	22 0f       	add	r18, r18
    3d18:	22 0f       	add	r18, r18
    3d1a:	22 0f       	add	r18, r18
    3d1c:	82 2b       	or	r24, r18
    3d1e:	8d 83       	std	Y+5, r24	; 0x05
    3d20:	88 71       	andi	r24, 0x18	; 24
    3d22:	01 f5       	brne	.+64     	; 0x3d64 <task+0x224>
    3d24:	8f ef       	ldi	r24, 0xFF	; 255
    3d26:	88 1a       	sub	r8, r24
    3d28:	98 0a       	sbc	r9, r24
    3d2a:	a8 0a       	sbc	r10, r24
    3d2c:	b8 0a       	sbc	r11, r24
    3d2e:	1a c0       	rjmp	.+52     	; 0x3d64 <task+0x224>
    3d30:	2f 3f       	cpi	r18, 0xFF	; 255
    3d32:	11 f0       	breq	.+4      	; 0x3d38 <task+0x1f8>
    3d34:	23 30       	cpi	r18, 0x03	; 3
    3d36:	b1 f4       	brne	.+44     	; 0x3d64 <task+0x224>
    3d38:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3a:	f0 fa       	bst	r15, 0
    3d3c:	80 f9       	bld	r24, 0
    3d3e:	e0 fa       	bst	r14, 0
    3d40:	81 f9       	bld	r24, 1
    3d42:	10 fb       	bst	r17, 0
    3d44:	82 f9       	bld	r24, 2
    3d46:	87 7e       	andi	r24, 0xE7	; 231
    3d48:	20 2f       	mov	r18, r16
    3d4a:	22 0f       	add	r18, r18
    3d4c:	22 0f       	add	r18, r18
    3d4e:	22 0f       	add	r18, r18
    3d50:	82 2b       	or	r24, r18
    3d52:	8d 83       	std	Y+5, r24	; 0x05
    3d54:	88 71       	andi	r24, 0x18	; 24
    3d56:	88 31       	cpi	r24, 0x18	; 24
    3d58:	29 f4       	brne	.+10     	; 0x3d64 <task+0x224>
    3d5a:	21 e0       	ldi	r18, 0x01	; 1
    3d5c:	82 1a       	sub	r8, r18
    3d5e:	91 08       	sbc	r9, r1
    3d60:	a1 08       	sbc	r10, r1
    3d62:	b1 08       	sbc	r11, r1
    3d64:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <dec_old.3227>
    3d68:	73 de       	rcall	.-794    	; 0x3a50 <cpu_irq_save>
    3d6a:	89 82       	std	Y+1, r8	; 0x01
    3d6c:	9a 82       	std	Y+2, r9	; 0x02
    3d6e:	ab 82       	std	Y+3, r10	; 0x03
    3d70:	bc 82       	std	Y+4, r11	; 0x04
    3d72:	9d 81       	ldd	r25, Y+5	; 0x05
    3d74:	f0 fa       	bst	r15, 0
    3d76:	90 f9       	bld	r25, 0
    3d78:	e0 fa       	bst	r14, 0
    3d7a:	91 f9       	bld	r25, 1
    3d7c:	10 fb       	bst	r17, 0
    3d7e:	92 f9       	bld	r25, 2
    3d80:	00 0f       	add	r16, r16
    3d82:	00 0f       	add	r16, r16
    3d84:	00 0f       	add	r16, r16
    3d86:	97 7e       	andi	r25, 0xE7	; 231
    3d88:	90 2b       	or	r25, r16
    3d8a:	9d 83       	std	Y+5, r25	; 0x05
    3d8c:	95 e0       	ldi	r25, 0x05	; 5
    3d8e:	fe 01       	movw	r30, r28
    3d90:	31 96       	adiw	r30, 0x01	; 1
    3d92:	af ea       	ldi	r26, 0xAF	; 175
    3d94:	b4 e0       	ldi	r27, 0x04	; 4
    3d96:	01 90       	ld	r0, Z+
    3d98:	0d 92       	st	X+, r0
    3d9a:	9a 95       	dec	r25
    3d9c:	e1 f7       	brne	.-8      	; 0x3d96 <task+0x256>
    3d9e:	8f bf       	out	0x3f, r24	; 63
    3da0:	57 de       	rcall	.-850    	; 0x3a50 <cpu_irq_save>
    3da2:	00 91 ae 04 	lds	r16, 0x04AE	; 0x8004ae <g_SmartLCD_mode>
    3da6:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <g_status>
    3daa:	90 fb       	bst	r25, 0
    3dac:	ff 24       	eor	r15, r15
    3dae:	f0 f8       	bld	r15, 0
    3db0:	96 95       	lsr	r25
    3db2:	91 70       	andi	r25, 0x01	; 1
    3db4:	8f bf       	out	0x3f, r24	; 63
    3db6:	99 23       	and	r25, r25
    3db8:	d9 f1       	breq	.+118    	; 0x3e30 <task+0x2f0>
    3dba:	00 31       	cpi	r16, 0x10	; 16
    3dbc:	21 f4       	brne	.+8      	; 0x3dc6 <task+0x286>
    3dbe:	0e 94 56 0e 	call	0x1cac	; 0x1cac <lcd_show_new_smartlcd_data>
    3dc2:	18 2f       	mov	r17, r24
    3dc4:	05 c0       	rjmp	.+10     	; 0x3dd0 <task+0x290>
    3dc6:	00 32       	cpi	r16, 0x20	; 32
    3dc8:	99 f5       	brne	.+102    	; 0x3e30 <task+0x2f0>
    3dca:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_show_new_refosc_data>
    3dce:	18 2f       	mov	r17, r24
    3dd0:	f1 10       	cpse	r15, r1
    3dd2:	2b c0       	rjmp	.+86     	; 0x3e2a <task+0x2ea>
    3dd4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <s_last_animation.3243>
    3dd8:	88 23       	and	r24, r24
    3dda:	39 f1       	breq	.+78     	; 0x3e2a <task+0x2ea>
    3ddc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <s_last_animation.3243>
    3de0:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <lcd_cls>
    3de4:	00 32       	cpi	r16, 0x20	; 32
    3de6:	d1 f4       	brne	.+52     	; 0x3e1c <task+0x2dc>
    3de8:	01 e0       	ldi	r16, 0x01	; 1
    3dea:	20 e8       	ldi	r18, 0x80	; 128
    3dec:	40 ef       	ldi	r20, 0xF0	; 240
    3dee:	60 e0       	ldi	r22, 0x00	; 0
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_rect>
    3df6:	88 e2       	ldi	r24, 0x28	; 40
    3df8:	e0 e9       	ldi	r30, 0x90	; 144
    3dfa:	f3 e0       	ldi	r31, 0x03	; 3
    3dfc:	de 01       	movw	r26, r28
    3dfe:	11 96       	adiw	r26, 0x01	; 1
    3e00:	01 90       	ld	r0, Z+
    3e02:	0d 92       	st	X+, r0
    3e04:	8a 95       	dec	r24
    3e06:	e1 f7       	brne	.-8      	; 0x3e00 <task+0x2c0>
    3e08:	9c d8       	rcall	.-3784   	; 0x2f42 <lcd_get_sysfont>
    3e0a:	9c 01       	movw	r18, r24
    3e0c:	42 e0       	ldi	r20, 0x02	; 2
    3e0e:	63 e0       	ldi	r22, 0x03	; 3
    3e10:	ce 01       	movw	r24, r28
    3e12:	01 96       	adiw	r24, 0x01	; 1
    3e14:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    3e18:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <lcd_show_template>
    3e1c:	19 de       	rcall	.-974    	; 0x3a50 <cpu_irq_save>
    3e1e:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <g_status>
    3e22:	92 60       	ori	r25, 0x02	; 2
    3e24:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <g_status>
    3e28:	8f bf       	out	0x3f, r24	; 63
    3e2a:	11 11       	cpse	r17, r1
    3e2c:	b9 cf       	rjmp	.-142    	; 0x3da0 <task+0x260>
    3e2e:	04 c0       	rjmp	.+8      	; 0x3e38 <task+0x2f8>
    3e30:	f1 10       	cpse	r15, r1
    3e32:	02 c0       	rjmp	.+4      	; 0x3e38 <task+0x2f8>
    3e34:	10 e0       	ldi	r17, 0x00	; 0
    3e36:	ce cf       	rjmp	.-100    	; 0x3dd4 <task+0x294>
    3e38:	a8 96       	adiw	r28, 0x28	; 40
    3e3a:	0f b6       	in	r0, 0x3f	; 63
    3e3c:	f8 94       	cli
    3e3e:	de bf       	out	0x3e, r29	; 62
    3e40:	0f be       	out	0x3f, r0	; 63
    3e42:	cd bf       	out	0x3d, r28	; 61
    3e44:	df 91       	pop	r29
    3e46:	cf 91       	pop	r28
    3e48:	1f 91       	pop	r17
    3e4a:	0f 91       	pop	r16
    3e4c:	ff 90       	pop	r15
    3e4e:	ef 90       	pop	r14
    3e50:	df 90       	pop	r13
    3e52:	cf 90       	pop	r12
    3e54:	bf 90       	pop	r11
    3e56:	af 90       	pop	r10
    3e58:	9f 90       	pop	r9
    3e5a:	8f 90       	pop	r8
    3e5c:	7f 90       	pop	r7
    3e5e:	6f 90       	pop	r6
    3e60:	5f 90       	pop	r5
    3e62:	4f 90       	pop	r4
    3e64:	3f 90       	pop	r3
    3e66:	08 95       	ret

00003e68 <enter_sleep>:
    3e68:	88 0f       	add	r24, r24
    3e6a:	81 60       	ori	r24, 0x01	; 1
    3e6c:	83 bf       	out	0x33, r24	; 51
    3e6e:	88 95       	sleep
    3e70:	83 b7       	in	r24, 0x33	; 51
    3e72:	8e 7f       	andi	r24, 0xFE	; 254
    3e74:	83 bf       	out	0x33, r24	; 51
    3e76:	08 95       	ret

00003e78 <main>:
}

int main (void)
{
    3e78:	1f 93       	push	r17
    3e7a:	cf 93       	push	r28
    3e7c:	df 93       	push	r29
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts,
	 * most critical pins are handled first.
	 */

	PORTC = 0b01111110;		// PC0: LDR-ADC in-NoPU, PC1: SW_I in-PU, PC2: SW_Q in-PU, PC3: LCD-CS out-HI
    3e7e:	8e e7       	ldi	r24, 0x7E	; 126
    3e80:	88 b9       	out	0x08, r24	; 8
	DDRC  = 0b00001000;		// PC4: I2C-SDA in-PU-AF-TWI, PC5: I2C-SCL in-PU-AF-TWI, PC6: RESET in-PU, PC7: -
    3e82:	88 e0       	ldi	r24, 0x08	; 8
    3e84:	87 b9       	out	0x07, r24	; 7

	PORTB = 0b00010100;		// PB0: LCD-CD out-LO, PB1: AUDIO out-AF-OC1A, PB2: SW_P in-PU, PB3: LCDBL out-AF-OC2A,
    3e86:	84 e1       	ldi	r24, 0x14	; 20
    3e88:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0b11111011;		// PB4: LCD-R/!W out-HI, PB5: LCD-EN out-LO, PB6: LEDRD out-LO, LEDGN out-LO
    3e8a:	8b ef       	ldi	r24, 0xFB	; 251
    3e8c:	84 b9       	out	0x04, r24	; 4

	PORTD = 0xff;			// PD0..PD7: LCD-D0..LCD-D7 in-PU
    3e8e:	8f ef       	ldi	r24, 0xFF	; 255
    3e90:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x00;
    3e92:	1a b8       	out	0x0a, r1	; 10

	// Analog input: Digital Disable Register
	DIDR0 = 0b00000001;		// PC0: LDR-ADC
    3e94:	c1 e0       	ldi	r28, 0x01	; 1
    3e96:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

	/* Rapid I/O settings */
	s_io_preinit();

	/* Init of sub-modules */
	sysclk_init();	PRR = 0b11101011;			// For debugging this module has to be powered on, again
    3e9a:	0e 94 06 03 	call	0x60c	; 0x60c <sysclk_init>
    3e9e:	8b ee       	ldi	r24, 0xEB	; 235
    3ea0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
}


static void s_adc_init(void)
{
	sysclk_enable_module(POWER_RED_REG0, PRADC_bm);	// enable ADC sub-module
    3ea4:	61 e0       	ldi	r22, 0x01	; 1
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    3eac:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    3eb0:	86 e8       	ldi	r24, 0x86	; 134
    3eb2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    3eb6:	80 ec       	ldi	r24, 0xC0	; 192
    3eb8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    3ebc:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    3ec0:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
    3ec2:	84 60       	ori	r24, 0x04	; 4
	ADC_ADTS_REG = temp;
    3ec4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
}

/*  \brief Enable ADC Auto Trigger */
static inline void adc_enable_autotrigger(void)
{
	ADCSRA |= (1 << ADATE);
    3ec8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3ecc:	80 62       	ori	r24, 0x20	; 32
    3ece:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	adc_enable_autotrigger();
#else
	adc_disable_autotrigger();
#endif

	ADCSRA |= _BV(ADIF);						// clear interrupt status bit by setting it to clear
    3ed2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3ed6:	80 61       	ori	r24, 0x10	; 16
    3ed8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}

/*  \brief Enable ADC interrupt */
static inline void adc_enable_interrupt(void)
{
	ADCSRA |= (1 << ADIE);
    3edc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3ee0:	88 60       	ori	r24, 0x08	; 8
    3ee2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}

/*  \brief Start ADC conversion */
static inline void adc_start_conversion(void)
{
	ADCSRA |= (1 << ADSC);
    3ee6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3eea:	80 64       	ori	r24, 0x40	; 64
    3eec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
static void s_tc_init(void)
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts. */

	/* Timer Synchronous Mode - prepare for  s_tc_start(void) */
	GTCCR = _BV(TSM)							// Timer Synchronous Mode active
    3ef0:	13 e8       	ldi	r17, 0x83	; 131
    3ef2:	13 bd       	out	0x23, r17	; 35
		  | _BV(PSRASY)							// Timer 2   prescaler is synced
		  | _BV(PSRSYNC);						// Timer 0/1 prescaler is synced

	/* TC0 - Overflows with about 122 Hz for the ADC convertion */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    3ef4:	60 e2       	ldi	r22, 0x20	; 32
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>

		TCCR0A  = (0b00  << COM0A0)				// Normal port operations
    3efc:	14 bc       	out	0x24, r1	; 36
				| (0b00  << WGM00);				// Counter mode

		TCCR0B  = ( 0b0  << WGM02)
    3efe:	84 e0       	ldi	r24, 0x04	; 4
    3f00:	85 bd       	out	0x25, r24	; 37
				| (0b100 << CS00);				// CLKio DIV 256 = 31250 Hz --> / 2**8 = 122 Hz looping rate

		TCNT0   = 0;							// Clear current value
    3f02:	16 bc       	out	0x26, r1	; 38

		OCR0A   = 0x00;							// Compare value not used
    3f04:	17 bc       	out	0x27, r1	; 39

		TIFR0   = 0b00000111;					// Clear all flags
    3f06:	d7 e0       	ldi	r29, 0x07	; 7
    3f08:	d5 bb       	out	0x15, r29	; 21
		TIMSK0  = _BV(TOIE0);					// TOIE0: overflow interrupt
    3f0a:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	}

	/* TC1 - OC1A: Audio output @ 16-bit counter PWM, used: 9-bit resolution - overflows with 15625 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    3f0e:	68 e0       	ldi	r22, 0x08	; 8
    3f10:	80 e0       	ldi	r24, 0x00	; 0
    3f12:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>

		TCCR1A  = (0b10  << COM1A0)		 		// HI --> LO when compare value is reached - non-inverted PWM mode
    3f16:	82 e8       	ldi	r24, 0x82	; 130
    3f18:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				| (0b10  << WGM10);				// WGM: 0b0110 = Fast PWM 9 bit

		TCCR1B  = ( 0b01 << WGM12)
    3f1c:	89 e0       	ldi	r24, 0x09	; 9
    3f1e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
				| (0b001 << CS10);				// CLKio DIV1 = 8 MHz

		TCNT1H  = 0b00000000           ;		// Clear current value for synchronous start (when restarting without reset)
    3f22:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		barrier();
		TCNT1L	=            0b00000000;
    3f26:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

		OCR1AH  =        0b0           ;		// Mid-range compare value for zero audio output
    3f2a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL  =            0b10000000;
    3f2e:	80 e8       	ldi	r24, 0x80	; 128
    3f30:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

		TIFR1   = 0b00100111;					// Clear all flags (when restarting without reset)
    3f34:	87 e2       	ldi	r24, 0x27	; 39
    3f36:	86 bb       	out	0x16, r24	; 22
		TIMSK1  = _BV(TOIE1);					// TOIE1 interrupt
    3f38:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	}

	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    3f3c:	60 e4       	ldi	r22, 0x40	; 64
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>

		ASSR    = 0;							// No async. TOSC1 mode
    3f44:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>

		TCCR2A  = (0b10  << COM2A0)				// HI --> LO when compare value is reached - non-inverted PWM mode
    3f48:	10 93 b0 00 	sts	0x00B0, r17	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				| (0b11  << WGM20);				// WGM: 0b011 = Fast PWM mode 8 bit

		TCCR2B  = ( 0b0  << WGM22)
    3f4c:	85 e0       	ldi	r24, 0x05	; 5
    3f4e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
				| (0b101 << CS20);				// CLKio DIV 128 = 62500 Hz --> / 2**8 = 244 Hz looping rate

		TCNT2   = 0;							// Clear current value for synchronous start (when restarting without reset)
    3f52:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

		OCR2A   = 0x00;							// LCD backlight dimmed down
    3f56:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

		TIFR2   = 0b00000111;					// Clear all flags
    3f5a:	d7 bb       	out	0x17, r29	; 23
		TIMSK2  = _BV(TOIE2);					// TOIE2: overflow interrupt
    3f5c:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	ioport_init();
	s_adc_init();
	s_tc_init();

	/* I/O pins go active here */
	board_init();
    3f60:	0e 94 05 03 	call	0x60a	; 0x60a <board_init>
//@}
static inline reset_cause_t reset_cause_get_causes(void)
{
#if (MEGA_XX4 ||MEGA_XX4_A || MEGA_XX8 || MEGA_XX8_A || \
	MEGA_XX || MEGA_XX_UN2 || MEGA_XX0_1 || MEGA_RF || MEGA_UNCATEGORIZED) && !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t temp_mcsr = MCUSR ;
    3f64:	84 b7       	in	r24, 0x34	; 52

	reset_cause_t rc = reset_cause_get_causes();
	g_resetCause = rc;
    3f66:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <g_resetCause>
	if (rc & CHIP_RESET_CAUSE_EXTRST	||
		rc & CHIP_RESET_CAUSE_BOD_CPU	||
    3f6a:	98 2f       	mov	r25, r24
    3f6c:	97 70       	andi	r25, 0x07	; 7
    3f6e:	11 f4       	brne	.+4      	; 0x3f74 <main+0xfc>
		rc & CHIP_RESET_CAUSE_POR		||
    3f70:	81 11       	cpse	r24, r1

/* HELPERS */

static void s_reset_global_vars(void)
{
	irqflags_t flags	= cpu_irq_save();
    3f72:	2b c0       	rjmp	.+86     	; 0x3fca <main+0x152>
	cpu_irq_disable();
    3f74:	6d dd       	rcall	.-1318   	; 0x3a50 <cpu_irq_save>

	g_adc_state			= ADC_STATE_PRE_LDR;
    3f76:	f8 94       	cli
    3f78:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <g_adc_state>
	g_adc_light			= 0.f;
    3f7c:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <g_adc_light>
    3f80:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <g_adc_light+0x1>
    3f84:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <g_adc_light+0x2>
    3f88:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <g_adc_light+0x3>
	g_adc_temp			= 0.f;
    3f8c:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <g_adc_temp>
    3f90:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <g_adc_temp+0x1>
    3f94:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <g_adc_temp+0x2>
    3f98:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <g_adc_temp+0x3>

	g_temp				= 25.f;
    3f9c:	40 e0       	ldi	r20, 0x00	; 0
    3f9e:	50 e0       	ldi	r21, 0x00	; 0
    3fa0:	68 ec       	ldi	r22, 0xC8	; 200
    3fa2:	71 e4       	ldi	r23, 0x41	; 65
    3fa4:	40 93 fa 04 	sts	0x04FA, r20	; 0x8004fa <g_temp>
    3fa8:	50 93 fb 04 	sts	0x04FB, r21	; 0x8004fb <g_temp+0x1>
    3fac:	60 93 fc 04 	sts	0x04FC, r22	; 0x8004fc <g_temp+0x2>
    3fb0:	70 93 fd 04 	sts	0x04FD, r23	; 0x8004fd <g_temp+0x3>
	g_lcdbl_dimmer		= 64;
    3fb4:	90 e4       	ldi	r25, 0x40	; 64
    3fb6:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <g_lcdbl_dimmer>

	g_status.doAnimation = false;
    3fba:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <g_status>
	g_status.isAnimationStopped = false;
    3fbe:	9e 7f       	andi	r25, 0xFE	; 254
    3fc0:	9d 7f       	andi	r25, 0xFD	; 253
    3fc2:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <g_status>
    3fc6:	8f bf       	out	0x3f, r24	; 63
		rc & CHIP_RESET_CAUSE_POR		||
		!rc) {
		s_reset_global_vars();
	} else {
		/* DEBUG */
		asm_break();
    3fc8:	02 c0       	rjmp	.+4      	; 0x3fce <main+0x156>
	}

	/* Read non-volatile settings */
	eeprom_nvm_settings_read(C_EEPROM_NVM_SETTING_ALL);			// load all entries from NVM
    3fca:	0e 94 40 07 	call	0xe80	; 0xe80 <asm_break>
	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
}

static void s_twi_init(uint8_t twi_addr, uint8_t twi_addr_bm)
{
	sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    3fce:	8f ef       	ldi	r24, 0xFF	; 255
    3fd0:	a9 dd       	rcall	.-1198   	; 0x3b24 <eeprom_nvm_settings_read>
    3fd2:	60 e8       	ldi	r22, 0x80	; 128

	irqflags_t flags = cpu_irq_save();
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
    3fd6:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>

	TWSR = (0b00 << TWPS0);						// Prescaler value = 1
    3fda:	3a dd       	rcall	.-1420   	; 0x3a50 <cpu_irq_save>
	TWBR = 2;									// TWI bit-rate = 400 kBit/sec @ 8 MHz when master mode active
    3fdc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3fe0:	92 e0       	ldi	r25, 0x02	; 2

	TWAR  = (twi_addr    << 1) /* | (TWI_SLAVE_ADDR_GCE << TWGCE)*/ ;
    3fe2:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3fe6:	94 e4       	ldi	r25, 0x44	; 68
	TWAMR = (twi_addr_bm << 1);
    3fe8:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	TWCR = _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// Enable Acknowledge, Enable TWI port, Interrupt Enable, no START or STOP bit
    3fec:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__TEXT_REGION_LENGTH__+0x7e00bd>
    3ff0:	95 e4       	ldi	r25, 0x45	; 69
    3ff2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	/* TC0: Overflows with about 30 Hz for the ADC convertion */
	/* TC1: Audio output @ 16-bit counter PWM, used: 10-bit resolution */
	/* TC2: LCD backlight w/ 8-bit resolution */
	{
		/* Timer Synchronous Mode - trigger */
		GTCCR = 0;								// trigger the sync for all counters
    3ff6:	8f bf       	out	0x3f, r24	; 63

	/* Start of sub-modules */
	s_tc_start();								// All clocks and PWM timers start here

	/* Initialize external components */
	lcd_init();
    3ff8:	78 94       	sei
    3ffa:	13 bc       	out	0x23, r1	; 35
	lcd_test(0b11111101);						// Debugging purposes
    3ffc:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <lcd_init>
    4000:	8d ef       	ldi	r24, 0xFD	; 253


	/* main loop */
	runmode = 1;
    4002:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <lcd_test>
    4006:	81 e0       	ldi	r24, 0x01	; 1
    while (runmode) {
    4008:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <runmode>
	    task(get_abs_time());
    400c:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <runmode>
	    enter_sleep(SLEEP_MODE_IDLE);
    4010:	88 23       	and	r24, r24
    4012:	29 f0       	breq	.+10     	; 0x401e <main+0x1a6>
    4014:	2a dd       	rcall	.-1452   	; 0x3a6a <get_abs_time>
    4016:	94 dd       	rcall	.-1240   	; 0x3b40 <task>
    }


	/* Shutdown external components */
	lcd_shutdown();
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	26 df       	rcall	.-436    	; 0x3e68 <enter_sleep>

	cpu_irq_disable();
    401c:	f7 cf       	rjmp	.-18     	; 0x400c <main+0x194>

	/* disable sub-modules */
	ACSR |= _BV(ACD);							// disable AnalogCompare sub-module
    401e:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <lcd_shutdown>
    4022:	f8 94       	cli

	sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    4024:	80 b7       	in	r24, 0x30	; 48
    4026:	80 68       	ori	r24, 0x80	; 128
    4028:	80 bf       	out	0x30, r24	; 48
	sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    402a:	64 e0       	ldi	r22, 0x04	; 4
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
	cpu_irq_restore(flags);
}

static void s_twi_disable(void)
{
	irqflags_t flags = cpu_irq_save();
    4032:	62 e0       	ldi	r22, 0x02	; 2
    4034:	80 e0       	ldi	r24, 0x00	; 0

	TWCR = _BV(TWEN);							// disable the interrupt source
    4036:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
    403a:	0a dd       	rcall	.-1516   	; 0x3a50 <cpu_irq_save>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    403c:	94 e0       	ldi	r25, 0x04	; 4
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
    403e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4042:	3c 98       	cbi	0x07, 4	; 7
	ioport_set_pin_mode(SDA_GPIO, IOPORT_MODE_PULLUP);

	ioport_set_pin_dir(SCL_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(SCL_GPIO, IOPORT_MODE_PULLUP);

	TWCR = 0;									// disable the TWI port
    4044:	44 9a       	sbi	0x08, 4	; 8
    4046:	3d 98       	cbi	0x07, 5	; 7
    4048:	45 9a       	sbi	0x08, 5	; 8

	cpu_irq_restore(flags);

	sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    404a:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    404e:	8f bf       	out	0x3f, r24	; 63
    4050:	60 e8       	ldi	r22, 0x80	; 128
}

/*  \brief Disable ADC interrupt */
static inline void adc_disable_interrupt(void)
{
	ADCSRA &= ~(1 << ADIE);
    4052:	80 e0       	ldi	r24, 0x00	; 0
    4054:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
    4058:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}

/*  \brief Disable ADC Auto Trigger */
static inline void adc_disable_autotrigger(void)
{
	ADCSRA &= ~(1 << ADATE);
    405c:	87 7f       	andi	r24, 0xF7	; 247
    405e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4062:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    4066:	8f 7d       	andi	r24, 0xDF	; 223
    4068:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	temp |= (uint8_t)trg;
	ADC_ADTS_REG = temp;
    406c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    4070:	88 7f       	andi	r24, 0xF8	; 248
	adc_disable_autotrigger();
	adc_set_autotrigger_source(0);
	adc_set_admux(0);
	//adc_disable_digital_inputs(0);

	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
    4072:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    4076:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	}
}

static void s_tc_disable(void)
{
	irqflags_t flags = cpu_irq_save();
    407a:	61 e0       	ldi	r22, 0x01	; 1
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>

	/* TC0 - Overflows with about 122 Hz for the ADC convertion */
	{
		TIMSK0  = 0;							// no interrupts
    4082:	e6 dc       	rcall	.-1588   	; 0x3a50 <cpu_irq_save>

		TCCR0A  = 0;
    4084:	c8 2f       	mov	r28, r24
		TCCR0B  = 0;
    4086:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>

		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    408a:	14 bc       	out	0x24, r1	; 36
    408c:	15 bc       	out	0x25, r1	; 37
    408e:	60 e2       	ldi	r22, 0x20	; 32
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    4090:	80 e0       	ldi	r24, 0x00	; 0
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
    4092:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
	{
		// bring pin to high Z mode to reduce audible plop noise
		ioport_set_pin_dir(AUDIO_PWM, IOPORT_DIR_INPUT);
		ioport_set_pin_mode(AUDIO_PWM, IOPORT_MODE_PULLDOWN);

		TIMSK1  = 0;							// no interrupts
    4096:	21 98       	cbi	0x04, 1	; 4

		TCCR1A  = 0;							// release alternate port function
    4098:	29 98       	cbi	0x05, 1	; 5
    409a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		TCCR1B  = 0;
    409e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1C  = 0;
    40a2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    40a6:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    40aa:	68 e0       	ldi	r22, 0x08	; 8
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
    40ac:	80 e0       	ldi	r24, 0x00	; 0
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    40ae:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		ioport_set_pin_dir(LCDBL_PWM, IOPORT_DIR_OUTPUT);
		ioport_set_pin_level(LCDBL_PWM, false);	// turn backlight off

		TIMSK2  = 0;							// no interrupts
    40b2:	23 9a       	sbi	0x04, 3	; 4

		ASSR    = 0;							// no async TOSC1 mode
    40b4:	2b 98       	cbi	0x05, 3	; 5

		TCCR2A  = 0;							// release alternate port function
    40b6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		TCCR2B  = 0;
    40ba:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>

		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    40be:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    40c2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 */

static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();
    40c6:	60 e4       	ldi	r22, 0x40	; 64

	ASM(
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
    40ce:	c0 dc       	rcall	.-1664   	; 0x3a50 <cpu_irq_save>
    40d0:	5f 93       	push	r21
    40d2:	50 e8       	ldi	r21, 0x80	; 128
    40d4:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    40d8:	50 e0       	ldi	r21, 0x00	; 0

	s_twi_disable();
	s_adc_disable();
	s_tc_disable();

    enter_sleep(SLEEP_MODE_PWR_DOWN);
    40da:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    40de:	5f 91       	pop	r21

    return retcode;								// should never be reached
}
    40e0:	8f bf       	out	0x3f, r24	; 63
    40e2:	cf bf       	out	0x3f, r28	; 63
    40e4:	84 e0       	ldi	r24, 0x04	; 4
    40e6:	c0 de       	rcall	.-640    	; 0x3e68 <enter_sleep>
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	90 e0       	ldi	r25, 0x00	; 0
	return flags;
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
    40ec:	df 91       	pop	r29
    40ee:	cf 91       	pop	r28
    40f0:	1f 91       	pop	r17
    40f2:	08 95       	ret

000040f4 <__subsf3>:
    40f4:	50 58       	subi	r21, 0x80	; 128

000040f6 <__addsf3>:
    40f6:	bb 27       	eor	r27, r27
    40f8:	aa 27       	eor	r26, r26
    40fa:	0e d0       	rcall	.+28     	; 0x4118 <__addsf3x>
    40fc:	b1 c1       	rjmp	.+866    	; 0x4460 <__fp_round>
    40fe:	a2 d1       	rcall	.+836    	; 0x4444 <__fp_pscA>
    4100:	30 f0       	brcs	.+12     	; 0x410e <__addsf3+0x18>
    4102:	a7 d1       	rcall	.+846    	; 0x4452 <__fp_pscB>
    4104:	20 f0       	brcs	.+8      	; 0x410e <__addsf3+0x18>
    4106:	31 f4       	brne	.+12     	; 0x4114 <__addsf3+0x1e>
    4108:	9f 3f       	cpi	r25, 0xFF	; 255
    410a:	11 f4       	brne	.+4      	; 0x4110 <__addsf3+0x1a>
    410c:	1e f4       	brtc	.+6      	; 0x4114 <__addsf3+0x1e>
    410e:	97 c1       	rjmp	.+814    	; 0x443e <__fp_nan>
    4110:	0e f4       	brtc	.+2      	; 0x4114 <__addsf3+0x1e>
    4112:	e0 95       	com	r30
    4114:	e7 fb       	bst	r30, 7
    4116:	64 c1       	rjmp	.+712    	; 0x43e0 <__fp_inf>

00004118 <__addsf3x>:
    4118:	e9 2f       	mov	r30, r25
    411a:	b3 d1       	rcall	.+870    	; 0x4482 <__fp_split3>
    411c:	80 f3       	brcs	.-32     	; 0x40fe <__addsf3+0x8>
    411e:	ba 17       	cp	r27, r26
    4120:	62 07       	cpc	r22, r18
    4122:	73 07       	cpc	r23, r19
    4124:	84 07       	cpc	r24, r20
    4126:	95 07       	cpc	r25, r21
    4128:	18 f0       	brcs	.+6      	; 0x4130 <__addsf3x+0x18>
    412a:	71 f4       	brne	.+28     	; 0x4148 <__addsf3x+0x30>
    412c:	9e f5       	brtc	.+102    	; 0x4194 <__addsf3x+0x7c>
    412e:	e2 c1       	rjmp	.+964    	; 0x44f4 <__fp_zero>
    4130:	0e f4       	brtc	.+2      	; 0x4134 <__addsf3x+0x1c>
    4132:	e0 95       	com	r30
    4134:	0b 2e       	mov	r0, r27
    4136:	ba 2f       	mov	r27, r26
    4138:	a0 2d       	mov	r26, r0
    413a:	0b 01       	movw	r0, r22
    413c:	b9 01       	movw	r22, r18
    413e:	90 01       	movw	r18, r0
    4140:	0c 01       	movw	r0, r24
    4142:	ca 01       	movw	r24, r20
    4144:	a0 01       	movw	r20, r0
    4146:	11 24       	eor	r1, r1
    4148:	ff 27       	eor	r31, r31
    414a:	59 1b       	sub	r21, r25
    414c:	99 f0       	breq	.+38     	; 0x4174 <__addsf3x+0x5c>
    414e:	59 3f       	cpi	r21, 0xF9	; 249
    4150:	50 f4       	brcc	.+20     	; 0x4166 <__addsf3x+0x4e>
    4152:	50 3e       	cpi	r21, 0xE0	; 224
    4154:	68 f1       	brcs	.+90     	; 0x41b0 <__addsf3x+0x98>
    4156:	1a 16       	cp	r1, r26
    4158:	f0 40       	sbci	r31, 0x00	; 0
    415a:	a2 2f       	mov	r26, r18
    415c:	23 2f       	mov	r18, r19
    415e:	34 2f       	mov	r19, r20
    4160:	44 27       	eor	r20, r20
    4162:	58 5f       	subi	r21, 0xF8	; 248
    4164:	f3 cf       	rjmp	.-26     	; 0x414c <__addsf3x+0x34>
    4166:	46 95       	lsr	r20
    4168:	37 95       	ror	r19
    416a:	27 95       	ror	r18
    416c:	a7 95       	ror	r26
    416e:	f0 40       	sbci	r31, 0x00	; 0
    4170:	53 95       	inc	r21
    4172:	c9 f7       	brne	.-14     	; 0x4166 <__addsf3x+0x4e>
    4174:	7e f4       	brtc	.+30     	; 0x4194 <__addsf3x+0x7c>
    4176:	1f 16       	cp	r1, r31
    4178:	ba 0b       	sbc	r27, r26
    417a:	62 0b       	sbc	r22, r18
    417c:	73 0b       	sbc	r23, r19
    417e:	84 0b       	sbc	r24, r20
    4180:	ba f0       	brmi	.+46     	; 0x41b0 <__addsf3x+0x98>
    4182:	91 50       	subi	r25, 0x01	; 1
    4184:	a1 f0       	breq	.+40     	; 0x41ae <__addsf3x+0x96>
    4186:	ff 0f       	add	r31, r31
    4188:	bb 1f       	adc	r27, r27
    418a:	66 1f       	adc	r22, r22
    418c:	77 1f       	adc	r23, r23
    418e:	88 1f       	adc	r24, r24
    4190:	c2 f7       	brpl	.-16     	; 0x4182 <__addsf3x+0x6a>
    4192:	0e c0       	rjmp	.+28     	; 0x41b0 <__addsf3x+0x98>
    4194:	ba 0f       	add	r27, r26
    4196:	62 1f       	adc	r22, r18
    4198:	73 1f       	adc	r23, r19
    419a:	84 1f       	adc	r24, r20
    419c:	48 f4       	brcc	.+18     	; 0x41b0 <__addsf3x+0x98>
    419e:	87 95       	ror	r24
    41a0:	77 95       	ror	r23
    41a2:	67 95       	ror	r22
    41a4:	b7 95       	ror	r27
    41a6:	f7 95       	ror	r31
    41a8:	9e 3f       	cpi	r25, 0xFE	; 254
    41aa:	08 f0       	brcs	.+2      	; 0x41ae <__addsf3x+0x96>
    41ac:	b3 cf       	rjmp	.-154    	; 0x4114 <__addsf3+0x1e>
    41ae:	93 95       	inc	r25
    41b0:	88 0f       	add	r24, r24
    41b2:	08 f0       	brcs	.+2      	; 0x41b6 <__addsf3x+0x9e>
    41b4:	99 27       	eor	r25, r25
    41b6:	ee 0f       	add	r30, r30
    41b8:	97 95       	ror	r25
    41ba:	87 95       	ror	r24
    41bc:	08 95       	ret

000041be <__cmpsf2>:
    41be:	ec d0       	rcall	.+472    	; 0x4398 <__fp_cmp>
    41c0:	08 f4       	brcc	.+2      	; 0x41c4 <__cmpsf2+0x6>
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	08 95       	ret

000041c6 <__divsf3>:
    41c6:	0c d0       	rcall	.+24     	; 0x41e0 <__divsf3x>
    41c8:	4b c1       	rjmp	.+662    	; 0x4460 <__fp_round>
    41ca:	43 d1       	rcall	.+646    	; 0x4452 <__fp_pscB>
    41cc:	40 f0       	brcs	.+16     	; 0x41de <__divsf3+0x18>
    41ce:	3a d1       	rcall	.+628    	; 0x4444 <__fp_pscA>
    41d0:	30 f0       	brcs	.+12     	; 0x41de <__divsf3+0x18>
    41d2:	21 f4       	brne	.+8      	; 0x41dc <__divsf3+0x16>
    41d4:	5f 3f       	cpi	r21, 0xFF	; 255
    41d6:	19 f0       	breq	.+6      	; 0x41de <__divsf3+0x18>
    41d8:	03 c1       	rjmp	.+518    	; 0x43e0 <__fp_inf>
    41da:	51 11       	cpse	r21, r1
    41dc:	8c c1       	rjmp	.+792    	; 0x44f6 <__fp_szero>
    41de:	2f c1       	rjmp	.+606    	; 0x443e <__fp_nan>

000041e0 <__divsf3x>:
    41e0:	50 d1       	rcall	.+672    	; 0x4482 <__fp_split3>
    41e2:	98 f3       	brcs	.-26     	; 0x41ca <__divsf3+0x4>

000041e4 <__divsf3_pse>:
    41e4:	99 23       	and	r25, r25
    41e6:	c9 f3       	breq	.-14     	; 0x41da <__divsf3+0x14>
    41e8:	55 23       	and	r21, r21
    41ea:	b1 f3       	breq	.-20     	; 0x41d8 <__divsf3+0x12>
    41ec:	95 1b       	sub	r25, r21
    41ee:	55 0b       	sbc	r21, r21
    41f0:	bb 27       	eor	r27, r27
    41f2:	aa 27       	eor	r26, r26
    41f4:	62 17       	cp	r22, r18
    41f6:	73 07       	cpc	r23, r19
    41f8:	84 07       	cpc	r24, r20
    41fa:	38 f0       	brcs	.+14     	; 0x420a <__divsf3_pse+0x26>
    41fc:	9f 5f       	subi	r25, 0xFF	; 255
    41fe:	5f 4f       	sbci	r21, 0xFF	; 255
    4200:	22 0f       	add	r18, r18
    4202:	33 1f       	adc	r19, r19
    4204:	44 1f       	adc	r20, r20
    4206:	aa 1f       	adc	r26, r26
    4208:	a9 f3       	breq	.-22     	; 0x41f4 <__divsf3_pse+0x10>
    420a:	33 d0       	rcall	.+102    	; 0x4272 <__divsf3_pse+0x8e>
    420c:	0e 2e       	mov	r0, r30
    420e:	3a f0       	brmi	.+14     	; 0x421e <__divsf3_pse+0x3a>
    4210:	e0 e8       	ldi	r30, 0x80	; 128
    4212:	30 d0       	rcall	.+96     	; 0x4274 <__divsf3_pse+0x90>
    4214:	91 50       	subi	r25, 0x01	; 1
    4216:	50 40       	sbci	r21, 0x00	; 0
    4218:	e6 95       	lsr	r30
    421a:	00 1c       	adc	r0, r0
    421c:	ca f7       	brpl	.-14     	; 0x4210 <__divsf3_pse+0x2c>
    421e:	29 d0       	rcall	.+82     	; 0x4272 <__divsf3_pse+0x8e>
    4220:	fe 2f       	mov	r31, r30
    4222:	27 d0       	rcall	.+78     	; 0x4272 <__divsf3_pse+0x8e>
    4224:	66 0f       	add	r22, r22
    4226:	77 1f       	adc	r23, r23
    4228:	88 1f       	adc	r24, r24
    422a:	bb 1f       	adc	r27, r27
    422c:	26 17       	cp	r18, r22
    422e:	37 07       	cpc	r19, r23
    4230:	48 07       	cpc	r20, r24
    4232:	ab 07       	cpc	r26, r27
    4234:	b0 e8       	ldi	r27, 0x80	; 128
    4236:	09 f0       	breq	.+2      	; 0x423a <__divsf3_pse+0x56>
    4238:	bb 0b       	sbc	r27, r27
    423a:	80 2d       	mov	r24, r0
    423c:	bf 01       	movw	r22, r30
    423e:	ff 27       	eor	r31, r31
    4240:	93 58       	subi	r25, 0x83	; 131
    4242:	5f 4f       	sbci	r21, 0xFF	; 255
    4244:	2a f0       	brmi	.+10     	; 0x4250 <__divsf3_pse+0x6c>
    4246:	9e 3f       	cpi	r25, 0xFE	; 254
    4248:	51 05       	cpc	r21, r1
    424a:	68 f0       	brcs	.+26     	; 0x4266 <__divsf3_pse+0x82>
    424c:	c9 c0       	rjmp	.+402    	; 0x43e0 <__fp_inf>
    424e:	53 c1       	rjmp	.+678    	; 0x44f6 <__fp_szero>
    4250:	5f 3f       	cpi	r21, 0xFF	; 255
    4252:	ec f3       	brlt	.-6      	; 0x424e <__divsf3_pse+0x6a>
    4254:	98 3e       	cpi	r25, 0xE8	; 232
    4256:	dc f3       	brlt	.-10     	; 0x424e <__divsf3_pse+0x6a>
    4258:	86 95       	lsr	r24
    425a:	77 95       	ror	r23
    425c:	67 95       	ror	r22
    425e:	b7 95       	ror	r27
    4260:	f7 95       	ror	r31
    4262:	9f 5f       	subi	r25, 0xFF	; 255
    4264:	c9 f7       	brne	.-14     	; 0x4258 <__divsf3_pse+0x74>
    4266:	88 0f       	add	r24, r24
    4268:	91 1d       	adc	r25, r1
    426a:	96 95       	lsr	r25
    426c:	87 95       	ror	r24
    426e:	97 f9       	bld	r25, 7
    4270:	08 95       	ret
    4272:	e1 e0       	ldi	r30, 0x01	; 1
    4274:	66 0f       	add	r22, r22
    4276:	77 1f       	adc	r23, r23
    4278:	88 1f       	adc	r24, r24
    427a:	bb 1f       	adc	r27, r27
    427c:	62 17       	cp	r22, r18
    427e:	73 07       	cpc	r23, r19
    4280:	84 07       	cpc	r24, r20
    4282:	ba 07       	cpc	r27, r26
    4284:	20 f0       	brcs	.+8      	; 0x428e <__divsf3_pse+0xaa>
    4286:	62 1b       	sub	r22, r18
    4288:	73 0b       	sbc	r23, r19
    428a:	84 0b       	sbc	r24, r20
    428c:	ba 0b       	sbc	r27, r26
    428e:	ee 1f       	adc	r30, r30
    4290:	88 f7       	brcc	.-30     	; 0x4274 <__divsf3_pse+0x90>
    4292:	e0 95       	com	r30
    4294:	08 95       	ret

00004296 <__fixsfsi>:
    4296:	04 d0       	rcall	.+8      	; 0x42a0 <__fixunssfsi>
    4298:	68 94       	set
    429a:	b1 11       	cpse	r27, r1
    429c:	2c c1       	rjmp	.+600    	; 0x44f6 <__fp_szero>
    429e:	08 95       	ret

000042a0 <__fixunssfsi>:
    42a0:	f8 d0       	rcall	.+496    	; 0x4492 <__fp_splitA>
    42a2:	88 f0       	brcs	.+34     	; 0x42c6 <__fixunssfsi+0x26>
    42a4:	9f 57       	subi	r25, 0x7F	; 127
    42a6:	90 f0       	brcs	.+36     	; 0x42cc <__fixunssfsi+0x2c>
    42a8:	b9 2f       	mov	r27, r25
    42aa:	99 27       	eor	r25, r25
    42ac:	b7 51       	subi	r27, 0x17	; 23
    42ae:	a0 f0       	brcs	.+40     	; 0x42d8 <__fixunssfsi+0x38>
    42b0:	d1 f0       	breq	.+52     	; 0x42e6 <__fixunssfsi+0x46>
    42b2:	66 0f       	add	r22, r22
    42b4:	77 1f       	adc	r23, r23
    42b6:	88 1f       	adc	r24, r24
    42b8:	99 1f       	adc	r25, r25
    42ba:	1a f0       	brmi	.+6      	; 0x42c2 <__fixunssfsi+0x22>
    42bc:	ba 95       	dec	r27
    42be:	c9 f7       	brne	.-14     	; 0x42b2 <__fixunssfsi+0x12>
    42c0:	12 c0       	rjmp	.+36     	; 0x42e6 <__fixunssfsi+0x46>
    42c2:	b1 30       	cpi	r27, 0x01	; 1
    42c4:	81 f0       	breq	.+32     	; 0x42e6 <__fixunssfsi+0x46>
    42c6:	16 d1       	rcall	.+556    	; 0x44f4 <__fp_zero>
    42c8:	b1 e0       	ldi	r27, 0x01	; 1
    42ca:	08 95       	ret
    42cc:	13 c1       	rjmp	.+550    	; 0x44f4 <__fp_zero>
    42ce:	67 2f       	mov	r22, r23
    42d0:	78 2f       	mov	r23, r24
    42d2:	88 27       	eor	r24, r24
    42d4:	b8 5f       	subi	r27, 0xF8	; 248
    42d6:	39 f0       	breq	.+14     	; 0x42e6 <__fixunssfsi+0x46>
    42d8:	b9 3f       	cpi	r27, 0xF9	; 249
    42da:	cc f3       	brlt	.-14     	; 0x42ce <__fixunssfsi+0x2e>
    42dc:	86 95       	lsr	r24
    42de:	77 95       	ror	r23
    42e0:	67 95       	ror	r22
    42e2:	b3 95       	inc	r27
    42e4:	d9 f7       	brne	.-10     	; 0x42dc <__fixunssfsi+0x3c>
    42e6:	3e f4       	brtc	.+14     	; 0x42f6 <__fixunssfsi+0x56>
    42e8:	90 95       	com	r25
    42ea:	80 95       	com	r24
    42ec:	70 95       	com	r23
    42ee:	61 95       	neg	r22
    42f0:	7f 4f       	sbci	r23, 0xFF	; 255
    42f2:	8f 4f       	sbci	r24, 0xFF	; 255
    42f4:	9f 4f       	sbci	r25, 0xFF	; 255
    42f6:	08 95       	ret

000042f8 <__floatunsisf>:
    42f8:	e8 94       	clt
    42fa:	09 c0       	rjmp	.+18     	; 0x430e <__floatsisf+0x12>

000042fc <__floatsisf>:
    42fc:	97 fb       	bst	r25, 7
    42fe:	3e f4       	brtc	.+14     	; 0x430e <__floatsisf+0x12>
    4300:	90 95       	com	r25
    4302:	80 95       	com	r24
    4304:	70 95       	com	r23
    4306:	61 95       	neg	r22
    4308:	7f 4f       	sbci	r23, 0xFF	; 255
    430a:	8f 4f       	sbci	r24, 0xFF	; 255
    430c:	9f 4f       	sbci	r25, 0xFF	; 255
    430e:	99 23       	and	r25, r25
    4310:	a9 f0       	breq	.+42     	; 0x433c <__floatsisf+0x40>
    4312:	f9 2f       	mov	r31, r25
    4314:	96 e9       	ldi	r25, 0x96	; 150
    4316:	bb 27       	eor	r27, r27
    4318:	93 95       	inc	r25
    431a:	f6 95       	lsr	r31
    431c:	87 95       	ror	r24
    431e:	77 95       	ror	r23
    4320:	67 95       	ror	r22
    4322:	b7 95       	ror	r27
    4324:	f1 11       	cpse	r31, r1
    4326:	f8 cf       	rjmp	.-16     	; 0x4318 <__floatsisf+0x1c>
    4328:	fa f4       	brpl	.+62     	; 0x4368 <__floatsisf+0x6c>
    432a:	bb 0f       	add	r27, r27
    432c:	11 f4       	brne	.+4      	; 0x4332 <__floatsisf+0x36>
    432e:	60 ff       	sbrs	r22, 0
    4330:	1b c0       	rjmp	.+54     	; 0x4368 <__floatsisf+0x6c>
    4332:	6f 5f       	subi	r22, 0xFF	; 255
    4334:	7f 4f       	sbci	r23, 0xFF	; 255
    4336:	8f 4f       	sbci	r24, 0xFF	; 255
    4338:	9f 4f       	sbci	r25, 0xFF	; 255
    433a:	16 c0       	rjmp	.+44     	; 0x4368 <__floatsisf+0x6c>
    433c:	88 23       	and	r24, r24
    433e:	11 f0       	breq	.+4      	; 0x4344 <__floatsisf+0x48>
    4340:	96 e9       	ldi	r25, 0x96	; 150
    4342:	11 c0       	rjmp	.+34     	; 0x4366 <__floatsisf+0x6a>
    4344:	77 23       	and	r23, r23
    4346:	21 f0       	breq	.+8      	; 0x4350 <__floatsisf+0x54>
    4348:	9e e8       	ldi	r25, 0x8E	; 142
    434a:	87 2f       	mov	r24, r23
    434c:	76 2f       	mov	r23, r22
    434e:	05 c0       	rjmp	.+10     	; 0x435a <__floatsisf+0x5e>
    4350:	66 23       	and	r22, r22
    4352:	71 f0       	breq	.+28     	; 0x4370 <__floatsisf+0x74>
    4354:	96 e8       	ldi	r25, 0x86	; 134
    4356:	86 2f       	mov	r24, r22
    4358:	70 e0       	ldi	r23, 0x00	; 0
    435a:	60 e0       	ldi	r22, 0x00	; 0
    435c:	2a f0       	brmi	.+10     	; 0x4368 <__floatsisf+0x6c>
    435e:	9a 95       	dec	r25
    4360:	66 0f       	add	r22, r22
    4362:	77 1f       	adc	r23, r23
    4364:	88 1f       	adc	r24, r24
    4366:	da f7       	brpl	.-10     	; 0x435e <__floatsisf+0x62>
    4368:	88 0f       	add	r24, r24
    436a:	96 95       	lsr	r25
    436c:	87 95       	ror	r24
    436e:	97 f9       	bld	r25, 7
    4370:	08 95       	ret

00004372 <floor>:
    4372:	a9 d0       	rcall	.+338    	; 0x44c6 <__fp_trunc>
    4374:	80 f0       	brcs	.+32     	; 0x4396 <floor+0x24>
    4376:	9f 37       	cpi	r25, 0x7F	; 127
    4378:	40 f4       	brcc	.+16     	; 0x438a <floor+0x18>
    437a:	91 11       	cpse	r25, r1
    437c:	0e f0       	brts	.+2      	; 0x4380 <floor+0xe>
    437e:	bb c0       	rjmp	.+374    	; 0x44f6 <__fp_szero>
    4380:	60 e0       	ldi	r22, 0x00	; 0
    4382:	70 e0       	ldi	r23, 0x00	; 0
    4384:	80 e8       	ldi	r24, 0x80	; 128
    4386:	9f eb       	ldi	r25, 0xBF	; 191
    4388:	08 95       	ret
    438a:	26 f4       	brtc	.+8      	; 0x4394 <floor+0x22>
    438c:	1b 16       	cp	r1, r27
    438e:	61 1d       	adc	r22, r1
    4390:	71 1d       	adc	r23, r1
    4392:	81 1d       	adc	r24, r1
    4394:	2b c0       	rjmp	.+86     	; 0x43ec <__fp_mintl>
    4396:	45 c0       	rjmp	.+138    	; 0x4422 <__fp_mpack>

00004398 <__fp_cmp>:
    4398:	99 0f       	add	r25, r25
    439a:	00 08       	sbc	r0, r0
    439c:	55 0f       	add	r21, r21
    439e:	aa 0b       	sbc	r26, r26
    43a0:	e0 e8       	ldi	r30, 0x80	; 128
    43a2:	fe ef       	ldi	r31, 0xFE	; 254
    43a4:	16 16       	cp	r1, r22
    43a6:	17 06       	cpc	r1, r23
    43a8:	e8 07       	cpc	r30, r24
    43aa:	f9 07       	cpc	r31, r25
    43ac:	c0 f0       	brcs	.+48     	; 0x43de <__fp_cmp+0x46>
    43ae:	12 16       	cp	r1, r18
    43b0:	13 06       	cpc	r1, r19
    43b2:	e4 07       	cpc	r30, r20
    43b4:	f5 07       	cpc	r31, r21
    43b6:	98 f0       	brcs	.+38     	; 0x43de <__fp_cmp+0x46>
    43b8:	62 1b       	sub	r22, r18
    43ba:	73 0b       	sbc	r23, r19
    43bc:	84 0b       	sbc	r24, r20
    43be:	95 0b       	sbc	r25, r21
    43c0:	39 f4       	brne	.+14     	; 0x43d0 <__fp_cmp+0x38>
    43c2:	0a 26       	eor	r0, r26
    43c4:	61 f0       	breq	.+24     	; 0x43de <__fp_cmp+0x46>
    43c6:	23 2b       	or	r18, r19
    43c8:	24 2b       	or	r18, r20
    43ca:	25 2b       	or	r18, r21
    43cc:	21 f4       	brne	.+8      	; 0x43d6 <__fp_cmp+0x3e>
    43ce:	08 95       	ret
    43d0:	0a 26       	eor	r0, r26
    43d2:	09 f4       	brne	.+2      	; 0x43d6 <__fp_cmp+0x3e>
    43d4:	a1 40       	sbci	r26, 0x01	; 1
    43d6:	a6 95       	lsr	r26
    43d8:	8f ef       	ldi	r24, 0xFF	; 255
    43da:	81 1d       	adc	r24, r1
    43dc:	81 1d       	adc	r24, r1
    43de:	08 95       	ret

000043e0 <__fp_inf>:
    43e0:	97 f9       	bld	r25, 7
    43e2:	9f 67       	ori	r25, 0x7F	; 127
    43e4:	80 e8       	ldi	r24, 0x80	; 128
    43e6:	70 e0       	ldi	r23, 0x00	; 0
    43e8:	60 e0       	ldi	r22, 0x00	; 0
    43ea:	08 95       	ret

000043ec <__fp_mintl>:
    43ec:	88 23       	and	r24, r24
    43ee:	71 f4       	brne	.+28     	; 0x440c <__fp_mintl+0x20>
    43f0:	77 23       	and	r23, r23
    43f2:	21 f0       	breq	.+8      	; 0x43fc <__fp_mintl+0x10>
    43f4:	98 50       	subi	r25, 0x08	; 8
    43f6:	87 2b       	or	r24, r23
    43f8:	76 2f       	mov	r23, r22
    43fa:	07 c0       	rjmp	.+14     	; 0x440a <__fp_mintl+0x1e>
    43fc:	66 23       	and	r22, r22
    43fe:	11 f4       	brne	.+4      	; 0x4404 <__fp_mintl+0x18>
    4400:	99 27       	eor	r25, r25
    4402:	0d c0       	rjmp	.+26     	; 0x441e <__fp_mintl+0x32>
    4404:	90 51       	subi	r25, 0x10	; 16
    4406:	86 2b       	or	r24, r22
    4408:	70 e0       	ldi	r23, 0x00	; 0
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	2a f0       	brmi	.+10     	; 0x4418 <__fp_mintl+0x2c>
    440e:	9a 95       	dec	r25
    4410:	66 0f       	add	r22, r22
    4412:	77 1f       	adc	r23, r23
    4414:	88 1f       	adc	r24, r24
    4416:	da f7       	brpl	.-10     	; 0x440e <__fp_mintl+0x22>
    4418:	88 0f       	add	r24, r24
    441a:	96 95       	lsr	r25
    441c:	87 95       	ror	r24
    441e:	97 f9       	bld	r25, 7
    4420:	08 95       	ret

00004422 <__fp_mpack>:
    4422:	9f 3f       	cpi	r25, 0xFF	; 255
    4424:	31 f0       	breq	.+12     	; 0x4432 <__fp_mpack_finite+0xc>

00004426 <__fp_mpack_finite>:
    4426:	91 50       	subi	r25, 0x01	; 1
    4428:	20 f4       	brcc	.+8      	; 0x4432 <__fp_mpack_finite+0xc>
    442a:	87 95       	ror	r24
    442c:	77 95       	ror	r23
    442e:	67 95       	ror	r22
    4430:	b7 95       	ror	r27
    4432:	88 0f       	add	r24, r24
    4434:	91 1d       	adc	r25, r1
    4436:	96 95       	lsr	r25
    4438:	87 95       	ror	r24
    443a:	97 f9       	bld	r25, 7
    443c:	08 95       	ret

0000443e <__fp_nan>:
    443e:	9f ef       	ldi	r25, 0xFF	; 255
    4440:	80 ec       	ldi	r24, 0xC0	; 192
    4442:	08 95       	ret

00004444 <__fp_pscA>:
    4444:	00 24       	eor	r0, r0
    4446:	0a 94       	dec	r0
    4448:	16 16       	cp	r1, r22
    444a:	17 06       	cpc	r1, r23
    444c:	18 06       	cpc	r1, r24
    444e:	09 06       	cpc	r0, r25
    4450:	08 95       	ret

00004452 <__fp_pscB>:
    4452:	00 24       	eor	r0, r0
    4454:	0a 94       	dec	r0
    4456:	12 16       	cp	r1, r18
    4458:	13 06       	cpc	r1, r19
    445a:	14 06       	cpc	r1, r20
    445c:	05 06       	cpc	r0, r21
    445e:	08 95       	ret

00004460 <__fp_round>:
    4460:	09 2e       	mov	r0, r25
    4462:	03 94       	inc	r0
    4464:	00 0c       	add	r0, r0
    4466:	11 f4       	brne	.+4      	; 0x446c <__fp_round+0xc>
    4468:	88 23       	and	r24, r24
    446a:	52 f0       	brmi	.+20     	; 0x4480 <__fp_round+0x20>
    446c:	bb 0f       	add	r27, r27
    446e:	40 f4       	brcc	.+16     	; 0x4480 <__fp_round+0x20>
    4470:	bf 2b       	or	r27, r31
    4472:	11 f4       	brne	.+4      	; 0x4478 <__fp_round+0x18>
    4474:	60 ff       	sbrs	r22, 0
    4476:	04 c0       	rjmp	.+8      	; 0x4480 <__fp_round+0x20>
    4478:	6f 5f       	subi	r22, 0xFF	; 255
    447a:	7f 4f       	sbci	r23, 0xFF	; 255
    447c:	8f 4f       	sbci	r24, 0xFF	; 255
    447e:	9f 4f       	sbci	r25, 0xFF	; 255
    4480:	08 95       	ret

00004482 <__fp_split3>:
    4482:	57 fd       	sbrc	r21, 7
    4484:	90 58       	subi	r25, 0x80	; 128
    4486:	44 0f       	add	r20, r20
    4488:	55 1f       	adc	r21, r21
    448a:	59 f0       	breq	.+22     	; 0x44a2 <__fp_splitA+0x10>
    448c:	5f 3f       	cpi	r21, 0xFF	; 255
    448e:	71 f0       	breq	.+28     	; 0x44ac <__fp_splitA+0x1a>
    4490:	47 95       	ror	r20

00004492 <__fp_splitA>:
    4492:	88 0f       	add	r24, r24
    4494:	97 fb       	bst	r25, 7
    4496:	99 1f       	adc	r25, r25
    4498:	61 f0       	breq	.+24     	; 0x44b2 <__fp_splitA+0x20>
    449a:	9f 3f       	cpi	r25, 0xFF	; 255
    449c:	79 f0       	breq	.+30     	; 0x44bc <__fp_splitA+0x2a>
    449e:	87 95       	ror	r24
    44a0:	08 95       	ret
    44a2:	12 16       	cp	r1, r18
    44a4:	13 06       	cpc	r1, r19
    44a6:	14 06       	cpc	r1, r20
    44a8:	55 1f       	adc	r21, r21
    44aa:	f2 cf       	rjmp	.-28     	; 0x4490 <__fp_split3+0xe>
    44ac:	46 95       	lsr	r20
    44ae:	f1 df       	rcall	.-30     	; 0x4492 <__fp_splitA>
    44b0:	08 c0       	rjmp	.+16     	; 0x44c2 <__fp_splitA+0x30>
    44b2:	16 16       	cp	r1, r22
    44b4:	17 06       	cpc	r1, r23
    44b6:	18 06       	cpc	r1, r24
    44b8:	99 1f       	adc	r25, r25
    44ba:	f1 cf       	rjmp	.-30     	; 0x449e <__fp_splitA+0xc>
    44bc:	86 95       	lsr	r24
    44be:	71 05       	cpc	r23, r1
    44c0:	61 05       	cpc	r22, r1
    44c2:	08 94       	sec
    44c4:	08 95       	ret

000044c6 <__fp_trunc>:
    44c6:	e5 df       	rcall	.-54     	; 0x4492 <__fp_splitA>
    44c8:	a0 f0       	brcs	.+40     	; 0x44f2 <__fp_trunc+0x2c>
    44ca:	be e7       	ldi	r27, 0x7E	; 126
    44cc:	b9 17       	cp	r27, r25
    44ce:	88 f4       	brcc	.+34     	; 0x44f2 <__fp_trunc+0x2c>
    44d0:	bb 27       	eor	r27, r27
    44d2:	9f 38       	cpi	r25, 0x8F	; 143
    44d4:	60 f4       	brcc	.+24     	; 0x44ee <__fp_trunc+0x28>
    44d6:	16 16       	cp	r1, r22
    44d8:	b1 1d       	adc	r27, r1
    44da:	67 2f       	mov	r22, r23
    44dc:	78 2f       	mov	r23, r24
    44de:	88 27       	eor	r24, r24
    44e0:	98 5f       	subi	r25, 0xF8	; 248
    44e2:	f7 cf       	rjmp	.-18     	; 0x44d2 <__fp_trunc+0xc>
    44e4:	86 95       	lsr	r24
    44e6:	77 95       	ror	r23
    44e8:	67 95       	ror	r22
    44ea:	b1 1d       	adc	r27, r1
    44ec:	93 95       	inc	r25
    44ee:	96 39       	cpi	r25, 0x96	; 150
    44f0:	c8 f3       	brcs	.-14     	; 0x44e4 <__fp_trunc+0x1e>
    44f2:	08 95       	ret

000044f4 <__fp_zero>:
    44f4:	e8 94       	clt

000044f6 <__fp_szero>:
    44f6:	bb 27       	eor	r27, r27
    44f8:	66 27       	eor	r22, r22
    44fa:	77 27       	eor	r23, r23
    44fc:	cb 01       	movw	r24, r22
    44fe:	97 f9       	bld	r25, 7
    4500:	08 95       	ret

00004502 <__gesf2>:
    4502:	4a df       	rcall	.-364    	; 0x4398 <__fp_cmp>
    4504:	08 f4       	brcc	.+2      	; 0x4508 <__gesf2+0x6>
    4506:	8f ef       	ldi	r24, 0xFF	; 255
    4508:	08 95       	ret

0000450a <__mulsf3>:
    450a:	0b d0       	rcall	.+22     	; 0x4522 <__mulsf3x>
    450c:	a9 cf       	rjmp	.-174    	; 0x4460 <__fp_round>
    450e:	9a df       	rcall	.-204    	; 0x4444 <__fp_pscA>
    4510:	28 f0       	brcs	.+10     	; 0x451c <__mulsf3+0x12>
    4512:	9f df       	rcall	.-194    	; 0x4452 <__fp_pscB>
    4514:	18 f0       	brcs	.+6      	; 0x451c <__mulsf3+0x12>
    4516:	95 23       	and	r25, r21
    4518:	09 f0       	breq	.+2      	; 0x451c <__mulsf3+0x12>
    451a:	62 cf       	rjmp	.-316    	; 0x43e0 <__fp_inf>
    451c:	90 cf       	rjmp	.-224    	; 0x443e <__fp_nan>
    451e:	11 24       	eor	r1, r1
    4520:	ea cf       	rjmp	.-44     	; 0x44f6 <__fp_szero>

00004522 <__mulsf3x>:
    4522:	af df       	rcall	.-162    	; 0x4482 <__fp_split3>
    4524:	a0 f3       	brcs	.-24     	; 0x450e <__mulsf3+0x4>

00004526 <__mulsf3_pse>:
    4526:	95 9f       	mul	r25, r21
    4528:	d1 f3       	breq	.-12     	; 0x451e <__mulsf3+0x14>
    452a:	95 0f       	add	r25, r21
    452c:	50 e0       	ldi	r21, 0x00	; 0
    452e:	55 1f       	adc	r21, r21
    4530:	62 9f       	mul	r22, r18
    4532:	f0 01       	movw	r30, r0
    4534:	72 9f       	mul	r23, r18
    4536:	bb 27       	eor	r27, r27
    4538:	f0 0d       	add	r31, r0
    453a:	b1 1d       	adc	r27, r1
    453c:	63 9f       	mul	r22, r19
    453e:	aa 27       	eor	r26, r26
    4540:	f0 0d       	add	r31, r0
    4542:	b1 1d       	adc	r27, r1
    4544:	aa 1f       	adc	r26, r26
    4546:	64 9f       	mul	r22, r20
    4548:	66 27       	eor	r22, r22
    454a:	b0 0d       	add	r27, r0
    454c:	a1 1d       	adc	r26, r1
    454e:	66 1f       	adc	r22, r22
    4550:	82 9f       	mul	r24, r18
    4552:	22 27       	eor	r18, r18
    4554:	b0 0d       	add	r27, r0
    4556:	a1 1d       	adc	r26, r1
    4558:	62 1f       	adc	r22, r18
    455a:	73 9f       	mul	r23, r19
    455c:	b0 0d       	add	r27, r0
    455e:	a1 1d       	adc	r26, r1
    4560:	62 1f       	adc	r22, r18
    4562:	83 9f       	mul	r24, r19
    4564:	a0 0d       	add	r26, r0
    4566:	61 1d       	adc	r22, r1
    4568:	22 1f       	adc	r18, r18
    456a:	74 9f       	mul	r23, r20
    456c:	33 27       	eor	r19, r19
    456e:	a0 0d       	add	r26, r0
    4570:	61 1d       	adc	r22, r1
    4572:	23 1f       	adc	r18, r19
    4574:	84 9f       	mul	r24, r20
    4576:	60 0d       	add	r22, r0
    4578:	21 1d       	adc	r18, r1
    457a:	82 2f       	mov	r24, r18
    457c:	76 2f       	mov	r23, r22
    457e:	6a 2f       	mov	r22, r26
    4580:	11 24       	eor	r1, r1
    4582:	9f 57       	subi	r25, 0x7F	; 127
    4584:	50 40       	sbci	r21, 0x00	; 0
    4586:	8a f0       	brmi	.+34     	; 0x45aa <__mulsf3_pse+0x84>
    4588:	e1 f0       	breq	.+56     	; 0x45c2 <__mulsf3_pse+0x9c>
    458a:	88 23       	and	r24, r24
    458c:	4a f0       	brmi	.+18     	; 0x45a0 <__mulsf3_pse+0x7a>
    458e:	ee 0f       	add	r30, r30
    4590:	ff 1f       	adc	r31, r31
    4592:	bb 1f       	adc	r27, r27
    4594:	66 1f       	adc	r22, r22
    4596:	77 1f       	adc	r23, r23
    4598:	88 1f       	adc	r24, r24
    459a:	91 50       	subi	r25, 0x01	; 1
    459c:	50 40       	sbci	r21, 0x00	; 0
    459e:	a9 f7       	brne	.-22     	; 0x458a <__mulsf3_pse+0x64>
    45a0:	9e 3f       	cpi	r25, 0xFE	; 254
    45a2:	51 05       	cpc	r21, r1
    45a4:	70 f0       	brcs	.+28     	; 0x45c2 <__mulsf3_pse+0x9c>
    45a6:	1c cf       	rjmp	.-456    	; 0x43e0 <__fp_inf>
    45a8:	a6 cf       	rjmp	.-180    	; 0x44f6 <__fp_szero>
    45aa:	5f 3f       	cpi	r21, 0xFF	; 255
    45ac:	ec f3       	brlt	.-6      	; 0x45a8 <__mulsf3_pse+0x82>
    45ae:	98 3e       	cpi	r25, 0xE8	; 232
    45b0:	dc f3       	brlt	.-10     	; 0x45a8 <__mulsf3_pse+0x82>
    45b2:	86 95       	lsr	r24
    45b4:	77 95       	ror	r23
    45b6:	67 95       	ror	r22
    45b8:	b7 95       	ror	r27
    45ba:	f7 95       	ror	r31
    45bc:	e7 95       	ror	r30
    45be:	9f 5f       	subi	r25, 0xFF	; 255
    45c0:	c1 f7       	brne	.-16     	; 0x45b2 <__mulsf3_pse+0x8c>
    45c2:	fe 2b       	or	r31, r30
    45c4:	88 0f       	add	r24, r24
    45c6:	91 1d       	adc	r25, r1
    45c8:	96 95       	lsr	r25
    45ca:	87 95       	ror	r24
    45cc:	97 f9       	bld	r25, 7
    45ce:	08 95       	ret

000045d0 <__udivmodqi4>:
    45d0:	99 1b       	sub	r25, r25
    45d2:	79 e0       	ldi	r23, 0x09	; 9
    45d4:	04 c0       	rjmp	.+8      	; 0x45de <__udivmodqi4_ep>

000045d6 <__udivmodqi4_loop>:
    45d6:	99 1f       	adc	r25, r25
    45d8:	96 17       	cp	r25, r22
    45da:	08 f0       	brcs	.+2      	; 0x45de <__udivmodqi4_ep>
    45dc:	96 1b       	sub	r25, r22

000045de <__udivmodqi4_ep>:
    45de:	88 1f       	adc	r24, r24
    45e0:	7a 95       	dec	r23
    45e2:	c9 f7       	brne	.-14     	; 0x45d6 <__udivmodqi4_loop>
    45e4:	80 95       	com	r24
    45e6:	08 95       	ret

000045e8 <__udivmodhi4>:
    45e8:	aa 1b       	sub	r26, r26
    45ea:	bb 1b       	sub	r27, r27
    45ec:	51 e1       	ldi	r21, 0x11	; 17
    45ee:	07 c0       	rjmp	.+14     	; 0x45fe <__udivmodhi4_ep>

000045f0 <__udivmodhi4_loop>:
    45f0:	aa 1f       	adc	r26, r26
    45f2:	bb 1f       	adc	r27, r27
    45f4:	a6 17       	cp	r26, r22
    45f6:	b7 07       	cpc	r27, r23
    45f8:	10 f0       	brcs	.+4      	; 0x45fe <__udivmodhi4_ep>
    45fa:	a6 1b       	sub	r26, r22
    45fc:	b7 0b       	sbc	r27, r23

000045fe <__udivmodhi4_ep>:
    45fe:	88 1f       	adc	r24, r24
    4600:	99 1f       	adc	r25, r25
    4602:	5a 95       	dec	r21
    4604:	a9 f7       	brne	.-22     	; 0x45f0 <__udivmodhi4_loop>
    4606:	80 95       	com	r24
    4608:	90 95       	com	r25
    460a:	bc 01       	movw	r22, r24
    460c:	cd 01       	movw	r24, r26
    460e:	08 95       	ret

00004610 <__divmodhi4>:
    4610:	97 fb       	bst	r25, 7
    4612:	07 2e       	mov	r0, r23
    4614:	16 f4       	brtc	.+4      	; 0x461a <__divmodhi4+0xa>
    4616:	00 94       	com	r0
    4618:	06 d0       	rcall	.+12     	; 0x4626 <__divmodhi4_neg1>
    461a:	77 fd       	sbrc	r23, 7
    461c:	08 d0       	rcall	.+16     	; 0x462e <__divmodhi4_neg2>
    461e:	e4 df       	rcall	.-56     	; 0x45e8 <__udivmodhi4>
    4620:	07 fc       	sbrc	r0, 7
    4622:	05 d0       	rcall	.+10     	; 0x462e <__divmodhi4_neg2>
    4624:	3e f4       	brtc	.+14     	; 0x4634 <__divmodhi4_exit>

00004626 <__divmodhi4_neg1>:
    4626:	90 95       	com	r25
    4628:	81 95       	neg	r24
    462a:	9f 4f       	sbci	r25, 0xFF	; 255
    462c:	08 95       	ret

0000462e <__divmodhi4_neg2>:
    462e:	70 95       	com	r23
    4630:	61 95       	neg	r22
    4632:	7f 4f       	sbci	r23, 0xFF	; 255

00004634 <__divmodhi4_exit>:
    4634:	08 95       	ret

00004636 <__tablejump2__>:
    4636:	ee 0f       	add	r30, r30
    4638:	ff 1f       	adc	r31, r31
    463a:	05 90       	lpm	r0, Z+
    463c:	f4 91       	lpm	r31, Z
    463e:	e0 2d       	mov	r30, r0
    4640:	09 94       	ijmp

00004642 <strcpy>:
    4642:	fb 01       	movw	r30, r22
    4644:	dc 01       	movw	r26, r24
    4646:	01 90       	ld	r0, Z+
    4648:	0d 92       	st	X+, r0
    464a:	00 20       	and	r0, r0
    464c:	e1 f7       	brne	.-8      	; 0x4646 <strcpy+0x4>
    464e:	08 95       	ret

00004650 <strnlen>:
    4650:	fc 01       	movw	r30, r24
    4652:	61 50       	subi	r22, 0x01	; 1
    4654:	70 40       	sbci	r23, 0x00	; 0
    4656:	01 90       	ld	r0, Z+
    4658:	01 10       	cpse	r0, r1
    465a:	d8 f7       	brcc	.-10     	; 0x4652 <strnlen+0x2>
    465c:	80 95       	com	r24
    465e:	90 95       	com	r25
    4660:	8e 0f       	add	r24, r30
    4662:	9f 1f       	adc	r25, r31
    4664:	08 95       	ret

00004666 <snprintf>:
    4666:	ae e0       	ldi	r26, 0x0E	; 14
    4668:	b0 e0       	ldi	r27, 0x00	; 0
    466a:	e8 e3       	ldi	r30, 0x38	; 56
    466c:	f3 e2       	ldi	r31, 0x23	; 35
    466e:	c3 c2       	rjmp	.+1414   	; 0x4bf6 <__prologue_saves__+0x1c>
    4670:	0d 89       	ldd	r16, Y+21	; 0x15
    4672:	1e 89       	ldd	r17, Y+22	; 0x16
    4674:	8f 89       	ldd	r24, Y+23	; 0x17
    4676:	98 8d       	ldd	r25, Y+24	; 0x18
    4678:	26 e0       	ldi	r18, 0x06	; 6
    467a:	2c 83       	std	Y+4, r18	; 0x04
    467c:	1a 83       	std	Y+2, r17	; 0x02
    467e:	09 83       	std	Y+1, r16	; 0x01
    4680:	97 ff       	sbrs	r25, 7
    4682:	02 c0       	rjmp	.+4      	; 0x4688 <snprintf+0x22>
    4684:	80 e0       	ldi	r24, 0x00	; 0
    4686:	90 e8       	ldi	r25, 0x80	; 128
    4688:	01 97       	sbiw	r24, 0x01	; 1
    468a:	9e 83       	std	Y+6, r25	; 0x06
    468c:	8d 83       	std	Y+5, r24	; 0x05
    468e:	ae 01       	movw	r20, r28
    4690:	45 5e       	subi	r20, 0xE5	; 229
    4692:	5f 4f       	sbci	r21, 0xFF	; 255
    4694:	69 8d       	ldd	r22, Y+25	; 0x19
    4696:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4698:	ce 01       	movw	r24, r28
    469a:	01 96       	adiw	r24, 0x01	; 1
    469c:	11 d0       	rcall	.+34     	; 0x46c0 <vfprintf>
    469e:	4d 81       	ldd	r20, Y+5	; 0x05
    46a0:	5e 81       	ldd	r21, Y+6	; 0x06
    46a2:	57 fd       	sbrc	r21, 7
    46a4:	0a c0       	rjmp	.+20     	; 0x46ba <snprintf+0x54>
    46a6:	2f 81       	ldd	r18, Y+7	; 0x07
    46a8:	38 85       	ldd	r19, Y+8	; 0x08
    46aa:	42 17       	cp	r20, r18
    46ac:	53 07       	cpc	r21, r19
    46ae:	0c f4       	brge	.+2      	; 0x46b2 <snprintf+0x4c>
    46b0:	9a 01       	movw	r18, r20
    46b2:	f8 01       	movw	r30, r16
    46b4:	e2 0f       	add	r30, r18
    46b6:	f3 1f       	adc	r31, r19
    46b8:	10 82       	st	Z, r1
    46ba:	2e 96       	adiw	r28, 0x0e	; 14
    46bc:	e4 e0       	ldi	r30, 0x04	; 4
    46be:	b7 c2       	rjmp	.+1390   	; 0x4c2e <__epilogue_restores__+0x1c>

000046c0 <vfprintf>:
    46c0:	ab e0       	ldi	r26, 0x0B	; 11
    46c2:	b0 e0       	ldi	r27, 0x00	; 0
    46c4:	e5 e6       	ldi	r30, 0x65	; 101
    46c6:	f3 e2       	ldi	r31, 0x23	; 35
    46c8:	88 c2       	rjmp	.+1296   	; 0x4bda <__prologue_saves__>
    46ca:	6c 01       	movw	r12, r24
    46cc:	7b 01       	movw	r14, r22
    46ce:	8a 01       	movw	r16, r20
    46d0:	fc 01       	movw	r30, r24
    46d2:	17 82       	std	Z+7, r1	; 0x07
    46d4:	16 82       	std	Z+6, r1	; 0x06
    46d6:	83 81       	ldd	r24, Z+3	; 0x03
    46d8:	81 ff       	sbrs	r24, 1
    46da:	bf c1       	rjmp	.+894    	; 0x4a5a <vfprintf+0x39a>
    46dc:	ce 01       	movw	r24, r28
    46de:	01 96       	adiw	r24, 0x01	; 1
    46e0:	3c 01       	movw	r6, r24
    46e2:	f6 01       	movw	r30, r12
    46e4:	93 81       	ldd	r25, Z+3	; 0x03
    46e6:	f7 01       	movw	r30, r14
    46e8:	93 fd       	sbrc	r25, 3
    46ea:	85 91       	lpm	r24, Z+
    46ec:	93 ff       	sbrs	r25, 3
    46ee:	81 91       	ld	r24, Z+
    46f0:	7f 01       	movw	r14, r30
    46f2:	88 23       	and	r24, r24
    46f4:	09 f4       	brne	.+2      	; 0x46f8 <vfprintf+0x38>
    46f6:	ad c1       	rjmp	.+858    	; 0x4a52 <vfprintf+0x392>
    46f8:	85 32       	cpi	r24, 0x25	; 37
    46fa:	39 f4       	brne	.+14     	; 0x470a <vfprintf+0x4a>
    46fc:	93 fd       	sbrc	r25, 3
    46fe:	85 91       	lpm	r24, Z+
    4700:	93 ff       	sbrs	r25, 3
    4702:	81 91       	ld	r24, Z+
    4704:	7f 01       	movw	r14, r30
    4706:	85 32       	cpi	r24, 0x25	; 37
    4708:	21 f4       	brne	.+8      	; 0x4712 <vfprintf+0x52>
    470a:	b6 01       	movw	r22, r12
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	b5 d1       	rcall	.+874    	; 0x4a7a <fputc>
    4710:	e8 cf       	rjmp	.-48     	; 0x46e2 <vfprintf+0x22>
    4712:	91 2c       	mov	r9, r1
    4714:	21 2c       	mov	r2, r1
    4716:	31 2c       	mov	r3, r1
    4718:	ff e1       	ldi	r31, 0x1F	; 31
    471a:	f3 15       	cp	r31, r3
    471c:	d8 f0       	brcs	.+54     	; 0x4754 <vfprintf+0x94>
    471e:	8b 32       	cpi	r24, 0x2B	; 43
    4720:	79 f0       	breq	.+30     	; 0x4740 <vfprintf+0x80>
    4722:	38 f4       	brcc	.+14     	; 0x4732 <vfprintf+0x72>
    4724:	80 32       	cpi	r24, 0x20	; 32
    4726:	79 f0       	breq	.+30     	; 0x4746 <vfprintf+0x86>
    4728:	83 32       	cpi	r24, 0x23	; 35
    472a:	a1 f4       	brne	.+40     	; 0x4754 <vfprintf+0x94>
    472c:	23 2d       	mov	r18, r3
    472e:	20 61       	ori	r18, 0x10	; 16
    4730:	1d c0       	rjmp	.+58     	; 0x476c <vfprintf+0xac>
    4732:	8d 32       	cpi	r24, 0x2D	; 45
    4734:	61 f0       	breq	.+24     	; 0x474e <vfprintf+0x8e>
    4736:	80 33       	cpi	r24, 0x30	; 48
    4738:	69 f4       	brne	.+26     	; 0x4754 <vfprintf+0x94>
    473a:	23 2d       	mov	r18, r3
    473c:	21 60       	ori	r18, 0x01	; 1
    473e:	16 c0       	rjmp	.+44     	; 0x476c <vfprintf+0xac>
    4740:	83 2d       	mov	r24, r3
    4742:	82 60       	ori	r24, 0x02	; 2
    4744:	38 2e       	mov	r3, r24
    4746:	e3 2d       	mov	r30, r3
    4748:	e4 60       	ori	r30, 0x04	; 4
    474a:	3e 2e       	mov	r3, r30
    474c:	2a c0       	rjmp	.+84     	; 0x47a2 <vfprintf+0xe2>
    474e:	f3 2d       	mov	r31, r3
    4750:	f8 60       	ori	r31, 0x08	; 8
    4752:	1d c0       	rjmp	.+58     	; 0x478e <vfprintf+0xce>
    4754:	37 fc       	sbrc	r3, 7
    4756:	2d c0       	rjmp	.+90     	; 0x47b2 <vfprintf+0xf2>
    4758:	20 ed       	ldi	r18, 0xD0	; 208
    475a:	28 0f       	add	r18, r24
    475c:	2a 30       	cpi	r18, 0x0A	; 10
    475e:	40 f0       	brcs	.+16     	; 0x4770 <vfprintf+0xb0>
    4760:	8e 32       	cpi	r24, 0x2E	; 46
    4762:	b9 f4       	brne	.+46     	; 0x4792 <vfprintf+0xd2>
    4764:	36 fc       	sbrc	r3, 6
    4766:	75 c1       	rjmp	.+746    	; 0x4a52 <vfprintf+0x392>
    4768:	23 2d       	mov	r18, r3
    476a:	20 64       	ori	r18, 0x40	; 64
    476c:	32 2e       	mov	r3, r18
    476e:	19 c0       	rjmp	.+50     	; 0x47a2 <vfprintf+0xe2>
    4770:	36 fe       	sbrs	r3, 6
    4772:	06 c0       	rjmp	.+12     	; 0x4780 <vfprintf+0xc0>
    4774:	8a e0       	ldi	r24, 0x0A	; 10
    4776:	98 9e       	mul	r9, r24
    4778:	20 0d       	add	r18, r0
    477a:	11 24       	eor	r1, r1
    477c:	92 2e       	mov	r9, r18
    477e:	11 c0       	rjmp	.+34     	; 0x47a2 <vfprintf+0xe2>
    4780:	ea e0       	ldi	r30, 0x0A	; 10
    4782:	2e 9e       	mul	r2, r30
    4784:	20 0d       	add	r18, r0
    4786:	11 24       	eor	r1, r1
    4788:	22 2e       	mov	r2, r18
    478a:	f3 2d       	mov	r31, r3
    478c:	f0 62       	ori	r31, 0x20	; 32
    478e:	3f 2e       	mov	r3, r31
    4790:	08 c0       	rjmp	.+16     	; 0x47a2 <vfprintf+0xe2>
    4792:	8c 36       	cpi	r24, 0x6C	; 108
    4794:	21 f4       	brne	.+8      	; 0x479e <vfprintf+0xde>
    4796:	83 2d       	mov	r24, r3
    4798:	80 68       	ori	r24, 0x80	; 128
    479a:	38 2e       	mov	r3, r24
    479c:	02 c0       	rjmp	.+4      	; 0x47a2 <vfprintf+0xe2>
    479e:	88 36       	cpi	r24, 0x68	; 104
    47a0:	41 f4       	brne	.+16     	; 0x47b2 <vfprintf+0xf2>
    47a2:	f7 01       	movw	r30, r14
    47a4:	93 fd       	sbrc	r25, 3
    47a6:	85 91       	lpm	r24, Z+
    47a8:	93 ff       	sbrs	r25, 3
    47aa:	81 91       	ld	r24, Z+
    47ac:	7f 01       	movw	r14, r30
    47ae:	81 11       	cpse	r24, r1
    47b0:	b3 cf       	rjmp	.-154    	; 0x4718 <vfprintf+0x58>
    47b2:	98 2f       	mov	r25, r24
    47b4:	9f 7d       	andi	r25, 0xDF	; 223
    47b6:	95 54       	subi	r25, 0x45	; 69
    47b8:	93 30       	cpi	r25, 0x03	; 3
    47ba:	28 f4       	brcc	.+10     	; 0x47c6 <vfprintf+0x106>
    47bc:	0c 5f       	subi	r16, 0xFC	; 252
    47be:	1f 4f       	sbci	r17, 0xFF	; 255
    47c0:	9f e3       	ldi	r25, 0x3F	; 63
    47c2:	99 83       	std	Y+1, r25	; 0x01
    47c4:	0d c0       	rjmp	.+26     	; 0x47e0 <vfprintf+0x120>
    47c6:	83 36       	cpi	r24, 0x63	; 99
    47c8:	31 f0       	breq	.+12     	; 0x47d6 <vfprintf+0x116>
    47ca:	83 37       	cpi	r24, 0x73	; 115
    47cc:	71 f0       	breq	.+28     	; 0x47ea <vfprintf+0x12a>
    47ce:	83 35       	cpi	r24, 0x53	; 83
    47d0:	09 f0       	breq	.+2      	; 0x47d4 <vfprintf+0x114>
    47d2:	55 c0       	rjmp	.+170    	; 0x487e <vfprintf+0x1be>
    47d4:	20 c0       	rjmp	.+64     	; 0x4816 <vfprintf+0x156>
    47d6:	f8 01       	movw	r30, r16
    47d8:	80 81       	ld	r24, Z
    47da:	89 83       	std	Y+1, r24	; 0x01
    47dc:	0e 5f       	subi	r16, 0xFE	; 254
    47de:	1f 4f       	sbci	r17, 0xFF	; 255
    47e0:	88 24       	eor	r8, r8
    47e2:	83 94       	inc	r8
    47e4:	91 2c       	mov	r9, r1
    47e6:	53 01       	movw	r10, r6
    47e8:	12 c0       	rjmp	.+36     	; 0x480e <vfprintf+0x14e>
    47ea:	28 01       	movw	r4, r16
    47ec:	f2 e0       	ldi	r31, 0x02	; 2
    47ee:	4f 0e       	add	r4, r31
    47f0:	51 1c       	adc	r5, r1
    47f2:	f8 01       	movw	r30, r16
    47f4:	a0 80       	ld	r10, Z
    47f6:	b1 80       	ldd	r11, Z+1	; 0x01
    47f8:	36 fe       	sbrs	r3, 6
    47fa:	03 c0       	rjmp	.+6      	; 0x4802 <vfprintf+0x142>
    47fc:	69 2d       	mov	r22, r9
    47fe:	70 e0       	ldi	r23, 0x00	; 0
    4800:	02 c0       	rjmp	.+4      	; 0x4806 <vfprintf+0x146>
    4802:	6f ef       	ldi	r22, 0xFF	; 255
    4804:	7f ef       	ldi	r23, 0xFF	; 255
    4806:	c5 01       	movw	r24, r10
    4808:	23 df       	rcall	.-442    	; 0x4650 <strnlen>
    480a:	4c 01       	movw	r8, r24
    480c:	82 01       	movw	r16, r4
    480e:	f3 2d       	mov	r31, r3
    4810:	ff 77       	andi	r31, 0x7F	; 127
    4812:	3f 2e       	mov	r3, r31
    4814:	15 c0       	rjmp	.+42     	; 0x4840 <vfprintf+0x180>
    4816:	28 01       	movw	r4, r16
    4818:	22 e0       	ldi	r18, 0x02	; 2
    481a:	42 0e       	add	r4, r18
    481c:	51 1c       	adc	r5, r1
    481e:	f8 01       	movw	r30, r16
    4820:	a0 80       	ld	r10, Z
    4822:	b1 80       	ldd	r11, Z+1	; 0x01
    4824:	36 fe       	sbrs	r3, 6
    4826:	03 c0       	rjmp	.+6      	; 0x482e <vfprintf+0x16e>
    4828:	69 2d       	mov	r22, r9
    482a:	70 e0       	ldi	r23, 0x00	; 0
    482c:	02 c0       	rjmp	.+4      	; 0x4832 <vfprintf+0x172>
    482e:	6f ef       	ldi	r22, 0xFF	; 255
    4830:	7f ef       	ldi	r23, 0xFF	; 255
    4832:	c5 01       	movw	r24, r10
    4834:	17 d1       	rcall	.+558    	; 0x4a64 <strnlen_P>
    4836:	4c 01       	movw	r8, r24
    4838:	f3 2d       	mov	r31, r3
    483a:	f0 68       	ori	r31, 0x80	; 128
    483c:	3f 2e       	mov	r3, r31
    483e:	82 01       	movw	r16, r4
    4840:	33 fc       	sbrc	r3, 3
    4842:	19 c0       	rjmp	.+50     	; 0x4876 <vfprintf+0x1b6>
    4844:	82 2d       	mov	r24, r2
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	88 16       	cp	r8, r24
    484a:	99 06       	cpc	r9, r25
    484c:	a0 f4       	brcc	.+40     	; 0x4876 <vfprintf+0x1b6>
    484e:	b6 01       	movw	r22, r12
    4850:	80 e2       	ldi	r24, 0x20	; 32
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	12 d1       	rcall	.+548    	; 0x4a7a <fputc>
    4856:	2a 94       	dec	r2
    4858:	f5 cf       	rjmp	.-22     	; 0x4844 <vfprintf+0x184>
    485a:	f5 01       	movw	r30, r10
    485c:	37 fc       	sbrc	r3, 7
    485e:	85 91       	lpm	r24, Z+
    4860:	37 fe       	sbrs	r3, 7
    4862:	81 91       	ld	r24, Z+
    4864:	5f 01       	movw	r10, r30
    4866:	b6 01       	movw	r22, r12
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	07 d1       	rcall	.+526    	; 0x4a7a <fputc>
    486c:	21 10       	cpse	r2, r1
    486e:	2a 94       	dec	r2
    4870:	21 e0       	ldi	r18, 0x01	; 1
    4872:	82 1a       	sub	r8, r18
    4874:	91 08       	sbc	r9, r1
    4876:	81 14       	cp	r8, r1
    4878:	91 04       	cpc	r9, r1
    487a:	79 f7       	brne	.-34     	; 0x485a <vfprintf+0x19a>
    487c:	e1 c0       	rjmp	.+450    	; 0x4a40 <vfprintf+0x380>
    487e:	84 36       	cpi	r24, 0x64	; 100
    4880:	11 f0       	breq	.+4      	; 0x4886 <vfprintf+0x1c6>
    4882:	89 36       	cpi	r24, 0x69	; 105
    4884:	39 f5       	brne	.+78     	; 0x48d4 <vfprintf+0x214>
    4886:	f8 01       	movw	r30, r16
    4888:	37 fe       	sbrs	r3, 7
    488a:	07 c0       	rjmp	.+14     	; 0x489a <vfprintf+0x1da>
    488c:	60 81       	ld	r22, Z
    488e:	71 81       	ldd	r23, Z+1	; 0x01
    4890:	82 81       	ldd	r24, Z+2	; 0x02
    4892:	93 81       	ldd	r25, Z+3	; 0x03
    4894:	0c 5f       	subi	r16, 0xFC	; 252
    4896:	1f 4f       	sbci	r17, 0xFF	; 255
    4898:	08 c0       	rjmp	.+16     	; 0x48aa <vfprintf+0x1ea>
    489a:	60 81       	ld	r22, Z
    489c:	71 81       	ldd	r23, Z+1	; 0x01
    489e:	07 2e       	mov	r0, r23
    48a0:	00 0c       	add	r0, r0
    48a2:	88 0b       	sbc	r24, r24
    48a4:	99 0b       	sbc	r25, r25
    48a6:	0e 5f       	subi	r16, 0xFE	; 254
    48a8:	1f 4f       	sbci	r17, 0xFF	; 255
    48aa:	f3 2d       	mov	r31, r3
    48ac:	ff 76       	andi	r31, 0x6F	; 111
    48ae:	3f 2e       	mov	r3, r31
    48b0:	97 ff       	sbrs	r25, 7
    48b2:	09 c0       	rjmp	.+18     	; 0x48c6 <vfprintf+0x206>
    48b4:	90 95       	com	r25
    48b6:	80 95       	com	r24
    48b8:	70 95       	com	r23
    48ba:	61 95       	neg	r22
    48bc:	7f 4f       	sbci	r23, 0xFF	; 255
    48be:	8f 4f       	sbci	r24, 0xFF	; 255
    48c0:	9f 4f       	sbci	r25, 0xFF	; 255
    48c2:	f0 68       	ori	r31, 0x80	; 128
    48c4:	3f 2e       	mov	r3, r31
    48c6:	2a e0       	ldi	r18, 0x0A	; 10
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	a3 01       	movw	r20, r6
    48cc:	12 d1       	rcall	.+548    	; 0x4af2 <__ultoa_invert>
    48ce:	88 2e       	mov	r8, r24
    48d0:	86 18       	sub	r8, r6
    48d2:	44 c0       	rjmp	.+136    	; 0x495c <vfprintf+0x29c>
    48d4:	85 37       	cpi	r24, 0x75	; 117
    48d6:	31 f4       	brne	.+12     	; 0x48e4 <vfprintf+0x224>
    48d8:	23 2d       	mov	r18, r3
    48da:	2f 7e       	andi	r18, 0xEF	; 239
    48dc:	b2 2e       	mov	r11, r18
    48de:	2a e0       	ldi	r18, 0x0A	; 10
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	25 c0       	rjmp	.+74     	; 0x492e <vfprintf+0x26e>
    48e4:	93 2d       	mov	r25, r3
    48e6:	99 7f       	andi	r25, 0xF9	; 249
    48e8:	b9 2e       	mov	r11, r25
    48ea:	8f 36       	cpi	r24, 0x6F	; 111
    48ec:	c1 f0       	breq	.+48     	; 0x491e <vfprintf+0x25e>
    48ee:	18 f4       	brcc	.+6      	; 0x48f6 <vfprintf+0x236>
    48f0:	88 35       	cpi	r24, 0x58	; 88
    48f2:	79 f0       	breq	.+30     	; 0x4912 <vfprintf+0x252>
    48f4:	ae c0       	rjmp	.+348    	; 0x4a52 <vfprintf+0x392>
    48f6:	80 37       	cpi	r24, 0x70	; 112
    48f8:	19 f0       	breq	.+6      	; 0x4900 <vfprintf+0x240>
    48fa:	88 37       	cpi	r24, 0x78	; 120
    48fc:	21 f0       	breq	.+8      	; 0x4906 <vfprintf+0x246>
    48fe:	a9 c0       	rjmp	.+338    	; 0x4a52 <vfprintf+0x392>
    4900:	e9 2f       	mov	r30, r25
    4902:	e0 61       	ori	r30, 0x10	; 16
    4904:	be 2e       	mov	r11, r30
    4906:	b4 fe       	sbrs	r11, 4
    4908:	0d c0       	rjmp	.+26     	; 0x4924 <vfprintf+0x264>
    490a:	fb 2d       	mov	r31, r11
    490c:	f4 60       	ori	r31, 0x04	; 4
    490e:	bf 2e       	mov	r11, r31
    4910:	09 c0       	rjmp	.+18     	; 0x4924 <vfprintf+0x264>
    4912:	34 fe       	sbrs	r3, 4
    4914:	0a c0       	rjmp	.+20     	; 0x492a <vfprintf+0x26a>
    4916:	29 2f       	mov	r18, r25
    4918:	26 60       	ori	r18, 0x06	; 6
    491a:	b2 2e       	mov	r11, r18
    491c:	06 c0       	rjmp	.+12     	; 0x492a <vfprintf+0x26a>
    491e:	28 e0       	ldi	r18, 0x08	; 8
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	05 c0       	rjmp	.+10     	; 0x492e <vfprintf+0x26e>
    4924:	20 e1       	ldi	r18, 0x10	; 16
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	02 c0       	rjmp	.+4      	; 0x492e <vfprintf+0x26e>
    492a:	20 e1       	ldi	r18, 0x10	; 16
    492c:	32 e0       	ldi	r19, 0x02	; 2
    492e:	f8 01       	movw	r30, r16
    4930:	b7 fe       	sbrs	r11, 7
    4932:	07 c0       	rjmp	.+14     	; 0x4942 <vfprintf+0x282>
    4934:	60 81       	ld	r22, Z
    4936:	71 81       	ldd	r23, Z+1	; 0x01
    4938:	82 81       	ldd	r24, Z+2	; 0x02
    493a:	93 81       	ldd	r25, Z+3	; 0x03
    493c:	0c 5f       	subi	r16, 0xFC	; 252
    493e:	1f 4f       	sbci	r17, 0xFF	; 255
    4940:	06 c0       	rjmp	.+12     	; 0x494e <vfprintf+0x28e>
    4942:	60 81       	ld	r22, Z
    4944:	71 81       	ldd	r23, Z+1	; 0x01
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	0e 5f       	subi	r16, 0xFE	; 254
    494c:	1f 4f       	sbci	r17, 0xFF	; 255
    494e:	a3 01       	movw	r20, r6
    4950:	d0 d0       	rcall	.+416    	; 0x4af2 <__ultoa_invert>
    4952:	88 2e       	mov	r8, r24
    4954:	86 18       	sub	r8, r6
    4956:	fb 2d       	mov	r31, r11
    4958:	ff 77       	andi	r31, 0x7F	; 127
    495a:	3f 2e       	mov	r3, r31
    495c:	36 fe       	sbrs	r3, 6
    495e:	0d c0       	rjmp	.+26     	; 0x497a <vfprintf+0x2ba>
    4960:	23 2d       	mov	r18, r3
    4962:	2e 7f       	andi	r18, 0xFE	; 254
    4964:	a2 2e       	mov	r10, r18
    4966:	89 14       	cp	r8, r9
    4968:	58 f4       	brcc	.+22     	; 0x4980 <vfprintf+0x2c0>
    496a:	34 fe       	sbrs	r3, 4
    496c:	0b c0       	rjmp	.+22     	; 0x4984 <vfprintf+0x2c4>
    496e:	32 fc       	sbrc	r3, 2
    4970:	09 c0       	rjmp	.+18     	; 0x4984 <vfprintf+0x2c4>
    4972:	83 2d       	mov	r24, r3
    4974:	8e 7e       	andi	r24, 0xEE	; 238
    4976:	a8 2e       	mov	r10, r24
    4978:	05 c0       	rjmp	.+10     	; 0x4984 <vfprintf+0x2c4>
    497a:	b8 2c       	mov	r11, r8
    497c:	a3 2c       	mov	r10, r3
    497e:	03 c0       	rjmp	.+6      	; 0x4986 <vfprintf+0x2c6>
    4980:	b8 2c       	mov	r11, r8
    4982:	01 c0       	rjmp	.+2      	; 0x4986 <vfprintf+0x2c6>
    4984:	b9 2c       	mov	r11, r9
    4986:	a4 fe       	sbrs	r10, 4
    4988:	0f c0       	rjmp	.+30     	; 0x49a8 <vfprintf+0x2e8>
    498a:	fe 01       	movw	r30, r28
    498c:	e8 0d       	add	r30, r8
    498e:	f1 1d       	adc	r31, r1
    4990:	80 81       	ld	r24, Z
    4992:	80 33       	cpi	r24, 0x30	; 48
    4994:	21 f4       	brne	.+8      	; 0x499e <vfprintf+0x2de>
    4996:	9a 2d       	mov	r25, r10
    4998:	99 7e       	andi	r25, 0xE9	; 233
    499a:	a9 2e       	mov	r10, r25
    499c:	09 c0       	rjmp	.+18     	; 0x49b0 <vfprintf+0x2f0>
    499e:	a2 fe       	sbrs	r10, 2
    49a0:	06 c0       	rjmp	.+12     	; 0x49ae <vfprintf+0x2ee>
    49a2:	b3 94       	inc	r11
    49a4:	b3 94       	inc	r11
    49a6:	04 c0       	rjmp	.+8      	; 0x49b0 <vfprintf+0x2f0>
    49a8:	8a 2d       	mov	r24, r10
    49aa:	86 78       	andi	r24, 0x86	; 134
    49ac:	09 f0       	breq	.+2      	; 0x49b0 <vfprintf+0x2f0>
    49ae:	b3 94       	inc	r11
    49b0:	a3 fc       	sbrc	r10, 3
    49b2:	10 c0       	rjmp	.+32     	; 0x49d4 <vfprintf+0x314>
    49b4:	a0 fe       	sbrs	r10, 0
    49b6:	06 c0       	rjmp	.+12     	; 0x49c4 <vfprintf+0x304>
    49b8:	b2 14       	cp	r11, r2
    49ba:	80 f4       	brcc	.+32     	; 0x49dc <vfprintf+0x31c>
    49bc:	28 0c       	add	r2, r8
    49be:	92 2c       	mov	r9, r2
    49c0:	9b 18       	sub	r9, r11
    49c2:	0d c0       	rjmp	.+26     	; 0x49de <vfprintf+0x31e>
    49c4:	b2 14       	cp	r11, r2
    49c6:	58 f4       	brcc	.+22     	; 0x49de <vfprintf+0x31e>
    49c8:	b6 01       	movw	r22, r12
    49ca:	80 e2       	ldi	r24, 0x20	; 32
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	55 d0       	rcall	.+170    	; 0x4a7a <fputc>
    49d0:	b3 94       	inc	r11
    49d2:	f8 cf       	rjmp	.-16     	; 0x49c4 <vfprintf+0x304>
    49d4:	b2 14       	cp	r11, r2
    49d6:	18 f4       	brcc	.+6      	; 0x49de <vfprintf+0x31e>
    49d8:	2b 18       	sub	r2, r11
    49da:	02 c0       	rjmp	.+4      	; 0x49e0 <vfprintf+0x320>
    49dc:	98 2c       	mov	r9, r8
    49de:	21 2c       	mov	r2, r1
    49e0:	a4 fe       	sbrs	r10, 4
    49e2:	0f c0       	rjmp	.+30     	; 0x4a02 <vfprintf+0x342>
    49e4:	b6 01       	movw	r22, r12
    49e6:	80 e3       	ldi	r24, 0x30	; 48
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	47 d0       	rcall	.+142    	; 0x4a7a <fputc>
    49ec:	a2 fe       	sbrs	r10, 2
    49ee:	16 c0       	rjmp	.+44     	; 0x4a1c <vfprintf+0x35c>
    49f0:	a1 fc       	sbrc	r10, 1
    49f2:	03 c0       	rjmp	.+6      	; 0x49fa <vfprintf+0x33a>
    49f4:	88 e7       	ldi	r24, 0x78	; 120
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	02 c0       	rjmp	.+4      	; 0x49fe <vfprintf+0x33e>
    49fa:	88 e5       	ldi	r24, 0x58	; 88
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	b6 01       	movw	r22, r12
    4a00:	0c c0       	rjmp	.+24     	; 0x4a1a <vfprintf+0x35a>
    4a02:	8a 2d       	mov	r24, r10
    4a04:	86 78       	andi	r24, 0x86	; 134
    4a06:	51 f0       	breq	.+20     	; 0x4a1c <vfprintf+0x35c>
    4a08:	a1 fe       	sbrs	r10, 1
    4a0a:	02 c0       	rjmp	.+4      	; 0x4a10 <vfprintf+0x350>
    4a0c:	8b e2       	ldi	r24, 0x2B	; 43
    4a0e:	01 c0       	rjmp	.+2      	; 0x4a12 <vfprintf+0x352>
    4a10:	80 e2       	ldi	r24, 0x20	; 32
    4a12:	a7 fc       	sbrc	r10, 7
    4a14:	8d e2       	ldi	r24, 0x2D	; 45
    4a16:	b6 01       	movw	r22, r12
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	2f d0       	rcall	.+94     	; 0x4a7a <fputc>
    4a1c:	89 14       	cp	r8, r9
    4a1e:	30 f4       	brcc	.+12     	; 0x4a2c <vfprintf+0x36c>
    4a20:	b6 01       	movw	r22, r12
    4a22:	80 e3       	ldi	r24, 0x30	; 48
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	29 d0       	rcall	.+82     	; 0x4a7a <fputc>
    4a28:	9a 94       	dec	r9
    4a2a:	f8 cf       	rjmp	.-16     	; 0x4a1c <vfprintf+0x35c>
    4a2c:	8a 94       	dec	r8
    4a2e:	f3 01       	movw	r30, r6
    4a30:	e8 0d       	add	r30, r8
    4a32:	f1 1d       	adc	r31, r1
    4a34:	80 81       	ld	r24, Z
    4a36:	b6 01       	movw	r22, r12
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	1f d0       	rcall	.+62     	; 0x4a7a <fputc>
    4a3c:	81 10       	cpse	r8, r1
    4a3e:	f6 cf       	rjmp	.-20     	; 0x4a2c <vfprintf+0x36c>
    4a40:	22 20       	and	r2, r2
    4a42:	09 f4       	brne	.+2      	; 0x4a46 <vfprintf+0x386>
    4a44:	4e ce       	rjmp	.-868    	; 0x46e2 <vfprintf+0x22>
    4a46:	b6 01       	movw	r22, r12
    4a48:	80 e2       	ldi	r24, 0x20	; 32
    4a4a:	90 e0       	ldi	r25, 0x00	; 0
    4a4c:	16 d0       	rcall	.+44     	; 0x4a7a <fputc>
    4a4e:	2a 94       	dec	r2
    4a50:	f7 cf       	rjmp	.-18     	; 0x4a40 <vfprintf+0x380>
    4a52:	f6 01       	movw	r30, r12
    4a54:	86 81       	ldd	r24, Z+6	; 0x06
    4a56:	97 81       	ldd	r25, Z+7	; 0x07
    4a58:	02 c0       	rjmp	.+4      	; 0x4a5e <vfprintf+0x39e>
    4a5a:	8f ef       	ldi	r24, 0xFF	; 255
    4a5c:	9f ef       	ldi	r25, 0xFF	; 255
    4a5e:	2b 96       	adiw	r28, 0x0b	; 11
    4a60:	e2 e1       	ldi	r30, 0x12	; 18
    4a62:	d7 c0       	rjmp	.+430    	; 0x4c12 <__epilogue_restores__>

00004a64 <strnlen_P>:
    4a64:	fc 01       	movw	r30, r24
    4a66:	05 90       	lpm	r0, Z+
    4a68:	61 50       	subi	r22, 0x01	; 1
    4a6a:	70 40       	sbci	r23, 0x00	; 0
    4a6c:	01 10       	cpse	r0, r1
    4a6e:	d8 f7       	brcc	.-10     	; 0x4a66 <strnlen_P+0x2>
    4a70:	80 95       	com	r24
    4a72:	90 95       	com	r25
    4a74:	8e 0f       	add	r24, r30
    4a76:	9f 1f       	adc	r25, r31
    4a78:	08 95       	ret

00004a7a <fputc>:
    4a7a:	0f 93       	push	r16
    4a7c:	1f 93       	push	r17
    4a7e:	cf 93       	push	r28
    4a80:	df 93       	push	r29
    4a82:	fb 01       	movw	r30, r22
    4a84:	23 81       	ldd	r18, Z+3	; 0x03
    4a86:	21 fd       	sbrc	r18, 1
    4a88:	03 c0       	rjmp	.+6      	; 0x4a90 <fputc+0x16>
    4a8a:	8f ef       	ldi	r24, 0xFF	; 255
    4a8c:	9f ef       	ldi	r25, 0xFF	; 255
    4a8e:	2c c0       	rjmp	.+88     	; 0x4ae8 <fputc+0x6e>
    4a90:	22 ff       	sbrs	r18, 2
    4a92:	16 c0       	rjmp	.+44     	; 0x4ac0 <fputc+0x46>
    4a94:	46 81       	ldd	r20, Z+6	; 0x06
    4a96:	57 81       	ldd	r21, Z+7	; 0x07
    4a98:	24 81       	ldd	r18, Z+4	; 0x04
    4a9a:	35 81       	ldd	r19, Z+5	; 0x05
    4a9c:	42 17       	cp	r20, r18
    4a9e:	53 07       	cpc	r21, r19
    4aa0:	44 f4       	brge	.+16     	; 0x4ab2 <fputc+0x38>
    4aa2:	a0 81       	ld	r26, Z
    4aa4:	b1 81       	ldd	r27, Z+1	; 0x01
    4aa6:	9d 01       	movw	r18, r26
    4aa8:	2f 5f       	subi	r18, 0xFF	; 255
    4aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    4aac:	31 83       	std	Z+1, r19	; 0x01
    4aae:	20 83       	st	Z, r18
    4ab0:	8c 93       	st	X, r24
    4ab2:	26 81       	ldd	r18, Z+6	; 0x06
    4ab4:	37 81       	ldd	r19, Z+7	; 0x07
    4ab6:	2f 5f       	subi	r18, 0xFF	; 255
    4ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    4aba:	37 83       	std	Z+7, r19	; 0x07
    4abc:	26 83       	std	Z+6, r18	; 0x06
    4abe:	14 c0       	rjmp	.+40     	; 0x4ae8 <fputc+0x6e>
    4ac0:	8b 01       	movw	r16, r22
    4ac2:	ec 01       	movw	r28, r24
    4ac4:	fb 01       	movw	r30, r22
    4ac6:	00 84       	ldd	r0, Z+8	; 0x08
    4ac8:	f1 85       	ldd	r31, Z+9	; 0x09
    4aca:	e0 2d       	mov	r30, r0
    4acc:	09 95       	icall
    4ace:	89 2b       	or	r24, r25
    4ad0:	e1 f6       	brne	.-72     	; 0x4a8a <fputc+0x10>
    4ad2:	d8 01       	movw	r26, r16
    4ad4:	16 96       	adiw	r26, 0x06	; 6
    4ad6:	8d 91       	ld	r24, X+
    4ad8:	9c 91       	ld	r25, X
    4ada:	17 97       	sbiw	r26, 0x07	; 7
    4adc:	01 96       	adiw	r24, 0x01	; 1
    4ade:	17 96       	adiw	r26, 0x07	; 7
    4ae0:	9c 93       	st	X, r25
    4ae2:	8e 93       	st	-X, r24
    4ae4:	16 97       	sbiw	r26, 0x06	; 6
    4ae6:	ce 01       	movw	r24, r28
    4ae8:	df 91       	pop	r29
    4aea:	cf 91       	pop	r28
    4aec:	1f 91       	pop	r17
    4aee:	0f 91       	pop	r16
    4af0:	08 95       	ret

00004af2 <__ultoa_invert>:
    4af2:	fa 01       	movw	r30, r20
    4af4:	aa 27       	eor	r26, r26
    4af6:	28 30       	cpi	r18, 0x08	; 8
    4af8:	51 f1       	breq	.+84     	; 0x4b4e <__ultoa_invert+0x5c>
    4afa:	20 31       	cpi	r18, 0x10	; 16
    4afc:	81 f1       	breq	.+96     	; 0x4b5e <__ultoa_invert+0x6c>
    4afe:	e8 94       	clt
    4b00:	6f 93       	push	r22
    4b02:	6e 7f       	andi	r22, 0xFE	; 254
    4b04:	6e 5f       	subi	r22, 0xFE	; 254
    4b06:	7f 4f       	sbci	r23, 0xFF	; 255
    4b08:	8f 4f       	sbci	r24, 0xFF	; 255
    4b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b0c:	af 4f       	sbci	r26, 0xFF	; 255
    4b0e:	b1 e0       	ldi	r27, 0x01	; 1
    4b10:	3e d0       	rcall	.+124    	; 0x4b8e <__ultoa_invert+0x9c>
    4b12:	b4 e0       	ldi	r27, 0x04	; 4
    4b14:	3c d0       	rcall	.+120    	; 0x4b8e <__ultoa_invert+0x9c>
    4b16:	67 0f       	add	r22, r23
    4b18:	78 1f       	adc	r23, r24
    4b1a:	89 1f       	adc	r24, r25
    4b1c:	9a 1f       	adc	r25, r26
    4b1e:	a1 1d       	adc	r26, r1
    4b20:	68 0f       	add	r22, r24
    4b22:	79 1f       	adc	r23, r25
    4b24:	8a 1f       	adc	r24, r26
    4b26:	91 1d       	adc	r25, r1
    4b28:	a1 1d       	adc	r26, r1
    4b2a:	6a 0f       	add	r22, r26
    4b2c:	71 1d       	adc	r23, r1
    4b2e:	81 1d       	adc	r24, r1
    4b30:	91 1d       	adc	r25, r1
    4b32:	a1 1d       	adc	r26, r1
    4b34:	20 d0       	rcall	.+64     	; 0x4b76 <__ultoa_invert+0x84>
    4b36:	09 f4       	brne	.+2      	; 0x4b3a <__ultoa_invert+0x48>
    4b38:	68 94       	set
    4b3a:	3f 91       	pop	r19
    4b3c:	2a e0       	ldi	r18, 0x0A	; 10
    4b3e:	26 9f       	mul	r18, r22
    4b40:	11 24       	eor	r1, r1
    4b42:	30 19       	sub	r19, r0
    4b44:	30 5d       	subi	r19, 0xD0	; 208
    4b46:	31 93       	st	Z+, r19
    4b48:	de f6       	brtc	.-74     	; 0x4b00 <__ultoa_invert+0xe>
    4b4a:	cf 01       	movw	r24, r30
    4b4c:	08 95       	ret
    4b4e:	46 2f       	mov	r20, r22
    4b50:	47 70       	andi	r20, 0x07	; 7
    4b52:	40 5d       	subi	r20, 0xD0	; 208
    4b54:	41 93       	st	Z+, r20
    4b56:	b3 e0       	ldi	r27, 0x03	; 3
    4b58:	0f d0       	rcall	.+30     	; 0x4b78 <__ultoa_invert+0x86>
    4b5a:	c9 f7       	brne	.-14     	; 0x4b4e <__ultoa_invert+0x5c>
    4b5c:	f6 cf       	rjmp	.-20     	; 0x4b4a <__ultoa_invert+0x58>
    4b5e:	46 2f       	mov	r20, r22
    4b60:	4f 70       	andi	r20, 0x0F	; 15
    4b62:	40 5d       	subi	r20, 0xD0	; 208
    4b64:	4a 33       	cpi	r20, 0x3A	; 58
    4b66:	18 f0       	brcs	.+6      	; 0x4b6e <__ultoa_invert+0x7c>
    4b68:	49 5d       	subi	r20, 0xD9	; 217
    4b6a:	31 fd       	sbrc	r19, 1
    4b6c:	40 52       	subi	r20, 0x20	; 32
    4b6e:	41 93       	st	Z+, r20
    4b70:	02 d0       	rcall	.+4      	; 0x4b76 <__ultoa_invert+0x84>
    4b72:	a9 f7       	brne	.-22     	; 0x4b5e <__ultoa_invert+0x6c>
    4b74:	ea cf       	rjmp	.-44     	; 0x4b4a <__ultoa_invert+0x58>
    4b76:	b4 e0       	ldi	r27, 0x04	; 4
    4b78:	a6 95       	lsr	r26
    4b7a:	97 95       	ror	r25
    4b7c:	87 95       	ror	r24
    4b7e:	77 95       	ror	r23
    4b80:	67 95       	ror	r22
    4b82:	ba 95       	dec	r27
    4b84:	c9 f7       	brne	.-14     	; 0x4b78 <__ultoa_invert+0x86>
    4b86:	00 97       	sbiw	r24, 0x00	; 0
    4b88:	61 05       	cpc	r22, r1
    4b8a:	71 05       	cpc	r23, r1
    4b8c:	08 95       	ret
    4b8e:	9b 01       	movw	r18, r22
    4b90:	ac 01       	movw	r20, r24
    4b92:	0a 2e       	mov	r0, r26
    4b94:	06 94       	lsr	r0
    4b96:	57 95       	ror	r21
    4b98:	47 95       	ror	r20
    4b9a:	37 95       	ror	r19
    4b9c:	27 95       	ror	r18
    4b9e:	ba 95       	dec	r27
    4ba0:	c9 f7       	brne	.-14     	; 0x4b94 <__ultoa_invert+0xa2>
    4ba2:	62 0f       	add	r22, r18
    4ba4:	73 1f       	adc	r23, r19
    4ba6:	84 1f       	adc	r24, r20
    4ba8:	95 1f       	adc	r25, r21
    4baa:	a0 1d       	adc	r26, r0
    4bac:	08 95       	ret

00004bae <eeprom_read_byte>:
    4bae:	f9 99       	sbic	0x1f, 1	; 31
    4bb0:	fe cf       	rjmp	.-4      	; 0x4bae <eeprom_read_byte>
    4bb2:	92 bd       	out	0x22, r25	; 34
    4bb4:	81 bd       	out	0x21, r24	; 33
    4bb6:	f8 9a       	sbi	0x1f, 0	; 31
    4bb8:	99 27       	eor	r25, r25
    4bba:	80 b5       	in	r24, 0x20	; 32
    4bbc:	08 95       	ret

00004bbe <eeprom_write_byte>:
    4bbe:	26 2f       	mov	r18, r22

00004bc0 <eeprom_write_r18>:
    4bc0:	f9 99       	sbic	0x1f, 1	; 31
    4bc2:	fe cf       	rjmp	.-4      	; 0x4bc0 <eeprom_write_r18>
    4bc4:	1f ba       	out	0x1f, r1	; 31
    4bc6:	92 bd       	out	0x22, r25	; 34
    4bc8:	81 bd       	out	0x21, r24	; 33
    4bca:	20 bd       	out	0x20, r18	; 32
    4bcc:	0f b6       	in	r0, 0x3f	; 63
    4bce:	f8 94       	cli
    4bd0:	fa 9a       	sbi	0x1f, 2	; 31
    4bd2:	f9 9a       	sbi	0x1f, 1	; 31
    4bd4:	0f be       	out	0x3f, r0	; 63
    4bd6:	01 96       	adiw	r24, 0x01	; 1
    4bd8:	08 95       	ret

00004bda <__prologue_saves__>:
    4bda:	2f 92       	push	r2
    4bdc:	3f 92       	push	r3
    4bde:	4f 92       	push	r4
    4be0:	5f 92       	push	r5
    4be2:	6f 92       	push	r6
    4be4:	7f 92       	push	r7
    4be6:	8f 92       	push	r8
    4be8:	9f 92       	push	r9
    4bea:	af 92       	push	r10
    4bec:	bf 92       	push	r11
    4bee:	cf 92       	push	r12
    4bf0:	df 92       	push	r13
    4bf2:	ef 92       	push	r14
    4bf4:	ff 92       	push	r15
    4bf6:	0f 93       	push	r16
    4bf8:	1f 93       	push	r17
    4bfa:	cf 93       	push	r28
    4bfc:	df 93       	push	r29
    4bfe:	cd b7       	in	r28, 0x3d	; 61
    4c00:	de b7       	in	r29, 0x3e	; 62
    4c02:	ca 1b       	sub	r28, r26
    4c04:	db 0b       	sbc	r29, r27
    4c06:	0f b6       	in	r0, 0x3f	; 63
    4c08:	f8 94       	cli
    4c0a:	de bf       	out	0x3e, r29	; 62
    4c0c:	0f be       	out	0x3f, r0	; 63
    4c0e:	cd bf       	out	0x3d, r28	; 61
    4c10:	09 94       	ijmp

00004c12 <__epilogue_restores__>:
    4c12:	2a 88       	ldd	r2, Y+18	; 0x12
    4c14:	39 88       	ldd	r3, Y+17	; 0x11
    4c16:	48 88       	ldd	r4, Y+16	; 0x10
    4c18:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c20:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c22:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c24:	b9 84       	ldd	r11, Y+9	; 0x09
    4c26:	c8 84       	ldd	r12, Y+8	; 0x08
    4c28:	df 80       	ldd	r13, Y+7	; 0x07
    4c2a:	ee 80       	ldd	r14, Y+6	; 0x06
    4c2c:	fd 80       	ldd	r15, Y+5	; 0x05
    4c2e:	0c 81       	ldd	r16, Y+4	; 0x04
    4c30:	1b 81       	ldd	r17, Y+3	; 0x03
    4c32:	aa 81       	ldd	r26, Y+2	; 0x02
    4c34:	b9 81       	ldd	r27, Y+1	; 0x01
    4c36:	ce 0f       	add	r28, r30
    4c38:	d1 1d       	adc	r29, r1
    4c3a:	0f b6       	in	r0, 0x3f	; 63
    4c3c:	f8 94       	cli
    4c3e:	de bf       	out	0x3e, r29	; 62
    4c40:	0f be       	out	0x3f, r0	; 63
    4c42:	cd bf       	out	0x3d, r28	; 61
    4c44:	ed 01       	movw	r28, r26
    4c46:	08 95       	ret

00004c48 <_exit>:
    4c48:	f8 94       	cli

00004c4a <__stop_program>:
    4c4a:	ff cf       	rjmp	.-2      	; 0x4c4a <__stop_program>
