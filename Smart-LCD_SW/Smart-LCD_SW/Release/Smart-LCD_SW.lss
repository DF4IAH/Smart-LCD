
Smart-LCD_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000248  00800100  000048e0  00004974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  00800348  00800348  00004bbc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004bbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00004c58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a1f8  00000000  00000000  00004fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d88  00000000  00000000  0000f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039b1  00000000  00000000  00010f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015f4  00000000  00000000  000148f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020e3  00000000  00000000  00015ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000927f  00000000  00000000  00017fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0002124a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e7 c2       	rjmp	.+1486   	; 0x5d0 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__vector_1>
       8:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <__vector_2>
       c:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__vector_3>
      10:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__vector_4>
      14:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_5>
      18:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__vector_6>
      1c:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_7>
      20:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__vector_8>
      24:	30 c7       	rjmp	.+3680   	; 0xe86 <__vector_9>
      26:	00 00       	nop
      28:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__vector_10>
      2c:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__vector_11>
      30:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__vector_12>
      34:	c2 c7       	rjmp	.+3972   	; 0xfba <__vector_13>
      36:	00 00       	nop
      38:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__vector_14>
      3c:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <__vector_15>
      40:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_16>
      44:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__vector_17>
      48:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__vector_18>
      4c:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_19>
      50:	0c 94 df 09 	jmp	0x13be	; 0x13be <__vector_20>
      54:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_21>
      58:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_22>
      5c:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__vector_23>
      60:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__vector_24>
      64:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_25>
      68:	49 17       	cp	r20, r25
      6a:	52 17       	cp	r21, r18
      6c:	5f 17       	cp	r21, r31
      6e:	70 17       	cp	r23, r16
      70:	85 17       	cp	r24, r21
      72:	9e 17       	cp	r25, r30
      74:	bb 17       	cp	r27, r27
      76:	dc 17       	cp	r29, r28
      78:	01 18       	sub	r0, r1
      7a:	2a 18       	sub	r2, r10
      7c:	57 18       	sub	r5, r7
      7e:	88 18       	sub	r8, r8
      80:	bd 18       	sub	r11, r13
      82:	18 19       	sub	r17, r8
      84:	45 19       	sub	r20, r5
      86:	71 19       	sub	r23, r1
      88:	96 19       	sub	r25, r6
      8a:	bb 19       	sub	r27, r11
      8c:	d2 19       	sub	r29, r2
      8e:	b3 1a       	sub	r11, r19
      90:	b3 1a       	sub	r11, r19
      92:	f0 19       	sub	r31, r0
      94:	0f 1a       	sub	r0, r31
      96:	25 1a       	sub	r2, r21
      98:	3c 1a       	sub	r3, r28
      9a:	6a 1a       	sub	r6, r26
      9c:	97 1a       	sub	r9, r23

0000009e <__trampolines_end>:
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	00 00       	nop
      a4:	00 20       	and	r0, r0
      a6:	20 20       	and	r2, r0
      a8:	20 20       	and	r2, r0
      aa:	00 20       	and	r0, r0
      ac:	50 50       	subi	r21, 0x00	; 0
      ae:	50 00       	.word	0x0050	; ????
      b0:	00 00       	nop
      b2:	00 50       	subi	r16, 0x00	; 0
      b4:	50 f8       	bld	r5, 0
      b6:	50 f8       	bld	r5, 0
      b8:	50 50       	subi	r21, 0x00	; 0
      ba:	20 78       	andi	r18, 0x80	; 128
      bc:	a0 70       	andi	r26, 0x00	; 0
      be:	28 f0       	brcs	.+10     	; 0xca <__trampolines_end+0x2c>
      c0:	20 c0       	rjmp	.+64     	; 0x102 <__trampolines_end+0x64>
      c2:	c8 10       	cpse	r12, r8
      c4:	20 40       	sbci	r18, 0x00	; 0
      c6:	98 18       	sub	r9, r8
      c8:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x3c13>
      cc:	a8 90       	.word	0x90a8	; ????
      ce:	68 60       	ori	r22, 0x08	; 8
      d0:	20 40       	sbci	r18, 0x00	; 0
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	10 20       	and	r1, r0
      d8:	40 40       	sbci	r20, 0x00	; 0
      da:	40 20       	and	r4, r0
      dc:	10 40       	sbci	r17, 0x00	; 0
      de:	20 10       	cpse	r2, r0
      e0:	10 10       	cpse	r1, r0
      e2:	20 40       	sbci	r18, 0x00	; 0
      e4:	00 50       	subi	r16, 0x00	; 0
      e6:	20 f8       	bld	r2, 0
      e8:	20 50       	subi	r18, 0x00	; 0
      ea:	00 00       	nop
      ec:	20 20       	and	r2, r0
      ee:	f8 20       	and	r15, r8
      f0:	20 00       	.word	0x0020	; ????
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	60 20       	and	r6, r0
      f8:	40 00       	.word	0x0040	; ????
      fa:	00 00       	nop
      fc:	f8 00       	.word	0x00f8	; ????
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	00 00       	nop
     104:	00 60       	ori	r16, 0x00	; 0
     106:	60 00       	.word	0x0060	; ????
     108:	08 10       	cpse	r0, r8
     10a:	20 40       	sbci	r18, 0x00	; 0
     10c:	80 00       	.word	0x0080	; ????
     10e:	70 88       	ldd	r7, Z+16	; 0x10
     110:	98 a8       	ldd	r9, Y+48	; 0x30
     112:	c8 88       	ldd	r12, Y+16	; 0x10
     114:	70 20       	and	r7, r0
     116:	60 20       	and	r6, r0
     118:	20 20       	and	r2, r0
     11a:	20 70       	andi	r18, 0x00	; 0
     11c:	70 88       	ldd	r7, Z+16	; 0x10
     11e:	08 10       	cpse	r0, r8
     120:	20 40       	sbci	r18, 0x00	; 0
     122:	f8 f8       	.word	0xf8f8	; ????
     124:	10 20       	and	r1, r0
     126:	10 08       	sbc	r1, r0
     128:	88 70       	andi	r24, 0x08	; 8
     12a:	10 30       	cpi	r17, 0x00	; 0
     12c:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__bss_end+0xc6b>
     130:	10 f8       	bld	r1, 0
     132:	80 f0       	brcs	.+32     	; 0x154 <__trampolines_end+0xb6>
     134:	08 08       	sbc	r0, r8
     136:	88 70       	andi	r24, 0x08	; 8
     138:	30 40       	sbci	r19, 0x00	; 0
     13a:	80 f0       	brcs	.+32     	; 0x15c <__trampolines_end+0xbe>
     13c:	88 88       	ldd	r8, Y+16	; 0x10
     13e:	70 f8       	bld	r7, 0
     140:	08 10       	cpse	r0, r8
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	40 40       	sbci	r20, 0x00	; 0
     146:	70 88       	ldd	r7, Z+16	; 0x10
     148:	88 70       	andi	r24, 0x08	; 8
     14a:	88 88       	ldd	r8, Y+16	; 0x10
     14c:	70 70       	andi	r23, 0x00	; 0
     14e:	88 88       	ldd	r8, Y+16	; 0x10
     150:	78 08       	sbc	r7, r8
     152:	10 60       	ori	r17, 0x00	; 0
     154:	00 60       	ori	r16, 0x00	; 0
     156:	60 00       	.word	0x0060	; ????
     158:	60 60       	ori	r22, 0x00	; 0
     15a:	00 00       	nop
     15c:	60 60       	ori	r22, 0x00	; 0
     15e:	00 60       	ori	r16, 0x00	; 0
     160:	20 40       	sbci	r18, 0x00	; 0
     162:	08 10       	cpse	r0, r8
     164:	20 40       	sbci	r18, 0x00	; 0
     166:	20 10       	cpse	r2, r0
     168:	08 00       	.word	0x0008	; ????
     16a:	00 f8       	bld	r0, 0
     16c:	00 f8       	bld	r0, 0
     16e:	00 00       	nop
     170:	80 40       	sbci	r24, 0x00	; 0
     172:	20 10       	cpse	r2, r0
     174:	20 40       	sbci	r18, 0x00	; 0
     176:	80 70       	andi	r24, 0x00	; 0
     178:	88 08       	sbc	r8, r8
     17a:	10 20       	and	r1, r0
     17c:	00 20       	and	r0, r0
     17e:	70 88       	ldd	r7, Z+16	; 0x10
     180:	08 68       	ori	r16, 0x88	; 136
     182:	a8 a8       	ldd	r10, Y+48	; 0x30
     184:	70 70       	andi	r23, 0x00	; 0
     186:	88 88       	ldd	r8, Y+16	; 0x10
     188:	88 f8       	.word	0xf888	; ????
     18a:	88 88       	ldd	r8, Y+16	; 0x10
     18c:	f0 88       	ldd	r15, Z+16	; 0x10
     18e:	88 f0       	brcs	.+34     	; 0x1b2 <__trampolines_end+0x114>
     190:	88 88       	ldd	r8, Y+16	; 0x10
     192:	f0 70       	andi	r31, 0x00	; 0
     194:	88 80       	ld	r8, Y
     196:	80 80       	ld	r8, Z
     198:	88 70       	andi	r24, 0x08	; 8
     19a:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x83fb>
     19e:	88 90       	.word	0x9088	; ????
     1a0:	e0 f8       	bld	r14, 0
     1a2:	80 80       	ld	r8, Z
     1a4:	f0 80       	ld	r15, Z
     1a6:	80 f8       	bld	r8, 0
     1a8:	f8 80       	ld	r15, Y
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	80 80       	ld	r8, Z
     1ae:	80 70       	andi	r24, 0x00	; 0
     1b0:	88 80       	ld	r8, Y
     1b2:	80 98       	cbi	0x10, 0	; 16
     1b4:	88 70       	andi	r24, 0x08	; 8
     1b6:	88 88       	ldd	r8, Y+16	; 0x10
     1b8:	88 f8       	.word	0xf888	; ????
     1ba:	88 88       	ldd	r8, Y+16	; 0x10
     1bc:	88 70       	andi	r24, 0x08	; 8
     1be:	20 20       	and	r2, r0
     1c0:	20 20       	and	r2, r0
     1c2:	20 70       	andi	r18, 0x00	; 0
     1c4:	38 10       	cpse	r3, r8
     1c6:	10 10       	cpse	r1, r0
     1c8:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x83d3>
     1cc:	90 a0       	ldd	r9, Z+32	; 0x20
     1ce:	c0 a0       	ldd	r12, Z+32	; 0x20
     1d0:	90 88       	ldd	r9, Z+16	; 0x10
     1d2:	80 80       	ld	r8, Z
     1d4:	80 80       	ld	r8, Z
     1d6:	80 80       	ld	r8, Z
     1d8:	f8 88       	ldd	r15, Y+16	; 0x10
     1da:	d8 a8       	ldd	r13, Y+48	; 0x30
     1dc:	88 88       	ldd	r8, Y+16	; 0x10
     1de:	88 88       	ldd	r8, Y+16	; 0x10
     1e0:	88 88       	ldd	r8, Y+16	; 0x10
     1e2:	c8 a8       	ldd	r12, Y+48	; 0x30
     1e4:	98 88       	ldd	r9, Y+16	; 0x10
     1e6:	88 70       	andi	r24, 0x08	; 8
     1e8:	88 88       	ldd	r8, Y+16	; 0x10
     1ea:	88 88       	ldd	r8, Y+16	; 0x10
     1ec:	88 70       	andi	r24, 0x08	; 8
     1ee:	f0 88       	ldd	r15, Z+16	; 0x10
     1f0:	88 f0       	brcs	.+34     	; 0x214 <__trampolines_end+0x176>
     1f2:	80 80       	ld	r8, Z
     1f4:	80 70       	andi	r24, 0x00	; 0
     1f6:	88 88       	ldd	r8, Y+16	; 0x10
     1f8:	88 a8       	ldd	r8, Y+48	; 0x30
     1fa:	90 68       	ori	r25, 0x80	; 128
     1fc:	f0 88       	ldd	r15, Z+16	; 0x10
     1fe:	88 f0       	brcs	.+34     	; 0x222 <__trampolines_end+0x184>
     200:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x73fb>
     204:	80 80       	ld	r8, Z
     206:	70 08       	sbc	r7, r0
     208:	08 f0       	brcs	.+2      	; 0x20c <__trampolines_end+0x16e>
     20a:	f8 20       	and	r15, r8
     20c:	20 20       	and	r2, r0
     20e:	20 20       	and	r2, r0
     210:	20 88       	ldd	r2, Z+16	; 0x10
     212:	88 88       	ldd	r8, Y+16	; 0x10
     214:	88 88       	ldd	r8, Y+16	; 0x10
     216:	88 70       	andi	r24, 0x08	; 8
     218:	88 88       	ldd	r8, Y+16	; 0x10
     21a:	88 88       	ldd	r8, Y+16	; 0x10
     21c:	88 50       	subi	r24, 0x08	; 8
     21e:	20 88       	ldd	r2, Z+16	; 0x10
     220:	88 88       	ldd	r8, Y+16	; 0x10
     222:	a8 a8       	ldd	r10, Y+48	; 0x30
     224:	d8 88       	ldd	r13, Y+16	; 0x10
     226:	88 88       	ldd	r8, Y+16	; 0x10
     228:	50 20       	and	r5, r0
     22a:	50 88       	ldd	r5, Z+16	; 0x10
     22c:	88 88       	ldd	r8, Y+16	; 0x10
     22e:	88 50       	subi	r24, 0x08	; 8
     230:	20 20       	and	r2, r0
     232:	20 20       	and	r2, r0
     234:	f8 08       	sbc	r15, r8
     236:	10 20       	and	r1, r0
     238:	40 80       	ld	r4, Z
     23a:	f8 38       	cpi	r31, 0x88	; 136
     23c:	20 20       	and	r2, r0
     23e:	20 20       	and	r2, r0
     240:	20 38       	cpi	r18, 0x80	; 128
     242:	00 80       	ld	r0, Z
     244:	40 20       	and	r4, r0
     246:	10 08       	sbc	r1, r0
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	20 20       	and	r2, r0
     24c:	20 20       	and	r2, r0
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	20 50       	subi	r18, 0x00	; 0
     252:	88 00       	.word	0x0088	; ????
	...
     25c:	00 f8       	bld	r0, 0
     25e:	40 20       	and	r4, r0
     260:	10 00       	.word	0x0010	; ????
     262:	00 00       	nop
     264:	00 00       	nop
     266:	00 70       	andi	r16, 0x00	; 0
     268:	08 78       	andi	r16, 0x88	; 136
     26a:	88 78       	andi	r24, 0x88	; 136
     26c:	80 80       	ld	r8, Z
     26e:	b0 c8       	rjmp	.-3744   	; 0xfffff3d0 <__eeprom_end+0xff7ef3d0>
     270:	88 88       	ldd	r8, Y+16	; 0x10
     272:	f0 00       	.word	0x00f0	; ????
     274:	00 70       	andi	r16, 0x00	; 0
     276:	80 80       	ld	r8, Z
     278:	88 70       	andi	r24, 0x08	; 8
     27a:	08 08       	sbc	r0, r8
     27c:	68 98       	cbi	0x0d, 0	; 13
     27e:	88 88       	ldd	r8, Y+16	; 0x10
     280:	78 00       	.word	0x0078	; ????
     282:	00 70       	andi	r16, 0x00	; 0
     284:	88 f8       	.word	0xf888	; ????
     286:	80 70       	andi	r24, 0x00	; 0
     288:	30 48       	sbci	r19, 0x80	; 128
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	40 40       	sbci	r20, 0x00	; 0
     28e:	40 00       	.word	0x0040	; ????
     290:	00 78       	andi	r16, 0x80	; 128
     292:	88 78       	andi	r24, 0x88	; 136
     294:	08 30       	cpi	r16, 0x08	; 8
     296:	80 80       	ld	r8, Z
     298:	b0 c8       	rjmp	.-3744   	; 0xfffff3fa <__eeprom_end+0xff7ef3fa>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	88 20       	and	r8, r8
     29e:	00 60       	ori	r16, 0x00	; 0
     2a0:	20 20       	and	r2, r0
     2a2:	20 70       	andi	r18, 0x00	; 0
     2a4:	10 00       	.word	0x0010	; ????
     2a6:	30 10       	cpse	r3, r0
     2a8:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x3bd3>
     2ac:	40 48       	sbci	r20, 0x80	; 128
     2ae:	50 60       	ori	r21, 0x00	; 0
     2b0:	50 48       	sbci	r21, 0x80	; 128
     2b2:	60 20       	and	r6, r0
     2b4:	20 20       	and	r2, r0
     2b6:	20 20       	and	r2, r0
     2b8:	70 00       	.word	0x0070	; ????
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <__trampolines_end+0x21e>
     2bc:	a8 a8       	ldd	r10, Y+48	; 0x30
     2be:	88 88       	ldd	r8, Y+16	; 0x10
     2c0:	00 00       	nop
     2c2:	b0 c8       	rjmp	.-3744   	; 0xfffff424 <__eeprom_end+0xff7ef424>
     2c4:	88 88       	ldd	r8, Y+16	; 0x10
     2c6:	88 00       	.word	0x0088	; ????
     2c8:	00 70       	andi	r16, 0x00	; 0
     2ca:	88 88       	ldd	r8, Y+16	; 0x10
     2cc:	88 70       	andi	r24, 0x08	; 8
     2ce:	00 00       	nop
     2d0:	f0 88       	ldd	r15, Z+16	; 0x10
     2d2:	f0 80       	ld	r15, Z
     2d4:	80 00       	.word	0x0080	; ????
     2d6:	00 68       	ori	r16, 0x80	; 128
     2d8:	98 78       	andi	r25, 0x88	; 136
     2da:	08 08       	sbc	r0, r8
     2dc:	00 00       	nop
     2de:	b0 c8       	rjmp	.-3744   	; 0xfffff440 <__eeprom_end+0xff7ef440>
     2e0:	80 80       	ld	r8, Z
     2e2:	80 00       	.word	0x0080	; ????
     2e4:	00 70       	andi	r16, 0x00	; 0
     2e6:	80 70       	andi	r24, 0x00	; 0
     2e8:	08 f0       	brcs	.+2      	; 0x2ec <__trampolines_end+0x24e>
     2ea:	40 40       	sbci	r20, 0x00	; 0
     2ec:	e0 40       	sbci	r30, 0x00	; 0
     2ee:	40 48       	sbci	r20, 0x80	; 128
     2f0:	30 00       	.word	0x0030	; ????
     2f2:	00 88       	ldd	r0, Z+16	; 0x10
     2f4:	88 88       	ldd	r8, Y+16	; 0x10
     2f6:	98 68       	ori	r25, 0x88	; 136
     2f8:	00 00       	nop
     2fa:	88 88       	ldd	r8, Y+16	; 0x10
     2fc:	88 50       	subi	r24, 0x08	; 8
     2fe:	20 00       	.word	0x0020	; ????
     300:	00 88       	ldd	r0, Z+16	; 0x10
     302:	88 a8       	ldd	r8, Y+48	; 0x30
     304:	a8 50       	subi	r26, 0x08	; 8
     306:	00 00       	nop
     308:	88 50       	subi	r24, 0x08	; 8
     30a:	20 50       	subi	r18, 0x00	; 0
     30c:	88 00       	.word	0x0088	; ????
     30e:	00 88       	ldd	r0, Z+16	; 0x10
     310:	88 78       	andi	r24, 0x88	; 136
     312:	08 70       	andi	r16, 0x08	; 8
     314:	00 00       	nop
     316:	f8 10       	cpse	r15, r8
     318:	20 40       	sbci	r18, 0x00	; 0
     31a:	f8 10       	cpse	r15, r8
     31c:	20 20       	and	r2, r0
     31e:	40 20       	and	r4, r0
     320:	20 10       	cpse	r2, r0
     322:	20 20       	and	r2, r0
     324:	20 20       	and	r2, r0
     326:	20 20       	and	r2, r0
     328:	20 40       	sbci	r18, 0x00	; 0
     32a:	20 20       	and	r2, r0
     32c:	10 20       	and	r1, r0
     32e:	20 40       	sbci	r18, 0x00	; 0
     330:	20 50       	subi	r18, 0x00	; 0
     332:	20 00       	.word	0x0020	; ????
     334:	00 00       	nop
	...

00000337 <sysfont_glyphs>:
     337:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     347:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     357:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     367:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     377:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     387:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     397:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     3a7:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     3b7:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     3c7:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     3d7:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     3e7:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     3f7:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     407:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     417:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     427:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     437:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     447:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     457:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     467:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     477:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     487:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     497:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     4a7:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     4b7:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     4c7:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     4d7:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     4e7:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     4f7:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     507:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     517:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     527:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     537:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     547:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     557:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     567:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     577:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     587:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     597:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     5a7:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     5b7:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     5c7:	20 40 20 50 20 00 00 00 00                           @ P ....

000005d0 <__ctors_end>:
     5d0:	11 24       	eor	r1, r1
     5d2:	1f be       	out	0x3f, r1	; 63
     5d4:	cf ef       	ldi	r28, 0xFF	; 255
     5d6:	d8 e0       	ldi	r29, 0x08	; 8
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	cd bf       	out	0x3d, r28	; 61

000005dc <__do_copy_data>:
     5dc:	13 e0       	ldi	r17, 0x03	; 3
     5de:	a0 e0       	ldi	r26, 0x00	; 0
     5e0:	b1 e0       	ldi	r27, 0x01	; 1
     5e2:	e0 ee       	ldi	r30, 0xE0	; 224
     5e4:	f8 e4       	ldi	r31, 0x48	; 72
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <__do_copy_data+0x10>
     5e8:	05 90       	lpm	r0, Z+
     5ea:	0d 92       	st	X+, r0
     5ec:	a8 34       	cpi	r26, 0x48	; 72
     5ee:	b1 07       	cpc	r27, r17
     5f0:	d9 f7       	brne	.-10     	; 0x5e8 <__do_copy_data+0xc>

000005f2 <__do_clear_bss>:
     5f2:	24 e0       	ldi	r18, 0x04	; 4
     5f4:	a8 e4       	ldi	r26, 0x48	; 72
     5f6:	b3 e0       	ldi	r27, 0x03	; 3
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <.do_clear_bss_start>

000005fa <.do_clear_bss_loop>:
     5fa:	1d 92       	st	X+, r1

000005fc <.do_clear_bss_start>:
     5fc:	ad 38       	cpi	r26, 0x8D	; 141
     5fe:	b2 07       	cpc	r27, r18
     600:	e1 f7       	brne	.-8      	; 0x5fa <.do_clear_bss_loop>
     602:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <main>
     606:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <_exit>

0000060a <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
     60a:	08 95       	ret

0000060c <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	1f 92       	push	r1
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     61c:	8f b7       	in	r24, 0x3f	; 63
     61e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     620:	f8 94       	cli
	return flags;
     622:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     624:	5f 93       	push	r21
     626:	50 e8       	ldi	r21, 0x80	; 128
     628:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     632:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     634:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     636:	0f 90       	pop	r0
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	1f 92       	push	r1
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     648:	9f b7       	in	r25, 0x3f	; 63
     64a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     64c:	f8 94       	cli
	return flags;
     64e:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     650:	81 11       	cpse	r24, r1
     652:	06 c0       	rjmp	.+12     	; 0x660 <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
     654:	60 95       	com	r22
     656:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     65a:	68 23       	and	r22, r24
     65c:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     660:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     662:	0f 90       	pop	r0
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	1f 92       	push	r1
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     674:	9f b7       	in	r25, 0x3f	; 63
     676:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     678:	f8 94       	cli
	return flags;
     67a:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     67c:	81 11       	cpse	r24, r1
     67e:	05 c0       	rjmp	.+10     	; 0x68a <sysclk_disable_module+0x20>
		*(reg + port) |= id;
     680:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     684:	68 2b       	or	r22, r24
     686:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     68a:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     68c:	0f 90       	pop	r0
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <gfx_mono_generic_draw_horizontal_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	08 2f       	mov	r16, r24
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     6a0:	84 2f       	mov	r24, r20
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	80 0f       	add	r24, r16
     6a6:	91 1d       	adc	r25, r1
     6a8:	81 3f       	cpi	r24, 0xF1	; 241
     6aa:	91 05       	cpc	r25, r1
     6ac:	14 f0       	brlt	.+4      	; 0x6b2 <gfx_mono_generic_draw_horizontal_line+0x1e>
		length = GFX_MONO_LCD_WIDTH - x;
     6ae:	40 ef       	ldi	r20, 0xF0	; 240
     6b0:	40 1b       	sub	r20, r16
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     6b2:	44 23       	and	r20, r20
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <gfx_mono_generic_draw_horizontal_line+0x24>
     6b6:	47 c0       	rjmp	.+142    	; 0x746 <gfx_mono_generic_draw_horizontal_line+0xb2>
	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
		length = GFX_MONO_LCD_WIDTH - x;
	}

	page = y / 8;
     6b8:	d6 2f       	mov	r29, r22
     6ba:	d6 95       	lsr	r29
     6bc:	d6 95       	lsr	r29
     6be:	d6 95       	lsr	r29
	pixelmask = (1 << (y - (page * 8)));
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	88 e0       	ldi	r24, 0x08	; 8
     6c4:	d8 9f       	mul	r29, r24
     6c6:	60 19       	sub	r22, r0
     6c8:	71 09       	sbc	r23, r1
     6ca:	11 24       	eor	r1, r1
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <gfx_mono_generic_draw_horizontal_line+0x40>
     6d2:	88 0f       	add	r24, r24
     6d4:	6a 95       	dec	r22
     6d6:	ea f7       	brpl	.-6      	; 0x6d2 <gfx_mono_generic_draw_horizontal_line+0x3e>
     6d8:	f8 2e       	mov	r15, r24
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     6da:	21 30       	cpi	r18, 0x01	; 1
     6dc:	31 f0       	breq	.+12     	; 0x6ea <gfx_mono_generic_draw_horizontal_line+0x56>
     6de:	40 f0       	brcs	.+16     	; 0x6f0 <gfx_mono_generic_draw_horizontal_line+0x5c>
     6e0:	22 30       	cpi	r18, 0x02	; 2
     6e2:	89 f5       	brne	.+98     	; 0x746 <gfx_mono_generic_draw_horizontal_line+0xb2>
     6e4:	cf ef       	ldi	r28, 0xFF	; 255
     6e6:	c4 0f       	add	r28, r20
     6e8:	22 c0       	rjmp	.+68     	; 0x72e <gfx_mono_generic_draw_horizontal_line+0x9a>
     6ea:	cf ef       	ldi	r28, 0xFF	; 255
     6ec:	c4 0f       	add	r28, r20
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <gfx_mono_generic_draw_horizontal_line+0x66>
     6f0:	cf ef       	ldi	r28, 0xFF	; 255
     6f2:	c4 0f       	add	r28, r20
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
			temp &= ~pixelmask;
     6f4:	18 2f       	mov	r17, r24
     6f6:	10 95       	com	r17
     6f8:	0d c0       	rjmp	.+26     	; 0x714 <gfx_mono_generic_draw_horizontal_line+0x80>
     6fa:	10 2f       	mov	r17, r16
     6fc:	1c 0f       	add	r17, r28
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     6fe:	61 2f       	mov	r22, r17
     700:	8d 2f       	mov	r24, r29
     702:	cc d2       	rcall	.+1432   	; 0xc9c <gfx_mono_lcd_uc1608_get_byte>
			temp |= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     704:	4f 2d       	mov	r20, r15
     706:	48 2b       	or	r20, r24
     708:	61 2f       	mov	r22, r17
     70a:	8d 2f       	mov	r24, r29
     70c:	af d2       	rcall	.+1374   	; 0xc6c <gfx_mono_lcd_uc1608_put_byte>
     70e:	c1 50       	subi	r28, 0x01	; 1
     710:	a0 f7       	brcc	.-24     	; 0x6fa <gfx_mono_generic_draw_horizontal_line+0x66>
     712:	19 c0       	rjmp	.+50     	; 0x746 <gfx_mono_generic_draw_horizontal_line+0xb2>
     714:	f0 2e       	mov	r15, r16
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     716:	fc 0e       	add	r15, r28
     718:	6f 2d       	mov	r22, r15
     71a:	8d 2f       	mov	r24, r29
			temp &= ~pixelmask;
     71c:	bf d2       	rcall	.+1406   	; 0xc9c <gfx_mono_lcd_uc1608_get_byte>
			gfx_mono_put_byte(page, x + length, temp);
     71e:	41 2f       	mov	r20, r17
     720:	48 23       	and	r20, r24
     722:	6f 2d       	mov	r22, r15
     724:	8d 2f       	mov	r24, r29
     726:	a2 d2       	rcall	.+1348   	; 0xc6c <gfx_mono_lcd_uc1608_put_byte>
     728:	c1 50       	subi	r28, 0x01	; 1
     72a:	a0 f7       	brcc	.-24     	; 0x714 <gfx_mono_generic_draw_horizontal_line+0x80>
     72c:	0c c0       	rjmp	.+24     	; 0x746 <gfx_mono_generic_draw_horizontal_line+0xb2>
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     72e:	10 2f       	mov	r17, r16
     730:	1c 0f       	add	r17, r28
     732:	61 2f       	mov	r22, r17
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     734:	8d 2f       	mov	r24, r29
     736:	b2 d2       	rcall	.+1380   	; 0xc9c <gfx_mono_lcd_uc1608_get_byte>
     738:	4f 2d       	mov	r20, r15
     73a:	48 27       	eor	r20, r24
     73c:	61 2f       	mov	r22, r17
     73e:	8d 2f       	mov	r24, r29
     740:	95 d2       	rcall	.+1322   	; 0xc6c <gfx_mono_lcd_uc1608_put_byte>
     742:	c1 50       	subi	r28, 0x01	; 1
		break;

	default:
		break;
	}
}
     744:	a0 f7       	brcc	.-24     	; 0x72e <gfx_mono_generic_draw_horizontal_line+0x9a>
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	08 95       	ret

00000752 <gfx_mono_generic_draw_vertical_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	94 2f       	mov	r25, r20
	if (length == 0) {
     760:	44 23       	and	r20, r20
     762:	09 f4       	brne	.+2      	; 0x766 <gfx_mono_generic_draw_vertical_line+0x14>
     764:	46 c0       	rjmp	.+140    	; 0x7f2 <gfx_mono_generic_draw_vertical_line+0xa0>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
     766:	4f ef       	ldi	r20, 0xFF	; 255
     768:	46 0f       	add	r20, r22
     76a:	94 0f       	add	r25, r20

	if (y == y2) {
     76c:	69 13       	cpse	r22, r25
     76e:	08 c0       	rjmp	.+16     	; 0x780 <gfx_mono_generic_draw_vertical_line+0x2e>
		gfx_mono_draw_pixel(x, y, color);
     770:	42 2f       	mov	r20, r18
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
	}
}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
	}

	gfx_coord_t y2 = y + length - 1;

	if (y == y2) {
		gfx_mono_draw_pixel(x, y, color);
     77c:	ef 90       	pop	r14
		return;
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
     77e:	da c2       	rjmp	.+1460   	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     780:	9f 37       	cpi	r25, 0x7F	; 127
		y2 = GFX_MONO_LCD_HEIGHT - 1;
     782:	08 f0       	brcs	.+2      	; 0x786 <gfx_mono_generic_draw_vertical_line+0x34>
	}

	gfx_coord_t y1page = y / 8;
     784:	9f e7       	ldi	r25, 0x7F	; 127
     786:	16 2f       	mov	r17, r22
     788:	16 95       	lsr	r17
     78a:	16 95       	lsr	r17
	gfx_coord_t y2page = y2 / 8;
     78c:	16 95       	lsr	r17
     78e:	09 2f       	mov	r16, r25
     790:	06 95       	lsr	r16
     792:	06 95       	lsr	r16

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
     794:	06 95       	lsr	r16
     796:	67 70       	andi	r22, 0x07	; 7
     798:	ef ef       	ldi	r30, 0xFF	; 255
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	af 01       	movw	r20, r30
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <gfx_mono_generic_draw_vertical_line+0x50>
     7a0:	44 0f       	add	r20, r20
     7a2:	6a 95       	dec	r22
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
     7a4:	ea f7       	brpl	.-6      	; 0x7a0 <gfx_mono_generic_draw_vertical_line+0x4e>
     7a6:	97 70       	andi	r25, 0x07	; 7
     7a8:	67 e0       	ldi	r22, 0x07	; 7
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	69 1b       	sub	r22, r25
     7ae:	71 09       	sbc	r23, r1
     7b0:	7f 01       	movw	r14, r30
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <gfx_mono_generic_draw_vertical_line+0x66>
     7b4:	f5 94       	asr	r15
     7b6:	e7 94       	ror	r14
     7b8:	6a 95       	dec	r22

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <gfx_mono_generic_draw_vertical_line+0x62>
     7bc:	10 13       	cpse	r17, r16
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
     7be:	04 c0       	rjmp	.+8      	; 0x7c8 <gfx_mono_generic_draw_vertical_line+0x76>
     7c0:	4e 21       	and	r20, r14
     7c2:	68 2f       	mov	r22, r24
     7c4:	81 2f       	mov	r24, r17
     7c6:	0e c0       	rjmp	.+28     	; 0x7e4 <gfx_mono_generic_draw_vertical_line+0x92>
     7c8:	d2 2f       	mov	r29, r18
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     7ca:	c8 2f       	mov	r28, r24
     7cc:	6c 2f       	mov	r22, r28
     7ce:	81 2f       	mov	r24, r17
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     7d0:	8c d2       	rcall	.+1304   	; 0xcea <gfx_mono_lcd_uc1608_mask_byte>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     7d2:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     7d4:	2d 2f       	mov	r18, r29
     7d6:	10 17       	cp	r17, r16
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     7d8:	10 f4       	brcc	.+4      	; 0x7de <gfx_mono_generic_draw_vertical_line+0x8c>
     7da:	4f ef       	ldi	r20, 0xFF	; 255
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     7dc:	f7 cf       	rjmp	.-18     	; 0x7cc <gfx_mono_generic_draw_vertical_line+0x7a>
     7de:	4e 2d       	mov	r20, r14
     7e0:	6c 2f       	mov	r22, r28
	}
}
     7e2:	80 2f       	mov	r24, r16
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16

		while (++y1page < y2page) {
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
	}
}
     7f0:	7c c2       	rjmp	.+1272   	; 0xcea <gfx_mono_lcd_uc1608_mask_byte>
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	08 95       	ret

00000800 <gfx_mono_generic_draw_line>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
     800:	8f 92       	push	r8
     802:	9f 92       	push	r9
     804:	af 92       	push	r10
     806:	bf 92       	push	r11
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	18 2f       	mov	r17, r24
     81a:	b6 2e       	mov	r11, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     81c:	48 17       	cp	r20, r24
     81e:	28 f4       	brcc	.+10     	; 0x82a <gfx_mono_generic_draw_line+0x2a>
		dx = x1;
		x1 = x2;
		x2 = dx;
		dy = y1;
		y1 = y2;
     820:	b2 2e       	mov	r11, r18
		y2 = dy;
     822:	26 2f       	mov	r18, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     824:	81 2f       	mov	r24, r17
     826:	14 2f       	mov	r17, r20
     828:	48 2f       	mov	r20, r24
		dy = y1;
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
     82a:	c4 2f       	mov	r28, r20
     82c:	d0 e0       	ldi	r29, 0x00	; 0
     82e:	c1 1b       	sub	r28, r17
     830:	d1 09       	sbc	r29, r1
	dy = y2 - y1;
     832:	e2 2e       	mov	r14, r18
     834:	f1 2c       	mov	r15, r1
     836:	eb 18       	sub	r14, r11
     838:	f1 08       	sbc	r15, r1

	x = x1;
	y = y1;

	if (dx < 0) {
     83a:	d7 ff       	sbrs	r29, 7
     83c:	06 c0       	rjmp	.+12     	; 0x84a <gfx_mono_generic_draw_line+0x4a>
		xinc = -1;
		dx = -dx;
     83e:	d1 95       	neg	r29
     840:	c1 95       	neg	r28
     842:	d1 09       	sbc	r29, r1

	x = x1;
	y = y1;

	if (dx < 0) {
		xinc = -1;
     844:	99 24       	eor	r9, r9
     846:	9a 94       	dec	r9
     848:	02 c0       	rjmp	.+4      	; 0x84e <gfx_mono_generic_draw_line+0x4e>
		dx = -dx;
	} else {
		xinc = 1;
     84a:	99 24       	eor	r9, r9
     84c:	93 94       	inc	r9
	}

	if (dy < 0) {
     84e:	f7 fe       	sbrs	r15, 7
     850:	06 c0       	rjmp	.+12     	; 0x85e <gfx_mono_generic_draw_line+0x5e>
		yinc = -1;
		dy = -dy;
     852:	f1 94       	neg	r15
     854:	e1 94       	neg	r14
     856:	f1 08       	sbc	r15, r1
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     858:	88 24       	eor	r8, r8
     85a:	8a 94       	dec	r8
     85c:	02 c0       	rjmp	.+4      	; 0x862 <gfx_mono_generic_draw_line+0x62>
		dy = -dy;
	} else {
		yinc = 1;
     85e:	88 24       	eor	r8, r8
     860:	83 94       	inc	r8
	}

	if (dx > dy) {
     862:	ec 16       	cp	r14, r28
     864:	fd 06       	cpc	r15, r29
     866:	bc f4       	brge	.+46     	; 0x896 <gfx_mono_generic_draw_line+0x96>
		e = dy - dx;
     868:	67 01       	movw	r12, r14
     86a:	cc 1a       	sub	r12, r28
     86c:	dd 0a       	sbc	r13, r29
		for (i = 0; i <= dx; i++) {
     86e:	a1 2c       	mov	r10, r1
     870:	8a 2d       	mov	r24, r10
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	c8 17       	cp	r28, r24
     876:	d9 07       	cpc	r29, r25
     878:	2c f1       	brlt	.+74     	; 0x8c4 <gfx_mono_generic_draw_line+0xc4>
			gfx_mono_draw_pixel(x, y, color);
     87a:	40 2f       	mov	r20, r16
     87c:	6b 2d       	mov	r22, r11
     87e:	81 2f       	mov	r24, r17
     880:	59 d2       	rcall	.+1202   	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     882:	d7 fc       	sbrc	r13, 7
     884:	03 c0       	rjmp	.+6      	; 0x88c <gfx_mono_generic_draw_line+0x8c>
				e -= dx;
     886:	cc 1a       	sub	r12, r28
     888:	dd 0a       	sbc	r13, r29
				y += yinc;
     88a:	b8 0c       	add	r11, r8
			}

			e += dy;
     88c:	ce 0c       	add	r12, r14
     88e:	df 1c       	adc	r13, r15
     890:	19 0d       	add	r17, r9
		yinc = 1;
	}

	if (dx > dy) {
		e = dy - dx;
		for (i = 0; i <= dx; i++) {
     892:	a3 94       	inc	r10
     894:	ed cf       	rjmp	.-38     	; 0x870 <gfx_mono_generic_draw_line+0x70>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     896:	6e 01       	movw	r12, r28
     898:	ce 18       	sub	r12, r14
     89a:	df 08       	sbc	r13, r15
		for (i = 0; i <= dy; i++) {
     89c:	a1 2c       	mov	r10, r1
     89e:	8a 2d       	mov	r24, r10
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	e8 16       	cp	r14, r24
     8a4:	f9 06       	cpc	r15, r25
     8a6:	74 f0       	brlt	.+28     	; 0x8c4 <gfx_mono_generic_draw_line+0xc4>
			gfx_mono_draw_pixel(x, y, color);
     8a8:	40 2f       	mov	r20, r16
     8aa:	6b 2d       	mov	r22, r11
     8ac:	81 2f       	mov	r24, r17
     8ae:	42 d2       	rcall	.+1156   	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     8b0:	d7 fc       	sbrc	r13, 7
     8b2:	03 c0       	rjmp	.+6      	; 0x8ba <gfx_mono_generic_draw_line+0xba>
				e -= dy;
     8b4:	ce 18       	sub	r12, r14
     8b6:	df 08       	sbc	r13, r15
				x += xinc;
     8b8:	19 0d       	add	r17, r9
			}

			e += dx;
     8ba:	cc 0e       	add	r12, r28
     8bc:	dd 1e       	adc	r13, r29
     8be:	b8 0c       	add	r11, r8
			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
     8c0:	a3 94       	inc	r10
     8c2:	ed cf       	rjmp	.-38     	; 0x89e <gfx_mono_generic_draw_line+0x9e>

			e += dx;
			y += yinc;
		}
	}
}
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	df 90       	pop	r13
     8d2:	cf 90       	pop	r12
     8d4:	bf 90       	pop	r11
     8d6:	af 90       	pop	r10
     8d8:	9f 90       	pop	r9
     8da:	8f 90       	pop	r8
     8dc:	08 95       	ret

000008de <gfx_mono_generic_draw_rect>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	d8 2f       	mov	r29, r24
     8ea:	16 2f       	mov	r17, r22
     8ec:	c4 2f       	mov	r28, r20
     8ee:	f2 2e       	mov	r15, r18
	gfx_mono_draw_horizontal_line(x, y, width, color);
     8f0:	20 2f       	mov	r18, r16
     8f2:	d0 de       	rcall	.-608    	; 0x694 <gfx_mono_generic_draw_horizontal_line>
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
     8f4:	6f ef       	ldi	r22, 0xFF	; 255
     8f6:	6f 0d       	add	r22, r15
     8f8:	61 0f       	add	r22, r17
     8fa:	20 2f       	mov	r18, r16
     8fc:	4c 2f       	mov	r20, r28
     8fe:	8d 2f       	mov	r24, r29
     900:	c9 de       	rcall	.-622    	; 0x694 <gfx_mono_generic_draw_horizontal_line>

	gfx_mono_draw_vertical_line(x, y, height, color);
     902:	20 2f       	mov	r18, r16
     904:	4f 2d       	mov	r20, r15
     906:	61 2f       	mov	r22, r17
     908:	8d 2f       	mov	r24, r29
     90a:	23 df       	rcall	.-442    	; 0x752 <gfx_mono_generic_draw_vertical_line>
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     90c:	8f ef       	ldi	r24, 0xFF	; 255
     90e:	8c 0f       	add	r24, r28
     910:	20 2f       	mov	r18, r16
     912:	4f 2d       	mov	r20, r15
     914:	61 2f       	mov	r22, r17
     916:	8d 0f       	add	r24, r29
}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
{
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     920:	ff 90       	pop	r15
     922:	17 cf       	rjmp	.-466    	; 0x752 <gfx_mono_generic_draw_vertical_line>

00000924 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
	if (height == 0) {
     92e:	22 23       	and	r18, r18
     930:	69 f0       	breq	.+26     	; 0x94c <gfx_mono_generic_draw_filled_rect+0x28>
     932:	14 2f       	mov	r17, r20
     934:	f6 2e       	mov	r15, r22
     936:	d8 2f       	mov	r29, r24
     938:	cf ef       	ldi	r28, 0xFF	; 255
     93a:	c2 0f       	add	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     93c:	6f 2d       	mov	r22, r15
     93e:	6c 0f       	add	r22, r28
     940:	20 2f       	mov	r18, r16
     942:	41 2f       	mov	r20, r17
     944:	8d 2f       	mov	r24, r29
     946:	a6 de       	rcall	.-692    	; 0x694 <gfx_mono_generic_draw_horizontal_line>
     948:	c1 50       	subi	r28, 0x01	; 1
     94a:	c0 f7       	brcc	.-16     	; 0x93c <gfx_mono_generic_draw_filled_rect+0x18>
	}
}
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	ff 90       	pop	r15
     956:	08 95       	ret

00000958 <gfx_mono_generic_draw_circle>:
 * \param  octant_mask Bitmask indicating which octants to draw.
 */
void gfx_mono_generic_draw_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t octant_mask)
{
     958:	5f 92       	push	r5
     95a:	6f 92       	push	r6
     95c:	7f 92       	push	r7
     95e:	8f 92       	push	r8
     960:	9f 92       	push	r9
     962:	af 92       	push	r10
     964:	bf 92       	push	r11
     966:	cf 92       	push	r12
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	18 2f       	mov	r17, r24
     978:	f6 2e       	mov	r15, r22
     97a:	c4 2f       	mov	r28, r20
     97c:	e2 2e       	mov	r14, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     97e:	41 11       	cpse	r20, r1
     980:	11 c0       	rjmp	.+34     	; 0x9a4 <gfx_mono_generic_draw_circle+0x4c>
		gfx_mono_draw_pixel(x, y, color);
     982:	42 2f       	mov	r20, r18
		}

		/* Next X. */
		++offset_x;
	}
}
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	bf 90       	pop	r11
     996:	af 90       	pop	r10
     998:	9f 90       	pop	r9
     99a:	8f 90       	pop	r8
     99c:	7f 90       	pop	r7
     99e:	6f 90       	pop	r6
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
		gfx_mono_draw_pixel(x, y, color);
     9a0:	5f 90       	pop	r5
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     9a2:	c8 c1       	rjmp	.+912    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	6c 01       	movw	r12, r24
     9aa:	22 e0       	ldi	r18, 0x02	; 2
     9ac:	42 9f       	mul	r20, r18
     9ae:	c0 18       	sub	r12, r0
     9b0:	d1 08       	sbc	r13, r1
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     9b2:	11 24       	eor	r1, r1
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     9b4:	d0 e0       	ldi	r29, 0x00	; 0
     9b6:	80 2f       	mov	r24, r16
     9b8:	81 70       	andi	r24, 0x01	; 1
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT1) {
     9ba:	b8 2e       	mov	r11, r24
     9bc:	20 2f       	mov	r18, r16
     9be:	22 70       	andi	r18, 0x02	; 2
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT2) {
     9c0:	a2 2e       	mov	r10, r18
     9c2:	80 2f       	mov	r24, r16
     9c4:	84 70       	andi	r24, 0x04	; 4
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT3) {
     9c6:	98 2e       	mov	r9, r24
     9c8:	20 2f       	mov	r18, r16
     9ca:	28 70       	andi	r18, 0x08	; 8
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT4) {
     9cc:	82 2e       	mov	r8, r18
     9ce:	80 2f       	mov	r24, r16
     9d0:	80 71       	andi	r24, 0x10	; 16
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
		}

		if (octant_mask & GFX_OCTANT5) {
     9d2:	78 2e       	mov	r7, r24
     9d4:	20 2f       	mov	r18, r16
     9d6:	20 72       	andi	r18, 0x20	; 32
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
		}

		if (octant_mask & GFX_OCTANT6) {
     9d8:	62 2e       	mov	r6, r18
     9da:	80 2f       	mov	r24, r16
     9dc:	80 74       	andi	r24, 0x40	; 64
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     9de:	58 2e       	mov	r5, r24
     9e0:	bb 20       	and	r11, r11
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
     9e2:	31 f0       	breq	.+12     	; 0x9f0 <gfx_mono_generic_draw_circle+0x98>
     9e4:	4e 2d       	mov	r20, r14
     9e6:	6f 2d       	mov	r22, r15
     9e8:	6d 1b       	sub	r22, r29
     9ea:	81 2f       	mov	r24, r17
     9ec:	8c 0f       	add	r24, r28
		}

		if (octant_mask & GFX_OCTANT1) {
     9ee:	a2 d1       	rcall	.+836    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     9f0:	aa 20       	and	r10, r10
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
     9f2:	31 f0       	breq	.+12     	; 0xa00 <gfx_mono_generic_draw_circle+0xa8>
     9f4:	4e 2d       	mov	r20, r14
     9f6:	6f 2d       	mov	r22, r15
     9f8:	6c 1b       	sub	r22, r28
     9fa:	81 2f       	mov	r24, r17
     9fc:	8d 0f       	add	r24, r29
		}

		if (octant_mask & GFX_OCTANT2) {
     9fe:	9a d1       	rcall	.+820    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a00:	99 20       	and	r9, r9
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
     a02:	31 f0       	breq	.+12     	; 0xa10 <gfx_mono_generic_draw_circle+0xb8>
     a04:	4e 2d       	mov	r20, r14
     a06:	6f 2d       	mov	r22, r15
     a08:	6c 1b       	sub	r22, r28
     a0a:	81 2f       	mov	r24, r17
     a0c:	8d 1b       	sub	r24, r29
		}

		if (octant_mask & GFX_OCTANT3) {
     a0e:	92 d1       	rcall	.+804    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a10:	88 20       	and	r8, r8
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
     a12:	31 f0       	breq	.+12     	; 0xa20 <gfx_mono_generic_draw_circle+0xc8>
     a14:	4e 2d       	mov	r20, r14
     a16:	6f 2d       	mov	r22, r15
     a18:	6d 1b       	sub	r22, r29
     a1a:	81 2f       	mov	r24, r17
     a1c:	8c 1b       	sub	r24, r28
		}

		if (octant_mask & GFX_OCTANT4) {
     a1e:	8a d1       	rcall	.+788    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
     a20:	77 20       	and	r7, r7
     a22:	31 f0       	breq	.+12     	; 0xa30 <gfx_mono_generic_draw_circle+0xd8>
     a24:	4e 2d       	mov	r20, r14
     a26:	6f 2d       	mov	r22, r15
     a28:	6d 0f       	add	r22, r29
     a2a:	81 2f       	mov	r24, r17
		}

		if (octant_mask & GFX_OCTANT5) {
     a2c:	8c 1b       	sub	r24, r28
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
     a2e:	82 d1       	rcall	.+772    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a30:	66 20       	and	r6, r6
     a32:	31 f0       	breq	.+12     	; 0xa40 <gfx_mono_generic_draw_circle+0xe8>
     a34:	4e 2d       	mov	r20, r14
     a36:	6f 2d       	mov	r22, r15
     a38:	6c 0f       	add	r22, r28
		}

		if (octant_mask & GFX_OCTANT6) {
     a3a:	81 2f       	mov	r24, r17
			gfx_mono_draw_pixel(x + offset_x, y + offset_y, color);
     a3c:	8d 1b       	sub	r24, r29
     a3e:	7a d1       	rcall	.+756    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a40:	55 20       	and	r5, r5
     a42:	31 f0       	breq	.+12     	; 0xa50 <gfx_mono_generic_draw_circle+0xf8>
     a44:	4e 2d       	mov	r20, r14
     a46:	6f 2d       	mov	r22, r15
		}

		if (octant_mask & GFX_OCTANT7) {
     a48:	6c 0f       	add	r22, r28
     a4a:	81 2f       	mov	r24, r17
			gfx_mono_draw_pixel(x + offset_y, y + offset_x, color);
     a4c:	8d 0f       	add	r24, r29
     a4e:	72 d1       	rcall	.+740    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a50:	07 ff       	sbrs	r16, 7
     a52:	06 c0       	rjmp	.+12     	; 0xa60 <gfx_mono_generic_draw_circle+0x108>
     a54:	4e 2d       	mov	r20, r14
     a56:	6f 2d       	mov	r22, r15
     a58:	6d 0f       	add	r22, r29
     a5a:	81 2f       	mov	r24, r17
     a5c:	8c 0f       	add	r24, r28
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     a5e:	6a d1       	rcall	.+724    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     a60:	8d 2f       	mov	r24, r29
			error += ((offset_x << 2) + 6);
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	d7 fe       	sbrs	r13, 7
     a66:	08 c0       	rjmp	.+16     	; 0xa78 <gfx_mono_generic_draw_circle+0x120>
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	06 96       	adiw	r24, 0x06	; 6
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     a72:	c8 0e       	add	r12, r24
     a74:	d9 1e       	adc	r13, r25
     a76:	0a c0       	rjmp	.+20     	; 0xa8c <gfx_mono_generic_draw_circle+0x134>
     a78:	8c 1b       	sub	r24, r28
     a7a:	91 09       	sbc	r25, r1
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
			--offset_y;
     a84:	0a 96       	adiw	r24, 0x0a	; 10
		}

		/* Next X. */
		++offset_x;
     a86:	c8 0e       	add	r12, r24
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
     a88:	d9 1e       	adc	r13, r25
     a8a:	c1 50       	subi	r28, 0x01	; 1
     a8c:	df 5f       	subi	r29, 0xFF	; 255
		}

		/* Next X. */
		++offset_x;
	}
}
     a8e:	cd 17       	cp	r28, r29
     a90:	08 f0       	brcs	.+2      	; 0xa94 <gfx_mono_generic_draw_circle+0x13c>
     a92:	a6 cf       	rjmp	.-180    	; 0x9e0 <gfx_mono_generic_draw_circle+0x88>
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	bf 90       	pop	r11
     aa6:	af 90       	pop	r10
     aa8:	9f 90       	pop	r9
     aaa:	8f 90       	pop	r8
     aac:	7f 90       	pop	r7
     aae:	6f 90       	pop	r6
     ab0:	5f 90       	pop	r5
     ab2:	08 95       	ret

00000ab4 <gfx_mono_generic_draw_filled_circle>:
 * \param  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
     ab4:	8f 92       	push	r8
     ab6:	9f 92       	push	r9
     ab8:	af 92       	push	r10
     aba:	bf 92       	push	r11
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	18 2f       	mov	r17, r24
     ace:	d6 2e       	mov	r13, r22
     ad0:	c4 2f       	mov	r28, r20
     ad2:	c2 2e       	mov	r12, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     ad4:	41 11       	cpse	r20, r1
     ad6:	0e c0       	rjmp	.+28     	; 0xaf4 <gfx_mono_generic_draw_filled_circle+0x40>
		gfx_mono_draw_pixel(x, y, color);
     ad8:	42 2f       	mov	r20, r18
		}

		/* Next X. */
		++offset_x;
	}
}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
		gfx_mono_draw_pixel(x, y, color);
     af0:	8f 90       	pop	r8
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     af2:	20 c1       	rjmp	.+576    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	7c 01       	movw	r14, r24
     afa:	22 e0       	ldi	r18, 0x02	; 2
     afc:	42 9f       	mul	r20, r18
     afe:	e0 18       	sub	r14, r0
     b00:	f1 08       	sbc	r15, r1
     b02:	11 24       	eor	r1, r1
     b04:	bb 24       	eor	r11, r11
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     b06:	b3 94       	inc	r11
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     b08:	d0 e0       	ldi	r29, 0x00	; 0
     b0a:	80 2f       	mov	r24, r16
     b0c:	83 70       	andi	r24, 0x03	; 3
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     b0e:	a8 2e       	mov	r10, r24
     b10:	20 2f       	mov	r18, r16
     b12:	2c 70       	andi	r18, 0x0C	; 12
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     b14:	92 2e       	mov	r9, r18
     b16:	80 2f       	mov	r24, r16
     b18:	80 73       	andi	r24, 0x30	; 48
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     b1a:	88 2e       	mov	r8, r24
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     b1c:	00 7c       	andi	r16, 0xC0	; 192
     b1e:	aa 20       	and	r10, r10
			gfx_mono_draw_vertical_line(x + offset_y,
     b20:	79 f0       	breq	.+30     	; 0xb40 <gfx_mono_generic_draw_filled_circle+0x8c>
     b22:	2c 2d       	mov	r18, r12
     b24:	4b 2d       	mov	r20, r11
     b26:	6d 2d       	mov	r22, r13
     b28:	6d 1b       	sub	r22, r29
     b2a:	81 2f       	mov	r24, r17
     b2c:	8c 0f       	add	r24, r28
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     b2e:	11 de       	rcall	.-990    	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b30:	2c 2d       	mov	r18, r12
     b32:	41 e0       	ldi	r20, 0x01	; 1
     b34:	4c 0f       	add	r20, r28
     b36:	6d 2d       	mov	r22, r13
     b38:	6c 1b       	sub	r22, r28
     b3a:	81 2f       	mov	r24, r17
     b3c:	8d 0f       	add	r24, r29
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     b3e:	09 de       	rcall	.-1006   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b40:	99 20       	and	r9, r9
			gfx_mono_draw_vertical_line(x - offset_y,
     b42:	79 f0       	breq	.+30     	; 0xb62 <gfx_mono_generic_draw_filled_circle+0xae>
     b44:	2c 2d       	mov	r18, r12
     b46:	4b 2d       	mov	r20, r11
     b48:	6d 2d       	mov	r22, r13
     b4a:	6d 1b       	sub	r22, r29
     b4c:	81 2f       	mov	r24, r17
     b4e:	8c 1b       	sub	r24, r28
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     b50:	00 de       	rcall	.-1024   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b52:	2c 2d       	mov	r18, r12
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	4c 0f       	add	r20, r28
     b58:	6d 2d       	mov	r22, r13
     b5a:	6c 1b       	sub	r22, r28
     b5c:	81 2f       	mov	r24, r17
     b5e:	8d 1b       	sub	r24, r29
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     b60:	f8 dd       	rcall	.-1040   	; 0x752 <gfx_mono_generic_draw_vertical_line>
			gfx_mono_draw_vertical_line(x - offset_y,
     b62:	88 20       	and	r8, r8
     b64:	69 f0       	breq	.+26     	; 0xb80 <gfx_mono_generic_draw_filled_circle+0xcc>
     b66:	2c 2d       	mov	r18, r12
     b68:	4b 2d       	mov	r20, r11
     b6a:	6d 2d       	mov	r22, r13
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     b6c:	81 2f       	mov	r24, r17
     b6e:	8c 1b       	sub	r24, r28
     b70:	f0 dd       	rcall	.-1056   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b72:	2c 2d       	mov	r18, r12
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	4c 0f       	add	r20, r28
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     b78:	6d 2d       	mov	r22, r13
			gfx_mono_draw_vertical_line(x + offset_y,
     b7a:	81 2f       	mov	r24, r17
     b7c:	8d 1b       	sub	r24, r29
     b7e:	e9 dd       	rcall	.-1070   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b80:	00 23       	and	r16, r16
     b82:	69 f0       	breq	.+26     	; 0xb9e <gfx_mono_generic_draw_filled_circle+0xea>
     b84:	2c 2d       	mov	r18, r12
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     b86:	4b 2d       	mov	r20, r11
     b88:	6d 2d       	mov	r22, r13
     b8a:	81 2f       	mov	r24, r17
     b8c:	8c 0f       	add	r24, r28
     b8e:	e1 dd       	rcall	.-1086   	; 0x752 <gfx_mono_generic_draw_vertical_line>
     b90:	2c 2d       	mov	r18, r12
     b92:	41 e0       	ldi	r20, 0x01	; 1
     b94:	4c 0f       	add	r20, r28
     b96:	6d 2d       	mov	r22, r13
     b98:	81 2f       	mov	r24, r17
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     b9a:	8d 0f       	add	r24, r29
     b9c:	da dd       	rcall	.-1100   	; 0x752 <gfx_mono_generic_draw_vertical_line>
			error += ((offset_x << 2) + 6);
     b9e:	8d 2f       	mov	r24, r29
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	f7 fe       	sbrs	r15, 7
     ba4:	08 c0       	rjmp	.+16     	; 0xbb6 <gfx_mono_generic_draw_filled_circle+0x102>
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     bae:	06 96       	adiw	r24, 0x06	; 6
     bb0:	e8 0e       	add	r14, r24
     bb2:	f9 1e       	adc	r15, r25
     bb4:	0a c0       	rjmp	.+20     	; 0xbca <gfx_mono_generic_draw_filled_circle+0x116>
     bb6:	8c 1b       	sub	r24, r28
     bb8:	91 09       	sbc	r25, r1
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	88 0f       	add	r24, r24
			--offset_y;
     bc0:	99 1f       	adc	r25, r25
		}

		/* Next X. */
		++offset_x;
     bc2:	0a 96       	adiw	r24, 0x0a	; 10
     bc4:	e8 0e       	add	r14, r24
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
     bc6:	f9 1e       	adc	r15, r25
     bc8:	c1 50       	subi	r28, 0x01	; 1
     bca:	df 5f       	subi	r29, 0xFF	; 255
		}

		/* Next X. */
		++offset_x;
	}
}
     bcc:	b3 94       	inc	r11
     bce:	cd 17       	cp	r28, r29
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <gfx_mono_generic_draw_filled_circle+0x120>
     bd2:	a5 cf       	rjmp	.-182    	; 0xb1e <gfx_mono_generic_draw_filled_circle+0x6a>
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	bf 90       	pop	r11
     be6:	af 90       	pop	r10
     be8:	9f 90       	pop	r9
     bea:	8f 90       	pop	r8
     bec:	08 95       	ret

00000bee <gfx_mono_lcd_uc1608_cache_write_byte>:
		uint8_t				byte = gfx_mono_lcd_uc1608_get_byte(page, x);

		isSet = (byte & pixel_mask) ?  GFX_PIXEL_SET : GFX_PIXEL_CLR;
	}
	return isSet;
}
     bee:	80 31       	cpi	r24, 0x10	; 16
     bf0:	30 f4       	brcc	.+12     	; 0xbfe <gfx_mono_lcd_uc1608_cache_write_byte+0x10>
     bf2:	60 3f       	cpi	r22, 0xF0	; 240
     bf4:	20 f4       	brcc	.+8      	; 0xbfe <gfx_mono_lcd_uc1608_cache_write_byte+0x10>
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	70 64       	ori	r23, 0x40	; 64
     bfa:	78 2b       	or	r23, r24
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <gfx_mono_lcd_uc1608_cache_write_byte+0x14>
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e8       	ldi	r23, 0x80	; 128
     c02:	76 ff       	sbrs	r23, 6
     c04:	06 c0       	rjmp	.+12     	; 0xc12 <gfx_mono_lcd_uc1608_cache_write_byte+0x24>
     c06:	70 93 49 03 	sts	0x0349, r23	; 0x800349 <__data_end+0x1>
     c0a:	60 93 48 03 	sts	0x0348, r22	; 0x800348 <__data_end>
     c0e:	40 93 4a 03 	sts	0x034A, r20	; 0x80034a <__data_end+0x2>
     c12:	08 95       	ret

00000c14 <gfx_mono_lcd_uc1608_put_page>:
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	8c 01       	movw	r16, r24
     c1e:	86 2f       	mov	r24, r22
     c20:	d4 2f       	mov	r29, r20
     c22:	c2 2f       	mov	r28, r18
     c24:	01 15       	cp	r16, r1
     c26:	11 05       	cpc	r17, r1
     c28:	49 f4       	brne	.+18     	; 0xc3c <gfx_mono_lcd_uc1608_put_page+0x28>
     c2a:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <__data_end+0x1>
     c2e:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <__data_end>
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret
     c3c:	60 31       	cpi	r22, 0x10	; 16
     c3e:	a8 f7       	brcc	.-22     	; 0xc2a <gfx_mono_lcd_uc1608_put_page+0x16>
     c40:	40 3f       	cpi	r20, 0xF0	; 240
     c42:	98 f7       	brcc	.-26     	; 0xc2a <gfx_mono_lcd_uc1608_put_page+0x16>
     c44:	8b d6       	rcall	.+3350   	; 0x195c <lcd_page_set>
     c46:	8d 2f       	mov	r24, r29
     c48:	91 d6       	rcall	.+3362   	; 0x196c <lcd_col_set>
     c4a:	8c 2f       	mov	r24, r28
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	8d 0f       	add	r24, r29
     c50:	91 1d       	adc	r25, r1
     c52:	81 3f       	cpi	r24, 0xF1	; 241
     c54:	91 05       	cpc	r25, r1
     c56:	14 f0       	brlt	.+4      	; 0xc5c <gfx_mono_lcd_uc1608_put_page+0x48>
     c58:	c0 ef       	ldi	r28, 0xF0	; 240
     c5a:	cd 1b       	sub	r28, r29
     c5c:	cc 23       	and	r28, r28
     c5e:	29 f3       	breq	.-54     	; 0xc2a <gfx_mono_lcd_uc1608_put_page+0x16>
     c60:	f8 01       	movw	r30, r16
     c62:	81 91       	ld	r24, Z+
     c64:	8f 01       	movw	r16, r30
     c66:	2f d6       	rcall	.+3166   	; 0x18c6 <lcd_bus_write_ram>
     c68:	c1 50       	subi	r28, 0x01	; 1
     c6a:	f8 cf       	rjmp	.-16     	; 0xc5c <gfx_mono_lcd_uc1608_put_page+0x48>

00000c6c <gfx_mono_lcd_uc1608_put_byte>:
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	80 31       	cpi	r24, 0x10	; 16
     c74:	78 f4       	brcc	.+30     	; 0xc94 <gfx_mono_lcd_uc1608_put_byte+0x28>
     c76:	60 3f       	cpi	r22, 0xF0	; 240
     c78:	68 f4       	brcc	.+26     	; 0xc94 <gfx_mono_lcd_uc1608_put_byte+0x28>
     c7a:	14 2f       	mov	r17, r20
     c7c:	c6 2f       	mov	r28, r22
     c7e:	d8 2f       	mov	r29, r24
     c80:	b6 df       	rcall	.-148    	; 0xbee <gfx_mono_lcd_uc1608_cache_write_byte>
     c82:	8d 2f       	mov	r24, r29
     c84:	6b d6       	rcall	.+3286   	; 0x195c <lcd_page_set>
     c86:	8c 2f       	mov	r24, r28
     c88:	71 d6       	rcall	.+3298   	; 0x196c <lcd_col_set>
     c8a:	81 2f       	mov	r24, r17
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	19 c6       	rjmp	.+3122   	; 0x18c6 <lcd_bus_write_ram>
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	08 95       	ret

00000c9c <gfx_mono_lcd_uc1608_get_byte>:
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	80 31       	cpi	r24, 0x10	; 16
     ca4:	80 f4       	brcc	.+32     	; 0xcc6 <gfx_mono_lcd_uc1608_get_byte+0x2a>
     ca6:	60 3f       	cpi	r22, 0xF0	; 240
     ca8:	70 f4       	brcc	.+28     	; 0xcc6 <gfx_mono_lcd_uc1608_get_byte+0x2a>
     caa:	26 2f       	mov	r18, r22
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	30 64       	ori	r19, 0x40	; 64
     cb0:	38 2b       	or	r19, r24
     cb2:	40 91 48 03 	lds	r20, 0x0348	; 0x800348 <__data_end>
     cb6:	50 91 49 03 	lds	r21, 0x0349	; 0x800349 <__data_end+0x1>
     cba:	42 17       	cp	r20, r18
     cbc:	53 07       	cpc	r21, r19
     cbe:	29 f4       	brne	.+10     	; 0xcca <gfx_mono_lcd_uc1608_get_byte+0x2e>
     cc0:	10 91 4a 03 	lds	r17, 0x034A	; 0x80034a <__data_end+0x2>
     cc4:	0d c0       	rjmp	.+26     	; 0xce0 <gfx_mono_lcd_uc1608_get_byte+0x44>
     cc6:	10 e0       	ldi	r17, 0x00	; 0
     cc8:	0b c0       	rjmp	.+22     	; 0xce0 <gfx_mono_lcd_uc1608_get_byte+0x44>
     cca:	d6 2f       	mov	r29, r22
     ccc:	c8 2f       	mov	r28, r24
     cce:	46 d6       	rcall	.+3212   	; 0x195c <lcd_page_set>
     cd0:	8d 2f       	mov	r24, r29
     cd2:	4c d6       	rcall	.+3224   	; 0x196c <lcd_col_set>
     cd4:	05 d6       	rcall	.+3082   	; 0x18e0 <lcd_bus_read_ram>
     cd6:	18 2f       	mov	r17, r24
     cd8:	48 2f       	mov	r20, r24
     cda:	6d 2f       	mov	r22, r29
     cdc:	8c 2f       	mov	r24, r28
     cde:	87 df       	rcall	.-242    	; 0xbee <gfx_mono_lcd_uc1608_cache_write_byte>
     ce0:	81 2f       	mov	r24, r17
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	08 95       	ret

00000cea <gfx_mono_lcd_uc1608_mask_byte>:
 * \param column     Page offset (x coordinate)
 * \param pixel_mask Mask for pixel operation
 * \param color      Pixel operation
 */
void gfx_mono_lcd_uc1608_mask_byte(gfx_coord_t page, gfx_coord_t column, gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
	uint8_t data = 0;

	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
     cf2:	80 31       	cpi	r24, 0x10	; 16
     cf4:	d0 f4       	brcc	.+52     	; 0xd2a <gfx_mono_lcd_uc1608_mask_byte+0x40>
     cf6:	60 3f       	cpi	r22, 0xF0	; 240
     cf8:	c0 f4       	brcc	.+48     	; 0xd2a <gfx_mono_lcd_uc1608_mask_byte+0x40>
     cfa:	02 2f       	mov	r16, r18
     cfc:	c4 2f       	mov	r28, r20
     cfe:	16 2f       	mov	r17, r22
		data = gfx_mono_lcd_uc1608_get_byte(page, column);
     d00:	d8 2f       	mov	r29, r24

		switch (color) {
     d02:	cc df       	rcall	.-104    	; 0xc9c <gfx_mono_lcd_uc1608_get_byte>
     d04:	01 30       	cpi	r16, 0x01	; 1
     d06:	41 f0       	breq	.+16     	; 0xd18 <gfx_mono_lcd_uc1608_mask_byte+0x2e>
     d08:	20 f0       	brcs	.+8      	; 0xd12 <gfx_mono_lcd_uc1608_mask_byte+0x28>
     d0a:	02 30       	cpi	r16, 0x02	; 2
			case GFX_PIXEL_SET:
				data |= pixel_mask;
				break;

			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
     d0c:	31 f4       	brne	.+12     	; 0xd1a <gfx_mono_lcd_uc1608_mask_byte+0x30>
     d0e:	8c 27       	eor	r24, r28
	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
		data = gfx_mono_lcd_uc1608_get_byte(page, column);

		switch (color) {
			case GFX_PIXEL_CLR:
				data &= ~pixel_mask;
     d10:	04 c0       	rjmp	.+8      	; 0xd1a <gfx_mono_lcd_uc1608_mask_byte+0x30>
     d12:	c0 95       	com	r28
     d14:	8c 23       	and	r24, r28
				break;

			case GFX_PIXEL_SET:
				data |= pixel_mask;
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <gfx_mono_lcd_uc1608_mask_byte+0x30>
			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
				break;
		}

		gfx_mono_lcd_uc1608_put_byte(page, column, data);
     d18:	8c 2b       	or	r24, r28
     d1a:	48 2f       	mov	r20, r24
     d1c:	61 2f       	mov	r22, r17
	}
}
     d1e:	8d 2f       	mov	r24, r29
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
				break;
		}

		gfx_mono_lcd_uc1608_put_byte(page, column, data);
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
	}
}
     d28:	a1 cf       	rjmp	.-190    	; 0xc6c <gfx_mono_lcd_uc1608_put_byte>
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	08 95       	ret

00000d34 <gfx_mono_lcd_uc1608_draw_pixel>:
 * \param x         X coordinate of the pixel
 * \param y         Y coordinate of the pixel
 * \param color     Pixel operation.
 */
void gfx_mono_lcd_uc1608_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_mono_color_t color)
{
     d34:	96 2f       	mov	r25, r22
     d36:	24 2f       	mov	r18, r20
	if ((x < GFX_MONO_LCD_WIDTH) && (y < GFX_MONO_LCD_HEIGHT)) {
     d38:	80 3f       	cpi	r24, 0xF0	; 240
     d3a:	88 f4       	brcc	.+34     	; 0xd5e <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     d3c:	67 fd       	sbrc	r22, 7
     d3e:	0f c0       	rjmp	.+30     	; 0xd5e <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
		gfx_coord_t			page		= y / GFX_MONO_LCD_PIXELS_PER_BYTE;
		gfx_mono_color_t	pixel_mask	= 1 << (y % GFX_MONO_LCD_PIXELS_PER_BYTE);

		gfx_mono_lcd_uc1608_mask_byte(page, x, pixel_mask, color);
     d40:	36 2f       	mov	r19, r22
     d42:	37 70       	andi	r19, 0x07	; 7
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	ab 01       	movw	r20, r22
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <gfx_mono_lcd_uc1608_draw_pixel+0x1a>
     d4c:	44 0f       	add	r20, r20
     d4e:	3a 95       	dec	r19
     d50:	ea f7       	brpl	.-6      	; 0xd4c <gfx_mono_lcd_uc1608_draw_pixel+0x18>
     d52:	68 2f       	mov	r22, r24
     d54:	89 2f       	mov	r24, r25
     d56:	86 95       	lsr	r24
     d58:	86 95       	lsr	r24
     d5a:	86 95       	lsr	r24
     d5c:	c6 cf       	rjmp	.-116    	; 0xcea <gfx_mono_lcd_uc1608_mask_byte>
     d5e:	08 95       	ret

00000d60 <gfx_mono_lcd_uc1608_cache_clear>:
 *
 */
inline
void gfx_mono_lcd_uc1608_cache_clear()
{
	g_gfx_mono_lcd_uc1608_cache.adr = 0;
     d60:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <__data_end+0x1>
     d64:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <__data_end>
     d68:	08 95       	ret

00000d6a <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     d6a:	9f 92       	push	r9
     d6c:	af 92       	push	r10
     d6e:	bf 92       	push	r11
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	d8 2f       	mov	r29, r24
     d82:	c6 2e       	mov	r12, r22
     d84:	d4 2e       	mov	r13, r20
     d86:	79 01       	movw	r14, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     d88:	00 e0       	ldi	r16, 0x00	; 0
     d8a:	f9 01       	movw	r30, r18
     d8c:	24 81       	ldd	r18, Z+4	; 0x04
     d8e:	43 81       	ldd	r20, Z+3	; 0x03
     d90:	6d 2d       	mov	r22, r13
     d92:	8c 2d       	mov	r24, r12
     d94:	c7 dd       	rcall	.-1138   	; 0x924 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     d96:	f7 01       	movw	r30, r14
     d98:	80 81       	ld	r24, Z
     d9a:	81 11       	cpse	r24, r1
     d9c:	39 c0       	rjmp	.+114    	; 0xe10 <gfx_mono_draw_char+0xa6>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     d9e:	83 81       	ldd	r24, Z+3	; 0x03
     da0:	28 2f       	mov	r18, r24
     da2:	26 95       	lsr	r18
     da4:	26 95       	lsr	r18
     da6:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     da8:	87 70       	andi	r24, 0x07	; 7
     daa:	09 f0       	breq	.+2      	; 0xdae <gfx_mono_draw_char+0x44>
		char_row_size++;
     dac:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     dae:	f7 01       	movw	r30, r14
     db0:	c4 81       	ldd	r28, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     db2:	8d 2f       	mov	r24, r29
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	35 81       	ldd	r19, Z+5	; 0x05
     db8:	83 1b       	sub	r24, r19
     dba:	91 09       	sbc	r25, r1
     dbc:	2c 9f       	mul	r18, r28
     dbe:	90 01       	movw	r18, r0
     dc0:	11 24       	eor	r1, r1
     dc2:	82 9f       	mul	r24, r18
     dc4:	a0 01       	movw	r20, r0
     dc6:	83 9f       	mul	r24, r19
     dc8:	50 0d       	add	r21, r0
     dca:	92 9f       	mul	r25, r18
     dcc:	50 0d       	add	r21, r0
     dce:	11 24       	eor	r1, r1
     dd0:	01 81       	ldd	r16, Z+1	; 0x01
     dd2:	12 81       	ldd	r17, Z+2	; 0x02
     dd4:	04 0f       	add	r16, r20
     dd6:	15 1f       	adc	r17, r21
     dd8:	dc 0e       	add	r13, r28
     dda:	9d 2c       	mov	r9, r13
     ddc:	9c 1a       	sub	r9, r28
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     dde:	f7 01       	movw	r30, r14
     de0:	a3 80       	ldd	r10, Z+3	; 0x03
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
     de2:	b1 2c       	mov	r11, r1
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     de4:	d0 e0       	ldi	r29, 0x00	; 0
     de6:	8c 2d       	mov	r24, r12
     de8:	8d 0f       	add	r24, r29
     dea:	ad 16       	cp	r10, r29
     dec:	79 f0       	breq	.+30     	; 0xe0c <gfx_mono_draw_char+0xa2>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     dee:	9d 2f       	mov	r25, r29
     df0:	97 70       	andi	r25, 0x07	; 7
     df2:	21 f4       	brne	.+8      	; 0xdfc <gfx_mono_draw_char+0x92>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     df4:	f8 01       	movw	r30, r16
     df6:	b4 90       	lpm	r11, Z
				glyph_data++;
     df8:	0f 5f       	subi	r16, 0xFF	; 255
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     dfc:	b7 fe       	sbrs	r11, 7
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <gfx_mono_draw_char+0x9c>
				gfx_mono_draw_pixel(inc_x, inc_y,
     e00:	41 e0       	ldi	r20, 0x01	; 1
     e02:	69 2d       	mov	r22, r9
     e04:	97 df       	rcall	.-210    	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     e06:	bb 0c       	add	r11, r11

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     e08:	df 5f       	subi	r29, 0xFF	; 255
     e0a:	ed cf       	rjmp	.-38     	; 0xde6 <gfx_mono_draw_char+0x7c>
			glyph_byte <<= 1;
		}

		inc_y += 1;
		inc_x = x;
		rows_left--;
     e0c:	c1 50       	subi	r28, 0x01	; 1
	} while (rows_left > 0);
     e0e:	29 f7       	brne	.-54     	; 0xdda <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	cf 90       	pop	r12
     e20:	bf 90       	pop	r11
     e22:	af 90       	pop	r10
     e24:	9f 90       	pop	r9
     e26:	08 95       	ret

00000e28 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     e28:	df 92       	push	r13
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	d6 2e       	mov	r13, r22
     e38:	d4 2f       	mov	r29, r20
     e3a:	79 01       	movw	r14, r18
     e3c:	8c 01       	movw	r16, r24
     e3e:	c6 2f       	mov	r28, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     e40:	f8 01       	movw	r30, r16
     e42:	81 91       	ld	r24, Z+
     e44:	8f 01       	movw	r16, r30
     e46:	8a 30       	cpi	r24, 0x0A	; 10
     e48:	31 f4       	brne	.+12     	; 0xe56 <gfx_mono_draw_string+0x2e>
			x = start_of_string_position_x;
			y += font->height + 1;
     e4a:	f7 01       	movw	r30, r14
     e4c:	84 81       	ldd	r24, Z+4	; 0x04
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	d8 0f       	add	r29, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     e52:	cd 2d       	mov	r28, r13
     e54:	09 c0       	rjmp	.+18     	; 0xe68 <gfx_mono_draw_string+0x40>
			y += font->height + 1;
		} else if (*str == '\r') {
     e56:	8d 30       	cpi	r24, 0x0D	; 13
     e58:	39 f0       	breq	.+14     	; 0xe68 <gfx_mono_draw_string+0x40>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     e5a:	97 01       	movw	r18, r14
     e5c:	4d 2f       	mov	r20, r29
     e5e:	6c 2f       	mov	r22, r28
     e60:	84 df       	rcall	.-248    	; 0xd6a <gfx_mono_draw_char>
			x += font->width;
     e62:	f7 01       	movw	r30, r14
     e64:	83 81       	ldd	r24, Z+3	; 0x03
     e66:	c8 0f       	add	r28, r24
		}
	} while (*(++str));
     e68:	f8 01       	movw	r30, r16
     e6a:	80 81       	ld	r24, Z
     e6c:	81 11       	cpse	r24, r1
     e6e:	e8 cf       	rjmp	.-48     	; 0xe40 <gfx_mono_draw_string+0x18>
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	08 95       	ret

00000e80 <asm_break>:

/* Helper functions */

void asm_break(void)
{
	__asm__ __volatile__ ("break" ::: "memory");
     e80:	98 95       	break
	nop();
     e82:	00 00       	nop
     e84:	08 95       	ret

00000e86 <__vector_9>:
{	/* TIMER 2 COMP-B */
	s_bad_interrupt();
}

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
     e86:	1f 92       	push	r1
     e88:	0f 92       	push	r0
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	0f 92       	push	r0
     e8e:	11 24       	eor	r1, r1
     e90:	2f 93       	push	r18
     e92:	3f 93       	push	r19
     e94:	4f 93       	push	r20
     e96:	5f 93       	push	r21
     e98:	6f 93       	push	r22
     e9a:	7f 93       	push	r23
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
	if (g_status.isAnimationStopped && (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC)) {
     ea8:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <g_status>
     eac:	81 ff       	sbrs	r24, 1
     eae:	74 c0       	rjmp	.+232    	; 0xf98 <__vector_9+0x112>
     eb0:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <g_SmartLCD_mode>
     eb4:	80 32       	cpi	r24, 0x20	; 32
     eb6:	09 f0       	breq	.+2      	; 0xeba <__vector_9+0x34>
     eb8:	6f c0       	rjmp	.+222    	; 0xf98 <__vector_9+0x112>
		static uint8_t state_old = 0;
		static uint8_t state_ctr = 0;
		static uint8_t second_old = 0;
		static uint8_t button_ctr = 0;
		uint8_t cur = PORTB & 0x3f;
     eba:	85 b1       	in	r24, 0x05	; 5
     ebc:	8f 73       	andi	r24, 0x3F	; 63

		/* signaling the grade of deviation */
		g_audio_out_loudness = 0;
		if (g_showData.clkState_clk_state < 0xf) {
     ebe:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <g_showData+0x2a>
     ec2:	9f 30       	cpi	r25, 0x0F	; 15
     ec4:	60 f4       	brcc	.+24     	; 0xede <__vector_9+0x58>
			cur |= _BV(PORTB6);  // LED = red
     ec6:	80 64       	ori	r24, 0x40	; 64
			if (state_old != 0x02) {
     ec8:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <state_old.2897>
     ecc:	92 30       	cpi	r25, 0x02	; 2
     ece:	19 f0       	breq	.+6      	; 0xed6 <__vector_9+0x50>
				state_ctr = 122;  // 1 sec
     ed0:	9a e7       	ldi	r25, 0x7A	; 122
     ed2:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <state_ctr.2898>
			}
			state_old = 0x02;
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <state_old.2897>
     edc:	24 c0       	rjmp	.+72     	; 0xf26 <__vector_9+0xa0>

		} else if ((g_showData.clkState_clk_state == 0xf) && (-4 < g_showData.ppb_int) && (g_showData.ppb_int < 4)) {
     ede:	9f 30       	cpi	r25, 0x0F	; 15
     ee0:	c1 f4       	brne	.+48     	; 0xf12 <__vector_9+0x8c>
     ee2:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <g_showData+0x1c>
     ee6:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <g_showData+0x1d>
     eea:	2d 5f       	subi	r18, 0xFD	; 253
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	27 30       	cpi	r18, 0x07	; 7
     ef0:	31 05       	cpc	r19, r1
     ef2:	78 f4       	brcc	.+30     	; 0xf12 <__vector_9+0x8c>
			cur |= _BV(PORTB7);  // LED = green
     ef4:	80 68       	ori	r24, 0x80	; 128
			state_old = 0x00;
     ef6:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <state_old.2897>

			/* Acoustic phase tracker */
			if (g_showData.time_second != second_old) {
     efa:	90 91 65 04 	lds	r25, 0x0465	; 0x800465 <g_showData+0x2f>
     efe:	20 91 4c 03 	lds	r18, 0x034C	; 0x80034c <second_old.2899>
     f02:	92 17       	cp	r25, r18
     f04:	81 f0       	breq	.+32     	; 0xf26 <__vector_9+0xa0>
				second_old = g_showData.time_second;
     f06:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <second_old.2899>
				state_ctr = 6;
     f0a:	96 e0       	ldi	r25, 0x06	; 6
     f0c:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <state_ctr.2898>
     f10:	0a c0       	rjmp	.+20     	; 0xf26 <__vector_9+0xa0>
			}

		} else {
			if (!state_old) {
     f12:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <state_old.2897>
     f16:	91 11       	cpse	r25, r1
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <__vector_9+0x9a>
				state_ctr = 30;  // 1/4 sec
     f1a:	9e e1       	ldi	r25, 0x1E	; 30
     f1c:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <state_ctr.2898>
			}
			state_old = 0x01;
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <state_old.2897>
		}

		if (state_ctr) {
     f26:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <state_ctr.2898>
     f2a:	99 23       	and	r25, r25
     f2c:	39 f0       	breq	.+14     	; 0xf3c <__vector_9+0xb6>
			--state_ctr;
     f2e:	91 50       	subi	r25, 0x01	; 1
     f30:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <state_ctr.2898>
			g_audio_out_loudness = 9;  // max 9
     f34:	99 e0       	ldi	r25, 0x09	; 9
     f36:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <g_audio_out_loudness>
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <__vector_9+0xba>
		} else {
			g_audio_out_loudness = 0;
     f3c:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <g_audio_out_loudness>
		}

		PORTB = cur;
     f40:	85 b9       	out	0x05, r24	; 5

		/* sampling I/Q and push buttons */
		if (button_ctr) {
     f42:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <button_ctr.2900>
     f46:	88 23       	and	r24, r24
     f48:	21 f0       	breq	.+8      	; 0xf52 <__vector_9+0xcc>
			--button_ctr;
     f4a:	81 50       	subi	r24, 0x01	; 1
     f4c:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <button_ctr.2900>
     f50:	23 c0       	rjmp	.+70     	; 0xf98 <__vector_9+0x112>
		} else {
			button_ctr = 12;
     f52:	8c e0       	ldi	r24, 0x0C	; 12
     f54:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <button_ctr.2900>
			uint8_t sw = (PINC & 0x06) >> 1;
     f58:	86 b1       	in	r24, 0x06	; 6
     f5a:	86 70       	andi	r24, 0x06	; 6
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	95 95       	asr	r25
     f60:	87 95       	ror	r24
			if (!(sw & 0x01)) {									// SW-I: decrement contrast voltage
     f62:	80 fd       	sbrc	r24, 0
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <__vector_9+0xf2>
				if (g_lcd_contrast_pm) {
     f66:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <g_lcd_contrast_pm>
     f6a:	88 23       	and	r24, r24
     f6c:	a9 f0       	breq	.+42     	; 0xf98 <__vector_9+0x112>
					--g_lcd_contrast_pm;
     f6e:	81 50       	subi	r24, 0x01	; 1
     f70:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <g_lcd_contrast_pm>
					lcd_contrast_update();
     f74:	ca d4       	rcall	.+2452   	; 0x190a <lcd_contrast_update>
				}
			} else if (!(sw & 0x02)) {							// SW-Q: increment contrast voltage
     f76:	10 c0       	rjmp	.+32     	; 0xf98 <__vector_9+0x112>
     f78:	81 fd       	sbrc	r24, 1
				if (g_lcd_contrast_pm < 0x3F) {
     f7a:	09 c0       	rjmp	.+18     	; 0xf8e <__vector_9+0x108>
     f7c:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <g_lcd_contrast_pm>
     f80:	8f 33       	cpi	r24, 0x3F	; 63
					++g_lcd_contrast_pm;
     f82:	50 f4       	brcc	.+20     	; 0xf98 <__vector_9+0x112>
     f84:	8f 5f       	subi	r24, 0xFF	; 255
					lcd_contrast_update();
     f86:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <g_lcd_contrast_pm>
     f8a:	bf d4       	rcall	.+2430   	; 0x190a <lcd_contrast_update>
				}
			} else if (!(PINB & _BV(PINB2))) {					// Pushbutton: store value in EEPROM
     f8c:	05 c0       	rjmp	.+10     	; 0xf98 <__vector_9+0x112>
     f8e:	1a 99       	sbic	0x03, 2	; 3
				eeprom_nvm_settings_write(C_EEPROM_NVM_SETTING_LCD_CONTRAST);
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <__vector_9+0x112>
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	0e 94 86 1c 	call	0x390c	; 0x390c <eeprom_nvm_settings_write>
			}
		}
	}
}
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	bf 91       	pop	r27
     f9e:	af 91       	pop	r26
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	7f 91       	pop	r23
     fa6:	6f 91       	pop	r22
     fa8:	5f 91       	pop	r21
     faa:	4f 91       	pop	r20
     fac:	3f 91       	pop	r19
     fae:	2f 91       	pop	r18
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <__vector_13>:
{	/* TIMER 1 COMP-B */
	s_bad_interrupt();
}

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
	++g_timer_abs_msb;
     fd8:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <g_timer_abs_msb>
     fdc:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <g_timer_abs_msb+0x1>
     fe0:	a0 91 8b 04 	lds	r26, 0x048B	; 0x80048b <g_timer_abs_msb+0x2>
     fe4:	b0 91 8c 04 	lds	r27, 0x048C	; 0x80048c <g_timer_abs_msb+0x3>
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	a1 1d       	adc	r26, r1
     fec:	b1 1d       	adc	r27, r1
     fee:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <g_timer_abs_msb>
     ff2:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <g_timer_abs_msb+0x1>
     ff6:	a0 93 8b 04 	sts	0x048B, r26	; 0x80048b <g_timer_abs_msb+0x2>
     ffa:	b0 93 8c 04 	sts	0x048C, r27	; 0x80048c <g_timer_abs_msb+0x3>

	if (g_status.isAnimationStopped && g_audio_out_loudness) {
     ffe:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <g_status>
    1002:	81 ff       	sbrs	r24, 1
    1004:	56 c0       	rjmp	.+172    	; 0x10b2 <__vector_13+0xf8>
    1006:	40 91 79 04 	lds	r20, 0x0479	; 0x800479 <g_audio_out_loudness>
    100a:	44 23       	and	r20, r20
    100c:	09 f4       	brne	.+2      	; 0x1010 <__vector_13+0x56>
    100e:	51 c0       	rjmp	.+162    	; 0x10b2 <__vector_13+0xf8>
		int16_t l_audio_pwm_inc = 3691 + (g_showData.clkState_phaseDeg100 >> 2);  // (880 Hz / 15625 Hz) * 16384 Steps * 8
    1010:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <g_showData+0x18>
    1014:	90 91 4f 04 	lds	r25, 0x044F	; 0x80044f <g_showData+0x19>
    1018:	95 95       	asr	r25
    101a:	87 95       	ror	r24
    101c:	95 95       	asr	r25
    101e:	87 95       	ror	r24
    1020:	9c 01       	movw	r18, r24
    1022:	25 59       	subi	r18, 0x95	; 149
    1024:	31 4f       	sbci	r19, 0xF1	; 241

		/* Generate triangle signal */
		if (g_audio_pwm_ramp_dwn) {
    1026:	50 91 76 04 	lds	r21, 0x0476	; 0x800476 <g_audio_pwm_ramp_dwn>
    102a:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <g_audio_pwm_accu>
    102e:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <g_audio_pwm_accu+0x1>
    1032:	55 23       	and	r21, r21
    1034:	b1 f0       	breq	.+44     	; 0x1062 <__vector_13+0xa8>
			g_audio_pwm_accu -= l_audio_pwm_inc;
    1036:	82 1b       	sub	r24, r18
    1038:	93 0b       	sbc	r25, r19
    103a:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <g_audio_pwm_accu+0x1>
    103e:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <g_audio_pwm_accu>
			if (g_audio_pwm_accu <= -16383) {
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	20 ec       	ldi	r18, 0xC0	; 192
    1046:	92 07       	cpc	r25, r18
    1048:	14 f5       	brge	.+68     	; 0x108e <__vector_13+0xd4>
				g_audio_pwm_ramp_dwn = false;
    104a:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <g_audio_pwm_ramp_dwn>
				int16_t residue = -g_audio_pwm_accu - 16383;
				g_audio_pwm_accu = -16383 + residue;
    104e:	22 e0       	ldi	r18, 0x02	; 2
    1050:	30 e8       	ldi	r19, 0x80	; 128
    1052:	b9 01       	movw	r22, r18
    1054:	68 1b       	sub	r22, r24
    1056:	79 0b       	sbc	r23, r25
    1058:	70 93 78 04 	sts	0x0478, r23	; 0x800478 <g_audio_pwm_accu+0x1>
    105c:	60 93 77 04 	sts	0x0477, r22	; 0x800477 <g_audio_pwm_accu>
    1060:	16 c0       	rjmp	.+44     	; 0x108e <__vector_13+0xd4>
			}
		} else {
			g_audio_pwm_accu += l_audio_pwm_inc;
    1062:	82 0f       	add	r24, r18
    1064:	93 1f       	adc	r25, r19
    1066:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <g_audio_pwm_accu+0x1>
    106a:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <g_audio_pwm_accu>
			if (g_audio_pwm_accu >= +16383) {
    106e:	8f 3f       	cpi	r24, 0xFF	; 255
    1070:	7f e3       	ldi	r23, 0x3F	; 63
    1072:	97 07       	cpc	r25, r23
    1074:	64 f0       	brlt	.+24     	; 0x108e <__vector_13+0xd4>
				g_audio_pwm_ramp_dwn = true;
    1076:	21 e0       	ldi	r18, 0x01	; 1
    1078:	20 93 76 04 	sts	0x0476, r18	; 0x800476 <g_audio_pwm_ramp_dwn>
				int16_t residue = g_audio_pwm_accu - 16383;
				g_audio_pwm_accu = 16383 - residue;
    107c:	2e ef       	ldi	r18, 0xFE	; 254
    107e:	3f e7       	ldi	r19, 0x7F	; 127
    1080:	b9 01       	movw	r22, r18
    1082:	68 1b       	sub	r22, r24
    1084:	79 0b       	sbc	r23, r25
    1086:	70 93 78 04 	sts	0x0478, r23	; 0x800478 <g_audio_pwm_accu+0x1>
    108a:	60 93 77 04 	sts	0x0477, r22	; 0x800477 <g_audio_pwm_accu>
			}
		}

		int16_t audio_out = 256 + (g_audio_pwm_accu >> (15 - g_audio_out_loudness));  // 6 + 9
    108e:	2f e0       	ldi	r18, 0x0F	; 15
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	24 1b       	sub	r18, r20
    1094:	31 09       	sbc	r19, r1
    1096:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <g_audio_pwm_accu>
    109a:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <g_audio_pwm_accu+0x1>
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <__vector_13+0xea>
    10a0:	95 95       	asr	r25
    10a2:	87 95       	ror	r24
    10a4:	2a 95       	dec	r18
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <__vector_13+0xe6>
    10a8:	93 95       	inc	r25
		OCR1AH = (uint8_t) (audio_out >> 8);					// 9 bit
    10aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL = (uint8_t) (audio_out & 0xff);
    10ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	cpu_irq_enable();
	//adc_start_conversion();						// TODO ???
	enter_sleep(SLEEP_MODE_ADC);
	adc_disable_interrupt();
#endif
}
    10b2:	bf 91       	pop	r27
    10b4:	af 91       	pop	r26
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	7f 91       	pop	r23
    10bc:	6f 91       	pop	r22
    10be:	5f 91       	pop	r21
    10c0:	4f 91       	pop	r20
    10c2:	3f 91       	pop	r19
    10c4:	2f 91       	pop	r18
    10c6:	0f 90       	pop	r0
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	0f 90       	pop	r0
    10cc:	1f 90       	pop	r1
    10ce:	18 95       	reti

000010d0 <__vector_16>:
{	/* TIMER 0 COMP-B */
	s_bad_interrupt();
}

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
	cpu_irq_enable();

	enter_sleep(SLEEP_MODE_ADC);
	adc_disable_interrupt();
#endif
}
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f 90       	pop	r0
    10e0:	1f 90       	pop	r1
    10e2:	18 95       	reti

000010e4 <__vector_21>:
{	/* USART, TX - Complete */
	s_bad_interrupt();
}

ISR(__vector_21, ISR_BLOCK)
{	/* ADC */
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	8f 92       	push	r8
    10f0:	9f 92       	push	r9
    10f2:	af 92       	push	r10
    10f4:	bf 92       	push	r11
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	2f 93       	push	r18
    1100:	3f 93       	push	r19
    1102:	4f 93       	push	r20
    1104:	5f 93       	push	r21
    1106:	6f 93       	push	r22
    1108:	7f 93       	push	r23
    110a:	8f 93       	push	r24
    110c:	9f 93       	push	r25
    110e:	af 93       	push	r26
    1110:	bf 93       	push	r27
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	ef 93       	push	r30
    1118:	ff 93       	push	r31
	uint16_t adc_val = ADCL | (ADCH << 8);
    111a:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    111e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1122:	d0 e0       	ldi	r29, 0x00	; 0
    1124:	d8 2b       	or	r29, r24
	uint8_t  reason  = g_adc_state;
    1126:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <g_adc_state>

	//TIFR1 |= _BV(TOV1);							// Reset Timer1 overflow status bit (when no ISR for TOV1 activated!)

	switch (reason) {
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	59 f0       	breq	.+22     	; 0x1144 <__vector_21+0x60>
    112e:	30 f0       	brcs	.+12     	; 0x113c <__vector_21+0x58>
    1130:	82 30       	cpi	r24, 0x02	; 2
    1132:	79 f4       	brne	.+30     	; 0x1152 <__vector_21+0x6e>
			g_adc_state = ADC_STATE_PRE_TEMP;
		break;

		case ADC_STATE_PRE_TEMP:
			// drop one ADC value after switching MUX
			g_adc_state = ADC_STATE_VLD_TEMP;
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <g_adc_state>
		break;
    113a:	8b c0       	rjmp	.+278    	; 0x1252 <__vector_21+0x16e>
	//TIFR1 |= _BV(TOV1);							// Reset Timer1 overflow status bit (when no ISR for TOV1 activated!)

	switch (reason) {
		case ADC_STATE_PRE_LDR:
			// drop one ADC value after switching MUX
			g_adc_state = ADC_STATE_VLD_LDR;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <g_adc_state>
		break;
    1142:	87 c0       	rjmp	.+270    	; 0x1252 <__vector_21+0x16e>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    1144:	88 ec       	ldi	r24, 0xC8	; 200
    1146:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		case ADC_STATE_VLD_LDR:
			adc_set_admux(ADC_MUX_TEMPSENSE | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
			g_adc_state = ADC_STATE_PRE_TEMP;
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <g_adc_state>
    1150:	07 c0       	rjmp	.+14     	; 0x1160 <__vector_21+0x7c>
    1152:	90 ec       	ldi	r25, 0xC0	; 192
    1154:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		case ADC_STATE_VLD_TEMP:
			// fall-through.
		default:
			adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
			g_adc_state = ADC_STATE_PRE_LDR;
    1158:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <g_adc_state>
	}

	/* Low pass filtering and enhancing the data depth */
	if (reason == ADC_STATE_VLD_LDR) {
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	e1 f5       	brne	.+120    	; 0x11d8 <__vector_21+0xf4>
		uint16_t l_adc_light = g_adc_light;
    1160:	60 91 84 04 	lds	r22, 0x0484	; 0x800484 <g_adc_light>
    1164:	70 91 85 04 	lds	r23, 0x0485	; 0x800485 <g_adc_light+0x1>
    1168:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <g_adc_light+0x2>
    116c:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <g_adc_light+0x3>
    1170:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__fixunssfsi>
		cpu_irq_enable();
    1174:	78 94       	sei
    1176:	6e 01       	movw	r12, r28
    1178:	e1 2c       	mov	r14, r1
    117a:	f1 2c       	mov	r15, r1
		float calc = l_adc_light ?  0.980f * l_adc_light + 0.020f * adc_val : adc_val;	// load with initial value if none is set before
    117c:	61 15       	cp	r22, r1
    117e:	71 05       	cpc	r23, r1
    1180:	e9 f0       	breq	.+58     	; 0x11bc <__vector_21+0xd8>
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__floatunsisf>
    118a:	28 e4       	ldi	r18, 0x48	; 72
    118c:	31 ee       	ldi	r19, 0xE1	; 225
    118e:	4a e7       	ldi	r20, 0x7A	; 122
    1190:	5f e3       	ldi	r21, 0x3F	; 63
    1192:	0e 94 cf 20 	call	0x419e	; 0x419e <__mulsf3>
    1196:	4b 01       	movw	r8, r22
    1198:	5c 01       	movw	r10, r24
    119a:	c7 01       	movw	r24, r14
    119c:	b6 01       	movw	r22, r12
    119e:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__floatunsisf>
    11a2:	2a e0       	ldi	r18, 0x0A	; 10
    11a4:	37 ed       	ldi	r19, 0xD7	; 215
    11a6:	43 ea       	ldi	r20, 0xA3	; 163
    11a8:	5c e3       	ldi	r21, 0x3C	; 60
    11aa:	0e 94 cf 20 	call	0x419e	; 0x419e <__mulsf3>
    11ae:	9b 01       	movw	r18, r22
    11b0:	ac 01       	movw	r20, r24
    11b2:	c5 01       	movw	r24, r10
    11b4:	b4 01       	movw	r22, r8
    11b6:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__addsf3>
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <__vector_21+0xe0>
    11bc:	c7 01       	movw	r24, r14
    11be:	b6 01       	movw	r22, r12
    11c0:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__floatunsisf>
		cpu_irq_disable();
    11c4:	f8 94       	cli
		g_adc_light = calc;
    11c6:	60 93 84 04 	sts	0x0484, r22	; 0x800484 <g_adc_light>
    11ca:	70 93 85 04 	sts	0x0485, r23	; 0x800485 <g_adc_light+0x1>
    11ce:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <g_adc_light+0x2>
    11d2:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <g_adc_light+0x3>
    11d6:	3d c0       	rjmp	.+122    	; 0x1252 <__vector_21+0x16e>

	} else if (reason == ADC_STATE_VLD_TEMP) {
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	d9 f5       	brne	.+118    	; 0x1252 <__vector_21+0x16e>
		uint16_t l_adc_temp  = g_adc_temp;
    11dc:	60 91 80 04 	lds	r22, 0x0480	; 0x800480 <g_adc_temp>
    11e0:	70 91 81 04 	lds	r23, 0x0481	; 0x800481 <g_adc_temp+0x1>
    11e4:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <g_adc_temp+0x2>
    11e8:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <g_adc_temp+0x3>
    11ec:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__fixunssfsi>
		cpu_irq_enable();
    11f0:	78 94       	sei
    11f2:	6e 01       	movw	r12, r28
    11f4:	e1 2c       	mov	r14, r1
    11f6:	f1 2c       	mov	r15, r1
		float calc = l_adc_temp ?   0.995f * l_adc_temp  + 0.005f * adc_val : adc_val;	// load with initial value if none is set before
    11f8:	61 15       	cp	r22, r1
    11fa:	71 05       	cpc	r23, r1
    11fc:	e9 f0       	breq	.+58     	; 0x1238 <__vector_21+0x154>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__floatunsisf>
    1206:	22 e5       	ldi	r18, 0x52	; 82
    1208:	38 eb       	ldi	r19, 0xB8	; 184
    120a:	4e e7       	ldi	r20, 0x7E	; 126
    120c:	5f e3       	ldi	r21, 0x3F	; 63
    120e:	0e 94 cf 20 	call	0x419e	; 0x419e <__mulsf3>
    1212:	4b 01       	movw	r8, r22
    1214:	5c 01       	movw	r10, r24
    1216:	c7 01       	movw	r24, r14
    1218:	b6 01       	movw	r22, r12
    121a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__floatunsisf>
    121e:	2a e0       	ldi	r18, 0x0A	; 10
    1220:	37 ed       	ldi	r19, 0xD7	; 215
    1222:	43 ea       	ldi	r20, 0xA3	; 163
    1224:	5b e3       	ldi	r21, 0x3B	; 59
    1226:	0e 94 cf 20 	call	0x419e	; 0x419e <__mulsf3>
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	c5 01       	movw	r24, r10
    1230:	b4 01       	movw	r22, r8
    1232:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__addsf3>
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <__vector_21+0x15c>
    1238:	c7 01       	movw	r24, r14
    123a:	b6 01       	movw	r22, r12
    123c:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__floatunsisf>
		cpu_irq_disable();
    1240:	f8 94       	cli
		g_adc_temp = calc;
    1242:	60 93 80 04 	sts	0x0480, r22	; 0x800480 <g_adc_temp>
    1246:	70 93 81 04 	sts	0x0481, r23	; 0x800481 <g_adc_temp+0x1>
    124a:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <g_adc_temp+0x2>
    124e:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <g_adc_temp+0x3>
	}
}
    1252:	ff 91       	pop	r31
    1254:	ef 91       	pop	r30
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	df 90       	pop	r13
    1274:	cf 90       	pop	r12
    1276:	bf 90       	pop	r11
    1278:	af 90       	pop	r10
    127a:	9f 90       	pop	r9
    127c:	8f 90       	pop	r8
    127e:	0f 90       	pop	r0
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	0f 90       	pop	r0
    1284:	1f 90       	pop	r1
    1286:	18 95       	reti

00001288 <__vector_24>:
{	/* ANALOG COMP */
	s_bad_interrupt();
}

ISR(__vector_24, ISR_BLOCK)
{	/* TWI */
    1288:	1f 92       	push	r1
    128a:	0f 92       	push	r0
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	0f 92       	push	r0
    1290:	11 24       	eor	r1, r1
    1292:	2f 93       	push	r18
    1294:	3f 93       	push	r19
    1296:	4f 93       	push	r20
    1298:	5f 93       	push	r21
    129a:	6f 93       	push	r22
    129c:	7f 93       	push	r23
    129e:	8f 93       	push	r24
    12a0:	9f 93       	push	r25
    12a2:	af 93       	push	r26
    12a4:	bf 93       	push	r27
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	ef 93       	push	r30
    12ac:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b11111 << TWS3);
    12ae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	uint8_t twd = TWDR;
    12b2:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	uint8_t twcr_cur = TWCR;
    12b6:	cc eb       	ldi	r28, 0xBC	; 188
    12b8:	d0 e0       	ldi	r29, 0x00	; 0
    12ba:	48 81       	ld	r20, Y

	uint8_t twcr_new = __vector_24__bottom(tws, twd, twcr_cur);
    12bc:	88 7f       	andi	r24, 0xF8	; 248
    12be:	0e 94 b6 1a 	call	0x356c	; 0x356c <__vector_24__bottom>
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
    12c2:	85 68       	ori	r24, 0x85	; 133
    12c4:	88 83       	st	Y, r24
}
    12c6:	ff 91       	pop	r31
    12c8:	ef 91       	pop	r30
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	7f 91       	pop	r23
    12d8:	6f 91       	pop	r22
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_25>:

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    130c:	ff 93       	push	r31
}

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
	s_bad_interrupt();
}
    130e:	b8 dd       	rcall	.-1168   	; 0xe80 <asm_break>
    1310:	ff 91       	pop	r31
    1312:	ef 91       	pop	r30
    1314:	bf 91       	pop	r27
    1316:	af 91       	pop	r26
    1318:	9f 91       	pop	r25
    131a:	8f 91       	pop	r24
    131c:	7f 91       	pop	r23
    131e:	6f 91       	pop	r22
    1320:	5f 91       	pop	r21
    1322:	4f 91       	pop	r20
    1324:	3f 91       	pop	r19
    1326:	2f 91       	pop	r18
    1328:	0f 90       	pop	r0
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	0f 90       	pop	r0
    132e:	1f 90       	pop	r1
    1330:	18 95       	reti

00001332 <__vector_23>:
    1332:	1f 92       	push	r1
    1334:	0f 92       	push	r0
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	0f 92       	push	r0
    133a:	11 24       	eor	r1, r1
    133c:	2f 93       	push	r18
    133e:	3f 93       	push	r19
    1340:	4f 93       	push	r20
    1342:	5f 93       	push	r21
    1344:	6f 93       	push	r22
    1346:	7f 93       	push	r23
    1348:	8f 93       	push	r24
    134a:	9f 93       	push	r25
    134c:	af 93       	push	r26
    134e:	bf 93       	push	r27
    1350:	ef 93       	push	r30
    1352:	ff 93       	push	r31
    1354:	cb df       	rcall	.-106    	; 0x12ec <__vector_25>
    1356:	ff 91       	pop	r31
    1358:	ef 91       	pop	r30
    135a:	bf 91       	pop	r27
    135c:	af 91       	pop	r26
    135e:	9f 91       	pop	r25
    1360:	8f 91       	pop	r24
    1362:	7f 91       	pop	r23
    1364:	6f 91       	pop	r22
    1366:	5f 91       	pop	r21
    1368:	4f 91       	pop	r20
    136a:	3f 91       	pop	r19
    136c:	2f 91       	pop	r18
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	0f 90       	pop	r0
    1374:	1f 90       	pop	r1
    1376:	18 95       	reti

00001378 <__vector_22>:
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	6f 93       	push	r22
    138c:	7f 93       	push	r23
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
    139a:	a8 df       	rcall	.-176    	; 0x12ec <__vector_25>
    139c:	ff 91       	pop	r31
    139e:	ef 91       	pop	r30
    13a0:	bf 91       	pop	r27
    13a2:	af 91       	pop	r26
    13a4:	9f 91       	pop	r25
    13a6:	8f 91       	pop	r24
    13a8:	7f 91       	pop	r23
    13aa:	6f 91       	pop	r22
    13ac:	5f 91       	pop	r21
    13ae:	4f 91       	pop	r20
    13b0:	3f 91       	pop	r19
    13b2:	2f 91       	pop	r18
    13b4:	0f 90       	pop	r0
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	0f 90       	pop	r0
    13ba:	1f 90       	pop	r1
    13bc:	18 95       	reti

000013be <__vector_20>:
    13be:	1f 92       	push	r1
    13c0:	0f 92       	push	r0
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	0f 92       	push	r0
    13c6:	11 24       	eor	r1, r1
    13c8:	2f 93       	push	r18
    13ca:	3f 93       	push	r19
    13cc:	4f 93       	push	r20
    13ce:	5f 93       	push	r21
    13d0:	6f 93       	push	r22
    13d2:	7f 93       	push	r23
    13d4:	8f 93       	push	r24
    13d6:	9f 93       	push	r25
    13d8:	af 93       	push	r26
    13da:	bf 93       	push	r27
    13dc:	ef 93       	push	r30
    13de:	ff 93       	push	r31
    13e0:	85 df       	rcall	.-246    	; 0x12ec <__vector_25>
    13e2:	ff 91       	pop	r31
    13e4:	ef 91       	pop	r30
    13e6:	bf 91       	pop	r27
    13e8:	af 91       	pop	r26
    13ea:	9f 91       	pop	r25
    13ec:	8f 91       	pop	r24
    13ee:	7f 91       	pop	r23
    13f0:	6f 91       	pop	r22
    13f2:	5f 91       	pop	r21
    13f4:	4f 91       	pop	r20
    13f6:	3f 91       	pop	r19
    13f8:	2f 91       	pop	r18
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	0f 90       	pop	r0
    1400:	1f 90       	pop	r1
    1402:	18 95       	reti

00001404 <__vector_19>:
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	11 24       	eor	r1, r1
    140e:	2f 93       	push	r18
    1410:	3f 93       	push	r19
    1412:	4f 93       	push	r20
    1414:	5f 93       	push	r21
    1416:	6f 93       	push	r22
    1418:	7f 93       	push	r23
    141a:	8f 93       	push	r24
    141c:	9f 93       	push	r25
    141e:	af 93       	push	r26
    1420:	bf 93       	push	r27
    1422:	ef 93       	push	r30
    1424:	ff 93       	push	r31
    1426:	62 df       	rcall	.-316    	; 0x12ec <__vector_25>
    1428:	ff 91       	pop	r31
    142a:	ef 91       	pop	r30
    142c:	bf 91       	pop	r27
    142e:	af 91       	pop	r26
    1430:	9f 91       	pop	r25
    1432:	8f 91       	pop	r24
    1434:	7f 91       	pop	r23
    1436:	6f 91       	pop	r22
    1438:	5f 91       	pop	r21
    143a:	4f 91       	pop	r20
    143c:	3f 91       	pop	r19
    143e:	2f 91       	pop	r18
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	0f 90       	pop	r0
    1446:	1f 90       	pop	r1
    1448:	18 95       	reti

0000144a <__vector_18>:
    144a:	1f 92       	push	r1
    144c:	0f 92       	push	r0
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	0f 92       	push	r0
    1452:	11 24       	eor	r1, r1
    1454:	2f 93       	push	r18
    1456:	3f 93       	push	r19
    1458:	4f 93       	push	r20
    145a:	5f 93       	push	r21
    145c:	6f 93       	push	r22
    145e:	7f 93       	push	r23
    1460:	8f 93       	push	r24
    1462:	9f 93       	push	r25
    1464:	af 93       	push	r26
    1466:	bf 93       	push	r27
    1468:	ef 93       	push	r30
    146a:	ff 93       	push	r31
    146c:	3f df       	rcall	.-386    	; 0x12ec <__vector_25>
    146e:	ff 91       	pop	r31
    1470:	ef 91       	pop	r30
    1472:	bf 91       	pop	r27
    1474:	af 91       	pop	r26
    1476:	9f 91       	pop	r25
    1478:	8f 91       	pop	r24
    147a:	7f 91       	pop	r23
    147c:	6f 91       	pop	r22
    147e:	5f 91       	pop	r21
    1480:	4f 91       	pop	r20
    1482:	3f 91       	pop	r19
    1484:	2f 91       	pop	r18
    1486:	0f 90       	pop	r0
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	0f 90       	pop	r0
    148c:	1f 90       	pop	r1
    148e:	18 95       	reti

00001490 <__vector_17>:
    1490:	1f 92       	push	r1
    1492:	0f 92       	push	r0
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	0f 92       	push	r0
    1498:	11 24       	eor	r1, r1
    149a:	2f 93       	push	r18
    149c:	3f 93       	push	r19
    149e:	4f 93       	push	r20
    14a0:	5f 93       	push	r21
    14a2:	6f 93       	push	r22
    14a4:	7f 93       	push	r23
    14a6:	8f 93       	push	r24
    14a8:	9f 93       	push	r25
    14aa:	af 93       	push	r26
    14ac:	bf 93       	push	r27
    14ae:	ef 93       	push	r30
    14b0:	ff 93       	push	r31
    14b2:	1c df       	rcall	.-456    	; 0x12ec <__vector_25>
    14b4:	ff 91       	pop	r31
    14b6:	ef 91       	pop	r30
    14b8:	bf 91       	pop	r27
    14ba:	af 91       	pop	r26
    14bc:	9f 91       	pop	r25
    14be:	8f 91       	pop	r24
    14c0:	7f 91       	pop	r23
    14c2:	6f 91       	pop	r22
    14c4:	5f 91       	pop	r21
    14c6:	4f 91       	pop	r20
    14c8:	3f 91       	pop	r19
    14ca:	2f 91       	pop	r18
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti

000014d6 <__vector_15>:
    14d6:	1f 92       	push	r1
    14d8:	0f 92       	push	r0
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	0f 92       	push	r0
    14de:	11 24       	eor	r1, r1
    14e0:	2f 93       	push	r18
    14e2:	3f 93       	push	r19
    14e4:	4f 93       	push	r20
    14e6:	5f 93       	push	r21
    14e8:	6f 93       	push	r22
    14ea:	7f 93       	push	r23
    14ec:	8f 93       	push	r24
    14ee:	9f 93       	push	r25
    14f0:	af 93       	push	r26
    14f2:	bf 93       	push	r27
    14f4:	ef 93       	push	r30
    14f6:	ff 93       	push	r31
    14f8:	f9 de       	rcall	.-526    	; 0x12ec <__vector_25>
    14fa:	ff 91       	pop	r31
    14fc:	ef 91       	pop	r30
    14fe:	bf 91       	pop	r27
    1500:	af 91       	pop	r26
    1502:	9f 91       	pop	r25
    1504:	8f 91       	pop	r24
    1506:	7f 91       	pop	r23
    1508:	6f 91       	pop	r22
    150a:	5f 91       	pop	r21
    150c:	4f 91       	pop	r20
    150e:	3f 91       	pop	r19
    1510:	2f 91       	pop	r18
    1512:	0f 90       	pop	r0
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	0f 90       	pop	r0
    1518:	1f 90       	pop	r1
    151a:	18 95       	reti

0000151c <__vector_14>:
    151c:	1f 92       	push	r1
    151e:	0f 92       	push	r0
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	0f 92       	push	r0
    1524:	11 24       	eor	r1, r1
    1526:	2f 93       	push	r18
    1528:	3f 93       	push	r19
    152a:	4f 93       	push	r20
    152c:	5f 93       	push	r21
    152e:	6f 93       	push	r22
    1530:	7f 93       	push	r23
    1532:	8f 93       	push	r24
    1534:	9f 93       	push	r25
    1536:	af 93       	push	r26
    1538:	bf 93       	push	r27
    153a:	ef 93       	push	r30
    153c:	ff 93       	push	r31
    153e:	d6 de       	rcall	.-596    	; 0x12ec <__vector_25>
    1540:	ff 91       	pop	r31
    1542:	ef 91       	pop	r30
    1544:	bf 91       	pop	r27
    1546:	af 91       	pop	r26
    1548:	9f 91       	pop	r25
    154a:	8f 91       	pop	r24
    154c:	7f 91       	pop	r23
    154e:	6f 91       	pop	r22
    1550:	5f 91       	pop	r21
    1552:	4f 91       	pop	r20
    1554:	3f 91       	pop	r19
    1556:	2f 91       	pop	r18
    1558:	0f 90       	pop	r0
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	0f 90       	pop	r0
    155e:	1f 90       	pop	r1
    1560:	18 95       	reti

00001562 <__vector_12>:
    1562:	1f 92       	push	r1
    1564:	0f 92       	push	r0
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	0f 92       	push	r0
    156a:	11 24       	eor	r1, r1
    156c:	2f 93       	push	r18
    156e:	3f 93       	push	r19
    1570:	4f 93       	push	r20
    1572:	5f 93       	push	r21
    1574:	6f 93       	push	r22
    1576:	7f 93       	push	r23
    1578:	8f 93       	push	r24
    157a:	9f 93       	push	r25
    157c:	af 93       	push	r26
    157e:	bf 93       	push	r27
    1580:	ef 93       	push	r30
    1582:	ff 93       	push	r31
    1584:	b3 de       	rcall	.-666    	; 0x12ec <__vector_25>
    1586:	ff 91       	pop	r31
    1588:	ef 91       	pop	r30
    158a:	bf 91       	pop	r27
    158c:	af 91       	pop	r26
    158e:	9f 91       	pop	r25
    1590:	8f 91       	pop	r24
    1592:	7f 91       	pop	r23
    1594:	6f 91       	pop	r22
    1596:	5f 91       	pop	r21
    1598:	4f 91       	pop	r20
    159a:	3f 91       	pop	r19
    159c:	2f 91       	pop	r18
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	0f 90       	pop	r0
    15a4:	1f 90       	pop	r1
    15a6:	18 95       	reti

000015a8 <__vector_11>:
    15a8:	1f 92       	push	r1
    15aa:	0f 92       	push	r0
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	0f 92       	push	r0
    15b0:	11 24       	eor	r1, r1
    15b2:	2f 93       	push	r18
    15b4:	3f 93       	push	r19
    15b6:	4f 93       	push	r20
    15b8:	5f 93       	push	r21
    15ba:	6f 93       	push	r22
    15bc:	7f 93       	push	r23
    15be:	8f 93       	push	r24
    15c0:	9f 93       	push	r25
    15c2:	af 93       	push	r26
    15c4:	bf 93       	push	r27
    15c6:	ef 93       	push	r30
    15c8:	ff 93       	push	r31
    15ca:	90 de       	rcall	.-736    	; 0x12ec <__vector_25>
    15cc:	ff 91       	pop	r31
    15ce:	ef 91       	pop	r30
    15d0:	bf 91       	pop	r27
    15d2:	af 91       	pop	r26
    15d4:	9f 91       	pop	r25
    15d6:	8f 91       	pop	r24
    15d8:	7f 91       	pop	r23
    15da:	6f 91       	pop	r22
    15dc:	5f 91       	pop	r21
    15de:	4f 91       	pop	r20
    15e0:	3f 91       	pop	r19
    15e2:	2f 91       	pop	r18
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	0f 90       	pop	r0
    15ea:	1f 90       	pop	r1
    15ec:	18 95       	reti

000015ee <__vector_10>:
    15ee:	1f 92       	push	r1
    15f0:	0f 92       	push	r0
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	0f 92       	push	r0
    15f6:	11 24       	eor	r1, r1
    15f8:	2f 93       	push	r18
    15fa:	3f 93       	push	r19
    15fc:	4f 93       	push	r20
    15fe:	5f 93       	push	r21
    1600:	6f 93       	push	r22
    1602:	7f 93       	push	r23
    1604:	8f 93       	push	r24
    1606:	9f 93       	push	r25
    1608:	af 93       	push	r26
    160a:	bf 93       	push	r27
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
    1610:	6d de       	rcall	.-806    	; 0x12ec <__vector_25>
    1612:	ff 91       	pop	r31
    1614:	ef 91       	pop	r30
    1616:	bf 91       	pop	r27
    1618:	af 91       	pop	r26
    161a:	9f 91       	pop	r25
    161c:	8f 91       	pop	r24
    161e:	7f 91       	pop	r23
    1620:	6f 91       	pop	r22
    1622:	5f 91       	pop	r21
    1624:	4f 91       	pop	r20
    1626:	3f 91       	pop	r19
    1628:	2f 91       	pop	r18
    162a:	0f 90       	pop	r0
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	0f 90       	pop	r0
    1630:	1f 90       	pop	r1
    1632:	18 95       	reti

00001634 <__vector_8>:
    1634:	1f 92       	push	r1
    1636:	0f 92       	push	r0
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	0f 92       	push	r0
    163c:	11 24       	eor	r1, r1
    163e:	2f 93       	push	r18
    1640:	3f 93       	push	r19
    1642:	4f 93       	push	r20
    1644:	5f 93       	push	r21
    1646:	6f 93       	push	r22
    1648:	7f 93       	push	r23
    164a:	8f 93       	push	r24
    164c:	9f 93       	push	r25
    164e:	af 93       	push	r26
    1650:	bf 93       	push	r27
    1652:	ef 93       	push	r30
    1654:	ff 93       	push	r31
    1656:	4a de       	rcall	.-876    	; 0x12ec <__vector_25>
    1658:	ff 91       	pop	r31
    165a:	ef 91       	pop	r30
    165c:	bf 91       	pop	r27
    165e:	af 91       	pop	r26
    1660:	9f 91       	pop	r25
    1662:	8f 91       	pop	r24
    1664:	7f 91       	pop	r23
    1666:	6f 91       	pop	r22
    1668:	5f 91       	pop	r21
    166a:	4f 91       	pop	r20
    166c:	3f 91       	pop	r19
    166e:	2f 91       	pop	r18
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	0f 90       	pop	r0
    1676:	1f 90       	pop	r1
    1678:	18 95       	reti

0000167a <__vector_7>:
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	11 24       	eor	r1, r1
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
    169c:	27 de       	rcall	.-946    	; 0x12ec <__vector_25>
    169e:	ff 91       	pop	r31
    16a0:	ef 91       	pop	r30
    16a2:	bf 91       	pop	r27
    16a4:	af 91       	pop	r26
    16a6:	9f 91       	pop	r25
    16a8:	8f 91       	pop	r24
    16aa:	7f 91       	pop	r23
    16ac:	6f 91       	pop	r22
    16ae:	5f 91       	pop	r21
    16b0:	4f 91       	pop	r20
    16b2:	3f 91       	pop	r19
    16b4:	2f 91       	pop	r18
    16b6:	0f 90       	pop	r0
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	0f 90       	pop	r0
    16bc:	1f 90       	pop	r1
    16be:	18 95       	reti

000016c0 <__vector_6>:
    16c0:	1f 92       	push	r1
    16c2:	0f 92       	push	r0
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	0f 92       	push	r0
    16c8:	11 24       	eor	r1, r1
    16ca:	2f 93       	push	r18
    16cc:	3f 93       	push	r19
    16ce:	4f 93       	push	r20
    16d0:	5f 93       	push	r21
    16d2:	6f 93       	push	r22
    16d4:	7f 93       	push	r23
    16d6:	8f 93       	push	r24
    16d8:	9f 93       	push	r25
    16da:	af 93       	push	r26
    16dc:	bf 93       	push	r27
    16de:	ef 93       	push	r30
    16e0:	ff 93       	push	r31
    16e2:	04 de       	rcall	.-1016   	; 0x12ec <__vector_25>
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <__vector_5>:
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	0f 92       	push	r0
    170e:	11 24       	eor	r1, r1
    1710:	2f 93       	push	r18
    1712:	3f 93       	push	r19
    1714:	4f 93       	push	r20
    1716:	5f 93       	push	r21
    1718:	6f 93       	push	r22
    171a:	7f 93       	push	r23
    171c:	8f 93       	push	r24
    171e:	9f 93       	push	r25
    1720:	af 93       	push	r26
    1722:	bf 93       	push	r27
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
    1728:	e1 dd       	rcall	.-1086   	; 0x12ec <__vector_25>
    172a:	ff 91       	pop	r31
    172c:	ef 91       	pop	r30
    172e:	bf 91       	pop	r27
    1730:	af 91       	pop	r26
    1732:	9f 91       	pop	r25
    1734:	8f 91       	pop	r24
    1736:	7f 91       	pop	r23
    1738:	6f 91       	pop	r22
    173a:	5f 91       	pop	r21
    173c:	4f 91       	pop	r20
    173e:	3f 91       	pop	r19
    1740:	2f 91       	pop	r18
    1742:	0f 90       	pop	r0
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	0f 90       	pop	r0
    1748:	1f 90       	pop	r1
    174a:	18 95       	reti

0000174c <__vector_4>:
    174c:	1f 92       	push	r1
    174e:	0f 92       	push	r0
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	0f 92       	push	r0
    1754:	11 24       	eor	r1, r1
    1756:	2f 93       	push	r18
    1758:	3f 93       	push	r19
    175a:	4f 93       	push	r20
    175c:	5f 93       	push	r21
    175e:	6f 93       	push	r22
    1760:	7f 93       	push	r23
    1762:	8f 93       	push	r24
    1764:	9f 93       	push	r25
    1766:	af 93       	push	r26
    1768:	bf 93       	push	r27
    176a:	ef 93       	push	r30
    176c:	ff 93       	push	r31
    176e:	be dd       	rcall	.-1156   	; 0x12ec <__vector_25>
    1770:	ff 91       	pop	r31
    1772:	ef 91       	pop	r30
    1774:	bf 91       	pop	r27
    1776:	af 91       	pop	r26
    1778:	9f 91       	pop	r25
    177a:	8f 91       	pop	r24
    177c:	7f 91       	pop	r23
    177e:	6f 91       	pop	r22
    1780:	5f 91       	pop	r21
    1782:	4f 91       	pop	r20
    1784:	3f 91       	pop	r19
    1786:	2f 91       	pop	r18
    1788:	0f 90       	pop	r0
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	0f 90       	pop	r0
    178e:	1f 90       	pop	r1
    1790:	18 95       	reti

00001792 <__vector_3>:
    1792:	1f 92       	push	r1
    1794:	0f 92       	push	r0
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	0f 92       	push	r0
    179a:	11 24       	eor	r1, r1
    179c:	2f 93       	push	r18
    179e:	3f 93       	push	r19
    17a0:	4f 93       	push	r20
    17a2:	5f 93       	push	r21
    17a4:	6f 93       	push	r22
    17a6:	7f 93       	push	r23
    17a8:	8f 93       	push	r24
    17aa:	9f 93       	push	r25
    17ac:	af 93       	push	r26
    17ae:	bf 93       	push	r27
    17b0:	ef 93       	push	r30
    17b2:	ff 93       	push	r31
    17b4:	9b dd       	rcall	.-1226   	; 0x12ec <__vector_25>
    17b6:	ff 91       	pop	r31
    17b8:	ef 91       	pop	r30
    17ba:	bf 91       	pop	r27
    17bc:	af 91       	pop	r26
    17be:	9f 91       	pop	r25
    17c0:	8f 91       	pop	r24
    17c2:	7f 91       	pop	r23
    17c4:	6f 91       	pop	r22
    17c6:	5f 91       	pop	r21
    17c8:	4f 91       	pop	r20
    17ca:	3f 91       	pop	r19
    17cc:	2f 91       	pop	r18
    17ce:	0f 90       	pop	r0
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	0f 90       	pop	r0
    17d4:	1f 90       	pop	r1
    17d6:	18 95       	reti

000017d8 <__vector_2>:
    17d8:	1f 92       	push	r1
    17da:	0f 92       	push	r0
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	0f 92       	push	r0
    17e0:	11 24       	eor	r1, r1
    17e2:	2f 93       	push	r18
    17e4:	3f 93       	push	r19
    17e6:	4f 93       	push	r20
    17e8:	5f 93       	push	r21
    17ea:	6f 93       	push	r22
    17ec:	7f 93       	push	r23
    17ee:	8f 93       	push	r24
    17f0:	9f 93       	push	r25
    17f2:	af 93       	push	r26
    17f4:	bf 93       	push	r27
    17f6:	ef 93       	push	r30
    17f8:	ff 93       	push	r31
    17fa:	78 dd       	rcall	.-1296   	; 0x12ec <__vector_25>
    17fc:	ff 91       	pop	r31
    17fe:	ef 91       	pop	r30
    1800:	bf 91       	pop	r27
    1802:	af 91       	pop	r26
    1804:	9f 91       	pop	r25
    1806:	8f 91       	pop	r24
    1808:	7f 91       	pop	r23
    180a:	6f 91       	pop	r22
    180c:	5f 91       	pop	r21
    180e:	4f 91       	pop	r20
    1810:	3f 91       	pop	r19
    1812:	2f 91       	pop	r18
    1814:	0f 90       	pop	r0
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	0f 90       	pop	r0
    181a:	1f 90       	pop	r1
    181c:	18 95       	reti

0000181e <__vector_1>:
    181e:	1f 92       	push	r1
    1820:	0f 92       	push	r0
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	0f 92       	push	r0
    1826:	11 24       	eor	r1, r1
    1828:	2f 93       	push	r18
    182a:	3f 93       	push	r19
    182c:	4f 93       	push	r20
    182e:	5f 93       	push	r21
    1830:	6f 93       	push	r22
    1832:	7f 93       	push	r23
    1834:	8f 93       	push	r24
    1836:	9f 93       	push	r25
    1838:	af 93       	push	r26
    183a:	bf 93       	push	r27
    183c:	ef 93       	push	r30
    183e:	ff 93       	push	r31
    1840:	55 dd       	rcall	.-1366   	; 0x12ec <__vector_25>
    1842:	ff 91       	pop	r31
    1844:	ef 91       	pop	r30
    1846:	bf 91       	pop	r27
    1848:	af 91       	pop	r26
    184a:	9f 91       	pop	r25
    184c:	8f 91       	pop	r24
    184e:	7f 91       	pop	r23
    1850:	6f 91       	pop	r22
    1852:	5f 91       	pop	r21
    1854:	4f 91       	pop	r20
    1856:	3f 91       	pop	r19
    1858:	2f 91       	pop	r18
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f 90       	pop	r0
    1860:	1f 90       	pop	r1
    1862:	18 95       	reti

00001864 <cpu_irq_save>:
}

void lcd_enable(uint8_t on)
{
	if (!on) {
		lcd_bus_write_cmd(0b10101110);									// Disable DC[2] (Display)
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	1f 92       	push	r1
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	8f b7       	in	r24, 0x3f	; 63
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	f8 94       	cli
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	0f 90       	pop	r0
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	08 95       	ret

0000187e <__portable_avr_delay_cycles>:
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <__portable_avr_delay_cycles+0xa>
    1880:	61 50       	subi	r22, 0x01	; 1
    1882:	71 09       	sbc	r23, r1
    1884:	81 09       	sbc	r24, r1
    1886:	91 09       	sbc	r25, r1
    1888:	61 15       	cp	r22, r1
    188a:	71 05       	cpc	r23, r1
    188c:	81 05       	cpc	r24, r1
    188e:	91 05       	cpc	r25, r1
    1890:	b9 f7       	brne	.-18     	; 0x1880 <__portable_avr_delay_cycles+0x2>
    1892:	08 95       	ret

00001894 <lcd_bus_read_status>:
    1894:	e7 df       	rcall	.-50     	; 0x1864 <cpu_irq_save>
    1896:	98 2f       	mov	r25, r24
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	8b b9       	out	0x0b, r24	; 11
    189c:	1a b8       	out	0x0a, r1	; 10
    189e:	28 98       	cbi	0x05, 0	; 5
    18a0:	2c 9a       	sbi	0x05, 4	; 5
    18a2:	2d 9a       	sbi	0x05, 5	; 5
    18a4:	2d 98       	cbi	0x05, 5	; 5
    18a6:	89 b1       	in	r24, 0x09	; 9
    18a8:	9f bf       	out	0x3f, r25	; 63
    18aa:	08 95       	ret

000018ac <lcd_bus_write_cmd>:
    18ac:	cf 93       	push	r28
    18ae:	c8 2f       	mov	r28, r24
    18b0:	d9 df       	rcall	.-78     	; 0x1864 <cpu_irq_save>
    18b2:	cb b9       	out	0x0b, r28	; 11
    18b4:	9f ef       	ldi	r25, 0xFF	; 255
    18b6:	9a b9       	out	0x0a, r25	; 10
    18b8:	28 98       	cbi	0x05, 0	; 5
    18ba:	2c 98       	cbi	0x05, 4	; 5
    18bc:	2d 9a       	sbi	0x05, 5	; 5
    18be:	2d 98       	cbi	0x05, 5	; 5
    18c0:	8f bf       	out	0x3f, r24	; 63
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <lcd_bus_write_ram>:
    18c6:	cf 93       	push	r28
    18c8:	c8 2f       	mov	r28, r24
    18ca:	cc df       	rcall	.-104    	; 0x1864 <cpu_irq_save>
    18cc:	cb b9       	out	0x0b, r28	; 11
    18ce:	9f ef       	ldi	r25, 0xFF	; 255
    18d0:	9a b9       	out	0x0a, r25	; 10
    18d2:	28 9a       	sbi	0x05, 0	; 5
    18d4:	2c 98       	cbi	0x05, 4	; 5
    18d6:	2d 9a       	sbi	0x05, 5	; 5
    18d8:	2d 98       	cbi	0x05, 5	; 5
    18da:	8f bf       	out	0x3f, r24	; 63
    18dc:	cf 91       	pop	r28
    18de:	08 95       	ret

000018e0 <lcd_bus_read_ram>:
    18e0:	c1 df       	rcall	.-126    	; 0x1864 <cpu_irq_save>
    18e2:	98 2f       	mov	r25, r24
    18e4:	8f ef       	ldi	r24, 0xFF	; 255
    18e6:	8b b9       	out	0x0b, r24	; 11
    18e8:	1a b8       	out	0x0a, r1	; 10
    18ea:	28 9a       	sbi	0x05, 0	; 5
    18ec:	2c 9a       	sbi	0x05, 4	; 5
    18ee:	2d 9a       	sbi	0x05, 5	; 5
    18f0:	2d 98       	cbi	0x05, 5	; 5
    18f2:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <s_lcd_ram_read_nonvalid>
    18f6:	88 23       	and	r24, r24
    18f8:	19 f0       	breq	.+6      	; 0x1900 <lcd_bus_read_ram+0x20>
    18fa:	89 b1       	in	r24, 0x09	; 9
    18fc:	2d 9a       	sbi	0x05, 5	; 5
    18fe:	2d 98       	cbi	0x05, 5	; 5
    1900:	89 b1       	in	r24, 0x09	; 9
    1902:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <s_lcd_ram_read_nonvalid>
    1906:	9f bf       	out	0x3f, r25	; 63
    1908:	08 95       	ret

0000190a <lcd_contrast_update>:
    190a:	81 e8       	ldi	r24, 0x81	; 129
    190c:	cf df       	rcall	.-98     	; 0x18ac <lcd_bus_write_cmd>
    190e:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <g_lcd_contrast_pm>
    1912:	8f 73       	andi	r24, 0x3F	; 63
    1914:	80 68       	ori	r24, 0x80	; 128
    1916:	ca cf       	rjmp	.-108    	; 0x18ac <lcd_bus_write_cmd>

00001918 <lcd_enable.part.0>:
    1918:	8d e2       	ldi	r24, 0x2D	; 45
    191a:	c8 df       	rcall	.-112    	; 0x18ac <lcd_bus_write_cmd>
    191c:	84 e2       	ldi	r24, 0x24	; 36
    191e:	c6 df       	rcall	.-116    	; 0x18ac <lcd_bus_write_cmd>
    1920:	8a ee       	ldi	r24, 0xEA	; 234
    1922:	c4 df       	rcall	.-120    	; 0x18ac <lcd_bus_write_cmd>
    1924:	f2 df       	rcall	.-28     	; 0x190a <lcd_contrast_update>
    1926:	88 ec       	ldi	r24, 0xC8	; 200
    1928:	c1 df       	rcall	.-126    	; 0x18ac <lcd_bus_write_cmd>
    192a:	88 e8       	ldi	r24, 0x88	; 136
    192c:	bf df       	rcall	.-130    	; 0x18ac <lcd_bus_write_cmd>
    192e:	80 e4       	ldi	r24, 0x40	; 64
    1930:	bd df       	rcall	.-134    	; 0x18ac <lcd_bus_write_cmd>
    1932:	80 e9       	ldi	r24, 0x90	; 144
    1934:	bb df       	rcall	.-138    	; 0x18ac <lcd_bus_write_cmd>
    1936:	80 eb       	ldi	r24, 0xB0	; 176
    1938:	b9 df       	rcall	.-142    	; 0x18ac <lcd_bus_write_cmd>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	b7 df       	rcall	.-146    	; 0x18ac <lcd_bus_write_cmd>
    193e:	80 e1       	ldi	r24, 0x10	; 16
    1940:	b5 df       	rcall	.-150    	; 0x18ac <lcd_bus_write_cmd>
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <s_lcd_ram_read_nonvalid>
    1948:	8f ee       	ldi	r24, 0xEF	; 239
    194a:	b0 df       	rcall	.-160    	; 0x18ac <lcd_bus_write_cmd>
    194c:	8e ee       	ldi	r24, 0xEE	; 238
    194e:	ae df       	rcall	.-164    	; 0x18ac <lcd_bus_write_cmd>
    1950:	84 ea       	ldi	r24, 0xA4	; 164
    1952:	ac df       	rcall	.-168    	; 0x18ac <lcd_bus_write_cmd>
    1954:	86 ea       	ldi	r24, 0xA6	; 166
    1956:	aa df       	rcall	.-172    	; 0x18ac <lcd_bus_write_cmd>
    1958:	8f ea       	ldi	r24, 0xAF	; 175
    195a:	a8 cf       	rjmp	.-176    	; 0x18ac <lcd_bus_write_cmd>

0000195c <lcd_page_set>:
	}
}

void lcd_page_set(uint8_t page)
{
	if ((0 <= page) && (page < GFX_MONO_LCD_PAGES)) {
    195c:	80 31       	cpi	r24, 0x10	; 16
    195e:	28 f4       	brcc	.+10     	; 0x196a <lcd_page_set+0xe>
		lcd_bus_write_cmd(0b10110000 | page);					// Set Page Address
    1960:	80 6b       	ori	r24, 0xB0	; 176
    1962:	a4 df       	rcall	.-184    	; 0x18ac <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <s_lcd_ram_read_nonvalid>
    196a:	08 95       	ret

0000196c <lcd_col_set>:
// hold a copy of a font size in the PROG memory section
SYSFONT_DEFINE_GLYPHS;


uint8_t lcd_bus_read_status(void)
{
    196c:	cf 93       	push	r28
    196e:	80 3f       	cpi	r24, 0xF0	; 240
    1970:	58 f4       	brcc	.+22     	; 0x1988 <lcd_col_set+0x1c>
    1972:	c8 2f       	mov	r28, r24
    1974:	8f 70       	andi	r24, 0x0F	; 15
    1976:	9a df       	rcall	.-204    	; 0x18ac <lcd_bus_write_cmd>
    1978:	8c 2f       	mov	r24, r28
    197a:	82 95       	swap	r24
    197c:	8f 70       	andi	r24, 0x0F	; 15
    197e:	80 61       	ori	r24, 0x10	; 16
    1980:	95 df       	rcall	.-214    	; 0x18ac <lcd_bus_write_cmd>
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <s_lcd_ram_read_nonvalid>
    1988:	cf 91       	pop	r28
    198a:	08 95       	ret

0000198c <lcd_cr>:
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	8e df       	rcall	.-228    	; 0x18ac <lcd_bus_write_cmd>
    1990:	80 e1       	ldi	r24, 0x10	; 16
    1992:	8c df       	rcall	.-232    	; 0x18ac <lcd_bus_write_cmd>
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <s_lcd_ram_read_nonvalid>
    199a:	08 95       	ret

0000199c <lcd_home>:
    199c:	80 eb       	ldi	r24, 0xB0	; 176
    199e:	86 df       	rcall	.-244    	; 0x18ac <lcd_bus_write_cmd>
    19a0:	f5 cf       	rjmp	.-22     	; 0x198c <lcd_cr>

000019a2 <lcd_cls>:
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	c0 e0       	ldi	r28, 0x00	; 0
    19a8:	8c 2f       	mov	r24, r28
    19aa:	80 6b       	ori	r24, 0xB0	; 176
    19ac:	7f df       	rcall	.-258    	; 0x18ac <lcd_bus_write_cmd>
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	7d df       	rcall	.-262    	; 0x18ac <lcd_bus_write_cmd>
    19b2:	80 e1       	ldi	r24, 0x10	; 16
    19b4:	7b df       	rcall	.-266    	; 0x18ac <lcd_bus_write_cmd>
    19b6:	d0 ef       	ldi	r29, 0xF0	; 240
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	85 df       	rcall	.-246    	; 0x18c6 <lcd_bus_write_ram>
    19bc:	d1 50       	subi	r29, 0x01	; 1
    19be:	e1 f7       	brne	.-8      	; 0x19b8 <lcd_cls+0x16>
    19c0:	cf 5f       	subi	r28, 0xFF	; 255
    19c2:	c0 31       	cpi	r28, 0x10	; 16
    19c4:	89 f7       	brne	.-30     	; 0x19a8 <lcd_cls+0x6>
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	e8 cf       	rjmp	.-48     	; 0x199c <lcd_home>

000019cc <lcd_write>:
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	a1 f0       	breq	.+40     	; 0x1a00 <lcd_write+0x34>
    19d8:	04 2f       	mov	r16, r20
    19da:	16 2f       	mov	r17, r22
    19dc:	ec 01       	movw	r28, r24
    19de:	6f ef       	ldi	r22, 0xFF	; 255
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	0e 94 72 21 	call	0x42e4	; 0x42e4 <strnlen>
    19e6:	81 50       	subi	r24, 0x01	; 1
    19e8:	8e 3f       	cpi	r24, 0xFE	; 254
    19ea:	50 f4       	brcc	.+20     	; 0x1a00 <lcd_write+0x34>
    19ec:	23 e0       	ldi	r18, 0x03	; 3
    19ee:	31 e0       	ldi	r19, 0x01	; 1
    19f0:	40 2f       	mov	r20, r16
    19f2:	61 2f       	mov	r22, r17
    19f4:	ce 01       	movw	r24, r28
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	14 ca       	rjmp	.-3032   	; 0xe28 <gfx_mono_draw_string>
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	08 95       	ret

00001a0a <lcd_show_template>:
    1a0a:	ff 92       	push	r15
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	6a e0       	ldi	r22, 0x0A	; 10
    1a16:	71 e0       	ldi	r23, 0x01	; 1
    1a18:	8f ed       	ldi	r24, 0xDF	; 223
    1a1a:	93 e0       	ldi	r25, 0x03	; 3
    1a1c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <strcpy>
    1a20:	23 e0       	ldi	r18, 0x03	; 3
    1a22:	31 e0       	ldi	r19, 0x01	; 1
    1a24:	4b e0       	ldi	r20, 0x0B	; 11
    1a26:	63 e0       	ldi	r22, 0x03	; 3
    1a28:	8f ed       	ldi	r24, 0xDF	; 223
    1a2a:	93 e0       	ldi	r25, 0x03	; 3
    1a2c:	fd d9       	rcall	.-3078   	; 0xe28 <gfx_mono_draw_string>
    1a2e:	67 e1       	ldi	r22, 0x17	; 23
    1a30:	71 e0       	ldi	r23, 0x01	; 1
    1a32:	8f ed       	ldi	r24, 0xDF	; 223
    1a34:	93 e0       	ldi	r25, 0x03	; 3
    1a36:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <strcpy>
    1a3a:	23 e0       	ldi	r18, 0x03	; 3
    1a3c:	31 e0       	ldi	r19, 0x01	; 1
    1a3e:	44 e1       	ldi	r20, 0x14	; 20
    1a40:	63 e0       	ldi	r22, 0x03	; 3
    1a42:	8f ed       	ldi	r24, 0xDF	; 223
    1a44:	93 e0       	ldi	r25, 0x03	; 3
    1a46:	f0 d9       	rcall	.-3104   	; 0xe28 <gfx_mono_draw_string>
    1a48:	61 e2       	ldi	r22, 0x21	; 33
    1a4a:	71 e0       	ldi	r23, 0x01	; 1
    1a4c:	8f ed       	ldi	r24, 0xDF	; 223
    1a4e:	93 e0       	ldi	r25, 0x03	; 3
    1a50:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <strcpy>
    1a54:	23 e0       	ldi	r18, 0x03	; 3
    1a56:	31 e0       	ldi	r19, 0x01	; 1
    1a58:	4d e1       	ldi	r20, 0x1D	; 29
    1a5a:	63 e0       	ldi	r22, 0x03	; 3
    1a5c:	8f ed       	ldi	r24, 0xDF	; 223
    1a5e:	93 e0       	ldi	r25, 0x03	; 3
    1a60:	e3 d9       	rcall	.-3130   	; 0xe28 <gfx_mono_draw_string>
    1a62:	1f 92       	push	r1
    1a64:	1f 92       	push	r1
    1a66:	1f 92       	push	r1
    1a68:	1f 92       	push	r1
    1a6a:	88 e3       	ldi	r24, 0x38	; 56
    1a6c:	91 e0       	ldi	r25, 0x01	; 1
    1a6e:	9f 93       	push	r25
    1a70:	8f 93       	push	r24
    1a72:	1f 92       	push	r1
    1a74:	10 e3       	ldi	r17, 0x30	; 48
    1a76:	1f 93       	push	r17
    1a78:	cf ed       	ldi	r28, 0xDF	; 223
    1a7a:	d3 e0       	ldi	r29, 0x03	; 3
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    1a84:	23 e0       	ldi	r18, 0x03	; 3
    1a86:	31 e0       	ldi	r19, 0x01	; 1
    1a88:	46 e2       	ldi	r20, 0x26	; 38
    1a8a:	63 e0       	ldi	r22, 0x03	; 3
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	cc d9       	rcall	.-3176   	; 0xe28 <gfx_mono_draw_string>
    1a90:	1f 92       	push	r1
    1a92:	1f 92       	push	r1
    1a94:	1f 92       	push	r1
    1a96:	1f 92       	push	r1
    1a98:	1f 92       	push	r1
    1a9a:	1f 92       	push	r1
    1a9c:	1f 92       	push	r1
    1a9e:	1f 92       	push	r1
    1aa0:	80 e5       	ldi	r24, 0x50	; 80
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	9f 93       	push	r25
    1aa6:	8f 93       	push	r24
    1aa8:	1f 92       	push	r1
    1aaa:	1f 93       	push	r17
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    1ab4:	23 e0       	ldi	r18, 0x03	; 3
    1ab6:	31 e0       	ldi	r19, 0x01	; 1
    1ab8:	4f e2       	ldi	r20, 0x2F	; 47
    1aba:	63 e0       	ldi	r22, 0x03	; 3
    1abc:	ce 01       	movw	r24, r28
    1abe:	b4 d9       	rcall	.-3224   	; 0xe28 <gfx_mono_draw_string>
    1ac0:	1f 92       	push	r1
    1ac2:	1f 92       	push	r1
    1ac4:	1f 92       	push	r1
    1ac6:	1f 92       	push	r1
    1ac8:	83 e7       	ldi	r24, 0x73	; 115
    1aca:	91 e0       	ldi	r25, 0x01	; 1
    1acc:	9f 93       	push	r25
    1ace:	8f 93       	push	r24
    1ad0:	1f 92       	push	r1
    1ad2:	1f 93       	push	r17
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    1adc:	8d b7       	in	r24, 0x3d	; 61
    1ade:	9e b7       	in	r25, 0x3e	; 62
    1ae0:	82 96       	adiw	r24, 0x22	; 34
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	9e bf       	out	0x3e, r25	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	8d bf       	out	0x3d, r24	; 61
    1aec:	23 e0       	ldi	r18, 0x03	; 3
    1aee:	31 e0       	ldi	r19, 0x01	; 1
    1af0:	48 e3       	ldi	r20, 0x38	; 56
    1af2:	63 e0       	ldi	r22, 0x03	; 3
    1af4:	ce 01       	movw	r24, r28
    1af6:	98 d9       	rcall	.-3280   	; 0xe28 <gfx_mono_draw_string>
    1af8:	1f 92       	push	r1
    1afa:	1f 92       	push	r1
    1afc:	1f 92       	push	r1
    1afe:	1f 92       	push	r1
    1b00:	88 e8       	ldi	r24, 0x88	; 136
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	9f 93       	push	r25
    1b06:	8f 93       	push	r24
    1b08:	1f 92       	push	r1
    1b0a:	1f 93       	push	r17
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    1b14:	23 e0       	ldi	r18, 0x03	; 3
    1b16:	31 e0       	ldi	r19, 0x01	; 1
    1b18:	48 e3       	ldi	r20, 0x38	; 56
    1b1a:	6b e7       	ldi	r22, 0x7B	; 123
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	84 d9       	rcall	.-3320   	; 0xe28 <gfx_mono_draw_string>
    1b20:	1f 92       	push	r1
    1b22:	1f 92       	push	r1
    1b24:	1f 92       	push	r1
    1b26:	1f 92       	push	r1
    1b28:	1f 92       	push	r1
    1b2a:	1f 92       	push	r1
    1b2c:	8e e9       	ldi	r24, 0x9E	; 158
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	9f 93       	push	r25
    1b32:	8f 93       	push	r24
    1b34:	1f 92       	push	r1
    1b36:	1f 93       	push	r17
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    1b40:	23 e0       	ldi	r18, 0x03	; 3
    1b42:	31 e0       	ldi	r19, 0x01	; 1
    1b44:	41 e4       	ldi	r20, 0x41	; 65
    1b46:	63 e0       	ldi	r22, 0x03	; 3
    1b48:	ce 01       	movw	r24, r28
    1b4a:	6e d9       	rcall	.-3364   	; 0xe28 <gfx_mono_draw_string>
    1b4c:	1f 92       	push	r1
    1b4e:	1f 92       	push	r1
    1b50:	1f 92       	push	r1
    1b52:	1f 92       	push	r1
    1b54:	8b ec       	ldi	r24, 0xCB	; 203
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	9f 93       	push	r25
    1b5a:	8f 93       	push	r24
    1b5c:	1f 92       	push	r1
    1b5e:	1f 93       	push	r17
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    1b68:	8d b7       	in	r24, 0x3d	; 61
    1b6a:	9e b7       	in	r25, 0x3e	; 62
    1b6c:	80 96       	adiw	r24, 0x20	; 32
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	9e bf       	out	0x3e, r25	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	8d bf       	out	0x3d, r24	; 61
    1b78:	23 e0       	ldi	r18, 0x03	; 3
    1b7a:	31 e0       	ldi	r19, 0x01	; 1
    1b7c:	4a e4       	ldi	r20, 0x4A	; 74
    1b7e:	63 e0       	ldi	r22, 0x03	; 3
    1b80:	ce 01       	movw	r24, r28
    1b82:	52 d9       	rcall	.-3420   	; 0xe28 <gfx_mono_draw_string>
    1b84:	1f 92       	push	r1
    1b86:	1f 92       	push	r1
    1b88:	1f 92       	push	r1
    1b8a:	1f 92       	push	r1
    1b8c:	8f ed       	ldi	r24, 0xDF	; 223
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	9f 93       	push	r25
    1b92:	8f 93       	push	r24
    1b94:	1f 92       	push	r1
    1b96:	1f 93       	push	r17
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    1ba0:	23 e0       	ldi	r18, 0x03	; 3
    1ba2:	31 e0       	ldi	r19, 0x01	; 1
    1ba4:	43 e5       	ldi	r20, 0x53	; 83
    1ba6:	63 e0       	ldi	r22, 0x03	; 3
    1ba8:	ce 01       	movw	r24, r28
    1baa:	3e d9       	rcall	.-3460   	; 0xe28 <gfx_mono_draw_string>
    1bac:	1f 92       	push	r1
    1bae:	1f 92       	push	r1
    1bb0:	1f 92       	push	r1
    1bb2:	1f 92       	push	r1
    1bb4:	1f 92       	push	r1
    1bb6:	0e e7       	ldi	r16, 0x7E	; 126
    1bb8:	0f 93       	push	r16
    1bba:	1f 92       	push	r1
    1bbc:	1f 92       	push	r1
    1bbe:	1f 92       	push	r1
    1bc0:	80 e2       	ldi	r24, 0x20	; 32
    1bc2:	f8 2e       	mov	r15, r24
    1bc4:	ff 92       	push	r15
    1bc6:	87 ef       	ldi	r24, 0xF7	; 247
    1bc8:	91 e0       	ldi	r25, 0x01	; 1
    1bca:	9f 93       	push	r25
    1bcc:	8f 93       	push	r24
    1bce:	1f 92       	push	r1
    1bd0:	1f 93       	push	r17
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    1bda:	23 e0       	ldi	r18, 0x03	; 3
    1bdc:	31 e0       	ldi	r19, 0x01	; 1
    1bde:	4c e5       	ldi	r20, 0x5C	; 92
    1be0:	63 e0       	ldi	r22, 0x03	; 3
    1be2:	ce 01       	movw	r24, r28
    1be4:	21 d9       	rcall	.-3518   	; 0xe28 <gfx_mono_draw_string>
    1be6:	1f 92       	push	r1
    1be8:	1f 92       	push	r1
    1bea:	1f 92       	push	r1
    1bec:	1f 92       	push	r1
    1bee:	1f 92       	push	r1
    1bf0:	0f 93       	push	r16
    1bf2:	1f 92       	push	r1
    1bf4:	1f 92       	push	r1
    1bf6:	1f 92       	push	r1
    1bf8:	ff 92       	push	r15
    1bfa:	86 e1       	ldi	r24, 0x16	; 22
    1bfc:	92 e0       	ldi	r25, 0x02	; 2
    1bfe:	9f 93       	push	r25
    1c00:	8f 93       	push	r24
    1c02:	1f 92       	push	r1
    1c04:	1f 93       	push	r17
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    1c0e:	8d b7       	in	r24, 0x3d	; 61
    1c10:	9e b7       	in	r25, 0x3e	; 62
    1c12:	8a 96       	adiw	r24, 0x2a	; 42
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	9e bf       	out	0x3e, r25	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	8d bf       	out	0x3d, r24	; 61
    1c1e:	23 e0       	ldi	r18, 0x03	; 3
    1c20:	31 e0       	ldi	r19, 0x01	; 1
    1c22:	45 e6       	ldi	r20, 0x65	; 101
    1c24:	63 e0       	ldi	r22, 0x03	; 3
    1c26:	ce 01       	movw	r24, r28
    1c28:	ff d8       	rcall	.-3586   	; 0xe28 <gfx_mono_draw_string>
    1c2a:	1f 92       	push	r1
    1c2c:	1f 92       	push	r1
    1c2e:	1f 92       	push	r1
    1c30:	1f 92       	push	r1
    1c32:	84 e3       	ldi	r24, 0x34	; 52
    1c34:	92 e0       	ldi	r25, 0x02	; 2
    1c36:	9f 93       	push	r25
    1c38:	8f 93       	push	r24
    1c3a:	1f 92       	push	r1
    1c3c:	1f 93       	push	r17
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    1c46:	23 e0       	ldi	r18, 0x03	; 3
    1c48:	31 e0       	ldi	r19, 0x01	; 1
    1c4a:	4e e6       	ldi	r20, 0x6E	; 110
    1c4c:	63 e0       	ldi	r22, 0x03	; 3
    1c4e:	ce 01       	movw	r24, r28
    1c50:	eb d8       	rcall	.-3626   	; 0xe28 <gfx_mono_draw_string>
    1c52:	1f 92       	push	r1
    1c54:	0f 93       	push	r16
    1c56:	1f 92       	push	r1
    1c58:	1f 92       	push	r1
    1c5a:	8a e4       	ldi	r24, 0x4A	; 74
    1c5c:	92 e0       	ldi	r25, 0x02	; 2
    1c5e:	9f 93       	push	r25
    1c60:	8f 93       	push	r24
    1c62:	1f 92       	push	r1
    1c64:	1f 93       	push	r17
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    1c6e:	23 e0       	ldi	r18, 0x03	; 3
    1c70:	31 e0       	ldi	r19, 0x01	; 1
    1c72:	4e e6       	ldi	r20, 0x6E	; 110
    1c74:	6f e9       	ldi	r22, 0x9F	; 159
    1c76:	ce 01       	movw	r24, r28
    1c78:	d7 d8       	rcall	.-3666   	; 0xe28 <gfx_mono_draw_string>
    1c7a:	8d b7       	in	r24, 0x3d	; 61
    1c7c:	9e b7       	in	r25, 0x3e	; 62
    1c7e:	44 96       	adiw	r24, 0x14	; 20
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	9e bf       	out	0x3e, r25	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	8d bf       	out	0x3d, r24	; 61
    1c8a:	23 e0       	ldi	r18, 0x03	; 3
    1c8c:	31 e0       	ldi	r19, 0x01	; 1
    1c8e:	47 e7       	ldi	r20, 0x77	; 119
    1c90:	63 e0       	ldi	r22, 0x03	; 3
    1c92:	89 e5       	ldi	r24, 0x59	; 89
    1c94:	92 e0       	ldi	r25, 0x02	; 2
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	c3 c8       	rjmp	.-3706   	; 0xe28 <gfx_mono_draw_string>

00001ca2 <lcd_show_new_smartlcd_data>:
    1ca2:	df 92       	push	r13
    1ca4:	ef 92       	push	r14
    1ca6:	ff 92       	push	r15
    1ca8:	0f 93       	push	r16
    1caa:	1f 93       	push	r17
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	28 97       	sbiw	r28, 0x08	; 8
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	d1 dd       	rcall	.-1118   	; 0x1864 <cpu_irq_save>
    1cc2:	f8 2e       	mov	r15, r24
    1cc4:	10 91 38 04 	lds	r17, 0x0438	; 0x800438 <g_showData+0x2>
    1cc8:	12 33       	cpi	r17, 0x32	; 50
    1cca:	09 f4       	brne	.+2      	; 0x1cce <lcd_show_new_smartlcd_data+0x2c>
    1ccc:	74 c0       	rjmp	.+232    	; 0x1db6 <lcd_show_new_smartlcd_data+0x114>
    1cce:	d8 f4       	brcc	.+54     	; 0x1d06 <lcd_show_new_smartlcd_data+0x64>
    1cd0:	14 31       	cpi	r17, 0x14	; 20
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <lcd_show_new_smartlcd_data+0x34>
    1cd4:	46 c0       	rjmp	.+140    	; 0x1d62 <lcd_show_new_smartlcd_data+0xc0>
    1cd6:	48 f4       	brcc	.+18     	; 0x1cea <lcd_show_new_smartlcd_data+0x48>
    1cd8:	10 31       	cpi	r17, 0x10	; 16
    1cda:	09 f0       	breq	.+2      	; 0x1cde <lcd_show_new_smartlcd_data+0x3c>
    1cdc:	a7 c0       	rjmp	.+334    	; 0x1e2c <lcd_show_new_smartlcd_data+0x18a>
    1cde:	40 d8       	rcall	.-3968   	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1ce0:	60 de       	rcall	.-832    	; 0x19a2 <lcd_cls>
    1ce2:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <g_showData+0x2>
    1ce6:	ff be       	out	0x3f, r15	; 63
    1ce8:	a3 c0       	rjmp	.+326    	; 0x1e30 <lcd_show_new_smartlcd_data+0x18e>
    1cea:	10 32       	cpi	r17, 0x20	; 32
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <lcd_show_new_smartlcd_data+0x4e>
    1cee:	41 c0       	rjmp	.+130    	; 0x1d72 <lcd_show_new_smartlcd_data+0xd0>
    1cf0:	10 33       	cpi	r17, 0x30	; 48
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <lcd_show_new_smartlcd_data+0x54>
    1cf4:	9b c0       	rjmp	.+310    	; 0x1e2c <lcd_show_new_smartlcd_data+0x18a>
    1cf6:	20 91 39 04 	lds	r18, 0x0439	; 0x800439 <g_showData+0x3>
    1cfa:	aa e3       	ldi	r26, 0x3A	; 58
    1cfc:	b4 e0       	ldi	r27, 0x04	; 4
    1cfe:	ce 01       	movw	r24, r28
    1d00:	01 96       	adiw	r24, 0x01	; 1
    1d02:	fc 01       	movw	r30, r24
    1d04:	42 c0       	rjmp	.+132    	; 0x1d8a <lcd_show_new_smartlcd_data+0xe8>
    1d06:	16 33       	cpi	r17, 0x36	; 54
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <lcd_show_new_smartlcd_data+0x6a>
    1d0a:	6d c0       	rjmp	.+218    	; 0x1de6 <lcd_show_new_smartlcd_data+0x144>
    1d0c:	a0 f4       	brcc	.+40     	; 0x1d36 <lcd_show_new_smartlcd_data+0x94>
    1d0e:	14 33       	cpi	r17, 0x34	; 52
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <lcd_show_new_smartlcd_data+0x72>
    1d12:	8c c0       	rjmp	.+280    	; 0x1e2c <lcd_show_new_smartlcd_data+0x18a>
    1d14:	00 91 49 04 	lds	r16, 0x0449	; 0x800449 <g_showData+0x13>
    1d18:	20 91 3a 04 	lds	r18, 0x043A	; 0x80043a <g_showData+0x4>
    1d1c:	40 91 39 04 	lds	r20, 0x0439	; 0x800439 <g_showData+0x3>
    1d20:	60 91 4b 04 	lds	r22, 0x044B	; 0x80044b <g_showData+0x15>
    1d24:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <g_showData+0x14>
    1d28:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_rect>
    1d2c:	19 d8       	rcall	.-4046   	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1d2e:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <g_showData+0x2>
    1d32:	ff be       	out	0x3f, r15	; 63
    1d34:	7d c0       	rjmp	.+250    	; 0x1e30 <lcd_show_new_smartlcd_data+0x18e>
    1d36:	18 33       	cpi	r17, 0x38	; 56
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <lcd_show_new_smartlcd_data+0x9a>
    1d3a:	67 c0       	rjmp	.+206    	; 0x1e0a <lcd_show_new_smartlcd_data+0x168>
    1d3c:	1a 33       	cpi	r17, 0x3A	; 58
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <lcd_show_new_smartlcd_data+0xa0>
    1d40:	75 c0       	rjmp	.+234    	; 0x1e2c <lcd_show_new_smartlcd_data+0x18a>
    1d42:	0f ef       	ldi	r16, 0xFF	; 255
    1d44:	20 91 49 04 	lds	r18, 0x0449	; 0x800449 <g_showData+0x13>
    1d48:	40 91 39 04 	lds	r20, 0x0439	; 0x800439 <g_showData+0x3>
    1d4c:	60 91 4b 04 	lds	r22, 0x044B	; 0x80044b <g_showData+0x15>
    1d50:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <g_showData+0x14>
    1d54:	0e 94 5a 05 	call	0xab4	; 0xab4 <gfx_mono_generic_draw_filled_circle>
    1d58:	03 d8       	rcall	.-4090   	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1d5a:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <g_showData+0x2>
    1d5e:	ff be       	out	0x3f, r15	; 63
    1d60:	67 c0       	rjmp	.+206    	; 0x1e30 <lcd_show_new_smartlcd_data+0x18e>
    1d62:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <g_showData+0x3>
    1d66:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <g_showData+0x13>
    1d6a:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <g_showData+0x2>
    1d6e:	ff be       	out	0x3f, r15	; 63
    1d70:	5f c0       	rjmp	.+190    	; 0x1e30 <lcd_show_new_smartlcd_data+0x18e>
    1d72:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <g_showData+0x3>
    1d76:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <g_showData+0x14>
    1d7a:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <g_showData+0x4>
    1d7e:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <g_showData+0x15>
    1d82:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <g_showData+0x2>
    1d86:	ff be       	out	0x3f, r15	; 63
    1d88:	53 c0       	rjmp	.+166    	; 0x1e30 <lcd_show_new_smartlcd_data+0x18e>
    1d8a:	3e 2f       	mov	r19, r30
    1d8c:	38 1b       	sub	r19, r24
    1d8e:	32 17       	cp	r19, r18
    1d90:	18 f4       	brcc	.+6      	; 0x1d98 <lcd_show_new_smartlcd_data+0xf6>
    1d92:	3d 91       	ld	r19, X+
    1d94:	31 93       	st	Z+, r19
    1d96:	f9 cf       	rjmp	.-14     	; 0x1d8a <lcd_show_new_smartlcd_data+0xe8>
    1d98:	fc 01       	movw	r30, r24
    1d9a:	e2 0f       	add	r30, r18
    1d9c:	f1 1d       	adc	r31, r1
    1d9e:	10 82       	st	Z, r1
    1da0:	40 91 4b 04 	lds	r20, 0x044B	; 0x80044b <g_showData+0x15>
    1da4:	60 91 4a 04 	lds	r22, 0x044A	; 0x80044a <g_showData+0x14>
    1da8:	11 de       	rcall	.-990    	; 0x19cc <lcd_write>
    1daa:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1dae:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <g_showData+0x2>
    1db2:	ff be       	out	0x3f, r15	; 63
    1db4:	3d c0       	rjmp	.+122    	; 0x1e30 <lcd_show_new_smartlcd_data+0x18e>
    1db6:	d0 90 39 04 	lds	r13, 0x0439	; 0x800439 <g_showData+0x3>
    1dba:	e0 90 3a 04 	lds	r14, 0x043A	; 0x80043a <g_showData+0x4>
    1dbe:	00 91 49 04 	lds	r16, 0x0449	; 0x800449 <g_showData+0x13>
    1dc2:	2e 2d       	mov	r18, r14
    1dc4:	4d 2d       	mov	r20, r13
    1dc6:	60 91 4b 04 	lds	r22, 0x044B	; 0x80044b <g_showData+0x15>
    1dca:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <g_showData+0x14>
    1dce:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    1dd2:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1dd6:	d0 92 4a 04 	sts	0x044A, r13	; 0x80044a <g_showData+0x14>
    1dda:	e0 92 4b 04 	sts	0x044B, r14	; 0x80044b <g_showData+0x15>
    1dde:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <g_showData+0x2>
    1de2:	ff be       	out	0x3f, r15	; 63
    1de4:	25 c0       	rjmp	.+74     	; 0x1e30 <lcd_show_new_smartlcd_data+0x18e>
    1de6:	00 91 49 04 	lds	r16, 0x0449	; 0x800449 <g_showData+0x13>
    1dea:	20 91 3a 04 	lds	r18, 0x043A	; 0x80043a <g_showData+0x4>
    1dee:	40 91 39 04 	lds	r20, 0x0439	; 0x800439 <g_showData+0x3>
    1df2:	60 91 4b 04 	lds	r22, 0x044B	; 0x80044b <g_showData+0x15>
    1df6:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <g_showData+0x14>
    1dfa:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    1dfe:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1e02:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <g_showData+0x2>
    1e06:	ff be       	out	0x3f, r15	; 63
    1e08:	13 c0       	rjmp	.+38     	; 0x1e30 <lcd_show_new_smartlcd_data+0x18e>
    1e0a:	0f ef       	ldi	r16, 0xFF	; 255
    1e0c:	20 91 49 04 	lds	r18, 0x0449	; 0x800449 <g_showData+0x13>
    1e10:	40 91 39 04 	lds	r20, 0x0439	; 0x800439 <g_showData+0x3>
    1e14:	60 91 4b 04 	lds	r22, 0x044B	; 0x80044b <g_showData+0x15>
    1e18:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <g_showData+0x14>
    1e1c:	0e 94 ac 04 	call	0x958	; 0x958 <gfx_mono_generic_draw_circle>
    1e20:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1e24:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <g_showData+0x2>
    1e28:	ff be       	out	0x3f, r15	; 63
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <lcd_show_new_smartlcd_data+0x18e>
    1e2c:	ff be       	out	0x3f, r15	; 63
    1e2e:	10 e0       	ldi	r17, 0x00	; 0
    1e30:	81 2f       	mov	r24, r17
    1e32:	28 96       	adiw	r28, 0x08	; 8
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	1f 91       	pop	r17
    1e44:	0f 91       	pop	r16
    1e46:	ff 90       	pop	r15
    1e48:	ef 90       	pop	r14
    1e4a:	df 90       	pop	r13
    1e4c:	08 95       	ret

00001e4e <lcd_show_new_refosc_data>:
    1e4e:	3f 92       	push	r3
    1e50:	4f 92       	push	r4
    1e52:	5f 92       	push	r5
    1e54:	6f 92       	push	r6
    1e56:	7f 92       	push	r7
    1e58:	8f 92       	push	r8
    1e5a:	9f 92       	push	r9
    1e5c:	af 92       	push	r10
    1e5e:	bf 92       	push	r11
    1e60:	cf 92       	push	r12
    1e62:	df 92       	push	r13
    1e64:	ef 92       	push	r14
    1e66:	ff 92       	push	r15
    1e68:	0f 93       	push	r16
    1e6a:	1f 93       	push	r17
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	f9 dc       	rcall	.-1550   	; 0x1864 <cpu_irq_save>
    1e72:	c8 2f       	mov	r28, r24
    1e74:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <g_showData>
    1e78:	92 ff       	sbrs	r25, 2
    1e7a:	31 c0       	rjmp	.+98     	; 0x1ede <lcd_show_new_refosc_data+0x90>
    1e7c:	9b 7f       	andi	r25, 0xFB	; 251
    1e7e:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <g_showData>
    1e82:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <g_showData+0x2f>
    1e86:	1f 92       	push	r1
    1e88:	8f 93       	push	r24
    1e8a:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <g_showData+0x2e>
    1e8e:	1f 92       	push	r1
    1e90:	8f 93       	push	r24
    1e92:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <g_showData+0x2d>
    1e96:	1f 92       	push	r1
    1e98:	8f 93       	push	r24
    1e9a:	83 e6       	ldi	r24, 0x63	; 99
    1e9c:	92 e0       	ldi	r25, 0x02	; 2
    1e9e:	9f 93       	push	r25
    1ea0:	8f 93       	push	r24
    1ea2:	1f 92       	push	r1
    1ea4:	80 e3       	ldi	r24, 0x30	; 48
    1ea6:	8f 93       	push	r24
    1ea8:	8f ed       	ldi	r24, 0xDF	; 223
    1eaa:	93 e0       	ldi	r25, 0x03	; 3
    1eac:	9f 93       	push	r25
    1eae:	8f 93       	push	r24
    1eb0:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    1eb4:	cf bf       	out	0x3f, r28	; 63
    1eb6:	23 e0       	ldi	r18, 0x03	; 3
    1eb8:	31 e0       	ldi	r19, 0x01	; 1
    1eba:	4d e1       	ldi	r20, 0x1D	; 29
    1ebc:	6f e3       	ldi	r22, 0x3F	; 63
    1ebe:	8f ed       	ldi	r24, 0xDF	; 223
    1ec0:	93 e0       	ldi	r25, 0x03	; 3
    1ec2:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    1ec6:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1eca:	8d b7       	in	r24, 0x3d	; 61
    1ecc:	9e b7       	in	r25, 0x3e	; 62
    1ece:	0c 96       	adiw	r24, 0x0c	; 12
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	9e bf       	out	0x3e, r25	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	8d bf       	out	0x3d, r24	; 61
    1eda:	8f ef       	ldi	r24, 0xFF	; 255
    1edc:	18 c4       	rjmp	.+2096   	; 0x270e <lcd_show_new_refosc_data+0x8c0>
    1ede:	91 ff       	sbrs	r25, 1
    1ee0:	33 c0       	rjmp	.+102    	; 0x1f48 <lcd_show_new_refosc_data+0xfa>
    1ee2:	9d 7f       	andi	r25, 0xFD	; 253
    1ee4:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <g_showData>
    1ee8:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <g_showData+0x1b>
    1eec:	8f 93       	push	r24
    1eee:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <g_showData+0x1a>
    1ef2:	8f 93       	push	r24
    1ef4:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <g_showData+0x2b>
    1ef8:	1f 92       	push	r1
    1efa:	8f 93       	push	r24
    1efc:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <g_showData+0x2c>
    1f00:	1f 92       	push	r1
    1f02:	8f 93       	push	r24
    1f04:	82 e7       	ldi	r24, 0x72	; 114
    1f06:	92 e0       	ldi	r25, 0x02	; 2
    1f08:	9f 93       	push	r25
    1f0a:	8f 93       	push	r24
    1f0c:	1f 92       	push	r1
    1f0e:	80 e3       	ldi	r24, 0x30	; 48
    1f10:	8f 93       	push	r24
    1f12:	8f ed       	ldi	r24, 0xDF	; 223
    1f14:	93 e0       	ldi	r25, 0x03	; 3
    1f16:	9f 93       	push	r25
    1f18:	8f 93       	push	r24
    1f1a:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    1f1e:	cf bf       	out	0x3f, r28	; 63
    1f20:	23 e0       	ldi	r18, 0x03	; 3
    1f22:	31 e0       	ldi	r19, 0x01	; 1
    1f24:	44 e1       	ldi	r20, 0x14	; 20
    1f26:	6f e3       	ldi	r22, 0x3F	; 63
    1f28:	8f ed       	ldi	r24, 0xDF	; 223
    1f2a:	93 e0       	ldi	r25, 0x03	; 3
    1f2c:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    1f30:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    1f34:	8d b7       	in	r24, 0x3d	; 61
    1f36:	9e b7       	in	r25, 0x3e	; 62
    1f38:	0c 96       	adiw	r24, 0x0c	; 12
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	9e bf       	out	0x3e, r25	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	8d bf       	out	0x3d, r24	; 61
    1f44:	8e ef       	ldi	r24, 0xFE	; 254
    1f46:	e3 c3       	rjmp	.+1990   	; 0x270e <lcd_show_new_refosc_data+0x8c0>
    1f48:	89 2f       	mov	r24, r25
    1f4a:	81 70       	andi	r24, 0x01	; 1
    1f4c:	90 ff       	sbrs	r25, 0
    1f4e:	57 c1       	rjmp	.+686    	; 0x21fe <lcd_show_new_refosc_data+0x3b0>
    1f50:	9e 7f       	andi	r25, 0xFE	; 254
    1f52:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <g_showData>
    1f56:	cf bf       	out	0x3f, r28	; 63
    1f58:	c0 91 4e 04 	lds	r28, 0x044E	; 0x80044e <g_showData+0x18>
    1f5c:	d0 91 4f 04 	lds	r29, 0x044F	; 0x80044f <g_showData+0x19>
    1f60:	a0 90 4c 04 	lds	r10, 0x044C	; 0x80044c <g_showData+0x16>
    1f64:	b0 90 4d 04 	lds	r11, 0x044D	; 0x80044d <g_showData+0x17>
    1f68:	90 90 60 04 	lds	r9, 0x0460	; 0x800460 <g_showData+0x2a>
    1f6c:	c1 35       	cpi	r28, 0x51	; 81
    1f6e:	96 e4       	ldi	r25, 0x46	; 70
    1f70:	d9 07       	cpc	r29, r25
    1f72:	9c f4       	brge	.+38     	; 0x1f9a <lcd_show_new_refosc_data+0x14c>
    1f74:	c0 3b       	cpi	r28, 0xB0	; 176
    1f76:	89 eb       	ldi	r24, 0xB9	; 185
    1f78:	d8 07       	cpc	r29, r24
    1f7a:	2c f0       	brlt	.+10     	; 0x1f86 <lcd_show_new_refosc_data+0x138>
    1f7c:	c5 39       	cpi	r28, 0x95	; 149
    1f7e:	91 e1       	ldi	r25, 0x11	; 17
    1f80:	d9 07       	cpc	r29, r25
    1f82:	1c f0       	brlt	.+6      	; 0x1f8a <lcd_show_new_refosc_data+0x13c>
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <lcd_show_new_refosc_data+0x156>
    1f86:	c0 eb       	ldi	r28, 0xB0	; 176
    1f88:	d9 eb       	ldi	r29, 0xB9	; 185
    1f8a:	be 01       	movw	r22, r28
    1f8c:	cc 36       	cpi	r28, 0x6C	; 108
    1f8e:	8e ee       	ldi	r24, 0xEE	; 238
    1f90:	d8 07       	cpc	r29, r24
    1f92:	54 f4       	brge	.+20     	; 0x1fa8 <lcd_show_new_refosc_data+0x15a>
    1f94:	6c e6       	ldi	r22, 0x6C	; 108
    1f96:	7e ee       	ldi	r23, 0xEE	; 238
    1f98:	07 c0       	rjmp	.+14     	; 0x1fa8 <lcd_show_new_refosc_data+0x15a>
    1f9a:	c0 e5       	ldi	r28, 0x50	; 80
    1f9c:	d6 e4       	ldi	r29, 0x46	; 70
    1f9e:	60 e5       	ldi	r22, 0x50	; 80
    1fa0:	76 e4       	ldi	r23, 0x46	; 70
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <lcd_show_new_refosc_data+0x15a>
    1fa4:	60 e5       	ldi	r22, 0x50	; 80
    1fa6:	76 e4       	ldi	r23, 0x46	; 70
    1fa8:	07 2e       	mov	r0, r23
    1faa:	00 0c       	add	r0, r0
    1fac:	88 0b       	sbc	r24, r24
    1fae:	99 0b       	sbc	r25, r25
    1fb0:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <__floatsisf>
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 ea       	ldi	r19, 0xA0	; 160
    1fb8:	4c e8       	ldi	r20, 0x8C	; 140
    1fba:	55 e4       	ldi	r21, 0x45	; 69
    1fbc:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__divsf3>
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	48 e9       	ldi	r20, 0x98	; 152
    1fc6:	52 e4       	ldi	r21, 0x42	; 66
    1fc8:	0e 94 cf 20 	call	0x419e	; 0x419e <__mulsf3>
    1fcc:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__fixsfsi>
    1fd0:	2b 01       	movw	r4, r22
    1fd2:	3c 01       	movw	r6, r24
    1fd4:	7b 01       	movw	r14, r22
    1fd6:	77 ff       	sbrs	r23, 7
    1fd8:	08 c0       	rjmp	.+16     	; 0x1fea <lcd_show_new_refosc_data+0x19c>
    1fda:	36 e9       	ldi	r19, 0x96	; 150
    1fdc:	83 2e       	mov	r8, r19
    1fde:	86 0e       	add	r8, r22
    1fe0:	cc 24       	eor	r12, r12
    1fe2:	dd 24       	eor	r13, r13
    1fe4:	c6 1a       	sub	r12, r22
    1fe6:	d7 0a       	sbc	r13, r23
    1fe8:	03 c0       	rjmp	.+6      	; 0x1ff0 <lcd_show_new_refosc_data+0x1a2>
    1fea:	6b 01       	movw	r12, r22
    1fec:	26 e9       	ldi	r18, 0x96	; 150
    1fee:	82 2e       	mov	r8, r18
    1ff0:	1f 92       	push	r1
    1ff2:	9f 92       	push	r9
    1ff4:	81 e8       	ldi	r24, 0x81	; 129
    1ff6:	92 e0       	ldi	r25, 0x02	; 2
    1ff8:	9f 93       	push	r25
    1ffa:	8f 93       	push	r24
    1ffc:	1f 92       	push	r1
    1ffe:	90 e3       	ldi	r25, 0x30	; 48
    2000:	39 2e       	mov	r3, r25
    2002:	3f 92       	push	r3
    2004:	0f ed       	ldi	r16, 0xDF	; 223
    2006:	13 e0       	ldi	r17, 0x03	; 3
    2008:	1f 93       	push	r17
    200a:	0f 93       	push	r16
    200c:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    2010:	23 e0       	ldi	r18, 0x03	; 3
    2012:	31 e0       	ldi	r19, 0x01	; 1
    2014:	4b e0       	ldi	r20, 0x0B	; 11
    2016:	6b e4       	ldi	r22, 0x4B	; 75
    2018:	c8 01       	movw	r24, r16
    201a:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    201e:	c5 01       	movw	r24, r10
    2020:	68 ee       	ldi	r22, 0xE8	; 232
    2022:	73 e0       	ldi	r23, 0x03	; 3
    2024:	0e 94 3e 21 	call	0x427c	; 0x427c <__udivmodhi4>
    2028:	9f 93       	push	r25
    202a:	8f 93       	push	r24
    202c:	7f 93       	push	r23
    202e:	6f 93       	push	r22
    2030:	85 e8       	ldi	r24, 0x85	; 133
    2032:	92 e0       	ldi	r25, 0x02	; 2
    2034:	9f 93       	push	r25
    2036:	8f 93       	push	r24
    2038:	1f 92       	push	r1
    203a:	3f 92       	push	r3
    203c:	1f 93       	push	r17
    203e:	0f 93       	push	r16
    2040:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    2044:	23 e0       	ldi	r18, 0x03	; 3
    2046:	31 e0       	ldi	r19, 0x01	; 1
    2048:	48 e3       	ldi	r20, 0x38	; 56
    204a:	6d eb       	ldi	r22, 0xBD	; 189
    204c:	c8 01       	movw	r24, r16
    204e:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2052:	ce 01       	movw	r24, r28
    2054:	64 e6       	ldi	r22, 0x64	; 100
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	0e 94 52 21 	call	0x42a4	; 0x42a4 <__divmodhi4>
    205c:	7f 93       	push	r23
    205e:	6f 93       	push	r22
    2060:	8e e8       	ldi	r24, 0x8E	; 142
    2062:	92 e0       	ldi	r25, 0x02	; 2
    2064:	9f 93       	push	r25
    2066:	8f 93       	push	r24
    2068:	1f 92       	push	r1
    206a:	3f 92       	push	r3
    206c:	1f 93       	push	r17
    206e:	0f 93       	push	r16
    2070:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    2074:	23 e0       	ldi	r18, 0x03	; 3
    2076:	31 e0       	ldi	r19, 0x01	; 1
    2078:	4e e6       	ldi	r20, 0x6E	; 110
    207a:	69 ec       	ldi	r22, 0xC9	; 201
    207c:	c8 01       	movw	r24, r16
    207e:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2082:	8d b7       	in	r24, 0x3d	; 61
    2084:	9e b7       	in	r25, 0x3e	; 62
    2086:	4a 96       	adiw	r24, 0x1a	; 26
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	9e bf       	out	0x3e, r25	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	8d bf       	out	0x3d, r24	; 61
    2092:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <clk_state_old.3384>
    2096:	98 12       	cpse	r9, r24
    2098:	22 c0       	rjmp	.+68     	; 0x20de <lcd_show_new_refosc_data+0x290>
    209a:	c1 14       	cp	r12, r1
    209c:	d1 04       	cpc	r13, r1
    209e:	f9 f0       	breq	.+62     	; 0x20de <lcd_show_new_refosc_data+0x290>
    20a0:	44 2d       	mov	r20, r4
    20a2:	1e 14       	cp	r1, r14
    20a4:	1f 04       	cpc	r1, r15
    20a6:	0c f4       	brge	.+2      	; 0x20aa <lcd_show_new_refosc_data+0x25c>
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	d4 2d       	mov	r29, r4
    20ac:	f7 fc       	sbrc	r15, 7
    20ae:	d0 e0       	ldi	r29, 0x00	; 0
    20b0:	97 e0       	ldi	r25, 0x07	; 7
    20b2:	99 16       	cp	r9, r25
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <lcd_show_new_refosc_data+0x26a>
    20b6:	62 c0       	rjmp	.+196    	; 0x217c <lcd_show_new_refosc_data+0x32e>
    20b8:	99 15       	cp	r25, r9
    20ba:	68 f0       	brcs	.+26     	; 0x20d6 <lcd_show_new_refosc_data+0x288>
    20bc:	8f ef       	ldi	r24, 0xFF	; 255
    20be:	89 0d       	add	r24, r9
    20c0:	83 30       	cpi	r24, 0x03	; 3
    20c2:	08 f0       	brcs	.+2      	; 0x20c6 <lcd_show_new_refosc_data+0x278>
    20c4:	96 c0       	rjmp	.+300    	; 0x21f2 <lcd_show_new_refosc_data+0x3a4>
    20c6:	01 e0       	ldi	r16, 0x01	; 1
    20c8:	21 e0       	ldi	r18, 0x01	; 1
    20ca:	48 e9       	ldi	r20, 0x98	; 152
    20cc:	6a e7       	ldi	r22, 0x7A	; 122
    20ce:	8a e4       	ldi	r24, 0x4A	; 74
    20d0:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    20d4:	8e c0       	rjmp	.+284    	; 0x21f2 <lcd_show_new_refosc_data+0x3a4>
    20d6:	8f e0       	ldi	r24, 0x0F	; 15
    20d8:	98 16       	cp	r9, r24
    20da:	99 f0       	breq	.+38     	; 0x2102 <lcd_show_new_refosc_data+0x2b4>
    20dc:	8a c0       	rjmp	.+276    	; 0x21f2 <lcd_show_new_refosc_data+0x3a4>
    20de:	00 e0       	ldi	r16, 0x00	; 0
    20e0:	25 e0       	ldi	r18, 0x05	; 5
    20e2:	40 ea       	ldi	r20, 0xA0	; 160
    20e4:	68 e7       	ldi	r22, 0x78	; 120
    20e6:	86 e4       	ldi	r24, 0x46	; 70
    20e8:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    20ec:	c1 14       	cp	r12, r1
    20ee:	d1 04       	cpc	r13, r1
    20f0:	b9 f6       	brne	.-82     	; 0x20a0 <lcd_show_new_refosc_data+0x252>
    20f2:	01 e0       	ldi	r16, 0x01	; 1
    20f4:	2c e7       	ldi	r18, 0x7C	; 124
    20f6:	46 e9       	ldi	r20, 0x96	; 150
    20f8:	68 e7       	ldi	r22, 0x78	; 120
    20fa:	86 e9       	ldi	r24, 0x96	; 150
    20fc:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2100:	78 c0       	rjmp	.+240    	; 0x21f2 <lcd_show_new_refosc_data+0x3a4>
    2102:	40 5b       	subi	r20, 0xB0	; 176
    2104:	00 e0       	ldi	r16, 0x00	; 0
    2106:	25 e0       	ldi	r18, 0x05	; 5
    2108:	68 e7       	ldi	r22, 0x78	; 120
    210a:	86 e4       	ldi	r24, 0x46	; 70
    210c:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2110:	f7 fe       	sbrs	r15, 7
    2112:	0f c0       	rjmp	.+30     	; 0x2132 <lcd_show_new_refosc_data+0x2e4>
    2114:	01 e0       	ldi	r16, 0x01	; 1
    2116:	28 e7       	ldi	r18, 0x78	; 120
    2118:	48 2d       	mov	r20, r8
    211a:	6a e7       	ldi	r22, 0x7A	; 122
    211c:	cc ef       	ldi	r28, 0xFC	; 252
    211e:	c8 0d       	add	r28, r8
    2120:	8c 2f       	mov	r24, r28
    2122:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2126:	2c e7       	ldi	r18, 0x7C	; 124
    2128:	48 2d       	mov	r20, r8
    212a:	6a e7       	ldi	r22, 0x7A	; 122
    212c:	8c 2f       	mov	r24, r28
    212e:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2132:	01 e0       	ldi	r16, 0x01	; 1
    2134:	25 e0       	ldi	r18, 0x05	; 5
    2136:	4c 2d       	mov	r20, r12
    2138:	68 e7       	ldi	r22, 0x78	; 120
    213a:	88 2d       	mov	r24, r8
    213c:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2140:	40 e5       	ldi	r20, 0x50	; 80
    2142:	4d 1b       	sub	r20, r29
    2144:	00 e0       	ldi	r16, 0x00	; 0
    2146:	25 e0       	ldi	r18, 0x05	; 5
    2148:	68 e7       	ldi	r22, 0x78	; 120
    214a:	86 e9       	ldi	r24, 0x96	; 150
    214c:	8d 0f       	add	r24, r29
    214e:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2152:	1e 14       	cp	r1, r14
    2154:	1f 04       	cpc	r1, r15
    2156:	0c f0       	brlt	.+2      	; 0x215a <lcd_show_new_refosc_data+0x30c>
    2158:	4c c0       	rjmp	.+152    	; 0x21f2 <lcd_show_new_refosc_data+0x3a4>
    215a:	c5 e9       	ldi	r28, 0x95	; 149
    215c:	cd 0f       	add	r28, r29
    215e:	d7 56       	subi	r29, 0x67	; 103
    2160:	01 e0       	ldi	r16, 0x01	; 1
    2162:	28 e7       	ldi	r18, 0x78	; 120
    2164:	4c 2f       	mov	r20, r28
    2166:	6a e7       	ldi	r22, 0x7A	; 122
    2168:	8d 2f       	mov	r24, r29
    216a:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    216e:	2c e7       	ldi	r18, 0x7C	; 124
    2170:	4c 2f       	mov	r20, r28
    2172:	6a e7       	ldi	r22, 0x7A	; 122
    2174:	8d 2f       	mov	r24, r29
    2176:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    217a:	3b c0       	rjmp	.+118    	; 0x21f2 <lcd_show_new_refosc_data+0x3a4>
    217c:	40 5b       	subi	r20, 0xB0	; 176
    217e:	00 e0       	ldi	r16, 0x00	; 0
    2180:	23 e0       	ldi	r18, 0x03	; 3
    2182:	69 e7       	ldi	r22, 0x79	; 121
    2184:	86 e4       	ldi	r24, 0x46	; 70
    2186:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    218a:	f7 fe       	sbrs	r15, 7
    218c:	0f c0       	rjmp	.+30     	; 0x21ac <lcd_show_new_refosc_data+0x35e>
    218e:	01 e0       	ldi	r16, 0x01	; 1
    2190:	29 e7       	ldi	r18, 0x79	; 121
    2192:	48 2d       	mov	r20, r8
    2194:	6a e7       	ldi	r22, 0x7A	; 122
    2196:	cc ef       	ldi	r28, 0xFC	; 252
    2198:	c8 0d       	add	r28, r8
    219a:	8c 2f       	mov	r24, r28
    219c:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    21a0:	2b e7       	ldi	r18, 0x7B	; 123
    21a2:	48 2d       	mov	r20, r8
    21a4:	6a e7       	ldi	r22, 0x7A	; 122
    21a6:	8c 2f       	mov	r24, r28
    21a8:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    21ac:	01 e0       	ldi	r16, 0x01	; 1
    21ae:	23 e0       	ldi	r18, 0x03	; 3
    21b0:	4c 2d       	mov	r20, r12
    21b2:	69 e7       	ldi	r22, 0x79	; 121
    21b4:	88 2d       	mov	r24, r8
    21b6:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    21ba:	40 e5       	ldi	r20, 0x50	; 80
    21bc:	4d 1b       	sub	r20, r29
    21be:	00 e0       	ldi	r16, 0x00	; 0
    21c0:	23 e0       	ldi	r18, 0x03	; 3
    21c2:	69 e7       	ldi	r22, 0x79	; 121
    21c4:	86 e9       	ldi	r24, 0x96	; 150
    21c6:	8d 0f       	add	r24, r29
    21c8:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    21cc:	1e 14       	cp	r1, r14
    21ce:	1f 04       	cpc	r1, r15
    21d0:	84 f4       	brge	.+32     	; 0x21f2 <lcd_show_new_refosc_data+0x3a4>
    21d2:	c5 e9       	ldi	r28, 0x95	; 149
    21d4:	cd 0f       	add	r28, r29
    21d6:	d7 56       	subi	r29, 0x67	; 103
    21d8:	01 e0       	ldi	r16, 0x01	; 1
    21da:	29 e7       	ldi	r18, 0x79	; 121
    21dc:	4c 2f       	mov	r20, r28
    21de:	6a e7       	ldi	r22, 0x7A	; 122
    21e0:	8d 2f       	mov	r24, r29
    21e2:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    21e6:	2b e7       	ldi	r18, 0x7B	; 123
    21e8:	4c 2f       	mov	r20, r28
    21ea:	6a e7       	ldi	r22, 0x7A	; 122
    21ec:	8d 2f       	mov	r24, r29
    21ee:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    21f2:	90 92 59 03 	sts	0x0359, r9	; 0x800359 <clk_state_old.3384>
    21f6:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    21fa:	8d ef       	ldi	r24, 0xFD	; 253
    21fc:	88 c2       	rjmp	.+1296   	; 0x270e <lcd_show_new_refosc_data+0x8c0>
    21fe:	96 ff       	sbrs	r25, 6
    2200:	38 c0       	rjmp	.+112    	; 0x2272 <lcd_show_new_refosc_data+0x424>
    2202:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3427>
    2206:	22 30       	cpi	r18, 0x02	; 2
    2208:	a0 f5       	brcc	.+104    	; 0x2272 <lcd_show_new_refosc_data+0x424>
    220a:	9f 7b       	andi	r25, 0xBF	; 191
    220c:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <g_showData>
    2210:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <g_showData+0x35>
    2214:	1f 92       	push	r1
    2216:	8f 93       	push	r24
    2218:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <g_showData+0x34>
    221c:	1f 92       	push	r1
    221e:	8f 93       	push	r24
    2220:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <g_showData+0x33>
    2224:	1f 92       	push	r1
    2226:	8f 93       	push	r24
    2228:	84 e9       	ldi	r24, 0x94	; 148
    222a:	92 e0       	ldi	r25, 0x02	; 2
    222c:	9f 93       	push	r25
    222e:	8f 93       	push	r24
    2230:	1f 92       	push	r1
    2232:	80 e3       	ldi	r24, 0x30	; 48
    2234:	8f 93       	push	r24
    2236:	8f ed       	ldi	r24, 0xDF	; 223
    2238:	93 e0       	ldi	r25, 0x03	; 3
    223a:	9f 93       	push	r25
    223c:	8f 93       	push	r24
    223e:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    2242:	cf bf       	out	0x3f, r28	; 63
    2244:	23 e0       	ldi	r18, 0x03	; 3
    2246:	31 e0       	ldi	r19, 0x01	; 1
    2248:	41 e4       	ldi	r20, 0x41	; 65
    224a:	6d e5       	ldi	r22, 0x5D	; 93
    224c:	8f ed       	ldi	r24, 0xDF	; 223
    224e:	93 e0       	ldi	r25, 0x03	; 3
    2250:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2254:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2258:	82 e0       	ldi	r24, 0x02	; 2
    225a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3427>
    225e:	8d b7       	in	r24, 0x3d	; 61
    2260:	9e b7       	in	r25, 0x3e	; 62
    2262:	0c 96       	adiw	r24, 0x0c	; 12
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	9e bf       	out	0x3e, r25	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	8d bf       	out	0x3d, r24	; 61
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	4e c2       	rjmp	.+1180   	; 0x270e <lcd_show_new_refosc_data+0x8c0>
    2272:	97 ff       	sbrs	r25, 7
    2274:	49 c0       	rjmp	.+146    	; 0x2308 <lcd_show_new_refosc_data+0x4ba>
    2276:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3427>
    227a:	23 30       	cpi	r18, 0x03	; 3
    227c:	08 f0       	brcs	.+2      	; 0x2280 <lcd_show_new_refosc_data+0x432>
    227e:	44 c0       	rjmp	.+136    	; 0x2308 <lcd_show_new_refosc_data+0x4ba>
    2280:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <g_showData>
    2284:	8f 77       	andi	r24, 0x7F	; 127
    2286:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <g_showData>
    228a:	20 91 58 04 	lds	r18, 0x0458	; 0x800458 <g_showData+0x22>
    228e:	30 91 59 04 	lds	r19, 0x0459	; 0x800459 <g_showData+0x23>
    2292:	c9 01       	movw	r24, r18
    2294:	64 e6       	ldi	r22, 0x64	; 100
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	0e 94 3e 21 	call	0x427c	; 0x427c <__udivmodhi4>
    229c:	9f 93       	push	r25
    229e:	8f 93       	push	r24
    22a0:	b9 01       	movw	r22, r18
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__floatunsisf>
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	48 ec       	ldi	r20, 0xC8	; 200
    22b0:	52 e4       	ldi	r21, 0x42	; 66
    22b2:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <__divsf3>
    22b6:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__fixsfsi>
    22ba:	7f 93       	push	r23
    22bc:	6f 93       	push	r22
    22be:	85 ed       	ldi	r24, 0xD5	; 213
    22c0:	91 e0       	ldi	r25, 0x01	; 1
    22c2:	9f 93       	push	r25
    22c4:	8f 93       	push	r24
    22c6:	1f 92       	push	r1
    22c8:	80 e3       	ldi	r24, 0x30	; 48
    22ca:	8f 93       	push	r24
    22cc:	8f ed       	ldi	r24, 0xDF	; 223
    22ce:	93 e0       	ldi	r25, 0x03	; 3
    22d0:	9f 93       	push	r25
    22d2:	8f 93       	push	r24
    22d4:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    22d8:	cf bf       	out	0x3f, r28	; 63
    22da:	23 e0       	ldi	r18, 0x03	; 3
    22dc:	31 e0       	ldi	r19, 0x01	; 1
    22de:	4a e4       	ldi	r20, 0x4A	; 74
    22e0:	6f e3       	ldi	r22, 0x3F	; 63
    22e2:	8f ed       	ldi	r24, 0xDF	; 223
    22e4:	93 e0       	ldi	r25, 0x03	; 3
    22e6:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    22ea:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    22ee:	83 e0       	ldi	r24, 0x03	; 3
    22f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3427>
    22f4:	8d b7       	in	r24, 0x3d	; 61
    22f6:	9e b7       	in	r25, 0x3e	; 62
    22f8:	0a 96       	adiw	r24, 0x0a	; 10
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	9e bf       	out	0x3e, r25	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	8d bf       	out	0x3d, r24	; 61
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	03 c2       	rjmp	.+1030   	; 0x270e <lcd_show_new_refosc_data+0x8c0>
    2308:	20 91 37 04 	lds	r18, 0x0437	; 0x800437 <g_showData+0x1>
    230c:	20 ff       	sbrs	r18, 0
    230e:	34 c0       	rjmp	.+104    	; 0x2378 <lcd_show_new_refosc_data+0x52a>
    2310:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3427>
    2314:	34 30       	cpi	r19, 0x04	; 4
    2316:	80 f5       	brcc	.+96     	; 0x2378 <lcd_show_new_refosc_data+0x52a>
    2318:	2e 7f       	andi	r18, 0xFE	; 254
    231a:	20 93 37 04 	sts	0x0437, r18	; 0x800437 <g_showData+0x1>
    231e:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <g_showData+0x37>
    2322:	1f 92       	push	r1
    2324:	8f 93       	push	r24
    2326:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <g_showData+0x36>
    232a:	1f 92       	push	r1
    232c:	8f 93       	push	r24
    232e:	8c ee       	ldi	r24, 0xEC	; 236
    2330:	91 e0       	ldi	r25, 0x01	; 1
    2332:	9f 93       	push	r25
    2334:	8f 93       	push	r24
    2336:	1f 92       	push	r1
    2338:	80 e3       	ldi	r24, 0x30	; 48
    233a:	8f 93       	push	r24
    233c:	8f ed       	ldi	r24, 0xDF	; 223
    233e:	93 e0       	ldi	r25, 0x03	; 3
    2340:	9f 93       	push	r25
    2342:	8f 93       	push	r24
    2344:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    2348:	cf bf       	out	0x3f, r28	; 63
    234a:	23 e0       	ldi	r18, 0x03	; 3
    234c:	31 e0       	ldi	r19, 0x01	; 1
    234e:	43 e5       	ldi	r20, 0x53	; 83
    2350:	61 e5       	ldi	r22, 0x51	; 81
    2352:	8f ed       	ldi	r24, 0xDF	; 223
    2354:	93 e0       	ldi	r25, 0x03	; 3
    2356:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    235a:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    235e:	84 e0       	ldi	r24, 0x04	; 4
    2360:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3427>
    2364:	8d b7       	in	r24, 0x3d	; 61
    2366:	9e b7       	in	r25, 0x3e	; 62
    2368:	0a 96       	adiw	r24, 0x0a	; 10
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	9e bf       	out	0x3e, r25	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	8d bf       	out	0x3d, r24	; 61
    2374:	83 e0       	ldi	r24, 0x03	; 3
    2376:	cb c1       	rjmp	.+918    	; 0x270e <lcd_show_new_refosc_data+0x8c0>
    2378:	21 ff       	sbrs	r18, 1
    237a:	44 c0       	rjmp	.+136    	; 0x2404 <lcd_show_new_refosc_data+0x5b6>
    237c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3427>
    2380:	35 30       	cpi	r19, 0x05	; 5
    2382:	08 f0       	brcs	.+2      	; 0x2386 <lcd_show_new_refosc_data+0x538>
    2384:	3f c0       	rjmp	.+126    	; 0x2404 <lcd_show_new_refosc_data+0x5b6>
    2386:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <g_showData+0x1>
    238a:	8d 7f       	andi	r24, 0xFD	; 253
    238c:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <g_showData+0x1>
    2390:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <g_showData+0x25>
    2394:	8f 93       	push	r24
    2396:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <g_showData+0x24>
    239a:	8f 93       	push	r24
    239c:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <g_showData+0x3a>
    23a0:	1f 92       	push	r1
    23a2:	8f 93       	push	r24
    23a4:	1f 92       	push	r1
    23a6:	8e e7       	ldi	r24, 0x7E	; 126
    23a8:	8f 93       	push	r24
    23aa:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <g_showData+0x39>
    23ae:	1f 92       	push	r1
    23b0:	8f 93       	push	r24
    23b2:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <g_showData+0x38>
    23b6:	1f 92       	push	r1
    23b8:	8f 93       	push	r24
    23ba:	8d ea       	ldi	r24, 0xAD	; 173
    23bc:	92 e0       	ldi	r25, 0x02	; 2
    23be:	9f 93       	push	r25
    23c0:	8f 93       	push	r24
    23c2:	1f 92       	push	r1
    23c4:	80 e3       	ldi	r24, 0x30	; 48
    23c6:	8f 93       	push	r24
    23c8:	8f ed       	ldi	r24, 0xDF	; 223
    23ca:	93 e0       	ldi	r25, 0x03	; 3
    23cc:	9f 93       	push	r25
    23ce:	8f 93       	push	r24
    23d0:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    23d4:	cf bf       	out	0x3f, r28	; 63
    23d6:	23 e0       	ldi	r18, 0x03	; 3
    23d8:	31 e0       	ldi	r19, 0x01	; 1
    23da:	4c e5       	ldi	r20, 0x5C	; 92
    23dc:	6f e3       	ldi	r22, 0x3F	; 63
    23de:	8f ed       	ldi	r24, 0xDF	; 223
    23e0:	93 e0       	ldi	r25, 0x03	; 3
    23e2:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    23e6:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    23ea:	85 e0       	ldi	r24, 0x05	; 5
    23ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3427>
    23f0:	8d b7       	in	r24, 0x3d	; 61
    23f2:	9e b7       	in	r25, 0x3e	; 62
    23f4:	40 96       	adiw	r24, 0x10	; 16
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	9e bf       	out	0x3e, r25	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	8d bf       	out	0x3d, r24	; 61
    2400:	84 e0       	ldi	r24, 0x04	; 4
    2402:	85 c1       	rjmp	.+778    	; 0x270e <lcd_show_new_refosc_data+0x8c0>
    2404:	22 ff       	sbrs	r18, 2
    2406:	44 c0       	rjmp	.+136    	; 0x2490 <lcd_show_new_refosc_data+0x642>
    2408:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3427>
    240c:	36 30       	cpi	r19, 0x06	; 6
    240e:	08 f0       	brcs	.+2      	; 0x2412 <lcd_show_new_refosc_data+0x5c4>
    2410:	3f c0       	rjmp	.+126    	; 0x2490 <lcd_show_new_refosc_data+0x642>
    2412:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <g_showData+0x1>
    2416:	8b 7f       	andi	r24, 0xFB	; 251
    2418:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <g_showData+0x1>
    241c:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <g_showData+0x27>
    2420:	8f 93       	push	r24
    2422:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <g_showData+0x26>
    2426:	8f 93       	push	r24
    2428:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <g_showData+0x3d>
    242c:	1f 92       	push	r1
    242e:	8f 93       	push	r24
    2430:	1f 92       	push	r1
    2432:	8e e7       	ldi	r24, 0x7E	; 126
    2434:	8f 93       	push	r24
    2436:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <g_showData+0x3c>
    243a:	1f 92       	push	r1
    243c:	8f 93       	push	r24
    243e:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <g_showData+0x3b>
    2442:	1f 92       	push	r1
    2444:	8f 93       	push	r24
    2446:	81 ec       	ldi	r24, 0xC1	; 193
    2448:	92 e0       	ldi	r25, 0x02	; 2
    244a:	9f 93       	push	r25
    244c:	8f 93       	push	r24
    244e:	1f 92       	push	r1
    2450:	80 e3       	ldi	r24, 0x30	; 48
    2452:	8f 93       	push	r24
    2454:	8f ed       	ldi	r24, 0xDF	; 223
    2456:	93 e0       	ldi	r25, 0x03	; 3
    2458:	9f 93       	push	r25
    245a:	8f 93       	push	r24
    245c:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    2460:	cf bf       	out	0x3f, r28	; 63
    2462:	23 e0       	ldi	r18, 0x03	; 3
    2464:	31 e0       	ldi	r19, 0x01	; 1
    2466:	45 e6       	ldi	r20, 0x65	; 101
    2468:	6f e3       	ldi	r22, 0x3F	; 63
    246a:	8f ed       	ldi	r24, 0xDF	; 223
    246c:	93 e0       	ldi	r25, 0x03	; 3
    246e:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2472:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2476:	86 e0       	ldi	r24, 0x06	; 6
    2478:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3427>
    247c:	8d b7       	in	r24, 0x3d	; 61
    247e:	9e b7       	in	r25, 0x3e	; 62
    2480:	40 96       	adiw	r24, 0x10	; 16
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	9e bf       	out	0x3e, r25	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	8d bf       	out	0x3d, r24	; 61
    248c:	85 e0       	ldi	r24, 0x05	; 5
    248e:	3f c1       	rjmp	.+638    	; 0x270e <lcd_show_new_refosc_data+0x8c0>
    2490:	23 ff       	sbrs	r18, 3
    2492:	38 c0       	rjmp	.+112    	; 0x2504 <lcd_show_new_refosc_data+0x6b6>
    2494:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3427>
    2498:	27 30       	cpi	r18, 0x07	; 7
    249a:	a0 f5       	brcc	.+104    	; 0x2504 <lcd_show_new_refosc_data+0x6b6>
    249c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <g_showData+0x1>
    24a0:	87 7f       	andi	r24, 0xF7	; 247
    24a2:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <g_showData+0x1>
    24a6:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <g_showData+0x3e>
    24aa:	1f 92       	push	r1
    24ac:	8f 93       	push	r24
    24ae:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <g_showData+0x29>
    24b2:	8f 93       	push	r24
    24b4:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <g_showData+0x28>
    24b8:	8f 93       	push	r24
    24ba:	84 ed       	ldi	r24, 0xD4	; 212
    24bc:	92 e0       	ldi	r25, 0x02	; 2
    24be:	9f 93       	push	r25
    24c0:	8f 93       	push	r24
    24c2:	1f 92       	push	r1
    24c4:	80 e3       	ldi	r24, 0x30	; 48
    24c6:	8f 93       	push	r24
    24c8:	8f ed       	ldi	r24, 0xDF	; 223
    24ca:	93 e0       	ldi	r25, 0x03	; 3
    24cc:	9f 93       	push	r25
    24ce:	8f 93       	push	r24
    24d0:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    24d4:	cf bf       	out	0x3f, r28	; 63
    24d6:	23 e0       	ldi	r18, 0x03	; 3
    24d8:	31 e0       	ldi	r19, 0x01	; 1
    24da:	4e e6       	ldi	r20, 0x6E	; 110
    24dc:	6f e3       	ldi	r22, 0x3F	; 63
    24de:	8f ed       	ldi	r24, 0xDF	; 223
    24e0:	93 e0       	ldi	r25, 0x03	; 3
    24e2:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    24e6:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    24ea:	87 e0       	ldi	r24, 0x07	; 7
    24ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3427>
    24f0:	8d b7       	in	r24, 0x3d	; 61
    24f2:	9e b7       	in	r25, 0x3e	; 62
    24f4:	0a 96       	adiw	r24, 0x0a	; 10
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	9e bf       	out	0x3e, r25	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	8d bf       	out	0x3d, r24	; 61
    2500:	86 e0       	ldi	r24, 0x06	; 6
    2502:	05 c1       	rjmp	.+522    	; 0x270e <lcd_show_new_refosc_data+0x8c0>
    2504:	93 ff       	sbrs	r25, 3
    2506:	3a c0       	rjmp	.+116    	; 0x257c <lcd_show_new_refosc_data+0x72e>
    2508:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3427>
    250c:	28 30       	cpi	r18, 0x08	; 8
    250e:	b0 f5       	brcc	.+108    	; 0x257c <lcd_show_new_refosc_data+0x72e>
    2510:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <g_showData>
    2514:	87 7f       	andi	r24, 0xF7	; 247
    2516:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <g_showData>
    251a:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <g_showData+0x1f>
    251e:	8f 93       	push	r24
    2520:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <g_showData+0x1e>
    2524:	8f 93       	push	r24
    2526:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <g_showData+0x1d>
    252a:	8f 93       	push	r24
    252c:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <g_showData+0x1c>
    2530:	8f 93       	push	r24
    2532:	8d ed       	ldi	r24, 0xDD	; 221
    2534:	92 e0       	ldi	r25, 0x02	; 2
    2536:	9f 93       	push	r25
    2538:	8f 93       	push	r24
    253a:	1f 92       	push	r1
    253c:	80 e3       	ldi	r24, 0x30	; 48
    253e:	8f 93       	push	r24
    2540:	8f ed       	ldi	r24, 0xDF	; 223
    2542:	93 e0       	ldi	r25, 0x03	; 3
    2544:	9f 93       	push	r25
    2546:	8f 93       	push	r24
    2548:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    254c:	cf bf       	out	0x3f, r28	; 63
    254e:	23 e0       	ldi	r18, 0x03	; 3
    2550:	31 e0       	ldi	r19, 0x01	; 1
    2552:	46 e2       	ldi	r20, 0x26	; 38
    2554:	6f e3       	ldi	r22, 0x3F	; 63
    2556:	8f ed       	ldi	r24, 0xDF	; 223
    2558:	93 e0       	ldi	r25, 0x03	; 3
    255a:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    255e:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2562:	88 e0       	ldi	r24, 0x08	; 8
    2564:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3427>
    2568:	8d b7       	in	r24, 0x3d	; 61
    256a:	9e b7       	in	r25, 0x3e	; 62
    256c:	0a 96       	adiw	r24, 0x0a	; 10
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	9e bf       	out	0x3e, r25	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	8d bf       	out	0x3d, r24	; 61
    2578:	87 e0       	ldi	r24, 0x07	; 7
    257a:	c9 c0       	rjmp	.+402    	; 0x270e <lcd_show_new_refosc_data+0x8c0>
    257c:	94 ff       	sbrs	r25, 4
    257e:	89 c0       	rjmp	.+274    	; 0x2692 <lcd_show_new_refosc_data+0x844>
    2580:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3427>
    2584:	29 30       	cpi	r18, 0x09	; 9
    2586:	08 f0       	brcs	.+2      	; 0x258a <lcd_show_new_refosc_data+0x73c>
    2588:	84 c0       	rjmp	.+264    	; 0x2692 <lcd_show_new_refosc_data+0x844>
    258a:	f0 90 66 04 	lds	r15, 0x0466	; 0x800466 <g_showData+0x30>
    258e:	60 91 67 04 	lds	r22, 0x0467	; 0x800467 <g_showData+0x31>
    2592:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <g_showData>
    2596:	8f 7e       	andi	r24, 0xEF	; 239
    2598:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <g_showData>
    259c:	cf bf       	out	0x3f, r28	; 63
    259e:	70 e0       	ldi	r23, 0x00	; 0
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <__floatsisf>
    25a8:	2b 01       	movw	r4, r22
    25aa:	3c 01       	movw	r6, r24
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	4a e7       	ldi	r20, 0x7A	; 122
    25b2:	50 e4       	ldi	r21, 0x40	; 64
    25b4:	0e 94 cf 20 	call	0x419e	; 0x419e <__mulsf3>
    25b8:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__fixsfsi>
    25bc:	7f 93       	push	r23
    25be:	6f 93       	push	r22
    25c0:	1f 92       	push	r1
    25c2:	ff 92       	push	r15
    25c4:	07 ee       	ldi	r16, 0xE7	; 231
    25c6:	12 e0       	ldi	r17, 0x02	; 2
    25c8:	1f 93       	push	r17
    25ca:	0f 93       	push	r16
    25cc:	1f 92       	push	r1
    25ce:	80 e3       	ldi	r24, 0x30	; 48
    25d0:	b8 2e       	mov	r11, r24
    25d2:	bf 92       	push	r11
    25d4:	cf ed       	ldi	r28, 0xDF	; 223
    25d6:	d3 e0       	ldi	r29, 0x03	; 3
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    25e0:	23 e0       	ldi	r18, 0x03	; 3
    25e2:	31 e0       	ldi	r19, 0x01	; 1
    25e4:	4f e2       	ldi	r20, 0x2F	; 47
    25e6:	6f e3       	ldi	r22, 0x3F	; 63
    25e8:	ce 01       	movw	r24, r28
    25ea:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    25ee:	6f 2d       	mov	r22, r15
    25f0:	70 e0       	ldi	r23, 0x00	; 0
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__floatunsisf>
    25fa:	6b 01       	movw	r12, r22
    25fc:	7c 01       	movw	r14, r24
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e8       	ldi	r20, 0x80	; 128
    2604:	5b e3       	ldi	r21, 0x3B	; 59
    2606:	c3 01       	movw	r24, r6
    2608:	b2 01       	movw	r22, r4
    260a:	0e 94 cf 20 	call	0x419e	; 0x419e <__mulsf3>
    260e:	a7 01       	movw	r20, r14
    2610:	96 01       	movw	r18, r12
    2612:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__addsf3>
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	48 ec       	ldi	r20, 0xC8	; 200
    261c:	5e e3       	ldi	r21, 0x3E	; 62
    261e:	0e 94 cf 20 	call	0x419e	; 0x419e <__mulsf3>
    2622:	6b 01       	movw	r12, r22
    2624:	7c 01       	movw	r14, r24
    2626:	0e 94 03 20 	call	0x4006	; 0x4006 <floor>
    262a:	9b 01       	movw	r18, r22
    262c:	ac 01       	movw	r20, r24
    262e:	c7 01       	movw	r24, r14
    2630:	b6 01       	movw	r22, r12
    2632:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__subsf3>
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	4a e7       	ldi	r20, 0x7A	; 122
    263c:	54 e4       	ldi	r21, 0x44	; 68
    263e:	0e 94 cf 20 	call	0x419e	; 0x419e <__mulsf3>
    2642:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__fixsfsi>
    2646:	7f 93       	push	r23
    2648:	6f 93       	push	r22
    264a:	c7 01       	movw	r24, r14
    264c:	b6 01       	movw	r22, r12
    264e:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__fixsfsi>
    2652:	7f 93       	push	r23
    2654:	6f 93       	push	r22
    2656:	1f 93       	push	r17
    2658:	0f 93       	push	r16
    265a:	1f 92       	push	r1
    265c:	bf 92       	push	r11
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    2666:	23 e0       	ldi	r18, 0x03	; 3
    2668:	31 e0       	ldi	r19, 0x01	; 1
    266a:	4f e2       	ldi	r20, 0x2F	; 47
    266c:	6d e8       	ldi	r22, 0x8D	; 141
    266e:	ce 01       	movw	r24, r28
    2670:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2674:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    2678:	89 e0       	ldi	r24, 0x09	; 9
    267a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3427>
    267e:	8d b7       	in	r24, 0x3d	; 61
    2680:	9e b7       	in	r25, 0x3e	; 62
    2682:	44 96       	adiw	r24, 0x14	; 20
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	9e bf       	out	0x3e, r25	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	8d bf       	out	0x3d, r24	; 61
    268e:	88 e0       	ldi	r24, 0x08	; 8
    2690:	3e c0       	rjmp	.+124    	; 0x270e <lcd_show_new_refosc_data+0x8c0>
    2692:	95 ff       	sbrs	r25, 5
    2694:	38 c0       	rjmp	.+112    	; 0x2706 <lcd_show_new_refosc_data+0x8b8>
    2696:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <idx.3427>
    269a:	9a 30       	cpi	r25, 0x0A	; 10
    269c:	a0 f5       	brcc	.+104    	; 0x2706 <lcd_show_new_refosc_data+0x8b8>
    269e:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <g_showData>
    26a2:	8f 7d       	andi	r24, 0xDF	; 223
    26a4:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <g_showData>
    26a8:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <g_showData+0x21>
    26ac:	8f 93       	push	r24
    26ae:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <g_showData+0x20>
    26b2:	8f 93       	push	r24
    26b4:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <g_showData+0x32>
    26b8:	1f 92       	push	r1
    26ba:	8f 93       	push	r24
    26bc:	85 e8       	ldi	r24, 0x85	; 133
    26be:	92 e0       	ldi	r25, 0x02	; 2
    26c0:	9f 93       	push	r25
    26c2:	8f 93       	push	r24
    26c4:	1f 92       	push	r1
    26c6:	80 e3       	ldi	r24, 0x30	; 48
    26c8:	8f 93       	push	r24
    26ca:	8f ed       	ldi	r24, 0xDF	; 223
    26cc:	93 e0       	ldi	r25, 0x03	; 3
    26ce:	9f 93       	push	r25
    26d0:	8f 93       	push	r24
    26d2:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    26d6:	cf bf       	out	0x3f, r28	; 63
    26d8:	23 e0       	ldi	r18, 0x03	; 3
    26da:	31 e0       	ldi	r19, 0x01	; 1
    26dc:	48 e3       	ldi	r20, 0x38	; 56
    26de:	6f e3       	ldi	r22, 0x3F	; 63
    26e0:	8f ed       	ldi	r24, 0xDF	; 223
    26e2:	93 e0       	ldi	r25, 0x03	; 3
    26e4:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    26e8:	0e 94 b0 06 	call	0xd60	; 0xd60 <gfx_mono_lcd_uc1608_cache_clear>
    26ec:	8a e0       	ldi	r24, 0x0A	; 10
    26ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3427>
    26f2:	8d b7       	in	r24, 0x3d	; 61
    26f4:	9e b7       	in	r25, 0x3e	; 62
    26f6:	0a 96       	adiw	r24, 0x0a	; 10
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	9e bf       	out	0x3e, r25	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	8d bf       	out	0x3d, r24	; 61
    2702:	89 e0       	ldi	r24, 0x09	; 9
    2704:	04 c0       	rjmp	.+8      	; 0x270e <lcd_show_new_refosc_data+0x8c0>
    2706:	91 e0       	ldi	r25, 0x01	; 1
    2708:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <idx.3427>
    270c:	cf bf       	out	0x3f, r28	; 63
    270e:	df 91       	pop	r29
    2710:	cf 91       	pop	r28
    2712:	1f 91       	pop	r17
    2714:	0f 91       	pop	r16
    2716:	ff 90       	pop	r15
    2718:	ef 90       	pop	r14
    271a:	df 90       	pop	r13
    271c:	cf 90       	pop	r12
    271e:	bf 90       	pop	r11
    2720:	af 90       	pop	r10
    2722:	9f 90       	pop	r9
    2724:	8f 90       	pop	r8
    2726:	7f 90       	pop	r7
    2728:	6f 90       	pop	r6
    272a:	5f 90       	pop	r5
    272c:	4f 90       	pop	r4
    272e:	3f 90       	pop	r3
    2730:	08 95       	ret

00002732 <lcd_animation_prepare>:
    2732:	ef 92       	push	r14
    2734:	ff 92       	push	r15
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	83 ec       	ldi	r24, 0xC3	; 195
    2740:	9f ef       	ldi	r25, 0xFF	; 255
    2742:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <s_animation_train_origin+0x1>
    2746:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <s_animation_train_origin>
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <s_animation_dx>
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	8b e0       	ldi	r24, 0x0B	; 11
    2756:	e8 2e       	mov	r14, r24
    2758:	f1 2c       	mov	r15, r1
    275a:	c0 e4       	ldi	r28, 0x40	; 64
    275c:	48 ef       	ldi	r20, 0xF8	; 248
    275e:	d8 ec       	ldi	r29, 0xC8	; 200
    2760:	18 ed       	ldi	r17, 0xD8	; 216
    2762:	0f ed       	ldi	r16, 0xDF	; 223
    2764:	21 15       	cp	r18, r1
    2766:	31 05       	cpc	r19, r1
    2768:	19 f4       	brne	.+6      	; 0x2770 <lcd_animation_prepare+0x3e>
    276a:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <s_animation_train_left>
    276e:	43 c0       	rjmp	.+134    	; 0x27f6 <lcd_animation_prepare+0xc4>
    2770:	23 30       	cpi	r18, 0x03	; 3
    2772:	31 05       	cpc	r19, r1
    2774:	5c f4       	brge	.+22     	; 0x278c <lcd_animation_prepare+0x5a>
    2776:	f9 01       	movw	r30, r18
    2778:	e9 56       	subi	r30, 0x69	; 105
    277a:	fc 4f       	sbci	r31, 0xFC	; 252
    277c:	40 83       	st	Z, r20
    277e:	2f 5f       	subi	r18, 0xFF	; 255
    2780:	3f 4f       	sbci	r19, 0xFF	; 255
    2782:	f9 01       	movw	r30, r18
    2784:	e9 56       	subi	r30, 0x69	; 105
    2786:	fc 4f       	sbci	r31, 0xFC	; 252
    2788:	10 83       	st	Z, r17
    278a:	35 c0       	rjmp	.+106    	; 0x27f6 <lcd_animation_prepare+0xc4>
    278c:	25 30       	cpi	r18, 0x05	; 5
    278e:	31 05       	cpc	r19, r1
    2790:	2c f4       	brge	.+10     	; 0x279c <lcd_animation_prepare+0x6a>
    2792:	f9 01       	movw	r30, r18
    2794:	e9 56       	subi	r30, 0x69	; 105
    2796:	fc 4f       	sbci	r31, 0xFC	; 252
    2798:	00 83       	st	Z, r16
    279a:	2d c0       	rjmp	.+90     	; 0x27f6 <lcd_animation_prepare+0xc4>
    279c:	2b 30       	cpi	r18, 0x0B	; 11
    279e:	31 05       	cpc	r19, r1
    27a0:	2c f4       	brge	.+10     	; 0x27ac <lcd_animation_prepare+0x7a>
    27a2:	f9 01       	movw	r30, r18
    27a4:	e9 56       	subi	r30, 0x69	; 105
    27a6:	fc 4f       	sbci	r31, 0xFC	; 252
    27a8:	10 83       	st	Z, r17
    27aa:	25 c0       	rjmp	.+74     	; 0x27f6 <lcd_animation_prepare+0xc4>
    27ac:	20 31       	cpi	r18, 0x10	; 16
    27ae:	31 05       	cpc	r19, r1
    27b0:	e4 f0       	brlt	.+56     	; 0x27ea <lcd_animation_prepare+0xb8>
    27b2:	2c 33       	cpi	r18, 0x3C	; 60
    27b4:	31 05       	cpc	r19, r1
    27b6:	19 f4       	brne	.+6      	; 0x27be <lcd_animation_prepare+0x8c>
    27b8:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <s_animation_train_left+0x3c>
    27bc:	1c c0       	rjmp	.+56     	; 0x27f6 <lcd_animation_prepare+0xc4>
    27be:	c9 01       	movw	r24, r18
    27c0:	40 97       	sbiw	r24, 0x10	; 16
    27c2:	b7 01       	movw	r22, r14
    27c4:	0e 94 52 21 	call	0x42a4	; 0x42a4 <__divmodhi4>
    27c8:	f9 01       	movw	r30, r18
    27ca:	e9 56       	subi	r30, 0x69	; 105
    27cc:	fc 4f       	sbci	r31, 0xFC	; 252
    27ce:	89 2b       	or	r24, r25
    27d0:	89 f4       	brne	.+34     	; 0x27f4 <lcd_animation_prepare+0xc2>
    27d2:	c0 83       	st	Z, r28
    27d4:	c1 83       	std	Z+1, r28	; 0x01
    27d6:	c2 83       	std	Z+2, r28	; 0x02
    27d8:	43 83       	std	Z+3, r20	; 0x03
    27da:	44 83       	std	Z+4, r20	; 0x04
    27dc:	d5 83       	std	Z+5, r29	; 0x05
    27de:	46 83       	std	Z+6, r20	; 0x06
    27e0:	47 83       	std	Z+7, r20	; 0x07
    27e2:	d0 87       	std	Z+8, r29	; 0x08
    27e4:	41 87       	std	Z+9, r20	; 0x09
    27e6:	26 5f       	subi	r18, 0xF6	; 246
    27e8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ea:	f9 01       	movw	r30, r18
    27ec:	e9 56       	subi	r30, 0x69	; 105
    27ee:	fc 4f       	sbci	r31, 0xFC	; 252
    27f0:	40 83       	st	Z, r20
    27f2:	01 c0       	rjmp	.+2      	; 0x27f6 <lcd_animation_prepare+0xc4>
    27f4:	10 82       	st	Z, r1
    27f6:	2f 5f       	subi	r18, 0xFF	; 255
    27f8:	3f 4f       	sbci	r19, 0xFF	; 255
    27fa:	2d 33       	cpi	r18, 0x3D	; 61
    27fc:	31 05       	cpc	r19, r1
    27fe:	0c f4       	brge	.+2      	; 0x2802 <lcd_animation_prepare+0xd0>
    2800:	b1 cf       	rjmp	.-158    	; 0x2764 <lcd_animation_prepare+0x32>
    2802:	a7 e9       	ldi	r26, 0x97	; 151
    2804:	b3 e0       	ldi	r27, 0x03	; 3
    2806:	e7 e9       	ldi	r30, 0x97	; 151
    2808:	f3 e0       	ldi	r31, 0x03	; 3
    280a:	8d 91       	ld	r24, X+
    280c:	82 93       	st	-Z, r24
    280e:	83 e0       	ldi	r24, 0x03	; 3
    2810:	ea 35       	cpi	r30, 0x5A	; 90
    2812:	f8 07       	cpc	r31, r24
    2814:	d1 f7       	brne	.-12     	; 0x280a <lcd_animation_prepare+0xd8>
    2816:	00 e0       	ldi	r16, 0x00	; 0
    2818:	28 e0       	ldi	r18, 0x08	; 8
    281a:	40 ef       	ldi	r20, 0xF0	; 240
    281c:	68 e7       	ldi	r22, 0x78	; 120
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	08 95       	ret

00002832 <lcd_animation_loop>:
    2832:	2f 92       	push	r2
    2834:	3f 92       	push	r3
    2836:	4f 92       	push	r4
    2838:	5f 92       	push	r5
    283a:	6f 92       	push	r6
    283c:	7f 92       	push	r7
    283e:	8f 92       	push	r8
    2840:	9f 92       	push	r9
    2842:	af 92       	push	r10
    2844:	bf 92       	push	r11
    2846:	cf 92       	push	r12
    2848:	df 92       	push	r13
    284a:	ef 92       	push	r14
    284c:	ff 92       	push	r15
    284e:	0f 93       	push	r16
    2850:	1f 93       	push	r17
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	06 d8       	rcall	.-4084   	; 0x1864 <cpu_irq_save>
    2858:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <g_status>
    285c:	91 70       	andi	r25, 0x01	; 1
    285e:	8f bf       	out	0x3f, r24	; 63
    2860:	87 e9       	ldi	r24, 0x97	; 151
    2862:	28 2e       	mov	r2, r24
    2864:	83 e0       	ldi	r24, 0x03	; 3
    2866:	38 2e       	mov	r3, r24
    2868:	2a e0       	ldi	r18, 0x0A	; 10
    286a:	a2 2e       	mov	r10, r18
    286c:	b1 2c       	mov	r11, r1
    286e:	31 e0       	ldi	r19, 0x01	; 1
    2870:	e3 2e       	mov	r14, r19
    2872:	33 e0       	ldi	r19, 0x03	; 3
    2874:	f3 2e       	mov	r15, r19
    2876:	cf ed       	ldi	r28, 0xDF	; 223
    2878:	d3 e0       	ldi	r29, 0x03	; 3
    287a:	44 e6       	ldi	r20, 0x64	; 100
    287c:	84 2e       	mov	r8, r20
    287e:	91 2c       	mov	r9, r1
    2880:	50 ef       	ldi	r21, 0xF0	; 240
    2882:	c5 2e       	mov	r12, r21
    2884:	52 e0       	ldi	r21, 0x02	; 2
    2886:	d5 2e       	mov	r13, r21
    2888:	13 e0       	ldi	r17, 0x03	; 3
    288a:	99 23       	and	r25, r25
    288c:	09 f4       	brne	.+2      	; 0x2890 <lcd_animation_loop+0x5e>
    288e:	91 c1       	rjmp	.+802    	; 0x2bb2 <lcd_animation_loop+0x380>
    2890:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <s_animation_dx>
    2894:	88 23       	and	r24, r24
    2896:	09 f4       	brne	.+2      	; 0x289a <lcd_animation_loop+0x68>
    2898:	8c c1       	rjmp	.+792    	; 0x2bb2 <lcd_animation_loop+0x380>
    289a:	f0 d7       	rcall	.+4064   	; 0x387c <get_abs_time>
    289c:	2b 01       	movw	r4, r22
    289e:	3c 01       	movw	r6, r24
    28a0:	20 91 d4 03 	lds	r18, 0x03D4	; 0x8003d4 <s_animation_time_last_train>
    28a4:	30 91 d5 03 	lds	r19, 0x03D5	; 0x8003d5 <s_animation_time_last_train+0x1>
    28a8:	40 91 d6 03 	lds	r20, 0x03D6	; 0x8003d6 <s_animation_time_last_train+0x2>
    28ac:	50 91 d7 03 	lds	r21, 0x03D7	; 0x8003d7 <s_animation_time_last_train+0x3>
    28b0:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__subsf3>
    28b4:	2a e0       	ldi	r18, 0x0A	; 10
    28b6:	37 ed       	ldi	r19, 0xD7	; 215
    28b8:	43 e2       	ldi	r20, 0x23	; 35
    28ba:	5d e3       	ldi	r21, 0x3D	; 61
    28bc:	0e 94 cb 20 	call	0x4196	; 0x4196 <__gesf2>
    28c0:	87 fd       	sbrc	r24, 7
    28c2:	60 c0       	rjmp	.+192    	; 0x2984 <lcd_animation_loop+0x152>
    28c4:	40 92 d4 03 	sts	0x03D4, r4	; 0x8003d4 <s_animation_time_last_train>
    28c8:	50 92 d5 03 	sts	0x03D5, r5	; 0x8003d5 <s_animation_time_last_train+0x1>
    28cc:	60 92 d6 03 	sts	0x03D6, r6	; 0x8003d6 <s_animation_time_last_train+0x2>
    28d0:	70 92 d7 03 	sts	0x03D7, r7	; 0x8003d7 <s_animation_time_last_train+0x3>
    28d4:	20 91 dc 03 	lds	r18, 0x03DC	; 0x8003dc <s_animation_dx>
    28d8:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <s_animation_train_origin>
    28dc:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <s_animation_train_origin+0x1>
    28e0:	82 0f       	add	r24, r18
    28e2:	91 1d       	adc	r25, r1
    28e4:	27 fd       	sbrc	r18, 7
    28e6:	9a 95       	dec	r25
    28e8:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <s_animation_train_origin+0x1>
    28ec:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <s_animation_train_origin>
    28f0:	8a 3b       	cpi	r24, 0xBA	; 186
    28f2:	2f ef       	ldi	r18, 0xFF	; 255
    28f4:	92 07       	cpc	r25, r18
    28f6:	24 f4       	brge	.+8      	; 0x2900 <lcd_animation_loop+0xce>
    28f8:	e1 e0       	ldi	r30, 0x01	; 1
    28fa:	e0 93 dc 03 	sts	0x03DC, r30	; 0x8003dc <s_animation_dx>
    28fe:	06 c0       	rjmp	.+12     	; 0x290c <lcd_animation_loop+0xda>
    2900:	8a 3f       	cpi	r24, 0xFA	; 250
    2902:	91 05       	cpc	r25, r1
    2904:	1c f0       	brlt	.+6      	; 0x290c <lcd_animation_loop+0xda>
    2906:	ff ef       	ldi	r31, 0xFF	; 255
    2908:	f0 93 dc 03 	sts	0x03DC, r31	; 0x8003dc <s_animation_dx>
    290c:	20 91 dc 03 	lds	r18, 0x03DC	; 0x8003dc <s_animation_dx>
    2910:	27 ff       	sbrs	r18, 7
    2912:	1c c0       	rjmp	.+56     	; 0x294c <lcd_animation_loop+0x11a>
    2914:	80 3f       	cpi	r24, 0xF0	; 240
    2916:	91 05       	cpc	r25, r1
    2918:	40 f4       	brcc	.+16     	; 0x292a <lcd_animation_loop+0xf8>
    291a:	2d e3       	ldi	r18, 0x3D	; 61
    291c:	48 2f       	mov	r20, r24
    291e:	6f e0       	ldi	r22, 0x0F	; 15
    2920:	87 e9       	ldi	r24, 0x97	; 151
    2922:	93 e0       	ldi	r25, 0x03	; 3
    2924:	0e 94 0a 06 	call	0xc14	; 0xc14 <gfx_mono_lcd_uc1608_put_page>
    2928:	2d c0       	rjmp	.+90     	; 0x2984 <lcd_animation_loop+0x152>
    292a:	9c 01       	movw	r18, r24
    292c:	24 5c       	subi	r18, 0xC4	; 196
    292e:	3f 4f       	sbci	r19, 0xFF	; 255
    2930:	2c 33       	cpi	r18, 0x3C	; 60
    2932:	31 05       	cpc	r19, r1
    2934:	38 f5       	brcc	.+78     	; 0x2984 <lcd_animation_loop+0x152>
    2936:	2d e3       	ldi	r18, 0x3D	; 61
    2938:	28 0f       	add	r18, r24
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	6f e0       	ldi	r22, 0x0F	; 15
    293e:	f1 01       	movw	r30, r2
    2940:	e8 1b       	sub	r30, r24
    2942:	f9 0b       	sbc	r31, r25
    2944:	cf 01       	movw	r24, r30
    2946:	0e 94 0a 06 	call	0xc14	; 0xc14 <gfx_mono_lcd_uc1608_put_page>
    294a:	1c c0       	rjmp	.+56     	; 0x2984 <lcd_animation_loop+0x152>
    294c:	80 3f       	cpi	r24, 0xF0	; 240
    294e:	91 05       	cpc	r25, r1
    2950:	40 f4       	brcc	.+16     	; 0x2962 <lcd_animation_loop+0x130>
    2952:	2d e3       	ldi	r18, 0x3D	; 61
    2954:	48 2f       	mov	r20, r24
    2956:	6f e0       	ldi	r22, 0x0F	; 15
    2958:	8a e5       	ldi	r24, 0x5A	; 90
    295a:	93 e0       	ldi	r25, 0x03	; 3
    295c:	0e 94 0a 06 	call	0xc14	; 0xc14 <gfx_mono_lcd_uc1608_put_page>
    2960:	11 c0       	rjmp	.+34     	; 0x2984 <lcd_animation_loop+0x152>
    2962:	9c 01       	movw	r18, r24
    2964:	24 5c       	subi	r18, 0xC4	; 196
    2966:	3f 4f       	sbci	r19, 0xFF	; 255
    2968:	2c 33       	cpi	r18, 0x3C	; 60
    296a:	31 05       	cpc	r19, r1
    296c:	58 f4       	brcc	.+22     	; 0x2984 <lcd_animation_loop+0x152>
    296e:	2d e3       	ldi	r18, 0x3D	; 61
    2970:	28 0f       	add	r18, r24
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	6f e0       	ldi	r22, 0x0F	; 15
    2976:	ea e5       	ldi	r30, 0x5A	; 90
    2978:	f3 e0       	ldi	r31, 0x03	; 3
    297a:	e8 1b       	sub	r30, r24
    297c:	f9 0b       	sbc	r31, r25
    297e:	cf 01       	movw	r24, r30
    2980:	0e 94 0a 06 	call	0xc14	; 0xc14 <gfx_mono_lcd_uc1608_put_page>
    2984:	e3 d7       	rcall	.+4038   	; 0x394c <task>
    2986:	20 91 d8 03 	lds	r18, 0x03D8	; 0x8003d8 <s_animation_time_last_temp>
    298a:	30 91 d9 03 	lds	r19, 0x03D9	; 0x8003d9 <s_animation_time_last_temp+0x1>
    298e:	40 91 da 03 	lds	r20, 0x03DA	; 0x8003da <s_animation_time_last_temp+0x2>
    2992:	50 91 db 03 	lds	r21, 0x03DB	; 0x8003db <s_animation_time_last_temp+0x3>
    2996:	c3 01       	movw	r24, r6
    2998:	b2 01       	movw	r22, r4
    299a:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__subsf3>
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e0       	ldi	r20, 0x00	; 0
    29a4:	5f e3       	ldi	r21, 0x3F	; 63
    29a6:	0e 94 cb 20 	call	0x4196	; 0x4196 <__gesf2>
    29aa:	87 fd       	sbrc	r24, 7
    29ac:	c2 c0       	rjmp	.+388    	; 0x2b32 <lcd_animation_loop+0x300>
    29ae:	40 92 d8 03 	sts	0x03D8, r4	; 0x8003d8 <s_animation_time_last_temp>
    29b2:	50 92 d9 03 	sts	0x03D9, r5	; 0x8003d9 <s_animation_time_last_temp+0x1>
    29b6:	60 92 da 03 	sts	0x03DA, r6	; 0x8003da <s_animation_time_last_temp+0x2>
    29ba:	70 92 db 03 	sts	0x03DB, r7	; 0x8003db <s_animation_time_last_temp+0x3>
    29be:	0e 94 32 0c 	call	0x1864	; 0x1864 <cpu_irq_save>
    29c2:	40 90 7c 04 	lds	r4, 0x047C	; 0x80047c <g_temp>
    29c6:	50 90 7d 04 	lds	r5, 0x047D	; 0x80047d <g_temp+0x1>
    29ca:	60 90 7e 04 	lds	r6, 0x047E	; 0x80047e <g_temp+0x2>
    29ce:	70 90 7f 04 	lds	r7, 0x047F	; 0x80047f <g_temp+0x3>
    29d2:	8f bf       	out	0x3f, r24	; 63
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	a9 01       	movw	r20, r18
    29da:	c3 01       	movw	r24, r6
    29dc:	b2 01       	movw	r22, r4
    29de:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__cmpsf2>
    29e2:	87 ff       	sbrs	r24, 7
    29e4:	03 c0       	rjmp	.+6      	; 0x29ec <lcd_animation_loop+0x1ba>
    29e6:	41 2c       	mov	r4, r1
    29e8:	51 2c       	mov	r5, r1
    29ea:	32 01       	movw	r6, r4
    29ec:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <t_last.3448>
    29f0:	30 91 56 03 	lds	r19, 0x0356	; 0x800356 <t_last.3448+0x1>
    29f4:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <t_last.3448+0x2>
    29f8:	50 91 58 03 	lds	r21, 0x0358	; 0x800358 <t_last.3448+0x3>
    29fc:	c3 01       	movw	r24, r6
    29fe:	b2 01       	movw	r22, r4
    2a00:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__subsf3>
    2a04:	9f 77       	andi	r25, 0x7F	; 127
    2a06:	2a e0       	ldi	r18, 0x0A	; 10
    2a08:	37 ed       	ldi	r19, 0xD7	; 215
    2a0a:	43 e2       	ldi	r20, 0x23	; 35
    2a0c:	5c e3       	ldi	r21, 0x3C	; 60
    2a0e:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__cmpsf2>
    2a12:	87 fd       	sbrc	r24, 7
    2a14:	37 c0       	rjmp	.+110    	; 0x2a84 <lcd_animation_loop+0x252>
    2a16:	40 92 55 03 	sts	0x0355, r4	; 0x800355 <t_last.3448>
    2a1a:	50 92 56 03 	sts	0x0356, r5	; 0x800356 <t_last.3448+0x1>
    2a1e:	60 92 57 03 	sts	0x0357, r6	; 0x800357 <t_last.3448+0x2>
    2a22:	70 92 58 03 	sts	0x0358, r7	; 0x800358 <t_last.3448+0x3>
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	48 ec       	ldi	r20, 0xC8	; 200
    2a2c:	52 e4       	ldi	r21, 0x42	; 66
    2a2e:	c3 01       	movw	r24, r6
    2a30:	b2 01       	movw	r22, r4
    2a32:	0e 94 cf 20 	call	0x419e	; 0x419e <__mulsf3>
    2a36:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__fixsfsi>
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	b4 01       	movw	r22, r8
    2a3e:	0e 94 52 21 	call	0x42a4	; 0x42a4 <__divmodhi4>
    2a42:	9f 93       	push	r25
    2a44:	8f 93       	push	r24
    2a46:	c3 01       	movw	r24, r6
    2a48:	b2 01       	movw	r22, r4
    2a4a:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__fixsfsi>
    2a4e:	7f 93       	push	r23
    2a50:	6f 93       	push	r22
    2a52:	df 92       	push	r13
    2a54:	cf 92       	push	r12
    2a56:	1f 92       	push	r1
    2a58:	f0 e3       	ldi	r31, 0x30	; 48
    2a5a:	ff 93       	push	r31
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    2a64:	23 e0       	ldi	r18, 0x03	; 3
    2a66:	31 e0       	ldi	r19, 0x01	; 1
    2a68:	49 e6       	ldi	r20, 0x69	; 105
    2a6a:	60 ea       	ldi	r22, 0xA0	; 160
    2a6c:	8f ed       	ldi	r24, 0xDF	; 223
    2a6e:	93 e0       	ldi	r25, 0x03	; 3
    2a70:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2a74:	ed b7       	in	r30, 0x3d	; 61
    2a76:	fe b7       	in	r31, 0x3e	; 62
    2a78:	3a 96       	adiw	r30, 0x0a	; 10
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	fe bf       	out	0x3e, r31	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	ed bf       	out	0x3d, r30	; 61
    2a84:	0e 94 32 0c 	call	0x1864	; 0x1864 <cpu_irq_save>
    2a88:	40 90 84 04 	lds	r4, 0x0484	; 0x800484 <g_adc_light>
    2a8c:	50 90 85 04 	lds	r5, 0x0485	; 0x800485 <g_adc_light+0x1>
    2a90:	60 90 86 04 	lds	r6, 0x0486	; 0x800486 <g_adc_light+0x2>
    2a94:	70 90 87 04 	lds	r7, 0x0487	; 0x800487 <g_adc_light+0x3>
    2a98:	8f bf       	out	0x3f, r24	; 63
    2a9a:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <l_last.3454>
    2a9e:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <l_last.3454+0x1>
    2aa2:	40 91 53 03 	lds	r20, 0x0353	; 0x800353 <l_last.3454+0x2>
    2aa6:	50 91 54 03 	lds	r21, 0x0354	; 0x800354 <l_last.3454+0x3>
    2aaa:	c3 01       	movw	r24, r6
    2aac:	b2 01       	movw	r22, r4
    2aae:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <__subsf3>
    2ab2:	9f 77       	andi	r25, 0x7F	; 127
    2ab4:	2d ec       	ldi	r18, 0xCD	; 205
    2ab6:	3c ec       	ldi	r19, 0xCC	; 204
    2ab8:	4c ec       	ldi	r20, 0xCC	; 204
    2aba:	5d e3       	ldi	r21, 0x3D	; 61
    2abc:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__cmpsf2>
    2ac0:	87 fd       	sbrc	r24, 7
    2ac2:	37 c0       	rjmp	.+110    	; 0x2b32 <lcd_animation_loop+0x300>
    2ac4:	40 92 51 03 	sts	0x0351, r4	; 0x800351 <l_last.3454>
    2ac8:	50 92 52 03 	sts	0x0352, r5	; 0x800352 <l_last.3454+0x1>
    2acc:	60 92 53 03 	sts	0x0353, r6	; 0x800353 <l_last.3454+0x2>
    2ad0:	70 92 54 03 	sts	0x0354, r7	; 0x800354 <l_last.3454+0x3>
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e2       	ldi	r20, 0x20	; 32
    2ada:	51 e4       	ldi	r21, 0x41	; 65
    2adc:	c3 01       	movw	r24, r6
    2ade:	b2 01       	movw	r22, r4
    2ae0:	0e 94 cf 20 	call	0x419e	; 0x419e <__mulsf3>
    2ae4:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__fixsfsi>
    2ae8:	cb 01       	movw	r24, r22
    2aea:	b5 01       	movw	r22, r10
    2aec:	0e 94 52 21 	call	0x42a4	; 0x42a4 <__divmodhi4>
    2af0:	9f 93       	push	r25
    2af2:	8f 93       	push	r24
    2af4:	c3 01       	movw	r24, r6
    2af6:	b2 01       	movw	r22, r4
    2af8:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__fixsfsi>
    2afc:	7f 93       	push	r23
    2afe:	6f 93       	push	r22
    2b00:	ff 92       	push	r15
    2b02:	ef 92       	push	r14
    2b04:	1f 92       	push	r1
    2b06:	f0 e3       	ldi	r31, 0x30	; 48
    2b08:	ff 93       	push	r31
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	0e 94 7d 21 	call	0x42fa	; 0x42fa <snprintf>
    2b12:	23 e0       	ldi	r18, 0x03	; 3
    2b14:	31 e0       	ldi	r19, 0x01	; 1
    2b16:	4f e5       	ldi	r20, 0x5F	; 95
    2b18:	60 ea       	ldi	r22, 0xA0	; 160
    2b1a:	8f ed       	ldi	r24, 0xDF	; 223
    2b1c:	93 e0       	ldi	r25, 0x03	; 3
    2b1e:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2b22:	ed b7       	in	r30, 0x3d	; 61
    2b24:	fe b7       	in	r31, 0x3e	; 62
    2b26:	3a 96       	adiw	r30, 0x0a	; 10
    2b28:	0f b6       	in	r0, 0x3f	; 63
    2b2a:	f8 94       	cli
    2b2c:	fe bf       	out	0x3e, r31	; 62
    2b2e:	0f be       	out	0x3f, r0	; 63
    2b30:	ed bf       	out	0x3d, r30	; 61
    2b32:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <loop.3439>
    2b36:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <loop.3439+0x1>
    2b3a:	f9 01       	movw	r30, r18
    2b3c:	31 96       	adiw	r30, 0x01	; 1
    2b3e:	f0 93 50 03 	sts	0x0350, r31	; 0x800350 <loop.3439+0x1>
    2b42:	e0 93 4f 03 	sts	0x034F, r30	; 0x80034f <loop.3439>
    2b46:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2b4a:	22 31       	cpi	r18, 0x12	; 18
    2b4c:	31 05       	cpc	r19, r1
    2b4e:	6c f4       	brge	.+26     	; 0x2b6a <lcd_animation_loop+0x338>
    2b50:	61 2f       	mov	r22, r17
    2b52:	0e 94 32 21 	call	0x4264	; 0x4264 <__udivmodqi4>
    2b56:	2b e1       	ldi	r18, 0x1B	; 27
    2b58:	2e 1b       	sub	r18, r30
    2b5a:	6a e0       	ldi	r22, 0x0A	; 10
    2b5c:	6e 0f       	add	r22, r30
    2b5e:	09 2f       	mov	r16, r25
    2b60:	4f ee       	ldi	r20, 0xEF	; 239
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2b68:	1d c0       	rjmp	.+58     	; 0x2ba4 <lcd_animation_loop+0x372>
    2b6a:	e2 30       	cpi	r30, 0x02	; 2
    2b6c:	21 e0       	ldi	r18, 0x01	; 1
    2b6e:	f2 07       	cpc	r31, r18
    2b70:	6c f4       	brge	.+26     	; 0x2b8c <lcd_animation_loop+0x35a>
    2b72:	61 2f       	mov	r22, r17
    2b74:	0e 94 32 21 	call	0x4264	; 0x4264 <__udivmodqi4>
    2b78:	41 e0       	ldi	r20, 0x01	; 1
    2b7a:	4e 1b       	sub	r20, r30
    2b7c:	09 2f       	mov	r16, r25
    2b7e:	2a e0       	ldi	r18, 0x0A	; 10
    2b80:	6b e1       	ldi	r22, 0x1B	; 27
    2b82:	8e ee       	ldi	r24, 0xEE	; 238
    2b84:	8e 0f       	add	r24, r30
    2b86:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2b8a:	0c c0       	rjmp	.+24     	; 0x2ba4 <lcd_animation_loop+0x372>
    2b8c:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <loop.3439+0x1>
    2b90:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <loop.3439>
    2b94:	8f 5f       	subi	r24, 0xFF	; 255
    2b96:	83 30       	cpi	r24, 0x03	; 3
    2b98:	18 f4       	brcc	.+6      	; 0x2ba0 <lcd_animation_loop+0x36e>
    2b9a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2b9e:	02 c0       	rjmp	.+4      	; 0x2ba4 <lcd_animation_loop+0x372>
    2ba0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
    2ba4:	0e 94 32 0c 	call	0x1864	; 0x1864 <cpu_irq_save>
    2ba8:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <g_status>
    2bac:	91 70       	andi	r25, 0x01	; 1
    2bae:	8f bf       	out	0x3f, r24	; 63
    2bb0:	6c ce       	rjmp	.-808    	; 0x288a <lcd_animation_loop+0x58>
    2bb2:	0e 94 32 0c 	call	0x1864	; 0x1864 <cpu_irq_save>
    2bb6:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <g_status>
    2bba:	9e 7f       	andi	r25, 0xFE	; 254
    2bbc:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <g_status>
    2bc0:	8f bf       	out	0x3f, r24	; 63
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	1f 91       	pop	r17
    2bc8:	0f 91       	pop	r16
    2bca:	ff 90       	pop	r15
    2bcc:	ef 90       	pop	r14
    2bce:	df 90       	pop	r13
    2bd0:	cf 90       	pop	r12
    2bd2:	bf 90       	pop	r11
    2bd4:	af 90       	pop	r10
    2bd6:	9f 90       	pop	r9
    2bd8:	8f 90       	pop	r8
    2bda:	7f 90       	pop	r7
    2bdc:	6f 90       	pop	r6
    2bde:	5f 90       	pop	r5
    2be0:	4f 90       	pop	r4
    2be2:	3f 90       	pop	r3
    2be4:	2f 90       	pop	r2
    2be6:	08 95       	ret

00002be8 <lcd_test>:
    2be8:	ef 92       	push	r14
    2bea:	ff 92       	push	r15
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	cf 93       	push	r28
    2bf2:	c8 2f       	mov	r28, r24
    2bf4:	0e 94 32 0c 	call	0x1864	; 0x1864 <cpu_irq_save>
    2bf8:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <g_status>
    2bfc:	9e 7f       	andi	r25, 0xFE	; 254
    2bfe:	9d 7f       	andi	r25, 0xFD	; 253
    2c00:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <g_status>
    2c04:	8f bf       	out	0x3f, r24	; 63
    2c06:	c0 fd       	sbrc	r28, 0
    2c08:	03 c0       	rjmp	.+6      	; 0x2c10 <lcd_test+0x28>
    2c0a:	c1 ff       	sbrs	r28, 1
    2c0c:	2a c0       	rjmp	.+84     	; 0x2c62 <lcd_test+0x7a>
    2c0e:	08 c0       	rjmp	.+16     	; 0x2c20 <lcd_test+0x38>
    2c10:	10 e0       	ldi	r17, 0x00	; 0
    2c12:	81 2f       	mov	r24, r17
    2c14:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <lcd_bus_write_ram>
    2c18:	1f 5f       	subi	r17, 0xFF	; 255
    2c1a:	10 3f       	cpi	r17, 0xF0	; 240
    2c1c:	d1 f7       	brne	.-12     	; 0x2c12 <lcd_test+0x2a>
    2c1e:	f5 cf       	rjmp	.-22     	; 0x2c0a <lcd_test+0x22>
    2c20:	82 eb       	ldi	r24, 0xB2	; 178
    2c22:	0e 94 56 0c 	call	0x18ac	; 0x18ac <lcd_bus_write_cmd>
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <s_lcd_ram_read_nonvalid>
    2c2c:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_cr>
    2c30:	00 e0       	ldi	r16, 0x00	; 0
    2c32:	10 e0       	ldi	r17, 0x00	; 0
    2c34:	87 e0       	ldi	r24, 0x07	; 7
    2c36:	e8 2e       	mov	r14, r24
    2c38:	f1 2c       	mov	r15, r1
    2c3a:	c8 01       	movw	r24, r16
    2c3c:	b7 01       	movw	r22, r14
    2c3e:	0e 94 52 21 	call	0x42a4	; 0x42a4 <__divmodhi4>
    2c42:	89 2b       	or	r24, r25
    2c44:	19 f4       	brne	.+6      	; 0x2c4c <lcd_test+0x64>
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <lcd_bus_write_ram>
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	e2 5e       	subi	r30, 0xE2	; 226
    2c50:	fb 4f       	sbci	r31, 0xFB	; 251
    2c52:	84 91       	lpm	r24, Z
    2c54:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <lcd_bus_write_ram>
    2c58:	0f 5f       	subi	r16, 0xFF	; 255
    2c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5c:	00 3f       	cpi	r16, 0xF0	; 240
    2c5e:	11 05       	cpc	r17, r1
    2c60:	61 f7       	brne	.-40     	; 0x2c3a <lcd_test+0x52>
    2c62:	c2 ff       	sbrs	r28, 2
    2c64:	2d c0       	rjmp	.+90     	; 0x2cc0 <lcd_test+0xd8>
    2c66:	41 e0       	ldi	r20, 0x01	; 1
    2c68:	68 e2       	ldi	r22, 0x28	; 40
    2c6a:	84 e0       	ldi	r24, 0x04	; 4
    2c6c:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2c70:	41 e0       	ldi	r20, 0x01	; 1
    2c72:	69 e2       	ldi	r22, 0x29	; 41
    2c74:	85 e0       	ldi	r24, 0x05	; 5
    2c76:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2c7a:	41 e0       	ldi	r20, 0x01	; 1
    2c7c:	6a e2       	ldi	r22, 0x2A	; 42
    2c7e:	86 e0       	ldi	r24, 0x06	; 6
    2c80:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2c84:	41 e0       	ldi	r20, 0x01	; 1
    2c86:	6b e2       	ldi	r22, 0x2B	; 43
    2c88:	87 e0       	ldi	r24, 0x07	; 7
    2c8a:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2c8e:	41 e0       	ldi	r20, 0x01	; 1
    2c90:	6c e2       	ldi	r22, 0x2C	; 44
    2c92:	86 e0       	ldi	r24, 0x06	; 6
    2c94:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2c98:	41 e0       	ldi	r20, 0x01	; 1
    2c9a:	6d e2       	ldi	r22, 0x2D	; 45
    2c9c:	85 e0       	ldi	r24, 0x05	; 5
    2c9e:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2ca2:	41 e0       	ldi	r20, 0x01	; 1
    2ca4:	6e e2       	ldi	r22, 0x2E	; 46
    2ca6:	86 e0       	ldi	r24, 0x06	; 6
    2ca8:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2cac:	41 e0       	ldi	r20, 0x01	; 1
    2cae:	6f e2       	ldi	r22, 0x2F	; 47
    2cb0:	87 e0       	ldi	r24, 0x07	; 7
    2cb2:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2cb6:	41 e0       	ldi	r20, 0x01	; 1
    2cb8:	60 e3       	ldi	r22, 0x30	; 48
    2cba:	88 e0       	ldi	r24, 0x08	; 8
    2cbc:	0e 94 9a 06 	call	0xd34	; 0xd34 <gfx_mono_lcd_uc1608_draw_pixel>
    2cc0:	c3 ff       	sbrs	r28, 3
    2cc2:	07 c0       	rjmp	.+14     	; 0x2cd2 <lcd_test+0xea>
    2cc4:	01 e0       	ldi	r16, 0x01	; 1
    2cc6:	2f e1       	ldi	r18, 0x1F	; 31
    2cc8:	4f ee       	ldi	r20, 0xEF	; 239
    2cca:	60 e1       	ldi	r22, 0x10	; 16
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	0e 94 00 04 	call	0x800	; 0x800 <gfx_mono_generic_draw_line>
    2cd2:	c4 ff       	sbrs	r28, 4
    2cd4:	0d c0       	rjmp	.+26     	; 0x2cf0 <lcd_test+0x108>
    2cd6:	01 e0       	ldi	r16, 0x01	; 1
    2cd8:	28 e2       	ldi	r18, 0x28	; 40
    2cda:	48 e2       	ldi	r20, 0x28	; 40
    2cdc:	60 e3       	ldi	r22, 0x30	; 48
    2cde:	86 e4       	ldi	r24, 0x46	; 70
    2ce0:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_rect>
    2ce4:	28 e2       	ldi	r18, 0x28	; 40
    2ce6:	48 e2       	ldi	r20, 0x28	; 40
    2ce8:	60 e3       	ldi	r22, 0x30	; 48
    2cea:	8a ea       	ldi	r24, 0xAA	; 170
    2cec:	0e 94 92 04 	call	0x924	; 0x924 <gfx_mono_generic_draw_filled_rect>
    2cf0:	c5 ff       	sbrs	r28, 5
    2cf2:	0d c0       	rjmp	.+26     	; 0x2d0e <lcd_test+0x126>
    2cf4:	0f ef       	ldi	r16, 0xFF	; 255
    2cf6:	21 e0       	ldi	r18, 0x01	; 1
    2cf8:	4a e0       	ldi	r20, 0x0A	; 10
    2cfa:	60 e5       	ldi	r22, 0x50	; 80
    2cfc:	8a e0       	ldi	r24, 0x0A	; 10
    2cfe:	0e 94 ac 04 	call	0x958	; 0x958 <gfx_mono_generic_draw_circle>
    2d02:	21 e0       	ldi	r18, 0x01	; 1
    2d04:	4a e0       	ldi	r20, 0x0A	; 10
    2d06:	60 e5       	ldi	r22, 0x50	; 80
    2d08:	88 e2       	ldi	r24, 0x28	; 40
    2d0a:	0e 94 5a 05 	call	0xab4	; 0xab4 <gfx_mono_generic_draw_filled_circle>
    2d0e:	c6 ff       	sbrs	r28, 6
    2d10:	08 c0       	rjmp	.+16     	; 0x2d22 <lcd_test+0x13a>
    2d12:	23 e0       	ldi	r18, 0x03	; 3
    2d14:	31 e0       	ldi	r19, 0x01	; 1
    2d16:	40 e2       	ldi	r20, 0x20	; 32
    2d18:	66 e4       	ldi	r22, 0x46	; 70
    2d1a:	8f e0       	ldi	r24, 0x0F	; 15
    2d1c:	93 e0       	ldi	r25, 0x03	; 3
    2d1e:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    2d22:	c7 ff       	sbrs	r28, 7
    2d24:	0f c0       	rjmp	.+30     	; 0x2d44 <lcd_test+0x15c>
    2d26:	05 dd       	rcall	.-1526   	; 0x2732 <lcd_animation_prepare>
    2d28:	0e 94 32 0c 	call	0x1864	; 0x1864 <cpu_irq_save>
    2d2c:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <g_status>
    2d30:	91 60       	ori	r25, 0x01	; 1
    2d32:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <g_status>
    2d36:	8f bf       	out	0x3f, r24	; 63
    2d38:	cf 91       	pop	r28
    2d3a:	1f 91       	pop	r17
    2d3c:	0f 91       	pop	r16
    2d3e:	ff 90       	pop	r15
    2d40:	ef 90       	pop	r14
    2d42:	77 cd       	rjmp	.-1298   	; 0x2832 <lcd_animation_loop>
    2d44:	cf 91       	pop	r28
    2d46:	1f 91       	pop	r17
    2d48:	0f 91       	pop	r16
    2d4a:	ff 90       	pop	r15
    2d4c:	ef 90       	pop	r14
    2d4e:	08 95       	ret

00002d50 <lcd_get_sysfont>:
    2d50:	83 e0       	ldi	r24, 0x03	; 3
    2d52:	91 e0       	ldi	r25, 0x01	; 1
    2d54:	08 95       	ret

00002d56 <lcd_init>:
    2d56:	82 ee       	ldi	r24, 0xE2	; 226
    2d58:	0e 94 56 0c 	call	0x18ac	; 0x18ac <lcd_bus_write_cmd>
    2d5c:	6b e2       	ldi	r22, 0x2B	; 43
    2d5e:	78 e6       	ldi	r23, 0x68	; 104
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	0e 94 3f 0c 	call	0x187e	; 0x187e <__portable_avr_delay_cycles>
    2d68:	0e 94 4a 0c 	call	0x1894	; 0x1894 <lcd_bus_read_status>
    2d6c:	87 fd       	sbrc	r24, 7
    2d6e:	06 c0       	rjmp	.+12     	; 0x2d7c <lcd_init+0x26>
    2d70:	0e 94 8c 0c 	call	0x1918	; 0x1918 <lcd_enable.part.0>
    2d74:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <lcd_cls>
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	08 95       	ret
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	08 95       	ret

00002d80 <lcd_shutdown>:
    2d80:	82 ee       	ldi	r24, 0xE2	; 226
    2d82:	0e 94 56 0c 	call	0x18ac	; 0x18ac <lcd_bus_write_cmd>
    2d86:	6b e6       	ldi	r22, 0x6B	; 107
    2d88:	7a e0       	ldi	r23, 0x0A	; 10
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <__portable_avr_delay_cycles>

00002d92 <s_twi_tx_done>:
#endif

static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
    2d92:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <s_tx_next_len>
    2d96:	ee 23       	and	r30, r30
    2d98:	51 f0       	breq	.+20     	; 0x2dae <s_twi_tx_done+0x1c>
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	e8 5d       	subi	r30, 0xD8	; 216
    2d9e:	fb 4f       	sbci	r31, 0xFB	; 251
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
			s_tx_d[idx] = s_tx_next_d[idx];
    2da0:	12 92       	st	-Z, r1
static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
    2da2:	84 e0       	ldi	r24, 0x04	; 4
    2da4:	e7 32       	cpi	r30, 0x27	; 39
    2da6:	f8 07       	cpc	r31, r24
    2da8:	d9 f7       	brne	.-10     	; 0x2da0 <s_twi_tx_done+0xe>
			s_tx_d[idx] = s_tx_next_d[idx];
		}
		s_tx_len = s_tx_next_len;
		s_tx_next_len = 0;
    2daa:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <s_tx_next_len>
    2dae:	08 95       	ret

00002db0 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2>:
	uint8_t err = 1;
	// TODO: implementation
	return err;
}

static void s_isr_twi_rcvd_command_closed_form(uint8_t data[], uint8_t cnt)
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
				// do nothing
			}
		}
	}  // if (isGCA)

	else if ((data[0] == TWI_SLAVE_ADDR_SMARTLCD)) {
    2db4:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <s_rx_d>
    2db8:	82 32       	cpi	r24, 0x22	; 34
    2dba:	09 f0       	breq	.+2      	; 0x2dbe <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xe>
    2dbc:	d4 c3       	rjmp	.+1960   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
}

static void s_isr_twi_rcvd_command_closed_form(uint8_t data[], uint8_t cnt)
{
	uint8_t isGCA	= !data[0];
	uint8_t cmd		=  data[1];
    2dbe:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <s_rx_d+0x1>
		}
	}  // if (isGCA)

	else if ((data[0] == TWI_SLAVE_ADDR_SMARTLCD)) {
		/* unique command section for all modes */
		switch (cmd) {
    2dc2:	e2 30       	cpi	r30, 0x02	; 2
    2dc4:	51 f0       	breq	.+20     	; 0x2dda <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x2a>
    2dc6:	e3 30       	cpi	r30, 0x03	; 3
    2dc8:	c9 f0       	breq	.+50     	; 0x2dfc <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x4c>
    2dca:	e1 30       	cpi	r30, 0x01	; 1
    2dcc:	21 f5       	brne	.+72     	; 0x2e16 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x66>
			case TWI_SMART_LCD_CMD_GET_VER:
			s_rx_ret_d[0] = VERSION;
    2dce:	81 e1       	ldi	r24, 0x11	; 17
    2dd0:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <s_rx_ret_d>
			s_rx_ret_len = 1;
    2dd4:	e0 93 14 04 	sts	0x0414, r30	; 0x800414 <s_rx_ret_len>
    2dd8:	c6 c3       	rjmp	.+1932   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
			return;

			case TWI_SMART_LCD_CMD_SET_MODE:
			s_isr_lcd_set_mode(data[2]);
    2dda:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <s_rx_d+0x2>

/* ISR - interrupt disabled functions called within the TWI interrupt handling */

static void s_isr_lcd_set_mode(int8_t mode)
{
	g_SmartLCD_mode = mode;
    2dde:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <g_SmartLCD_mode>
	if (mode) {
    2de2:	88 23       	and	r24, r24
    2de4:	31 f0       	breq	.+12     	; 0x2df2 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x42>
		g_status.doAnimation = false;	// Stop animation demo
    2de6:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <g_status>
    2dea:	8e 7f       	andi	r24, 0xFE	; 254
    2dec:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <g_status>

		} else {
		// Reset display
		lcd_init();
    2df0:	ba c3       	rjmp	.+1908   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
		lcd_test(0b11110001);			// Start animation again
    2df2:	b1 df       	rcall	.-158    	; 0x2d56 <lcd_init>
					// do nothing for unsupported commands
				}
			}  // switch (cmd)
		}  // if (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC)
	}  // if ((data[0] == TWI_SLAVE_ADDR_SMARTLCD))
}
    2df4:	81 ef       	ldi	r24, 0xF1	; 241
		g_status.doAnimation = false;	// Stop animation demo

		} else {
		// Reset display
		lcd_init();
		lcd_test(0b11110001);			// Start animation again
    2df6:	df 91       	pop	r29
    2df8:	cf 91       	pop	r28
			case TWI_SMART_LCD_CMD_SET_MODE:
			s_isr_lcd_set_mode(data[2]);
			return;

			case TWI_SMART_LCD_CMD_GET_STATE:
			s_rx_ret_d[0] = g_showData.cmd ?  0x81 : 0x80;		// (Valid << 7) | (Busy << 0)
    2dfa:	f6 ce       	rjmp	.-532    	; 0x2be8 <lcd_test>
    2dfc:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <g_showData+0x2>
    2e00:	88 23       	and	r24, r24
    2e02:	11 f0       	breq	.+4      	; 0x2e08 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x58>
    2e04:	81 e8       	ldi	r24, 0x81	; 129
    2e06:	01 c0       	rjmp	.+2      	; 0x2e0a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x5a>
    2e08:	80 e8       	ldi	r24, 0x80	; 128
    2e0a:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <s_rx_ret_d>
			s_rx_ret_len = 1;
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <s_rx_ret_len>
			return;

			default:
			s_rx_ret_len = 0;
    2e14:	a8 c3       	rjmp	.+1872   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2e16:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <s_rx_ret_len>
		}

		if (g_SmartLCD_mode == C_SMART_LCD_MODE_SMARTLCD) {
    2e1a:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <g_SmartLCD_mode>
    2e1e:	80 31       	cpi	r24, 0x10	; 16
    2e20:	09 f0       	breq	.+2      	; 0x2e24 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x74>
			if (!(g_showData.cmd)) {							// Do when no command in process only
    2e22:	f6 c1       	rjmp	.+1004   	; 0x3210 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x460>
    2e24:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <g_showData+0x2>
    2e28:	81 11       	cpse	r24, r1
				switch (cmd) {
    2e2a:	9d c3       	rjmp	.+1850   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2e2c:	e2 33       	cpi	r30, 0x32	; 50
    2e2e:	09 f4       	brne	.+2      	; 0x2e32 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x82>
    2e30:	dd c1       	rjmp	.+954    	; 0x31ec <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x43c>
    2e32:	80 f4       	brcc	.+32     	; 0x2e54 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xa4>
    2e34:	e4 31       	cpi	r30, 0x14	; 20
    2e36:	09 f4       	brne	.+2      	; 0x2e3a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x8a>
    2e38:	e4 c1       	rjmp	.+968    	; 0x3202 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x452>
    2e3a:	30 f4       	brcc	.+12     	; 0x2e48 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x98>
    2e3c:	e0 31       	cpi	r30, 0x10	; 16
    2e3e:	09 f0       	breq	.+2      	; 0x2e42 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x92>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    2e40:	92 c3       	rjmp	.+1828   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2e42:	e0 93 38 04 	sts	0x0438, r30	; 0x800438 <g_showData+0x2>
			s_rx_ret_len = 0;
		}

		if (g_SmartLCD_mode == C_SMART_LCD_MODE_SMARTLCD) {
			if (!(g_showData.cmd)) {							// Do when no command in process only
				switch (cmd) {
    2e46:	8f c3       	rjmp	.+1822   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2e48:	e0 32       	cpi	r30, 0x20	; 32
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x9e>
    2e4c:	cf c1       	rjmp	.+926    	; 0x31ec <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x43c>
    2e4e:	e0 33       	cpi	r30, 0x30	; 48
    2e50:	81 f0       	breq	.+32     	; 0x2e72 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xc2>
    2e52:	89 c3       	rjmp	.+1810   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2e54:	e6 33       	cpi	r30, 0x36	; 54
    2e56:	09 f4       	brne	.+2      	; 0x2e5a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xaa>
    2e58:	c9 c1       	rjmp	.+914    	; 0x31ec <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x43c>
    2e5a:	20 f4       	brcc	.+8      	; 0x2e64 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xb4>
    2e5c:	e4 33       	cpi	r30, 0x34	; 52
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xb2>
    2e60:	c5 c1       	rjmp	.+906    	; 0x31ec <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x43c>
    2e62:	81 c3       	rjmp	.+1794   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2e64:	e8 33       	cpi	r30, 0x38	; 56
    2e66:	09 f4       	brne	.+2      	; 0x2e6a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xba>
    2e68:	cc c1       	rjmp	.+920    	; 0x3202 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x452>
    2e6a:	ea 33       	cpi	r30, 0x3A	; 58
    2e6c:	09 f4       	brne	.+2      	; 0x2e70 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xc0>
    2e6e:	c9 c1       	rjmp	.+914    	; 0x3202 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x452>
						s_isr_smartlcd_cmd_data2(cmd, data[2], data[3]);
					break;

					case TWI_SMART_LCD_CMD_WRITE:				// Write text of length (length, buffer...)
					{
						switch (data[2]) {
    2e70:	7a c3       	rjmp	.+1780   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2e72:	e0 91 19 04 	lds	r30, 0x0419	; 0x800419 <s_rx_d+0x2>
    2e76:	8e 2f       	mov	r24, r30
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	31 97       	sbiw	r30, 0x01	; 1
    2e7e:	ed 30       	cpi	r30, 0x0D	; 13
    2e80:	f1 05       	cpc	r31, r1
    2e82:	08 f0       	brcs	.+2      	; 0x2e86 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xd6>
    2e84:	70 c3       	rjmp	.+1760   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2e86:	ec 5c       	subi	r30, 0xCC	; 204
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <s_rx_d+0x3>
    2e8e:	0c 94 65 21 	jmp	0x42ca	; 0x42ca <__tablejump2__>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    2e92:	90 e3       	ldi	r25, 0x30	; 48
    2e94:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    2e98:	91 e0       	ldi	r25, 0x01	; 1
    2e9a:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    2e9e:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
							case 1:
								s_isr_smartlcd_cmd_data2(cmd, data[2], data[3]);
							break;

							case 2:
								s_isr_smartlcd_cmd_data3(cmd, data[2], data[3], data[4]);
    2ea2:	61 c3       	rjmp	.+1730   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2ea4:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    2ea8:	20 e3       	ldi	r18, 0x30	; 48
    2eaa:	20 93 38 04 	sts	0x0438, r18	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    2eae:	22 e0       	ldi	r18, 0x02	; 2
    2eb0:	20 93 39 04 	sts	0x0439, r18	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    2eb4:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    2eb8:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <g_showData+0x5>
							case 2:
								s_isr_smartlcd_cmd_data3(cmd, data[2], data[3], data[4]);
							break;

							case 3:
								s_isr_smartlcd_cmd_data4(cmd, data[2], data[3], data[4], data[5]);
    2ebc:	54 c3       	rjmp	.+1704   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2ebe:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <s_rx_d+0x5>
    2ec2:	20 91 1b 04 	lds	r18, 0x041B	; 0x80041b <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    2ec6:	30 e3       	ldi	r19, 0x30	; 48
    2ec8:	30 93 38 04 	sts	0x0438, r19	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    2ecc:	33 e0       	ldi	r19, 0x03	; 3
    2ece:	30 93 39 04 	sts	0x0439, r19	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    2ed2:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    2ed6:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    2eda:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <g_showData+0x6>
							case 3:
								s_isr_smartlcd_cmd_data4(cmd, data[2], data[3], data[4], data[5]);
							break;

							case 4:
								s_isr_smartlcd_cmd_data5(cmd, data[2], data[3], data[4], data[5], data[6]);
    2ede:	43 c3       	rjmp	.+1670   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2ee0:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <s_rx_d+0x6>
    2ee4:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <s_rx_d+0x5>
    2ee8:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    2eec:	40 e3       	ldi	r20, 0x30	; 48
    2eee:	40 93 38 04 	sts	0x0438, r20	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    2ef2:	44 e0       	ldi	r20, 0x04	; 4
    2ef4:	40 93 39 04 	sts	0x0439, r20	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    2ef8:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    2efc:	30 93 3b 04 	sts	0x043B, r19	; 0x80043b <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    2f00:	20 93 3c 04 	sts	0x043C, r18	; 0x80043c <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    2f04:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <g_showData+0x7>
							case 4:
								s_isr_smartlcd_cmd_data5(cmd, data[2], data[3], data[4], data[5], data[6]);
							break;

							case 5:
								s_isr_smartlcd_cmd_data6(cmd, data[2], data[3], data[4], data[5], data[6], data[7]);
    2f08:	2e c3       	rjmp	.+1628   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2f0a:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <s_rx_d+0x7>
    2f0e:	20 91 1d 04 	lds	r18, 0x041D	; 0x80041d <s_rx_d+0x6>
    2f12:	30 91 1c 04 	lds	r19, 0x041C	; 0x80041c <s_rx_d+0x5>
    2f16:	40 91 1b 04 	lds	r20, 0x041B	; 0x80041b <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    2f1a:	50 e3       	ldi	r21, 0x30	; 48
    2f1c:	50 93 38 04 	sts	0x0438, r21	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    2f20:	55 e0       	ldi	r21, 0x05	; 5
    2f22:	50 93 39 04 	sts	0x0439, r21	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    2f26:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    2f2a:	40 93 3b 04 	sts	0x043B, r20	; 0x80043b <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    2f2e:	30 93 3c 04 	sts	0x043C, r19	; 0x80043c <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    2f32:	20 93 3d 04 	sts	0x043D, r18	; 0x80043d <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    2f36:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <g_showData+0x8>
							case 5:
								s_isr_smartlcd_cmd_data6(cmd, data[2], data[3], data[4], data[5], data[6], data[7]);
							break;

							case 6:
								s_isr_smartlcd_cmd_data7(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8]);
    2f3a:	15 c3       	rjmp	.+1578   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2f3c:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <s_rx_d+0x8>
    2f40:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <s_rx_d+0x7>
    2f44:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <s_rx_d+0x6>
    2f48:	40 91 1c 04 	lds	r20, 0x041C	; 0x80041c <s_rx_d+0x5>
    2f4c:	50 91 1b 04 	lds	r21, 0x041B	; 0x80041b <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    2f50:	60 e3       	ldi	r22, 0x30	; 48
    2f52:	60 93 38 04 	sts	0x0438, r22	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    2f56:	66 e0       	ldi	r22, 0x06	; 6
    2f58:	60 93 39 04 	sts	0x0439, r22	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    2f5c:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    2f60:	50 93 3b 04 	sts	0x043B, r21	; 0x80043b <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    2f64:	40 93 3c 04 	sts	0x043C, r20	; 0x80043c <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    2f68:	30 93 3d 04 	sts	0x043D, r19	; 0x80043d <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    2f6c:	20 93 3e 04 	sts	0x043E, r18	; 0x80043e <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    2f70:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <g_showData+0x9>
							case 6:
								s_isr_smartlcd_cmd_data7(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8]);
							break;

							case 7:
								s_isr_smartlcd_cmd_data8(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9]);
    2f74:	f8 c2       	rjmp	.+1520   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2f76:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <s_rx_d+0x9>
    2f7a:	20 91 1f 04 	lds	r18, 0x041F	; 0x80041f <s_rx_d+0x8>
    2f7e:	30 91 1e 04 	lds	r19, 0x041E	; 0x80041e <s_rx_d+0x7>
    2f82:	40 91 1d 04 	lds	r20, 0x041D	; 0x80041d <s_rx_d+0x6>
    2f86:	50 91 1c 04 	lds	r21, 0x041C	; 0x80041c <s_rx_d+0x5>
    2f8a:	60 91 1b 04 	lds	r22, 0x041B	; 0x80041b <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    2f8e:	70 e3       	ldi	r23, 0x30	; 48
    2f90:	70 93 38 04 	sts	0x0438, r23	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    2f94:	77 e0       	ldi	r23, 0x07	; 7
    2f96:	70 93 39 04 	sts	0x0439, r23	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    2f9a:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    2f9e:	60 93 3b 04 	sts	0x043B, r22	; 0x80043b <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    2fa2:	50 93 3c 04 	sts	0x043C, r21	; 0x80043c <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    2fa6:	40 93 3d 04 	sts	0x043D, r20	; 0x80043d <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    2faa:	30 93 3e 04 	sts	0x043E, r19	; 0x80043e <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    2fae:	20 93 3f 04 	sts	0x043F, r18	; 0x80043f <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    2fb2:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <g_showData+0xa>
							case 7:
								s_isr_smartlcd_cmd_data8(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9]);
							break;

							case 8:
								s_isr_smartlcd_cmd_data9(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10]);
    2fb6:	d7 c2       	rjmp	.+1454   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    2fb8:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <s_rx_d+0xa>
    2fbc:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <s_rx_d+0x9>
    2fc0:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <s_rx_d+0x8>
    2fc4:	40 91 1e 04 	lds	r20, 0x041E	; 0x80041e <s_rx_d+0x7>
    2fc8:	50 91 1d 04 	lds	r21, 0x041D	; 0x80041d <s_rx_d+0x6>
    2fcc:	60 91 1c 04 	lds	r22, 0x041C	; 0x80041c <s_rx_d+0x5>
    2fd0:	70 91 1b 04 	lds	r23, 0x041B	; 0x80041b <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    2fd4:	e0 e3       	ldi	r30, 0x30	; 48
    2fd6:	e0 93 38 04 	sts	0x0438, r30	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    2fda:	e8 e0       	ldi	r30, 0x08	; 8
    2fdc:	e0 93 39 04 	sts	0x0439, r30	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    2fe0:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    2fe4:	70 93 3b 04 	sts	0x043B, r23	; 0x80043b <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    2fe8:	60 93 3c 04 	sts	0x043C, r22	; 0x80043c <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    2fec:	50 93 3d 04 	sts	0x043D, r21	; 0x80043d <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    2ff0:	40 93 3e 04 	sts	0x043E, r20	; 0x80043e <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    2ff4:	30 93 3f 04 	sts	0x043F, r19	; 0x80043f <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    2ff8:	20 93 40 04 	sts	0x0440, r18	; 0x800440 <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    2ffc:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <g_showData+0xb>
							case 8:
								s_isr_smartlcd_cmd_data9(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10]);
							break;

							case 9:
								s_isr_smartlcd_cmd_data10(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11]);
    3000:	b2 c2       	rjmp	.+1380   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3002:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <s_rx_d+0xb>
    3006:	20 91 21 04 	lds	r18, 0x0421	; 0x800421 <s_rx_d+0xa>
    300a:	30 91 20 04 	lds	r19, 0x0420	; 0x800420 <s_rx_d+0x9>
    300e:	40 91 1f 04 	lds	r20, 0x041F	; 0x80041f <s_rx_d+0x8>
    3012:	50 91 1e 04 	lds	r21, 0x041E	; 0x80041e <s_rx_d+0x7>
    3016:	60 91 1d 04 	lds	r22, 0x041D	; 0x80041d <s_rx_d+0x6>
    301a:	70 91 1c 04 	lds	r23, 0x041C	; 0x80041c <s_rx_d+0x5>
    301e:	e0 91 1b 04 	lds	r30, 0x041B	; 0x80041b <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3022:	f0 e3       	ldi	r31, 0x30	; 48
    3024:	f0 93 38 04 	sts	0x0438, r31	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3028:	f9 e0       	ldi	r31, 0x09	; 9
    302a:	f0 93 39 04 	sts	0x0439, r31	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    302e:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    3032:	e0 93 3b 04 	sts	0x043B, r30	; 0x80043b <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    3036:	70 93 3c 04 	sts	0x043C, r23	; 0x80043c <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    303a:	60 93 3d 04 	sts	0x043D, r22	; 0x80043d <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    303e:	50 93 3e 04 	sts	0x043E, r21	; 0x80043e <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    3042:	40 93 3f 04 	sts	0x043F, r20	; 0x80043f <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    3046:	30 93 40 04 	sts	0x0440, r19	; 0x800440 <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    304a:	20 93 41 04 	sts	0x0441, r18	; 0x800441 <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    304e:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <g_showData+0xc>
							case 9:
								s_isr_smartlcd_cmd_data10(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11]);
							break;

							case 10:
								s_isr_smartlcd_cmd_data11(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12]);
    3052:	89 c2       	rjmp	.+1298   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3054:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <s_rx_d+0xc>
    3058:	20 91 22 04 	lds	r18, 0x0422	; 0x800422 <s_rx_d+0xb>
    305c:	30 91 21 04 	lds	r19, 0x0421	; 0x800421 <s_rx_d+0xa>
    3060:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <s_rx_d+0x9>
    3064:	50 91 1f 04 	lds	r21, 0x041F	; 0x80041f <s_rx_d+0x8>
    3068:	60 91 1e 04 	lds	r22, 0x041E	; 0x80041e <s_rx_d+0x7>
    306c:	70 91 1d 04 	lds	r23, 0x041D	; 0x80041d <s_rx_d+0x6>
    3070:	e0 91 1c 04 	lds	r30, 0x041C	; 0x80041c <s_rx_d+0x5>
    3074:	f0 91 1b 04 	lds	r31, 0x041B	; 0x80041b <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3078:	a0 e3       	ldi	r26, 0x30	; 48
    307a:	a0 93 38 04 	sts	0x0438, r26	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    307e:	aa e0       	ldi	r26, 0x0A	; 10
    3080:	a0 93 39 04 	sts	0x0439, r26	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    3084:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    3088:	f0 93 3b 04 	sts	0x043B, r31	; 0x80043b <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    308c:	e0 93 3c 04 	sts	0x043C, r30	; 0x80043c <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    3090:	70 93 3d 04 	sts	0x043D, r23	; 0x80043d <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    3094:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    3098:	50 93 3f 04 	sts	0x043F, r21	; 0x80043f <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    309c:	40 93 40 04 	sts	0x0440, r20	; 0x800440 <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    30a0:	30 93 41 04 	sts	0x0441, r19	; 0x800441 <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    30a4:	20 93 42 04 	sts	0x0442, r18	; 0x800442 <g_showData+0xc>
}

static void s_isr_smartlcd_cmd_data11(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10)
{
	s_isr_smartlcd_cmd_data10(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9);
	g_showData.data[10] = data10;
    30a8:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <g_showData+0xd>
							case 10:
								s_isr_smartlcd_cmd_data11(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12]);
							break;

							case 11:
								s_isr_smartlcd_cmd_data12(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13]);
    30ac:	5c c2       	rjmp	.+1208   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    30ae:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <s_rx_d+0xd>
    30b2:	20 91 23 04 	lds	r18, 0x0423	; 0x800423 <s_rx_d+0xc>
    30b6:	30 91 22 04 	lds	r19, 0x0422	; 0x800422 <s_rx_d+0xb>
    30ba:	40 91 21 04 	lds	r20, 0x0421	; 0x800421 <s_rx_d+0xa>
    30be:	50 91 20 04 	lds	r21, 0x0420	; 0x800420 <s_rx_d+0x9>
    30c2:	60 91 1f 04 	lds	r22, 0x041F	; 0x80041f <s_rx_d+0x8>
    30c6:	70 91 1e 04 	lds	r23, 0x041E	; 0x80041e <s_rx_d+0x7>
    30ca:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <s_rx_d+0x6>
    30ce:	f0 91 1c 04 	lds	r31, 0x041C	; 0x80041c <s_rx_d+0x5>
    30d2:	a0 91 1b 04 	lds	r26, 0x041B	; 0x80041b <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    30d6:	b0 e3       	ldi	r27, 0x30	; 48
    30d8:	b0 93 38 04 	sts	0x0438, r27	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    30dc:	bb e0       	ldi	r27, 0x0B	; 11
    30de:	b0 93 39 04 	sts	0x0439, r27	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    30e2:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    30e6:	a0 93 3b 04 	sts	0x043B, r26	; 0x80043b <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    30ea:	f0 93 3c 04 	sts	0x043C, r31	; 0x80043c <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    30ee:	e0 93 3d 04 	sts	0x043D, r30	; 0x80043d <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    30f2:	70 93 3e 04 	sts	0x043E, r23	; 0x80043e <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    30f6:	60 93 3f 04 	sts	0x043F, r22	; 0x80043f <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    30fa:	50 93 40 04 	sts	0x0440, r21	; 0x800440 <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    30fe:	40 93 41 04 	sts	0x0441, r20	; 0x800441 <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    3102:	30 93 42 04 	sts	0x0442, r19	; 0x800442 <g_showData+0xc>
}

static void s_isr_smartlcd_cmd_data11(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10)
{
	s_isr_smartlcd_cmd_data10(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9);
	g_showData.data[10] = data10;
    3106:	20 93 43 04 	sts	0x0443, r18	; 0x800443 <g_showData+0xd>
}

static void s_isr_smartlcd_cmd_data12(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11)
{
	s_isr_smartlcd_cmd_data11(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10);
	g_showData.data[11] = data11;
    310a:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <g_showData+0xe>
							case 11:
								s_isr_smartlcd_cmd_data12(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13]);
							break;

							case 12:
								s_isr_smartlcd_cmd_data13(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13], data[14]);
    310e:	2b c2       	rjmp	.+1110   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3110:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <s_rx_d+0xe>
    3114:	20 91 24 04 	lds	r18, 0x0424	; 0x800424 <s_rx_d+0xd>
    3118:	30 91 23 04 	lds	r19, 0x0423	; 0x800423 <s_rx_d+0xc>
    311c:	40 91 22 04 	lds	r20, 0x0422	; 0x800422 <s_rx_d+0xb>
    3120:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <s_rx_d+0xa>
    3124:	60 91 20 04 	lds	r22, 0x0420	; 0x800420 <s_rx_d+0x9>
    3128:	70 91 1f 04 	lds	r23, 0x041F	; 0x80041f <s_rx_d+0x8>
    312c:	e0 91 1e 04 	lds	r30, 0x041E	; 0x80041e <s_rx_d+0x7>
    3130:	f0 91 1d 04 	lds	r31, 0x041D	; 0x80041d <s_rx_d+0x6>
    3134:	a0 91 1c 04 	lds	r26, 0x041C	; 0x80041c <s_rx_d+0x5>
    3138:	b0 91 1b 04 	lds	r27, 0x041B	; 0x80041b <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    313c:	c0 e3       	ldi	r28, 0x30	; 48
    313e:	c0 93 38 04 	sts	0x0438, r28	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    3142:	cc e0       	ldi	r28, 0x0C	; 12
    3144:	c0 93 39 04 	sts	0x0439, r28	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    3148:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    314c:	b0 93 3b 04 	sts	0x043B, r27	; 0x80043b <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    3150:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    3154:	f0 93 3d 04 	sts	0x043D, r31	; 0x80043d <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    3158:	e0 93 3e 04 	sts	0x043E, r30	; 0x80043e <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    315c:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    3160:	60 93 40 04 	sts	0x0440, r22	; 0x800440 <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    3164:	50 93 41 04 	sts	0x0441, r21	; 0x800441 <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    3168:	40 93 42 04 	sts	0x0442, r20	; 0x800442 <g_showData+0xc>
}

static void s_isr_smartlcd_cmd_data11(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10)
{
	s_isr_smartlcd_cmd_data10(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9);
	g_showData.data[10] = data10;
    316c:	30 93 43 04 	sts	0x0443, r19	; 0x800443 <g_showData+0xd>
}

static void s_isr_smartlcd_cmd_data12(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11)
{
	s_isr_smartlcd_cmd_data11(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10);
	g_showData.data[11] = data11;
    3170:	20 93 44 04 	sts	0x0444, r18	; 0x800444 <g_showData+0xe>
}

static void s_isr_smartlcd_cmd_data13(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11, uint8_t data12)
{
	s_isr_smartlcd_cmd_data12(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11);
	g_showData.data[12] = data12;
    3174:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <g_showData+0xf>
							case 12:
								s_isr_smartlcd_cmd_data13(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13], data[14]);
							break;

							case 13:
								s_isr_smartlcd_cmd_data14(cmd, data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);
    3178:	f6 c1       	rjmp	.+1004   	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    317a:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <s_rx_d+0xf>
    317e:	20 91 25 04 	lds	r18, 0x0425	; 0x800425 <s_rx_d+0xe>
    3182:	30 91 24 04 	lds	r19, 0x0424	; 0x800424 <s_rx_d+0xd>
    3186:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <s_rx_d+0xc>
    318a:	50 91 22 04 	lds	r21, 0x0422	; 0x800422 <s_rx_d+0xb>
    318e:	60 91 21 04 	lds	r22, 0x0421	; 0x800421 <s_rx_d+0xa>
    3192:	70 91 20 04 	lds	r23, 0x0420	; 0x800420 <s_rx_d+0x9>
    3196:	e0 91 1f 04 	lds	r30, 0x041F	; 0x80041f <s_rx_d+0x8>
    319a:	f0 91 1e 04 	lds	r31, 0x041E	; 0x80041e <s_rx_d+0x7>
    319e:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <s_rx_d+0x6>
    31a2:	b0 91 1c 04 	lds	r27, 0x041C	; 0x80041c <s_rx_d+0x5>
    31a6:	c0 91 1b 04 	lds	r28, 0x041B	; 0x80041b <s_rx_d+0x4>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    31aa:	d0 e3       	ldi	r29, 0x30	; 48
    31ac:	d0 93 38 04 	sts	0x0438, r29	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    31b0:	dd e0       	ldi	r29, 0x0D	; 13
    31b2:	d0 93 39 04 	sts	0x0439, r29	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    31b6:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
}

static void s_isr_smartlcd_cmd_data3(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2)
{
	s_isr_smartlcd_cmd_data2(cmd, data0, data1);
	g_showData.data[2] = data2;
    31ba:	c0 93 3b 04 	sts	0x043B, r28	; 0x80043b <g_showData+0x5>
}

static void s_isr_smartlcd_cmd_data4(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3)
{
	s_isr_smartlcd_cmd_data3(cmd, data0, data1, data2);
	g_showData.data[3] = data3;
    31be:	b0 93 3c 04 	sts	0x043C, r27	; 0x80043c <g_showData+0x6>
}

static void s_isr_smartlcd_cmd_data5(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4)
{
	s_isr_smartlcd_cmd_data4(cmd, data0, data1, data2, data3);
	g_showData.data[4] = data4;
    31c2:	a0 93 3d 04 	sts	0x043D, r26	; 0x80043d <g_showData+0x7>
}

static void s_isr_smartlcd_cmd_data6(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5)
{
	s_isr_smartlcd_cmd_data5(cmd, data0, data1, data2, data3, data4);
	g_showData.data[5] = data5;
    31c6:	f0 93 3e 04 	sts	0x043E, r31	; 0x80043e <g_showData+0x8>
}

static void s_isr_smartlcd_cmd_data7(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6)
{
	s_isr_smartlcd_cmd_data6(cmd, data0, data1, data2, data3, data4, data5);
	g_showData.data[6] = data6;
    31ca:	e0 93 3f 04 	sts	0x043F, r30	; 0x80043f <g_showData+0x9>
}

static void s_isr_smartlcd_cmd_data8(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7)
{
	s_isr_smartlcd_cmd_data7(cmd, data0, data1, data2, data3, data4, data5, data6);
	g_showData.data[7] = data7;
    31ce:	70 93 40 04 	sts	0x0440, r23	; 0x800440 <g_showData+0xa>
}

static void s_isr_smartlcd_cmd_data9(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8)
{
	s_isr_smartlcd_cmd_data8(cmd, data0, data1, data2, data3, data4, data5, data6, data7);
	g_showData.data[8] = data8;
    31d2:	60 93 41 04 	sts	0x0441, r22	; 0x800441 <g_showData+0xb>
}

static void s_isr_smartlcd_cmd_data10(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9)
{
	s_isr_smartlcd_cmd_data9(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8);
	g_showData.data[9] = data9;
    31d6:	50 93 42 04 	sts	0x0442, r21	; 0x800442 <g_showData+0xc>
}

static void s_isr_smartlcd_cmd_data11(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10)
{
	s_isr_smartlcd_cmd_data10(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9);
	g_showData.data[10] = data10;
    31da:	40 93 43 04 	sts	0x0443, r20	; 0x800443 <g_showData+0xd>
}

static void s_isr_smartlcd_cmd_data12(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11)
{
	s_isr_smartlcd_cmd_data11(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10);
	g_showData.data[11] = data11;
    31de:	30 93 44 04 	sts	0x0444, r19	; 0x800444 <g_showData+0xe>
}

static void s_isr_smartlcd_cmd_data13(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11, uint8_t data12)
{
	s_isr_smartlcd_cmd_data12(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11);
	g_showData.data[12] = data12;
    31e2:	20 93 45 04 	sts	0x0445, r18	; 0x800445 <g_showData+0xf>
}

static void s_isr_smartlcd_cmd_data14(uint8_t cmd, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4, uint8_t data5, uint8_t data6, uint8_t data7, uint8_t data8, uint8_t data9, uint8_t data10, uint8_t data11, uint8_t data12, uint8_t data13)
{
	s_isr_smartlcd_cmd_data13(cmd, data0, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12);
	g_showData.data[13] = data13;
    31e6:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <g_showData+0x10>
					case TWI_SMART_LCD_CMD_DRAW_RECT:			// Draw rectangular frame with pencil's start position with dimension (width, height)
						s_isr_smartlcd_cmd_data2(cmd, data[2], data[3]);
					break;

					case TWI_SMART_LCD_CMD_DRAW_FILLED_RECT:	// Draw filled rectangular frame with pencil's start position with dimension (width, height)
						s_isr_smartlcd_cmd_data2(cmd, data[2], data[3]);
    31ea:	bd c1       	rjmp	.+890    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    31ec:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <s_rx_d+0x3>
    31f0:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <s_rx_d+0x2>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    31f4:	e0 93 38 04 	sts	0x0438, r30	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    31f8:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <g_showData+0x3>
}

static void s_isr_smartlcd_cmd_data2(uint8_t cmd, uint8_t data0, uint8_t data1)
{
	s_isr_smartlcd_cmd_data1(cmd, data0);
	g_showData.data[1] = data1;
    31fc:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <g_showData+0x4>
					case TWI_SMART_LCD_CMD_DRAW_CIRC:			// Draw circle or ellipse from the pencil's center point with (radius)
						s_isr_smartlcd_cmd_data1(cmd, data[2]);
					break;

					case TWI_SMART_LCD_CMD_DRAW_FILLED_CIRC:	// Draw filled circle or ellipse from the pencil's center point with (radius)
						s_isr_smartlcd_cmd_data1(cmd, data[2]);
    3200:	b2 c1       	rjmp	.+868    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3202:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <s_rx_d+0x2>
}


static void s_isr_smartlcd_cmd(uint8_t cmd)
{
	g_showData.cmd = cmd;
    3206:	e0 93 38 04 	sts	0x0438, r30	; 0x800438 <g_showData+0x2>
}

static void s_isr_smartlcd_cmd_data1(uint8_t cmd, uint8_t data0)
{
	s_isr_smartlcd_cmd(cmd);
	g_showData.data[0] = data0;
    320a:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <g_showData+0x3>
					}
				}  // switch (cmd)
			}  // if (!(g_showData.cmd))
		}  // if (g_SmartLCD_mode == C_SMART_LCD_MODE_SMARTLCD)

		else if (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC) {
    320e:	ab c1       	rjmp	.+854    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3210:	80 32       	cpi	r24, 0x20	; 32
    3212:	09 f0       	breq	.+2      	; 0x3216 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x466>
			switch (cmd) {
    3214:	a8 c1       	rjmp	.+848    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3216:	8e 2f       	mov	r24, r30
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	fc 01       	movw	r30, r24
    321c:	e0 58       	subi	r30, 0x80	; 128
    321e:	f1 09       	sbc	r31, r1
    3220:	ee 30       	cpi	r30, 0x0E	; 14
    3222:	f1 05       	cpc	r31, r1
    3224:	08 f0       	brcs	.+2      	; 0x3228 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x478>
    3226:	9f c1       	rjmp	.+830    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3228:	ef 5b       	subi	r30, 0xBF	; 191
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	0c 94 65 21 	jmp	0x42ca	; 0x42ca <__tablejump2__>
				case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
					s_isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100(data[2], (uint16_t) (data[3] | (data[4] << 8)), (int16_t) (data[5] | (data[6] << 8)));
    3230:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <s_rx_d+0x5>
    3234:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <s_rx_d+0x6>
    3238:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <s_rx_d+0x3>
    323c:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <s_rx_d+0x4>
    3240:	40 91 19 04 	lds	r20, 0x0419	; 0x800419 <s_rx_d+0x2>


static void s_isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100(uint8_t clk_state, uint16_t phaseVolt1000, int16_t phaseDeg100)
{
	// interrupt is already disabled, here
	if ((g_showData.clkState_clk_state     != clk_state    )  ||
    3244:	50 91 60 04 	lds	r21, 0x0460	; 0x800460 <g_showData+0x2a>
    3248:	45 13       	cpse	r20, r21
    324a:	0f c0       	rjmp	.+30     	; 0x326a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x4ba>
    324c:	60 91 4c 04 	lds	r22, 0x044C	; 0x80044c <g_showData+0x16>
    3250:	70 91 4d 04 	lds	r23, 0x044D	; 0x80044d <g_showData+0x17>
    3254:	62 17       	cp	r22, r18
    3256:	73 07       	cpc	r23, r19
	(g_showData.clkState_phaseVolt1000 != phaseVolt1000)  ||
    3258:	41 f4       	brne	.+16     	; 0x326a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x4ba>
    325a:	60 91 4e 04 	lds	r22, 0x044E	; 0x80044e <g_showData+0x18>
    325e:	70 91 4f 04 	lds	r23, 0x044F	; 0x80044f <g_showData+0x19>
    3262:	86 17       	cp	r24, r22
    3264:	97 07       	cpc	r25, r23
    3266:	09 f4       	brne	.+2      	; 0x326a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x4ba>
	(g_showData.clkState_phaseDeg100   != phaseDeg100  )) {
		g_showData.newClkState            = true;
    3268:	7e c1       	rjmp	.+764    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    326a:	50 91 36 04 	lds	r21, 0x0436	; 0x800436 <g_showData>
    326e:	51 60       	ori	r21, 0x01	; 1
    3270:	50 93 36 04 	sts	0x0436, r21	; 0x800436 <g_showData>
		g_showData.clkState_clk_state     = clk_state;
    3274:	40 93 60 04 	sts	0x0460, r20	; 0x800460 <g_showData+0x2a>
		g_showData.clkState_phaseVolt1000 = phaseVolt1000;
    3278:	30 93 4d 04 	sts	0x044D, r19	; 0x80044d <g_showData+0x17>
    327c:	20 93 4c 04 	sts	0x044C, r18	; 0x80044c <g_showData+0x16>
		g_showData.clkState_phaseDeg100   = phaseDeg100;
    3280:	90 93 4f 04 	sts	0x044F, r25	; 0x80044f <g_showData+0x19>
    3284:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <g_showData+0x18>
				case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
					s_isr_lcd_10mhz_ref_osc_show_clkstate_phaseVolt1000_phaseDeg100(data[2], (uint16_t) (data[3] | (data[4] << 8)), (int16_t) (data[5] | (data[6] << 8)));
				break;

				case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
					s_isr_lcd_10mhz_ref_osc_show_date(data[2] | (data[3] << 8), data[4], data[5]);
    3288:	6e c1       	rjmp	.+732    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    328a:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <s_rx_d+0x5>
    328e:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <s_rx_d+0x4>
    3292:	40 91 19 04 	lds	r20, 0x0419	; 0x800419 <s_rx_d+0x2>
    3296:	50 91 1a 04 	lds	r21, 0x041A	; 0x80041a <s_rx_d+0x3>
}

static void s_isr_lcd_10mhz_ref_osc_show_date(uint16_t year, int8_t month, uint8_t day)
{
	// interrupt is already disabled, here
	if (g_showData.date_year != year ||
    329a:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <g_showData+0x1a>
    329e:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <g_showData+0x1b>
    32a2:	84 17       	cp	r24, r20
    32a4:	95 07       	cpc	r25, r21
    32a6:	79 f4       	brne	.+30     	; 0x32c6 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x516>
    32a8:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <g_showData+0x2b>
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	63 2f       	mov	r22, r19
    32b0:	03 2e       	mov	r0, r19
    32b2:	00 0c       	add	r0, r0
    32b4:	77 0b       	sbc	r23, r23
    32b6:	86 17       	cp	r24, r22
    32b8:	97 07       	cpc	r25, r23
	g_showData.date_month != month ||
    32ba:	29 f4       	brne	.+10     	; 0x32c6 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x516>
    32bc:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <g_showData+0x2c>
    32c0:	28 17       	cp	r18, r24
    32c2:	09 f4       	brne	.+2      	; 0x32c6 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x516>
	g_showData.date_day != day) {
		g_showData.newDate = true;
    32c4:	50 c1       	rjmp	.+672    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    32c6:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <g_showData>
    32ca:	82 60       	ori	r24, 0x02	; 2
    32cc:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <g_showData>
		g_showData.date_year = year;
    32d0:	50 93 51 04 	sts	0x0451, r21	; 0x800451 <g_showData+0x1b>
    32d4:	40 93 50 04 	sts	0x0450, r20	; 0x800450 <g_showData+0x1a>
		g_showData.date_month = month;
    32d8:	30 93 61 04 	sts	0x0461, r19	; 0x800461 <g_showData+0x2b>
		g_showData.date_day = day;
    32dc:	20 93 62 04 	sts	0x0462, r18	; 0x800462 <g_showData+0x2c>
				case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
					s_isr_lcd_10mhz_ref_osc_show_date(data[2] | (data[3] << 8), data[4], data[5]);
				break;

				case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
					s_isr_lcd_10mhz_ref_osc_show_time(data[2], data[3], data[4]);
    32e0:	42 c1       	rjmp	.+644    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    32e2:	20 91 1b 04 	lds	r18, 0x041B	; 0x80041b <s_rx_d+0x4>
    32e6:	30 91 1a 04 	lds	r19, 0x041A	; 0x80041a <s_rx_d+0x3>
    32ea:	40 91 19 04 	lds	r20, 0x0419	; 0x800419 <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_time(uint8_t hour, int8_t minute, uint8_t second)
{
	// interrupt is already disabled, here
	if (g_showData.time_hour != hour ||
    32ee:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <g_showData+0x2d>
    32f2:	48 13       	cpse	r20, r24
    32f4:	0f c0       	rjmp	.+30     	; 0x3314 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x564>
    32f6:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <g_showData+0x2e>
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	63 2f       	mov	r22, r19
    32fe:	03 2e       	mov	r0, r19
    3300:	00 0c       	add	r0, r0
    3302:	77 0b       	sbc	r23, r23
    3304:	86 17       	cp	r24, r22
    3306:	97 07       	cpc	r25, r23
	g_showData.time_minute != minute ||
    3308:	29 f4       	brne	.+10     	; 0x3314 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x564>
    330a:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <g_showData+0x2f>
    330e:	28 17       	cp	r18, r24
    3310:	09 f4       	brne	.+2      	; 0x3314 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x564>
	g_showData.time_second != second) {
		g_showData.newTime = true;
    3312:	29 c1       	rjmp	.+594    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3314:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <g_showData>
    3318:	84 60       	ori	r24, 0x04	; 4
    331a:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <g_showData>
		g_showData.time_hour = hour;
    331e:	40 93 63 04 	sts	0x0463, r20	; 0x800463 <g_showData+0x2d>
		g_showData.time_minute = minute;
    3322:	30 93 64 04 	sts	0x0464, r19	; 0x800464 <g_showData+0x2e>
		g_showData.time_second = second;
    3326:	20 93 65 04 	sts	0x0465, r18	; 0x800465 <g_showData+0x2f>
    332a:	1d c1       	rjmp	.+570    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    332c:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <s_rx_d+0x4>
    3330:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <s_rx_d+0x5>
				case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
					s_isr_lcd_10mhz_ref_osc_show_time(data[2], data[3], data[4]);
				break;

				case TWI_SMART_LCD_CMD_SHOW_PPB:
					s_isr_lcd_10mhz_ref_osc_show_ppm((int16_t) (data[2] | (data[3] << 8)), data[4] | (data[5] << 8));
    3334:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <s_rx_d+0x2>
    3338:	30 91 1a 04 	lds	r19, 0x041A	; 0x80041a <s_rx_d+0x3>
}

static void s_isr_lcd_10mhz_ref_osc_show_ppm(int16_t ppm_int, uint16_t ppm_frac1000)
{
	// interrupt is already disabled, here
	if (g_showData.ppb_int != ppm_int ||
    333c:	40 91 52 04 	lds	r20, 0x0452	; 0x800452 <g_showData+0x1c>
    3340:	50 91 53 04 	lds	r21, 0x0453	; 0x800453 <g_showData+0x1d>
    3344:	24 17       	cp	r18, r20
    3346:	35 07       	cpc	r19, r21
    3348:	41 f4       	brne	.+16     	; 0x335a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x5aa>
    334a:	40 91 54 04 	lds	r20, 0x0454	; 0x800454 <g_showData+0x1e>
    334e:	50 91 55 04 	lds	r21, 0x0455	; 0x800455 <g_showData+0x1f>
    3352:	48 17       	cp	r20, r24
    3354:	59 07       	cpc	r21, r25
    3356:	09 f4       	brne	.+2      	; 0x335a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x5aa>
	g_showData.ppb_frac1000 != ppm_frac1000) {
		g_showData.newPpb = true;
    3358:	06 c1       	rjmp	.+524    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    335a:	40 91 36 04 	lds	r20, 0x0436	; 0x800436 <g_showData>
    335e:	48 60       	ori	r20, 0x08	; 8
    3360:	40 93 36 04 	sts	0x0436, r20	; 0x800436 <g_showData>
		g_showData.ppb_int = ppm_int;
    3364:	30 93 53 04 	sts	0x0453, r19	; 0x800453 <g_showData+0x1d>
    3368:	20 93 52 04 	sts	0x0452, r18	; 0x800452 <g_showData+0x1c>
		g_showData.ppb_frac1000 = ppm_frac1000;
    336c:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <g_showData+0x1f>
    3370:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <g_showData+0x1e>
				case TWI_SMART_LCD_CMD_SHOW_PPB:
					s_isr_lcd_10mhz_ref_osc_show_ppm((int16_t) (data[2] | (data[3] << 8)), data[4] | (data[5] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
					s_isr_lcd_10mhz_ref_osc_show_pwm(data[2], data[3]);
    3374:	f8 c0       	rjmp	.+496    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3376:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <s_rx_d+0x3>
    337a:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pwm(uint8_t pwm_int, uint8_t pwm_frac256)
{
	// interrupt is already disabled, here
	if (g_showData.pwm_int != pwm_int ||
    337e:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <g_showData+0x30>
    3382:	92 13       	cpse	r25, r18
    3384:	05 c0       	rjmp	.+10     	; 0x3390 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x5e0>
    3386:	20 91 67 04 	lds	r18, 0x0467	; 0x800467 <g_showData+0x31>
    338a:	82 17       	cp	r24, r18
    338c:	09 f4       	brne	.+2      	; 0x3390 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x5e0>
	g_showData.pwm_frac256 != pwm_frac256) {
		g_showData.newPwm = true;
    338e:	eb c0       	rjmp	.+470    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3390:	20 91 36 04 	lds	r18, 0x0436	; 0x800436 <g_showData>
    3394:	20 61       	ori	r18, 0x10	; 16
    3396:	20 93 36 04 	sts	0x0436, r18	; 0x800436 <g_showData>
		g_showData.pwm_int = pwm_int;
    339a:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <g_showData+0x30>
		g_showData.pwm_frac256 = pwm_frac256;
    339e:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <g_showData+0x31>
    33a2:	e1 c0       	rjmp	.+450    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    33a4:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <s_rx_d+0x3>
    33a8:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <s_rx_d+0x4>
				case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
					s_isr_lcd_10mhz_ref_osc_show_pwm(data[2], data[3]);
				break;

				case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
					s_isr_lcd_10mhz_ref_osc_show_pv(data[2], data[3] | (data[4] << 8));
    33ac:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pv(uint8_t pv_int, uint16_t pv_frac1000)
{
	// interrupt is already disabled, here
	if (g_showData.pv_int != pv_int ||
    33b0:	30 91 68 04 	lds	r19, 0x0468	; 0x800468 <g_showData+0x32>
    33b4:	23 13       	cpse	r18, r19
    33b6:	08 c0       	rjmp	.+16     	; 0x33c8 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x618>
    33b8:	40 91 56 04 	lds	r20, 0x0456	; 0x800456 <g_showData+0x20>
    33bc:	50 91 57 04 	lds	r21, 0x0457	; 0x800457 <g_showData+0x21>
    33c0:	48 17       	cp	r20, r24
    33c2:	59 07       	cpc	r21, r25
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x618>
	g_showData.pv_frac1000 != pv_frac1000) {
		g_showData.newPv = true;
    33c6:	cf c0       	rjmp	.+414    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    33c8:	30 91 36 04 	lds	r19, 0x0436	; 0x800436 <g_showData>
    33cc:	30 62       	ori	r19, 0x20	; 32
    33ce:	30 93 36 04 	sts	0x0436, r19	; 0x800436 <g_showData>
		g_showData.pv_int = pv_int;
    33d2:	20 93 68 04 	sts	0x0468, r18	; 0x800468 <g_showData+0x32>
		g_showData.pv_frac1000 = pv_frac1000;
    33d6:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <g_showData+0x21>
    33da:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <g_showData+0x20>
				case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
					s_isr_lcd_10mhz_ref_osc_show_pv(data[2], data[3] | (data[4] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_SATS:
					s_isr_lcd_10mhz_ref_osc_show_sat_use(data[2], data[3], data[4]);
    33de:	c3 c0       	rjmp	.+390    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    33e0:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <s_rx_d+0x4>
    33e4:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <s_rx_d+0x3>
    33e8:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_sat_use(uint8_t sat_west, uint8_t sat_east, uint8_t sat_used)
{
	// interrupt is already disabled, here
	if (g_showData.satUse_west != sat_west ||
    33ec:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <g_showData+0x33>
    33f0:	23 13       	cpse	r18, r19
    33f2:	09 c0       	rjmp	.+18     	; 0x3406 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x656>
    33f4:	30 91 6a 04 	lds	r19, 0x046A	; 0x80046a <g_showData+0x34>
    33f8:	93 13       	cpse	r25, r19
	g_showData.satUse_east != sat_east ||
    33fa:	05 c0       	rjmp	.+10     	; 0x3406 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x656>
    33fc:	30 91 6b 04 	lds	r19, 0x046B	; 0x80046b <g_showData+0x35>
    3400:	83 17       	cp	r24, r19
    3402:	09 f4       	brne	.+2      	; 0x3406 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x656>
	g_showData.satUse_used != sat_used) {
		g_showData.newSatUse = true;
    3404:	b0 c0       	rjmp	.+352    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3406:	30 91 36 04 	lds	r19, 0x0436	; 0x800436 <g_showData>
    340a:	30 64       	ori	r19, 0x40	; 64
    340c:	30 93 36 04 	sts	0x0436, r19	; 0x800436 <g_showData>
		g_showData.satUse_west = sat_west;
    3410:	20 93 69 04 	sts	0x0469, r18	; 0x800469 <g_showData+0x33>
		g_showData.satUse_east = sat_east;
    3414:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <g_showData+0x34>
		g_showData.satUse_used = sat_used;
    3418:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <g_showData+0x35>
    341c:	a4 c0       	rjmp	.+328    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    341e:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <s_rx_d+0x2>
    3422:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <s_rx_d+0x3>
}

static void s_isr_lcd_10mhz_ref_osc_show_sat_dop(uint16_t sat_dop100)
{
	// interrupt is already disabled, here
	if (g_showData.satDop_dop100 != sat_dop100) {
    3426:	20 91 58 04 	lds	r18, 0x0458	; 0x800458 <g_showData+0x22>
    342a:	30 91 59 04 	lds	r19, 0x0459	; 0x800459 <g_showData+0x23>
    342e:	28 17       	cp	r18, r24
    3430:	39 07       	cpc	r19, r25
    3432:	09 f4       	brne	.+2      	; 0x3436 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x686>
		g_showData.newSatDop = true;
    3434:	98 c0       	rjmp	.+304    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3436:	20 91 36 04 	lds	r18, 0x0436	; 0x800436 <g_showData>
    343a:	20 68       	ori	r18, 0x80	; 128
    343c:	20 93 36 04 	sts	0x0436, r18	; 0x800436 <g_showData>
		g_showData.satDop_dop100 = sat_dop100;
    3440:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <g_showData+0x23>
    3444:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <g_showData+0x22>
				case TWI_SMART_LCD_CMD_SHOW_DOP:
					s_isr_lcd_10mhz_ref_osc_show_sat_dop(data[2] | (data[3] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
					s_isr_lcd_10mhz_ref_osc_show_pos_state(data[2], data[3]);
    3448:	8e c0       	rjmp	.+284    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    344a:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <s_rx_d+0x3>
    344e:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pos_state(uint8_t state_fi, uint8_t state_m2)
{
	// interrupt is already disabled, here
	if (g_showData.posState_fi != state_fi ||
    3452:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <g_showData+0x36>
    3456:	92 13       	cpse	r25, r18
    3458:	05 c0       	rjmp	.+10     	; 0x3464 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x6b4>
    345a:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <g_showData+0x37>
    345e:	82 17       	cp	r24, r18
    3460:	09 f4       	brne	.+2      	; 0x3464 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x6b4>
	g_showData.posState_m2 != state_m2) {
		g_showData.newPosState = true;
    3462:	81 c0       	rjmp	.+258    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3464:	20 91 37 04 	lds	r18, 0x0437	; 0x800437 <g_showData+0x1>
    3468:	21 60       	ori	r18, 0x01	; 1
    346a:	20 93 37 04 	sts	0x0437, r18	; 0x800437 <g_showData+0x1>
		g_showData.posState_fi = state_fi;
    346e:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <g_showData+0x36>
		g_showData.posState_m2 = state_m2;
    3472:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <g_showData+0x37>
    3476:	77 c0       	rjmp	.+238    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3478:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <s_rx_d+0x5>
    347c:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <s_rx_d+0x6>
				case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
					s_isr_lcd_10mhz_ref_osc_show_pos_state(data[2], data[3]);
				break;

				case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
					s_isr_lcd_10mhz_ref_osc_show_pos_lat(data[2], data[3], data[4], data[5] | (data[6] << 8));
    3480:	20 91 1b 04 	lds	r18, 0x041B	; 0x80041b <s_rx_d+0x4>
    3484:	30 91 1a 04 	lds	r19, 0x041A	; 0x80041a <s_rx_d+0x3>
    3488:	40 91 19 04 	lds	r20, 0x0419	; 0x800419 <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pos_lat(uint8_t lat_sgn, uint8_t lat_deg, uint8_t lat_min_int, uint16_t lat_min_frac10000)
{
	// interrupt is already disabled, here
	if (g_showData.posLat_sgn != lat_sgn ||
    348c:	50 91 6e 04 	lds	r21, 0x046E	; 0x80046e <g_showData+0x38>
    3490:	45 13       	cpse	r20, r21
    3492:	10 c0       	rjmp	.+32     	; 0x34b4 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x704>
    3494:	50 91 6f 04 	lds	r21, 0x046F	; 0x80046f <g_showData+0x39>
    3498:	35 13       	cpse	r19, r21
	g_showData.posLat_deg != lat_deg ||
    349a:	0c c0       	rjmp	.+24     	; 0x34b4 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x704>
    349c:	50 91 70 04 	lds	r21, 0x0470	; 0x800470 <g_showData+0x3a>
    34a0:	25 13       	cpse	r18, r21
	g_showData.posLat_min_int != lat_min_int ||
	g_showData.posLat_min_int != lat_min_int ||
    34a2:	08 c0       	rjmp	.+16     	; 0x34b4 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x704>
    34a4:	60 91 5a 04 	lds	r22, 0x045A	; 0x80045a <g_showData+0x24>
    34a8:	70 91 5b 04 	lds	r23, 0x045B	; 0x80045b <g_showData+0x25>
    34ac:	68 17       	cp	r22, r24
    34ae:	79 07       	cpc	r23, r25
    34b0:	09 f4       	brne	.+2      	; 0x34b4 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x704>
	g_showData.posLat_min_frac10000 != lat_min_frac10000) {
		g_showData.newPosLat = true;
    34b2:	59 c0       	rjmp	.+178    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    34b4:	50 91 37 04 	lds	r21, 0x0437	; 0x800437 <g_showData+0x1>
    34b8:	52 60       	ori	r21, 0x02	; 2
    34ba:	50 93 37 04 	sts	0x0437, r21	; 0x800437 <g_showData+0x1>
		g_showData.posLat_sgn = lat_sgn;
    34be:	40 93 6e 04 	sts	0x046E, r20	; 0x80046e <g_showData+0x38>
		g_showData.posLat_deg = lat_deg;
    34c2:	30 93 6f 04 	sts	0x046F, r19	; 0x80046f <g_showData+0x39>
		g_showData.posLat_min_int = lat_min_int;
    34c6:	20 93 70 04 	sts	0x0470, r18	; 0x800470 <g_showData+0x3a>
		g_showData.posLat_min_frac10000 = lat_min_frac10000;
    34ca:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <g_showData+0x25>
    34ce:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <g_showData+0x24>
    34d2:	49 c0       	rjmp	.+146    	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    34d4:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <s_rx_d+0x5>
    34d8:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <s_rx_d+0x6>
				case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
					s_isr_lcd_10mhz_ref_osc_show_pos_lat(data[2], data[3], data[4], data[5] | (data[6] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_POS_LON:
					s_isr_lcd_10mhz_ref_osc_show_pos_lon(data[2], data[3], data[4], data[5] | (data[6] << 8));
    34dc:	20 91 1b 04 	lds	r18, 0x041B	; 0x80041b <s_rx_d+0x4>
    34e0:	30 91 1a 04 	lds	r19, 0x041A	; 0x80041a <s_rx_d+0x3>
    34e4:	40 91 19 04 	lds	r20, 0x0419	; 0x800419 <s_rx_d+0x2>
}

static void s_isr_lcd_10mhz_ref_osc_show_pos_lon(uint8_t lon_sgn, uint8_t lon_deg, uint8_t lon_min_int, uint16_t lon_min_frac10000)
{
	// interrupt is already disabled, here
	if (g_showData.posLon_sgn != lon_sgn ||
    34e8:	50 91 71 04 	lds	r21, 0x0471	; 0x800471 <g_showData+0x3b>
    34ec:	45 13       	cpse	r20, r21
    34ee:	0f c0       	rjmp	.+30     	; 0x350e <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x75e>
    34f0:	50 91 72 04 	lds	r21, 0x0472	; 0x800472 <g_showData+0x3c>
    34f4:	35 13       	cpse	r19, r21
	g_showData.posLon_deg != lon_deg ||
	g_showData.posLon_deg != lon_deg ||
    34f6:	0b c0       	rjmp	.+22     	; 0x350e <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x75e>
    34f8:	50 91 73 04 	lds	r21, 0x0473	; 0x800473 <g_showData+0x3d>
    34fc:	25 13       	cpse	r18, r21
	g_showData.posLon_min_int != lon_min_int ||
    34fe:	07 c0       	rjmp	.+14     	; 0x350e <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x75e>
    3500:	60 91 5c 04 	lds	r22, 0x045C	; 0x80045c <g_showData+0x26>
    3504:	70 91 5d 04 	lds	r23, 0x045D	; 0x80045d <g_showData+0x27>
    3508:	68 17       	cp	r22, r24
    350a:	79 07       	cpc	r23, r25
	g_showData.posLon_min_frac10000 != lon_min_frac10000) {
		g_showData.newPosLon = true;
    350c:	61 f1       	breq	.+88     	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    350e:	50 91 37 04 	lds	r21, 0x0437	; 0x800437 <g_showData+0x1>
    3512:	54 60       	ori	r21, 0x04	; 4
    3514:	50 93 37 04 	sts	0x0437, r21	; 0x800437 <g_showData+0x1>
		g_showData.posLon_sgn = lon_sgn;
    3518:	40 93 71 04 	sts	0x0471, r20	; 0x800471 <g_showData+0x3b>
		g_showData.posLon_deg = lon_deg;
    351c:	30 93 72 04 	sts	0x0472, r19	; 0x800472 <g_showData+0x3c>
		g_showData.posLon_min_int = lon_min_int;
    3520:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <g_showData+0x3d>
		g_showData.posLon_min_frac10000 = lon_min_frac10000;
    3524:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <g_showData+0x27>
    3528:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <g_showData+0x26>
				case TWI_SMART_LCD_CMD_SHOW_POS_LON:
					s_isr_lcd_10mhz_ref_osc_show_pos_lon(data[2], data[3], data[4], data[5] | (data[6] << 8));
				break;

				case TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT:
					s_isr_lcd_10mhz_ref_osc_show_pos_height((data[2] | (data[3] << 8)), data[4]);
    352c:	1c c0       	rjmp	.+56     	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    352e:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <s_rx_d+0x4>
    3532:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <s_rx_d+0x2>
    3536:	30 91 1a 04 	lds	r19, 0x041A	; 0x80041a <s_rx_d+0x3>
}

static void s_isr_lcd_10mhz_ref_osc_show_pos_height(int16_t height_int, uint8_t height_frac10)
{
	// interrupt is already disabled, here
	if ((g_showData.pos_height_int != height_int) || (g_showData.pos_height_frac10 != height_frac10)) {
    353a:	40 91 5e 04 	lds	r20, 0x045E	; 0x80045e <g_showData+0x28>
    353e:	50 91 5f 04 	lds	r21, 0x045F	; 0x80045f <g_showData+0x29>
    3542:	24 17       	cp	r18, r20
    3544:	35 07       	cpc	r19, r21
    3546:	21 f4       	brne	.+8      	; 0x3550 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7a0>
    3548:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <g_showData+0x3e>
    354c:	89 17       	cp	r24, r25
		g_showData.newPosHeight = true;
    354e:	59 f0       	breq	.+22     	; 0x3566 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x7b6>
    3550:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <g_showData+0x1>
    3554:	98 60       	ori	r25, 0x08	; 8
    3556:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <g_showData+0x1>
		g_showData.pos_height_int = height_int;
    355a:	30 93 5f 04 	sts	0x045F, r19	; 0x80045f <g_showData+0x29>
    355e:	20 93 5e 04 	sts	0x045E, r18	; 0x80045e <g_showData+0x28>
		g_showData.pos_height_frac10 = height_frac10;
    3562:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <g_showData+0x3e>
					// do nothing for unsupported commands
				}
			}  // switch (cmd)
		}  // if (g_SmartLCD_mode == C_SMART_LCD_MODE_REFOSC)
	}  // if ((data[0] == TWI_SLAVE_ADDR_SMARTLCD))
}
    3566:	df 91       	pop	r29
    3568:	cf 91       	pop	r28
    356a:	08 95       	ret

0000356c <__vector_24__bottom>:


uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur)
{
    356c:	cf 93       	push	r28
    356e:	df 93       	push	r29
    3570:	d6 2f       	mov	r29, r22
	static uint8_t pos_i	= 0;
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur & 0b01000101;
    3572:	c4 2f       	mov	r28, r20
    3574:	c5 74       	andi	r28, 0x45	; 69

	switch(tws) {
    3576:	88 36       	cpi	r24, 0x68	; 104
    3578:	09 f4       	brne	.+2      	; 0x357c <__vector_24__bottom+0x10>
    357a:	8b c0       	rjmp	.+278    	; 0x3692 <__vector_24__bottom+0x126>
    357c:	08 f0       	brcs	.+2      	; 0x3580 <__vector_24__bottom+0x14>
    357e:	42 c0       	rjmp	.+132    	; 0x3604 <__vector_24__bottom+0x98>
    3580:	80 33       	cpi	r24, 0x30	; 48
    3582:	09 f4       	brne	.+2      	; 0x3586 <__vector_24__bottom+0x1a>
    3584:	7f c0       	rjmp	.+254    	; 0x3684 <__vector_24__bottom+0x118>
    3586:	48 f5       	brcc	.+82     	; 0x35da <__vector_24__bottom+0x6e>
    3588:	80 31       	cpi	r24, 0x10	; 16
    358a:	09 f4       	brne	.+2      	; 0x358e <__vector_24__bottom+0x22>
    358c:	66 c0       	rjmp	.+204    	; 0x365a <__vector_24__bottom+0xee>
    358e:	d8 f4       	brcc	.+54     	; 0x35c6 <__vector_24__bottom+0x5a>
    3590:	88 23       	and	r24, r24
    3592:	09 f4       	brne	.+2      	; 0x3596 <__vector_24__bottom+0x2a>
    3594:	61 c1       	rjmp	.+706    	; 0x3858 <__vector_24__bottom+0x2ec>
    3596:	88 30       	cpi	r24, 0x08	; 8
    3598:	09 f0       	breq	.+2      	; 0x359c <__vector_24__bottom+0x30>
    359a:	5e c1       	rjmp	.+700    	; 0x3858 <__vector_24__bottom+0x2ec>

	/* Master Transmitter Mode */

	case TWI_TWSR_START:						// Start condition transmitted
		s_tx_lock = 1;
		pos_o = 0;
    359c:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <pos_o.3118>

		cnt_o = 2;								// TEST
    35a0:	82 e0       	ldi	r24, 0x02	; 2
    35a2:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <cnt_o.3120>
		s_tx_d[0] = (0x12 << TWD1) | (0b0 << TWD0);	// TEST
    35a6:	84 e2       	ldi	r24, 0x24	; 36
    35a8:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <s_tx_d>
		s_tx_d[1] = 0x34;						// TEST
    35ac:	84 e3       	ldi	r24, 0x34	; 52
    35ae:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <s_tx_d+0x1>
		s_tx_d[2] = 0x56;						// TEST
    35b2:	86 e5       	ldi	r24, 0x56	; 86
    35b4:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <s_tx_d+0x2>
		s_tx_d[3] = 0x78;						// TEST
    35b8:	88 e7       	ldi	r24, 0x78	; 120
    35ba:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <s_tx_d+0x3>
		s_tx_d[4] = 0x9a;						// TEST
    35be:	8a e9       	ldi	r24, 0x9A	; 154
    35c0:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <s_tx_d+0x4>
    35c4:	4a c0       	rjmp	.+148    	; 0x365a <__vector_24__bottom+0xee>
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur & 0b01000101;

	switch(tws) {
    35c6:	80 32       	cpi	r24, 0x20	; 32
    35c8:	09 f4       	brne	.+2      	; 0x35cc <__vector_24__bottom+0x60>
    35ca:	5d c0       	rjmp	.+186    	; 0x3686 <__vector_24__bottom+0x11a>
    35cc:	88 32       	cpi	r24, 0x28	; 40
    35ce:	09 f4       	brne	.+2      	; 0x35d2 <__vector_24__bottom+0x66>
    35d0:	48 c0       	rjmp	.+144    	; 0x3662 <__vector_24__bottom+0xf6>
    35d2:	88 31       	cpi	r24, 0x18	; 24
    35d4:	09 f0       	breq	.+2      	; 0x35d8 <__vector_24__bottom+0x6c>
    35d6:	40 c1       	rjmp	.+640    	; 0x3858 <__vector_24__bottom+0x2ec>
    35d8:	41 c0       	rjmp	.+130    	; 0x365c <__vector_24__bottom+0xf0>
    35da:	88 34       	cpi	r24, 0x48	; 72
    35dc:	09 f4       	brne	.+2      	; 0x35e0 <__vector_24__bottom+0x74>
    35de:	57 c0       	rjmp	.+174    	; 0x368e <__vector_24__bottom+0x122>
    35e0:	38 f4       	brcc	.+14     	; 0x35f0 <__vector_24__bottom+0x84>
    35e2:	88 33       	cpi	r24, 0x38	; 56
    35e4:	09 f4       	brne	.+2      	; 0x35e8 <__vector_24__bottom+0x7c>
    35e6:	51 c0       	rjmp	.+162    	; 0x368a <__vector_24__bottom+0x11e>
    35e8:	80 34       	cpi	r24, 0x40	; 64
    35ea:	09 f4       	brne	.+2      	; 0x35ee <__vector_24__bottom+0x82>
    35ec:	50 c0       	rjmp	.+160    	; 0x368e <__vector_24__bottom+0x122>
    35ee:	34 c1       	rjmp	.+616    	; 0x3858 <__vector_24__bottom+0x2ec>
    35f0:	88 35       	cpi	r24, 0x58	; 88
    35f2:	09 f4       	brne	.+2      	; 0x35f6 <__vector_24__bottom+0x8a>
    35f4:	4c c0       	rjmp	.+152    	; 0x368e <__vector_24__bottom+0x122>
    35f6:	80 36       	cpi	r24, 0x60	; 96
    35f8:	09 f4       	brne	.+2      	; 0x35fc <__vector_24__bottom+0x90>
    35fa:	4b c0       	rjmp	.+150    	; 0x3692 <__vector_24__bottom+0x126>
    35fc:	80 35       	cpi	r24, 0x50	; 80
    35fe:	09 f4       	brne	.+2      	; 0x3602 <__vector_24__bottom+0x96>
    3600:	46 c0       	rjmp	.+140    	; 0x368e <__vector_24__bottom+0x122>
    3602:	2a c1       	rjmp	.+596    	; 0x3858 <__vector_24__bottom+0x2ec>
    3604:	80 3a       	cpi	r24, 0xA0	; 160
    3606:	09 f4       	brne	.+2      	; 0x360a <__vector_24__bottom+0x9e>
    3608:	03 c1       	rjmp	.+518    	; 0x3810 <__vector_24__bottom+0x2a4>
    360a:	a8 f4       	brcc	.+42     	; 0x3636 <__vector_24__bottom+0xca>
    360c:	80 38       	cpi	r24, 0x80	; 128
    360e:	09 f4       	brne	.+2      	; 0x3612 <__vector_24__bottom+0xa6>
    3610:	4d c0       	rjmp	.+154    	; 0x36ac <__vector_24__bottom+0x140>
    3612:	38 f4       	brcc	.+14     	; 0x3622 <__vector_24__bottom+0xb6>
    3614:	80 37       	cpi	r24, 0x70	; 112
    3616:	09 f4       	brne	.+2      	; 0x361a <__vector_24__bottom+0xae>
    3618:	41 c0       	rjmp	.+130    	; 0x369c <__vector_24__bottom+0x130>
    361a:	88 37       	cpi	r24, 0x78	; 120
    361c:	09 f4       	brne	.+2      	; 0x3620 <__vector_24__bottom+0xb4>
    361e:	3e c0       	rjmp	.+124    	; 0x369c <__vector_24__bottom+0x130>
    3620:	1b c1       	rjmp	.+566    	; 0x3858 <__vector_24__bottom+0x2ec>
    3622:	80 39       	cpi	r24, 0x90	; 144
    3624:	09 f4       	brne	.+2      	; 0x3628 <__vector_24__bottom+0xbc>
    3626:	42 c0       	rjmp	.+132    	; 0x36ac <__vector_24__bottom+0x140>
    3628:	88 39       	cpi	r24, 0x98	; 152
    362a:	09 f4       	brne	.+2      	; 0x362e <__vector_24__bottom+0xc2>
    362c:	e1 c0       	rjmp	.+450    	; 0x37f0 <__vector_24__bottom+0x284>
    362e:	88 38       	cpi	r24, 0x88	; 136
    3630:	09 f0       	breq	.+2      	; 0x3634 <__vector_24__bottom+0xc8>
    3632:	12 c1       	rjmp	.+548    	; 0x3858 <__vector_24__bottom+0x2ec>
    3634:	dd c0       	rjmp	.+442    	; 0x37f0 <__vector_24__bottom+0x284>
    3636:	88 3b       	cpi	r24, 0xB8	; 184
    3638:	09 f4       	brne	.+2      	; 0x363c <__vector_24__bottom+0xd0>
    363a:	f3 c0       	rjmp	.+486    	; 0x3822 <__vector_24__bottom+0x2b6>
    363c:	20 f4       	brcc	.+8      	; 0x3646 <__vector_24__bottom+0xda>
    363e:	88 3a       	cpi	r24, 0xA8	; 168
    3640:	09 f4       	brne	.+2      	; 0x3644 <__vector_24__bottom+0xd8>
    3642:	ef c0       	rjmp	.+478    	; 0x3822 <__vector_24__bottom+0x2b6>
    3644:	09 c1       	rjmp	.+530    	; 0x3858 <__vector_24__bottom+0x2ec>
    3646:	88 3c       	cpi	r24, 0xC8	; 200
    3648:	09 f4       	brne	.+2      	; 0x364c <__vector_24__bottom+0xe0>
    364a:	04 c1       	rjmp	.+520    	; 0x3854 <__vector_24__bottom+0x2e8>
    364c:	88 3f       	cpi	r24, 0xF8	; 248
    364e:	09 f4       	brne	.+2      	; 0x3652 <__vector_24__bottom+0xe6>
    3650:	03 c1       	rjmp	.+518    	; 0x3858 <__vector_24__bottom+0x2ec>
    3652:	80 3c       	cpi	r24, 0xC0	; 192
    3654:	09 f4       	brne	.+2      	; 0x3658 <__vector_24__bottom+0xec>
    3656:	fe c0       	rjmp	.+508    	; 0x3854 <__vector_24__bottom+0x2e8>
    3658:	ff c0       	rjmp	.+510    	; 0x3858 <__vector_24__bottom+0x2ec>
		s_tx_d[2] = 0x56;						// TEST
		s_tx_d[3] = 0x78;						// TEST
		s_tx_d[4] = 0x9a;						// TEST
		// fall-through.
	case TWI_TWSR_REPEATEDSTART:				// Repeated start condition transmitted
		nop();
    365a:	00 00       	nop
		// fall-through.
	case TWI_TWSR_M_SLAW_ADDR_ACK:				// SLA+W transmitted and ACK received
		TWDR = s_tx_d[pos_o++];
    365c:	e0 91 13 04 	lds	r30, 0x0413	; 0x800413 <pos_o.3118>
    3660:	06 c0       	rjmp	.+12     	; 0x366e <__vector_24__bottom+0x102>
	case TWI_TWSR_M_SLAW_ADDR_NACK:				// SLA+W transmitted and NACK received
		twcr_new |= _BV(TWSTO);					// Send STOP
	break;

	case TWI_TWSR_M_SLAW_DATA_ACK:				// Data byte sent and ACK received
		if (pos_o < cnt_o) {
    3662:	e0 91 13 04 	lds	r30, 0x0413	; 0x800413 <pos_o.3118>
    3666:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <cnt_o.3120>
    366a:	e8 17       	cp	r30, r24
    366c:	58 f4       	brcc	.+22     	; 0x3684 <__vector_24__bottom+0x118>
			TWDR = s_tx_d[pos_o++];				// Send new data byte
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	8e 0f       	add	r24, r30
    3672:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <pos_o.3118>
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	e9 5d       	subi	r30, 0xD9	; 217
    367a:	fb 4f       	sbci	r31, 0xFB	; 251
    367c:	80 81       	ld	r24, Z
    367e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		} else {
			s_tx_lock = 0;
			s_twi_tx_done();					// Message sent
    3682:	eb c0       	rjmp	.+470    	; 0x385a <__vector_24__bottom+0x2ee>
			twcr_new |= _BV(TWSTO);				// Send STOP - no more data available
    3684:	86 db       	rcall	.-2292   	; 0x2d92 <s_twi_tx_done>
    3686:	c0 61       	ori	r28, 0x10	; 16
		s_twi_tx_done();						// Message failure
		twcr_new |= _BV(TWSTO);					// Send STOP - due to an error or slave not ready situation
	break;

	case TWI_TWSR_M_SLAW_ARBIT_LOST:			// Arbitration lost
		twcr_new |= _BV(TWSTA);					// Send START (again)
    3688:	e8 c0       	rjmp	.+464    	; 0x385a <__vector_24__bottom+0x2ee>
	break;
    368a:	c0 62       	ori	r28, 0x20	; 32
	case TWI_TWSR_M_SLAR_DATA_ACK:
		nop();
	break;

	case TWI_TWSR_M_SLAR_DATA_NACK:
		nop();
    368c:	e6 c0       	rjmp	.+460    	; 0x385a <__vector_24__bottom+0x2ee>
	break;
    368e:	00 00       	nop

	/* Slave Receiver Mode */

	case TWI_TWSR_S_SLAW_MYADDR_RECEIVED:		// SLA+W received and ACK returned
	case TWI_TWSR_S_SLAW_MYADDR_ARBIT_LOST:
		mem_set(s_rx_d, TWI_SMART_LCD_SLAVE_BUF_LEN, 0x00);
    3690:	e4 c0       	rjmp	.+456    	; 0x385a <__vector_24__bottom+0x2ee>
    3692:	40 e0       	ldi	r20, 0x00	; 0
    3694:	60 e1       	ldi	r22, 0x10	; 16
    3696:	87 e1       	ldi	r24, 0x17	; 23
    3698:	94 e0       	ldi	r25, 0x04	; 4
		twcr_new |= _BV(TWEA);					// Send ACK
	break;

	case TWI_TWSR_S_SLAW_OMNIADDR_RECEIVED:		// GCA received and ACK sent
	case TWI_TWSR_S_SLAW_OMNIADDR_ARBIT_LOST:
		s_rx_d[0] = twd >> 1;					// GCA
    369a:	2d d1       	rcall	.+602    	; 0x38f6 <mem_set>
    369c:	d6 95       	lsr	r29
    369e:	d0 93 17 04 	sts	0x0417, r29	; 0x800417 <s_rx_d>
		pos_i = 1;								// Starting of reception
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <pos_i.3117>
		twcr_new |= _BV(TWEA);					// Send after next coming data byte ACK
	break;
    36a8:	c0 64       	ori	r28, 0x40	; 64

	case TWI_TWSR_S_SLAW_MYADDR_DATA_ACK:		// Data after SLA+W received
	case TWI_TWSR_S_SLAW_OMNIADDR_DATA_ACK:
		if (cnt_i != 0b1111) {					// Closed parameter form
    36aa:	d7 c0       	rjmp	.+430    	; 0x385a <__vector_24__bottom+0x2ee>
    36ac:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <cnt_i.3119>
    36b0:	8f 30       	cpi	r24, 0x0F	; 15
    36b2:	09 f4       	brne	.+2      	; 0x36b6 <__vector_24__bottom+0x14a>
			if (pos_i < 0b1111) {
    36b4:	96 c0       	rjmp	.+300    	; 0x37e2 <__vector_24__bottom+0x276>
    36b6:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <pos_i.3117>
    36ba:	9f 30       	cpi	r25, 0x0F	; 15
    36bc:	08 f0       	brcs	.+2      	; 0x36c0 <__vector_24__bottom+0x154>
				s_rx_d[pos_i] = twd;			// [1]=cmd, [2..]=parameters
    36be:	87 c0       	rjmp	.+270    	; 0x37ce <__vector_24__bottom+0x262>
    36c0:	e9 2f       	mov	r30, r25
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	e9 5e       	subi	r30, 0xE9	; 233
    36c6:	fb 4f       	sbci	r31, 0xFB	; 251
			}

			if (pos_i == 1) {
    36c8:	d0 83       	st	Z, r29
    36ca:	91 30       	cpi	r25, 0x01	; 1
    36cc:	09 f0       	breq	.+2      	; 0x36d0 <__vector_24__bottom+0x164>
				/* Load receive counter */
				if (s_rx_d[0] == TWI_SLAVE_ADDR_SMARTLCD) {
    36ce:	6b c0       	rjmp	.+214    	; 0x37a6 <__vector_24__bottom+0x23a>
    36d0:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <s_rx_d>
    36d4:	82 32       	cpi	r24, 0x22	; 34
    36d6:	09 f0       	breq	.+2      	; 0x36da <__vector_24__bottom+0x16e>
					cnt_i = 0;
    36d8:	7c c0       	rjmp	.+248    	; 0x37d2 <__vector_24__bottom+0x266>
    36da:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <cnt_i.3119>
					cnt_o = 0;
    36de:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <cnt_o.3120>

					switch (s_rx_d[1]) {
    36e2:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <s_rx_d+0x1>
    36e6:	8a 33       	cpi	r24, 0x3A	; 58
    36e8:	09 f4       	brne	.+2      	; 0x36ec <__vector_24__bottom+0x180>
    36ea:	6d c0       	rjmp	.+218    	; 0x37c6 <__vector_24__bottom+0x25a>
    36ec:	10 f5       	brcc	.+68     	; 0x3732 <__vector_24__bottom+0x1c6>
    36ee:	80 32       	cpi	r24, 0x20	; 32
    36f0:	09 f4       	brne	.+2      	; 0x36f4 <__vector_24__bottom+0x188>
    36f2:	45 c0       	rjmp	.+138    	; 0x377e <__vector_24__bottom+0x212>
    36f4:	78 f4       	brcc	.+30     	; 0x3714 <__vector_24__bottom+0x1a8>
    36f6:	82 30       	cpi	r24, 0x02	; 2
    36f8:	09 f4       	brne	.+2      	; 0x36fc <__vector_24__bottom+0x190>
    36fa:	65 c0       	rjmp	.+202    	; 0x37c6 <__vector_24__bottom+0x25a>
    36fc:	28 f4       	brcc	.+10     	; 0x3708 <__vector_24__bottom+0x19c>
    36fe:	88 23       	and	r24, r24
    3700:	a1 f1       	breq	.+104    	; 0x376a <__vector_24__bottom+0x1fe>
    3702:	81 30       	cpi	r24, 0x01	; 1
    3704:	b1 f1       	breq	.+108    	; 0x3772 <__vector_24__bottom+0x206>
    3706:	65 c0       	rjmp	.+202    	; 0x37d2 <__vector_24__bottom+0x266>
    3708:	83 30       	cpi	r24, 0x03	; 3
    370a:	99 f1       	breq	.+102    	; 0x3772 <__vector_24__bottom+0x206>
    370c:	84 31       	cpi	r24, 0x14	; 20
    370e:	09 f4       	brne	.+2      	; 0x3712 <__vector_24__bottom+0x1a6>
    3710:	5a c0       	rjmp	.+180    	; 0x37c6 <__vector_24__bottom+0x25a>
    3712:	5f c0       	rjmp	.+190    	; 0x37d2 <__vector_24__bottom+0x266>
    3714:	84 33       	cpi	r24, 0x34	; 52
    3716:	99 f1       	breq	.+102    	; 0x377e <__vector_24__bottom+0x212>
    3718:	30 f4       	brcc	.+12     	; 0x3726 <__vector_24__bottom+0x1ba>
    371a:	80 33       	cpi	r24, 0x30	; 48
    371c:	09 f4       	brne	.+2      	; 0x3720 <__vector_24__bottom+0x1b4>
    371e:	3f c0       	rjmp	.+126    	; 0x379e <__vector_24__bottom+0x232>
    3720:	82 33       	cpi	r24, 0x32	; 50
    3722:	69 f1       	breq	.+90     	; 0x377e <__vector_24__bottom+0x212>
    3724:	56 c0       	rjmp	.+172    	; 0x37d2 <__vector_24__bottom+0x266>
    3726:	86 33       	cpi	r24, 0x36	; 54
    3728:	51 f1       	breq	.+84     	; 0x377e <__vector_24__bottom+0x212>
    372a:	88 33       	cpi	r24, 0x38	; 56
    372c:	09 f4       	brne	.+2      	; 0x3730 <__vector_24__bottom+0x1c4>
    372e:	4b c0       	rjmp	.+150    	; 0x37c6 <__vector_24__bottom+0x25a>
    3730:	50 c0       	rjmp	.+160    	; 0x37d2 <__vector_24__bottom+0x266>
    3732:	85 38       	cpi	r24, 0x85	; 133
    3734:	41 f1       	breq	.+80     	; 0x3786 <__vector_24__bottom+0x21a>
    3736:	68 f4       	brcc	.+26     	; 0x3752 <__vector_24__bottom+0x1e6>
    3738:	82 38       	cpi	r24, 0x82	; 130
    373a:	29 f1       	breq	.+74     	; 0x3786 <__vector_24__bottom+0x21a>
    373c:	28 f4       	brcc	.+10     	; 0x3748 <__vector_24__bottom+0x1dc>
    373e:	80 38       	cpi	r24, 0x80	; 128
    3740:	51 f1       	breq	.+84     	; 0x3796 <__vector_24__bottom+0x22a>
    3742:	81 38       	cpi	r24, 0x81	; 129
    3744:	21 f1       	breq	.+72     	; 0x378e <__vector_24__bottom+0x222>
    3746:	45 c0       	rjmp	.+138    	; 0x37d2 <__vector_24__bottom+0x266>
    3748:	83 38       	cpi	r24, 0x83	; 131
    374a:	09 f1       	breq	.+66     	; 0x378e <__vector_24__bottom+0x222>
    374c:	84 38       	cpi	r24, 0x84	; 132
    374e:	b9 f0       	breq	.+46     	; 0x377e <__vector_24__bottom+0x212>
    3750:	40 c0       	rjmp	.+128    	; 0x37d2 <__vector_24__bottom+0x266>
    3752:	8b 38       	cpi	r24, 0x8B	; 139
    3754:	28 f4       	brcc	.+10     	; 0x3760 <__vector_24__bottom+0x1f4>
    3756:	89 38       	cpi	r24, 0x89	; 137
    3758:	90 f4       	brcc	.+36     	; 0x377e <__vector_24__bottom+0x212>
    375a:	88 38       	cpi	r24, 0x88	; 136
    375c:	a1 f0       	breq	.+40     	; 0x3786 <__vector_24__bottom+0x21a>
    375e:	39 c0       	rjmp	.+114    	; 0x37d2 <__vector_24__bottom+0x266>
    3760:	8d 38       	cpi	r24, 0x8D	; 141
    3762:	c8 f0       	brcs	.+50     	; 0x3796 <__vector_24__bottom+0x22a>
    3764:	8d 38       	cpi	r24, 0x8D	; 141
    3766:	79 f0       	breq	.+30     	; 0x3786 <__vector_24__bottom+0x21a>
						case TWI_SMART_LCD_CMD_NOOP:
							cnt_i = 1;
    3768:	34 c0       	rjmp	.+104    	; 0x37d2 <__vector_24__bottom+0x266>
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <cnt_i.3119>
						break;


						case TWI_SMART_LCD_CMD_GET_VER:
						case TWI_SMART_LCD_CMD_GET_STATE:
							cnt_i = 1;
    3770:	30 c0       	rjmp	.+96     	; 0x37d2 <__vector_24__bottom+0x266>
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <cnt_i.3119>
							cnt_o = 1;
    3778:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <cnt_o.3120>
						case TWI_SMART_LCD_CMD_DRAW_RECT:
						case TWI_SMART_LCD_CMD_DRAW_FILLED_RECT:
						case TWI_SMART_LCD_CMD_SHOW_DOP:
						case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
						case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
							cnt_i = 3;
    377c:	2a c0       	rjmp	.+84     	; 0x37d2 <__vector_24__bottom+0x266>
    377e:	83 e0       	ldi	r24, 0x03	; 3
    3780:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <cnt_i.3119>

						case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
						case TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT:
						case TWI_SMART_LCD_CMD_SHOW_SATS:
						case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
							cnt_i = 4;
    3784:	26 c0       	rjmp	.+76     	; 0x37d2 <__vector_24__bottom+0x266>
    3786:	84 e0       	ldi	r24, 0x04	; 4
    3788:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <cnt_i.3119>
						break;

						case TWI_SMART_LCD_CMD_SHOW_PPB:
						case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
							cnt_i = 5;
    378c:	22 c0       	rjmp	.+68     	; 0x37d2 <__vector_24__bottom+0x266>
    378e:	85 e0       	ldi	r24, 0x05	; 5
    3790:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <cnt_i.3119>
						break;

						case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
						case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
						case TWI_SMART_LCD_CMD_SHOW_POS_LON:
							cnt_i = 6;
    3794:	1e c0       	rjmp	.+60     	; 0x37d2 <__vector_24__bottom+0x266>
    3796:	86 e0       	ldi	r24, 0x06	; 6
    3798:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <cnt_i.3119>
						break;
						
						case TWI_SMART_LCD_CMD_WRITE:
							cnt_i = TWI_SMART_LCD_SLAVE_BUF_LEN;	// Max length of incoming data
    379c:	1a c0       	rjmp	.+52     	; 0x37d2 <__vector_24__bottom+0x266>
    379e:	80 e1       	ldi	r24, 0x10	; 16
    37a0:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <cnt_i.3119>
						break;
					}
				}
			}
			else if (pos_i == 2) {
    37a4:	16 c0       	rjmp	.+44     	; 0x37d2 <__vector_24__bottom+0x266>
    37a6:	92 30       	cpi	r25, 0x02	; 2
				if (s_rx_d[0] == TWI_SLAVE_ADDR_SMARTLCD) {
    37a8:	91 f4       	brne	.+36     	; 0x37ce <__vector_24__bottom+0x262>
    37aa:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <s_rx_d>
    37ae:	82 32       	cpi	r24, 0x22	; 34
					if (s_rx_d[1] == TWI_SMART_LCD_CMD_WRITE) {
    37b0:	81 f4       	brne	.+32     	; 0x37d2 <__vector_24__bottom+0x266>
    37b2:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <s_rx_d+0x1>
    37b6:	80 33       	cpi	r24, 0x30	; 48
						/* Correct length of string to actual size */
						uint8_t str_len = s_rx_d[2];
    37b8:	61 f4       	brne	.+24     	; 0x37d2 <__vector_24__bottom+0x266>
    37ba:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <s_rx_d+0x2>
						cnt_i = ((str_len <= (TWI_SMART_LCD_SLAVE_BUF_LEN - 2)) && (str_len < 0b1111)) ?  (str_len + 2) : 2;
    37be:	8f 30       	cpi	r24, 0x0F	; 15
    37c0:	10 f4       	brcc	.+4      	; 0x37c6 <__vector_24__bottom+0x25a>
    37c2:	8e 5f       	subi	r24, 0xFE	; 254
    37c4:	01 c0       	rjmp	.+2      	; 0x37c8 <__vector_24__bottom+0x25c>
    37c6:	82 e0       	ldi	r24, 0x02	; 2
    37c8:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <cnt_i.3119>
					}
				}
			}

			if (pos_i < 0b1110) {
    37cc:	02 c0       	rjmp	.+4      	; 0x37d2 <__vector_24__bottom+0x266>
    37ce:	9e 30       	cpi	r25, 0x0E	; 14
				if (++pos_i <= cnt_i) {
    37d0:	60 f4       	brcc	.+24     	; 0x37ea <__vector_24__bottom+0x27e>
    37d2:	9f 5f       	subi	r25, 0xFF	; 255
    37d4:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <pos_i.3117>
    37d8:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <cnt_i.3119>
    37dc:	89 17       	cp	r24, r25
    37de:	28 f0       	brcs	.+10     	; 0x37ea <__vector_24__bottom+0x27e>
			} else {
				twcr_new &= ~_BV(TWEA);			// Send NACK
			}

		} else {								// Open parameter form
			s_rx_d[2] = twd;
    37e0:	39 c0       	rjmp	.+114    	; 0x3854 <__vector_24__bottom+0x2e8>
    37e2:	d0 93 19 04 	sts	0x0419, r29	; 0x800419 <s_rx_d+0x2>
			if (!s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i)) {
				twcr_new |= _BV(TWEA);			// Send ACK
			} else {
				pos_i = 0;
    37e6:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <pos_i.3117>
				twcr_new &= ~_BV(TWEA);			// Send NACK
    37ea:	c4 2f       	mov	r28, r20
    37ec:	c5 70       	andi	r28, 0x05	; 5
		}
	break;

	case TWI_TWSR_S_SLAW_MYADDR_DATA_NACK:		// NACK after last data byte sent
	case TWI_TWSR_S_SLAW_OMNIADDR_DATA_NACK:
		if (cnt_i != 0b1111) {
    37ee:	35 c0       	rjmp	.+106    	; 0x385a <__vector_24__bottom+0x2ee>
    37f0:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <cnt_i.3119>
			s_isr_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    37f4:	8f 30       	cpi	r24, 0x0F	; 15
    37f6:	09 f0       	breq	.+2      	; 0x37fa <__vector_24__bottom+0x28e>
		} else {
			s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    37f8:	db da       	rcall	.-2634   	; 0x2db0 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2>
    37fa:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <pos_i.3117>
		cnt_i = 0;
    37fe:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <cnt_i.3119>
		mem_set(s_rx_d, 8, 0x00);
    3802:	40 e0       	ldi	r20, 0x00	; 0
    3804:	68 e0       	ldi	r22, 0x08	; 8
    3806:	87 e1       	ldi	r24, 0x17	; 23
    3808:	94 e0       	ldi	r25, 0x04	; 4
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    380a:	75 d0       	rcall	.+234    	; 0x38f6 <mem_set>
	break;

	case TWI_TWSR_S_SLAW_STOP_REPEATEDSTART_RECEIVED:	// STOP or RESTART received while still addressed as slave
		if (cnt_i != 0b1111) {
    380c:	c0 64       	ori	r28, 0x40	; 64
    380e:	25 c0       	rjmp	.+74     	; 0x385a <__vector_24__bottom+0x2ee>
    3810:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <cnt_i.3119>
			s_isr_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    3814:	8f 30       	cpi	r24, 0x0F	; 15
		} else {
			s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    3816:	09 f0       	breq	.+2      	; 0x381a <__vector_24__bottom+0x2ae>
    3818:	cb da       	rcall	.-2666   	; 0x2db0 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    381a:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <pos_i.3117>

	/* Slave Transmitter Mode */

	case TWI_TWSR_S_SLAR_MYADDR_DATA_ACK:		// SLA+R received and ACK has been returned
	case TWI_TWSR_S_SLAR_OMNIADDR_DATA_ACK:		// Data sent and ACK has been returned
		pos_o = 0;
    381e:	c0 64       	ori	r28, 0x40	; 64
    3820:	1c c0       	rjmp	.+56     	; 0x385a <__vector_24__bottom+0x2ee>
		cnt_o = s_rx_ret_len;
    3822:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <pos_o.3118>
    3826:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <s_rx_ret_len>
		s_rx_ret_len = 0;
    382a:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <cnt_o.3120>
		TWDR = cnt_o > pos_o ?  s_rx_ret_d[pos_o++] : 0x00;
    382e:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <s_rx_ret_len>
    3832:	88 23       	and	r24, r24
    3834:	31 f0       	breq	.+12     	; 0x3842 <__vector_24__bottom+0x2d6>
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <pos_o.3118>
    383c:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <s_rx_ret_d>
    3840:	01 c0       	rjmp	.+2      	; 0x3844 <__vector_24__bottom+0x2d8>
    3842:	80 e0       	ldi	r24, 0x00	; 0
		if (cnt_o > pos_o) {
    3844:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3848:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <cnt_o.3120>
    384c:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <pos_o.3118>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
	break;

	case TWI_TWSR_S_SLAR_MYADDR_LASTDATA_ACK:	// Last data sent and ACK has been returned
		/* message transmitted successfully in slave mode */
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    3850:	89 17       	cp	r24, r25
	break;
    3852:	58 f6       	brcc	.-106    	; 0x37ea <__vector_24__bottom+0x27e>
	case TWI_TWSR_BUS_ERROR_UNKNOWN:
		twcr_new |= _BV(TWSTO) | _BV(TWEA);		// TWI goes to unaddressed, be active again
	break;

	default:
		twcr_new |= _BV(TWSTO) | _BV(TWEA);		// TWI goes to unaddressed, be active again
    3854:	c0 64       	ori	r28, 0x40	; 64
	}

	return twcr_new;
}
    3856:	01 c0       	rjmp	.+2      	; 0x385a <__vector_24__bottom+0x2ee>
    3858:	c0 65       	ori	r28, 0x50	; 80
    385a:	8c 2f       	mov	r24, r28
    385c:	df 91       	pop	r29
    385e:	cf 91       	pop	r28
    3860:	08 95       	ret

00003862 <cpu_irq_save>:
    3862:	cf 93       	push	r28
    3864:	df 93       	push	r29
    3866:	1f 92       	push	r1
    3868:	cd b7       	in	r28, 0x3d	; 61
    386a:	de b7       	in	r29, 0x3e	; 62
    386c:	8f b7       	in	r24, 0x3f	; 63
    386e:	89 83       	std	Y+1, r24	; 0x01
    3870:	f8 94       	cli
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	0f 90       	pop	r0
    3876:	df 91       	pop	r29
    3878:	cf 91       	pop	r28
    387a:	08 95       	ret

0000387c <get_abs_time>:
    387c:	8f 92       	push	r8
    387e:	9f 92       	push	r9
    3880:	af 92       	push	r10
    3882:	bf 92       	push	r11
    3884:	cf 92       	push	r12
    3886:	df 92       	push	r13
    3888:	ef 92       	push	r14
    388a:	ff 92       	push	r15
    388c:	ea df       	rcall	.-44     	; 0x3862 <cpu_irq_save>
    388e:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    3892:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3896:	c0 90 89 04 	lds	r12, 0x0489	; 0x800489 <g_timer_abs_msb>
    389a:	d0 90 8a 04 	lds	r13, 0x048A	; 0x80048a <g_timer_abs_msb+0x1>
    389e:	e0 90 8b 04 	lds	r14, 0x048B	; 0x80048b <g_timer_abs_msb+0x2>
    38a2:	f0 90 8c 04 	lds	r15, 0x048C	; 0x80048c <g_timer_abs_msb+0x3>
    38a6:	8f bf       	out	0x3f, r24	; 63
    38a8:	70 e0       	ldi	r23, 0x00	; 0
    38aa:	79 2b       	or	r23, r25
    38ac:	07 2e       	mov	r0, r23
    38ae:	00 0c       	add	r0, r0
    38b0:	88 0b       	sbc	r24, r24
    38b2:	99 0b       	sbc	r25, r25
    38b4:	6d d3       	rcall	.+1754   	; 0x3f90 <__floatsisf>
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	34 e2       	ldi	r19, 0x24	; 36
    38ba:	44 ef       	ldi	r20, 0xF4	; 244
    38bc:	5a e4       	ldi	r21, 0x4A	; 74
    38be:	cd d2       	rcall	.+1434   	; 0x3e5a <__divsf3>
    38c0:	4b 01       	movw	r8, r22
    38c2:	5c 01       	movw	r10, r24
    38c4:	c7 01       	movw	r24, r14
    38c6:	b6 01       	movw	r22, r12
    38c8:	61 d3       	rcall	.+1730   	; 0x3f8c <__floatunsisf>
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e0       	ldi	r20, 0x00	; 0
    38d0:	54 e4       	ldi	r21, 0x44	; 68
    38d2:	65 d4       	rcall	.+2250   	; 0x419e <__mulsf3>
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	34 e2       	ldi	r19, 0x24	; 36
    38d8:	44 ef       	ldi	r20, 0xF4	; 244
    38da:	5a e4       	ldi	r21, 0x4A	; 74
    38dc:	be d2       	rcall	.+1404   	; 0x3e5a <__divsf3>
    38de:	a5 01       	movw	r20, r10
    38e0:	94 01       	movw	r18, r8
    38e2:	53 d2       	rcall	.+1190   	; 0x3d8a <__addsf3>
    38e4:	ff 90       	pop	r15
    38e6:	ef 90       	pop	r14
    38e8:	df 90       	pop	r13
    38ea:	cf 90       	pop	r12
    38ec:	bf 90       	pop	r11
    38ee:	af 90       	pop	r10
    38f0:	9f 90       	pop	r9
    38f2:	8f 90       	pop	r8
    38f4:	08 95       	ret

000038f6 <mem_set>:
    38f6:	70 e0       	ldi	r23, 0x00	; 0
    38f8:	61 15       	cp	r22, r1
    38fa:	71 05       	cpc	r23, r1
    38fc:	31 f0       	breq	.+12     	; 0x390a <mem_set+0x14>
    38fe:	fc 01       	movw	r30, r24
    3900:	41 93       	st	Z+, r20
    3902:	cf 01       	movw	r24, r30
    3904:	61 50       	subi	r22, 0x01	; 1
    3906:	71 09       	sbc	r23, r1
    3908:	f7 cf       	rjmp	.-18     	; 0x38f8 <mem_set+0x2>
    390a:	08 95       	ret

0000390c <eeprom_nvm_settings_write>:
    390c:	cf 93       	push	r28
    390e:	c8 2f       	mov	r28, r24
    3910:	87 ff       	sbrs	r24, 7
    3912:	04 c0       	rjmp	.+8      	; 0x391c <eeprom_nvm_settings_write+0x10>
    3914:	61 e1       	ldi	r22, 0x11	; 17
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	9b d7       	rcall	.+3894   	; 0x4852 <eeprom_write_byte>
    391c:	c0 ff       	sbrs	r28, 0
    391e:	07 c0       	rjmp	.+14     	; 0x392e <eeprom_nvm_settings_write+0x22>
    3920:	60 91 7a 04 	lds	r22, 0x047A	; 0x80047a <g_lcd_contrast_pm>
    3924:	6f 73       	andi	r22, 0x3F	; 63
    3926:	80 e1       	ldi	r24, 0x10	; 16
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	cf 91       	pop	r28
    392c:	92 c7       	rjmp	.+3876   	; 0x4852 <eeprom_write_byte>
    392e:	cf 91       	pop	r28
    3930:	08 95       	ret

00003932 <eeprom_nvm_settings_read>:
    3932:	87 ff       	sbrs	r24, 7
    3934:	07 c0       	rjmp	.+14     	; 0x3944 <eeprom_nvm_settings_read+0x12>
    3936:	80 e0       	ldi	r24, 0x00	; 0
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	83 d7       	rcall	.+3846   	; 0x4842 <eeprom_read_byte>
    393c:	81 31       	cpi	r24, 0x11	; 17
    393e:	11 f0       	breq	.+4      	; 0x3944 <eeprom_nvm_settings_read+0x12>
    3940:	80 e8       	ldi	r24, 0x80	; 128
    3942:	e4 df       	rcall	.-56     	; 0x390c <eeprom_nvm_settings_write>
    3944:	86 e1       	ldi	r24, 0x16	; 22
    3946:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <g_lcd_contrast_pm>
    394a:	08 95       	ret

0000394c <task>:
    394c:	8f 92       	push	r8
    394e:	9f 92       	push	r9
    3950:	af 92       	push	r10
    3952:	bf 92       	push	r11
    3954:	cf 92       	push	r12
    3956:	df 92       	push	r13
    3958:	ef 92       	push	r14
    395a:	ff 92       	push	r15
    395c:	0f 93       	push	r16
    395e:	1f 93       	push	r17
    3960:	cf 93       	push	r28
    3962:	df 93       	push	r29
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
    3968:	a8 97       	sbiw	r28, 0x28	; 40
    396a:	0f b6       	in	r0, 0x3f	; 63
    396c:	f8 94       	cli
    396e:	de bf       	out	0x3e, r29	; 62
    3970:	0f be       	out	0x3f, r0	; 63
    3972:	cd bf       	out	0x3d, r28	; 61
    3974:	76 df       	rcall	.-276    	; 0x3862 <cpu_irq_save>
    3976:	c0 90 84 04 	lds	r12, 0x0484	; 0x800484 <g_adc_light>
    397a:	d0 90 85 04 	lds	r13, 0x0485	; 0x800485 <g_adc_light+0x1>
    397e:	e0 90 86 04 	lds	r14, 0x0486	; 0x800486 <g_adc_light+0x2>
    3982:	f0 90 87 04 	lds	r15, 0x0487	; 0x800487 <g_adc_light+0x3>
    3986:	80 90 80 04 	lds	r8, 0x0480	; 0x800480 <g_adc_temp>
    398a:	90 90 81 04 	lds	r9, 0x0481	; 0x800481 <g_adc_temp+0x1>
    398e:	a0 90 82 04 	lds	r10, 0x0482	; 0x800482 <g_adc_temp+0x2>
    3992:	b0 90 83 04 	lds	r11, 0x0483	; 0x800483 <g_adc_temp+0x3>
    3996:	8f bf       	out	0x3f, r24	; 63
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e8       	ldi	r19, 0x80	; 128
    399c:	4d e6       	ldi	r20, 0x6D	; 109
    399e:	54 e4       	ldi	r21, 0x44	; 68
    39a0:	c7 01       	movw	r24, r14
    39a2:	b6 01       	movw	r22, r12
    39a4:	56 d2       	rcall	.+1196   	; 0x3e52 <__cmpsf2>
    39a6:	87 ff       	sbrs	r24, 7
    39a8:	21 c0       	rjmp	.+66     	; 0x39ec <task+0xa0>
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	40 e0       	ldi	r20, 0x00	; 0
    39b0:	50 e4       	ldi	r21, 0x40	; 64
    39b2:	c7 01       	movw	r24, r14
    39b4:	b6 01       	movw	r22, r12
    39b6:	e8 d1       	rcall	.+976    	; 0x3d88 <__subsf3>
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e8       	ldi	r19, 0x80	; 128
    39bc:	4d e6       	ldi	r20, 0x6D	; 109
    39be:	54 e4       	ldi	r21, 0x44	; 68
    39c0:	4c d2       	rcall	.+1176   	; 0x3e5a <__divsf3>
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	4d e7       	ldi	r20, 0x7D	; 125
    39c8:	53 e4       	ldi	r21, 0x43	; 67
    39ca:	e9 d3       	rcall	.+2002   	; 0x419e <__mulsf3>
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	40 e0       	ldi	r20, 0x00	; 0
    39d2:	50 e4       	ldi	r21, 0x40	; 64
    39d4:	da d1       	rcall	.+948    	; 0x3d8a <__addsf3>
    39d6:	ae d2       	rcall	.+1372   	; 0x3f34 <__fixunssfsi>
    39d8:	62 30       	cpi	r22, 0x02	; 2
    39da:	10 f0       	brcs	.+4      	; 0x39e0 <task+0x94>
    39dc:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    39e0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    39e4:	80 68       	ori	r24, 0x80	; 128
    39e6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    39ea:	07 c0       	rjmp	.+14     	; 0x39fa <task+0xae>
    39ec:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    39f0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    39f4:	8f 73       	andi	r24, 0x3F	; 63
    39f6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    39fa:	33 df       	rcall	.-410    	; 0x3862 <cpu_irq_save>
    39fc:	18 2f       	mov	r17, r24
    39fe:	29 e1       	ldi	r18, 0x19	; 25
    3a00:	37 ec       	ldi	r19, 0xC7	; 199
    3a02:	4f ea       	ldi	r20, 0xAF	; 175
    3a04:	53 e4       	ldi	r21, 0x43	; 67
    3a06:	c5 01       	movw	r24, r10
    3a08:	b4 01       	movw	r22, r8
    3a0a:	be d1       	rcall	.+892    	; 0x3d88 <__subsf3>
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 ea       	ldi	r19, 0xA0	; 160
    3a10:	47 e8       	ldi	r20, 0x87	; 135
    3a12:	5f e3       	ldi	r21, 0x3F	; 63
    3a14:	c4 d3       	rcall	.+1928   	; 0x419e <__mulsf3>
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	48 ec       	ldi	r20, 0xC8	; 200
    3a1c:	51 e4       	ldi	r21, 0x41	; 65
    3a1e:	b5 d1       	rcall	.+874    	; 0x3d8a <__addsf3>
    3a20:	60 93 7c 04 	sts	0x047C, r22	; 0x80047c <g_temp>
    3a24:	70 93 7d 04 	sts	0x047D, r23	; 0x80047d <g_temp+0x1>
    3a28:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <g_temp+0x2>
    3a2c:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <g_temp+0x3>
    3a30:	1f bf       	out	0x3f, r17	; 63
    3a32:	17 df       	rcall	.-466    	; 0x3862 <cpu_irq_save>
    3a34:	00 91 35 04 	lds	r16, 0x0435	; 0x800435 <g_SmartLCD_mode>
    3a38:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <g_status>
    3a3c:	90 fb       	bst	r25, 0
    3a3e:	ff 24       	eor	r15, r15
    3a40:	f0 f8       	bld	r15, 0
    3a42:	96 95       	lsr	r25
    3a44:	91 70       	andi	r25, 0x01	; 1
    3a46:	8f bf       	out	0x3f, r24	; 63
    3a48:	99 23       	and	r25, r25
    3a4a:	d9 f1       	breq	.+118    	; 0x3ac2 <task+0x176>
    3a4c:	00 31       	cpi	r16, 0x10	; 16
    3a4e:	21 f4       	brne	.+8      	; 0x3a58 <task+0x10c>
    3a50:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <lcd_show_new_smartlcd_data>
    3a54:	18 2f       	mov	r17, r24
    3a56:	05 c0       	rjmp	.+10     	; 0x3a62 <task+0x116>
    3a58:	00 32       	cpi	r16, 0x20	; 32
    3a5a:	99 f5       	brne	.+102    	; 0x3ac2 <task+0x176>
    3a5c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <lcd_show_new_refosc_data>
    3a60:	18 2f       	mov	r17, r24
    3a62:	f1 10       	cpse	r15, r1
    3a64:	2b c0       	rjmp	.+86     	; 0x3abc <task+0x170>
    3a66:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <s_last_animation.3222>
    3a6a:	88 23       	and	r24, r24
    3a6c:	39 f1       	breq	.+78     	; 0x3abc <task+0x170>
    3a6e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <s_last_animation.3222>
    3a72:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <lcd_cls>
    3a76:	00 32       	cpi	r16, 0x20	; 32
    3a78:	d1 f4       	brne	.+52     	; 0x3aae <task+0x162>
    3a7a:	01 e0       	ldi	r16, 0x01	; 1
    3a7c:	20 e8       	ldi	r18, 0x80	; 128
    3a7e:	40 ef       	ldi	r20, 0xF0	; 240
    3a80:	60 e0       	ldi	r22, 0x00	; 0
    3a82:	80 e0       	ldi	r24, 0x00	; 0
    3a84:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_rect>
    3a88:	88 e2       	ldi	r24, 0x28	; 40
    3a8a:	e0 e2       	ldi	r30, 0x20	; 32
    3a8c:	f3 e0       	ldi	r31, 0x03	; 3
    3a8e:	de 01       	movw	r26, r28
    3a90:	11 96       	adiw	r26, 0x01	; 1
    3a92:	01 90       	ld	r0, Z+
    3a94:	0d 92       	st	X+, r0
    3a96:	8a 95       	dec	r24
    3a98:	e1 f7       	brne	.-8      	; 0x3a92 <task+0x146>
    3a9a:	5a d9       	rcall	.-3404   	; 0x2d50 <lcd_get_sysfont>
    3a9c:	9c 01       	movw	r18, r24
    3a9e:	42 e0       	ldi	r20, 0x02	; 2
    3aa0:	63 e0       	ldi	r22, 0x03	; 3
    3aa2:	ce 01       	movw	r24, r28
    3aa4:	01 96       	adiw	r24, 0x01	; 1
    3aa6:	0e 94 14 07 	call	0xe28	; 0xe28 <gfx_mono_draw_string>
    3aaa:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_show_template>
    3aae:	d9 de       	rcall	.-590    	; 0x3862 <cpu_irq_save>
    3ab0:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <g_status>
    3ab4:	92 60       	ori	r25, 0x02	; 2
    3ab6:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <g_status>
    3aba:	8f bf       	out	0x3f, r24	; 63
    3abc:	11 11       	cpse	r17, r1
    3abe:	b9 cf       	rjmp	.-142    	; 0x3a32 <task+0xe6>
    3ac0:	04 c0       	rjmp	.+8      	; 0x3aca <task+0x17e>
    3ac2:	f1 10       	cpse	r15, r1
    3ac4:	02 c0       	rjmp	.+4      	; 0x3aca <task+0x17e>
    3ac6:	10 e0       	ldi	r17, 0x00	; 0
    3ac8:	ce cf       	rjmp	.-100    	; 0x3a66 <task+0x11a>
    3aca:	a8 96       	adiw	r28, 0x28	; 40
    3acc:	0f b6       	in	r0, 0x3f	; 63
    3ace:	f8 94       	cli
    3ad0:	de bf       	out	0x3e, r29	; 62
    3ad2:	0f be       	out	0x3f, r0	; 63
    3ad4:	cd bf       	out	0x3d, r28	; 61
    3ad6:	df 91       	pop	r29
    3ad8:	cf 91       	pop	r28
    3ada:	1f 91       	pop	r17
    3adc:	0f 91       	pop	r16
    3ade:	ff 90       	pop	r15
    3ae0:	ef 90       	pop	r14
    3ae2:	df 90       	pop	r13
    3ae4:	cf 90       	pop	r12
    3ae6:	bf 90       	pop	r11
    3ae8:	af 90       	pop	r10
    3aea:	9f 90       	pop	r9
    3aec:	8f 90       	pop	r8
    3aee:	08 95       	ret

00003af0 <enter_sleep>:
    3af0:	88 0f       	add	r24, r24
    3af2:	81 60       	ori	r24, 0x01	; 1
    3af4:	83 bf       	out	0x33, r24	; 51
    3af6:	88 95       	sleep
    3af8:	83 b7       	in	r24, 0x33	; 51
    3afa:	8e 7f       	andi	r24, 0xFE	; 254
    3afc:	83 bf       	out	0x33, r24	; 51
    3afe:	08 95       	ret

00003b00 <main>:
    3b00:	1f 93       	push	r17
    3b02:	cf 93       	push	r28
    3b04:	df 93       	push	r29
    3b06:	8e e7       	ldi	r24, 0x7E	; 126
    3b08:	88 b9       	out	0x08, r24	; 8
    3b0a:	88 e0       	ldi	r24, 0x08	; 8
    3b0c:	87 b9       	out	0x07, r24	; 7
    3b0e:	84 e1       	ldi	r24, 0x14	; 20
    3b10:	85 b9       	out	0x05, r24	; 5
    3b12:	8b ef       	ldi	r24, 0xFB	; 251
    3b14:	84 b9       	out	0x04, r24	; 4
    3b16:	8f ef       	ldi	r24, 0xFF	; 255
    3b18:	8b b9       	out	0x0b, r24	; 11
    3b1a:	1a b8       	out	0x0a, r1	; 10
    3b1c:	c1 e0       	ldi	r28, 0x01	; 1
    3b1e:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    3b22:	0e 94 06 03 	call	0x60c	; 0x60c <sysclk_init>
    3b26:	8b ee       	ldi	r24, 0xEB	; 235
    3b28:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    3b2c:	61 e0       	ldi	r22, 0x01	; 1
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>
    3b34:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    3b38:	86 e8       	ldi	r24, 0x86	; 134
    3b3a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3b3e:	80 ec       	ldi	r24, 0xC0	; 192
    3b40:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    3b44:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    3b48:	88 7f       	andi	r24, 0xF8	; 248
    3b4a:	84 60       	ori	r24, 0x04	; 4
    3b4c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    3b50:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3b54:	80 62       	ori	r24, 0x20	; 32
    3b56:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3b5a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3b5e:	80 61       	ori	r24, 0x10	; 16
    3b60:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3b64:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3b68:	88 60       	ori	r24, 0x08	; 8
    3b6a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3b6e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3b72:	80 64       	ori	r24, 0x40	; 64
    3b74:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3b78:	13 e8       	ldi	r17, 0x83	; 131
    3b7a:	13 bd       	out	0x23, r17	; 35
    3b7c:	60 e2       	ldi	r22, 0x20	; 32
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>
    3b84:	14 bc       	out	0x24, r1	; 36
    3b86:	84 e0       	ldi	r24, 0x04	; 4
    3b88:	85 bd       	out	0x25, r24	; 37
    3b8a:	16 bc       	out	0x26, r1	; 38
    3b8c:	17 bc       	out	0x27, r1	; 39
    3b8e:	d7 e0       	ldi	r29, 0x07	; 7
    3b90:	d5 bb       	out	0x15, r29	; 21
    3b92:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    3b96:	68 e0       	ldi	r22, 0x08	; 8
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>
    3b9e:	82 e8       	ldi	r24, 0x82	; 130
    3ba0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3ba4:	89 e0       	ldi	r24, 0x09	; 9
    3ba6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    3baa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3bae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    3bb2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    3bb6:	80 e8       	ldi	r24, 0x80	; 128
    3bb8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    3bbc:	87 e2       	ldi	r24, 0x27	; 39
    3bbe:	86 bb       	out	0x16, r24	; 22
    3bc0:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    3bc4:	60 e4       	ldi	r22, 0x40	; 64
    3bc6:	80 e0       	ldi	r24, 0x00	; 0
    3bc8:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>
    3bcc:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
    3bd0:	10 93 b0 00 	sts	0x00B0, r17	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3bd4:	85 e0       	ldi	r24, 0x05	; 5
    3bd6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    3bda:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    3bde:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    3be2:	d7 bb       	out	0x17, r29	; 23
    3be4:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    3be8:	0e 94 05 03 	call	0x60a	; 0x60a <board_init>
    3bec:	84 b7       	in	r24, 0x34	; 52
    3bee:	98 2f       	mov	r25, r24
    3bf0:	97 70       	andi	r25, 0x07	; 7
    3bf2:	11 f4       	brne	.+4      	; 0x3bf8 <main+0xf8>
    3bf4:	81 11       	cpse	r24, r1
    3bf6:	2b c0       	rjmp	.+86     	; 0x3c4e <main+0x14e>
    3bf8:	34 de       	rcall	.-920    	; 0x3862 <cpu_irq_save>
    3bfa:	f8 94       	cli
    3bfc:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <g_adc_state>
    3c00:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <g_adc_light>
    3c04:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <g_adc_light+0x1>
    3c08:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <g_adc_light+0x2>
    3c0c:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <g_adc_light+0x3>
    3c10:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <g_adc_temp>
    3c14:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <g_adc_temp+0x1>
    3c18:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <g_adc_temp+0x2>
    3c1c:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <g_adc_temp+0x3>
    3c20:	40 e0       	ldi	r20, 0x00	; 0
    3c22:	50 e0       	ldi	r21, 0x00	; 0
    3c24:	68 ec       	ldi	r22, 0xC8	; 200
    3c26:	71 e4       	ldi	r23, 0x41	; 65
    3c28:	40 93 7c 04 	sts	0x047C, r20	; 0x80047c <g_temp>
    3c2c:	50 93 7d 04 	sts	0x047D, r21	; 0x80047d <g_temp+0x1>
    3c30:	60 93 7e 04 	sts	0x047E, r22	; 0x80047e <g_temp+0x2>
    3c34:	70 93 7f 04 	sts	0x047F, r23	; 0x80047f <g_temp+0x3>
    3c38:	90 e4       	ldi	r25, 0x40	; 64
    3c3a:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <g_lcdbl_dimmer>
    3c3e:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <g_status>
    3c42:	9e 7f       	andi	r25, 0xFE	; 254
    3c44:	9d 7f       	andi	r25, 0xFD	; 253
    3c46:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <g_status>
    3c4a:	8f bf       	out	0x3f, r24	; 63
    3c4c:	0d c0       	rjmp	.+26     	; 0x3c68 <main+0x168>
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	a0 e0       	ldi	r26, 0x00	; 0
    3c52:	b0 e0       	ldi	r27, 0x00	; 0
    3c54:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <g_u32_DEBUG21>
    3c58:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <g_u32_DEBUG21+0x1>
    3c5c:	a0 93 33 04 	sts	0x0433, r26	; 0x800433 <g_u32_DEBUG21+0x2>
    3c60:	b0 93 34 04 	sts	0x0434, r27	; 0x800434 <g_u32_DEBUG21+0x3>
    3c64:	0e 94 40 07 	call	0xe80	; 0xe80 <asm_break>
    3c68:	8f ef       	ldi	r24, 0xFF	; 255
    3c6a:	63 de       	rcall	.-826    	; 0x3932 <eeprom_nvm_settings_read>
    3c6c:	60 e8       	ldi	r22, 0x80	; 128
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	0e 94 1f 03 	call	0x63e	; 0x63e <sysclk_enable_module>
    3c74:	f6 dd       	rcall	.-1044   	; 0x3862 <cpu_irq_save>
    3c76:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3c7a:	92 e0       	ldi	r25, 0x02	; 2
    3c7c:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3c80:	94 e4       	ldi	r25, 0x44	; 68
    3c82:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    3c86:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__TEXT_REGION_LENGTH__+0x7e00bd>
    3c8a:	95 e4       	ldi	r25, 0x45	; 69
    3c8c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3c90:	8f bf       	out	0x3f, r24	; 63
    3c92:	78 94       	sei
    3c94:	13 bc       	out	0x23, r1	; 35
    3c96:	5f d8       	rcall	.-3906   	; 0x2d56 <lcd_init>
    3c98:	81 ef       	ldi	r24, 0xF1	; 241
    3c9a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <lcd_test>
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <runmode>
    3ca4:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <runmode>
    3ca8:	88 23       	and	r24, r24
    3caa:	21 f0       	breq	.+8      	; 0x3cb4 <main+0x1b4>
    3cac:	4f de       	rcall	.-866    	; 0x394c <task>
    3cae:	80 e0       	ldi	r24, 0x00	; 0
    3cb0:	1f df       	rcall	.-450    	; 0x3af0 <enter_sleep>
    3cb2:	f8 cf       	rjmp	.-16     	; 0x3ca4 <main+0x1a4>
    3cb4:	65 d8       	rcall	.-3894   	; 0x2d80 <lcd_shutdown>
    3cb6:	f8 94       	cli
    3cb8:	80 b7       	in	r24, 0x30	; 48
    3cba:	80 68       	ori	r24, 0x80	; 128
    3cbc:	80 bf       	out	0x30, r24	; 48
    3cbe:	64 e0       	ldi	r22, 0x04	; 4
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
    3cc6:	62 e0       	ldi	r22, 0x02	; 2
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
    3cce:	c9 dd       	rcall	.-1134   	; 0x3862 <cpu_irq_save>
    3cd0:	94 e0       	ldi	r25, 0x04	; 4
    3cd2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3cd6:	3c 98       	cbi	0x07, 4	; 7
    3cd8:	44 9a       	sbi	0x08, 4	; 8
    3cda:	3d 98       	cbi	0x07, 5	; 7
    3cdc:	45 9a       	sbi	0x08, 5	; 8
    3cde:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3ce2:	8f bf       	out	0x3f, r24	; 63
    3ce4:	60 e8       	ldi	r22, 0x80	; 128
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
    3ce8:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
    3cec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3cf0:	87 7f       	andi	r24, 0xF7	; 247
    3cf2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3cf6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3cfa:	8f 7d       	andi	r24, 0xDF	; 223
    3cfc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3d00:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    3d04:	88 7f       	andi	r24, 0xF8	; 248
    3d06:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    3d0a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    3d0e:	61 e0       	ldi	r22, 0x01	; 1
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
    3d16:	a5 dd       	rcall	.-1206   	; 0x3862 <cpu_irq_save>
    3d18:	c8 2f       	mov	r28, r24
    3d1a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    3d1e:	14 bc       	out	0x24, r1	; 36
    3d20:	15 bc       	out	0x25, r1	; 37
    3d22:	60 e2       	ldi	r22, 0x20	; 32
    3d24:	80 e0       	ldi	r24, 0x00	; 0
    3d26:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
    3d2a:	21 98       	cbi	0x04, 1	; 4
    3d2c:	29 98       	cbi	0x05, 1	; 5
    3d2e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    3d32:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3d36:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    3d3a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    3d3e:	68 e0       	ldi	r22, 0x08	; 8
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
    3d46:	23 9a       	sbi	0x04, 3	; 4
    3d48:	2b 98       	cbi	0x05, 3	; 5
    3d4a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    3d4e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
    3d52:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3d56:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    3d5a:	60 e4       	ldi	r22, 0x40	; 64
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	0e 94 35 03 	call	0x66a	; 0x66a <sysclk_disable_module>
    3d62:	7f dd       	rcall	.-1282   	; 0x3862 <cpu_irq_save>
    3d64:	5f 93       	push	r21
    3d66:	50 e8       	ldi	r21, 0x80	; 128
    3d68:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    3d6c:	50 e0       	ldi	r21, 0x00	; 0
    3d6e:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    3d72:	5f 91       	pop	r21
    3d74:	8f bf       	out	0x3f, r24	; 63
    3d76:	cf bf       	out	0x3f, r28	; 63
    3d78:	84 e0       	ldi	r24, 0x04	; 4
    3d7a:	ba de       	rcall	.-652    	; 0x3af0 <enter_sleep>
    3d7c:	80 e0       	ldi	r24, 0x00	; 0
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	df 91       	pop	r29
    3d82:	cf 91       	pop	r28
    3d84:	1f 91       	pop	r17
    3d86:	08 95       	ret

00003d88 <__subsf3>:
    3d88:	50 58       	subi	r21, 0x80	; 128

00003d8a <__addsf3>:
    3d8a:	bb 27       	eor	r27, r27
    3d8c:	aa 27       	eor	r26, r26
    3d8e:	0e d0       	rcall	.+28     	; 0x3dac <__addsf3x>
    3d90:	b1 c1       	rjmp	.+866    	; 0x40f4 <__fp_round>
    3d92:	a2 d1       	rcall	.+836    	; 0x40d8 <__fp_pscA>
    3d94:	30 f0       	brcs	.+12     	; 0x3da2 <__addsf3+0x18>
    3d96:	a7 d1       	rcall	.+846    	; 0x40e6 <__fp_pscB>
    3d98:	20 f0       	brcs	.+8      	; 0x3da2 <__addsf3+0x18>
    3d9a:	31 f4       	brne	.+12     	; 0x3da8 <__addsf3+0x1e>
    3d9c:	9f 3f       	cpi	r25, 0xFF	; 255
    3d9e:	11 f4       	brne	.+4      	; 0x3da4 <__addsf3+0x1a>
    3da0:	1e f4       	brtc	.+6      	; 0x3da8 <__addsf3+0x1e>
    3da2:	97 c1       	rjmp	.+814    	; 0x40d2 <__fp_nan>
    3da4:	0e f4       	brtc	.+2      	; 0x3da8 <__addsf3+0x1e>
    3da6:	e0 95       	com	r30
    3da8:	e7 fb       	bst	r30, 7
    3daa:	64 c1       	rjmp	.+712    	; 0x4074 <__fp_inf>

00003dac <__addsf3x>:
    3dac:	e9 2f       	mov	r30, r25
    3dae:	b3 d1       	rcall	.+870    	; 0x4116 <__fp_split3>
    3db0:	80 f3       	brcs	.-32     	; 0x3d92 <__addsf3+0x8>
    3db2:	ba 17       	cp	r27, r26
    3db4:	62 07       	cpc	r22, r18
    3db6:	73 07       	cpc	r23, r19
    3db8:	84 07       	cpc	r24, r20
    3dba:	95 07       	cpc	r25, r21
    3dbc:	18 f0       	brcs	.+6      	; 0x3dc4 <__addsf3x+0x18>
    3dbe:	71 f4       	brne	.+28     	; 0x3ddc <__addsf3x+0x30>
    3dc0:	9e f5       	brtc	.+102    	; 0x3e28 <__addsf3x+0x7c>
    3dc2:	e2 c1       	rjmp	.+964    	; 0x4188 <__fp_zero>
    3dc4:	0e f4       	brtc	.+2      	; 0x3dc8 <__addsf3x+0x1c>
    3dc6:	e0 95       	com	r30
    3dc8:	0b 2e       	mov	r0, r27
    3dca:	ba 2f       	mov	r27, r26
    3dcc:	a0 2d       	mov	r26, r0
    3dce:	0b 01       	movw	r0, r22
    3dd0:	b9 01       	movw	r22, r18
    3dd2:	90 01       	movw	r18, r0
    3dd4:	0c 01       	movw	r0, r24
    3dd6:	ca 01       	movw	r24, r20
    3dd8:	a0 01       	movw	r20, r0
    3dda:	11 24       	eor	r1, r1
    3ddc:	ff 27       	eor	r31, r31
    3dde:	59 1b       	sub	r21, r25
    3de0:	99 f0       	breq	.+38     	; 0x3e08 <__addsf3x+0x5c>
    3de2:	59 3f       	cpi	r21, 0xF9	; 249
    3de4:	50 f4       	brcc	.+20     	; 0x3dfa <__addsf3x+0x4e>
    3de6:	50 3e       	cpi	r21, 0xE0	; 224
    3de8:	68 f1       	brcs	.+90     	; 0x3e44 <__addsf3x+0x98>
    3dea:	1a 16       	cp	r1, r26
    3dec:	f0 40       	sbci	r31, 0x00	; 0
    3dee:	a2 2f       	mov	r26, r18
    3df0:	23 2f       	mov	r18, r19
    3df2:	34 2f       	mov	r19, r20
    3df4:	44 27       	eor	r20, r20
    3df6:	58 5f       	subi	r21, 0xF8	; 248
    3df8:	f3 cf       	rjmp	.-26     	; 0x3de0 <__addsf3x+0x34>
    3dfa:	46 95       	lsr	r20
    3dfc:	37 95       	ror	r19
    3dfe:	27 95       	ror	r18
    3e00:	a7 95       	ror	r26
    3e02:	f0 40       	sbci	r31, 0x00	; 0
    3e04:	53 95       	inc	r21
    3e06:	c9 f7       	brne	.-14     	; 0x3dfa <__addsf3x+0x4e>
    3e08:	7e f4       	brtc	.+30     	; 0x3e28 <__addsf3x+0x7c>
    3e0a:	1f 16       	cp	r1, r31
    3e0c:	ba 0b       	sbc	r27, r26
    3e0e:	62 0b       	sbc	r22, r18
    3e10:	73 0b       	sbc	r23, r19
    3e12:	84 0b       	sbc	r24, r20
    3e14:	ba f0       	brmi	.+46     	; 0x3e44 <__addsf3x+0x98>
    3e16:	91 50       	subi	r25, 0x01	; 1
    3e18:	a1 f0       	breq	.+40     	; 0x3e42 <__addsf3x+0x96>
    3e1a:	ff 0f       	add	r31, r31
    3e1c:	bb 1f       	adc	r27, r27
    3e1e:	66 1f       	adc	r22, r22
    3e20:	77 1f       	adc	r23, r23
    3e22:	88 1f       	adc	r24, r24
    3e24:	c2 f7       	brpl	.-16     	; 0x3e16 <__addsf3x+0x6a>
    3e26:	0e c0       	rjmp	.+28     	; 0x3e44 <__addsf3x+0x98>
    3e28:	ba 0f       	add	r27, r26
    3e2a:	62 1f       	adc	r22, r18
    3e2c:	73 1f       	adc	r23, r19
    3e2e:	84 1f       	adc	r24, r20
    3e30:	48 f4       	brcc	.+18     	; 0x3e44 <__addsf3x+0x98>
    3e32:	87 95       	ror	r24
    3e34:	77 95       	ror	r23
    3e36:	67 95       	ror	r22
    3e38:	b7 95       	ror	r27
    3e3a:	f7 95       	ror	r31
    3e3c:	9e 3f       	cpi	r25, 0xFE	; 254
    3e3e:	08 f0       	brcs	.+2      	; 0x3e42 <__addsf3x+0x96>
    3e40:	b3 cf       	rjmp	.-154    	; 0x3da8 <__addsf3+0x1e>
    3e42:	93 95       	inc	r25
    3e44:	88 0f       	add	r24, r24
    3e46:	08 f0       	brcs	.+2      	; 0x3e4a <__addsf3x+0x9e>
    3e48:	99 27       	eor	r25, r25
    3e4a:	ee 0f       	add	r30, r30
    3e4c:	97 95       	ror	r25
    3e4e:	87 95       	ror	r24
    3e50:	08 95       	ret

00003e52 <__cmpsf2>:
    3e52:	ec d0       	rcall	.+472    	; 0x402c <__fp_cmp>
    3e54:	08 f4       	brcc	.+2      	; 0x3e58 <__cmpsf2+0x6>
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	08 95       	ret

00003e5a <__divsf3>:
    3e5a:	0c d0       	rcall	.+24     	; 0x3e74 <__divsf3x>
    3e5c:	4b c1       	rjmp	.+662    	; 0x40f4 <__fp_round>
    3e5e:	43 d1       	rcall	.+646    	; 0x40e6 <__fp_pscB>
    3e60:	40 f0       	brcs	.+16     	; 0x3e72 <__divsf3+0x18>
    3e62:	3a d1       	rcall	.+628    	; 0x40d8 <__fp_pscA>
    3e64:	30 f0       	brcs	.+12     	; 0x3e72 <__divsf3+0x18>
    3e66:	21 f4       	brne	.+8      	; 0x3e70 <__divsf3+0x16>
    3e68:	5f 3f       	cpi	r21, 0xFF	; 255
    3e6a:	19 f0       	breq	.+6      	; 0x3e72 <__divsf3+0x18>
    3e6c:	03 c1       	rjmp	.+518    	; 0x4074 <__fp_inf>
    3e6e:	51 11       	cpse	r21, r1
    3e70:	8c c1       	rjmp	.+792    	; 0x418a <__fp_szero>
    3e72:	2f c1       	rjmp	.+606    	; 0x40d2 <__fp_nan>

00003e74 <__divsf3x>:
    3e74:	50 d1       	rcall	.+672    	; 0x4116 <__fp_split3>
    3e76:	98 f3       	brcs	.-26     	; 0x3e5e <__divsf3+0x4>

00003e78 <__divsf3_pse>:
    3e78:	99 23       	and	r25, r25
    3e7a:	c9 f3       	breq	.-14     	; 0x3e6e <__divsf3+0x14>
    3e7c:	55 23       	and	r21, r21
    3e7e:	b1 f3       	breq	.-20     	; 0x3e6c <__divsf3+0x12>
    3e80:	95 1b       	sub	r25, r21
    3e82:	55 0b       	sbc	r21, r21
    3e84:	bb 27       	eor	r27, r27
    3e86:	aa 27       	eor	r26, r26
    3e88:	62 17       	cp	r22, r18
    3e8a:	73 07       	cpc	r23, r19
    3e8c:	84 07       	cpc	r24, r20
    3e8e:	38 f0       	brcs	.+14     	; 0x3e9e <__divsf3_pse+0x26>
    3e90:	9f 5f       	subi	r25, 0xFF	; 255
    3e92:	5f 4f       	sbci	r21, 0xFF	; 255
    3e94:	22 0f       	add	r18, r18
    3e96:	33 1f       	adc	r19, r19
    3e98:	44 1f       	adc	r20, r20
    3e9a:	aa 1f       	adc	r26, r26
    3e9c:	a9 f3       	breq	.-22     	; 0x3e88 <__divsf3_pse+0x10>
    3e9e:	33 d0       	rcall	.+102    	; 0x3f06 <__divsf3_pse+0x8e>
    3ea0:	0e 2e       	mov	r0, r30
    3ea2:	3a f0       	brmi	.+14     	; 0x3eb2 <__divsf3_pse+0x3a>
    3ea4:	e0 e8       	ldi	r30, 0x80	; 128
    3ea6:	30 d0       	rcall	.+96     	; 0x3f08 <__divsf3_pse+0x90>
    3ea8:	91 50       	subi	r25, 0x01	; 1
    3eaa:	50 40       	sbci	r21, 0x00	; 0
    3eac:	e6 95       	lsr	r30
    3eae:	00 1c       	adc	r0, r0
    3eb0:	ca f7       	brpl	.-14     	; 0x3ea4 <__divsf3_pse+0x2c>
    3eb2:	29 d0       	rcall	.+82     	; 0x3f06 <__divsf3_pse+0x8e>
    3eb4:	fe 2f       	mov	r31, r30
    3eb6:	27 d0       	rcall	.+78     	; 0x3f06 <__divsf3_pse+0x8e>
    3eb8:	66 0f       	add	r22, r22
    3eba:	77 1f       	adc	r23, r23
    3ebc:	88 1f       	adc	r24, r24
    3ebe:	bb 1f       	adc	r27, r27
    3ec0:	26 17       	cp	r18, r22
    3ec2:	37 07       	cpc	r19, r23
    3ec4:	48 07       	cpc	r20, r24
    3ec6:	ab 07       	cpc	r26, r27
    3ec8:	b0 e8       	ldi	r27, 0x80	; 128
    3eca:	09 f0       	breq	.+2      	; 0x3ece <__divsf3_pse+0x56>
    3ecc:	bb 0b       	sbc	r27, r27
    3ece:	80 2d       	mov	r24, r0
    3ed0:	bf 01       	movw	r22, r30
    3ed2:	ff 27       	eor	r31, r31
    3ed4:	93 58       	subi	r25, 0x83	; 131
    3ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed8:	2a f0       	brmi	.+10     	; 0x3ee4 <__divsf3_pse+0x6c>
    3eda:	9e 3f       	cpi	r25, 0xFE	; 254
    3edc:	51 05       	cpc	r21, r1
    3ede:	68 f0       	brcs	.+26     	; 0x3efa <__divsf3_pse+0x82>
    3ee0:	c9 c0       	rjmp	.+402    	; 0x4074 <__fp_inf>
    3ee2:	53 c1       	rjmp	.+678    	; 0x418a <__fp_szero>
    3ee4:	5f 3f       	cpi	r21, 0xFF	; 255
    3ee6:	ec f3       	brlt	.-6      	; 0x3ee2 <__divsf3_pse+0x6a>
    3ee8:	98 3e       	cpi	r25, 0xE8	; 232
    3eea:	dc f3       	brlt	.-10     	; 0x3ee2 <__divsf3_pse+0x6a>
    3eec:	86 95       	lsr	r24
    3eee:	77 95       	ror	r23
    3ef0:	67 95       	ror	r22
    3ef2:	b7 95       	ror	r27
    3ef4:	f7 95       	ror	r31
    3ef6:	9f 5f       	subi	r25, 0xFF	; 255
    3ef8:	c9 f7       	brne	.-14     	; 0x3eec <__divsf3_pse+0x74>
    3efa:	88 0f       	add	r24, r24
    3efc:	91 1d       	adc	r25, r1
    3efe:	96 95       	lsr	r25
    3f00:	87 95       	ror	r24
    3f02:	97 f9       	bld	r25, 7
    3f04:	08 95       	ret
    3f06:	e1 e0       	ldi	r30, 0x01	; 1
    3f08:	66 0f       	add	r22, r22
    3f0a:	77 1f       	adc	r23, r23
    3f0c:	88 1f       	adc	r24, r24
    3f0e:	bb 1f       	adc	r27, r27
    3f10:	62 17       	cp	r22, r18
    3f12:	73 07       	cpc	r23, r19
    3f14:	84 07       	cpc	r24, r20
    3f16:	ba 07       	cpc	r27, r26
    3f18:	20 f0       	brcs	.+8      	; 0x3f22 <__divsf3_pse+0xaa>
    3f1a:	62 1b       	sub	r22, r18
    3f1c:	73 0b       	sbc	r23, r19
    3f1e:	84 0b       	sbc	r24, r20
    3f20:	ba 0b       	sbc	r27, r26
    3f22:	ee 1f       	adc	r30, r30
    3f24:	88 f7       	brcc	.-30     	; 0x3f08 <__divsf3_pse+0x90>
    3f26:	e0 95       	com	r30
    3f28:	08 95       	ret

00003f2a <__fixsfsi>:
    3f2a:	04 d0       	rcall	.+8      	; 0x3f34 <__fixunssfsi>
    3f2c:	68 94       	set
    3f2e:	b1 11       	cpse	r27, r1
    3f30:	2c c1       	rjmp	.+600    	; 0x418a <__fp_szero>
    3f32:	08 95       	ret

00003f34 <__fixunssfsi>:
    3f34:	f8 d0       	rcall	.+496    	; 0x4126 <__fp_splitA>
    3f36:	88 f0       	brcs	.+34     	; 0x3f5a <__fixunssfsi+0x26>
    3f38:	9f 57       	subi	r25, 0x7F	; 127
    3f3a:	90 f0       	brcs	.+36     	; 0x3f60 <__fixunssfsi+0x2c>
    3f3c:	b9 2f       	mov	r27, r25
    3f3e:	99 27       	eor	r25, r25
    3f40:	b7 51       	subi	r27, 0x17	; 23
    3f42:	a0 f0       	brcs	.+40     	; 0x3f6c <__fixunssfsi+0x38>
    3f44:	d1 f0       	breq	.+52     	; 0x3f7a <__fixunssfsi+0x46>
    3f46:	66 0f       	add	r22, r22
    3f48:	77 1f       	adc	r23, r23
    3f4a:	88 1f       	adc	r24, r24
    3f4c:	99 1f       	adc	r25, r25
    3f4e:	1a f0       	brmi	.+6      	; 0x3f56 <__fixunssfsi+0x22>
    3f50:	ba 95       	dec	r27
    3f52:	c9 f7       	brne	.-14     	; 0x3f46 <__fixunssfsi+0x12>
    3f54:	12 c0       	rjmp	.+36     	; 0x3f7a <__fixunssfsi+0x46>
    3f56:	b1 30       	cpi	r27, 0x01	; 1
    3f58:	81 f0       	breq	.+32     	; 0x3f7a <__fixunssfsi+0x46>
    3f5a:	16 d1       	rcall	.+556    	; 0x4188 <__fp_zero>
    3f5c:	b1 e0       	ldi	r27, 0x01	; 1
    3f5e:	08 95       	ret
    3f60:	13 c1       	rjmp	.+550    	; 0x4188 <__fp_zero>
    3f62:	67 2f       	mov	r22, r23
    3f64:	78 2f       	mov	r23, r24
    3f66:	88 27       	eor	r24, r24
    3f68:	b8 5f       	subi	r27, 0xF8	; 248
    3f6a:	39 f0       	breq	.+14     	; 0x3f7a <__fixunssfsi+0x46>
    3f6c:	b9 3f       	cpi	r27, 0xF9	; 249
    3f6e:	cc f3       	brlt	.-14     	; 0x3f62 <__fixunssfsi+0x2e>
    3f70:	86 95       	lsr	r24
    3f72:	77 95       	ror	r23
    3f74:	67 95       	ror	r22
    3f76:	b3 95       	inc	r27
    3f78:	d9 f7       	brne	.-10     	; 0x3f70 <__fixunssfsi+0x3c>
    3f7a:	3e f4       	brtc	.+14     	; 0x3f8a <__fixunssfsi+0x56>
    3f7c:	90 95       	com	r25
    3f7e:	80 95       	com	r24
    3f80:	70 95       	com	r23
    3f82:	61 95       	neg	r22
    3f84:	7f 4f       	sbci	r23, 0xFF	; 255
    3f86:	8f 4f       	sbci	r24, 0xFF	; 255
    3f88:	9f 4f       	sbci	r25, 0xFF	; 255
    3f8a:	08 95       	ret

00003f8c <__floatunsisf>:
    3f8c:	e8 94       	clt
    3f8e:	09 c0       	rjmp	.+18     	; 0x3fa2 <__floatsisf+0x12>

00003f90 <__floatsisf>:
    3f90:	97 fb       	bst	r25, 7
    3f92:	3e f4       	brtc	.+14     	; 0x3fa2 <__floatsisf+0x12>
    3f94:	90 95       	com	r25
    3f96:	80 95       	com	r24
    3f98:	70 95       	com	r23
    3f9a:	61 95       	neg	r22
    3f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9e:	8f 4f       	sbci	r24, 0xFF	; 255
    3fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fa2:	99 23       	and	r25, r25
    3fa4:	a9 f0       	breq	.+42     	; 0x3fd0 <__floatsisf+0x40>
    3fa6:	f9 2f       	mov	r31, r25
    3fa8:	96 e9       	ldi	r25, 0x96	; 150
    3faa:	bb 27       	eor	r27, r27
    3fac:	93 95       	inc	r25
    3fae:	f6 95       	lsr	r31
    3fb0:	87 95       	ror	r24
    3fb2:	77 95       	ror	r23
    3fb4:	67 95       	ror	r22
    3fb6:	b7 95       	ror	r27
    3fb8:	f1 11       	cpse	r31, r1
    3fba:	f8 cf       	rjmp	.-16     	; 0x3fac <__floatsisf+0x1c>
    3fbc:	fa f4       	brpl	.+62     	; 0x3ffc <__floatsisf+0x6c>
    3fbe:	bb 0f       	add	r27, r27
    3fc0:	11 f4       	brne	.+4      	; 0x3fc6 <__floatsisf+0x36>
    3fc2:	60 ff       	sbrs	r22, 0
    3fc4:	1b c0       	rjmp	.+54     	; 0x3ffc <__floatsisf+0x6c>
    3fc6:	6f 5f       	subi	r22, 0xFF	; 255
    3fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    3fca:	8f 4f       	sbci	r24, 0xFF	; 255
    3fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fce:	16 c0       	rjmp	.+44     	; 0x3ffc <__floatsisf+0x6c>
    3fd0:	88 23       	and	r24, r24
    3fd2:	11 f0       	breq	.+4      	; 0x3fd8 <__floatsisf+0x48>
    3fd4:	96 e9       	ldi	r25, 0x96	; 150
    3fd6:	11 c0       	rjmp	.+34     	; 0x3ffa <__floatsisf+0x6a>
    3fd8:	77 23       	and	r23, r23
    3fda:	21 f0       	breq	.+8      	; 0x3fe4 <__floatsisf+0x54>
    3fdc:	9e e8       	ldi	r25, 0x8E	; 142
    3fde:	87 2f       	mov	r24, r23
    3fe0:	76 2f       	mov	r23, r22
    3fe2:	05 c0       	rjmp	.+10     	; 0x3fee <__floatsisf+0x5e>
    3fe4:	66 23       	and	r22, r22
    3fe6:	71 f0       	breq	.+28     	; 0x4004 <__floatsisf+0x74>
    3fe8:	96 e8       	ldi	r25, 0x86	; 134
    3fea:	86 2f       	mov	r24, r22
    3fec:	70 e0       	ldi	r23, 0x00	; 0
    3fee:	60 e0       	ldi	r22, 0x00	; 0
    3ff0:	2a f0       	brmi	.+10     	; 0x3ffc <__floatsisf+0x6c>
    3ff2:	9a 95       	dec	r25
    3ff4:	66 0f       	add	r22, r22
    3ff6:	77 1f       	adc	r23, r23
    3ff8:	88 1f       	adc	r24, r24
    3ffa:	da f7       	brpl	.-10     	; 0x3ff2 <__floatsisf+0x62>
    3ffc:	88 0f       	add	r24, r24
    3ffe:	96 95       	lsr	r25
    4000:	87 95       	ror	r24
    4002:	97 f9       	bld	r25, 7
    4004:	08 95       	ret

00004006 <floor>:
    4006:	a9 d0       	rcall	.+338    	; 0x415a <__fp_trunc>
    4008:	80 f0       	brcs	.+32     	; 0x402a <floor+0x24>
    400a:	9f 37       	cpi	r25, 0x7F	; 127
    400c:	40 f4       	brcc	.+16     	; 0x401e <floor+0x18>
    400e:	91 11       	cpse	r25, r1
    4010:	0e f0       	brts	.+2      	; 0x4014 <floor+0xe>
    4012:	bb c0       	rjmp	.+374    	; 0x418a <__fp_szero>
    4014:	60 e0       	ldi	r22, 0x00	; 0
    4016:	70 e0       	ldi	r23, 0x00	; 0
    4018:	80 e8       	ldi	r24, 0x80	; 128
    401a:	9f eb       	ldi	r25, 0xBF	; 191
    401c:	08 95       	ret
    401e:	26 f4       	brtc	.+8      	; 0x4028 <floor+0x22>
    4020:	1b 16       	cp	r1, r27
    4022:	61 1d       	adc	r22, r1
    4024:	71 1d       	adc	r23, r1
    4026:	81 1d       	adc	r24, r1
    4028:	2b c0       	rjmp	.+86     	; 0x4080 <__fp_mintl>
    402a:	45 c0       	rjmp	.+138    	; 0x40b6 <__fp_mpack>

0000402c <__fp_cmp>:
    402c:	99 0f       	add	r25, r25
    402e:	00 08       	sbc	r0, r0
    4030:	55 0f       	add	r21, r21
    4032:	aa 0b       	sbc	r26, r26
    4034:	e0 e8       	ldi	r30, 0x80	; 128
    4036:	fe ef       	ldi	r31, 0xFE	; 254
    4038:	16 16       	cp	r1, r22
    403a:	17 06       	cpc	r1, r23
    403c:	e8 07       	cpc	r30, r24
    403e:	f9 07       	cpc	r31, r25
    4040:	c0 f0       	brcs	.+48     	; 0x4072 <__fp_cmp+0x46>
    4042:	12 16       	cp	r1, r18
    4044:	13 06       	cpc	r1, r19
    4046:	e4 07       	cpc	r30, r20
    4048:	f5 07       	cpc	r31, r21
    404a:	98 f0       	brcs	.+38     	; 0x4072 <__fp_cmp+0x46>
    404c:	62 1b       	sub	r22, r18
    404e:	73 0b       	sbc	r23, r19
    4050:	84 0b       	sbc	r24, r20
    4052:	95 0b       	sbc	r25, r21
    4054:	39 f4       	brne	.+14     	; 0x4064 <__fp_cmp+0x38>
    4056:	0a 26       	eor	r0, r26
    4058:	61 f0       	breq	.+24     	; 0x4072 <__fp_cmp+0x46>
    405a:	23 2b       	or	r18, r19
    405c:	24 2b       	or	r18, r20
    405e:	25 2b       	or	r18, r21
    4060:	21 f4       	brne	.+8      	; 0x406a <__fp_cmp+0x3e>
    4062:	08 95       	ret
    4064:	0a 26       	eor	r0, r26
    4066:	09 f4       	brne	.+2      	; 0x406a <__fp_cmp+0x3e>
    4068:	a1 40       	sbci	r26, 0x01	; 1
    406a:	a6 95       	lsr	r26
    406c:	8f ef       	ldi	r24, 0xFF	; 255
    406e:	81 1d       	adc	r24, r1
    4070:	81 1d       	adc	r24, r1
    4072:	08 95       	ret

00004074 <__fp_inf>:
    4074:	97 f9       	bld	r25, 7
    4076:	9f 67       	ori	r25, 0x7F	; 127
    4078:	80 e8       	ldi	r24, 0x80	; 128
    407a:	70 e0       	ldi	r23, 0x00	; 0
    407c:	60 e0       	ldi	r22, 0x00	; 0
    407e:	08 95       	ret

00004080 <__fp_mintl>:
    4080:	88 23       	and	r24, r24
    4082:	71 f4       	brne	.+28     	; 0x40a0 <__fp_mintl+0x20>
    4084:	77 23       	and	r23, r23
    4086:	21 f0       	breq	.+8      	; 0x4090 <__fp_mintl+0x10>
    4088:	98 50       	subi	r25, 0x08	; 8
    408a:	87 2b       	or	r24, r23
    408c:	76 2f       	mov	r23, r22
    408e:	07 c0       	rjmp	.+14     	; 0x409e <__fp_mintl+0x1e>
    4090:	66 23       	and	r22, r22
    4092:	11 f4       	brne	.+4      	; 0x4098 <__fp_mintl+0x18>
    4094:	99 27       	eor	r25, r25
    4096:	0d c0       	rjmp	.+26     	; 0x40b2 <__fp_mintl+0x32>
    4098:	90 51       	subi	r25, 0x10	; 16
    409a:	86 2b       	or	r24, r22
    409c:	70 e0       	ldi	r23, 0x00	; 0
    409e:	60 e0       	ldi	r22, 0x00	; 0
    40a0:	2a f0       	brmi	.+10     	; 0x40ac <__fp_mintl+0x2c>
    40a2:	9a 95       	dec	r25
    40a4:	66 0f       	add	r22, r22
    40a6:	77 1f       	adc	r23, r23
    40a8:	88 1f       	adc	r24, r24
    40aa:	da f7       	brpl	.-10     	; 0x40a2 <__fp_mintl+0x22>
    40ac:	88 0f       	add	r24, r24
    40ae:	96 95       	lsr	r25
    40b0:	87 95       	ror	r24
    40b2:	97 f9       	bld	r25, 7
    40b4:	08 95       	ret

000040b6 <__fp_mpack>:
    40b6:	9f 3f       	cpi	r25, 0xFF	; 255
    40b8:	31 f0       	breq	.+12     	; 0x40c6 <__fp_mpack_finite+0xc>

000040ba <__fp_mpack_finite>:
    40ba:	91 50       	subi	r25, 0x01	; 1
    40bc:	20 f4       	brcc	.+8      	; 0x40c6 <__fp_mpack_finite+0xc>
    40be:	87 95       	ror	r24
    40c0:	77 95       	ror	r23
    40c2:	67 95       	ror	r22
    40c4:	b7 95       	ror	r27
    40c6:	88 0f       	add	r24, r24
    40c8:	91 1d       	adc	r25, r1
    40ca:	96 95       	lsr	r25
    40cc:	87 95       	ror	r24
    40ce:	97 f9       	bld	r25, 7
    40d0:	08 95       	ret

000040d2 <__fp_nan>:
    40d2:	9f ef       	ldi	r25, 0xFF	; 255
    40d4:	80 ec       	ldi	r24, 0xC0	; 192
    40d6:	08 95       	ret

000040d8 <__fp_pscA>:
    40d8:	00 24       	eor	r0, r0
    40da:	0a 94       	dec	r0
    40dc:	16 16       	cp	r1, r22
    40de:	17 06       	cpc	r1, r23
    40e0:	18 06       	cpc	r1, r24
    40e2:	09 06       	cpc	r0, r25
    40e4:	08 95       	ret

000040e6 <__fp_pscB>:
    40e6:	00 24       	eor	r0, r0
    40e8:	0a 94       	dec	r0
    40ea:	12 16       	cp	r1, r18
    40ec:	13 06       	cpc	r1, r19
    40ee:	14 06       	cpc	r1, r20
    40f0:	05 06       	cpc	r0, r21
    40f2:	08 95       	ret

000040f4 <__fp_round>:
    40f4:	09 2e       	mov	r0, r25
    40f6:	03 94       	inc	r0
    40f8:	00 0c       	add	r0, r0
    40fa:	11 f4       	brne	.+4      	; 0x4100 <__fp_round+0xc>
    40fc:	88 23       	and	r24, r24
    40fe:	52 f0       	brmi	.+20     	; 0x4114 <__fp_round+0x20>
    4100:	bb 0f       	add	r27, r27
    4102:	40 f4       	brcc	.+16     	; 0x4114 <__fp_round+0x20>
    4104:	bf 2b       	or	r27, r31
    4106:	11 f4       	brne	.+4      	; 0x410c <__fp_round+0x18>
    4108:	60 ff       	sbrs	r22, 0
    410a:	04 c0       	rjmp	.+8      	; 0x4114 <__fp_round+0x20>
    410c:	6f 5f       	subi	r22, 0xFF	; 255
    410e:	7f 4f       	sbci	r23, 0xFF	; 255
    4110:	8f 4f       	sbci	r24, 0xFF	; 255
    4112:	9f 4f       	sbci	r25, 0xFF	; 255
    4114:	08 95       	ret

00004116 <__fp_split3>:
    4116:	57 fd       	sbrc	r21, 7
    4118:	90 58       	subi	r25, 0x80	; 128
    411a:	44 0f       	add	r20, r20
    411c:	55 1f       	adc	r21, r21
    411e:	59 f0       	breq	.+22     	; 0x4136 <__fp_splitA+0x10>
    4120:	5f 3f       	cpi	r21, 0xFF	; 255
    4122:	71 f0       	breq	.+28     	; 0x4140 <__fp_splitA+0x1a>
    4124:	47 95       	ror	r20

00004126 <__fp_splitA>:
    4126:	88 0f       	add	r24, r24
    4128:	97 fb       	bst	r25, 7
    412a:	99 1f       	adc	r25, r25
    412c:	61 f0       	breq	.+24     	; 0x4146 <__fp_splitA+0x20>
    412e:	9f 3f       	cpi	r25, 0xFF	; 255
    4130:	79 f0       	breq	.+30     	; 0x4150 <__fp_splitA+0x2a>
    4132:	87 95       	ror	r24
    4134:	08 95       	ret
    4136:	12 16       	cp	r1, r18
    4138:	13 06       	cpc	r1, r19
    413a:	14 06       	cpc	r1, r20
    413c:	55 1f       	adc	r21, r21
    413e:	f2 cf       	rjmp	.-28     	; 0x4124 <__fp_split3+0xe>
    4140:	46 95       	lsr	r20
    4142:	f1 df       	rcall	.-30     	; 0x4126 <__fp_splitA>
    4144:	08 c0       	rjmp	.+16     	; 0x4156 <__fp_splitA+0x30>
    4146:	16 16       	cp	r1, r22
    4148:	17 06       	cpc	r1, r23
    414a:	18 06       	cpc	r1, r24
    414c:	99 1f       	adc	r25, r25
    414e:	f1 cf       	rjmp	.-30     	; 0x4132 <__fp_splitA+0xc>
    4150:	86 95       	lsr	r24
    4152:	71 05       	cpc	r23, r1
    4154:	61 05       	cpc	r22, r1
    4156:	08 94       	sec
    4158:	08 95       	ret

0000415a <__fp_trunc>:
    415a:	e5 df       	rcall	.-54     	; 0x4126 <__fp_splitA>
    415c:	a0 f0       	brcs	.+40     	; 0x4186 <__fp_trunc+0x2c>
    415e:	be e7       	ldi	r27, 0x7E	; 126
    4160:	b9 17       	cp	r27, r25
    4162:	88 f4       	brcc	.+34     	; 0x4186 <__fp_trunc+0x2c>
    4164:	bb 27       	eor	r27, r27
    4166:	9f 38       	cpi	r25, 0x8F	; 143
    4168:	60 f4       	brcc	.+24     	; 0x4182 <__fp_trunc+0x28>
    416a:	16 16       	cp	r1, r22
    416c:	b1 1d       	adc	r27, r1
    416e:	67 2f       	mov	r22, r23
    4170:	78 2f       	mov	r23, r24
    4172:	88 27       	eor	r24, r24
    4174:	98 5f       	subi	r25, 0xF8	; 248
    4176:	f7 cf       	rjmp	.-18     	; 0x4166 <__fp_trunc+0xc>
    4178:	86 95       	lsr	r24
    417a:	77 95       	ror	r23
    417c:	67 95       	ror	r22
    417e:	b1 1d       	adc	r27, r1
    4180:	93 95       	inc	r25
    4182:	96 39       	cpi	r25, 0x96	; 150
    4184:	c8 f3       	brcs	.-14     	; 0x4178 <__fp_trunc+0x1e>
    4186:	08 95       	ret

00004188 <__fp_zero>:
    4188:	e8 94       	clt

0000418a <__fp_szero>:
    418a:	bb 27       	eor	r27, r27
    418c:	66 27       	eor	r22, r22
    418e:	77 27       	eor	r23, r23
    4190:	cb 01       	movw	r24, r22
    4192:	97 f9       	bld	r25, 7
    4194:	08 95       	ret

00004196 <__gesf2>:
    4196:	4a df       	rcall	.-364    	; 0x402c <__fp_cmp>
    4198:	08 f4       	brcc	.+2      	; 0x419c <__gesf2+0x6>
    419a:	8f ef       	ldi	r24, 0xFF	; 255
    419c:	08 95       	ret

0000419e <__mulsf3>:
    419e:	0b d0       	rcall	.+22     	; 0x41b6 <__mulsf3x>
    41a0:	a9 cf       	rjmp	.-174    	; 0x40f4 <__fp_round>
    41a2:	9a df       	rcall	.-204    	; 0x40d8 <__fp_pscA>
    41a4:	28 f0       	brcs	.+10     	; 0x41b0 <__mulsf3+0x12>
    41a6:	9f df       	rcall	.-194    	; 0x40e6 <__fp_pscB>
    41a8:	18 f0       	brcs	.+6      	; 0x41b0 <__mulsf3+0x12>
    41aa:	95 23       	and	r25, r21
    41ac:	09 f0       	breq	.+2      	; 0x41b0 <__mulsf3+0x12>
    41ae:	62 cf       	rjmp	.-316    	; 0x4074 <__fp_inf>
    41b0:	90 cf       	rjmp	.-224    	; 0x40d2 <__fp_nan>
    41b2:	11 24       	eor	r1, r1
    41b4:	ea cf       	rjmp	.-44     	; 0x418a <__fp_szero>

000041b6 <__mulsf3x>:
    41b6:	af df       	rcall	.-162    	; 0x4116 <__fp_split3>
    41b8:	a0 f3       	brcs	.-24     	; 0x41a2 <__mulsf3+0x4>

000041ba <__mulsf3_pse>:
    41ba:	95 9f       	mul	r25, r21
    41bc:	d1 f3       	breq	.-12     	; 0x41b2 <__mulsf3+0x14>
    41be:	95 0f       	add	r25, r21
    41c0:	50 e0       	ldi	r21, 0x00	; 0
    41c2:	55 1f       	adc	r21, r21
    41c4:	62 9f       	mul	r22, r18
    41c6:	f0 01       	movw	r30, r0
    41c8:	72 9f       	mul	r23, r18
    41ca:	bb 27       	eor	r27, r27
    41cc:	f0 0d       	add	r31, r0
    41ce:	b1 1d       	adc	r27, r1
    41d0:	63 9f       	mul	r22, r19
    41d2:	aa 27       	eor	r26, r26
    41d4:	f0 0d       	add	r31, r0
    41d6:	b1 1d       	adc	r27, r1
    41d8:	aa 1f       	adc	r26, r26
    41da:	64 9f       	mul	r22, r20
    41dc:	66 27       	eor	r22, r22
    41de:	b0 0d       	add	r27, r0
    41e0:	a1 1d       	adc	r26, r1
    41e2:	66 1f       	adc	r22, r22
    41e4:	82 9f       	mul	r24, r18
    41e6:	22 27       	eor	r18, r18
    41e8:	b0 0d       	add	r27, r0
    41ea:	a1 1d       	adc	r26, r1
    41ec:	62 1f       	adc	r22, r18
    41ee:	73 9f       	mul	r23, r19
    41f0:	b0 0d       	add	r27, r0
    41f2:	a1 1d       	adc	r26, r1
    41f4:	62 1f       	adc	r22, r18
    41f6:	83 9f       	mul	r24, r19
    41f8:	a0 0d       	add	r26, r0
    41fa:	61 1d       	adc	r22, r1
    41fc:	22 1f       	adc	r18, r18
    41fe:	74 9f       	mul	r23, r20
    4200:	33 27       	eor	r19, r19
    4202:	a0 0d       	add	r26, r0
    4204:	61 1d       	adc	r22, r1
    4206:	23 1f       	adc	r18, r19
    4208:	84 9f       	mul	r24, r20
    420a:	60 0d       	add	r22, r0
    420c:	21 1d       	adc	r18, r1
    420e:	82 2f       	mov	r24, r18
    4210:	76 2f       	mov	r23, r22
    4212:	6a 2f       	mov	r22, r26
    4214:	11 24       	eor	r1, r1
    4216:	9f 57       	subi	r25, 0x7F	; 127
    4218:	50 40       	sbci	r21, 0x00	; 0
    421a:	8a f0       	brmi	.+34     	; 0x423e <__mulsf3_pse+0x84>
    421c:	e1 f0       	breq	.+56     	; 0x4256 <__mulsf3_pse+0x9c>
    421e:	88 23       	and	r24, r24
    4220:	4a f0       	brmi	.+18     	; 0x4234 <__mulsf3_pse+0x7a>
    4222:	ee 0f       	add	r30, r30
    4224:	ff 1f       	adc	r31, r31
    4226:	bb 1f       	adc	r27, r27
    4228:	66 1f       	adc	r22, r22
    422a:	77 1f       	adc	r23, r23
    422c:	88 1f       	adc	r24, r24
    422e:	91 50       	subi	r25, 0x01	; 1
    4230:	50 40       	sbci	r21, 0x00	; 0
    4232:	a9 f7       	brne	.-22     	; 0x421e <__mulsf3_pse+0x64>
    4234:	9e 3f       	cpi	r25, 0xFE	; 254
    4236:	51 05       	cpc	r21, r1
    4238:	70 f0       	brcs	.+28     	; 0x4256 <__mulsf3_pse+0x9c>
    423a:	1c cf       	rjmp	.-456    	; 0x4074 <__fp_inf>
    423c:	a6 cf       	rjmp	.-180    	; 0x418a <__fp_szero>
    423e:	5f 3f       	cpi	r21, 0xFF	; 255
    4240:	ec f3       	brlt	.-6      	; 0x423c <__mulsf3_pse+0x82>
    4242:	98 3e       	cpi	r25, 0xE8	; 232
    4244:	dc f3       	brlt	.-10     	; 0x423c <__mulsf3_pse+0x82>
    4246:	86 95       	lsr	r24
    4248:	77 95       	ror	r23
    424a:	67 95       	ror	r22
    424c:	b7 95       	ror	r27
    424e:	f7 95       	ror	r31
    4250:	e7 95       	ror	r30
    4252:	9f 5f       	subi	r25, 0xFF	; 255
    4254:	c1 f7       	brne	.-16     	; 0x4246 <__mulsf3_pse+0x8c>
    4256:	fe 2b       	or	r31, r30
    4258:	88 0f       	add	r24, r24
    425a:	91 1d       	adc	r25, r1
    425c:	96 95       	lsr	r25
    425e:	87 95       	ror	r24
    4260:	97 f9       	bld	r25, 7
    4262:	08 95       	ret

00004264 <__udivmodqi4>:
    4264:	99 1b       	sub	r25, r25
    4266:	79 e0       	ldi	r23, 0x09	; 9
    4268:	04 c0       	rjmp	.+8      	; 0x4272 <__udivmodqi4_ep>

0000426a <__udivmodqi4_loop>:
    426a:	99 1f       	adc	r25, r25
    426c:	96 17       	cp	r25, r22
    426e:	08 f0       	brcs	.+2      	; 0x4272 <__udivmodqi4_ep>
    4270:	96 1b       	sub	r25, r22

00004272 <__udivmodqi4_ep>:
    4272:	88 1f       	adc	r24, r24
    4274:	7a 95       	dec	r23
    4276:	c9 f7       	brne	.-14     	; 0x426a <__udivmodqi4_loop>
    4278:	80 95       	com	r24
    427a:	08 95       	ret

0000427c <__udivmodhi4>:
    427c:	aa 1b       	sub	r26, r26
    427e:	bb 1b       	sub	r27, r27
    4280:	51 e1       	ldi	r21, 0x11	; 17
    4282:	07 c0       	rjmp	.+14     	; 0x4292 <__udivmodhi4_ep>

00004284 <__udivmodhi4_loop>:
    4284:	aa 1f       	adc	r26, r26
    4286:	bb 1f       	adc	r27, r27
    4288:	a6 17       	cp	r26, r22
    428a:	b7 07       	cpc	r27, r23
    428c:	10 f0       	brcs	.+4      	; 0x4292 <__udivmodhi4_ep>
    428e:	a6 1b       	sub	r26, r22
    4290:	b7 0b       	sbc	r27, r23

00004292 <__udivmodhi4_ep>:
    4292:	88 1f       	adc	r24, r24
    4294:	99 1f       	adc	r25, r25
    4296:	5a 95       	dec	r21
    4298:	a9 f7       	brne	.-22     	; 0x4284 <__udivmodhi4_loop>
    429a:	80 95       	com	r24
    429c:	90 95       	com	r25
    429e:	bc 01       	movw	r22, r24
    42a0:	cd 01       	movw	r24, r26
    42a2:	08 95       	ret

000042a4 <__divmodhi4>:
    42a4:	97 fb       	bst	r25, 7
    42a6:	07 2e       	mov	r0, r23
    42a8:	16 f4       	brtc	.+4      	; 0x42ae <__divmodhi4+0xa>
    42aa:	00 94       	com	r0
    42ac:	06 d0       	rcall	.+12     	; 0x42ba <__divmodhi4_neg1>
    42ae:	77 fd       	sbrc	r23, 7
    42b0:	08 d0       	rcall	.+16     	; 0x42c2 <__divmodhi4_neg2>
    42b2:	e4 df       	rcall	.-56     	; 0x427c <__udivmodhi4>
    42b4:	07 fc       	sbrc	r0, 7
    42b6:	05 d0       	rcall	.+10     	; 0x42c2 <__divmodhi4_neg2>
    42b8:	3e f4       	brtc	.+14     	; 0x42c8 <__divmodhi4_exit>

000042ba <__divmodhi4_neg1>:
    42ba:	90 95       	com	r25
    42bc:	81 95       	neg	r24
    42be:	9f 4f       	sbci	r25, 0xFF	; 255
    42c0:	08 95       	ret

000042c2 <__divmodhi4_neg2>:
    42c2:	70 95       	com	r23
    42c4:	61 95       	neg	r22
    42c6:	7f 4f       	sbci	r23, 0xFF	; 255

000042c8 <__divmodhi4_exit>:
    42c8:	08 95       	ret

000042ca <__tablejump2__>:
    42ca:	ee 0f       	add	r30, r30
    42cc:	ff 1f       	adc	r31, r31
    42ce:	05 90       	lpm	r0, Z+
    42d0:	f4 91       	lpm	r31, Z
    42d2:	e0 2d       	mov	r30, r0
    42d4:	09 94       	ijmp

000042d6 <strcpy>:
    42d6:	fb 01       	movw	r30, r22
    42d8:	dc 01       	movw	r26, r24
    42da:	01 90       	ld	r0, Z+
    42dc:	0d 92       	st	X+, r0
    42de:	00 20       	and	r0, r0
    42e0:	e1 f7       	brne	.-8      	; 0x42da <strcpy+0x4>
    42e2:	08 95       	ret

000042e4 <strnlen>:
    42e4:	fc 01       	movw	r30, r24
    42e6:	61 50       	subi	r22, 0x01	; 1
    42e8:	70 40       	sbci	r23, 0x00	; 0
    42ea:	01 90       	ld	r0, Z+
    42ec:	01 10       	cpse	r0, r1
    42ee:	d8 f7       	brcc	.-10     	; 0x42e6 <strnlen+0x2>
    42f0:	80 95       	com	r24
    42f2:	90 95       	com	r25
    42f4:	8e 0f       	add	r24, r30
    42f6:	9f 1f       	adc	r25, r31
    42f8:	08 95       	ret

000042fa <snprintf>:
    42fa:	ae e0       	ldi	r26, 0x0E	; 14
    42fc:	b0 e0       	ldi	r27, 0x00	; 0
    42fe:	e2 e8       	ldi	r30, 0x82	; 130
    4300:	f1 e2       	ldi	r31, 0x21	; 33
    4302:	c3 c2       	rjmp	.+1414   	; 0x488a <__prologue_saves__+0x1c>
    4304:	0d 89       	ldd	r16, Y+21	; 0x15
    4306:	1e 89       	ldd	r17, Y+22	; 0x16
    4308:	8f 89       	ldd	r24, Y+23	; 0x17
    430a:	98 8d       	ldd	r25, Y+24	; 0x18
    430c:	26 e0       	ldi	r18, 0x06	; 6
    430e:	2c 83       	std	Y+4, r18	; 0x04
    4310:	1a 83       	std	Y+2, r17	; 0x02
    4312:	09 83       	std	Y+1, r16	; 0x01
    4314:	97 ff       	sbrs	r25, 7
    4316:	02 c0       	rjmp	.+4      	; 0x431c <snprintf+0x22>
    4318:	80 e0       	ldi	r24, 0x00	; 0
    431a:	90 e8       	ldi	r25, 0x80	; 128
    431c:	01 97       	sbiw	r24, 0x01	; 1
    431e:	9e 83       	std	Y+6, r25	; 0x06
    4320:	8d 83       	std	Y+5, r24	; 0x05
    4322:	ae 01       	movw	r20, r28
    4324:	45 5e       	subi	r20, 0xE5	; 229
    4326:	5f 4f       	sbci	r21, 0xFF	; 255
    4328:	69 8d       	ldd	r22, Y+25	; 0x19
    432a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    432c:	ce 01       	movw	r24, r28
    432e:	01 96       	adiw	r24, 0x01	; 1
    4330:	11 d0       	rcall	.+34     	; 0x4354 <vfprintf>
    4332:	4d 81       	ldd	r20, Y+5	; 0x05
    4334:	5e 81       	ldd	r21, Y+6	; 0x06
    4336:	57 fd       	sbrc	r21, 7
    4338:	0a c0       	rjmp	.+20     	; 0x434e <snprintf+0x54>
    433a:	2f 81       	ldd	r18, Y+7	; 0x07
    433c:	38 85       	ldd	r19, Y+8	; 0x08
    433e:	42 17       	cp	r20, r18
    4340:	53 07       	cpc	r21, r19
    4342:	0c f4       	brge	.+2      	; 0x4346 <snprintf+0x4c>
    4344:	9a 01       	movw	r18, r20
    4346:	f8 01       	movw	r30, r16
    4348:	e2 0f       	add	r30, r18
    434a:	f3 1f       	adc	r31, r19
    434c:	10 82       	st	Z, r1
    434e:	2e 96       	adiw	r28, 0x0e	; 14
    4350:	e4 e0       	ldi	r30, 0x04	; 4
    4352:	b7 c2       	rjmp	.+1390   	; 0x48c2 <__epilogue_restores__+0x1c>

00004354 <vfprintf>:
    4354:	ab e0       	ldi	r26, 0x0B	; 11
    4356:	b0 e0       	ldi	r27, 0x00	; 0
    4358:	ef ea       	ldi	r30, 0xAF	; 175
    435a:	f1 e2       	ldi	r31, 0x21	; 33
    435c:	88 c2       	rjmp	.+1296   	; 0x486e <__prologue_saves__>
    435e:	6c 01       	movw	r12, r24
    4360:	7b 01       	movw	r14, r22
    4362:	8a 01       	movw	r16, r20
    4364:	fc 01       	movw	r30, r24
    4366:	17 82       	std	Z+7, r1	; 0x07
    4368:	16 82       	std	Z+6, r1	; 0x06
    436a:	83 81       	ldd	r24, Z+3	; 0x03
    436c:	81 ff       	sbrs	r24, 1
    436e:	bf c1       	rjmp	.+894    	; 0x46ee <vfprintf+0x39a>
    4370:	ce 01       	movw	r24, r28
    4372:	01 96       	adiw	r24, 0x01	; 1
    4374:	3c 01       	movw	r6, r24
    4376:	f6 01       	movw	r30, r12
    4378:	93 81       	ldd	r25, Z+3	; 0x03
    437a:	f7 01       	movw	r30, r14
    437c:	93 fd       	sbrc	r25, 3
    437e:	85 91       	lpm	r24, Z+
    4380:	93 ff       	sbrs	r25, 3
    4382:	81 91       	ld	r24, Z+
    4384:	7f 01       	movw	r14, r30
    4386:	88 23       	and	r24, r24
    4388:	09 f4       	brne	.+2      	; 0x438c <vfprintf+0x38>
    438a:	ad c1       	rjmp	.+858    	; 0x46e6 <vfprintf+0x392>
    438c:	85 32       	cpi	r24, 0x25	; 37
    438e:	39 f4       	brne	.+14     	; 0x439e <vfprintf+0x4a>
    4390:	93 fd       	sbrc	r25, 3
    4392:	85 91       	lpm	r24, Z+
    4394:	93 ff       	sbrs	r25, 3
    4396:	81 91       	ld	r24, Z+
    4398:	7f 01       	movw	r14, r30
    439a:	85 32       	cpi	r24, 0x25	; 37
    439c:	21 f4       	brne	.+8      	; 0x43a6 <vfprintf+0x52>
    439e:	b6 01       	movw	r22, r12
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	b5 d1       	rcall	.+874    	; 0x470e <fputc>
    43a4:	e8 cf       	rjmp	.-48     	; 0x4376 <vfprintf+0x22>
    43a6:	91 2c       	mov	r9, r1
    43a8:	21 2c       	mov	r2, r1
    43aa:	31 2c       	mov	r3, r1
    43ac:	ff e1       	ldi	r31, 0x1F	; 31
    43ae:	f3 15       	cp	r31, r3
    43b0:	d8 f0       	brcs	.+54     	; 0x43e8 <vfprintf+0x94>
    43b2:	8b 32       	cpi	r24, 0x2B	; 43
    43b4:	79 f0       	breq	.+30     	; 0x43d4 <vfprintf+0x80>
    43b6:	38 f4       	brcc	.+14     	; 0x43c6 <vfprintf+0x72>
    43b8:	80 32       	cpi	r24, 0x20	; 32
    43ba:	79 f0       	breq	.+30     	; 0x43da <vfprintf+0x86>
    43bc:	83 32       	cpi	r24, 0x23	; 35
    43be:	a1 f4       	brne	.+40     	; 0x43e8 <vfprintf+0x94>
    43c0:	23 2d       	mov	r18, r3
    43c2:	20 61       	ori	r18, 0x10	; 16
    43c4:	1d c0       	rjmp	.+58     	; 0x4400 <vfprintf+0xac>
    43c6:	8d 32       	cpi	r24, 0x2D	; 45
    43c8:	61 f0       	breq	.+24     	; 0x43e2 <vfprintf+0x8e>
    43ca:	80 33       	cpi	r24, 0x30	; 48
    43cc:	69 f4       	brne	.+26     	; 0x43e8 <vfprintf+0x94>
    43ce:	23 2d       	mov	r18, r3
    43d0:	21 60       	ori	r18, 0x01	; 1
    43d2:	16 c0       	rjmp	.+44     	; 0x4400 <vfprintf+0xac>
    43d4:	83 2d       	mov	r24, r3
    43d6:	82 60       	ori	r24, 0x02	; 2
    43d8:	38 2e       	mov	r3, r24
    43da:	e3 2d       	mov	r30, r3
    43dc:	e4 60       	ori	r30, 0x04	; 4
    43de:	3e 2e       	mov	r3, r30
    43e0:	2a c0       	rjmp	.+84     	; 0x4436 <vfprintf+0xe2>
    43e2:	f3 2d       	mov	r31, r3
    43e4:	f8 60       	ori	r31, 0x08	; 8
    43e6:	1d c0       	rjmp	.+58     	; 0x4422 <vfprintf+0xce>
    43e8:	37 fc       	sbrc	r3, 7
    43ea:	2d c0       	rjmp	.+90     	; 0x4446 <vfprintf+0xf2>
    43ec:	20 ed       	ldi	r18, 0xD0	; 208
    43ee:	28 0f       	add	r18, r24
    43f0:	2a 30       	cpi	r18, 0x0A	; 10
    43f2:	40 f0       	brcs	.+16     	; 0x4404 <vfprintf+0xb0>
    43f4:	8e 32       	cpi	r24, 0x2E	; 46
    43f6:	b9 f4       	brne	.+46     	; 0x4426 <vfprintf+0xd2>
    43f8:	36 fc       	sbrc	r3, 6
    43fa:	75 c1       	rjmp	.+746    	; 0x46e6 <vfprintf+0x392>
    43fc:	23 2d       	mov	r18, r3
    43fe:	20 64       	ori	r18, 0x40	; 64
    4400:	32 2e       	mov	r3, r18
    4402:	19 c0       	rjmp	.+50     	; 0x4436 <vfprintf+0xe2>
    4404:	36 fe       	sbrs	r3, 6
    4406:	06 c0       	rjmp	.+12     	; 0x4414 <vfprintf+0xc0>
    4408:	8a e0       	ldi	r24, 0x0A	; 10
    440a:	98 9e       	mul	r9, r24
    440c:	20 0d       	add	r18, r0
    440e:	11 24       	eor	r1, r1
    4410:	92 2e       	mov	r9, r18
    4412:	11 c0       	rjmp	.+34     	; 0x4436 <vfprintf+0xe2>
    4414:	ea e0       	ldi	r30, 0x0A	; 10
    4416:	2e 9e       	mul	r2, r30
    4418:	20 0d       	add	r18, r0
    441a:	11 24       	eor	r1, r1
    441c:	22 2e       	mov	r2, r18
    441e:	f3 2d       	mov	r31, r3
    4420:	f0 62       	ori	r31, 0x20	; 32
    4422:	3f 2e       	mov	r3, r31
    4424:	08 c0       	rjmp	.+16     	; 0x4436 <vfprintf+0xe2>
    4426:	8c 36       	cpi	r24, 0x6C	; 108
    4428:	21 f4       	brne	.+8      	; 0x4432 <vfprintf+0xde>
    442a:	83 2d       	mov	r24, r3
    442c:	80 68       	ori	r24, 0x80	; 128
    442e:	38 2e       	mov	r3, r24
    4430:	02 c0       	rjmp	.+4      	; 0x4436 <vfprintf+0xe2>
    4432:	88 36       	cpi	r24, 0x68	; 104
    4434:	41 f4       	brne	.+16     	; 0x4446 <vfprintf+0xf2>
    4436:	f7 01       	movw	r30, r14
    4438:	93 fd       	sbrc	r25, 3
    443a:	85 91       	lpm	r24, Z+
    443c:	93 ff       	sbrs	r25, 3
    443e:	81 91       	ld	r24, Z+
    4440:	7f 01       	movw	r14, r30
    4442:	81 11       	cpse	r24, r1
    4444:	b3 cf       	rjmp	.-154    	; 0x43ac <vfprintf+0x58>
    4446:	98 2f       	mov	r25, r24
    4448:	9f 7d       	andi	r25, 0xDF	; 223
    444a:	95 54       	subi	r25, 0x45	; 69
    444c:	93 30       	cpi	r25, 0x03	; 3
    444e:	28 f4       	brcc	.+10     	; 0x445a <vfprintf+0x106>
    4450:	0c 5f       	subi	r16, 0xFC	; 252
    4452:	1f 4f       	sbci	r17, 0xFF	; 255
    4454:	9f e3       	ldi	r25, 0x3F	; 63
    4456:	99 83       	std	Y+1, r25	; 0x01
    4458:	0d c0       	rjmp	.+26     	; 0x4474 <vfprintf+0x120>
    445a:	83 36       	cpi	r24, 0x63	; 99
    445c:	31 f0       	breq	.+12     	; 0x446a <vfprintf+0x116>
    445e:	83 37       	cpi	r24, 0x73	; 115
    4460:	71 f0       	breq	.+28     	; 0x447e <vfprintf+0x12a>
    4462:	83 35       	cpi	r24, 0x53	; 83
    4464:	09 f0       	breq	.+2      	; 0x4468 <vfprintf+0x114>
    4466:	55 c0       	rjmp	.+170    	; 0x4512 <vfprintf+0x1be>
    4468:	20 c0       	rjmp	.+64     	; 0x44aa <vfprintf+0x156>
    446a:	f8 01       	movw	r30, r16
    446c:	80 81       	ld	r24, Z
    446e:	89 83       	std	Y+1, r24	; 0x01
    4470:	0e 5f       	subi	r16, 0xFE	; 254
    4472:	1f 4f       	sbci	r17, 0xFF	; 255
    4474:	88 24       	eor	r8, r8
    4476:	83 94       	inc	r8
    4478:	91 2c       	mov	r9, r1
    447a:	53 01       	movw	r10, r6
    447c:	12 c0       	rjmp	.+36     	; 0x44a2 <vfprintf+0x14e>
    447e:	28 01       	movw	r4, r16
    4480:	f2 e0       	ldi	r31, 0x02	; 2
    4482:	4f 0e       	add	r4, r31
    4484:	51 1c       	adc	r5, r1
    4486:	f8 01       	movw	r30, r16
    4488:	a0 80       	ld	r10, Z
    448a:	b1 80       	ldd	r11, Z+1	; 0x01
    448c:	36 fe       	sbrs	r3, 6
    448e:	03 c0       	rjmp	.+6      	; 0x4496 <vfprintf+0x142>
    4490:	69 2d       	mov	r22, r9
    4492:	70 e0       	ldi	r23, 0x00	; 0
    4494:	02 c0       	rjmp	.+4      	; 0x449a <vfprintf+0x146>
    4496:	6f ef       	ldi	r22, 0xFF	; 255
    4498:	7f ef       	ldi	r23, 0xFF	; 255
    449a:	c5 01       	movw	r24, r10
    449c:	23 df       	rcall	.-442    	; 0x42e4 <strnlen>
    449e:	4c 01       	movw	r8, r24
    44a0:	82 01       	movw	r16, r4
    44a2:	f3 2d       	mov	r31, r3
    44a4:	ff 77       	andi	r31, 0x7F	; 127
    44a6:	3f 2e       	mov	r3, r31
    44a8:	15 c0       	rjmp	.+42     	; 0x44d4 <vfprintf+0x180>
    44aa:	28 01       	movw	r4, r16
    44ac:	22 e0       	ldi	r18, 0x02	; 2
    44ae:	42 0e       	add	r4, r18
    44b0:	51 1c       	adc	r5, r1
    44b2:	f8 01       	movw	r30, r16
    44b4:	a0 80       	ld	r10, Z
    44b6:	b1 80       	ldd	r11, Z+1	; 0x01
    44b8:	36 fe       	sbrs	r3, 6
    44ba:	03 c0       	rjmp	.+6      	; 0x44c2 <vfprintf+0x16e>
    44bc:	69 2d       	mov	r22, r9
    44be:	70 e0       	ldi	r23, 0x00	; 0
    44c0:	02 c0       	rjmp	.+4      	; 0x44c6 <vfprintf+0x172>
    44c2:	6f ef       	ldi	r22, 0xFF	; 255
    44c4:	7f ef       	ldi	r23, 0xFF	; 255
    44c6:	c5 01       	movw	r24, r10
    44c8:	17 d1       	rcall	.+558    	; 0x46f8 <strnlen_P>
    44ca:	4c 01       	movw	r8, r24
    44cc:	f3 2d       	mov	r31, r3
    44ce:	f0 68       	ori	r31, 0x80	; 128
    44d0:	3f 2e       	mov	r3, r31
    44d2:	82 01       	movw	r16, r4
    44d4:	33 fc       	sbrc	r3, 3
    44d6:	19 c0       	rjmp	.+50     	; 0x450a <vfprintf+0x1b6>
    44d8:	82 2d       	mov	r24, r2
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	88 16       	cp	r8, r24
    44de:	99 06       	cpc	r9, r25
    44e0:	a0 f4       	brcc	.+40     	; 0x450a <vfprintf+0x1b6>
    44e2:	b6 01       	movw	r22, r12
    44e4:	80 e2       	ldi	r24, 0x20	; 32
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	12 d1       	rcall	.+548    	; 0x470e <fputc>
    44ea:	2a 94       	dec	r2
    44ec:	f5 cf       	rjmp	.-22     	; 0x44d8 <vfprintf+0x184>
    44ee:	f5 01       	movw	r30, r10
    44f0:	37 fc       	sbrc	r3, 7
    44f2:	85 91       	lpm	r24, Z+
    44f4:	37 fe       	sbrs	r3, 7
    44f6:	81 91       	ld	r24, Z+
    44f8:	5f 01       	movw	r10, r30
    44fa:	b6 01       	movw	r22, r12
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	07 d1       	rcall	.+526    	; 0x470e <fputc>
    4500:	21 10       	cpse	r2, r1
    4502:	2a 94       	dec	r2
    4504:	21 e0       	ldi	r18, 0x01	; 1
    4506:	82 1a       	sub	r8, r18
    4508:	91 08       	sbc	r9, r1
    450a:	81 14       	cp	r8, r1
    450c:	91 04       	cpc	r9, r1
    450e:	79 f7       	brne	.-34     	; 0x44ee <vfprintf+0x19a>
    4510:	e1 c0       	rjmp	.+450    	; 0x46d4 <vfprintf+0x380>
    4512:	84 36       	cpi	r24, 0x64	; 100
    4514:	11 f0       	breq	.+4      	; 0x451a <vfprintf+0x1c6>
    4516:	89 36       	cpi	r24, 0x69	; 105
    4518:	39 f5       	brne	.+78     	; 0x4568 <vfprintf+0x214>
    451a:	f8 01       	movw	r30, r16
    451c:	37 fe       	sbrs	r3, 7
    451e:	07 c0       	rjmp	.+14     	; 0x452e <vfprintf+0x1da>
    4520:	60 81       	ld	r22, Z
    4522:	71 81       	ldd	r23, Z+1	; 0x01
    4524:	82 81       	ldd	r24, Z+2	; 0x02
    4526:	93 81       	ldd	r25, Z+3	; 0x03
    4528:	0c 5f       	subi	r16, 0xFC	; 252
    452a:	1f 4f       	sbci	r17, 0xFF	; 255
    452c:	08 c0       	rjmp	.+16     	; 0x453e <vfprintf+0x1ea>
    452e:	60 81       	ld	r22, Z
    4530:	71 81       	ldd	r23, Z+1	; 0x01
    4532:	07 2e       	mov	r0, r23
    4534:	00 0c       	add	r0, r0
    4536:	88 0b       	sbc	r24, r24
    4538:	99 0b       	sbc	r25, r25
    453a:	0e 5f       	subi	r16, 0xFE	; 254
    453c:	1f 4f       	sbci	r17, 0xFF	; 255
    453e:	f3 2d       	mov	r31, r3
    4540:	ff 76       	andi	r31, 0x6F	; 111
    4542:	3f 2e       	mov	r3, r31
    4544:	97 ff       	sbrs	r25, 7
    4546:	09 c0       	rjmp	.+18     	; 0x455a <vfprintf+0x206>
    4548:	90 95       	com	r25
    454a:	80 95       	com	r24
    454c:	70 95       	com	r23
    454e:	61 95       	neg	r22
    4550:	7f 4f       	sbci	r23, 0xFF	; 255
    4552:	8f 4f       	sbci	r24, 0xFF	; 255
    4554:	9f 4f       	sbci	r25, 0xFF	; 255
    4556:	f0 68       	ori	r31, 0x80	; 128
    4558:	3f 2e       	mov	r3, r31
    455a:	2a e0       	ldi	r18, 0x0A	; 10
    455c:	30 e0       	ldi	r19, 0x00	; 0
    455e:	a3 01       	movw	r20, r6
    4560:	12 d1       	rcall	.+548    	; 0x4786 <__ultoa_invert>
    4562:	88 2e       	mov	r8, r24
    4564:	86 18       	sub	r8, r6
    4566:	44 c0       	rjmp	.+136    	; 0x45f0 <vfprintf+0x29c>
    4568:	85 37       	cpi	r24, 0x75	; 117
    456a:	31 f4       	brne	.+12     	; 0x4578 <vfprintf+0x224>
    456c:	23 2d       	mov	r18, r3
    456e:	2f 7e       	andi	r18, 0xEF	; 239
    4570:	b2 2e       	mov	r11, r18
    4572:	2a e0       	ldi	r18, 0x0A	; 10
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	25 c0       	rjmp	.+74     	; 0x45c2 <vfprintf+0x26e>
    4578:	93 2d       	mov	r25, r3
    457a:	99 7f       	andi	r25, 0xF9	; 249
    457c:	b9 2e       	mov	r11, r25
    457e:	8f 36       	cpi	r24, 0x6F	; 111
    4580:	c1 f0       	breq	.+48     	; 0x45b2 <vfprintf+0x25e>
    4582:	18 f4       	brcc	.+6      	; 0x458a <vfprintf+0x236>
    4584:	88 35       	cpi	r24, 0x58	; 88
    4586:	79 f0       	breq	.+30     	; 0x45a6 <vfprintf+0x252>
    4588:	ae c0       	rjmp	.+348    	; 0x46e6 <vfprintf+0x392>
    458a:	80 37       	cpi	r24, 0x70	; 112
    458c:	19 f0       	breq	.+6      	; 0x4594 <vfprintf+0x240>
    458e:	88 37       	cpi	r24, 0x78	; 120
    4590:	21 f0       	breq	.+8      	; 0x459a <vfprintf+0x246>
    4592:	a9 c0       	rjmp	.+338    	; 0x46e6 <vfprintf+0x392>
    4594:	e9 2f       	mov	r30, r25
    4596:	e0 61       	ori	r30, 0x10	; 16
    4598:	be 2e       	mov	r11, r30
    459a:	b4 fe       	sbrs	r11, 4
    459c:	0d c0       	rjmp	.+26     	; 0x45b8 <vfprintf+0x264>
    459e:	fb 2d       	mov	r31, r11
    45a0:	f4 60       	ori	r31, 0x04	; 4
    45a2:	bf 2e       	mov	r11, r31
    45a4:	09 c0       	rjmp	.+18     	; 0x45b8 <vfprintf+0x264>
    45a6:	34 fe       	sbrs	r3, 4
    45a8:	0a c0       	rjmp	.+20     	; 0x45be <vfprintf+0x26a>
    45aa:	29 2f       	mov	r18, r25
    45ac:	26 60       	ori	r18, 0x06	; 6
    45ae:	b2 2e       	mov	r11, r18
    45b0:	06 c0       	rjmp	.+12     	; 0x45be <vfprintf+0x26a>
    45b2:	28 e0       	ldi	r18, 0x08	; 8
    45b4:	30 e0       	ldi	r19, 0x00	; 0
    45b6:	05 c0       	rjmp	.+10     	; 0x45c2 <vfprintf+0x26e>
    45b8:	20 e1       	ldi	r18, 0x10	; 16
    45ba:	30 e0       	ldi	r19, 0x00	; 0
    45bc:	02 c0       	rjmp	.+4      	; 0x45c2 <vfprintf+0x26e>
    45be:	20 e1       	ldi	r18, 0x10	; 16
    45c0:	32 e0       	ldi	r19, 0x02	; 2
    45c2:	f8 01       	movw	r30, r16
    45c4:	b7 fe       	sbrs	r11, 7
    45c6:	07 c0       	rjmp	.+14     	; 0x45d6 <vfprintf+0x282>
    45c8:	60 81       	ld	r22, Z
    45ca:	71 81       	ldd	r23, Z+1	; 0x01
    45cc:	82 81       	ldd	r24, Z+2	; 0x02
    45ce:	93 81       	ldd	r25, Z+3	; 0x03
    45d0:	0c 5f       	subi	r16, 0xFC	; 252
    45d2:	1f 4f       	sbci	r17, 0xFF	; 255
    45d4:	06 c0       	rjmp	.+12     	; 0x45e2 <vfprintf+0x28e>
    45d6:	60 81       	ld	r22, Z
    45d8:	71 81       	ldd	r23, Z+1	; 0x01
    45da:	80 e0       	ldi	r24, 0x00	; 0
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	0e 5f       	subi	r16, 0xFE	; 254
    45e0:	1f 4f       	sbci	r17, 0xFF	; 255
    45e2:	a3 01       	movw	r20, r6
    45e4:	d0 d0       	rcall	.+416    	; 0x4786 <__ultoa_invert>
    45e6:	88 2e       	mov	r8, r24
    45e8:	86 18       	sub	r8, r6
    45ea:	fb 2d       	mov	r31, r11
    45ec:	ff 77       	andi	r31, 0x7F	; 127
    45ee:	3f 2e       	mov	r3, r31
    45f0:	36 fe       	sbrs	r3, 6
    45f2:	0d c0       	rjmp	.+26     	; 0x460e <vfprintf+0x2ba>
    45f4:	23 2d       	mov	r18, r3
    45f6:	2e 7f       	andi	r18, 0xFE	; 254
    45f8:	a2 2e       	mov	r10, r18
    45fa:	89 14       	cp	r8, r9
    45fc:	58 f4       	brcc	.+22     	; 0x4614 <vfprintf+0x2c0>
    45fe:	34 fe       	sbrs	r3, 4
    4600:	0b c0       	rjmp	.+22     	; 0x4618 <vfprintf+0x2c4>
    4602:	32 fc       	sbrc	r3, 2
    4604:	09 c0       	rjmp	.+18     	; 0x4618 <vfprintf+0x2c4>
    4606:	83 2d       	mov	r24, r3
    4608:	8e 7e       	andi	r24, 0xEE	; 238
    460a:	a8 2e       	mov	r10, r24
    460c:	05 c0       	rjmp	.+10     	; 0x4618 <vfprintf+0x2c4>
    460e:	b8 2c       	mov	r11, r8
    4610:	a3 2c       	mov	r10, r3
    4612:	03 c0       	rjmp	.+6      	; 0x461a <vfprintf+0x2c6>
    4614:	b8 2c       	mov	r11, r8
    4616:	01 c0       	rjmp	.+2      	; 0x461a <vfprintf+0x2c6>
    4618:	b9 2c       	mov	r11, r9
    461a:	a4 fe       	sbrs	r10, 4
    461c:	0f c0       	rjmp	.+30     	; 0x463c <vfprintf+0x2e8>
    461e:	fe 01       	movw	r30, r28
    4620:	e8 0d       	add	r30, r8
    4622:	f1 1d       	adc	r31, r1
    4624:	80 81       	ld	r24, Z
    4626:	80 33       	cpi	r24, 0x30	; 48
    4628:	21 f4       	brne	.+8      	; 0x4632 <vfprintf+0x2de>
    462a:	9a 2d       	mov	r25, r10
    462c:	99 7e       	andi	r25, 0xE9	; 233
    462e:	a9 2e       	mov	r10, r25
    4630:	09 c0       	rjmp	.+18     	; 0x4644 <vfprintf+0x2f0>
    4632:	a2 fe       	sbrs	r10, 2
    4634:	06 c0       	rjmp	.+12     	; 0x4642 <vfprintf+0x2ee>
    4636:	b3 94       	inc	r11
    4638:	b3 94       	inc	r11
    463a:	04 c0       	rjmp	.+8      	; 0x4644 <vfprintf+0x2f0>
    463c:	8a 2d       	mov	r24, r10
    463e:	86 78       	andi	r24, 0x86	; 134
    4640:	09 f0       	breq	.+2      	; 0x4644 <vfprintf+0x2f0>
    4642:	b3 94       	inc	r11
    4644:	a3 fc       	sbrc	r10, 3
    4646:	10 c0       	rjmp	.+32     	; 0x4668 <vfprintf+0x314>
    4648:	a0 fe       	sbrs	r10, 0
    464a:	06 c0       	rjmp	.+12     	; 0x4658 <vfprintf+0x304>
    464c:	b2 14       	cp	r11, r2
    464e:	80 f4       	brcc	.+32     	; 0x4670 <vfprintf+0x31c>
    4650:	28 0c       	add	r2, r8
    4652:	92 2c       	mov	r9, r2
    4654:	9b 18       	sub	r9, r11
    4656:	0d c0       	rjmp	.+26     	; 0x4672 <vfprintf+0x31e>
    4658:	b2 14       	cp	r11, r2
    465a:	58 f4       	brcc	.+22     	; 0x4672 <vfprintf+0x31e>
    465c:	b6 01       	movw	r22, r12
    465e:	80 e2       	ldi	r24, 0x20	; 32
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	55 d0       	rcall	.+170    	; 0x470e <fputc>
    4664:	b3 94       	inc	r11
    4666:	f8 cf       	rjmp	.-16     	; 0x4658 <vfprintf+0x304>
    4668:	b2 14       	cp	r11, r2
    466a:	18 f4       	brcc	.+6      	; 0x4672 <vfprintf+0x31e>
    466c:	2b 18       	sub	r2, r11
    466e:	02 c0       	rjmp	.+4      	; 0x4674 <vfprintf+0x320>
    4670:	98 2c       	mov	r9, r8
    4672:	21 2c       	mov	r2, r1
    4674:	a4 fe       	sbrs	r10, 4
    4676:	0f c0       	rjmp	.+30     	; 0x4696 <vfprintf+0x342>
    4678:	b6 01       	movw	r22, r12
    467a:	80 e3       	ldi	r24, 0x30	; 48
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	47 d0       	rcall	.+142    	; 0x470e <fputc>
    4680:	a2 fe       	sbrs	r10, 2
    4682:	16 c0       	rjmp	.+44     	; 0x46b0 <vfprintf+0x35c>
    4684:	a1 fc       	sbrc	r10, 1
    4686:	03 c0       	rjmp	.+6      	; 0x468e <vfprintf+0x33a>
    4688:	88 e7       	ldi	r24, 0x78	; 120
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	02 c0       	rjmp	.+4      	; 0x4692 <vfprintf+0x33e>
    468e:	88 e5       	ldi	r24, 0x58	; 88
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	b6 01       	movw	r22, r12
    4694:	0c c0       	rjmp	.+24     	; 0x46ae <vfprintf+0x35a>
    4696:	8a 2d       	mov	r24, r10
    4698:	86 78       	andi	r24, 0x86	; 134
    469a:	51 f0       	breq	.+20     	; 0x46b0 <vfprintf+0x35c>
    469c:	a1 fe       	sbrs	r10, 1
    469e:	02 c0       	rjmp	.+4      	; 0x46a4 <vfprintf+0x350>
    46a0:	8b e2       	ldi	r24, 0x2B	; 43
    46a2:	01 c0       	rjmp	.+2      	; 0x46a6 <vfprintf+0x352>
    46a4:	80 e2       	ldi	r24, 0x20	; 32
    46a6:	a7 fc       	sbrc	r10, 7
    46a8:	8d e2       	ldi	r24, 0x2D	; 45
    46aa:	b6 01       	movw	r22, r12
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	2f d0       	rcall	.+94     	; 0x470e <fputc>
    46b0:	89 14       	cp	r8, r9
    46b2:	30 f4       	brcc	.+12     	; 0x46c0 <vfprintf+0x36c>
    46b4:	b6 01       	movw	r22, r12
    46b6:	80 e3       	ldi	r24, 0x30	; 48
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	29 d0       	rcall	.+82     	; 0x470e <fputc>
    46bc:	9a 94       	dec	r9
    46be:	f8 cf       	rjmp	.-16     	; 0x46b0 <vfprintf+0x35c>
    46c0:	8a 94       	dec	r8
    46c2:	f3 01       	movw	r30, r6
    46c4:	e8 0d       	add	r30, r8
    46c6:	f1 1d       	adc	r31, r1
    46c8:	80 81       	ld	r24, Z
    46ca:	b6 01       	movw	r22, r12
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	1f d0       	rcall	.+62     	; 0x470e <fputc>
    46d0:	81 10       	cpse	r8, r1
    46d2:	f6 cf       	rjmp	.-20     	; 0x46c0 <vfprintf+0x36c>
    46d4:	22 20       	and	r2, r2
    46d6:	09 f4       	brne	.+2      	; 0x46da <vfprintf+0x386>
    46d8:	4e ce       	rjmp	.-868    	; 0x4376 <vfprintf+0x22>
    46da:	b6 01       	movw	r22, r12
    46dc:	80 e2       	ldi	r24, 0x20	; 32
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	16 d0       	rcall	.+44     	; 0x470e <fputc>
    46e2:	2a 94       	dec	r2
    46e4:	f7 cf       	rjmp	.-18     	; 0x46d4 <vfprintf+0x380>
    46e6:	f6 01       	movw	r30, r12
    46e8:	86 81       	ldd	r24, Z+6	; 0x06
    46ea:	97 81       	ldd	r25, Z+7	; 0x07
    46ec:	02 c0       	rjmp	.+4      	; 0x46f2 <vfprintf+0x39e>
    46ee:	8f ef       	ldi	r24, 0xFF	; 255
    46f0:	9f ef       	ldi	r25, 0xFF	; 255
    46f2:	2b 96       	adiw	r28, 0x0b	; 11
    46f4:	e2 e1       	ldi	r30, 0x12	; 18
    46f6:	d7 c0       	rjmp	.+430    	; 0x48a6 <__epilogue_restores__>

000046f8 <strnlen_P>:
    46f8:	fc 01       	movw	r30, r24
    46fa:	05 90       	lpm	r0, Z+
    46fc:	61 50       	subi	r22, 0x01	; 1
    46fe:	70 40       	sbci	r23, 0x00	; 0
    4700:	01 10       	cpse	r0, r1
    4702:	d8 f7       	brcc	.-10     	; 0x46fa <strnlen_P+0x2>
    4704:	80 95       	com	r24
    4706:	90 95       	com	r25
    4708:	8e 0f       	add	r24, r30
    470a:	9f 1f       	adc	r25, r31
    470c:	08 95       	ret

0000470e <fputc>:
    470e:	0f 93       	push	r16
    4710:	1f 93       	push	r17
    4712:	cf 93       	push	r28
    4714:	df 93       	push	r29
    4716:	fb 01       	movw	r30, r22
    4718:	23 81       	ldd	r18, Z+3	; 0x03
    471a:	21 fd       	sbrc	r18, 1
    471c:	03 c0       	rjmp	.+6      	; 0x4724 <fputc+0x16>
    471e:	8f ef       	ldi	r24, 0xFF	; 255
    4720:	9f ef       	ldi	r25, 0xFF	; 255
    4722:	2c c0       	rjmp	.+88     	; 0x477c <fputc+0x6e>
    4724:	22 ff       	sbrs	r18, 2
    4726:	16 c0       	rjmp	.+44     	; 0x4754 <fputc+0x46>
    4728:	46 81       	ldd	r20, Z+6	; 0x06
    472a:	57 81       	ldd	r21, Z+7	; 0x07
    472c:	24 81       	ldd	r18, Z+4	; 0x04
    472e:	35 81       	ldd	r19, Z+5	; 0x05
    4730:	42 17       	cp	r20, r18
    4732:	53 07       	cpc	r21, r19
    4734:	44 f4       	brge	.+16     	; 0x4746 <fputc+0x38>
    4736:	a0 81       	ld	r26, Z
    4738:	b1 81       	ldd	r27, Z+1	; 0x01
    473a:	9d 01       	movw	r18, r26
    473c:	2f 5f       	subi	r18, 0xFF	; 255
    473e:	3f 4f       	sbci	r19, 0xFF	; 255
    4740:	31 83       	std	Z+1, r19	; 0x01
    4742:	20 83       	st	Z, r18
    4744:	8c 93       	st	X, r24
    4746:	26 81       	ldd	r18, Z+6	; 0x06
    4748:	37 81       	ldd	r19, Z+7	; 0x07
    474a:	2f 5f       	subi	r18, 0xFF	; 255
    474c:	3f 4f       	sbci	r19, 0xFF	; 255
    474e:	37 83       	std	Z+7, r19	; 0x07
    4750:	26 83       	std	Z+6, r18	; 0x06
    4752:	14 c0       	rjmp	.+40     	; 0x477c <fputc+0x6e>
    4754:	8b 01       	movw	r16, r22
    4756:	ec 01       	movw	r28, r24
    4758:	fb 01       	movw	r30, r22
    475a:	00 84       	ldd	r0, Z+8	; 0x08
    475c:	f1 85       	ldd	r31, Z+9	; 0x09
    475e:	e0 2d       	mov	r30, r0
    4760:	09 95       	icall
    4762:	89 2b       	or	r24, r25
    4764:	e1 f6       	brne	.-72     	; 0x471e <fputc+0x10>
    4766:	d8 01       	movw	r26, r16
    4768:	16 96       	adiw	r26, 0x06	; 6
    476a:	8d 91       	ld	r24, X+
    476c:	9c 91       	ld	r25, X
    476e:	17 97       	sbiw	r26, 0x07	; 7
    4770:	01 96       	adiw	r24, 0x01	; 1
    4772:	17 96       	adiw	r26, 0x07	; 7
    4774:	9c 93       	st	X, r25
    4776:	8e 93       	st	-X, r24
    4778:	16 97       	sbiw	r26, 0x06	; 6
    477a:	ce 01       	movw	r24, r28
    477c:	df 91       	pop	r29
    477e:	cf 91       	pop	r28
    4780:	1f 91       	pop	r17
    4782:	0f 91       	pop	r16
    4784:	08 95       	ret

00004786 <__ultoa_invert>:
    4786:	fa 01       	movw	r30, r20
    4788:	aa 27       	eor	r26, r26
    478a:	28 30       	cpi	r18, 0x08	; 8
    478c:	51 f1       	breq	.+84     	; 0x47e2 <__ultoa_invert+0x5c>
    478e:	20 31       	cpi	r18, 0x10	; 16
    4790:	81 f1       	breq	.+96     	; 0x47f2 <__ultoa_invert+0x6c>
    4792:	e8 94       	clt
    4794:	6f 93       	push	r22
    4796:	6e 7f       	andi	r22, 0xFE	; 254
    4798:	6e 5f       	subi	r22, 0xFE	; 254
    479a:	7f 4f       	sbci	r23, 0xFF	; 255
    479c:	8f 4f       	sbci	r24, 0xFF	; 255
    479e:	9f 4f       	sbci	r25, 0xFF	; 255
    47a0:	af 4f       	sbci	r26, 0xFF	; 255
    47a2:	b1 e0       	ldi	r27, 0x01	; 1
    47a4:	3e d0       	rcall	.+124    	; 0x4822 <__ultoa_invert+0x9c>
    47a6:	b4 e0       	ldi	r27, 0x04	; 4
    47a8:	3c d0       	rcall	.+120    	; 0x4822 <__ultoa_invert+0x9c>
    47aa:	67 0f       	add	r22, r23
    47ac:	78 1f       	adc	r23, r24
    47ae:	89 1f       	adc	r24, r25
    47b0:	9a 1f       	adc	r25, r26
    47b2:	a1 1d       	adc	r26, r1
    47b4:	68 0f       	add	r22, r24
    47b6:	79 1f       	adc	r23, r25
    47b8:	8a 1f       	adc	r24, r26
    47ba:	91 1d       	adc	r25, r1
    47bc:	a1 1d       	adc	r26, r1
    47be:	6a 0f       	add	r22, r26
    47c0:	71 1d       	adc	r23, r1
    47c2:	81 1d       	adc	r24, r1
    47c4:	91 1d       	adc	r25, r1
    47c6:	a1 1d       	adc	r26, r1
    47c8:	20 d0       	rcall	.+64     	; 0x480a <__ultoa_invert+0x84>
    47ca:	09 f4       	brne	.+2      	; 0x47ce <__ultoa_invert+0x48>
    47cc:	68 94       	set
    47ce:	3f 91       	pop	r19
    47d0:	2a e0       	ldi	r18, 0x0A	; 10
    47d2:	26 9f       	mul	r18, r22
    47d4:	11 24       	eor	r1, r1
    47d6:	30 19       	sub	r19, r0
    47d8:	30 5d       	subi	r19, 0xD0	; 208
    47da:	31 93       	st	Z+, r19
    47dc:	de f6       	brtc	.-74     	; 0x4794 <__ultoa_invert+0xe>
    47de:	cf 01       	movw	r24, r30
    47e0:	08 95       	ret
    47e2:	46 2f       	mov	r20, r22
    47e4:	47 70       	andi	r20, 0x07	; 7
    47e6:	40 5d       	subi	r20, 0xD0	; 208
    47e8:	41 93       	st	Z+, r20
    47ea:	b3 e0       	ldi	r27, 0x03	; 3
    47ec:	0f d0       	rcall	.+30     	; 0x480c <__ultoa_invert+0x86>
    47ee:	c9 f7       	brne	.-14     	; 0x47e2 <__ultoa_invert+0x5c>
    47f0:	f6 cf       	rjmp	.-20     	; 0x47de <__ultoa_invert+0x58>
    47f2:	46 2f       	mov	r20, r22
    47f4:	4f 70       	andi	r20, 0x0F	; 15
    47f6:	40 5d       	subi	r20, 0xD0	; 208
    47f8:	4a 33       	cpi	r20, 0x3A	; 58
    47fa:	18 f0       	brcs	.+6      	; 0x4802 <__ultoa_invert+0x7c>
    47fc:	49 5d       	subi	r20, 0xD9	; 217
    47fe:	31 fd       	sbrc	r19, 1
    4800:	40 52       	subi	r20, 0x20	; 32
    4802:	41 93       	st	Z+, r20
    4804:	02 d0       	rcall	.+4      	; 0x480a <__ultoa_invert+0x84>
    4806:	a9 f7       	brne	.-22     	; 0x47f2 <__ultoa_invert+0x6c>
    4808:	ea cf       	rjmp	.-44     	; 0x47de <__ultoa_invert+0x58>
    480a:	b4 e0       	ldi	r27, 0x04	; 4
    480c:	a6 95       	lsr	r26
    480e:	97 95       	ror	r25
    4810:	87 95       	ror	r24
    4812:	77 95       	ror	r23
    4814:	67 95       	ror	r22
    4816:	ba 95       	dec	r27
    4818:	c9 f7       	brne	.-14     	; 0x480c <__ultoa_invert+0x86>
    481a:	00 97       	sbiw	r24, 0x00	; 0
    481c:	61 05       	cpc	r22, r1
    481e:	71 05       	cpc	r23, r1
    4820:	08 95       	ret
    4822:	9b 01       	movw	r18, r22
    4824:	ac 01       	movw	r20, r24
    4826:	0a 2e       	mov	r0, r26
    4828:	06 94       	lsr	r0
    482a:	57 95       	ror	r21
    482c:	47 95       	ror	r20
    482e:	37 95       	ror	r19
    4830:	27 95       	ror	r18
    4832:	ba 95       	dec	r27
    4834:	c9 f7       	brne	.-14     	; 0x4828 <__ultoa_invert+0xa2>
    4836:	62 0f       	add	r22, r18
    4838:	73 1f       	adc	r23, r19
    483a:	84 1f       	adc	r24, r20
    483c:	95 1f       	adc	r25, r21
    483e:	a0 1d       	adc	r26, r0
    4840:	08 95       	ret

00004842 <eeprom_read_byte>:
    4842:	f9 99       	sbic	0x1f, 1	; 31
    4844:	fe cf       	rjmp	.-4      	; 0x4842 <eeprom_read_byte>
    4846:	92 bd       	out	0x22, r25	; 34
    4848:	81 bd       	out	0x21, r24	; 33
    484a:	f8 9a       	sbi	0x1f, 0	; 31
    484c:	99 27       	eor	r25, r25
    484e:	80 b5       	in	r24, 0x20	; 32
    4850:	08 95       	ret

00004852 <eeprom_write_byte>:
    4852:	26 2f       	mov	r18, r22

00004854 <eeprom_write_r18>:
    4854:	f9 99       	sbic	0x1f, 1	; 31
    4856:	fe cf       	rjmp	.-4      	; 0x4854 <eeprom_write_r18>
    4858:	1f ba       	out	0x1f, r1	; 31
    485a:	92 bd       	out	0x22, r25	; 34
    485c:	81 bd       	out	0x21, r24	; 33
    485e:	20 bd       	out	0x20, r18	; 32
    4860:	0f b6       	in	r0, 0x3f	; 63
    4862:	f8 94       	cli
    4864:	fa 9a       	sbi	0x1f, 2	; 31
    4866:	f9 9a       	sbi	0x1f, 1	; 31
    4868:	0f be       	out	0x3f, r0	; 63
    486a:	01 96       	adiw	r24, 0x01	; 1
    486c:	08 95       	ret

0000486e <__prologue_saves__>:
    486e:	2f 92       	push	r2
    4870:	3f 92       	push	r3
    4872:	4f 92       	push	r4
    4874:	5f 92       	push	r5
    4876:	6f 92       	push	r6
    4878:	7f 92       	push	r7
    487a:	8f 92       	push	r8
    487c:	9f 92       	push	r9
    487e:	af 92       	push	r10
    4880:	bf 92       	push	r11
    4882:	cf 92       	push	r12
    4884:	df 92       	push	r13
    4886:	ef 92       	push	r14
    4888:	ff 92       	push	r15
    488a:	0f 93       	push	r16
    488c:	1f 93       	push	r17
    488e:	cf 93       	push	r28
    4890:	df 93       	push	r29
    4892:	cd b7       	in	r28, 0x3d	; 61
    4894:	de b7       	in	r29, 0x3e	; 62
    4896:	ca 1b       	sub	r28, r26
    4898:	db 0b       	sbc	r29, r27
    489a:	0f b6       	in	r0, 0x3f	; 63
    489c:	f8 94       	cli
    489e:	de bf       	out	0x3e, r29	; 62
    48a0:	0f be       	out	0x3f, r0	; 63
    48a2:	cd bf       	out	0x3d, r28	; 61
    48a4:	09 94       	ijmp

000048a6 <__epilogue_restores__>:
    48a6:	2a 88       	ldd	r2, Y+18	; 0x12
    48a8:	39 88       	ldd	r3, Y+17	; 0x11
    48aa:	48 88       	ldd	r4, Y+16	; 0x10
    48ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    48ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    48b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    48b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    48b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    48b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    48b8:	b9 84       	ldd	r11, Y+9	; 0x09
    48ba:	c8 84       	ldd	r12, Y+8	; 0x08
    48bc:	df 80       	ldd	r13, Y+7	; 0x07
    48be:	ee 80       	ldd	r14, Y+6	; 0x06
    48c0:	fd 80       	ldd	r15, Y+5	; 0x05
    48c2:	0c 81       	ldd	r16, Y+4	; 0x04
    48c4:	1b 81       	ldd	r17, Y+3	; 0x03
    48c6:	aa 81       	ldd	r26, Y+2	; 0x02
    48c8:	b9 81       	ldd	r27, Y+1	; 0x01
    48ca:	ce 0f       	add	r28, r30
    48cc:	d1 1d       	adc	r29, r1
    48ce:	0f b6       	in	r0, 0x3f	; 63
    48d0:	f8 94       	cli
    48d2:	de bf       	out	0x3e, r29	; 62
    48d4:	0f be       	out	0x3f, r0	; 63
    48d6:	cd bf       	out	0x3d, r28	; 61
    48d8:	ed 01       	movw	r28, r26
    48da:	08 95       	ret

000048dc <_exit>:
    48dc:	f8 94       	cli

000048de <__stop_program>:
    48de:	ff cf       	rjmp	.-2      	; 0x48de <__stop_program>
