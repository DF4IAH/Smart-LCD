
Smart-LCD_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a2  00800100  00003c28  00003cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000122  008002a2  008002a2  00003e5e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003e5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003ebc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  00003efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e65  00000000  00000000  000042dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c9e  00000000  00000000  0000b141  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000320a  00000000  00000000  0000cddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013b0  00000000  00000000  0000ffec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c4d  00000000  00000000  0001139c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005747  00000000  00000000  00012fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  00018730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c5 c2       	rjmp	.+1418   	; 0x58c <__ctors_end>
       2:	00 00       	nop
       4:	ef c6       	rjmp	.+3550   	; 0xde4 <__vector_1>
       6:	00 00       	nop
       8:	10 c7       	rjmp	.+3616   	; 0xe2a <__vector_2>
       a:	00 00       	nop
       c:	31 c7       	rjmp	.+3682   	; 0xe70 <__vector_3>
       e:	00 00       	nop
      10:	52 c7       	rjmp	.+3748   	; 0xeb6 <__vector_4>
      12:	00 00       	nop
      14:	73 c7       	rjmp	.+3814   	; 0xefc <__vector_5>
      16:	00 00       	nop
      18:	94 c7       	rjmp	.+3880   	; 0xf42 <__vector_6>
      1a:	00 00       	nop
      1c:	b5 c7       	rjmp	.+3946   	; 0xf88 <__vector_7>
      1e:	00 00       	nop
      20:	d6 c7       	rjmp	.+4012   	; 0xfce <__vector_8>
      22:	00 00       	nop
      24:	f7 c7       	rjmp	.+4078   	; 0x1014 <__vector_9>
      26:	00 00       	nop
      28:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__vector_10>
      2c:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_11>
      30:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__vector_12>
      34:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__vector_13>
      38:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__vector_14>
      3c:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_15>
      40:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__vector_16>
      44:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__vector_17>
      48:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_18>
      4c:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__vector_19>
      50:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__vector_20>
      54:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_21>
      58:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_22>
      5c:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__vector_23>
      60:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__vector_24>
      64:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__vector_25>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 20       	and	r0, r0
      70:	20 20       	and	r2, r0
      72:	20 20       	and	r2, r0
      74:	00 20       	and	r0, r0
      76:	50 50       	subi	r21, 0x00	; 0
      78:	50 00       	.word	0x0050	; ????
      7a:	00 00       	nop
      7c:	00 50       	subi	r16, 0x00	; 0
      7e:	50 f8       	bld	r5, 0
      80:	50 f8       	bld	r5, 0
      82:	50 50       	subi	r21, 0x00	; 0
      84:	20 78       	andi	r18, 0x80	; 128
      86:	a0 70       	andi	r26, 0x00	; 0
      88:	28 f0       	brcs	.+10     	; 0x94 <__trampolines_end+0x2c>
      8a:	20 c0       	rjmp	.+64     	; 0xcc <__trampolines_end+0x64>
      8c:	c8 10       	cpse	r12, r8
      8e:	20 40       	sbci	r18, 0x00	; 0
      90:	98 18       	sub	r9, r8
      92:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x3cdc>
      96:	a8 90       	.word	0x90a8	; ????
      98:	68 60       	ori	r22, 0x08	; 8
      9a:	20 40       	sbci	r18, 0x00	; 0
      9c:	00 00       	nop
      9e:	00 00       	nop
      a0:	10 20       	and	r1, r0
      a2:	40 40       	sbci	r20, 0x00	; 0
      a4:	40 20       	and	r4, r0
      a6:	10 40       	sbci	r17, 0x00	; 0
      a8:	20 10       	cpse	r2, r0
      aa:	10 10       	cpse	r1, r0
      ac:	20 40       	sbci	r18, 0x00	; 0
      ae:	00 50       	subi	r16, 0x00	; 0
      b0:	20 f8       	bld	r2, 0
      b2:	20 50       	subi	r18, 0x00	; 0
      b4:	00 00       	nop
      b6:	20 20       	and	r2, r0
      b8:	f8 20       	and	r15, r8
      ba:	20 00       	.word	0x0020	; ????
      bc:	00 00       	nop
      be:	00 00       	nop
      c0:	60 20       	and	r6, r0
      c2:	40 00       	.word	0x0040	; ????
      c4:	00 00       	nop
      c6:	f8 00       	.word	0x00f8	; ????
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	00 60       	ori	r16, 0x00	; 0
      d0:	60 00       	.word	0x0060	; ????
      d2:	08 10       	cpse	r0, r8
      d4:	20 40       	sbci	r18, 0x00	; 0
      d6:	80 00       	.word	0x0080	; ????
      d8:	70 88       	ldd	r7, Z+16	; 0x10
      da:	98 a8       	ldd	r9, Y+48	; 0x30
      dc:	c8 88       	ldd	r12, Y+16	; 0x10
      de:	70 20       	and	r7, r0
      e0:	60 20       	and	r6, r0
      e2:	20 20       	and	r2, r0
      e4:	20 70       	andi	r18, 0x00	; 0
      e6:	70 88       	ldd	r7, Z+16	; 0x10
      e8:	08 10       	cpse	r0, r8
      ea:	20 40       	sbci	r18, 0x00	; 0
      ec:	f8 f8       	.word	0xf8f8	; ????
      ee:	10 20       	and	r1, r0
      f0:	10 08       	sbc	r1, r0
      f2:	88 70       	andi	r24, 0x08	; 8
      f4:	10 30       	cpi	r17, 0x00	; 0
      f6:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__bss_end+0xd34>
      fa:	10 f8       	bld	r1, 0
      fc:	80 f0       	brcs	.+32     	; 0x11e <__trampolines_end+0xb6>
      fe:	08 08       	sbc	r0, r8
     100:	88 70       	andi	r24, 0x08	; 8
     102:	30 40       	sbci	r19, 0x00	; 0
     104:	80 f0       	brcs	.+32     	; 0x126 <__trampolines_end+0xbe>
     106:	88 88       	ldd	r8, Y+16	; 0x10
     108:	70 f8       	bld	r7, 0
     10a:	08 10       	cpse	r0, r8
     10c:	20 40       	sbci	r18, 0x00	; 0
     10e:	40 40       	sbci	r20, 0x00	; 0
     110:	70 88       	ldd	r7, Z+16	; 0x10
     112:	88 70       	andi	r24, 0x08	; 8
     114:	88 88       	ldd	r8, Y+16	; 0x10
     116:	70 70       	andi	r23, 0x00	; 0
     118:	88 88       	ldd	r8, Y+16	; 0x10
     11a:	78 08       	sbc	r7, r8
     11c:	10 60       	ori	r17, 0x00	; 0
     11e:	00 60       	ori	r16, 0x00	; 0
     120:	60 00       	.word	0x0060	; ????
     122:	60 60       	ori	r22, 0x00	; 0
     124:	00 00       	nop
     126:	60 60       	ori	r22, 0x00	; 0
     128:	00 60       	ori	r16, 0x00	; 0
     12a:	20 40       	sbci	r18, 0x00	; 0
     12c:	08 10       	cpse	r0, r8
     12e:	20 40       	sbci	r18, 0x00	; 0
     130:	20 10       	cpse	r2, r0
     132:	08 00       	.word	0x0008	; ????
     134:	00 f8       	bld	r0, 0
     136:	00 f8       	bld	r0, 0
     138:	00 00       	nop
     13a:	80 40       	sbci	r24, 0x00	; 0
     13c:	20 10       	cpse	r2, r0
     13e:	20 40       	sbci	r18, 0x00	; 0
     140:	80 70       	andi	r24, 0x00	; 0
     142:	88 08       	sbc	r8, r8
     144:	10 20       	and	r1, r0
     146:	00 20       	and	r0, r0
     148:	70 88       	ldd	r7, Z+16	; 0x10
     14a:	08 68       	ori	r16, 0x88	; 136
     14c:	a8 a8       	ldd	r10, Y+48	; 0x30
     14e:	70 70       	andi	r23, 0x00	; 0
     150:	88 88       	ldd	r8, Y+16	; 0x10
     152:	88 f8       	.word	0xf888	; ????
     154:	88 88       	ldd	r8, Y+16	; 0x10
     156:	f0 88       	ldd	r15, Z+16	; 0x10
     158:	88 f0       	brcs	.+34     	; 0x17c <__trampolines_end+0x114>
     15a:	88 88       	ldd	r8, Y+16	; 0x10
     15c:	f0 70       	andi	r31, 0x00	; 0
     15e:	88 80       	ld	r8, Y
     160:	80 80       	ld	r8, Z
     162:	88 70       	andi	r24, 0x08	; 8
     164:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x84c4>
     168:	88 90       	.word	0x9088	; ????
     16a:	e0 f8       	bld	r14, 0
     16c:	80 80       	ld	r8, Z
     16e:	f0 80       	ld	r15, Z
     170:	80 f8       	bld	r8, 0
     172:	f8 80       	ld	r15, Y
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	80 80       	ld	r8, Z
     178:	80 70       	andi	r24, 0x00	; 0
     17a:	88 80       	ld	r8, Y
     17c:	80 98       	cbi	0x10, 0	; 16
     17e:	88 70       	andi	r24, 0x08	; 8
     180:	88 88       	ldd	r8, Y+16	; 0x10
     182:	88 f8       	.word	0xf888	; ????
     184:	88 88       	ldd	r8, Y+16	; 0x10
     186:	88 70       	andi	r24, 0x08	; 8
     188:	20 20       	and	r2, r0
     18a:	20 20       	and	r2, r0
     18c:	20 70       	andi	r18, 0x00	; 0
     18e:	38 10       	cpse	r3, r8
     190:	10 10       	cpse	r1, r0
     192:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x849c>
     196:	90 a0       	ldd	r9, Z+32	; 0x20
     198:	c0 a0       	ldd	r12, Z+32	; 0x20
     19a:	90 88       	ldd	r9, Z+16	; 0x10
     19c:	80 80       	ld	r8, Z
     19e:	80 80       	ld	r8, Z
     1a0:	80 80       	ld	r8, Z
     1a2:	f8 88       	ldd	r15, Y+16	; 0x10
     1a4:	d8 a8       	ldd	r13, Y+48	; 0x30
     1a6:	88 88       	ldd	r8, Y+16	; 0x10
     1a8:	88 88       	ldd	r8, Y+16	; 0x10
     1aa:	88 88       	ldd	r8, Y+16	; 0x10
     1ac:	c8 a8       	ldd	r12, Y+48	; 0x30
     1ae:	98 88       	ldd	r9, Y+16	; 0x10
     1b0:	88 70       	andi	r24, 0x08	; 8
     1b2:	88 88       	ldd	r8, Y+16	; 0x10
     1b4:	88 88       	ldd	r8, Y+16	; 0x10
     1b6:	88 70       	andi	r24, 0x08	; 8
     1b8:	f0 88       	ldd	r15, Z+16	; 0x10
     1ba:	88 f0       	brcs	.+34     	; 0x1de <__trampolines_end+0x176>
     1bc:	80 80       	ld	r8, Z
     1be:	80 70       	andi	r24, 0x00	; 0
     1c0:	88 88       	ldd	r8, Y+16	; 0x10
     1c2:	88 a8       	ldd	r8, Y+48	; 0x30
     1c4:	90 68       	ori	r25, 0x80	; 128
     1c6:	f0 88       	ldd	r15, Z+16	; 0x10
     1c8:	88 f0       	brcs	.+34     	; 0x1ec <__trampolines_end+0x184>
     1ca:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x74c4>
     1ce:	80 80       	ld	r8, Z
     1d0:	70 08       	sbc	r7, r0
     1d2:	08 f0       	brcs	.+2      	; 0x1d6 <__trampolines_end+0x16e>
     1d4:	f8 20       	and	r15, r8
     1d6:	20 20       	and	r2, r0
     1d8:	20 20       	and	r2, r0
     1da:	20 88       	ldd	r2, Z+16	; 0x10
     1dc:	88 88       	ldd	r8, Y+16	; 0x10
     1de:	88 88       	ldd	r8, Y+16	; 0x10
     1e0:	88 70       	andi	r24, 0x08	; 8
     1e2:	88 88       	ldd	r8, Y+16	; 0x10
     1e4:	88 88       	ldd	r8, Y+16	; 0x10
     1e6:	88 50       	subi	r24, 0x08	; 8
     1e8:	20 88       	ldd	r2, Z+16	; 0x10
     1ea:	88 88       	ldd	r8, Y+16	; 0x10
     1ec:	a8 a8       	ldd	r10, Y+48	; 0x30
     1ee:	d8 88       	ldd	r13, Y+16	; 0x10
     1f0:	88 88       	ldd	r8, Y+16	; 0x10
     1f2:	50 20       	and	r5, r0
     1f4:	50 88       	ldd	r5, Z+16	; 0x10
     1f6:	88 88       	ldd	r8, Y+16	; 0x10
     1f8:	88 50       	subi	r24, 0x08	; 8
     1fa:	20 20       	and	r2, r0
     1fc:	20 20       	and	r2, r0
     1fe:	f8 08       	sbc	r15, r8
     200:	10 20       	and	r1, r0
     202:	40 80       	ld	r4, Z
     204:	f8 38       	cpi	r31, 0x88	; 136
     206:	20 20       	and	r2, r0
     208:	20 20       	and	r2, r0
     20a:	20 38       	cpi	r18, 0x80	; 128
     20c:	00 80       	ld	r0, Z
     20e:	40 20       	and	r4, r0
     210:	10 08       	sbc	r1, r0
     212:	00 e0       	ldi	r16, 0x00	; 0
     214:	20 20       	and	r2, r0
     216:	20 20       	and	r2, r0
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	20 50       	subi	r18, 0x00	; 0
     21c:	88 00       	.word	0x0088	; ????
	...
     226:	00 f8       	bld	r0, 0
     228:	40 20       	and	r4, r0
     22a:	10 00       	.word	0x0010	; ????
     22c:	00 00       	nop
     22e:	00 00       	nop
     230:	00 70       	andi	r16, 0x00	; 0
     232:	08 78       	andi	r16, 0x88	; 136
     234:	88 78       	andi	r24, 0x88	; 136
     236:	80 80       	ld	r8, Z
     238:	b0 c8       	rjmp	.-3744   	; 0xfffff39a <__eeprom_end+0xff7ef39a>
     23a:	88 88       	ldd	r8, Y+16	; 0x10
     23c:	f0 00       	.word	0x00f0	; ????
     23e:	00 70       	andi	r16, 0x00	; 0
     240:	80 80       	ld	r8, Z
     242:	88 70       	andi	r24, 0x08	; 8
     244:	08 08       	sbc	r0, r8
     246:	68 98       	cbi	0x0d, 0	; 13
     248:	88 88       	ldd	r8, Y+16	; 0x10
     24a:	78 00       	.word	0x0078	; ????
     24c:	00 70       	andi	r16, 0x00	; 0
     24e:	88 f8       	.word	0xf888	; ????
     250:	80 70       	andi	r24, 0x00	; 0
     252:	30 48       	sbci	r19, 0x80	; 128
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	40 40       	sbci	r20, 0x00	; 0
     258:	40 00       	.word	0x0040	; ????
     25a:	00 78       	andi	r16, 0x80	; 128
     25c:	88 78       	andi	r24, 0x88	; 136
     25e:	08 30       	cpi	r16, 0x08	; 8
     260:	80 80       	ld	r8, Z
     262:	b0 c8       	rjmp	.-3744   	; 0xfffff3c4 <__eeprom_end+0xff7ef3c4>
     264:	88 88       	ldd	r8, Y+16	; 0x10
     266:	88 20       	and	r8, r8
     268:	00 60       	ori	r16, 0x00	; 0
     26a:	20 20       	and	r2, r0
     26c:	20 70       	andi	r18, 0x00	; 0
     26e:	10 00       	.word	0x0010	; ????
     270:	30 10       	cpse	r3, r0
     272:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x3c9c>
     276:	40 48       	sbci	r20, 0x80	; 128
     278:	50 60       	ori	r21, 0x00	; 0
     27a:	50 48       	sbci	r21, 0x80	; 128
     27c:	60 20       	and	r6, r0
     27e:	20 20       	and	r2, r0
     280:	20 20       	and	r2, r0
     282:	70 00       	.word	0x0070	; ????
     284:	00 d0       	rcall	.+0      	; 0x286 <__trampolines_end+0x21e>
     286:	a8 a8       	ldd	r10, Y+48	; 0x30
     288:	88 88       	ldd	r8, Y+16	; 0x10
     28a:	00 00       	nop
     28c:	b0 c8       	rjmp	.-3744   	; 0xfffff3ee <__eeprom_end+0xff7ef3ee>
     28e:	88 88       	ldd	r8, Y+16	; 0x10
     290:	88 00       	.word	0x0088	; ????
     292:	00 70       	andi	r16, 0x00	; 0
     294:	88 88       	ldd	r8, Y+16	; 0x10
     296:	88 70       	andi	r24, 0x08	; 8
     298:	00 00       	nop
     29a:	f0 88       	ldd	r15, Z+16	; 0x10
     29c:	f0 80       	ld	r15, Z
     29e:	80 00       	.word	0x0080	; ????
     2a0:	00 68       	ori	r16, 0x80	; 128
     2a2:	98 78       	andi	r25, 0x88	; 136
     2a4:	08 08       	sbc	r0, r8
     2a6:	00 00       	nop
     2a8:	b0 c8       	rjmp	.-3744   	; 0xfffff40a <__eeprom_end+0xff7ef40a>
     2aa:	80 80       	ld	r8, Z
     2ac:	80 00       	.word	0x0080	; ????
     2ae:	00 70       	andi	r16, 0x00	; 0
     2b0:	80 70       	andi	r24, 0x00	; 0
     2b2:	08 f0       	brcs	.+2      	; 0x2b6 <__trampolines_end+0x24e>
     2b4:	40 40       	sbci	r20, 0x00	; 0
     2b6:	e0 40       	sbci	r30, 0x00	; 0
     2b8:	40 48       	sbci	r20, 0x80	; 128
     2ba:	30 00       	.word	0x0030	; ????
     2bc:	00 88       	ldd	r0, Z+16	; 0x10
     2be:	88 88       	ldd	r8, Y+16	; 0x10
     2c0:	98 68       	ori	r25, 0x88	; 136
     2c2:	00 00       	nop
     2c4:	88 88       	ldd	r8, Y+16	; 0x10
     2c6:	88 50       	subi	r24, 0x08	; 8
     2c8:	20 00       	.word	0x0020	; ????
     2ca:	00 88       	ldd	r0, Z+16	; 0x10
     2cc:	88 a8       	ldd	r8, Y+48	; 0x30
     2ce:	a8 50       	subi	r26, 0x08	; 8
     2d0:	00 00       	nop
     2d2:	88 50       	subi	r24, 0x08	; 8
     2d4:	20 50       	subi	r18, 0x00	; 0
     2d6:	88 00       	.word	0x0088	; ????
     2d8:	00 88       	ldd	r0, Z+16	; 0x10
     2da:	88 78       	andi	r24, 0x88	; 136
     2dc:	08 70       	andi	r16, 0x08	; 8
     2de:	00 00       	nop
     2e0:	f8 10       	cpse	r15, r8
     2e2:	20 40       	sbci	r18, 0x00	; 0
     2e4:	f8 10       	cpse	r15, r8
     2e6:	20 20       	and	r2, r0
     2e8:	40 20       	and	r4, r0
     2ea:	20 10       	cpse	r2, r0
     2ec:	20 20       	and	r2, r0
     2ee:	20 20       	and	r2, r0
     2f0:	20 20       	and	r2, r0
     2f2:	20 40       	sbci	r18, 0x00	; 0
     2f4:	20 20       	and	r2, r0
     2f6:	10 20       	and	r1, r0
     2f8:	20 40       	sbci	r18, 0x00	; 0

000002fa <sysfont_glyphs>:
     2fa:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     30a:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     31a:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     32a:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     33a:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     34a:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     35a:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     36a:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     37a:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     38a:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     39a:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     3aa:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     3ba:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     3ca:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     3da:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     3ea:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     3fa:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     40a:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     41a:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     42a:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     43a:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     44a:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     45a:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     46a:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     47a:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     48a:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     49a:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     4aa:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     4ba:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     4ca:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     4da:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     4ea:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     4fa:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     50a:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     51a:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     52a:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     53a:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     54a:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     55a:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     56a:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     57a:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     58a:	20 40                                                @

0000058c <__ctors_end>:
     58c:	11 24       	eor	r1, r1
     58e:	1f be       	out	0x3f, r1	; 63
     590:	cf ef       	ldi	r28, 0xFF	; 255
     592:	d8 e0       	ldi	r29, 0x08	; 8
     594:	de bf       	out	0x3e, r29	; 62
     596:	cd bf       	out	0x3d, r28	; 61

00000598 <__do_copy_data>:
     598:	12 e0       	ldi	r17, 0x02	; 2
     59a:	a0 e0       	ldi	r26, 0x00	; 0
     59c:	b1 e0       	ldi	r27, 0x01	; 1
     59e:	e8 e2       	ldi	r30, 0x28	; 40
     5a0:	fc e3       	ldi	r31, 0x3C	; 60
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <__do_copy_data+0x10>
     5a4:	05 90       	lpm	r0, Z+
     5a6:	0d 92       	st	X+, r0
     5a8:	a2 3a       	cpi	r26, 0xA2	; 162
     5aa:	b1 07       	cpc	r27, r17
     5ac:	d9 f7       	brne	.-10     	; 0x5a4 <__do_copy_data+0xc>

000005ae <__do_clear_bss>:
     5ae:	23 e0       	ldi	r18, 0x03	; 3
     5b0:	a2 ea       	ldi	r26, 0xA2	; 162
     5b2:	b2 e0       	ldi	r27, 0x02	; 2
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <.do_clear_bss_start>

000005b6 <.do_clear_bss_loop>:
     5b6:	1d 92       	st	X+, r1

000005b8 <.do_clear_bss_start>:
     5b8:	a4 3c       	cpi	r26, 0xC4	; 196
     5ba:	b2 07       	cpc	r27, r18
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <.do_clear_bss_loop>
     5be:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <main>
     5c2:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <_exit>

000005c6 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	1f 92       	push	r1
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     5d6:	8f b7       	in	r24, 0x3f	; 63
     5d8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     5da:	f8 94       	cli
	return flags;
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     5de:	5f 93       	push	r21
     5e0:	50 e8       	ldi	r21, 0x80	; 128
     5e2:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     5ec:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     5ee:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     5f0:	0f 90       	pop	r0
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	1f 92       	push	r1
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     602:	9f b7       	in	r25, 0x3f	; 63
     604:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     606:	f8 94       	cli
	return flags;
     608:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     60a:	81 11       	cpse	r24, r1
     60c:	06 c0       	rjmp	.+12     	; 0x61a <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
     60e:	60 95       	com	r22
     610:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     614:	68 23       	and	r22, r24
     616:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     61a:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     61c:	0f 90       	pop	r0
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	1f 92       	push	r1
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     62e:	9f b7       	in	r25, 0x3f	; 63
     630:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     632:	f8 94       	cli
	return flags;
     634:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     636:	81 11       	cpse	r24, r1
     638:	05 c0       	rjmp	.+10     	; 0x644 <sysclk_disable_module+0x20>
		*(reg + port) |= id;
     63a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     63e:	68 2b       	or	r22, r24
     640:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     644:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     646:	0f 90       	pop	r0
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <gfx_mono_generic_draw_horizontal_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	08 2f       	mov	r16, r24
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     65a:	84 2f       	mov	r24, r20
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	80 0f       	add	r24, r16
     660:	91 1d       	adc	r25, r1
     662:	81 3f       	cpi	r24, 0xF1	; 241
     664:	91 05       	cpc	r25, r1
     666:	14 f0       	brlt	.+4      	; 0x66c <gfx_mono_generic_draw_horizontal_line+0x1e>
		length = GFX_MONO_LCD_WIDTH - x;
     668:	40 ef       	ldi	r20, 0xF0	; 240
     66a:	40 1b       	sub	r20, r16
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     66c:	44 23       	and	r20, r20
     66e:	09 f4       	brne	.+2      	; 0x672 <gfx_mono_generic_draw_horizontal_line+0x24>
     670:	47 c0       	rjmp	.+142    	; 0x700 <gfx_mono_generic_draw_horizontal_line+0xb2>
	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
		length = GFX_MONO_LCD_WIDTH - x;
	}

	page = y / 8;
     672:	16 2f       	mov	r17, r22
     674:	16 95       	lsr	r17
     676:	16 95       	lsr	r17
     678:	16 95       	lsr	r17
	pixelmask = (1 << (y - (page * 8)));
     67a:	38 ef       	ldi	r19, 0xF8	; 248
     67c:	31 03       	mulsu	r19, r17
     67e:	c0 01       	movw	r24, r0
     680:	11 24       	eor	r1, r1
     682:	86 0f       	add	r24, r22
     684:	91 1d       	adc	r25, r1
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	01 c0       	rjmp	.+2      	; 0x68e <gfx_mono_generic_draw_horizontal_line+0x40>
     68c:	66 0f       	add	r22, r22
     68e:	8a 95       	dec	r24
     690:	ea f7       	brpl	.-6      	; 0x68c <gfx_mono_generic_draw_horizontal_line+0x3e>
     692:	f6 2e       	mov	r15, r22
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     694:	21 30       	cpi	r18, 0x01	; 1
     696:	31 f0       	breq	.+12     	; 0x6a4 <gfx_mono_generic_draw_horizontal_line+0x56>
     698:	40 f0       	brcs	.+16     	; 0x6aa <gfx_mono_generic_draw_horizontal_line+0x5c>
     69a:	22 30       	cpi	r18, 0x02	; 2
     69c:	89 f5       	brne	.+98     	; 0x700 <gfx_mono_generic_draw_horizontal_line+0xb2>
     69e:	cf ef       	ldi	r28, 0xFF	; 255
     6a0:	c4 0f       	add	r28, r20
     6a2:	22 c0       	rjmp	.+68     	; 0x6e8 <gfx_mono_generic_draw_horizontal_line+0x9a>
     6a4:	cf ef       	ldi	r28, 0xFF	; 255
     6a6:	c4 0f       	add	r28, r20
     6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <gfx_mono_generic_draw_horizontal_line+0x66>
     6aa:	cf ef       	ldi	r28, 0xFF	; 255
     6ac:	c4 0f       	add	r28, r20
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
			temp &= ~pixelmask;
     6ae:	d6 2f       	mov	r29, r22
     6b0:	d0 95       	com	r29
     6b2:	0d c0       	rjmp	.+26     	; 0x6ce <gfx_mono_generic_draw_horizontal_line+0x80>
     6b4:	dc 2f       	mov	r29, r28
     6b6:	d0 0f       	add	r29, r16
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     6b8:	6d 2f       	mov	r22, r29
     6ba:	81 2f       	mov	r24, r17
     6bc:	b3 d2       	rcall	.+1382   	; 0xc24 <gfx_mono_lcd_uc1608_get_byte>
			temp |= pixelmask;
     6be:	48 2f       	mov	r20, r24
     6c0:	4f 29       	or	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     6c2:	6d 2f       	mov	r22, r29
     6c4:	81 2f       	mov	r24, r17
     6c6:	9c d2       	rcall	.+1336   	; 0xc00 <gfx_mono_lcd_uc1608_put_byte>
     6c8:	c1 50       	subi	r28, 0x01	; 1
     6ca:	a0 f7       	brcc	.-24     	; 0x6b4 <gfx_mono_generic_draw_horizontal_line+0x66>
     6cc:	19 c0       	rjmp	.+50     	; 0x700 <gfx_mono_generic_draw_horizontal_line+0xb2>
     6ce:	fc 2e       	mov	r15, r28
     6d0:	f0 0e       	add	r15, r16
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     6d2:	6f 2d       	mov	r22, r15
     6d4:	81 2f       	mov	r24, r17
     6d6:	a6 d2       	rcall	.+1356   	; 0xc24 <gfx_mono_lcd_uc1608_get_byte>
			temp &= ~pixelmask;
     6d8:	48 2f       	mov	r20, r24
     6da:	4d 23       	and	r20, r29
			gfx_mono_put_byte(page, x + length, temp);
     6dc:	6f 2d       	mov	r22, r15
     6de:	81 2f       	mov	r24, r17
     6e0:	8f d2       	rcall	.+1310   	; 0xc00 <gfx_mono_lcd_uc1608_put_byte>
     6e2:	c1 50       	subi	r28, 0x01	; 1
     6e4:	a0 f7       	brcc	.-24     	; 0x6ce <gfx_mono_generic_draw_horizontal_line+0x80>
     6e6:	0c c0       	rjmp	.+24     	; 0x700 <gfx_mono_generic_draw_horizontal_line+0xb2>
     6e8:	dc 2f       	mov	r29, r28
     6ea:	d0 0f       	add	r29, r16
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     6ec:	6d 2f       	mov	r22, r29
     6ee:	81 2f       	mov	r24, r17
     6f0:	99 d2       	rcall	.+1330   	; 0xc24 <gfx_mono_lcd_uc1608_get_byte>
			temp ^= pixelmask;
     6f2:	48 2f       	mov	r20, r24
     6f4:	4f 25       	eor	r20, r15
			gfx_mono_put_byte(page, x + length, temp);
     6f6:	6d 2f       	mov	r22, r29
     6f8:	81 2f       	mov	r24, r17
     6fa:	82 d2       	rcall	.+1284   	; 0xc00 <gfx_mono_lcd_uc1608_put_byte>
     6fc:	c1 50       	subi	r28, 0x01	; 1
     6fe:	a0 f7       	brcc	.-24     	; 0x6e8 <gfx_mono_generic_draw_horizontal_line+0x9a>
		break;

	default:
		break;
	}
}
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	08 95       	ret

0000070c <gfx_mono_generic_draw_vertical_line>:
 * \param  length     Length of the line in pixels.
 * \param  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	94 2f       	mov	r25, r20
	if (length == 0) {
     71a:	44 23       	and	r20, r20
     71c:	09 f4       	brne	.+2      	; 0x720 <gfx_mono_generic_draw_vertical_line+0x14>
     71e:	46 c0       	rjmp	.+140    	; 0x7ac <gfx_mono_generic_draw_vertical_line+0xa0>
     720:	4f ef       	ldi	r20, 0xFF	; 255
     722:	46 0f       	add	r20, r22
		return;
	}

	gfx_coord_t y2 = y + length - 1;
     724:	94 0f       	add	r25, r20

	if (y == y2) {
     726:	69 13       	cpse	r22, r25
     728:	08 c0       	rjmp	.+16     	; 0x73a <gfx_mono_generic_draw_vertical_line+0x2e>
		gfx_mono_draw_pixel(x, y, color);
     72a:	42 2f       	mov	r20, r18
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
	}
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
	}

	gfx_coord_t y2 = y + length - 1;

	if (y == y2) {
		gfx_mono_draw_pixel(x, y, color);
     738:	a8 c2       	rjmp	.+1360   	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		return;
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
     73a:	9f 37       	cpi	r25, 0x7F	; 127
     73c:	08 f0       	brcs	.+2      	; 0x740 <gfx_mono_generic_draw_vertical_line+0x34>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
     73e:	9f e7       	ldi	r25, 0x7F	; 127
	}

	gfx_coord_t y1page = y / 8;
     740:	16 2f       	mov	r17, r22
     742:	16 95       	lsr	r17
     744:	16 95       	lsr	r17
     746:	16 95       	lsr	r17
	gfx_coord_t y2page = y2 / 8;
     748:	09 2f       	mov	r16, r25
     74a:	06 95       	lsr	r16
     74c:	06 95       	lsr	r16
     74e:	06 95       	lsr	r16

	uint8_t y1bitpos = y & 0x07;
     750:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
     752:	ef ef       	ldi	r30, 0xFF	; 255
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	af 01       	movw	r20, r30
     758:	01 c0       	rjmp	.+2      	; 0x75c <gfx_mono_generic_draw_vertical_line+0x50>
     75a:	44 0f       	add	r20, r20
     75c:	6a 95       	dec	r22
     75e:	ea f7       	brpl	.-6      	; 0x75a <gfx_mono_generic_draw_vertical_line+0x4e>

	gfx_coord_t y1page = y / 8;
	gfx_coord_t y2page = y2 / 8;

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;
     760:	97 70       	andi	r25, 0x07	; 7

	uint8_t y1pixelmask = 0xFF << y1bitpos;
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
     762:	67 e0       	ldi	r22, 0x07	; 7
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	69 1b       	sub	r22, r25
     768:	71 09       	sbc	r23, r1
     76a:	7f 01       	movw	r14, r30
     76c:	02 c0       	rjmp	.+4      	; 0x772 <gfx_mono_generic_draw_vertical_line+0x66>
     76e:	f5 94       	asr	r15
     770:	e7 94       	ror	r14
     772:	6a 95       	dec	r22
     774:	e2 f7       	brpl	.-8      	; 0x76e <gfx_mono_generic_draw_vertical_line+0x62>

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     776:	10 13       	cpse	r17, r16
     778:	04 c0       	rjmp	.+8      	; 0x782 <gfx_mono_generic_draw_vertical_line+0x76>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
     77a:	4e 21       	and	r20, r14
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
     77c:	68 2f       	mov	r22, r24
     77e:	81 2f       	mov	r24, r17
     780:	0e c0       	rjmp	.+28     	; 0x79e <gfx_mono_generic_draw_vertical_line+0x92>
     782:	d2 2f       	mov	r29, r18
     784:	c8 2f       	mov	r28, r24
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     786:	6c 2f       	mov	r22, r28
     788:	81 2f       	mov	r24, r17
     78a:	5a d2       	rcall	.+1204   	; 0xc40 <gfx_mono_lcd_uc1608_mask_byte>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     78c:	1f 5f       	subi	r17, 0xFF	; 255
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     78e:	2d 2f       	mov	r18, r29
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     790:	10 17       	cp	r17, r16
     792:	10 f4       	brcc	.+4      	; 0x798 <gfx_mono_generic_draw_vertical_line+0x8c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     794:	4f ef       	ldi	r20, 0xFF	; 255
     796:	f7 cf       	rjmp	.-18     	; 0x786 <gfx_mono_generic_draw_vertical_line+0x7a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     798:	4e 2d       	mov	r20, r14
     79a:	6c 2f       	mov	r22, r28
     79c:	80 2f       	mov	r24, r16
	}
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14

		while (++y1page < y2page) {
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     7aa:	4a c2       	rjmp	.+1172   	; 0xc40 <gfx_mono_lcd_uc1608_mask_byte>
	}
}
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	08 95       	ret

000007ba <gfx_mono_generic_draw_line>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
     7ba:	8f 92       	push	r8
     7bc:	9f 92       	push	r9
     7be:	af 92       	push	r10
     7c0:	bf 92       	push	r11
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	18 2f       	mov	r17, r24
     7d4:	d6 2e       	mov	r13, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     7d6:	48 17       	cp	r20, r24
     7d8:	28 f4       	brcc	.+10     	; 0x7e4 <gfx_mono_generic_draw_line+0x2a>
		dx = x1;
		x1 = x2;
		x2 = dx;
		dy = y1;
		y1 = y2;
     7da:	d2 2e       	mov	r13, r18
		y2 = dy;
     7dc:	26 2f       	mov	r18, r22
	int16_t dx;
	int16_t dy;
	int16_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     7de:	81 2f       	mov	r24, r17
     7e0:	14 2f       	mov	r17, r20
     7e2:	48 2f       	mov	r20, r24
		dy = y1;
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
     7e4:	c4 2f       	mov	r28, r20
     7e6:	d0 e0       	ldi	r29, 0x00	; 0
     7e8:	c1 1b       	sub	r28, r17
     7ea:	d1 09       	sbc	r29, r1
	dy = y2 - y1;
     7ec:	e2 2e       	mov	r14, r18
     7ee:	f1 2c       	mov	r15, r1
     7f0:	ed 18       	sub	r14, r13
     7f2:	f1 08       	sbc	r15, r1

	x = x1;
	y = y1;

	if (dx < 0) {
     7f4:	d7 ff       	sbrs	r29, 7
     7f6:	06 c0       	rjmp	.+12     	; 0x804 <gfx_mono_generic_draw_line+0x4a>
		xinc = -1;
		dx = -dx;
     7f8:	d1 95       	neg	r29
     7fa:	c1 95       	neg	r28
     7fc:	d1 09       	sbc	r29, r1

	x = x1;
	y = y1;

	if (dx < 0) {
		xinc = -1;
     7fe:	99 24       	eor	r9, r9
     800:	9a 94       	dec	r9
     802:	02 c0       	rjmp	.+4      	; 0x808 <gfx_mono_generic_draw_line+0x4e>
		dx = -dx;
	} else {
		xinc = 1;
     804:	99 24       	eor	r9, r9
     806:	93 94       	inc	r9
	}

	if (dy < 0) {
     808:	f7 fe       	sbrs	r15, 7
     80a:	06 c0       	rjmp	.+12     	; 0x818 <gfx_mono_generic_draw_line+0x5e>
		yinc = -1;
		dy = -dy;
     80c:	f1 94       	neg	r15
     80e:	e1 94       	neg	r14
     810:	f1 08       	sbc	r15, r1
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     812:	88 24       	eor	r8, r8
     814:	8a 94       	dec	r8
     816:	02 c0       	rjmp	.+4      	; 0x81c <gfx_mono_generic_draw_line+0x62>
		dy = -dy;
	} else {
		yinc = 1;
     818:	88 24       	eor	r8, r8
     81a:	83 94       	inc	r8
	}

	if (dx > dy) {
     81c:	ec 16       	cp	r14, r28
     81e:	fd 06       	cpc	r15, r29
     820:	bc f4       	brge	.+46     	; 0x850 <gfx_mono_generic_draw_line+0x96>
		e = dy - dx;
     822:	57 01       	movw	r10, r14
     824:	ac 1a       	sub	r10, r28
     826:	bd 0a       	sbc	r11, r29
		for (i = 0; i <= dx; i++) {
     828:	c1 2c       	mov	r12, r1
     82a:	8c 2d       	mov	r24, r12
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	c8 17       	cp	r28, r24
     830:	d9 07       	cpc	r29, r25
     832:	2c f1       	brlt	.+74     	; 0x87e <gfx_mono_generic_draw_line+0xc4>
			gfx_mono_draw_pixel(x, y, color);
     834:	40 2f       	mov	r20, r16
     836:	6d 2d       	mov	r22, r13
     838:	81 2f       	mov	r24, r17
     83a:	27 d2       	rcall	.+1102   	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     83c:	b7 fc       	sbrc	r11, 7
     83e:	03 c0       	rjmp	.+6      	; 0x846 <gfx_mono_generic_draw_line+0x8c>
				e -= dx;
     840:	ac 1a       	sub	r10, r28
     842:	bd 0a       	sbc	r11, r29
				y += yinc;
     844:	d8 0c       	add	r13, r8
			}

			e += dy;
     846:	ae 0c       	add	r10, r14
     848:	bf 1c       	adc	r11, r15
     84a:	19 0d       	add	r17, r9
		yinc = 1;
	}

	if (dx > dy) {
		e = dy - dx;
		for (i = 0; i <= dx; i++) {
     84c:	c3 94       	inc	r12
     84e:	ed cf       	rjmp	.-38     	; 0x82a <gfx_mono_generic_draw_line+0x70>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     850:	5e 01       	movw	r10, r28
     852:	ae 18       	sub	r10, r14
     854:	bf 08       	sbc	r11, r15
		for (i = 0; i <= dy; i++) {
     856:	c1 2c       	mov	r12, r1
     858:	8c 2d       	mov	r24, r12
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	e8 16       	cp	r14, r24
     85e:	f9 06       	cpc	r15, r25
     860:	74 f0       	brlt	.+28     	; 0x87e <gfx_mono_generic_draw_line+0xc4>
			gfx_mono_draw_pixel(x, y, color);
     862:	40 2f       	mov	r20, r16
     864:	6d 2d       	mov	r22, r13
     866:	81 2f       	mov	r24, r17
     868:	10 d2       	rcall	.+1056   	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
			if (e >= 0) {
     86a:	b7 fc       	sbrc	r11, 7
     86c:	03 c0       	rjmp	.+6      	; 0x874 <gfx_mono_generic_draw_line+0xba>
				e -= dy;
     86e:	ae 18       	sub	r10, r14
     870:	bf 08       	sbc	r11, r15
				x += xinc;
     872:	19 0d       	add	r17, r9
			}

			e += dx;
     874:	ac 0e       	add	r10, r28
     876:	bd 1e       	adc	r11, r29
     878:	d8 0c       	add	r13, r8
			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
     87a:	c3 94       	inc	r12
     87c:	ed cf       	rjmp	.-38     	; 0x858 <gfx_mono_generic_draw_line+0x9e>

			e += dx;
			y += yinc;
		}
	}
}
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	ff 90       	pop	r15
     888:	ef 90       	pop	r14
     88a:	df 90       	pop	r13
     88c:	cf 90       	pop	r12
     88e:	bf 90       	pop	r11
     890:	af 90       	pop	r10
     892:	9f 90       	pop	r9
     894:	8f 90       	pop	r8
     896:	08 95       	ret

00000898 <gfx_mono_generic_draw_rect>:
 * \param  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	d8 2f       	mov	r29, r24
     8a4:	16 2f       	mov	r17, r22
     8a6:	c4 2f       	mov	r28, r20
     8a8:	f2 2e       	mov	r15, r18
	gfx_mono_draw_horizontal_line(x, y, width, color);
     8aa:	20 2f       	mov	r18, r16
     8ac:	d0 de       	rcall	.-608    	; 0x64e <gfx_mono_generic_draw_horizontal_line>
     8ae:	6f ef       	ldi	r22, 0xFF	; 255
     8b0:	6f 0d       	add	r22, r15
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
     8b2:	61 0f       	add	r22, r17
     8b4:	20 2f       	mov	r18, r16
     8b6:	4c 2f       	mov	r20, r28
     8b8:	8d 2f       	mov	r24, r29
     8ba:	c9 de       	rcall	.-622    	; 0x64e <gfx_mono_generic_draw_horizontal_line>

	gfx_mono_draw_vertical_line(x, y, height, color);
     8bc:	20 2f       	mov	r18, r16
     8be:	4f 2d       	mov	r20, r15
     8c0:	61 2f       	mov	r22, r17
     8c2:	8d 2f       	mov	r24, r29
     8c4:	23 df       	rcall	.-442    	; 0x70c <gfx_mono_generic_draw_vertical_line>
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	8c 0f       	add	r24, r28
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     8ca:	20 2f       	mov	r18, r16
     8cc:	4f 2d       	mov	r20, r15
     8ce:	61 2f       	mov	r22, r17
     8d0:	8d 0f       	add	r24, r29
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
{
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     8dc:	17 cf       	rjmp	.-466    	; 0x70c <gfx_mono_generic_draw_vertical_line>

000008de <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
	if (height == 0) {
     8e8:	22 23       	and	r18, r18
     8ea:	69 f0       	breq	.+26     	; 0x906 <__stack+0x7>
     8ec:	c2 2f       	mov	r28, r18
     8ee:	14 2f       	mov	r17, r20
     8f0:	f6 2e       	mov	r15, r22
     8f2:	d8 2f       	mov	r29, r24
     8f4:	c1 50       	subi	r28, 0x01	; 1
     8f6:	6c 2f       	mov	r22, r28
     8f8:	6f 0d       	add	r22, r15
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     8fa:	20 2f       	mov	r18, r16
     8fc:	41 2f       	mov	r20, r17
     8fe:	8d 2f       	mov	r24, r29
     900:	a6 de       	rcall	.-692    	; 0x64e <gfx_mono_generic_draw_horizontal_line>
     902:	c1 50       	subi	r28, 0x01	; 1
     904:	c0 f7       	brcc	.-16     	; 0x8f6 <gfx_mono_generic_draw_filled_rect+0x18>
	}
}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	08 95       	ret

00000912 <gfx_mono_generic_draw_circle>:
 * \param  octant_mask Bitmask indicating which octants to draw.
 */
void gfx_mono_generic_draw_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t octant_mask)
{
     912:	5f 92       	push	r5
     914:	6f 92       	push	r6
     916:	7f 92       	push	r7
     918:	8f 92       	push	r8
     91a:	9f 92       	push	r9
     91c:	af 92       	push	r10
     91e:	bf 92       	push	r11
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	18 2f       	mov	r17, r24
     932:	d6 2e       	mov	r13, r22
     934:	c4 2f       	mov	r28, r20
     936:	c2 2e       	mov	r12, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     938:	41 11       	cpse	r20, r1
     93a:	11 c0       	rjmp	.+34     	; 0x95e <gfx_mono_generic_draw_circle+0x4c>
		gfx_mono_draw_pixel(x, y, color);
     93c:	42 2f       	mov	r20, r18
		}

		/* Next X. */
		++offset_x;
	}
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	bf 90       	pop	r11
     950:	af 90       	pop	r10
     952:	9f 90       	pop	r9
     954:	8f 90       	pop	r8
     956:	7f 90       	pop	r7
     958:	6f 90       	pop	r6
     95a:	5f 90       	pop	r5
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
		gfx_mono_draw_pixel(x, y, color);
     95c:	96 c1       	rjmp	.+812    	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     95e:	e4 2e       	mov	r14, r20
     960:	f1 2c       	mov	r15, r1
     962:	f1 94       	neg	r15
     964:	e1 94       	neg	r14
     966:	f1 08       	sbc	r15, r1
     968:	ee 0c       	add	r14, r14
     96a:	ff 1c       	adc	r15, r15
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	e8 0e       	add	r14, r24
     970:	f1 1c       	adc	r15, r1
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     972:	d0 e0       	ldi	r29, 0x00	; 0
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     974:	80 2f       	mov	r24, r16
     976:	81 70       	andi	r24, 0x01	; 1
     978:	b8 2e       	mov	r11, r24
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT1) {
     97a:	80 2f       	mov	r24, r16
     97c:	82 70       	andi	r24, 0x02	; 2
     97e:	a8 2e       	mov	r10, r24
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT2) {
     980:	80 2f       	mov	r24, r16
     982:	84 70       	andi	r24, 0x04	; 4
     984:	98 2e       	mov	r9, r24
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
		}

		if (octant_mask & GFX_OCTANT3) {
     986:	80 2f       	mov	r24, r16
     988:	88 70       	andi	r24, 0x08	; 8
     98a:	88 2e       	mov	r8, r24
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
		}

		if (octant_mask & GFX_OCTANT4) {
     98c:	80 2f       	mov	r24, r16
     98e:	80 71       	andi	r24, 0x10	; 16
     990:	78 2e       	mov	r7, r24
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
		}

		if (octant_mask & GFX_OCTANT5) {
     992:	80 2f       	mov	r24, r16
     994:	80 72       	andi	r24, 0x20	; 32
     996:	68 2e       	mov	r6, r24
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
		}

		if (octant_mask & GFX_OCTANT6) {
     998:	80 2f       	mov	r24, r16
     99a:	80 74       	andi	r24, 0x40	; 64
     99c:	58 2e       	mov	r5, r24
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw one pixel for each octant enabled in octant_mask. */
		if (octant_mask & GFX_OCTANT0) {
     99e:	bb 20       	and	r11, r11
     9a0:	31 f0       	breq	.+12     	; 0x9ae <gfx_mono_generic_draw_circle+0x9c>
			gfx_mono_draw_pixel(x + offset_y, y - offset_x, color);
     9a2:	4c 2d       	mov	r20, r12
     9a4:	6d 2d       	mov	r22, r13
     9a6:	6d 1b       	sub	r22, r29
     9a8:	8c 2f       	mov	r24, r28
     9aa:	81 0f       	add	r24, r17
     9ac:	6e d1       	rcall	.+732    	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT1) {
     9ae:	aa 20       	and	r10, r10
     9b0:	31 f0       	breq	.+12     	; 0x9be <gfx_mono_generic_draw_circle+0xac>
			gfx_mono_draw_pixel(x + offset_x, y - offset_y, color);
     9b2:	4c 2d       	mov	r20, r12
     9b4:	6d 2d       	mov	r22, r13
     9b6:	6c 1b       	sub	r22, r28
     9b8:	8d 2f       	mov	r24, r29
     9ba:	81 0f       	add	r24, r17
     9bc:	66 d1       	rcall	.+716    	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT2) {
     9be:	99 20       	and	r9, r9
     9c0:	31 f0       	breq	.+12     	; 0x9ce <gfx_mono_generic_draw_circle+0xbc>
			gfx_mono_draw_pixel(x - offset_x, y - offset_y, color);
     9c2:	4c 2d       	mov	r20, r12
     9c4:	6d 2d       	mov	r22, r13
     9c6:	6c 1b       	sub	r22, r28
     9c8:	81 2f       	mov	r24, r17
     9ca:	8d 1b       	sub	r24, r29
     9cc:	5e d1       	rcall	.+700    	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT3) {
     9ce:	88 20       	and	r8, r8
     9d0:	31 f0       	breq	.+12     	; 0x9de <gfx_mono_generic_draw_circle+0xcc>
			gfx_mono_draw_pixel(x - offset_y, y - offset_x, color);
     9d2:	4c 2d       	mov	r20, r12
     9d4:	6d 2d       	mov	r22, r13
     9d6:	6d 1b       	sub	r22, r29
     9d8:	81 2f       	mov	r24, r17
     9da:	8c 1b       	sub	r24, r28
     9dc:	56 d1       	rcall	.+684    	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT4) {
     9de:	77 20       	and	r7, r7
     9e0:	31 f0       	breq	.+12     	; 0x9ee <gfx_mono_generic_draw_circle+0xdc>
			gfx_mono_draw_pixel(x - offset_y, y + offset_x, color);
     9e2:	4c 2d       	mov	r20, r12
     9e4:	6d 2f       	mov	r22, r29
     9e6:	6d 0d       	add	r22, r13
     9e8:	81 2f       	mov	r24, r17
     9ea:	8c 1b       	sub	r24, r28
     9ec:	4e d1       	rcall	.+668    	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT5) {
     9ee:	66 20       	and	r6, r6
     9f0:	31 f0       	breq	.+12     	; 0x9fe <gfx_mono_generic_draw_circle+0xec>
			gfx_mono_draw_pixel(x - offset_x, y + offset_y, color);
     9f2:	4c 2d       	mov	r20, r12
     9f4:	6c 2f       	mov	r22, r28
     9f6:	6d 0d       	add	r22, r13
     9f8:	81 2f       	mov	r24, r17
     9fa:	8d 1b       	sub	r24, r29
     9fc:	46 d1       	rcall	.+652    	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT6) {
     9fe:	55 20       	and	r5, r5
     a00:	31 f0       	breq	.+12     	; 0xa0e <gfx_mono_generic_draw_circle+0xfc>
			gfx_mono_draw_pixel(x + offset_x, y + offset_y, color);
     a02:	4c 2d       	mov	r20, r12
     a04:	6c 2f       	mov	r22, r28
     a06:	6d 0d       	add	r22, r13
     a08:	8d 2f       	mov	r24, r29
     a0a:	81 0f       	add	r24, r17
     a0c:	3e d1       	rcall	.+636    	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		}

		if (octant_mask & GFX_OCTANT7) {
     a0e:	07 ff       	sbrs	r16, 7
     a10:	06 c0       	rjmp	.+12     	; 0xa1e <gfx_mono_generic_draw_circle+0x10c>
			gfx_mono_draw_pixel(x + offset_y, y + offset_x, color);
     a12:	4c 2d       	mov	r20, r12
     a14:	6d 2f       	mov	r22, r29
     a16:	6d 0d       	add	r22, r13
     a18:	8c 2f       	mov	r24, r28
     a1a:	81 0f       	add	r24, r17
     a1c:	36 d1       	rcall	.+620    	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
     a1e:	ed 2f       	mov	r30, r29
     a20:	f0 e0       	ldi	r31, 0x00	; 0
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     a22:	f7 fe       	sbrs	r15, 7
     a24:	08 c0       	rjmp	.+16     	; 0xa36 <gfx_mono_generic_draw_circle+0x124>
			error += ((offset_x << 2) + 6);
     a26:	ee 0f       	add	r30, r30
     a28:	ff 1f       	adc	r31, r31
     a2a:	ee 0f       	add	r30, r30
     a2c:	ff 1f       	adc	r31, r31
     a2e:	36 96       	adiw	r30, 0x06	; 6
     a30:	ee 0e       	add	r14, r30
     a32:	ff 1e       	adc	r15, r31
     a34:	0a c0       	rjmp	.+20     	; 0xa4a <gfx_mono_generic_draw_circle+0x138>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     a36:	ec 1b       	sub	r30, r28
     a38:	f1 09       	sbc	r31, r1
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	3a 96       	adiw	r30, 0x0a	; 10
     a44:	ee 0e       	add	r14, r30
     a46:	ff 1e       	adc	r15, r31
			--offset_y;
     a48:	c1 50       	subi	r28, 0x01	; 1
		}

		/* Next X. */
		++offset_x;
     a4a:	df 5f       	subi	r29, 0xFF	; 255
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offsetX from 0 to radius. */
	while (offset_x <= offset_y) {
     a4c:	cd 17       	cp	r28, r29
     a4e:	08 f0       	brcs	.+2      	; 0xa52 <gfx_mono_generic_draw_circle+0x140>
     a50:	a6 cf       	rjmp	.-180    	; 0x99e <gfx_mono_generic_draw_circle+0x8c>
		}

		/* Next X. */
		++offset_x;
	}
}
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	bf 90       	pop	r11
     a64:	af 90       	pop	r10
     a66:	9f 90       	pop	r9
     a68:	8f 90       	pop	r8
     a6a:	7f 90       	pop	r7
     a6c:	6f 90       	pop	r6
     a6e:	5f 90       	pop	r5
     a70:	08 95       	ret

00000a72 <gfx_mono_generic_draw_filled_circle>:
 * \param  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
     a72:	8f 92       	push	r8
     a74:	9f 92       	push	r9
     a76:	af 92       	push	r10
     a78:	bf 92       	push	r11
     a7a:	cf 92       	push	r12
     a7c:	df 92       	push	r13
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	18 2f       	mov	r17, r24
     a8c:	d6 2e       	mov	r13, r22
     a8e:	c4 2f       	mov	r28, r20
     a90:	c2 2e       	mov	r12, r18
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
     a92:	41 11       	cpse	r20, r1
     a94:	0e c0       	rjmp	.+28     	; 0xab2 <gfx_mono_generic_draw_filled_circle+0x40>
		gfx_mono_draw_pixel(x, y, color);
     a96:	42 2f       	mov	r20, r18
		}

		/* Next X. */
		++offset_x;
	}
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	df 90       	pop	r13
     aa6:	cf 90       	pop	r12
     aa8:	bf 90       	pop	r11
     aaa:	af 90       	pop	r10
     aac:	9f 90       	pop	r9
     aae:	8f 90       	pop	r8
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
		gfx_mono_draw_pixel(x, y, color);
     ab0:	ec c0       	rjmp	.+472    	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
     ab2:	e4 2e       	mov	r14, r20
     ab4:	f1 2c       	mov	r15, r1
     ab6:	f1 94       	neg	r15
     ab8:	e1 94       	neg	r14
     aba:	f1 08       	sbc	r15, r1
     abc:	ee 0c       	add	r14, r14
     abe:	ff 1c       	adc	r15, r15
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	e8 0e       	add	r14, r24
     ac4:	f1 1c       	adc	r15, r1
     ac6:	bb 24       	eor	r11, r11
     ac8:	b3 94       	inc	r11
		gfx_mono_draw_pixel(x, y, color);
		return;
	}

	/* Set up start iterators. */
	offset_x = 0;
     aca:	d0 e0       	ldi	r29, 0x00	; 0
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     acc:	80 2f       	mov	r24, r16
     ace:	83 70       	andi	r24, 0x03	; 3
     ad0:	a8 2e       	mov	r10, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     ad2:	80 2f       	mov	r24, r16
     ad4:	8c 70       	andi	r24, 0x0C	; 12
     ad6:	98 2e       	mov	r9, r24
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     ad8:	80 2f       	mov	r24, r16
     ada:	80 73       	andi	r24, 0x30	; 48
     adc:	88 2e       	mov	r8, r24
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     ade:	00 7c       	andi	r16, 0xC0	; 192
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
     ae0:	aa 20       	and	r10, r10
     ae2:	79 f0       	breq	.+30     	; 0xb02 <gfx_mono_generic_draw_filled_circle+0x90>
			gfx_mono_draw_vertical_line(x + offset_y,
     ae4:	2c 2d       	mov	r18, r12
     ae6:	4b 2d       	mov	r20, r11
     ae8:	6d 2d       	mov	r22, r13
     aea:	6d 1b       	sub	r22, r29
     aec:	8c 2f       	mov	r24, r28
     aee:	81 0f       	add	r24, r17
     af0:	0d de       	rcall	.-998    	; 0x70c <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     af2:	2c 2d       	mov	r18, r12
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	4c 0f       	add	r20, r28
     af8:	6d 2d       	mov	r22, r13
     afa:	6c 1b       	sub	r22, r28
     afc:	8d 2f       	mov	r24, r29
     afe:	81 0f       	add	r24, r17
     b00:	05 de       	rcall	.-1014   	; 0x70c <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
     b02:	99 20       	and	r9, r9
     b04:	79 f0       	breq	.+30     	; 0xb24 <gfx_mono_generic_draw_filled_circle+0xb2>
			gfx_mono_draw_vertical_line(x - offset_y,
     b06:	2c 2d       	mov	r18, r12
     b08:	4b 2d       	mov	r20, r11
     b0a:	6d 2d       	mov	r22, r13
     b0c:	6d 1b       	sub	r22, r29
     b0e:	81 2f       	mov	r24, r17
     b10:	8c 1b       	sub	r24, r28
     b12:	fc dd       	rcall	.-1032   	; 0x70c <gfx_mono_generic_draw_vertical_line>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     b14:	2c 2d       	mov	r18, r12
     b16:	41 e0       	ldi	r20, 0x01	; 1
     b18:	4c 0f       	add	r20, r28
     b1a:	6d 2d       	mov	r22, r13
     b1c:	6c 1b       	sub	r22, r28
     b1e:	81 2f       	mov	r24, r17
     b20:	8d 1b       	sub	r24, r29
     b22:	f4 dd       	rcall	.-1048   	; 0x70c <gfx_mono_generic_draw_vertical_line>
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
     b24:	88 20       	and	r8, r8
     b26:	69 f0       	breq	.+26     	; 0xb42 <gfx_mono_generic_draw_filled_circle+0xd0>
			gfx_mono_draw_vertical_line(x - offset_y,
     b28:	2c 2d       	mov	r18, r12
     b2a:	4b 2d       	mov	r20, r11
     b2c:	6d 2d       	mov	r22, r13
     b2e:	81 2f       	mov	r24, r17
     b30:	8c 1b       	sub	r24, r28
     b32:	ec dd       	rcall	.-1064   	; 0x70c <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
     b34:	2c 2d       	mov	r18, r12
     b36:	41 e0       	ldi	r20, 0x01	; 1
     b38:	4c 0f       	add	r20, r28
     b3a:	6d 2d       	mov	r22, r13
     b3c:	81 2f       	mov	r24, r17
     b3e:	8d 1b       	sub	r24, r29
     b40:	e5 dd       	rcall	.-1078   	; 0x70c <gfx_mono_generic_draw_vertical_line>
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
     b42:	00 23       	and	r16, r16
     b44:	69 f0       	breq	.+26     	; 0xb60 <gfx_mono_generic_draw_filled_circle+0xee>
			gfx_mono_draw_vertical_line(x + offset_y,
     b46:	2c 2d       	mov	r18, r12
     b48:	4b 2d       	mov	r20, r11
     b4a:	6d 2d       	mov	r22, r13
     b4c:	8c 2f       	mov	r24, r28
     b4e:	81 0f       	add	r24, r17
     b50:	dd dd       	rcall	.-1094   	; 0x70c <gfx_mono_generic_draw_vertical_line>
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
     b52:	2c 2d       	mov	r18, r12
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	4c 0f       	add	r20, r28
     b58:	6d 2d       	mov	r22, r13
     b5a:	8d 2f       	mov	r24, r29
     b5c:	81 0f       	add	r24, r17
     b5e:	d6 dd       	rcall	.-1108   	; 0x70c <gfx_mono_generic_draw_vertical_line>
     b60:	ed 2f       	mov	r30, r29
     b62:	f0 e0       	ldi	r31, 0x00	; 0
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
     b64:	f7 fe       	sbrs	r15, 7
     b66:	08 c0       	rjmp	.+16     	; 0xb78 <gfx_mono_generic_draw_filled_circle+0x106>
			error += ((offset_x << 2) + 6);
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	ee 0f       	add	r30, r30
     b6e:	ff 1f       	adc	r31, r31
     b70:	36 96       	adiw	r30, 0x06	; 6
     b72:	ee 0e       	add	r14, r30
     b74:	ff 1e       	adc	r15, r31
     b76:	0a c0       	rjmp	.+20     	; 0xb8c <gfx_mono_generic_draw_filled_circle+0x11a>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
     b78:	ec 1b       	sub	r30, r28
     b7a:	f1 09       	sbc	r31, r1
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	3a 96       	adiw	r30, 0x0a	; 10
     b86:	ee 0e       	add	r14, r30
     b88:	ff 1e       	adc	r15, r31
			--offset_y;
     b8a:	c1 50       	subi	r28, 0x01	; 1
		}

		/* Next X. */
		++offset_x;
     b8c:	df 5f       	subi	r29, 0xFF	; 255
     b8e:	b3 94       	inc	r11
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
     b90:	cd 17       	cp	r28, r29
     b92:	08 f0       	brcs	.+2      	; 0xb96 <gfx_mono_generic_draw_filled_circle+0x124>
     b94:	a5 cf       	rjmp	.-182    	; 0xae0 <gfx_mono_generic_draw_filled_circle+0x6e>
		}

		/* Next X. */
		++offset_x;
	}
}
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	ef 90       	pop	r14
     ba2:	df 90       	pop	r13
     ba4:	cf 90       	pop	r12
     ba6:	bf 90       	pop	r11
     ba8:	af 90       	pop	r10
     baa:	9f 90       	pop	r9
     bac:	8f 90       	pop	r8
     bae:	08 95       	ret

00000bb0 <gfx_mono_lcd_uc1608_put_page>:
		uint8_t				byte = gfx_mono_lcd_uc1608_get_byte(page, x);

		isSet = (byte & pixel_mask) ?  GFX_PIXEL_SET : GFX_PIXEL_CLR;
	}
	return isSet;
}
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	8c 01       	movw	r16, r24
     bba:	86 2f       	mov	r24, r22
     bbc:	d4 2f       	mov	r29, r20
     bbe:	c2 2f       	mov	r28, r18
     bc0:	01 15       	cp	r16, r1
     bc2:	11 05       	cpc	r17, r1
     bc4:	c1 f0       	breq	.+48     	; 0xbf6 <gfx_mono_lcd_uc1608_put_page+0x46>
     bc6:	60 31       	cpi	r22, 0x10	; 16
     bc8:	b0 f4       	brcc	.+44     	; 0xbf6 <gfx_mono_lcd_uc1608_put_page+0x46>
     bca:	40 3f       	cpi	r20, 0xF0	; 240
     bcc:	a0 f4       	brcc	.+40     	; 0xbf6 <gfx_mono_lcd_uc1608_put_page+0x46>
     bce:	75 d6       	rcall	.+3306   	; 0x18ba <lcd_page_set>
     bd0:	8d 2f       	mov	r24, r29
     bd2:	79 d6       	rcall	.+3314   	; 0x18c6 <lcd_col_set>
     bd4:	8c 2f       	mov	r24, r28
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	8d 0f       	add	r24, r29
     bda:	91 1d       	adc	r25, r1
     bdc:	81 3f       	cpi	r24, 0xF1	; 241
     bde:	91 05       	cpc	r25, r1
     be0:	14 f0       	brlt	.+4      	; 0xbe6 <gfx_mono_lcd_uc1608_put_page+0x36>
     be2:	c0 ef       	ldi	r28, 0xF0	; 240
     be4:	cd 1b       	sub	r28, r29
     be6:	cc 23       	and	r28, r28
     be8:	31 f0       	breq	.+12     	; 0xbf6 <gfx_mono_lcd_uc1608_put_page+0x46>
     bea:	f8 01       	movw	r30, r16
     bec:	81 91       	ld	r24, Z+
     bee:	8f 01       	movw	r16, r30
     bf0:	42 d6       	rcall	.+3204   	; 0x1876 <lcd_bus_write_ram>
     bf2:	c1 50       	subi	r28, 0x01	; 1
     bf4:	f8 cf       	rjmp	.-16     	; 0xbe6 <gfx_mono_lcd_uc1608_put_page+0x36>
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <gfx_mono_lcd_uc1608_put_byte>:
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	80 31       	cpi	r24, 0x10	; 16
     c06:	58 f4       	brcc	.+22     	; 0xc1e <gfx_mono_lcd_uc1608_put_byte+0x1e>
     c08:	60 3f       	cpi	r22, 0xF0	; 240
     c0a:	48 f4       	brcc	.+18     	; 0xc1e <gfx_mono_lcd_uc1608_put_byte+0x1e>
     c0c:	d4 2f       	mov	r29, r20
     c0e:	c6 2f       	mov	r28, r22
     c10:	54 d6       	rcall	.+3240   	; 0x18ba <lcd_page_set>
     c12:	8c 2f       	mov	r24, r28
     c14:	58 d6       	rcall	.+3248   	; 0x18c6 <lcd_col_set>
     c16:	8d 2f       	mov	r24, r29
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	2c c6       	rjmp	.+3160   	; 0x1876 <lcd_bus_write_ram>
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <gfx_mono_lcd_uc1608_get_byte>:
     c24:	cf 93       	push	r28
     c26:	80 31       	cpi	r24, 0x10	; 16
     c28:	40 f4       	brcc	.+16     	; 0xc3a <gfx_mono_lcd_uc1608_get_byte+0x16>
     c2a:	60 3f       	cpi	r22, 0xF0	; 240
     c2c:	30 f4       	brcc	.+12     	; 0xc3a <gfx_mono_lcd_uc1608_get_byte+0x16>
     c2e:	c6 2f       	mov	r28, r22
     c30:	44 d6       	rcall	.+3208   	; 0x18ba <lcd_page_set>
     c32:	8c 2f       	mov	r24, r28
     c34:	48 d6       	rcall	.+3216   	; 0x18c6 <lcd_col_set>
     c36:	cf 91       	pop	r28
     c38:	2b c6       	rjmp	.+3158   	; 0x1890 <lcd_bus_read_ram>
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	cf 91       	pop	r28
     c3e:	08 95       	ret

00000c40 <gfx_mono_lcd_uc1608_mask_byte>:
 * \param column     Page offset (x coordinate)
 * \param pixel_mask Mask for pixel operation
 * \param color      Pixel operation
 */
void gfx_mono_lcd_uc1608_mask_byte(gfx_coord_t page, gfx_coord_t column, gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
	uint8_t data = 0;

	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
     c48:	80 31       	cpi	r24, 0x10	; 16
     c4a:	d0 f4       	brcc	.+52     	; 0xc80 <gfx_mono_lcd_uc1608_mask_byte+0x40>
     c4c:	60 3f       	cpi	r22, 0xF0	; 240
     c4e:	c0 f4       	brcc	.+48     	; 0xc80 <gfx_mono_lcd_uc1608_mask_byte+0x40>
     c50:	02 2f       	mov	r16, r18
     c52:	d4 2f       	mov	r29, r20
     c54:	16 2f       	mov	r17, r22
		data = gfx_mono_lcd_uc1608_get_byte(page, column);
     c56:	e6 df       	rcall	.-52     	; 0xc24 <gfx_mono_lcd_uc1608_get_byte>
     c58:	c8 2f       	mov	r28, r24

		switch (color) {
     c5a:	01 30       	cpi	r16, 0x01	; 1
     c5c:	41 f0       	breq	.+16     	; 0xc6e <gfx_mono_lcd_uc1608_mask_byte+0x2e>
     c5e:	20 f0       	brcs	.+8      	; 0xc68 <gfx_mono_lcd_uc1608_mask_byte+0x28>
     c60:	02 30       	cpi	r16, 0x02	; 2
     c62:	31 f4       	brne	.+12     	; 0xc70 <gfx_mono_lcd_uc1608_mask_byte+0x30>
			case GFX_PIXEL_SET:
				data |= pixel_mask;
				break;

			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
     c64:	cd 27       	eor	r28, r29
     c66:	04 c0       	rjmp	.+8      	; 0xc70 <gfx_mono_lcd_uc1608_mask_byte+0x30>
	if ((page < GFX_MONO_LCD_PAGES) && (column < GFX_MONO_LCD_WIDTH)) {
		data = gfx_mono_lcd_uc1608_get_byte(page, column);

		switch (color) {
			case GFX_PIXEL_CLR:
				data &= ~pixel_mask;
     c68:	d0 95       	com	r29
     c6a:	cd 23       	and	r28, r29
     c6c:	01 c0       	rjmp	.+2      	; 0xc70 <gfx_mono_lcd_uc1608_mask_byte+0x30>
				break;

			case GFX_PIXEL_SET:
				data |= pixel_mask;
     c6e:	cd 2b       	or	r28, r29
			case GFX_PIXEL_XOR:
				data ^= pixel_mask;
				break;
		}

		lcd_col_set(column);
     c70:	81 2f       	mov	r24, r17
     c72:	29 d6       	rcall	.+3154   	; 0x18c6 <lcd_col_set>
		lcd_bus_write_ram(data);										// Write byte slice to RAM
     c74:	8c 2f       	mov	r24, r28
	}
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
				data ^= pixel_mask;
				break;
		}

		lcd_col_set(column);
		lcd_bus_write_ram(data);										// Write byte slice to RAM
     c7e:	fb c5       	rjmp	.+3062   	; 0x1876 <lcd_bus_write_ram>
	}
}
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	08 95       	ret

00000c8a <gfx_mono_lcd_uc1608_draw_pixel>:
 * \param x         X coordinate of the pixel
 * \param y         Y coordinate of the pixel
 * \param color     Pixel operation.
 */
void gfx_mono_lcd_uc1608_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_mono_color_t color)
{
     c8a:	96 2f       	mov	r25, r22
     c8c:	24 2f       	mov	r18, r20
	if ((x < GFX_MONO_LCD_WIDTH) && (y < GFX_MONO_LCD_HEIGHT)) {
     c8e:	80 3f       	cpi	r24, 0xF0	; 240
     c90:	88 f4       	brcc	.+34     	; 0xcb4 <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
     c92:	67 fd       	sbrc	r22, 7
     c94:	0f c0       	rjmp	.+30     	; 0xcb4 <gfx_mono_lcd_uc1608_draw_pixel+0x2a>
		gfx_coord_t			page		= y / GFX_MONO_LCD_PIXELS_PER_BYTE;
		gfx_mono_color_t	pixel_mask	= 1 << (y % GFX_MONO_LCD_PIXELS_PER_BYTE);
     c96:	36 2f       	mov	r19, r22
     c98:	37 70       	andi	r19, 0x07	; 7
     c9a:	e1 e0       	ldi	r30, 0x01	; 1
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	af 01       	movw	r20, r30
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <gfx_mono_lcd_uc1608_draw_pixel+0x1a>
     ca2:	44 0f       	add	r20, r20
     ca4:	3a 95       	dec	r19
     ca6:	ea f7       	brpl	.-6      	; 0xca2 <gfx_mono_lcd_uc1608_draw_pixel+0x18>

		gfx_mono_lcd_uc1608_mask_byte(page, x, pixel_mask, color);
     ca8:	68 2f       	mov	r22, r24
     caa:	89 2f       	mov	r24, r25
     cac:	86 95       	lsr	r24
     cae:	86 95       	lsr	r24
     cb0:	86 95       	lsr	r24
     cb2:	c6 cf       	rjmp	.-116    	; 0xc40 <gfx_mono_lcd_uc1608_mask_byte>
     cb4:	08 95       	ret

00000cb6 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     cb6:	9f 92       	push	r9
     cb8:	af 92       	push	r10
     cba:	bf 92       	push	r11
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	d8 2f       	mov	r29, r24
     cce:	c6 2e       	mov	r12, r22
     cd0:	d4 2e       	mov	r13, r20
     cd2:	79 01       	movw	r14, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     cd4:	00 e0       	ldi	r16, 0x00	; 0
     cd6:	d9 01       	movw	r26, r18
     cd8:	14 96       	adiw	r26, 0x04	; 4
     cda:	2c 91       	ld	r18, X
     cdc:	14 97       	sbiw	r26, 0x04	; 4
     cde:	13 96       	adiw	r26, 0x03	; 3
     ce0:	4c 91       	ld	r20, X
     ce2:	6d 2d       	mov	r22, r13
     ce4:	8c 2d       	mov	r24, r12
     ce6:	fb dd       	rcall	.-1034   	; 0x8de <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     ce8:	f7 01       	movw	r30, r14
     cea:	80 81       	ld	r24, Z
     cec:	81 11       	cpse	r24, r1
     cee:	3f c0       	rjmp	.+126    	; 0xd6e <gfx_mono_draw_char+0xb8>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     cf0:	83 81       	ldd	r24, Z+3	; 0x03
     cf2:	e8 2f       	mov	r30, r24
     cf4:	e6 95       	lsr	r30
     cf6:	e6 95       	lsr	r30
     cf8:	e6 95       	lsr	r30
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     cfa:	87 70       	andi	r24, 0x07	; 7
     cfc:	09 f0       	breq	.+2      	; 0xd00 <gfx_mono_draw_char+0x4a>
		char_row_size++;
     cfe:	ef 5f       	subi	r30, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     d00:	d7 01       	movw	r26, r14
     d02:	14 96       	adiw	r26, 0x04	; 4
     d04:	cc 91       	ld	r28, X
     d06:	14 97       	sbiw	r26, 0x04	; 4
     d08:	ec 9f       	mul	r30, r28
     d0a:	f0 01       	movw	r30, r0
     d0c:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
     d0e:	2d 2f       	mov	r18, r29
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	15 96       	adiw	r26, 0x05	; 5
     d14:	8c 91       	ld	r24, X
     d16:	15 97       	sbiw	r26, 0x05	; 5
     d18:	28 1b       	sub	r18, r24
     d1a:	31 09       	sbc	r19, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
     d1c:	e2 9f       	mul	r30, r18
     d1e:	c0 01       	movw	r24, r0
     d20:	e3 9f       	mul	r30, r19
     d22:	90 0d       	add	r25, r0
     d24:	f2 9f       	mul	r31, r18
     d26:	90 0d       	add	r25, r0
     d28:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     d2a:	11 96       	adiw	r26, 0x01	; 1
     d2c:	0d 91       	ld	r16, X+
     d2e:	1c 91       	ld	r17, X
     d30:	12 97       	sbiw	r26, 0x02	; 2
     d32:	08 0f       	add	r16, r24
     d34:	19 1f       	adc	r17, r25
     d36:	dc 0e       	add	r13, r28
     d38:	9d 2c       	mov	r9, r13
     d3a:	9c 1a       	sub	r9, r28
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     d3c:	f7 01       	movw	r30, r14
     d3e:	a3 80       	ldd	r10, Z+3	; 0x03
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
     d40:	b1 2c       	mov	r11, r1
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     d42:	d0 e0       	ldi	r29, 0x00	; 0
     d44:	8d 2f       	mov	r24, r29
     d46:	8c 0d       	add	r24, r12
     d48:	da 15       	cp	r29, r10
     d4a:	79 f0       	breq	.+30     	; 0xd6a <gfx_mono_draw_char+0xb4>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     d4c:	9d 2f       	mov	r25, r29
     d4e:	97 70       	andi	r25, 0x07	; 7
     d50:	21 f4       	brne	.+8      	; 0xd5a <gfx_mono_draw_char+0xa4>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     d52:	f8 01       	movw	r30, r16
     d54:	b4 90       	lpm	r11, Z
				glyph_data++;
     d56:	0f 5f       	subi	r16, 0xFF	; 255
     d58:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     d5a:	b7 fe       	sbrs	r11, 7
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <gfx_mono_draw_char+0xae>
				gfx_mono_draw_pixel(inc_x, inc_y,
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	69 2d       	mov	r22, r9
     d62:	93 df       	rcall	.-218    	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     d64:	bb 0c       	add	r11, r11

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     d66:	df 5f       	subi	r29, 0xFF	; 255
     d68:	ed cf       	rjmp	.-38     	; 0xd44 <gfx_mono_draw_char+0x8e>
			glyph_byte <<= 1;
		}

		inc_y += 1;
		inc_x = x;
		rows_left--;
     d6a:	c1 50       	subi	r28, 0x01	; 1
	} while (rows_left > 0);
     d6c:	29 f7       	brne	.-54     	; 0xd38 <gfx_mono_draw_char+0x82>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	df 90       	pop	r13
     d7c:	cf 90       	pop	r12
     d7e:	bf 90       	pop	r11
     d80:	af 90       	pop	r10
     d82:	9f 90       	pop	r9
     d84:	08 95       	ret

00000d86 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	d6 2e       	mov	r13, r22
     d96:	d4 2f       	mov	r29, r20
     d98:	79 01       	movw	r14, r18
     d9a:	8c 01       	movw	r16, r24
     d9c:	c6 2f       	mov	r28, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     d9e:	f8 01       	movw	r30, r16
     da0:	81 91       	ld	r24, Z+
     da2:	8f 01       	movw	r16, r30
     da4:	8a 30       	cpi	r24, 0x0A	; 10
     da6:	31 f4       	brne	.+12     	; 0xdb4 <gfx_mono_draw_string+0x2e>
     da8:	f7 01       	movw	r30, r14
     daa:	84 81       	ldd	r24, Z+4	; 0x04
     dac:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
     dae:	d8 0f       	add	r29, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     db0:	cd 2d       	mov	r28, r13
     db2:	09 c0       	rjmp	.+18     	; 0xdc6 <gfx_mono_draw_string+0x40>
			y += font->height + 1;
		} else if (*str == '\r') {
     db4:	8d 30       	cpi	r24, 0x0D	; 13
     db6:	39 f0       	breq	.+14     	; 0xdc6 <gfx_mono_draw_string+0x40>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     db8:	97 01       	movw	r18, r14
     dba:	4d 2f       	mov	r20, r29
     dbc:	6c 2f       	mov	r22, r28
     dbe:	7b df       	rcall	.-266    	; 0xcb6 <gfx_mono_draw_char>
			x += font->width;
     dc0:	f7 01       	movw	r30, r14
     dc2:	83 81       	ldd	r24, Z+3	; 0x03
     dc4:	c8 0f       	add	r28, r24
		}
	} while (*(++str));
     dc6:	f8 01       	movw	r30, r16
     dc8:	80 81       	ld	r24, Z
     dca:	81 11       	cpse	r24, r1
     dcc:	e8 cf       	rjmp	.-48     	; 0xd9e <gfx_mono_draw_string+0x18>
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	df 90       	pop	r13
     ddc:	08 95       	ret

00000dde <asm_break>:

/* Helper functions */

void asm_break(void)
{
	__asm__ __volatile__ ("break" ::: "memory");
     dde:	98 95       	break
	nop();
     de0:	00 00       	nop
     de2:	08 95       	ret

00000de4 <__vector_1>:
	asm_break();
}


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
     de4:	1f 92       	push	r1
     de6:	0f 92       	push	r0
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	0f 92       	push	r0
     dec:	11 24       	eor	r1, r1
     dee:	2f 93       	push	r18
     df0:	3f 93       	push	r19
     df2:	4f 93       	push	r20
     df4:	5f 93       	push	r21
     df6:	6f 93       	push	r22
     df8:	7f 93       	push	r23
     dfa:	8f 93       	push	r24
     dfc:	9f 93       	push	r25
     dfe:	af 93       	push	r26
     e00:	bf 93       	push	r27
     e02:	ef 93       	push	r30
     e04:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     e06:	eb df       	rcall	.-42     	; 0xdde <asm_break>


ISR(__vector_1, ISR_BLOCK)  // variants: ISR_BLOCK, ISR_NOBLOCK, ISR_NAKED
{	/* INT0 */
	s_bad_interrupt();
}
     e08:	ff 91       	pop	r31
     e0a:	ef 91       	pop	r30
     e0c:	bf 91       	pop	r27
     e0e:	af 91       	pop	r26
     e10:	9f 91       	pop	r25
     e12:	8f 91       	pop	r24
     e14:	7f 91       	pop	r23
     e16:	6f 91       	pop	r22
     e18:	5f 91       	pop	r21
     e1a:	4f 91       	pop	r20
     e1c:	3f 91       	pop	r19
     e1e:	2f 91       	pop	r18
     e20:	0f 90       	pop	r0
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	0f 90       	pop	r0
     e26:	1f 90       	pop	r1
     e28:	18 95       	reti

00000e2a <__vector_2>:

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
     e2a:	1f 92       	push	r1
     e2c:	0f 92       	push	r0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	2f 93       	push	r18
     e36:	3f 93       	push	r19
     e38:	4f 93       	push	r20
     e3a:	5f 93       	push	r21
     e3c:	6f 93       	push	r22
     e3e:	7f 93       	push	r23
     e40:	8f 93       	push	r24
     e42:	9f 93       	push	r25
     e44:	af 93       	push	r26
     e46:	bf 93       	push	r27
     e48:	ef 93       	push	r30
     e4a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     e4c:	c8 df       	rcall	.-112    	; 0xdde <asm_break>
}

ISR(__vector_2, ISR_BLOCK)
{	/* INT1 */
	s_bad_interrupt();
}
     e4e:	ff 91       	pop	r31
     e50:	ef 91       	pop	r30
     e52:	bf 91       	pop	r27
     e54:	af 91       	pop	r26
     e56:	9f 91       	pop	r25
     e58:	8f 91       	pop	r24
     e5a:	7f 91       	pop	r23
     e5c:	6f 91       	pop	r22
     e5e:	5f 91       	pop	r21
     e60:	4f 91       	pop	r20
     e62:	3f 91       	pop	r19
     e64:	2f 91       	pop	r18
     e66:	0f 90       	pop	r0
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	0f 90       	pop	r0
     e6c:	1f 90       	pop	r1
     e6e:	18 95       	reti

00000e70 <__vector_3>:

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
     e70:	1f 92       	push	r1
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	0f 92       	push	r0
     e78:	11 24       	eor	r1, r1
     e7a:	2f 93       	push	r18
     e7c:	3f 93       	push	r19
     e7e:	4f 93       	push	r20
     e80:	5f 93       	push	r21
     e82:	6f 93       	push	r22
     e84:	7f 93       	push	r23
     e86:	8f 93       	push	r24
     e88:	9f 93       	push	r25
     e8a:	af 93       	push	r26
     e8c:	bf 93       	push	r27
     e8e:	ef 93       	push	r30
     e90:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     e92:	a5 df       	rcall	.-182    	; 0xdde <asm_break>
}

ISR(__vector_3, ISR_BLOCK)
{	/* PCINT0 */
	s_bad_interrupt();
}
     e94:	ff 91       	pop	r31
     e96:	ef 91       	pop	r30
     e98:	bf 91       	pop	r27
     e9a:	af 91       	pop	r26
     e9c:	9f 91       	pop	r25
     e9e:	8f 91       	pop	r24
     ea0:	7f 91       	pop	r23
     ea2:	6f 91       	pop	r22
     ea4:	5f 91       	pop	r21
     ea6:	4f 91       	pop	r20
     ea8:	3f 91       	pop	r19
     eaa:	2f 91       	pop	r18
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	0f 90       	pop	r0
     eb2:	1f 90       	pop	r1
     eb4:	18 95       	reti

00000eb6 <__vector_4>:

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
     eb6:	1f 92       	push	r1
     eb8:	0f 92       	push	r0
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	0f 92       	push	r0
     ebe:	11 24       	eor	r1, r1
     ec0:	2f 93       	push	r18
     ec2:	3f 93       	push	r19
     ec4:	4f 93       	push	r20
     ec6:	5f 93       	push	r21
     ec8:	6f 93       	push	r22
     eca:	7f 93       	push	r23
     ecc:	8f 93       	push	r24
     ece:	9f 93       	push	r25
     ed0:	af 93       	push	r26
     ed2:	bf 93       	push	r27
     ed4:	ef 93       	push	r30
     ed6:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     ed8:	82 df       	rcall	.-252    	; 0xdde <asm_break>
}

ISR(__vector_4, ISR_BLOCK)
{	/* PCINT1 */
	s_bad_interrupt();
}
     eda:	ff 91       	pop	r31
     edc:	ef 91       	pop	r30
     ede:	bf 91       	pop	r27
     ee0:	af 91       	pop	r26
     ee2:	9f 91       	pop	r25
     ee4:	8f 91       	pop	r24
     ee6:	7f 91       	pop	r23
     ee8:	6f 91       	pop	r22
     eea:	5f 91       	pop	r21
     eec:	4f 91       	pop	r20
     eee:	3f 91       	pop	r19
     ef0:	2f 91       	pop	r18
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__vector_5>:

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     f1e:	5f df       	rcall	.-322    	; 0xdde <asm_break>
}

ISR(__vector_5, ISR_BLOCK)
{	/* PCINT2 */
	s_bad_interrupt();
}
     f20:	ff 91       	pop	r31
     f22:	ef 91       	pop	r30
     f24:	bf 91       	pop	r27
     f26:	af 91       	pop	r26
     f28:	9f 91       	pop	r25
     f2a:	8f 91       	pop	r24
     f2c:	7f 91       	pop	r23
     f2e:	6f 91       	pop	r22
     f30:	5f 91       	pop	r21
     f32:	4f 91       	pop	r20
     f34:	3f 91       	pop	r19
     f36:	2f 91       	pop	r18
     f38:	0f 90       	pop	r0
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	0f 90       	pop	r0
     f3e:	1f 90       	pop	r1
     f40:	18 95       	reti

00000f42 <__vector_6>:

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
     f42:	1f 92       	push	r1
     f44:	0f 92       	push	r0
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	0f 92       	push	r0
     f4a:	11 24       	eor	r1, r1
     f4c:	2f 93       	push	r18
     f4e:	3f 93       	push	r19
     f50:	4f 93       	push	r20
     f52:	5f 93       	push	r21
     f54:	6f 93       	push	r22
     f56:	7f 93       	push	r23
     f58:	8f 93       	push	r24
     f5a:	9f 93       	push	r25
     f5c:	af 93       	push	r26
     f5e:	bf 93       	push	r27
     f60:	ef 93       	push	r30
     f62:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     f64:	3c df       	rcall	.-392    	; 0xdde <asm_break>
}

ISR(__vector_6, ISR_BLOCK)
{	/* WDT - Watchdog Timeout */
	s_bad_interrupt();
}
     f66:	ff 91       	pop	r31
     f68:	ef 91       	pop	r30
     f6a:	bf 91       	pop	r27
     f6c:	af 91       	pop	r26
     f6e:	9f 91       	pop	r25
     f70:	8f 91       	pop	r24
     f72:	7f 91       	pop	r23
     f74:	6f 91       	pop	r22
     f76:	5f 91       	pop	r21
     f78:	4f 91       	pop	r20
     f7a:	3f 91       	pop	r19
     f7c:	2f 91       	pop	r18
     f7e:	0f 90       	pop	r0
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	0f 90       	pop	r0
     f84:	1f 90       	pop	r1
     f86:	18 95       	reti

00000f88 <__vector_7>:

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
     f88:	1f 92       	push	r1
     f8a:	0f 92       	push	r0
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	0f 92       	push	r0
     f90:	11 24       	eor	r1, r1
     f92:	2f 93       	push	r18
     f94:	3f 93       	push	r19
     f96:	4f 93       	push	r20
     f98:	5f 93       	push	r21
     f9a:	6f 93       	push	r22
     f9c:	7f 93       	push	r23
     f9e:	8f 93       	push	r24
     fa0:	9f 93       	push	r25
     fa2:	af 93       	push	r26
     fa4:	bf 93       	push	r27
     fa6:	ef 93       	push	r30
     fa8:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     faa:	19 df       	rcall	.-462    	; 0xdde <asm_break>
}

ISR(__vector_7, ISR_BLOCK)
{	/* TIMER 2 COMP-A */
	s_bad_interrupt();
}
     fac:	ff 91       	pop	r31
     fae:	ef 91       	pop	r30
     fb0:	bf 91       	pop	r27
     fb2:	af 91       	pop	r26
     fb4:	9f 91       	pop	r25
     fb6:	8f 91       	pop	r24
     fb8:	7f 91       	pop	r23
     fba:	6f 91       	pop	r22
     fbc:	5f 91       	pop	r21
     fbe:	4f 91       	pop	r20
     fc0:	3f 91       	pop	r19
     fc2:	2f 91       	pop	r18
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0f 90       	pop	r0
     fca:	1f 90       	pop	r1
     fcc:	18 95       	reti

00000fce <__vector_8>:

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
     fce:	1f 92       	push	r1
     fd0:	0f 92       	push	r0
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	0f 92       	push	r0
     fd6:	11 24       	eor	r1, r1
     fd8:	2f 93       	push	r18
     fda:	3f 93       	push	r19
     fdc:	4f 93       	push	r20
     fde:	5f 93       	push	r21
     fe0:	6f 93       	push	r22
     fe2:	7f 93       	push	r23
     fe4:	8f 93       	push	r24
     fe6:	9f 93       	push	r25
     fe8:	af 93       	push	r26
     fea:	bf 93       	push	r27
     fec:	ef 93       	push	r30
     fee:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
     ff0:	f6 de       	rcall	.-532    	; 0xdde <asm_break>
}

ISR(__vector_8, ISR_BLOCK)
{	/* TIMER 2 COMP-B */
	s_bad_interrupt();
}
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <__vector_9>:

ISR(__vector_9, ISR_BLOCK)
{	/* TIMER 2 OVF - Overflow */
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	8f 93       	push	r24
    1024:	9f 93       	push	r25
	if (g_status.isAnimationStopped) {
    1026:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <g_status>
    102a:	81 ff       	sbrs	r24, 1
    102c:	44 c0       	rjmp	.+136    	; 0x10b6 <__vector_9+0xa2>
		static uint8_t state_old = 0;
		static uint8_t state_ctr = 0;
		static uint8_t second_old = 0;
		uint8_t cur = PORTB & 0x3f;
    102e:	85 b1       	in	r24, 0x05	; 5
    1030:	8f 73       	andi	r24, 0x3F	; 63

		/* signaling the grade of deviation */
		g_audio_out_loudness = 0;
		if (g_showData.clkState_clk_state < 0xf) {
    1032:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <g_showData+0x14>
    1036:	9f 30       	cpi	r25, 0x0F	; 15
    1038:	60 f4       	brcc	.+24     	; 0x1052 <__vector_9+0x3e>
			cur |= _BV(PORTB6);  // LED = red
    103a:	80 64       	ori	r24, 0x40	; 64
			if (state_old != 0x02) {
    103c:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <state_old.2583>
    1040:	92 30       	cpi	r25, 0x02	; 2
    1042:	19 f0       	breq	.+6      	; 0x104a <__vector_9+0x36>
				state_ctr = 122;  // 1 sec
    1044:	9a e7       	ldi	r25, 0x7A	; 122
    1046:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <state_ctr.2584>
			}
			state_old = 0x02;
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <state_old.2583>
    1050:	24 c0       	rjmp	.+72     	; 0x109a <__vector_9+0x86>

		} else if ((g_showData.clkState_clk_state == 0xf) && (-4 < g_showData.ppb_int) && (g_showData.ppb_int < 4)) {
    1052:	9f 30       	cpi	r25, 0x0F	; 15
    1054:	c1 f4       	brne	.+48     	; 0x1086 <__vector_9+0x72>
    1056:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <g_showData+0x6>
    105a:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <g_showData+0x7>
    105e:	2d 5f       	subi	r18, 0xFD	; 253
    1060:	3f 4f       	sbci	r19, 0xFF	; 255
    1062:	27 30       	cpi	r18, 0x07	; 7
    1064:	31 05       	cpc	r19, r1
    1066:	78 f4       	brcc	.+30     	; 0x1086 <__vector_9+0x72>
			cur |= _BV(PORTB7);  // LED = green
    1068:	80 68       	ori	r24, 0x80	; 128
			state_old = 0x00;
    106a:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <state_old.2583>

			/* Acoustic phase tracker */
			if (g_showData.time_second != second_old) {
    106e:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <g_showData+0x19>
    1072:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <__data_end>
    1076:	92 17       	cp	r25, r18
    1078:	81 f0       	breq	.+32     	; 0x109a <__vector_9+0x86>
				second_old = g_showData.time_second;
    107a:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <__data_end>
				state_ctr = 6;
    107e:	96 e0       	ldi	r25, 0x06	; 6
    1080:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <state_ctr.2584>
    1084:	0a c0       	rjmp	.+20     	; 0x109a <__vector_9+0x86>
			}

		} else {
			if (!state_old) {
    1086:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <state_old.2583>
    108a:	91 11       	cpse	r25, r1
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <__vector_9+0x80>
				state_ctr = 30;  // 1/4 sec
    108e:	9e e1       	ldi	r25, 0x1E	; 30
    1090:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <state_ctr.2584>
			}
			state_old = 0x01;
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <state_old.2583>
		}

		if (state_ctr) {
    109a:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <state_ctr.2584>
    109e:	99 23       	and	r25, r25
    10a0:	39 f0       	breq	.+14     	; 0x10b0 <__vector_9+0x9c>
			--state_ctr;
    10a2:	91 50       	subi	r25, 0x01	; 1
    10a4:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <state_ctr.2584>
			g_audio_out_loudness = 9;  // max 9
    10a8:	99 e0       	ldi	r25, 0x09	; 9
    10aa:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <g_audio_out_loudness>
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <__vector_9+0xa0>
		} else {
			g_audio_out_loudness = 0;
    10b0:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <g_audio_out_loudness>
		}

		PORTB = cur;
    10b4:	85 b9       	out	0x05, r24	; 5
	}
}
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	3f 91       	pop	r19
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	0f 90       	pop	r0
    10c4:	1f 90       	pop	r1
    10c6:	18 95       	reti

000010c8 <__vector_10>:

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
    10c8:	1f 92       	push	r1
    10ca:	0f 92       	push	r0
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    10ea:	79 de       	rcall	.-782    	; 0xdde <asm_break>
}

ISR(__vector_10, ISR_BLOCK)
{	/* TIMER 1 CAPT */
	s_bad_interrupt();
}
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	bf 91       	pop	r27
    10f2:	af 91       	pop	r26
    10f4:	9f 91       	pop	r25
    10f6:	8f 91       	pop	r24
    10f8:	7f 91       	pop	r23
    10fa:	6f 91       	pop	r22
    10fc:	5f 91       	pop	r21
    10fe:	4f 91       	pop	r20
    1100:	3f 91       	pop	r19
    1102:	2f 91       	pop	r18
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <__vector_11>:

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	4f 93       	push	r20
    111e:	5f 93       	push	r21
    1120:	6f 93       	push	r22
    1122:	7f 93       	push	r23
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	af 93       	push	r26
    112a:	bf 93       	push	r27
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1130:	56 de       	rcall	.-852    	; 0xdde <asm_break>
}

ISR(__vector_11, ISR_BLOCK)
{	/* TIMER 1 COMP-A */
	s_bad_interrupt();
}
    1132:	ff 91       	pop	r31
    1134:	ef 91       	pop	r30
    1136:	bf 91       	pop	r27
    1138:	af 91       	pop	r26
    113a:	9f 91       	pop	r25
    113c:	8f 91       	pop	r24
    113e:	7f 91       	pop	r23
    1140:	6f 91       	pop	r22
    1142:	5f 91       	pop	r21
    1144:	4f 91       	pop	r20
    1146:	3f 91       	pop	r19
    1148:	2f 91       	pop	r18
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	0f 90       	pop	r0
    1150:	1f 90       	pop	r1
    1152:	18 95       	reti

00001154 <__vector_12>:

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
    1154:	1f 92       	push	r1
    1156:	0f 92       	push	r0
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	0f 92       	push	r0
    115c:	11 24       	eor	r1, r1
    115e:	2f 93       	push	r18
    1160:	3f 93       	push	r19
    1162:	4f 93       	push	r20
    1164:	5f 93       	push	r21
    1166:	6f 93       	push	r22
    1168:	7f 93       	push	r23
    116a:	8f 93       	push	r24
    116c:	9f 93       	push	r25
    116e:	af 93       	push	r26
    1170:	bf 93       	push	r27
    1172:	ef 93       	push	r30
    1174:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1176:	33 de       	rcall	.-922    	; 0xdde <asm_break>
}

ISR(__vector_12, ISR_BLOCK)
{	/* TIMER 1 COMP-B */
	s_bad_interrupt();
}
    1178:	ff 91       	pop	r31
    117a:	ef 91       	pop	r30
    117c:	bf 91       	pop	r27
    117e:	af 91       	pop	r26
    1180:	9f 91       	pop	r25
    1182:	8f 91       	pop	r24
    1184:	7f 91       	pop	r23
    1186:	6f 91       	pop	r22
    1188:	5f 91       	pop	r21
    118a:	4f 91       	pop	r20
    118c:	3f 91       	pop	r19
    118e:	2f 91       	pop	r18
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	0f 90       	pop	r0
    1196:	1f 90       	pop	r1
    1198:	18 95       	reti

0000119a <__vector_13>:

ISR(__vector_13, ISR_BLOCK)
{	/* TIMER 1 OVF - Overflow */
    119a:	1f 92       	push	r1
    119c:	0f 92       	push	r0
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	0f 92       	push	r0
    11a2:	11 24       	eor	r1, r1
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	4f 93       	push	r20
    11aa:	5f 93       	push	r21
    11ac:	6f 93       	push	r22
    11ae:	7f 93       	push	r23
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
	++g_timer_abs_msb;
    11b8:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <g_timer_abs_msb>
    11bc:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <g_timer_abs_msb+0x1>
    11c0:	a0 91 c2 03 	lds	r26, 0x03C2	; 0x8003c2 <g_timer_abs_msb+0x2>
    11c4:	b0 91 c3 03 	lds	r27, 0x03C3	; 0x8003c3 <g_timer_abs_msb+0x3>
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	a1 1d       	adc	r26, r1
    11cc:	b1 1d       	adc	r27, r1
    11ce:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <g_timer_abs_msb>
    11d2:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <g_timer_abs_msb+0x1>
    11d6:	a0 93 c2 03 	sts	0x03C2, r26	; 0x8003c2 <g_timer_abs_msb+0x2>
    11da:	b0 93 c3 03 	sts	0x03C3, r27	; 0x8003c3 <g_timer_abs_msb+0x3>

	if (g_status.isAnimationStopped && g_audio_out_loudness) {
    11de:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <g_status>
    11e2:	81 ff       	sbrs	r24, 1
    11e4:	59 c0       	rjmp	.+178    	; 0x1298 <__vector_13+0xfe>
    11e6:	40 91 b1 03 	lds	r20, 0x03B1	; 0x8003b1 <g_audio_out_loudness>
    11ea:	44 23       	and	r20, r20
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <__vector_13+0x56>
    11ee:	54 c0       	rjmp	.+168    	; 0x1298 <__vector_13+0xfe>
		int16_t l_audio_pwm_inc = 3691 - (g_showData.clkState_phase100 >> 4);  // (880 Hz / 15625 Hz) * 16384 Steps * 2
    11f0:	20 91 86 03 	lds	r18, 0x0386	; 0x800386 <g_showData+0x2>
    11f4:	30 91 87 03 	lds	r19, 0x0387	; 0x800387 <g_showData+0x3>
    11f8:	84 e0       	ldi	r24, 0x04	; 4
    11fa:	35 95       	asr	r19
    11fc:	27 95       	ror	r18
    11fe:	8a 95       	dec	r24
    1200:	e1 f7       	brne	.-8      	; 0x11fa <__vector_13+0x60>
    1202:	8b e6       	ldi	r24, 0x6B	; 107
    1204:	9e e0       	ldi	r25, 0x0E	; 14
    1206:	bc 01       	movw	r22, r24
    1208:	62 1b       	sub	r22, r18
    120a:	73 0b       	sbc	r23, r19

		/* Generate triangle signal */
		if (g_audio_pwm_ramp_dwn) {
    120c:	50 91 ae 03 	lds	r21, 0x03AE	; 0x8003ae <g_audio_pwm_ramp_dwn>
    1210:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <g_audio_pwm_accu>
    1214:	90 91 b0 03 	lds	r25, 0x03B0	; 0x8003b0 <g_audio_pwm_accu+0x1>
    1218:	55 23       	and	r21, r21
    121a:	b1 f0       	breq	.+44     	; 0x1248 <__vector_13+0xae>
			g_audio_pwm_accu -= l_audio_pwm_inc;
    121c:	86 1b       	sub	r24, r22
    121e:	97 0b       	sbc	r25, r23
    1220:	90 93 b0 03 	sts	0x03B0, r25	; 0x8003b0 <g_audio_pwm_accu+0x1>
    1224:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <g_audio_pwm_accu>
			if (g_audio_pwm_accu <= -16383) {
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	70 ec       	ldi	r23, 0xC0	; 192
    122c:	97 07       	cpc	r25, r23
    122e:	14 f5       	brge	.+68     	; 0x1274 <__vector_13+0xda>
				g_audio_pwm_ramp_dwn = false;
    1230:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <g_audio_pwm_ramp_dwn>
				int16_t residue = -g_audio_pwm_accu - 16383;
				g_audio_pwm_accu = -16383 + residue;
    1234:	22 e0       	ldi	r18, 0x02	; 2
    1236:	30 e8       	ldi	r19, 0x80	; 128
    1238:	b9 01       	movw	r22, r18
    123a:	68 1b       	sub	r22, r24
    123c:	79 0b       	sbc	r23, r25
    123e:	70 93 b0 03 	sts	0x03B0, r23	; 0x8003b0 <g_audio_pwm_accu+0x1>
    1242:	60 93 af 03 	sts	0x03AF, r22	; 0x8003af <g_audio_pwm_accu>
    1246:	16 c0       	rjmp	.+44     	; 0x1274 <__vector_13+0xda>
			}
		} else {
			g_audio_pwm_accu += l_audio_pwm_inc;
    1248:	86 0f       	add	r24, r22
    124a:	97 1f       	adc	r25, r23
    124c:	90 93 b0 03 	sts	0x03B0, r25	; 0x8003b0 <g_audio_pwm_accu+0x1>
    1250:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <g_audio_pwm_accu>
			if (g_audio_pwm_accu >= +16383) {
    1254:	8f 3f       	cpi	r24, 0xFF	; 255
    1256:	7f e3       	ldi	r23, 0x3F	; 63
    1258:	97 07       	cpc	r25, r23
    125a:	64 f0       	brlt	.+24     	; 0x1274 <__vector_13+0xda>
				g_audio_pwm_ramp_dwn = true;
    125c:	21 e0       	ldi	r18, 0x01	; 1
    125e:	20 93 ae 03 	sts	0x03AE, r18	; 0x8003ae <g_audio_pwm_ramp_dwn>
				int16_t residue = g_audio_pwm_accu - 16383;
				g_audio_pwm_accu = 16383 - residue;
    1262:	2e ef       	ldi	r18, 0xFE	; 254
    1264:	3f e7       	ldi	r19, 0x7F	; 127
    1266:	b9 01       	movw	r22, r18
    1268:	68 1b       	sub	r22, r24
    126a:	79 0b       	sbc	r23, r25
    126c:	70 93 b0 03 	sts	0x03B0, r23	; 0x8003b0 <g_audio_pwm_accu+0x1>
    1270:	60 93 af 03 	sts	0x03AF, r22	; 0x8003af <g_audio_pwm_accu>
			}
		}

		int16_t audio_out = 256 + (g_audio_pwm_accu >> (15 - g_audio_out_loudness));  // 6 + 9
    1274:	2f e0       	ldi	r18, 0x0F	; 15
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	24 1b       	sub	r18, r20
    127a:	31 09       	sbc	r19, r1
    127c:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <g_audio_pwm_accu>
    1280:	90 91 b0 03 	lds	r25, 0x03B0	; 0x8003b0 <g_audio_pwm_accu+0x1>
    1284:	02 c0       	rjmp	.+4      	; 0x128a <__vector_13+0xf0>
    1286:	95 95       	asr	r25
    1288:	87 95       	ror	r24
    128a:	2a 95       	dec	r18
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <__vector_13+0xec>
    128e:	93 95       	inc	r25
		OCR1AH = (uint8_t) (audio_out >> 8);					// 9 bit
    1290:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL = (uint8_t) (audio_out & 0xff);
    1294:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
}
    1298:	bf 91       	pop	r27
    129a:	af 91       	pop	r26
    129c:	9f 91       	pop	r25
    129e:	8f 91       	pop	r24
    12a0:	7f 91       	pop	r23
    12a2:	6f 91       	pop	r22
    12a4:	5f 91       	pop	r21
    12a6:	4f 91       	pop	r20
    12a8:	3f 91       	pop	r19
    12aa:	2f 91       	pop	r18
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	0f 90       	pop	r0
    12b2:	1f 90       	pop	r1
    12b4:	18 95       	reti

000012b6 <__vector_14>:

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
    12b6:	1f 92       	push	r1
    12b8:	0f 92       	push	r0
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	0f 92       	push	r0
    12be:	11 24       	eor	r1, r1
    12c0:	2f 93       	push	r18
    12c2:	3f 93       	push	r19
    12c4:	4f 93       	push	r20
    12c6:	5f 93       	push	r21
    12c8:	6f 93       	push	r22
    12ca:	7f 93       	push	r23
    12cc:	8f 93       	push	r24
    12ce:	9f 93       	push	r25
    12d0:	af 93       	push	r26
    12d2:	bf 93       	push	r27
    12d4:	ef 93       	push	r30
    12d6:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    12d8:	82 dd       	rcall	.-1276   	; 0xdde <asm_break>
}

ISR(__vector_14, ISR_BLOCK)
{	/* TIMER 0 COMP-A */
	s_bad_interrupt();
}
    12da:	ff 91       	pop	r31
    12dc:	ef 91       	pop	r30
    12de:	bf 91       	pop	r27
    12e0:	af 91       	pop	r26
    12e2:	9f 91       	pop	r25
    12e4:	8f 91       	pop	r24
    12e6:	7f 91       	pop	r23
    12e8:	6f 91       	pop	r22
    12ea:	5f 91       	pop	r21
    12ec:	4f 91       	pop	r20
    12ee:	3f 91       	pop	r19
    12f0:	2f 91       	pop	r18
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <__vector_15>:

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    131e:	5f dd       	rcall	.-1346   	; 0xdde <asm_break>
}

ISR(__vector_15, ISR_BLOCK)
{	/* TIMER 0 COMP-B */
	s_bad_interrupt();
}
    1320:	ff 91       	pop	r31
    1322:	ef 91       	pop	r30
    1324:	bf 91       	pop	r27
    1326:	af 91       	pop	r26
    1328:	9f 91       	pop	r25
    132a:	8f 91       	pop	r24
    132c:	7f 91       	pop	r23
    132e:	6f 91       	pop	r22
    1330:	5f 91       	pop	r21
    1332:	4f 91       	pop	r20
    1334:	3f 91       	pop	r19
    1336:	2f 91       	pop	r18
    1338:	0f 90       	pop	r0
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	0f 90       	pop	r0
    133e:	1f 90       	pop	r1
    1340:	18 95       	reti

00001342 <__vector_16>:

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
    1342:	1f 92       	push	r1
    1344:	0f 92       	push	r0
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	0f 92       	push	r0
    134a:	11 24       	eor	r1, r1
    134c:	2f 93       	push	r18
    134e:	3f 93       	push	r19
    1350:	4f 93       	push	r20
    1352:	5f 93       	push	r21
    1354:	6f 93       	push	r22
    1356:	7f 93       	push	r23
    1358:	8f 93       	push	r24
    135a:	9f 93       	push	r25
    135c:	af 93       	push	r26
    135e:	bf 93       	push	r27
    1360:	ef 93       	push	r30
    1362:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1364:	3c dd       	rcall	.-1416   	; 0xdde <asm_break>
}

ISR(__vector_16, ISR_BLOCK)
{	/* TIMER 0 OVF - Overflow */
	s_bad_interrupt();
}
    1366:	ff 91       	pop	r31
    1368:	ef 91       	pop	r30
    136a:	bf 91       	pop	r27
    136c:	af 91       	pop	r26
    136e:	9f 91       	pop	r25
    1370:	8f 91       	pop	r24
    1372:	7f 91       	pop	r23
    1374:	6f 91       	pop	r22
    1376:	5f 91       	pop	r21
    1378:	4f 91       	pop	r20
    137a:	3f 91       	pop	r19
    137c:	2f 91       	pop	r18
    137e:	0f 90       	pop	r0
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	0f 90       	pop	r0
    1384:	1f 90       	pop	r1
    1386:	18 95       	reti

00001388 <__vector_17>:

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
    1388:	1f 92       	push	r1
    138a:	0f 92       	push	r0
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	0f 92       	push	r0
    1390:	11 24       	eor	r1, r1
    1392:	2f 93       	push	r18
    1394:	3f 93       	push	r19
    1396:	4f 93       	push	r20
    1398:	5f 93       	push	r21
    139a:	6f 93       	push	r22
    139c:	7f 93       	push	r23
    139e:	8f 93       	push	r24
    13a0:	9f 93       	push	r25
    13a2:	af 93       	push	r26
    13a4:	bf 93       	push	r27
    13a6:	ef 93       	push	r30
    13a8:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    13aa:	19 dd       	rcall	.-1486   	; 0xdde <asm_break>
}

ISR(__vector_17, ISR_BLOCK)
{	/* SPI, STC - Serial Transfer Complete */
	s_bad_interrupt();
}
    13ac:	ff 91       	pop	r31
    13ae:	ef 91       	pop	r30
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	7f 91       	pop	r23
    13ba:	6f 91       	pop	r22
    13bc:	5f 91       	pop	r21
    13be:	4f 91       	pop	r20
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0
    13ca:	1f 90       	pop	r1
    13cc:	18 95       	reti

000013ce <__vector_18>:

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
    13ce:	1f 92       	push	r1
    13d0:	0f 92       	push	r0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	0f 92       	push	r0
    13d6:	11 24       	eor	r1, r1
    13d8:	2f 93       	push	r18
    13da:	3f 93       	push	r19
    13dc:	4f 93       	push	r20
    13de:	5f 93       	push	r21
    13e0:	6f 93       	push	r22
    13e2:	7f 93       	push	r23
    13e4:	8f 93       	push	r24
    13e6:	9f 93       	push	r25
    13e8:	af 93       	push	r26
    13ea:	bf 93       	push	r27
    13ec:	ef 93       	push	r30
    13ee:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    13f0:	f6 dc       	rcall	.-1556   	; 0xdde <asm_break>
}

ISR(__vector_18, ISR_BLOCK)
{	/* USART, RX - Complete */
	s_bad_interrupt();
}
    13f2:	ff 91       	pop	r31
    13f4:	ef 91       	pop	r30
    13f6:	bf 91       	pop	r27
    13f8:	af 91       	pop	r26
    13fa:	9f 91       	pop	r25
    13fc:	8f 91       	pop	r24
    13fe:	7f 91       	pop	r23
    1400:	6f 91       	pop	r22
    1402:	5f 91       	pop	r21
    1404:	4f 91       	pop	r20
    1406:	3f 91       	pop	r19
    1408:	2f 91       	pop	r18
    140a:	0f 90       	pop	r0
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	0f 90       	pop	r0
    1410:	1f 90       	pop	r1
    1412:	18 95       	reti

00001414 <__vector_19>:

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
    1414:	1f 92       	push	r1
    1416:	0f 92       	push	r0
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	0f 92       	push	r0
    141c:	11 24       	eor	r1, r1
    141e:	2f 93       	push	r18
    1420:	3f 93       	push	r19
    1422:	4f 93       	push	r20
    1424:	5f 93       	push	r21
    1426:	6f 93       	push	r22
    1428:	7f 93       	push	r23
    142a:	8f 93       	push	r24
    142c:	9f 93       	push	r25
    142e:	af 93       	push	r26
    1430:	bf 93       	push	r27
    1432:	ef 93       	push	r30
    1434:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    1436:	d3 dc       	rcall	.-1626   	; 0xdde <asm_break>
}

ISR(__vector_19, ISR_BLOCK)
{	/* USART, UDRE - Data Register Empty */
	s_bad_interrupt();
}
    1438:	ff 91       	pop	r31
    143a:	ef 91       	pop	r30
    143c:	bf 91       	pop	r27
    143e:	af 91       	pop	r26
    1440:	9f 91       	pop	r25
    1442:	8f 91       	pop	r24
    1444:	7f 91       	pop	r23
    1446:	6f 91       	pop	r22
    1448:	5f 91       	pop	r21
    144a:	4f 91       	pop	r20
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	0f 90       	pop	r0
    1456:	1f 90       	pop	r1
    1458:	18 95       	reti

0000145a <__vector_20>:

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
    145a:	1f 92       	push	r1
    145c:	0f 92       	push	r0
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	0f 92       	push	r0
    1462:	11 24       	eor	r1, r1
    1464:	2f 93       	push	r18
    1466:	3f 93       	push	r19
    1468:	4f 93       	push	r20
    146a:	5f 93       	push	r21
    146c:	6f 93       	push	r22
    146e:	7f 93       	push	r23
    1470:	8f 93       	push	r24
    1472:	9f 93       	push	r25
    1474:	af 93       	push	r26
    1476:	bf 93       	push	r27
    1478:	ef 93       	push	r30
    147a:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    147c:	b0 dc       	rcall	.-1696   	; 0xdde <asm_break>
}

ISR(__vector_20, ISR_BLOCK)
{	/* USART, TX - Complete */
	s_bad_interrupt();
}
    147e:	ff 91       	pop	r31
    1480:	ef 91       	pop	r30
    1482:	bf 91       	pop	r27
    1484:	af 91       	pop	r26
    1486:	9f 91       	pop	r25
    1488:	8f 91       	pop	r24
    148a:	7f 91       	pop	r23
    148c:	6f 91       	pop	r22
    148e:	5f 91       	pop	r21
    1490:	4f 91       	pop	r20
    1492:	3f 91       	pop	r19
    1494:	2f 91       	pop	r18
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <__vector_21__bottom>:
	__vector_21__bottom(reason, adc_val, adc_light_last, adc_temp_last);
}

/* do not static this function to avoid code inlining that would inherit many push operations in the critical section */
void __vector_21__bottom(uint8_t reason, uint16_t adc_val, uint16_t adc_light_last, uint16_t adc_temp_last)
{
    14a0:	8f 92       	push	r8
    14a2:	9f 92       	push	r9
    14a4:	af 92       	push	r10
    14a6:	bf 92       	push	r11
    14a8:	cf 92       	push	r12
    14aa:	df 92       	push	r13
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	6b 01       	movw	r12, r22
	/* Low pass filtering and enhancing the data depth */
	if (reason == ADC_STATE_VLD_LDR) {
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	e1 f5       	brne	.+120    	; 0x152e <__vector_21__bottom+0x8e>
		float calc = g_adc_light ?  0.998f * g_adc_light + 0.002f * adc_val : adc_val;			// load with initial value if none is set before
    14b6:	80 90 bb 03 	lds	r8, 0x03BB	; 0x8003bb <g_adc_light>
    14ba:	90 90 bc 03 	lds	r9, 0x03BC	; 0x8003bc <g_adc_light+0x1>
    14be:	a0 90 bd 03 	lds	r10, 0x03BD	; 0x8003bd <g_adc_light+0x2>
    14c2:	b0 90 be 03 	lds	r11, 0x03BE	; 0x8003be <g_adc_light+0x3>
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	a9 01       	movw	r20, r18
    14cc:	c5 01       	movw	r24, r10
    14ce:	b4 01       	movw	r22, r8
    14d0:	0e 94 56 19 	call	0x32ac	; 0x32ac <__cmpsf2>
    14d4:	e1 2c       	mov	r14, r1
    14d6:	f1 2c       	mov	r15, r1
    14d8:	88 23       	and	r24, r24
    14da:	d9 f0       	breq	.+54     	; 0x1512 <__vector_21__bottom+0x72>
    14dc:	2e ee       	ldi	r18, 0xEE	; 238
    14de:	3c e7       	ldi	r19, 0x7C	; 124
    14e0:	4f e7       	ldi	r20, 0x7F	; 127
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	c5 01       	movw	r24, r10
    14e6:	b4 01       	movw	r22, r8
    14e8:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__mulsf3>
    14ec:	4b 01       	movw	r8, r22
    14ee:	5c 01       	movw	r10, r24
    14f0:	c7 01       	movw	r24, r14
    14f2:	b6 01       	movw	r22, r12
    14f4:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__floatunsisf>
    14f8:	2f e6       	ldi	r18, 0x6F	; 111
    14fa:	32 e1       	ldi	r19, 0x12	; 18
    14fc:	43 e0       	ldi	r20, 0x03	; 3
    14fe:	5b e3       	ldi	r21, 0x3B	; 59
    1500:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__mulsf3>
    1504:	9b 01       	movw	r18, r22
    1506:	ac 01       	movw	r20, r24
    1508:	c5 01       	movw	r24, r10
    150a:	b4 01       	movw	r22, r8
    150c:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__addsf3>
    1510:	04 c0       	rjmp	.+8      	; 0x151a <__vector_21__bottom+0x7a>
    1512:	c7 01       	movw	r24, r14
    1514:	b6 01       	movw	r22, r12
    1516:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__floatunsisf>

		cpu_irq_disable();
    151a:	f8 94       	cli
		g_adc_light = calc;
    151c:	60 93 bb 03 	sts	0x03BB, r22	; 0x8003bb <g_adc_light>
    1520:	70 93 bc 03 	sts	0x03BC, r23	; 0x8003bc <g_adc_light+0x1>
    1524:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <g_adc_light+0x2>
    1528:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <g_adc_light+0x3>
    152c:	3d c0       	rjmp	.+122    	; 0x15a8 <__vector_21__bottom+0x108>

	} else if (reason == ADC_STATE_VLD_TEMP) {
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	d9 f5       	brne	.+118    	; 0x15a8 <__vector_21__bottom+0x108>
		float calc = g_adc_temp ?  0.9995f * g_adc_temp + 0.0005f * adc_val : adc_val;		// load with initial value if none is set before
    1532:	80 90 b7 03 	lds	r8, 0x03B7	; 0x8003b7 <g_adc_temp>
    1536:	90 90 b8 03 	lds	r9, 0x03B8	; 0x8003b8 <g_adc_temp+0x1>
    153a:	a0 90 b9 03 	lds	r10, 0x03B9	; 0x8003b9 <g_adc_temp+0x2>
    153e:	b0 90 ba 03 	lds	r11, 0x03BA	; 0x8003ba <g_adc_temp+0x3>
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	a9 01       	movw	r20, r18
    1548:	c5 01       	movw	r24, r10
    154a:	b4 01       	movw	r22, r8
    154c:	0e 94 56 19 	call	0x32ac	; 0x32ac <__cmpsf2>
    1550:	e1 2c       	mov	r14, r1
    1552:	f1 2c       	mov	r15, r1
    1554:	88 23       	and	r24, r24
    1556:	d9 f0       	breq	.+54     	; 0x158e <__vector_21__bottom+0xee>
    1558:	2b e3       	ldi	r18, 0x3B	; 59
    155a:	3f ed       	ldi	r19, 0xDF	; 223
    155c:	4f e7       	ldi	r20, 0x7F	; 127
    155e:	5f e3       	ldi	r21, 0x3F	; 63
    1560:	c5 01       	movw	r24, r10
    1562:	b4 01       	movw	r22, r8
    1564:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__mulsf3>
    1568:	4b 01       	movw	r8, r22
    156a:	5c 01       	movw	r10, r24
    156c:	c7 01       	movw	r24, r14
    156e:	b6 01       	movw	r22, r12
    1570:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__floatunsisf>
    1574:	2f e6       	ldi	r18, 0x6F	; 111
    1576:	32 e1       	ldi	r19, 0x12	; 18
    1578:	43 e0       	ldi	r20, 0x03	; 3
    157a:	5a e3       	ldi	r21, 0x3A	; 58
    157c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__mulsf3>
    1580:	9b 01       	movw	r18, r22
    1582:	ac 01       	movw	r20, r24
    1584:	c5 01       	movw	r24, r10
    1586:	b4 01       	movw	r22, r8
    1588:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__addsf3>
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <__vector_21__bottom+0xf6>
    158e:	c7 01       	movw	r24, r14
    1590:	b6 01       	movw	r22, r12
    1592:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__floatunsisf>

		cpu_irq_disable();
    1596:	f8 94       	cli
		g_adc_temp = calc;
    1598:	60 93 b7 03 	sts	0x03B7, r22	; 0x8003b7 <g_adc_temp>
    159c:	70 93 b8 03 	sts	0x03B8, r23	; 0x8003b8 <g_adc_temp+0x1>
    15a0:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <g_adc_temp+0x2>
    15a4:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <g_adc_temp+0x3>
	}
}
    15a8:	ff 90       	pop	r15
    15aa:	ef 90       	pop	r14
    15ac:	df 90       	pop	r13
    15ae:	cf 90       	pop	r12
    15b0:	bf 90       	pop	r11
    15b2:	af 90       	pop	r10
    15b4:	9f 90       	pop	r9
    15b6:	8f 90       	pop	r8
    15b8:	08 95       	ret

000015ba <__vector_21>:
{	/* USART, TX - Complete */
	s_bad_interrupt();
}

ISR(__vector_21, ISR_BLOCK)
{	/* ADC */
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	cf 92       	push	r12
    15c6:	df 92       	push	r13
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	1f 93       	push	r17
    15ce:	2f 93       	push	r18
    15d0:	3f 93       	push	r19
    15d2:	4f 93       	push	r20
    15d4:	5f 93       	push	r21
    15d6:	6f 93       	push	r22
    15d8:	7f 93       	push	r23
    15da:	8f 93       	push	r24
    15dc:	9f 93       	push	r25
    15de:	af 93       	push	r26
    15e0:	bf 93       	push	r27
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
	uint16_t adc_val;
	uint8_t  reason = g_adc_state;
    15ea:	10 91 bf 03 	lds	r17, 0x03BF	; 0x8003bf <g_adc_state>

	/* CLI part */
	adc_val  = ADCL;
    15ee:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	adc_val |= ADCH << 8;
    15f2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    15f6:	d0 e0       	ldi	r29, 0x00	; 0
    15f8:	d8 2b       	or	r29, r24

	//TIFR1 |= _BV(TOV1);							// Reset Timer1 overflow status bit (no ISR for TOV1 activated!)

	switch (g_adc_state) {
    15fa:	11 30       	cpi	r17, 0x01	; 1
    15fc:	59 f0       	breq	.+22     	; 0x1614 <__vector_21+0x5a>
    15fe:	30 f0       	brcs	.+12     	; 0x160c <__vector_21+0x52>
    1600:	12 30       	cpi	r17, 0x02	; 2
    1602:	79 f4       	brne	.+30     	; 0x1622 <__vector_21+0x68>
		g_adc_state = ADC_STATE_PRE_TEMP;
		break;

		case ADC_STATE_PRE_TEMP:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_TEMP;
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <g_adc_state>
		break;
    160a:	10 c0       	rjmp	.+32     	; 0x162c <__vector_21+0x72>
	//TIFR1 |= _BV(TOV1);							// Reset Timer1 overflow status bit (no ISR for TOV1 activated!)

	switch (g_adc_state) {
		case ADC_STATE_PRE_LDR:
		// drop one ADC value after switching MUX
		g_adc_state = ADC_STATE_VLD_LDR;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <g_adc_state>
		break;
    1612:	0c c0       	rjmp	.+24     	; 0x162c <__vector_21+0x72>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    1614:	88 ec       	ldi	r24, 0xC8	; 200
    1616:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

		case ADC_STATE_VLD_LDR:
		adc_set_admux(ADC_MUX_TEMPSENSE | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_TEMP;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <g_adc_state>
		break;
    1620:	05 c0       	rjmp	.+10     	; 0x162c <__vector_21+0x72>
    1622:	80 ec       	ldi	r24, 0xC0	; 192
    1624:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		case ADC_STATE_VLD_TEMP:
		// fall-through

		default:
		adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);
		g_adc_state = ADC_STATE_PRE_LDR;
    1628:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <g_adc_state>
	}

	uint16_t adc_light_last  = g_adc_light;
    162c:	60 91 bb 03 	lds	r22, 0x03BB	; 0x8003bb <g_adc_light>
    1630:	70 91 bc 03 	lds	r23, 0x03BC	; 0x8003bc <g_adc_light+0x1>
    1634:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <g_adc_light+0x2>
    1638:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <g_adc_light+0x3>
    163c:	0e 94 c7 19 	call	0x338e	; 0x338e <__fixunssfsi>
    1640:	6b 01       	movw	r12, r22
    1642:	7c 01       	movw	r14, r24
	uint16_t adc_temp_last = g_adc_temp;
    1644:	60 91 b7 03 	lds	r22, 0x03B7	; 0x8003b7 <g_adc_temp>
    1648:	70 91 b8 03 	lds	r23, 0x03B8	; 0x8003b8 <g_adc_temp+0x1>
    164c:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <g_adc_temp+0x2>
    1650:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <g_adc_temp+0x3>
    1654:	0e 94 c7 19 	call	0x338e	; 0x338e <__fixunssfsi>

	/* SEI part */
	cpu_irq_enable();
    1658:	78 94       	sei

	__vector_21__bottom(reason, adc_val, adc_light_last, adc_temp_last);
    165a:	9b 01       	movw	r18, r22
    165c:	a6 01       	movw	r20, r12
    165e:	be 01       	movw	r22, r28
    1660:	81 2f       	mov	r24, r17
    1662:	1e df       	rcall	.-452    	; 0x14a0 <__vector_21__bottom>
}
    1664:	ff 91       	pop	r31
    1666:	ef 91       	pop	r30
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	bf 91       	pop	r27
    166e:	af 91       	pop	r26
    1670:	9f 91       	pop	r25
    1672:	8f 91       	pop	r24
    1674:	7f 91       	pop	r23
    1676:	6f 91       	pop	r22
    1678:	5f 91       	pop	r21
    167a:	4f 91       	pop	r20
    167c:	3f 91       	pop	r19
    167e:	2f 91       	pop	r18
    1680:	1f 91       	pop	r17
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	df 90       	pop	r13
    1688:	cf 90       	pop	r12
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <__vector_22>:
		g_adc_temp = calc;
	}
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    16b6:	93 db       	rcall	.-2266   	; 0xdde <asm_break>
}

ISR(__vector_22, ISR_BLOCK)
{	/* EEREADY */
	s_bad_interrupt();
}
    16b8:	ff 91       	pop	r31
    16ba:	ef 91       	pop	r30
    16bc:	bf 91       	pop	r27
    16be:	af 91       	pop	r26
    16c0:	9f 91       	pop	r25
    16c2:	8f 91       	pop	r24
    16c4:	7f 91       	pop	r23
    16c6:	6f 91       	pop	r22
    16c8:	5f 91       	pop	r21
    16ca:	4f 91       	pop	r20
    16cc:	3f 91       	pop	r19
    16ce:	2f 91       	pop	r18
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	0f 90       	pop	r0
    16d6:	1f 90       	pop	r1
    16d8:	18 95       	reti

000016da <__vector_23>:

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
    16da:	1f 92       	push	r1
    16dc:	0f 92       	push	r0
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	0f 92       	push	r0
    16e2:	11 24       	eor	r1, r1
    16e4:	2f 93       	push	r18
    16e6:	3f 93       	push	r19
    16e8:	4f 93       	push	r20
    16ea:	5f 93       	push	r21
    16ec:	6f 93       	push	r22
    16ee:	7f 93       	push	r23
    16f0:	8f 93       	push	r24
    16f2:	9f 93       	push	r25
    16f4:	af 93       	push	r26
    16f6:	bf 93       	push	r27
    16f8:	ef 93       	push	r30
    16fa:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    16fc:	70 db       	rcall	.-2336   	; 0xdde <asm_break>
}

ISR(__vector_23, ISR_BLOCK)
{	/* ANALOG COMP */
	s_bad_interrupt();
}
    16fe:	ff 91       	pop	r31
    1700:	ef 91       	pop	r30
    1702:	bf 91       	pop	r27
    1704:	af 91       	pop	r26
    1706:	9f 91       	pop	r25
    1708:	8f 91       	pop	r24
    170a:	7f 91       	pop	r23
    170c:	6f 91       	pop	r22
    170e:	5f 91       	pop	r21
    1710:	4f 91       	pop	r20
    1712:	3f 91       	pop	r19
    1714:	2f 91       	pop	r18
    1716:	0f 90       	pop	r0
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	0f 90       	pop	r0
    171c:	1f 90       	pop	r1
    171e:	18 95       	reti

00001720 <__vector_24>:

ISR(__vector_24, ISR_BLOCK)
{	/* TWI */
    1720:	1f 92       	push	r1
    1722:	0f 92       	push	r0
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	0f 92       	push	r0
    1728:	11 24       	eor	r1, r1
    172a:	2f 93       	push	r18
    172c:	3f 93       	push	r19
    172e:	4f 93       	push	r20
    1730:	5f 93       	push	r21
    1732:	6f 93       	push	r22
    1734:	7f 93       	push	r23
    1736:	8f 93       	push	r24
    1738:	9f 93       	push	r25
    173a:	af 93       	push	r26
    173c:	bf 93       	push	r27
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	ef 93       	push	r30
    1744:	ff 93       	push	r31
	uint8_t tws = TWSR & (0b11111 << TWS3);
    1746:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	uint8_t twd = TWDR;
    174a:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	uint8_t twcr_cur = TWCR;
    174e:	cc eb       	ldi	r28, 0xBC	; 188
    1750:	d0 e0       	ldi	r29, 0x00	; 0
    1752:	48 81       	ld	r20, Y

	uint8_t twcr_new = __vector_24__bottom(tws, twd, twcr_cur);
    1754:	88 7f       	andi	r24, 0xF8	; 248
    1756:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__vector_24__bottom>
	TWCR = twcr_new | _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
    175a:	85 68       	ori	r24, 0x85	; 133
    175c:	88 83       	st	Y, r24
}
    175e:	ff 91       	pop	r31
    1760:	ef 91       	pop	r30
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	bf 91       	pop	r27
    1768:	af 91       	pop	r26
    176a:	9f 91       	pop	r25
    176c:	8f 91       	pop	r24
    176e:	7f 91       	pop	r23
    1770:	6f 91       	pop	r22
    1772:	5f 91       	pop	r21
    1774:	4f 91       	pop	r20
    1776:	3f 91       	pop	r19
    1778:	2f 91       	pop	r18
    177a:	0f 90       	pop	r0
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	0f 90       	pop	r0
    1780:	1f 90       	pop	r1
    1782:	18 95       	reti

00001784 <__vector_25>:

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
    1784:	1f 92       	push	r1
    1786:	0f 92       	push	r0
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	0f 92       	push	r0
    178c:	11 24       	eor	r1, r1
    178e:	2f 93       	push	r18
    1790:	3f 93       	push	r19
    1792:	4f 93       	push	r20
    1794:	5f 93       	push	r21
    1796:	6f 93       	push	r22
    1798:	7f 93       	push	r23
    179a:	8f 93       	push	r24
    179c:	9f 93       	push	r25
    179e:	af 93       	push	r26
    17a0:	bf 93       	push	r27
    17a2:	ef 93       	push	r30
    17a4:	ff 93       	push	r31

/* ISR routines */

static void s_bad_interrupt(void)
{
	asm_break();
    17a6:	1b db       	rcall	.-2506   	; 0xdde <asm_break>
}

ISR(__vector_25, ISR_BLOCK)
{	/* SPM READY - Store Program Memory Ready */
	s_bad_interrupt();
}
    17a8:	ff 91       	pop	r31
    17aa:	ef 91       	pop	r30
    17ac:	bf 91       	pop	r27
    17ae:	af 91       	pop	r26
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	7f 91       	pop	r23
    17b6:	6f 91       	pop	r22
    17b8:	5f 91       	pop	r21
    17ba:	4f 91       	pop	r20
    17bc:	3f 91       	pop	r19
    17be:	2f 91       	pop	r18
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	0f 90       	pop	r0
    17c6:	1f 90       	pop	r1
    17c8:	18 95       	reti

000017ca <cpu_irq_save>:


void lcd_enable(uint8_t on)
{
	if (!on) {
		lcd_bus_write_cmd(0b10101110);									// Disable DC[2] (Display)
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	1f 92       	push	r1
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	8f b7       	in	r24, 0x3f	; 63
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	f8 94       	cli
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	0f 90       	pop	r0
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <__portable_avr_delay_cycles>:
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <__portable_avr_delay_cycles+0xa>
    17e6:	61 50       	subi	r22, 0x01	; 1
    17e8:	71 09       	sbc	r23, r1
    17ea:	81 09       	sbc	r24, r1
    17ec:	91 09       	sbc	r25, r1
    17ee:	61 15       	cp	r22, r1
    17f0:	71 05       	cpc	r23, r1
    17f2:	81 05       	cpc	r24, r1
    17f4:	91 05       	cpc	r25, r1
    17f6:	b9 f7       	brne	.-18     	; 0x17e6 <__portable_avr_delay_cycles+0x2>
    17f8:	08 95       	ret

000017fa <lcd_bus_read_status>:
    17fa:	e7 df       	rcall	.-50     	; 0x17ca <cpu_irq_save>
    17fc:	98 2f       	mov	r25, r24
    17fe:	8f ef       	ldi	r24, 0xFF	; 255
    1800:	8b b9       	out	0x0b, r24	; 11
    1802:	1a b8       	out	0x0a, r1	; 10
    1804:	28 98       	cbi	0x05, 0	; 5
    1806:	2c 9a       	sbi	0x05, 4	; 5
    1808:	2d 9a       	sbi	0x05, 5	; 5
    180a:	2d 98       	cbi	0x05, 5	; 5
    180c:	89 b1       	in	r24, 0x09	; 9
    180e:	9f bf       	out	0x3f, r25	; 63
    1810:	08 95       	ret

00001812 <lcd_bus_write_cmd>:
    1812:	cf 93       	push	r28
    1814:	c8 2f       	mov	r28, r24
    1816:	d9 df       	rcall	.-78     	; 0x17ca <cpu_irq_save>
    1818:	cb b9       	out	0x0b, r28	; 11
    181a:	9f ef       	ldi	r25, 0xFF	; 255
    181c:	9a b9       	out	0x0a, r25	; 10
    181e:	28 98       	cbi	0x05, 0	; 5
    1820:	2c 98       	cbi	0x05, 4	; 5
    1822:	2d 9a       	sbi	0x05, 5	; 5
    1824:	2d 98       	cbi	0x05, 5	; 5
    1826:	8f bf       	out	0x3f, r24	; 63
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <lcd_enable.part.0>:
    182c:	8d e2       	ldi	r24, 0x2D	; 45
    182e:	f1 df       	rcall	.-30     	; 0x1812 <lcd_bus_write_cmd>
    1830:	84 e2       	ldi	r24, 0x24	; 36
    1832:	ef df       	rcall	.-34     	; 0x1812 <lcd_bus_write_cmd>
    1834:	8a ee       	ldi	r24, 0xEA	; 234
    1836:	ed df       	rcall	.-38     	; 0x1812 <lcd_bus_write_cmd>
    1838:	81 e8       	ldi	r24, 0x81	; 129
    183a:	eb df       	rcall	.-42     	; 0x1812 <lcd_bus_write_cmd>
    183c:	8c e9       	ldi	r24, 0x9C	; 156
    183e:	e9 df       	rcall	.-46     	; 0x1812 <lcd_bus_write_cmd>
    1840:	88 ec       	ldi	r24, 0xC8	; 200
    1842:	e7 df       	rcall	.-50     	; 0x1812 <lcd_bus_write_cmd>
    1844:	88 e8       	ldi	r24, 0x88	; 136
    1846:	e5 df       	rcall	.-54     	; 0x1812 <lcd_bus_write_cmd>
    1848:	80 e4       	ldi	r24, 0x40	; 64
    184a:	e3 df       	rcall	.-58     	; 0x1812 <lcd_bus_write_cmd>
    184c:	80 e9       	ldi	r24, 0x90	; 144
    184e:	e1 df       	rcall	.-62     	; 0x1812 <lcd_bus_write_cmd>
    1850:	80 eb       	ldi	r24, 0xB0	; 176
    1852:	df df       	rcall	.-66     	; 0x1812 <lcd_bus_write_cmd>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	dd df       	rcall	.-70     	; 0x1812 <lcd_bus_write_cmd>
    1858:	80 e1       	ldi	r24, 0x10	; 16
    185a:	db df       	rcall	.-74     	; 0x1812 <lcd_bus_write_cmd>
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <s_lcd_ram_read_nonvalid>
    1862:	8f ee       	ldi	r24, 0xEF	; 239
    1864:	d6 df       	rcall	.-84     	; 0x1812 <lcd_bus_write_cmd>
    1866:	8e ee       	ldi	r24, 0xEE	; 238
    1868:	d4 df       	rcall	.-88     	; 0x1812 <lcd_bus_write_cmd>
    186a:	84 ea       	ldi	r24, 0xA4	; 164
    186c:	d2 df       	rcall	.-92     	; 0x1812 <lcd_bus_write_cmd>
    186e:	86 ea       	ldi	r24, 0xA6	; 166
    1870:	d0 df       	rcall	.-96     	; 0x1812 <lcd_bus_write_cmd>
    1872:	8f ea       	ldi	r24, 0xAF	; 175
    1874:	ce cf       	rjmp	.-100    	; 0x1812 <lcd_bus_write_cmd>

00001876 <lcd_bus_write_ram>:
    1876:	cf 93       	push	r28
    1878:	c8 2f       	mov	r28, r24
    187a:	a7 df       	rcall	.-178    	; 0x17ca <cpu_irq_save>
    187c:	cb b9       	out	0x0b, r28	; 11
    187e:	9f ef       	ldi	r25, 0xFF	; 255
    1880:	9a b9       	out	0x0a, r25	; 10
    1882:	28 9a       	sbi	0x05, 0	; 5
    1884:	2c 98       	cbi	0x05, 4	; 5
    1886:	2d 9a       	sbi	0x05, 5	; 5
    1888:	2d 98       	cbi	0x05, 5	; 5
    188a:	8f bf       	out	0x3f, r24	; 63
    188c:	cf 91       	pop	r28
    188e:	08 95       	ret

00001890 <lcd_bus_read_ram>:
    1890:	9c df       	rcall	.-200    	; 0x17ca <cpu_irq_save>
    1892:	98 2f       	mov	r25, r24
    1894:	8f ef       	ldi	r24, 0xFF	; 255
    1896:	8b b9       	out	0x0b, r24	; 11
    1898:	1a b8       	out	0x0a, r1	; 10
    189a:	28 9a       	sbi	0x05, 0	; 5
    189c:	2c 9a       	sbi	0x05, 4	; 5
    189e:	2d 9a       	sbi	0x05, 5	; 5
    18a0:	2d 98       	cbi	0x05, 5	; 5
    18a2:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <s_lcd_ram_read_nonvalid>
    18a6:	88 23       	and	r24, r24
    18a8:	19 f0       	breq	.+6      	; 0x18b0 <lcd_bus_read_ram+0x20>
    18aa:	89 b1       	in	r24, 0x09	; 9
    18ac:	2d 9a       	sbi	0x05, 5	; 5
    18ae:	2d 98       	cbi	0x05, 5	; 5
    18b0:	89 b1       	in	r24, 0x09	; 9
    18b2:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <s_lcd_ram_read_nonvalid>
    18b6:	9f bf       	out	0x3f, r25	; 63
    18b8:	08 95       	ret

000018ba <lcd_page_set>:
}

void lcd_page_set(uint8_t page)
{
	if ((0 <= page && page) < (GFX_MONO_LCD_PAGES)) {
		lcd_bus_write_cmd(0b10110000 | page);					// Set Page Address
    18ba:	80 6b       	ori	r24, 0xB0	; 176
    18bc:	aa df       	rcall	.-172    	; 0x1812 <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <s_lcd_ram_read_nonvalid>
    18c4:	08 95       	ret

000018c6 <lcd_col_set>:
	}
}

void lcd_col_set(uint8_t col)
{
    18c6:	cf 93       	push	r28
	if ((0 <= col) && (col < GFX_MONO_LCD_WIDTH)) {
    18c8:	80 3f       	cpi	r24, 0xF0	; 240
    18ca:	58 f4       	brcc	.+22     	; 0x18e2 <lcd_col_set+0x1c>
    18cc:	c8 2f       	mov	r28, r24
		lcd_bus_write_cmd(0b00000000 | ( col       & 0x0f));	// Set Column Address LSB
    18ce:	8f 70       	andi	r24, 0x0F	; 15
    18d0:	a0 df       	rcall	.-192    	; 0x1812 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000 | ((col >> 4) & 0x0f));	// Set Column Address MSB
    18d2:	8c 2f       	mov	r24, r28
    18d4:	82 95       	swap	r24
    18d6:	8f 70       	andi	r24, 0x0F	; 15
    18d8:	80 61       	ori	r24, 0x10	; 16
    18da:	9b df       	rcall	.-202    	; 0x1812 <lcd_bus_write_cmd>

		s_lcd_ram_read_nonvalid = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <s_lcd_ram_read_nonvalid>
	}
}
    18e2:	cf 91       	pop	r28
    18e4:	08 95       	ret

000018e6 <lcd_cr>:

void lcd_cr(void)
{
	lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	94 df       	rcall	.-216    	; 0x1812 <lcd_bus_write_cmd>
	lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    18ea:	80 e1       	ldi	r24, 0x10	; 16
    18ec:	92 df       	rcall	.-220    	; 0x1812 <lcd_bus_write_cmd>

	s_lcd_ram_read_nonvalid = 1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <s_lcd_ram_read_nonvalid>
    18f4:	08 95       	ret

000018f6 <lcd_home>:
}

void lcd_home(void)
{
	lcd_bus_write_cmd(0b10110000);								// Set Page Address (0)
    18f6:	80 eb       	ldi	r24, 0xB0	; 176
    18f8:	8c df       	rcall	.-232    	; 0x1812 <lcd_bus_write_cmd>
	lcd_cr();
    18fa:	f5 cf       	rjmp	.-22     	; 0x18e6 <lcd_cr>

000018fc <lcd_cls>:
}

void lcd_cls(void)
{
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    1900:	c0 e0       	ldi	r28, 0x00	; 0
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
    1902:	8c 2f       	mov	r24, r28
    1904:	80 6b       	ori	r24, 0xB0	; 176
    1906:	85 df       	rcall	.-246    	; 0x1812 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	83 df       	rcall	.-250    	; 0x1812 <lcd_bus_write_cmd>
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)
    190c:	80 e1       	ldi	r24, 0x10	; 16
    190e:	81 df       	rcall	.-254    	; 0x1812 <lcd_bus_write_cmd>
    1910:	d0 ef       	ldi	r29, 0xF0	; 240

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
			lcd_bus_write_ram(0);
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	b0 df       	rcall	.-160    	; 0x1876 <lcd_bus_write_ram>
    1916:	d1 50       	subi	r29, 0x01	; 1
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
		lcd_bus_write_cmd(0b10110000 | page);						// Set Page Address
		lcd_bus_write_cmd(0b00000000);								// Set Column Address LSB (0)
		lcd_bus_write_cmd(0b00010000);								// Set Column Address MSB (0)

		for (uint8_t cnt = GFX_MONO_LCD_WIDTH; cnt; --cnt) {		// clear all columns of that page
    1918:	e1 f7       	brne	.-8      	; 0x1912 <lcd_cls+0x16>
}

void lcd_cls(void)
{
	/* Blank LCD RAM */
	for (uint8_t page = 0; page < GFX_MONO_LCD_PAGES; ++page) {
    191a:	cf 5f       	subi	r28, 0xFF	; 255
    191c:	c0 31       	cpi	r28, 0x10	; 16
    191e:	89 f7       	brne	.-30     	; 0x1902 <lcd_cls+0x6>
		}
	}	

	/* Set cursor to home position */
	lcd_home();
}
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
			lcd_bus_write_ram(0);
		}
	}	

	/* Set cursor to home position */
	lcd_home();
    1924:	e8 cf       	rjmp	.-48     	; 0x18f6 <lcd_home>

00001926 <lcd_show_new_data>:

	clk_state_old = clk_state;
}

uint8_t lcd_show_new_data(void)
{
    1926:	8f 92       	push	r8
    1928:	9f 92       	push	r9
    192a:	af 92       	push	r10
    192c:	bf 92       	push	r11
    192e:	cf 92       	push	r12
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
	static uint8_t idx = 1;

	/* First entries are showed first, when modified */

	irqflags_t flags = cpu_irq_save();
    193e:	45 df       	rcall	.-374    	; 0x17ca <cpu_irq_save>
    1940:	c8 2f       	mov	r28, r24
	cpu_irq_disable();
    1942:	f8 94       	cli

	/* Always */
	if (g_showData.newTime) {
    1944:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <g_showData>
    1948:	92 ff       	sbrs	r25, 2
    194a:	2e c0       	rjmp	.+92     	; 0x19a8 <lcd_show_new_data+0x82>
		g_showData.newTime = false;
    194c:	9b 7f       	andi	r25, 0xFB	; 251
    194e:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <g_showData>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "UTC     : %02d:%02d.%02d",
    1952:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <g_showData+0x19>
    1956:	1f 92       	push	r1
    1958:	8f 93       	push	r24
    195a:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <g_showData+0x18>
    195e:	1f 92       	push	r1
    1960:	8f 93       	push	r24
    1962:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <g_showData+0x17>
    1966:	1f 92       	push	r1
    1968:	8f 93       	push	r24
    196a:	8a e0       	ldi	r24, 0x0A	; 10
    196c:	91 e0       	ldi	r25, 0x01	; 1
    196e:	9f 93       	push	r25
    1970:	8f 93       	push	r24
    1972:	1f 92       	push	r1
    1974:	80 e3       	ldi	r24, 0x30	; 48
    1976:	8f 93       	push	r24
    1978:	85 e3       	ldi	r24, 0x35	; 53
    197a:	93 e0       	ldi	r25, 0x03	; 3
    197c:	9f 93       	push	r25
    197e:	8f 93       	push	r24
    1980:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
    1984:	cf bf       	out	0x3f, r28	; 63
		g_showData.time_hour, g_showData.time_minute, g_showData.time_second);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  2 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1986:	23 e0       	ldi	r18, 0x03	; 3
    1988:	31 e0       	ldi	r19, 0x01	; 1
    198a:	4d e1       	ldi	r20, 0x1D	; 29
    198c:	63 e0       	ldi	r22, 0x03	; 3
    198e:	85 e3       	ldi	r24, 0x35	; 53
    1990:	93 e0       	ldi	r25, 0x03	; 3
    1992:	f9 d9       	rcall	.-3086   	; 0xd86 <gfx_mono_draw_string>
		return 255;
    1994:	8d b7       	in	r24, 0x3d	; 61
    1996:	9e b7       	in	r25, 0x3e	; 62
    1998:	0c 96       	adiw	r24, 0x0c	; 12
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	9e bf       	out	0x3e, r25	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	8d bf       	out	0x3d, r24	; 61
    19a4:	8f ef       	ldi	r24, 0xFF	; 255
    19a6:	70 c3       	rjmp	.+1760   	; 0x2088 <lcd_show_new_data+0x762>
	}

	/* Always */
	if (g_showData.newDate) {
    19a8:	91 ff       	sbrs	r25, 1
    19aa:	30 c0       	rjmp	.+96     	; 0x1a0c <lcd_show_new_data+0xe6>
		g_showData.newDate = false;
    19ac:	9d 7f       	andi	r25, 0xFD	; 253
    19ae:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <g_showData>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Date    : %02d.%02d.%04d",
    19b2:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <g_showData+0x5>
    19b6:	8f 93       	push	r24
    19b8:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <g_showData+0x4>
    19bc:	8f 93       	push	r24
    19be:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <g_showData+0x15>
    19c2:	1f 92       	push	r1
    19c4:	8f 93       	push	r24
    19c6:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <g_showData+0x16>
    19ca:	1f 92       	push	r1
    19cc:	8f 93       	push	r24
    19ce:	83 e2       	ldi	r24, 0x23	; 35
    19d0:	91 e0       	ldi	r25, 0x01	; 1
    19d2:	9f 93       	push	r25
    19d4:	8f 93       	push	r24
    19d6:	1f 92       	push	r1
    19d8:	80 e3       	ldi	r24, 0x30	; 48
    19da:	8f 93       	push	r24
    19dc:	85 e3       	ldi	r24, 0x35	; 53
    19de:	93 e0       	ldi	r25, 0x03	; 3
    19e0:	9f 93       	push	r25
    19e2:	8f 93       	push	r24
    19e4:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
    19e8:	cf bf       	out	0x3f, r28	; 63
		g_showData.date_day, g_showData.date_month, g_showData.date_year);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  1 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    19ea:	23 e0       	ldi	r18, 0x03	; 3
    19ec:	31 e0       	ldi	r19, 0x01	; 1
    19ee:	44 e1       	ldi	r20, 0x14	; 20
    19f0:	63 e0       	ldi	r22, 0x03	; 3
    19f2:	85 e3       	ldi	r24, 0x35	; 53
    19f4:	93 e0       	ldi	r25, 0x03	; 3
    19f6:	c7 d9       	rcall	.-3186   	; 0xd86 <gfx_mono_draw_string>
		return 254;
    19f8:	8d b7       	in	r24, 0x3d	; 61
    19fa:	9e b7       	in	r25, 0x3e	; 62
    19fc:	0c 96       	adiw	r24, 0x0c	; 12
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	9e bf       	out	0x3e, r25	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	8d bf       	out	0x3d, r24	; 61
    1a08:	8e ef       	ldi	r24, 0xFE	; 254
    1a0a:	3e c3       	rjmp	.+1660   	; 0x2088 <lcd_show_new_data+0x762>
	}

	/* Always */
	if (g_showData.newClkState) {
    1a0c:	89 2f       	mov	r24, r25
    1a0e:	81 70       	andi	r24, 0x01	; 1
    1a10:	90 ff       	sbrs	r25, 0
    1a12:	12 c1       	rjmp	.+548    	; 0x1c38 <lcd_show_new_data+0x312>
		g_showData.newClkState = false;
    1a14:	9e 7f       	andi	r25, 0xFE	; 254
    1a16:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <g_showData>
    1a1a:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(flags);
		lcd_show_new_clk_state(g_showData.clkState_clk_state, g_showData.clkState_phase100);
    1a1c:	10 91 98 03 	lds	r17, 0x0398	; 0x800398 <g_showData+0x14>
    1a20:	60 91 86 03 	lds	r22, 0x0386	; 0x800386 <g_showData+0x2>
    1a24:	70 91 87 03 	lds	r23, 0x0387	; 0x800387 <g_showData+0x3>
    1a28:	60 3b       	cpi	r22, 0xB0	; 176
    1a2a:	99 eb       	ldi	r25, 0xB9	; 185
    1a2c:	79 07       	cpc	r23, r25
    1a2e:	14 f4       	brge	.+4      	; 0x1a34 <lcd_show_new_data+0x10e>
    1a30:	60 eb       	ldi	r22, 0xB0	; 176
    1a32:	79 eb       	ldi	r23, 0xB9	; 185
    1a34:	61 35       	cpi	r22, 0x51	; 81
    1a36:	86 e4       	ldi	r24, 0x46	; 70
    1a38:	78 07       	cpc	r23, r24
    1a3a:	14 f0       	brlt	.+4      	; 0x1a40 <lcd_show_new_data+0x11a>
    1a3c:	60 e5       	ldi	r22, 0x50	; 80
    1a3e:	76 e4       	ldi	r23, 0x46	; 70
		} else if (phase100 < -18000) {
		phase100 = -18000;
	}


	int diff = (int) ((float)maxdiff * (phase100 / -18000.0f));
    1a40:	07 2e       	mov	r0, r23
    1a42:	00 0c       	add	r0, r0
    1a44:	88 0b       	sbc	r24, r24
    1a46:	99 0b       	sbc	r25, r25
    1a48:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__floatsisf>
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 ea       	ldi	r19, 0xA0	; 160
    1a50:	4c e8       	ldi	r20, 0x8C	; 140
    1a52:	56 ec       	ldi	r21, 0xC6	; 198
    1a54:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <__divsf3>
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	48 e9       	ldi	r20, 0x98	; 152
    1a5e:	52 e4       	ldi	r21, 0x42	; 66
    1a60:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__mulsf3>
    1a64:	0e 94 c2 19 	call	0x3384	; 0x3384 <__fixsfsi>
    1a68:	4b 01       	movw	r8, r22
    1a6a:	5c 01       	movw	r10, r24
    1a6c:	7b 01       	movw	r14, r22
	int ldiff = diff < 0 ?  diff : 0;
	int rdiff = diff > 0 ?  diff : 0;

	uint8_t ox = mid_x;
	int dx = diff;
	if (dx < 0) {
    1a6e:	77 ff       	sbrs	r23, 7
    1a70:	07 c0       	rjmp	.+14     	; 0x1a80 <lcd_show_new_data+0x15a>
		ox += dx;
    1a72:	d6 e9       	ldi	r29, 0x96	; 150
    1a74:	d6 0f       	add	r29, r22
		dx = -dx;
    1a76:	cc 24       	eor	r12, r12
    1a78:	dd 24       	eor	r13, r13
    1a7a:	c6 1a       	sub	r12, r22
    1a7c:	d7 0a       	sbc	r13, r23
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <lcd_show_new_data+0x15e>
	int ldiff = diff < 0 ?  diff : 0;
	int rdiff = diff > 0 ?  diff : 0;

	uint8_t ox = mid_x;
	int dx = diff;
	if (dx < 0) {
    1a80:	6b 01       	movw	r12, r22

	int diff = (int) ((float)maxdiff * (phase100 / -18000.0f));
	int ldiff = diff < 0 ?  diff : 0;
	int rdiff = diff > 0 ?  diff : 0;

	uint8_t ox = mid_x;
    1a82:	d6 e9       	ldi	r29, 0x96	; 150
	if (dx < 0) {
		ox += dx;
		dx = -dx;
	}

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "ClkState: 0x%1X", clk_state);
    1a84:	1f 92       	push	r1
    1a86:	1f 93       	push	r17
    1a88:	8c e3       	ldi	r24, 0x3C	; 60
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	9f 93       	push	r25
    1a8e:	8f 93       	push	r24
    1a90:	1f 92       	push	r1
    1a92:	80 e3       	ldi	r24, 0x30	; 48
    1a94:	8f 93       	push	r24
    1a96:	85 e3       	ldi	r24, 0x35	; 53
    1a98:	93 e0       	ldi	r25, 0x03	; 3
    1a9a:	9f 93       	push	r25
    1a9c:	8f 93       	push	r24
    1a9e:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  0 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1aa2:	23 e0       	ldi	r18, 0x03	; 3
    1aa4:	31 e0       	ldi	r19, 0x01	; 1
    1aa6:	4b e0       	ldi	r20, 0x0B	; 11
    1aa8:	63 e0       	ldi	r22, 0x03	; 3
    1aaa:	85 e3       	ldi	r24, 0x35	; 53
    1aac:	93 e0       	ldi	r25, 0x03	; 3
    1aae:	6b d9       	rcall	.-3370   	; 0xd86 <gfx_mono_draw_string>
	gfx_mono_draw_string("Phase   :", LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1ab0:	23 e0       	ldi	r18, 0x03	; 3
    1ab2:	31 e0       	ldi	r19, 0x01	; 1
    1ab4:	47 e7       	ldi	r20, 0x77	; 119
    1ab6:	63 e0       	ldi	r22, 0x03	; 3
    1ab8:	8c e4       	ldi	r24, 0x4C	; 76
    1aba:	91 e0       	ldi	r25, 0x01	; 1
    1abc:	64 d9       	rcall	.-3384   	; 0xd86 <gfx_mono_draw_string>

	if ((clk_state_old != clk_state) || !dx) {
    1abe:	8d b7       	in	r24, 0x3d	; 61
    1ac0:	9e b7       	in	r25, 0x3e	; 62
    1ac2:	08 96       	adiw	r24, 0x08	; 8
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	9e bf       	out	0x3e, r25	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	8d bf       	out	0x3d, r24	; 61
    1ace:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <clk_state_old.3113>
    1ad2:	81 13       	cpse	r24, r17
    1ad4:	1f c0       	rjmp	.+62     	; 0x1b14 <lcd_show_new_data+0x1ee>
    1ad6:	c1 14       	cp	r12, r1
    1ad8:	d1 04       	cpc	r13, r1
    1ada:	e1 f0       	breq	.+56     	; 0x1b14 <lcd_show_new_data+0x1ee>
		phase100 = -18000;
	}


	int diff = (int) ((float)maxdiff * (phase100 / -18000.0f));
	int ldiff = diff < 0 ?  diff : 0;
    1adc:	98 2d       	mov	r25, r8
    1ade:	1e 14       	cp	r1, r14
    1ae0:	1f 04       	cpc	r1, r15
    1ae2:	0c f4       	brge	.+2      	; 0x1ae6 <lcd_show_new_data+0x1c0>
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
	int rdiff = diff > 0 ?  diff : 0;
    1ae6:	c8 2d       	mov	r28, r8
    1ae8:	f7 fc       	sbrc	r15, 7
    1aea:	c0 e0       	ldi	r28, 0x00	; 0
	if ((clk_state_old != clk_state) || !dx) {
		gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  (maxdiff << 1) +8, 5, GFX_PIXEL_CLR);
	}

	if (dx) {
		switch (clk_state) {
    1aec:	17 30       	cpi	r17, 0x07	; 7
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <lcd_show_new_data+0x1cc>
    1af0:	62 c0       	rjmp	.+196    	; 0x1bb6 <lcd_show_new_data+0x290>
    1af2:	68 f4       	brcc	.+26     	; 0x1b0e <lcd_show_new_data+0x1e8>
    1af4:	8f ef       	ldi	r24, 0xFF	; 255
    1af6:	81 0f       	add	r24, r17
    1af8:	83 30       	cpi	r24, 0x03	; 3
    1afa:	08 f0       	brcs	.+2      	; 0x1afe <lcd_show_new_data+0x1d8>
    1afc:	99 c0       	rjmp	.+306    	; 0x1c30 <lcd_show_new_data+0x30a>
			break;

			case 0x3:
			case 0x2:
			case 0x1:
			gfx_mono_generic_draw_filled_rect(mid_x - maxdiff, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,  maxdiff << 1, 1, GFX_PIXEL_SET);
    1afe:	01 e0       	ldi	r16, 0x01	; 1
    1b00:	21 e0       	ldi	r18, 0x01	; 1
    1b02:	48 e9       	ldi	r20, 0x98	; 152
    1b04:	6a e7       	ldi	r22, 0x7A	; 122
    1b06:	8a e4       	ldi	r24, 0x4A	; 74
    1b08:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_filled_rect>
    1b0c:	91 c0       	rjmp	.+290    	; 0x1c30 <lcd_show_new_data+0x30a>
	if ((clk_state_old != clk_state) || !dx) {
		gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  (maxdiff << 1) +8, 5, GFX_PIXEL_CLR);
	}

	if (dx) {
		switch (clk_state) {
    1b0e:	1f 30       	cpi	r17, 0x0F	; 15
    1b10:	99 f0       	breq	.+38     	; 0x1b38 <lcd_show_new_data+0x212>
    1b12:	8e c0       	rjmp	.+284    	; 0x1c30 <lcd_show_new_data+0x30a>
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "ClkState: 0x%1X", clk_state);
	gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  0 * LCD_SHOW_LINE_HEIGHT, &sysfont);
	gfx_mono_draw_string("Phase   :", LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT, &sysfont);

	if ((clk_state_old != clk_state) || !dx) {
		gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  (maxdiff << 1) +8, 5, GFX_PIXEL_CLR);
    1b14:	00 e0       	ldi	r16, 0x00	; 0
    1b16:	25 e0       	ldi	r18, 0x05	; 5
    1b18:	40 ea       	ldi	r20, 0xA0	; 160
    1b1a:	68 e7       	ldi	r22, 0x78	; 120
    1b1c:	86 e4       	ldi	r24, 0x46	; 70
    1b1e:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_filled_rect>
	}

	if (dx) {
    1b22:	c1 14       	cp	r12, r1
    1b24:	d1 04       	cpc	r13, r1
    1b26:	d1 f6       	brne	.-76     	; 0x1adc <lcd_show_new_data+0x1b6>
			gfx_mono_generic_draw_filled_rect(mid_x - maxdiff, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,  maxdiff << 1, 1, GFX_PIXEL_SET);
			break;
		}

	} else {
		gfx_mono_generic_draw_line( mid_x, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,
    1b28:	01 e0       	ldi	r16, 0x01	; 1
    1b2a:	2c e7       	ldi	r18, 0x7C	; 124
    1b2c:	46 e9       	ldi	r20, 0x96	; 150
    1b2e:	68 e7       	ldi	r22, 0x78	; 120
    1b30:	86 e9       	ldi	r24, 0x96	; 150
    1b32:	0e 94 dd 03 	call	0x7ba	; 0x7ba <gfx_mono_generic_draw_line>
    1b36:	7c c0       	rjmp	.+248    	; 0x1c30 <lcd_show_new_data+0x30a>
	}

	if (dx) {
		switch (clk_state) {
			case 0xf:
			gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  maxdiff + ldiff +4, 5, GFX_PIXEL_CLR);
    1b38:	40 e5       	ldi	r20, 0x50	; 80
    1b3a:	49 0f       	add	r20, r25
    1b3c:	00 e0       	ldi	r16, 0x00	; 0
    1b3e:	25 e0       	ldi	r18, 0x05	; 5
    1b40:	68 e7       	ldi	r22, 0x78	; 120
    1b42:	86 e4       	ldi	r24, 0x46	; 70
    1b44:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_filled_rect>
			if (diff < 0) {
    1b48:	f7 fe       	sbrs	r15, 7
    1b4a:	10 c0       	rjmp	.+32     	; 0x1b6c <lcd_show_new_data+0x246>
				gfx_mono_generic_draw_line(ox - 4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1b4c:	01 e0       	ldi	r16, 0x01	; 1
    1b4e:	28 e7       	ldi	r18, 0x78	; 120
    1b50:	4d 2f       	mov	r20, r29
    1b52:	6a e7       	ldi	r22, 0x7A	; 122
    1b54:	9c ef       	ldi	r25, 0xFC	; 252
    1b56:	b9 2e       	mov	r11, r25
    1b58:	bd 0e       	add	r11, r29
    1b5a:	8b 2d       	mov	r24, r11
    1b5c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <gfx_mono_generic_draw_line>
										   ox,     LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,
										   GFX_PIXEL_SET);
				gfx_mono_generic_draw_line(ox - 4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1b60:	2c e7       	ldi	r18, 0x7C	; 124
    1b62:	4d 2f       	mov	r20, r29
    1b64:	6a e7       	ldi	r22, 0x7A	; 122
    1b66:	8b 2d       	mov	r24, r11
    1b68:	0e 94 dd 03 	call	0x7ba	; 0x7ba <gfx_mono_generic_draw_line>
										   ox,     LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 5,
										   GFX_PIXEL_SET);
			}
			gfx_mono_generic_draw_filled_rect(ox, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1, dx, 5, GFX_PIXEL_SET);
    1b6c:	01 e0       	ldi	r16, 0x01	; 1
    1b6e:	25 e0       	ldi	r18, 0x05	; 5
    1b70:	4c 2d       	mov	r20, r12
    1b72:	68 e7       	ldi	r22, 0x78	; 120
    1b74:	8d 2f       	mov	r24, r29
    1b76:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_filled_rect>
			gfx_mono_generic_draw_filled_rect(mid_x + rdiff, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,  maxdiff - rdiff +4, 5, GFX_PIXEL_CLR);
    1b7a:	40 e5       	ldi	r20, 0x50	; 80
    1b7c:	4c 1b       	sub	r20, r28
    1b7e:	00 e0       	ldi	r16, 0x00	; 0
    1b80:	25 e0       	ldi	r18, 0x05	; 5
    1b82:	68 e7       	ldi	r22, 0x78	; 120
    1b84:	86 e9       	ldi	r24, 0x96	; 150
    1b86:	8c 0f       	add	r24, r28
    1b88:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_filled_rect>
			if (diff > 0) {
    1b8c:	1e 14       	cp	r1, r14
    1b8e:	1f 04       	cpc	r1, r15
    1b90:	0c f0       	brlt	.+2      	; 0x1b94 <lcd_show_new_data+0x26e>
    1b92:	4e c0       	rjmp	.+156    	; 0x1c30 <lcd_show_new_data+0x30a>
				gfx_mono_generic_draw_line(mid_x + rdiff + 3, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1b94:	d5 e9       	ldi	r29, 0x95	; 149
    1b96:	dc 0f       	add	r29, r28
    1b98:	c7 56       	subi	r28, 0x67	; 103
    1b9a:	01 e0       	ldi	r16, 0x01	; 1
    1b9c:	28 e7       	ldi	r18, 0x78	; 120
    1b9e:	4d 2f       	mov	r20, r29
    1ba0:	6a e7       	ldi	r22, 0x7A	; 122
    1ba2:	8c 2f       	mov	r24, r28
    1ba4:	0e 94 dd 03 	call	0x7ba	; 0x7ba <gfx_mono_generic_draw_line>
										   mid_x + rdiff - 1, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,
										   GFX_PIXEL_SET);
				gfx_mono_generic_draw_line(mid_x + rdiff + 3, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1ba8:	2c e7       	ldi	r18, 0x7C	; 124
    1baa:	4d 2f       	mov	r20, r29
    1bac:	6a e7       	ldi	r22, 0x7A	; 122
    1bae:	8c 2f       	mov	r24, r28
    1bb0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <gfx_mono_generic_draw_line>
    1bb4:	3d c0       	rjmp	.+122    	; 0x1c30 <lcd_show_new_data+0x30a>
										   GFX_PIXEL_SET);
			}
			break;

			case 0x7:
			gfx_mono_generic_draw_filled_rect(mid_x - maxdiff -4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,  maxdiff + ldiff +4, 3, GFX_PIXEL_CLR);
    1bb6:	40 e5       	ldi	r20, 0x50	; 80
    1bb8:	49 0f       	add	r20, r25
    1bba:	00 e0       	ldi	r16, 0x00	; 0
    1bbc:	23 e0       	ldi	r18, 0x03	; 3
    1bbe:	69 e7       	ldi	r22, 0x79	; 121
    1bc0:	86 e4       	ldi	r24, 0x46	; 70
    1bc2:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_filled_rect>
			if (diff < 0) {
    1bc6:	f7 fe       	sbrs	r15, 7
    1bc8:	10 c0       	rjmp	.+32     	; 0x1bea <lcd_show_new_data+0x2c4>
				gfx_mono_generic_draw_line(ox - 4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1bca:	01 e0       	ldi	r16, 0x01	; 1
    1bcc:	29 e7       	ldi	r18, 0x79	; 121
    1bce:	4d 2f       	mov	r20, r29
    1bd0:	6a e7       	ldi	r22, 0x7A	; 122
    1bd2:	8c ef       	ldi	r24, 0xFC	; 252
    1bd4:	b8 2e       	mov	r11, r24
    1bd6:	bd 0e       	add	r11, r29
    1bd8:	8b 2d       	mov	r24, r11
    1bda:	0e 94 dd 03 	call	0x7ba	; 0x7ba <gfx_mono_generic_draw_line>
										   ox,     LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,
										   GFX_PIXEL_SET);
				gfx_mono_generic_draw_line(ox - 4, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1bde:	2b e7       	ldi	r18, 0x7B	; 123
    1be0:	4d 2f       	mov	r20, r29
    1be2:	6a e7       	ldi	r22, 0x7A	; 122
    1be4:	8b 2d       	mov	r24, r11
    1be6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <gfx_mono_generic_draw_line>
										   ox,     LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 4,
										   GFX_PIXEL_SET);
			}
			gfx_mono_generic_draw_filled_rect(ox, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,  dx, 3, GFX_PIXEL_SET);
    1bea:	01 e0       	ldi	r16, 0x01	; 1
    1bec:	23 e0       	ldi	r18, 0x03	; 3
    1bee:	4c 2d       	mov	r20, r12
    1bf0:	69 e7       	ldi	r22, 0x79	; 121
    1bf2:	8d 2f       	mov	r24, r29
    1bf4:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_filled_rect>
			gfx_mono_generic_draw_filled_rect(mid_x + rdiff, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,  maxdiff - rdiff +4, 3, GFX_PIXEL_CLR);
    1bf8:	40 e5       	ldi	r20, 0x50	; 80
    1bfa:	4c 1b       	sub	r20, r28
    1bfc:	00 e0       	ldi	r16, 0x00	; 0
    1bfe:	23 e0       	ldi	r18, 0x03	; 3
    1c00:	69 e7       	ldi	r22, 0x79	; 121
    1c02:	86 e9       	ldi	r24, 0x96	; 150
    1c04:	8c 0f       	add	r24, r28
    1c06:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_filled_rect>
			if (diff > 0) {
    1c0a:	1e 14       	cp	r1, r14
    1c0c:	1f 04       	cpc	r1, r15
    1c0e:	84 f4       	brge	.+32     	; 0x1c30 <lcd_show_new_data+0x30a>
				gfx_mono_generic_draw_line(mid_x + rdiff + 3, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1c10:	d5 e9       	ldi	r29, 0x95	; 149
    1c12:	dc 0f       	add	r29, r28
    1c14:	c7 56       	subi	r28, 0x67	; 103
    1c16:	01 e0       	ldi	r16, 0x01	; 1
    1c18:	29 e7       	ldi	r18, 0x79	; 121
    1c1a:	4d 2f       	mov	r20, r29
    1c1c:	6a e7       	ldi	r22, 0x7A	; 122
    1c1e:	8c 2f       	mov	r24, r28
    1c20:	0e 94 dd 03 	call	0x7ba	; 0x7ba <gfx_mono_generic_draw_line>
										   mid_x + rdiff - 1, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 2,
										   GFX_PIXEL_SET);
				gfx_mono_generic_draw_line(mid_x + rdiff + 3, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 3,
    1c24:	2b e7       	ldi	r18, 0x7B	; 123
    1c26:	4d 2f       	mov	r20, r29
    1c28:	6a e7       	ldi	r22, 0x7A	; 122
    1c2a:	8c 2f       	mov	r24, r28
    1c2c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <gfx_mono_generic_draw_line>
		gfx_mono_generic_draw_line( mid_x, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 1,
									mid_x, LCD_SHOW_LINE_TOP + 12 * LCD_SHOW_LINE_HEIGHT + 5,
									GFX_PIXEL_SET);
	}

	clk_state_old = clk_state;
    1c30:	10 93 af 02 	sts	0x02AF, r17	; 0x8002af <clk_state_old.3113>
	/* Always */
	if (g_showData.newClkState) {
		g_showData.newClkState = false;
		cpu_irq_restore(flags);
		lcd_show_new_clk_state(g_showData.clkState_clk_state, g_showData.clkState_phase100);
		return 253;
    1c34:	8d ef       	ldi	r24, 0xFD	; 253
    1c36:	28 c2       	rjmp	.+1104   	; 0x2088 <lcd_show_new_data+0x762>
	}


	/* Slot 1 */
	if (g_showData.newSatUse && (idx <= 1)) {
    1c38:	96 ff       	sbrs	r25, 6
    1c3a:	35 c0       	rjmp	.+106    	; 0x1ca6 <lcd_show_new_data+0x380>
    1c3c:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3128>
    1c40:	22 30       	cpi	r18, 0x02	; 2
    1c42:	88 f5       	brcc	.+98     	; 0x1ca6 <lcd_show_new_data+0x380>
		g_showData.newSatUse = false;
    1c44:	9f 7b       	andi	r25, 0xBF	; 191
    1c46:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <g_showData>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "SatUse  : West=%02d East=%02d Used=%02d sats",
    1c4a:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <g_showData+0x1f>
    1c4e:	1f 92       	push	r1
    1c50:	8f 93       	push	r24
    1c52:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <g_showData+0x1e>
    1c56:	1f 92       	push	r1
    1c58:	8f 93       	push	r24
    1c5a:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <g_showData+0x1d>
    1c5e:	1f 92       	push	r1
    1c60:	8f 93       	push	r24
    1c62:	86 e5       	ldi	r24, 0x56	; 86
    1c64:	91 e0       	ldi	r25, 0x01	; 1
    1c66:	9f 93       	push	r25
    1c68:	8f 93       	push	r24
    1c6a:	1f 92       	push	r1
    1c6c:	80 e3       	ldi	r24, 0x30	; 48
    1c6e:	8f 93       	push	r24
    1c70:	85 e3       	ldi	r24, 0x35	; 53
    1c72:	93 e0       	ldi	r25, 0x03	; 3
    1c74:	9f 93       	push	r25
    1c76:	8f 93       	push	r24
    1c78:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
    1c7c:	cf bf       	out	0x3f, r28	; 63
		g_showData.satUse_west, g_showData.satUse_east, g_showData.satUse_used);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  6 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1c7e:	23 e0       	ldi	r18, 0x03	; 3
    1c80:	31 e0       	ldi	r19, 0x01	; 1
    1c82:	41 e4       	ldi	r20, 0x41	; 65
    1c84:	63 e0       	ldi	r22, 0x03	; 3
    1c86:	85 e3       	ldi	r24, 0x35	; 53
    1c88:	93 e0       	ldi	r25, 0x03	; 3
    1c8a:	7d d8       	rcall	.-3846   	; 0xd86 <gfx_mono_draw_string>
		idx = 2;
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3128>
		return 1;
    1c92:	8d b7       	in	r24, 0x3d	; 61
    1c94:	9e b7       	in	r25, 0x3e	; 62
    1c96:	0c 96       	adiw	r24, 0x0c	; 12
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	9e bf       	out	0x3e, r25	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	8d bf       	out	0x3d, r24	; 61
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	f1 c1       	rjmp	.+994    	; 0x2088 <lcd_show_new_data+0x762>
	}

	/* Slot 2 */
	if (g_showData.newSatDop && (idx <= 2)) {
    1ca6:	97 ff       	sbrs	r25, 7
    1ca8:	46 c0       	rjmp	.+140    	; 0x1d36 <lcd_show_new_data+0x410>
    1caa:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3128>
    1cae:	23 30       	cpi	r18, 0x03	; 3
    1cb0:	08 f0       	brcs	.+2      	; 0x1cb4 <lcd_show_new_data+0x38e>
    1cb2:	41 c0       	rjmp	.+130    	; 0x1d36 <lcd_show_new_data+0x410>
		g_showData.newSatDop = false;
    1cb4:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <g_showData>
    1cb8:	8f 77       	andi	r24, 0x7F	; 127
    1cba:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <g_showData>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat DOP : %03d.%02d",
		(int) (g_showData.satDop_dop100 / 100.0f), g_showData.satDop_dop100 % 100);
    1cbe:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <g_showData+0xc>
    1cc2:	30 91 91 03 	lds	r19, 0x0391	; 0x800391 <g_showData+0xd>
	}

	/* Slot 2 */
	if (g_showData.newSatDop && (idx <= 2)) {
		g_showData.newSatDop = false;
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat DOP : %03d.%02d",
    1cc6:	c9 01       	movw	r24, r18
    1cc8:	64 e6       	ldi	r22, 0x64	; 100
    1cca:	70 e0       	ldi	r23, 0x00	; 0
    1ccc:	0e 94 18 1b 	call	0x3630	; 0x3630 <__udivmodhi4>
    1cd0:	9f 93       	push	r25
    1cd2:	8f 93       	push	r24
		(int) (g_showData.satDop_dop100 / 100.0f), g_showData.satDop_dop100 % 100);
    1cd4:	b9 01       	movw	r22, r18
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__floatunsisf>
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	48 ec       	ldi	r20, 0xC8	; 200
    1ce4:	52 e4       	ldi	r21, 0x42	; 66
    1ce6:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <__divsf3>
	}

	/* Slot 2 */
	if (g_showData.newSatDop && (idx <= 2)) {
		g_showData.newSatDop = false;
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat DOP : %03d.%02d",
    1cea:	0e 94 c2 19 	call	0x3384	; 0x3384 <__fixsfsi>
    1cee:	7f 93       	push	r23
    1cf0:	6f 93       	push	r22
    1cf2:	83 e8       	ldi	r24, 0x83	; 131
    1cf4:	91 e0       	ldi	r25, 0x01	; 1
    1cf6:	9f 93       	push	r25
    1cf8:	8f 93       	push	r24
    1cfa:	1f 92       	push	r1
    1cfc:	80 e3       	ldi	r24, 0x30	; 48
    1cfe:	8f 93       	push	r24
    1d00:	85 e3       	ldi	r24, 0x35	; 53
    1d02:	93 e0       	ldi	r25, 0x03	; 3
    1d04:	9f 93       	push	r25
    1d06:	8f 93       	push	r24
    1d08:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
    1d0c:	cf bf       	out	0x3f, r28	; 63
		(int) (g_showData.satDop_dop100 / 100.0f), g_showData.satDop_dop100 % 100);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  7 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1d0e:	23 e0       	ldi	r18, 0x03	; 3
    1d10:	31 e0       	ldi	r19, 0x01	; 1
    1d12:	4a e4       	ldi	r20, 0x4A	; 74
    1d14:	63 e0       	ldi	r22, 0x03	; 3
    1d16:	85 e3       	ldi	r24, 0x35	; 53
    1d18:	93 e0       	ldi	r25, 0x03	; 3
    1d1a:	35 d8       	rcall	.-3990   	; 0xd86 <gfx_mono_draw_string>
		idx = 3;
    1d1c:	83 e0       	ldi	r24, 0x03	; 3
    1d1e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3128>
		return 2;
    1d22:	8d b7       	in	r24, 0x3d	; 61
    1d24:	9e b7       	in	r25, 0x3e	; 62
    1d26:	0a 96       	adiw	r24, 0x0a	; 10
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	9e bf       	out	0x3e, r25	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	8d bf       	out	0x3d, r24	; 61
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	a9 c1       	rjmp	.+850    	; 0x2088 <lcd_show_new_data+0x762>
	}

	/* Slot 3 */
	if (g_showData.newPosState && (idx <= 3)) {
    1d36:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <g_showData+0x1>
    1d3a:	20 ff       	sbrs	r18, 0
    1d3c:	31 c0       	rjmp	.+98     	; 0x1da0 <lcd_show_new_data+0x47a>
    1d3e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3128>
    1d42:	34 30       	cpi	r19, 0x04	; 4
    1d44:	68 f5       	brcc	.+90     	; 0x1da0 <lcd_show_new_data+0x47a>
		g_showData.newPosState = false;
    1d46:	2e 7f       	andi	r18, 0xFE	; 254
    1d48:	20 93 85 03 	sts	0x0385, r18	; 0x800385 <g_showData+0x1>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "SatState: FI=%1d M2=%1d",
    1d4c:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <g_showData+0x21>
    1d50:	1f 92       	push	r1
    1d52:	8f 93       	push	r24
    1d54:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <g_showData+0x20>
    1d58:	1f 92       	push	r1
    1d5a:	8f 93       	push	r24
    1d5c:	87 e9       	ldi	r24, 0x97	; 151
    1d5e:	91 e0       	ldi	r25, 0x01	; 1
    1d60:	9f 93       	push	r25
    1d62:	8f 93       	push	r24
    1d64:	1f 92       	push	r1
    1d66:	80 e3       	ldi	r24, 0x30	; 48
    1d68:	8f 93       	push	r24
    1d6a:	85 e3       	ldi	r24, 0x35	; 53
    1d6c:	93 e0       	ldi	r25, 0x03	; 3
    1d6e:	9f 93       	push	r25
    1d70:	8f 93       	push	r24
    1d72:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
    1d76:	cf bf       	out	0x3f, r28	; 63
		g_showData.posState_fi, g_showData.posState_m2);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  8 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1d78:	23 e0       	ldi	r18, 0x03	; 3
    1d7a:	31 e0       	ldi	r19, 0x01	; 1
    1d7c:	43 e5       	ldi	r20, 0x53	; 83
    1d7e:	63 e0       	ldi	r22, 0x03	; 3
    1d80:	85 e3       	ldi	r24, 0x35	; 53
    1d82:	93 e0       	ldi	r25, 0x03	; 3
    1d84:	00 d8       	rcall	.-4096   	; 0xd86 <gfx_mono_draw_string>
		idx = 4;
    1d86:	84 e0       	ldi	r24, 0x04	; 4
    1d88:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3128>
		return 3;
    1d8c:	8d b7       	in	r24, 0x3d	; 61
    1d8e:	9e b7       	in	r25, 0x3e	; 62
    1d90:	0a 96       	adiw	r24, 0x0a	; 10
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	9e bf       	out	0x3e, r25	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	8d bf       	out	0x3d, r24	; 61
    1d9c:	83 e0       	ldi	r24, 0x03	; 3
    1d9e:	74 c1       	rjmp	.+744    	; 0x2088 <lcd_show_new_data+0x762>
	}

	/* Slot 4 */
	if (g_showData.newPosLat && (idx <= 4)) {
    1da0:	21 ff       	sbrs	r18, 1
    1da2:	3e c0       	rjmp	.+124    	; 0x1e20 <lcd_show_new_data+0x4fa>
    1da4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3128>
    1da8:	35 30       	cpi	r19, 0x05	; 5
    1daa:	d0 f5       	brcc	.+116    	; 0x1e20 <lcd_show_new_data+0x4fa>
		g_showData.newPosLat = false;
    1dac:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <g_showData+0x1>
    1db0:	8d 7f       	andi	r24, 0xFD	; 253
    1db2:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <g_showData+0x1>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat Lat : %c  %02d^%02d.%04d'",
    1db6:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <g_showData+0xf>
    1dba:	8f 93       	push	r24
    1dbc:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <g_showData+0xe>
    1dc0:	8f 93       	push	r24
    1dc2:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <g_showData+0x24>
    1dc6:	1f 92       	push	r1
    1dc8:	8f 93       	push	r24
    1dca:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <g_showData+0x23>
    1dce:	1f 92       	push	r1
    1dd0:	8f 93       	push	r24
    1dd2:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <g_showData+0x22>
    1dd6:	1f 92       	push	r1
    1dd8:	8f 93       	push	r24
    1dda:	8f ea       	ldi	r24, 0xAF	; 175
    1ddc:	91 e0       	ldi	r25, 0x01	; 1
    1dde:	9f 93       	push	r25
    1de0:	8f 93       	push	r24
    1de2:	1f 92       	push	r1
    1de4:	80 e3       	ldi	r24, 0x30	; 48
    1de6:	8f 93       	push	r24
    1de8:	85 e3       	ldi	r24, 0x35	; 53
    1dea:	93 e0       	ldi	r25, 0x03	; 3
    1dec:	9f 93       	push	r25
    1dee:	8f 93       	push	r24
    1df0:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
    1df4:	cf bf       	out	0x3f, r28	; 63
		g_showData.posLat_sgn, g_showData.posLat_deg, g_showData.posLat_min_int, g_showData.posLat_min_frac10000);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  9 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1df6:	23 e0       	ldi	r18, 0x03	; 3
    1df8:	31 e0       	ldi	r19, 0x01	; 1
    1dfa:	4c e5       	ldi	r20, 0x5C	; 92
    1dfc:	63 e0       	ldi	r22, 0x03	; 3
    1dfe:	85 e3       	ldi	r24, 0x35	; 53
    1e00:	93 e0       	ldi	r25, 0x03	; 3
    1e02:	0e 94 c3 06 	call	0xd86	; 0xd86 <gfx_mono_draw_string>
		idx = 5;
    1e06:	85 e0       	ldi	r24, 0x05	; 5
    1e08:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3128>
		return 4;
    1e0c:	8d b7       	in	r24, 0x3d	; 61
    1e0e:	9e b7       	in	r25, 0x3e	; 62
    1e10:	0e 96       	adiw	r24, 0x0e	; 14
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	9e bf       	out	0x3e, r25	; 62
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	8d bf       	out	0x3d, r24	; 61
    1e1c:	84 e0       	ldi	r24, 0x04	; 4
    1e1e:	34 c1       	rjmp	.+616    	; 0x2088 <lcd_show_new_data+0x762>
	}

	/* Slot 5 */
	if (g_showData.newPosLon && (idx <= 5)) {
    1e20:	22 ff       	sbrs	r18, 2
    1e22:	3e c0       	rjmp	.+124    	; 0x1ea0 <lcd_show_new_data+0x57a>
    1e24:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <idx.3128>
    1e28:	36 30       	cpi	r19, 0x06	; 6
    1e2a:	d0 f5       	brcc	.+116    	; 0x1ea0 <lcd_show_new_data+0x57a>
		g_showData.newPosLon = false;
    1e2c:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <g_showData+0x1>
    1e30:	8b 7f       	andi	r24, 0xFB	; 251
    1e32:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <g_showData+0x1>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat Lon : %c %03d^%02d.%04d'",
    1e36:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <g_showData+0x11>
    1e3a:	8f 93       	push	r24
    1e3c:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <g_showData+0x10>
    1e40:	8f 93       	push	r24
    1e42:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <g_showData+0x27>
    1e46:	1f 92       	push	r1
    1e48:	8f 93       	push	r24
    1e4a:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <g_showData+0x26>
    1e4e:	1f 92       	push	r1
    1e50:	8f 93       	push	r24
    1e52:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <g_showData+0x25>
    1e56:	1f 92       	push	r1
    1e58:	8f 93       	push	r24
    1e5a:	8d ec       	ldi	r24, 0xCD	; 205
    1e5c:	91 e0       	ldi	r25, 0x01	; 1
    1e5e:	9f 93       	push	r25
    1e60:	8f 93       	push	r24
    1e62:	1f 92       	push	r1
    1e64:	80 e3       	ldi	r24, 0x30	; 48
    1e66:	8f 93       	push	r24
    1e68:	85 e3       	ldi	r24, 0x35	; 53
    1e6a:	93 e0       	ldi	r25, 0x03	; 3
    1e6c:	9f 93       	push	r25
    1e6e:	8f 93       	push	r24
    1e70:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
    1e74:	cf bf       	out	0x3f, r28	; 63
		g_showData.posLon_sgn, g_showData.posLon_deg, g_showData.posLon_min_int, g_showData.posLon_min_frac10000);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP + 10 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1e76:	23 e0       	ldi	r18, 0x03	; 3
    1e78:	31 e0       	ldi	r19, 0x01	; 1
    1e7a:	45 e6       	ldi	r20, 0x65	; 101
    1e7c:	63 e0       	ldi	r22, 0x03	; 3
    1e7e:	85 e3       	ldi	r24, 0x35	; 53
    1e80:	93 e0       	ldi	r25, 0x03	; 3
    1e82:	0e 94 c3 06 	call	0xd86	; 0xd86 <gfx_mono_draw_string>
		idx = 6;
    1e86:	86 e0       	ldi	r24, 0x06	; 6
    1e88:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3128>
		return 5;
    1e8c:	8d b7       	in	r24, 0x3d	; 61
    1e8e:	9e b7       	in	r25, 0x3e	; 62
    1e90:	0e 96       	adiw	r24, 0x0e	; 14
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	9e bf       	out	0x3e, r25	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	8d bf       	out	0x3d, r24	; 61
    1e9c:	85 e0       	ldi	r24, 0x05	; 5
    1e9e:	f4 c0       	rjmp	.+488    	; 0x2088 <lcd_show_new_data+0x762>
	}

	/* Slot 6 */
	if (g_showData.newPosHeight && (idx <= 6)) {
    1ea0:	23 ff       	sbrs	r18, 3
    1ea2:	39 c0       	rjmp	.+114    	; 0x1f16 <lcd_show_new_data+0x5f0>
    1ea4:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3128>
    1ea8:	27 30       	cpi	r18, 0x07	; 7
    1eaa:	a8 f5       	brcc	.+106    	; 0x1f16 <lcd_show_new_data+0x5f0>
		g_showData.newPosHeight = false;
    1eac:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <g_showData+0x1>
    1eb0:	87 7f       	andi	r24, 0xF7	; 247
    1eb2:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <g_showData+0x1>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Sat Hgt : %04d.%01d m",
    1eb6:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <g_showData+0x28>
    1eba:	6a e0       	ldi	r22, 0x0A	; 10
    1ebc:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__udivmodqi4>
    1ec0:	1f 92       	push	r1
    1ec2:	8f 93       	push	r24
    1ec4:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <g_showData+0x13>
    1ec8:	8f 93       	push	r24
    1eca:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <g_showData+0x12>
    1ece:	8f 93       	push	r24
    1ed0:	8a ee       	ldi	r24, 0xEA	; 234
    1ed2:	91 e0       	ldi	r25, 0x01	; 1
    1ed4:	9f 93       	push	r25
    1ed6:	8f 93       	push	r24
    1ed8:	1f 92       	push	r1
    1eda:	80 e3       	ldi	r24, 0x30	; 48
    1edc:	8f 93       	push	r24
    1ede:	85 e3       	ldi	r24, 0x35	; 53
    1ee0:	93 e0       	ldi	r25, 0x03	; 3
    1ee2:	9f 93       	push	r25
    1ee4:	8f 93       	push	r24
    1ee6:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
    1eea:	cf bf       	out	0x3f, r28	; 63
		g_showData.pos_height_int, g_showData.pos_height_frac100 / 10);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP + 11 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1eec:	23 e0       	ldi	r18, 0x03	; 3
    1eee:	31 e0       	ldi	r19, 0x01	; 1
    1ef0:	4e e6       	ldi	r20, 0x6E	; 110
    1ef2:	63 e0       	ldi	r22, 0x03	; 3
    1ef4:	85 e3       	ldi	r24, 0x35	; 53
    1ef6:	93 e0       	ldi	r25, 0x03	; 3
    1ef8:	0e 94 c3 06 	call	0xd86	; 0xd86 <gfx_mono_draw_string>
		idx = 7;
    1efc:	87 e0       	ldi	r24, 0x07	; 7
    1efe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3128>
		return 6;
    1f02:	8d b7       	in	r24, 0x3d	; 61
    1f04:	9e b7       	in	r25, 0x3e	; 62
    1f06:	0a 96       	adiw	r24, 0x0a	; 10
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	9e bf       	out	0x3e, r25	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	8d bf       	out	0x3d, r24	; 61
    1f12:	86 e0       	ldi	r24, 0x06	; 6
    1f14:	b9 c0       	rjmp	.+370    	; 0x2088 <lcd_show_new_data+0x762>
	}

	/* Slot 7 */
	if (g_showData.newPpb && (idx <= 7)) {
    1f16:	93 ff       	sbrs	r25, 3
    1f18:	38 c0       	rjmp	.+112    	; 0x1f8a <lcd_show_new_data+0x664>
    1f1a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3128>
    1f1e:	28 30       	cpi	r18, 0x08	; 8
    1f20:	a0 f5       	brcc	.+104    	; 0x1f8a <lcd_show_new_data+0x664>
		g_showData.newPpb = false;
    1f22:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <g_showData>
    1f26:	87 7f       	andi	r24, 0xF7	; 247
    1f28:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <g_showData>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "Deviat. : %04d.%03d ppb ",
    1f2c:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <g_showData+0x9>
    1f30:	8f 93       	push	r24
    1f32:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <g_showData+0x8>
    1f36:	8f 93       	push	r24
    1f38:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <g_showData+0x7>
    1f3c:	8f 93       	push	r24
    1f3e:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <g_showData+0x6>
    1f42:	8f 93       	push	r24
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	92 e0       	ldi	r25, 0x02	; 2
    1f48:	9f 93       	push	r25
    1f4a:	8f 93       	push	r24
    1f4c:	1f 92       	push	r1
    1f4e:	80 e3       	ldi	r24, 0x30	; 48
    1f50:	8f 93       	push	r24
    1f52:	85 e3       	ldi	r24, 0x35	; 53
    1f54:	93 e0       	ldi	r25, 0x03	; 3
    1f56:	9f 93       	push	r25
    1f58:	8f 93       	push	r24
    1f5a:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
    1f5e:	cf bf       	out	0x3f, r28	; 63
		g_showData.ppb_int, g_showData.ppb_frac1000);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  3 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1f60:	23 e0       	ldi	r18, 0x03	; 3
    1f62:	31 e0       	ldi	r19, 0x01	; 1
    1f64:	46 e2       	ldi	r20, 0x26	; 38
    1f66:	63 e0       	ldi	r22, 0x03	; 3
    1f68:	85 e3       	ldi	r24, 0x35	; 53
    1f6a:	93 e0       	ldi	r25, 0x03	; 3
    1f6c:	0e 94 c3 06 	call	0xd86	; 0xd86 <gfx_mono_draw_string>
		idx = 8;
    1f70:	88 e0       	ldi	r24, 0x08	; 8
    1f72:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3128>
		return 7;
    1f76:	8d b7       	in	r24, 0x3d	; 61
    1f78:	9e b7       	in	r25, 0x3e	; 62
    1f7a:	0a 96       	adiw	r24, 0x0a	; 10
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	9e bf       	out	0x3e, r25	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	8d bf       	out	0x3d, r24	; 61
    1f86:	87 e0       	ldi	r24, 0x07	; 7
    1f88:	7f c0       	rjmp	.+254    	; 0x2088 <lcd_show_new_data+0x762>
	}

	/* Slot 8 */
	if (g_showData.newPwm && (idx <= 8)) {
    1f8a:	94 ff       	sbrs	r25, 4
    1f8c:	41 c0       	rjmp	.+130    	; 0x2010 <lcd_show_new_data+0x6ea>
    1f8e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <idx.3128>
    1f92:	29 30       	cpi	r18, 0x09	; 9
    1f94:	e8 f5       	brcc	.+122    	; 0x2010 <lcd_show_new_data+0x6ea>
		g_showData.newPwm = false;
    1f96:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <g_showData>
    1f9a:	8f 7e       	andi	r24, 0xEF	; 239
    1f9c:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <g_showData>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "PWM     : %3d.%03d / 256 %%",
		g_showData.pwm_int, (int) (g_showData.pwm_frac256 * (1000.0f / 256.0f)));
    1fa0:	60 91 9f 03 	lds	r22, 0x039F	; 0x80039f <g_showData+0x1b>
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__floatsisf>
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	4a e7       	ldi	r20, 0x7A	; 122
    1fb4:	50 e4       	ldi	r21, 0x40	; 64
    1fb6:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__mulsf3>
	}

	/* Slot 8 */
	if (g_showData.newPwm && (idx <= 8)) {
		g_showData.newPwm = false;
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "PWM     : %3d.%03d / 256 %%",
    1fba:	0e 94 c2 19 	call	0x3384	; 0x3384 <__fixsfsi>
    1fbe:	7f 93       	push	r23
    1fc0:	6f 93       	push	r22
    1fc2:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <g_showData+0x1a>
    1fc6:	1f 92       	push	r1
    1fc8:	8f 93       	push	r24
    1fca:	89 e1       	ldi	r24, 0x19	; 25
    1fcc:	92 e0       	ldi	r25, 0x02	; 2
    1fce:	9f 93       	push	r25
    1fd0:	8f 93       	push	r24
    1fd2:	1f 92       	push	r1
    1fd4:	80 e3       	ldi	r24, 0x30	; 48
    1fd6:	8f 93       	push	r24
    1fd8:	85 e3       	ldi	r24, 0x35	; 53
    1fda:	93 e0       	ldi	r25, 0x03	; 3
    1fdc:	9f 93       	push	r25
    1fde:	8f 93       	push	r24
    1fe0:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
    1fe4:	cf bf       	out	0x3f, r28	; 63
		g_showData.pwm_int, (int) (g_showData.pwm_frac256 * (1000.0f / 256.0f)));
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  4 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    1fe6:	23 e0       	ldi	r18, 0x03	; 3
    1fe8:	31 e0       	ldi	r19, 0x01	; 1
    1fea:	4f e2       	ldi	r20, 0x2F	; 47
    1fec:	63 e0       	ldi	r22, 0x03	; 3
    1fee:	85 e3       	ldi	r24, 0x35	; 53
    1ff0:	93 e0       	ldi	r25, 0x03	; 3
    1ff2:	0e 94 c3 06 	call	0xd86	; 0xd86 <gfx_mono_draw_string>
		idx = 9;
    1ff6:	89 e0       	ldi	r24, 0x09	; 9
    1ff8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3128>
		return 8;
    1ffc:	8d b7       	in	r24, 0x3d	; 61
    1ffe:	9e b7       	in	r25, 0x3e	; 62
    2000:	0a 96       	adiw	r24, 0x0a	; 10
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	9e bf       	out	0x3e, r25	; 62
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	8d bf       	out	0x3d, r24	; 61
    200c:	88 e0       	ldi	r24, 0x08	; 8
    200e:	3c c0       	rjmp	.+120    	; 0x2088 <lcd_show_new_data+0x762>
	}

	/* Slot 9 */
	if (g_showData.newPv && (idx <= 9)) {
    2010:	95 ff       	sbrs	r25, 5
    2012:	36 c0       	rjmp	.+108    	; 0x2080 <lcd_show_new_data+0x75a>
    2014:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <idx.3128>
    2018:	9a 30       	cpi	r25, 0x0A	; 10
    201a:	90 f5       	brcc	.+100    	; 0x2080 <lcd_show_new_data+0x75a>
		g_showData.newPv = false;
    201c:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <g_showData>
    2020:	8f 7d       	andi	r24, 0xDF	; 223
    2022:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <g_showData>
		snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), "PullVolt: %1d.%03d V",
    2026:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <g_showData+0xb>
    202a:	8f 93       	push	r24
    202c:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <g_showData+0xa>
    2030:	8f 93       	push	r24
    2032:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <g_showData+0x1c>
    2036:	1f 92       	push	r1
    2038:	8f 93       	push	r24
    203a:	85 e3       	ldi	r24, 0x35	; 53
    203c:	92 e0       	ldi	r25, 0x02	; 2
    203e:	9f 93       	push	r25
    2040:	8f 93       	push	r24
    2042:	1f 92       	push	r1
    2044:	80 e3       	ldi	r24, 0x30	; 48
    2046:	8f 93       	push	r24
    2048:	85 e3       	ldi	r24, 0x35	; 53
    204a:	93 e0       	ldi	r25, 0x03	; 3
    204c:	9f 93       	push	r25
    204e:	8f 93       	push	r24
    2050:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
    2054:	cf bf       	out	0x3f, r28	; 63
		g_showData.pv_int, g_showData.pv_frac1000);
		cpu_irq_restore(flags);
		gfx_mono_draw_string(s_lcd_prepare_buf, LCD_SHOW_LINE_LEFT,  LCD_SHOW_LINE_TOP +  5 * LCD_SHOW_LINE_HEIGHT, &sysfont);
    2056:	23 e0       	ldi	r18, 0x03	; 3
    2058:	31 e0       	ldi	r19, 0x01	; 1
    205a:	48 e3       	ldi	r20, 0x38	; 56
    205c:	63 e0       	ldi	r22, 0x03	; 3
    205e:	85 e3       	ldi	r24, 0x35	; 53
    2060:	93 e0       	ldi	r25, 0x03	; 3
    2062:	0e 94 c3 06 	call	0xd86	; 0xd86 <gfx_mono_draw_string>
		idx = 10;
    2066:	8a e0       	ldi	r24, 0x0A	; 10
    2068:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <idx.3128>
		return 9;
    206c:	8d b7       	in	r24, 0x3d	; 61
    206e:	9e b7       	in	r25, 0x3e	; 62
    2070:	0a 96       	adiw	r24, 0x0a	; 10
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	9e bf       	out	0x3e, r25	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	8d bf       	out	0x3d, r24	; 61
    207c:	89 e0       	ldi	r24, 0x09	; 9
    207e:	04 c0       	rjmp	.+8      	; 0x2088 <lcd_show_new_data+0x762>
	}

	/* When no updates are due, turn back to first position */
	idx = 1;
    2080:	91 e0       	ldi	r25, 0x01	; 1
    2082:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <idx.3128>
    2086:	cf bf       	out	0x3f, r28	; 63

	cpu_irq_restore(flags);
	return 0;
}
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	ff 90       	pop	r15
    2092:	ef 90       	pop	r14
    2094:	df 90       	pop	r13
    2096:	cf 90       	pop	r12
    2098:	bf 90       	pop	r11
    209a:	af 90       	pop	r10
    209c:	9f 90       	pop	r9
    209e:	8f 90       	pop	r8
    20a0:	08 95       	ret

000020a2 <lcd_animation_prepare>:
	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), " L=%4d.%1d AD", (int) l, ((int) (l * 10.0f)) % 10);
	gfx_mono_draw_string(s_lcd_prepare_buf, 160, 95, &sysfont);
}

void lcd_animation_prepare(void)
{
    20a2:	ef 92       	push	r14
    20a4:	ff 92       	push	r15
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
	int idx;

	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
    20ae:	83 ec       	ldi	r24, 0xC3	; 195
    20b0:	9f ef       	ldi	r25, 0xFF	; 255
    20b2:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <s_animation_train_origin+0x1>
    20b6:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <s_animation_train_origin>
	s_animation_dx = 1;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <s_animation_dx>

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
			s_animation_train_left[  idx] = 0b11111000;

		} else if (idx == ANIMATION_TRAIN_BLANK_LEN - 1) {
			s_animation_train_left[  idx] = 0;

		} else if (!((idx - 16) % 11)) {
    20c4:	8b e0       	ldi	r24, 0x0B	; 11
    20c6:	e8 2e       	mov	r14, r24
    20c8:	f1 2c       	mov	r15, r1
			s_animation_train_left[  idx] = 0b01000000;
    20ca:	c0 e4       	ldi	r28, 0x40	; 64
			s_animation_train_left[++idx] = 0b01000000;
			s_animation_train_left[++idx] = 0b01000000;
			s_animation_train_left[++idx] = 0b11111000;
    20cc:	48 ef       	ldi	r20, 0xF8	; 248
			s_animation_train_left[++idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11001000;
    20ce:	d8 ec       	ldi	r29, 0xC8	; 200
			s_animation_train_left[  idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11011000;
		} else if (idx <  5) {
			s_animation_train_left[  idx] = 0b11011111;
		} else if (idx < 11) {
			s_animation_train_left[  idx] = 0b11011000;
    20d0:	18 ed       	ldi	r17, 0xD8	; 216

		} else if (idx < 3) {
			s_animation_train_left[  idx] = 0b11111000;
			s_animation_train_left[++idx] = 0b11011000;
		} else if (idx <  5) {
			s_animation_train_left[  idx] = 0b11011111;
    20d2:	0f ed       	ldi	r16, 0xDF	; 223
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
		if (!idx) {
    20d4:	21 15       	cp	r18, r1
    20d6:	31 05       	cpc	r19, r1
    20d8:	19 f4       	brne	.+6      	; 0x20e0 <lcd_animation_prepare+0x3e>
			s_animation_train_left[idx] = 0;
    20da:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <s_animation_train_left>
    20de:	43 c0       	rjmp	.+134    	; 0x2166 <lcd_animation_prepare+0xc4>

		} else if (idx < 3) {
    20e0:	23 30       	cpi	r18, 0x03	; 3
    20e2:	31 05       	cpc	r19, r1
    20e4:	5c f4       	brge	.+22     	; 0x20fc <lcd_animation_prepare+0x5a>
			s_animation_train_left[  idx] = 0b11111000;
    20e6:	f9 01       	movw	r30, r18
    20e8:	e3 51       	subi	r30, 0x13	; 19
    20ea:	fd 4f       	sbci	r31, 0xFD	; 253
    20ec:	40 83       	st	Z, r20
			s_animation_train_left[++idx] = 0b11011000;
    20ee:	2f 5f       	subi	r18, 0xFF	; 255
    20f0:	3f 4f       	sbci	r19, 0xFF	; 255
    20f2:	f9 01       	movw	r30, r18
    20f4:	e3 51       	subi	r30, 0x13	; 19
    20f6:	fd 4f       	sbci	r31, 0xFD	; 253
    20f8:	10 83       	st	Z, r17
    20fa:	35 c0       	rjmp	.+106    	; 0x2166 <lcd_animation_prepare+0xc4>
		} else if (idx <  5) {
    20fc:	25 30       	cpi	r18, 0x05	; 5
    20fe:	31 05       	cpc	r19, r1
    2100:	2c f4       	brge	.+10     	; 0x210c <lcd_animation_prepare+0x6a>
			s_animation_train_left[  idx] = 0b11011111;
    2102:	f9 01       	movw	r30, r18
    2104:	e3 51       	subi	r30, 0x13	; 19
    2106:	fd 4f       	sbci	r31, 0xFD	; 253
    2108:	00 83       	st	Z, r16
    210a:	2d c0       	rjmp	.+90     	; 0x2166 <lcd_animation_prepare+0xc4>
		} else if (idx < 11) {
    210c:	2b 30       	cpi	r18, 0x0B	; 11
    210e:	31 05       	cpc	r19, r1
    2110:	2c f4       	brge	.+10     	; 0x211c <lcd_animation_prepare+0x7a>
			s_animation_train_left[  idx] = 0b11011000;
    2112:	f9 01       	movw	r30, r18
    2114:	e3 51       	subi	r30, 0x13	; 19
    2116:	fd 4f       	sbci	r31, 0xFD	; 253
    2118:	10 83       	st	Z, r17
    211a:	25 c0       	rjmp	.+74     	; 0x2166 <lcd_animation_prepare+0xc4>
		} else if (idx < 16) {
    211c:	20 31       	cpi	r18, 0x10	; 16
    211e:	31 05       	cpc	r19, r1
    2120:	e4 f0       	brlt	.+56     	; 0x215a <lcd_animation_prepare+0xb8>
			s_animation_train_left[  idx] = 0b11111000;

		} else if (idx == ANIMATION_TRAIN_BLANK_LEN - 1) {
    2122:	2c 33       	cpi	r18, 0x3C	; 60
    2124:	31 05       	cpc	r19, r1
    2126:	19 f4       	brne	.+6      	; 0x212e <lcd_animation_prepare+0x8c>
			s_animation_train_left[  idx] = 0;
    2128:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <s_animation_train_left+0x3c>
    212c:	1c c0       	rjmp	.+56     	; 0x2166 <lcd_animation_prepare+0xc4>

		} else if (!((idx - 16) % 11)) {
    212e:	c9 01       	movw	r24, r18
    2130:	40 97       	sbiw	r24, 0x10	; 16
    2132:	b7 01       	movw	r22, r14
    2134:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__divmodhi4>
    2138:	f9 01       	movw	r30, r18
    213a:	e3 51       	subi	r30, 0x13	; 19
    213c:	fd 4f       	sbci	r31, 0xFD	; 253
    213e:	89 2b       	or	r24, r25
    2140:	89 f4       	brne	.+34     	; 0x2164 <lcd_animation_prepare+0xc2>
			s_animation_train_left[  idx] = 0b01000000;
    2142:	c0 83       	st	Z, r28
			s_animation_train_left[++idx] = 0b01000000;
    2144:	c1 83       	std	Z+1, r28	; 0x01
			s_animation_train_left[++idx] = 0b01000000;
    2146:	c2 83       	std	Z+2, r28	; 0x02
			s_animation_train_left[++idx] = 0b11111000;
    2148:	43 83       	std	Z+3, r20	; 0x03
			s_animation_train_left[++idx] = 0b11111000;
    214a:	44 83       	std	Z+4, r20	; 0x04
			s_animation_train_left[++idx] = 0b11001000;
    214c:	d5 83       	std	Z+5, r29	; 0x05
			s_animation_train_left[++idx] = 0b11111000;
    214e:	46 83       	std	Z+6, r20	; 0x06
			s_animation_train_left[++idx] = 0b11111000;
    2150:	47 83       	std	Z+7, r20	; 0x07
			s_animation_train_left[++idx] = 0b11001000;
    2152:	d0 87       	std	Z+8, r29	; 0x08
			s_animation_train_left[++idx] = 0b11111000;
    2154:	41 87       	std	Z+9, r20	; 0x09
			s_animation_train_left[++idx] = 0b11111000;
    2156:	26 5f       	subi	r18, 0xF6	; 246
    2158:	3f 4f       	sbci	r19, 0xFF	; 255
    215a:	f9 01       	movw	r30, r18
    215c:	e3 51       	subi	r30, 0x13	; 19
    215e:	fd 4f       	sbci	r31, 0xFD	; 253
    2160:	40 83       	st	Z, r20
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <lcd_animation_prepare+0xc4>
		} else {
			s_animation_train_left[idx] = 0;
    2164:	10 82       	st	Z, r1
	// set initial values
	s_animation_train_origin = -ANIMATION_TRAIN_BLANK_LEN;
	s_animation_dx = 1;

	/* prepare train */	
	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    2166:	2f 5f       	subi	r18, 0xFF	; 255
    2168:	3f 4f       	sbci	r19, 0xFF	; 255
    216a:	2d 33       	cpi	r18, 0x3D	; 61
    216c:	31 05       	cpc	r19, r1
    216e:	0c f4       	brge	.+2      	; 0x2172 <lcd_animation_prepare+0xd0>
    2170:	b1 cf       	rjmp	.-158    	; 0x20d4 <lcd_animation_prepare+0x32>
    2172:	ad ee       	ldi	r26, 0xED	; 237
    2174:	b2 e0       	ldi	r27, 0x02	; 2
    2176:	ed ee       	ldi	r30, 0xED	; 237
    2178:	f2 e0       	ldi	r31, 0x02	; 2
			s_animation_train_left[idx] = 0;
		}
	}

	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
		s_animation_train_right[ANIMATION_TRAIN_BLANK_LEN - idx - 1] = s_animation_train_left[idx];		// x-mirror
    217a:	8d 91       	ld	r24, X+
    217c:	82 93       	st	-Z, r24
		} else {
			s_animation_train_left[idx] = 0;
		}
	}

	for (idx = 0; idx < ANIMATION_TRAIN_BLANK_LEN; ++idx) {
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	e0 3b       	cpi	r30, 0xB0	; 176
    2182:	f8 07       	cpc	r31, r24
    2184:	d1 f7       	brne	.-12     	; 0x217a <lcd_animation_prepare+0xd8>
		s_animation_train_right[ANIMATION_TRAIN_BLANK_LEN - idx - 1] = s_animation_train_left[idx];		// x-mirror
	}

	/* prepare free line for train */
	gfx_mono_generic_draw_filled_rect(0, (GFX_MONO_LCD_PAGES - 1) * GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_PIXELS_PER_BYTE, GFX_PIXEL_CLR);
    2186:	00 e0       	ldi	r16, 0x00	; 0
    2188:	28 e0       	ldi	r18, 0x08	; 8
    218a:	40 ef       	ldi	r20, 0xF0	; 240
    218c:	68 e7       	ldi	r22, 0x78	; 120
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_filled_rect>
}
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	ff 90       	pop	r15
    219e:	ef 90       	pop	r14
    21a0:	08 95       	ret

000021a2 <lcd_animation_loop>:

void lcd_animation_loop(void)
{
    21a2:	cf 92       	push	r12
    21a4:	df 92       	push	r13
    21a6:	ef 92       	push	r14
    21a8:	ff 92       	push	r15
    21aa:	0f 93       	push	r16
	if (s_animation_dx) {
    21ac:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <s_animation_dx>
    21b0:	88 23       	and	r24, r24
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <lcd_animation_loop+0x14>
    21b4:	80 c1       	rjmp	.+768    	; 0x24b6 <lcd_animation_loop+0x314>
		float now = get_abs_time();
    21b6:	d1 d5       	rcall	.+2978   	; 0x2d5a <get_abs_time>
    21b8:	6b 01       	movw	r12, r22
    21ba:	7c 01       	movw	r14, r24

		if ((now - s_animation_time_last_train) >= 0.04f) {  // 25x per sec
    21bc:	20 91 2a 03 	lds	r18, 0x032A	; 0x80032a <s_animation_time_last_train>
    21c0:	30 91 2b 03 	lds	r19, 0x032B	; 0x80032b <s_animation_time_last_train+0x1>
    21c4:	40 91 2c 03 	lds	r20, 0x032C	; 0x80032c <s_animation_time_last_train+0x2>
    21c8:	50 91 2d 03 	lds	r21, 0x032D	; 0x80032d <s_animation_time_last_train+0x3>
    21cc:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <__subsf3>
    21d0:	2a e0       	ldi	r18, 0x0A	; 10
    21d2:	37 ed       	ldi	r19, 0xD7	; 215
    21d4:	43 e2       	ldi	r20, 0x23	; 35
    21d6:	5d e3       	ldi	r21, 0x3D	; 61
    21d8:	0e 94 a5 1a 	call	0x354a	; 0x354a <__gesf2>
    21dc:	87 fd       	sbrc	r24, 7
    21de:	5b c0       	rjmp	.+182    	; 0x2296 <lcd_animation_loop+0xf4>
			s_animation_time_last_train = now;
    21e0:	c0 92 2a 03 	sts	0x032A, r12	; 0x80032a <s_animation_time_last_train>
    21e4:	d0 92 2b 03 	sts	0x032B, r13	; 0x80032b <s_animation_time_last_train+0x1>
    21e8:	e0 92 2c 03 	sts	0x032C, r14	; 0x80032c <s_animation_time_last_train+0x2>
    21ec:	f0 92 2d 03 	sts	0x032D, r15	; 0x80032d <s_animation_time_last_train+0x3>
			s_animation_train_origin += s_animation_dx;
    21f0:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <s_animation_dx>
    21f4:	e0 91 33 03 	lds	r30, 0x0333	; 0x800333 <s_animation_train_origin>
    21f8:	f0 91 34 03 	lds	r31, 0x0334	; 0x800334 <s_animation_train_origin+0x1>
    21fc:	e8 0f       	add	r30, r24
    21fe:	f1 1d       	adc	r31, r1
    2200:	87 fd       	sbrc	r24, 7
    2202:	fa 95       	dec	r31
    2204:	f0 93 34 03 	sts	0x0334, r31	; 0x800334 <s_animation_train_origin+0x1>
    2208:	e0 93 33 03 	sts	0x0333, r30	; 0x800333 <s_animation_train_origin>

			if (s_animation_train_origin <= (-10 - ANIMATION_TRAIN_BLANK_LEN)) {
    220c:	ea 3b       	cpi	r30, 0xBA	; 186
    220e:	8f ef       	ldi	r24, 0xFF	; 255
    2210:	f8 07       	cpc	r31, r24
    2212:	24 f4       	brge	.+8      	; 0x221c <lcd_animation_loop+0x7a>
				s_animation_dx = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <s_animation_dx>
    221a:	06 c0       	rjmp	.+12     	; 0x2228 <lcd_animation_loop+0x86>
			} else if (s_animation_train_origin >= (GFX_MONO_LCD_WIDTH + 10)) {
    221c:	ea 3f       	cpi	r30, 0xFA	; 250
    221e:	f1 05       	cpc	r31, r1
    2220:	1c f0       	brlt	.+6      	; 0x2228 <lcd_animation_loop+0x86>
				s_animation_dx = -1;
    2222:	8f ef       	ldi	r24, 0xFF	; 255
    2224:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <s_animation_dx>
			}

			if (s_animation_dx < 0) {
    2228:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <s_animation_dx>
    222c:	87 ff       	sbrs	r24, 7
    222e:	1a c0       	rjmp	.+52     	; 0x2264 <lcd_animation_loop+0xc2>
				// Draw train left
				if (s_animation_train_origin >= 0 && s_animation_train_origin < GFX_MONO_LCD_WIDTH) {
    2230:	e0 3f       	cpi	r30, 0xF0	; 240
    2232:	f1 05       	cpc	r31, r1
    2234:	40 f4       	brcc	.+16     	; 0x2246 <lcd_animation_loop+0xa4>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_left, GFX_MONO_LCD_PAGES - 1, s_animation_train_origin, ANIMATION_TRAIN_BLANK_LEN);				// full width
    2236:	2d e3       	ldi	r18, 0x3D	; 61
    2238:	4e 2f       	mov	r20, r30
    223a:	6f e0       	ldi	r22, 0x0F	; 15
    223c:	8d ee       	ldi	r24, 0xED	; 237
    223e:	92 e0       	ldi	r25, 0x02	; 2
    2240:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <gfx_mono_lcd_uc1608_put_page>
    2244:	28 c0       	rjmp	.+80     	; 0x2296 <lcd_animation_loop+0xf4>
				} else if (-ANIMATION_TRAIN_BLANK_LEN < s_animation_train_origin && s_animation_train_origin < 0) {
    2246:	cf 01       	movw	r24, r30
    2248:	cc 96       	adiw	r24, 0x3c	; 60
    224a:	cc 97       	sbiw	r24, 0x3c	; 60
    224c:	20 f5       	brcc	.+72     	; 0x2296 <lcd_animation_loop+0xf4>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_left - s_animation_train_origin, GFX_MONO_LCD_PAGES - 1, 0, ANIMATION_TRAIN_BLANK_LEN + s_animation_train_origin);	// left: reduced width
    224e:	2d e3       	ldi	r18, 0x3D	; 61
    2250:	2e 0f       	add	r18, r30
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	6f e0       	ldi	r22, 0x0F	; 15
    2256:	8d ee       	ldi	r24, 0xED	; 237
    2258:	92 e0       	ldi	r25, 0x02	; 2
    225a:	8e 1b       	sub	r24, r30
    225c:	9f 0b       	sbc	r25, r31
    225e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <gfx_mono_lcd_uc1608_put_page>
    2262:	19 c0       	rjmp	.+50     	; 0x2296 <lcd_animation_loop+0xf4>
				}

				} else {
				// Draw train right
				if (s_animation_train_origin >= 0 && s_animation_train_origin < GFX_MONO_LCD_WIDTH) {
    2264:	e0 3f       	cpi	r30, 0xF0	; 240
    2266:	f1 05       	cpc	r31, r1
    2268:	40 f4       	brcc	.+16     	; 0x227a <lcd_animation_loop+0xd8>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_right, GFX_MONO_LCD_PAGES - 1, s_animation_train_origin, ANIMATION_TRAIN_BLANK_LEN);				// full width
    226a:	2d e3       	ldi	r18, 0x3D	; 61
    226c:	4e 2f       	mov	r20, r30
    226e:	6f e0       	ldi	r22, 0x0F	; 15
    2270:	80 eb       	ldi	r24, 0xB0	; 176
    2272:	92 e0       	ldi	r25, 0x02	; 2
    2274:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <gfx_mono_lcd_uc1608_put_page>
    2278:	0e c0       	rjmp	.+28     	; 0x2296 <lcd_animation_loop+0xf4>
				} else if (-ANIMATION_TRAIN_BLANK_LEN < s_animation_train_origin && s_animation_train_origin < 0) {
    227a:	cf 01       	movw	r24, r30
    227c:	cc 96       	adiw	r24, 0x3c	; 60
    227e:	cc 97       	sbiw	r24, 0x3c	; 60
    2280:	50 f4       	brcc	.+20     	; 0x2296 <lcd_animation_loop+0xf4>
					gfx_mono_lcd_uc1608_put_page(s_animation_train_right - s_animation_train_origin, GFX_MONO_LCD_PAGES - 1, 0, ANIMATION_TRAIN_BLANK_LEN + s_animation_train_origin);	// left: reduced width
    2282:	2d e3       	ldi	r18, 0x3D	; 61
    2284:	2e 0f       	add	r18, r30
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	6f e0       	ldi	r22, 0x0F	; 15
    228a:	80 eb       	ldi	r24, 0xB0	; 176
    228c:	92 e0       	ldi	r25, 0x02	; 2
    228e:	8e 1b       	sub	r24, r30
    2290:	9f 0b       	sbc	r25, r31
    2292:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <gfx_mono_lcd_uc1608_put_page>
				}
			}
		}

		if ((now - s_animation_time_last_temp) >= 0.50f) {  // 2x per sec
    2296:	20 91 2e 03 	lds	r18, 0x032E	; 0x80032e <s_animation_time_last_temp>
    229a:	30 91 2f 03 	lds	r19, 0x032F	; 0x80032f <s_animation_time_last_temp+0x1>
    229e:	40 91 30 03 	lds	r20, 0x0330	; 0x800330 <s_animation_time_last_temp+0x2>
    22a2:	50 91 31 03 	lds	r21, 0x0331	; 0x800331 <s_animation_time_last_temp+0x3>
    22a6:	c7 01       	movw	r24, r14
    22a8:	b6 01       	movw	r22, r12
    22aa:	9b d7       	rcall	.+3894   	; 0x31e2 <__subsf3>
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	5f e3       	ldi	r21, 0x3F	; 63
    22b4:	0e 94 a5 1a 	call	0x354a	; 0x354a <__gesf2>
    22b8:	87 fd       	sbrc	r24, 7
    22ba:	c4 c0       	rjmp	.+392    	; 0x2444 <lcd_animation_loop+0x2a2>
			s_animation_time_last_temp = now;
    22bc:	c0 92 2e 03 	sts	0x032E, r12	; 0x80032e <s_animation_time_last_temp>
    22c0:	d0 92 2f 03 	sts	0x032F, r13	; 0x80032f <s_animation_time_last_temp+0x1>
    22c4:	e0 92 30 03 	sts	0x0330, r14	; 0x800330 <s_animation_time_last_temp+0x2>
    22c8:	f0 92 31 03 	sts	0x0331, r15	; 0x800331 <s_animation_time_last_temp+0x3>
			s_task();
    22cc:	91 d5       	rcall	.+2850   	; 0x2df0 <s_task>
static void s_lcd_test_temp(void)
{
	static float t_last = 0.0f;
	float t;

	irqflags_t flags = cpu_irq_save();
    22ce:	7d da       	rcall	.-2822   	; 0x17ca <cpu_irq_save>
	t = g_temp;
    22d0:	c0 90 b3 03 	lds	r12, 0x03B3	; 0x8003b3 <g_temp>
    22d4:	d0 90 b4 03 	lds	r13, 0x03B4	; 0x8003b4 <g_temp+0x1>
    22d8:	e0 90 b5 03 	lds	r14, 0x03B5	; 0x8003b5 <g_temp+0x2>
    22dc:	f0 90 b6 03 	lds	r15, 0x03B6	; 0x8003b6 <g_temp+0x3>
    22e0:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	if (t < 0.f) {
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	a9 01       	movw	r20, r18
    22e8:	c7 01       	movw	r24, r14
    22ea:	b6 01       	movw	r22, r12
    22ec:	df d7       	rcall	.+4030   	; 0x32ac <__cmpsf2>
    22ee:	87 ff       	sbrs	r24, 7
    22f0:	03 c0       	rjmp	.+6      	; 0x22f8 <lcd_animation_loop+0x156>
		t = 0.f;
    22f2:	c1 2c       	mov	r12, r1
    22f4:	d1 2c       	mov	r13, r1
    22f6:	76 01       	movw	r14, r12
	}

	if (fabsf(t - t_last) < 0.01f) {
    22f8:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <t_last.3145>
    22fc:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <t_last.3145+0x1>
    2300:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <t_last.3145+0x2>
    2304:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <t_last.3145+0x3>
    2308:	c7 01       	movw	r24, r14
    230a:	b6 01       	movw	r22, r12
    230c:	6a d7       	rcall	.+3796   	; 0x31e2 <__subsf3>
    230e:	9f 77       	andi	r25, 0x7F	; 127
    2310:	2a e0       	ldi	r18, 0x0A	; 10
    2312:	37 ed       	ldi	r19, 0xD7	; 215
    2314:	43 e2       	ldi	r20, 0x23	; 35
    2316:	5c e3       	ldi	r21, 0x3C	; 60
    2318:	c9 d7       	rcall	.+3986   	; 0x32ac <__cmpsf2>
    231a:	87 fd       	sbrc	r24, 7
    231c:	3c c0       	rjmp	.+120    	; 0x2396 <lcd_animation_loop+0x1f4>
		return;
	}
	t_last = t;
    231e:	c0 92 ab 02 	sts	0x02AB, r12	; 0x8002ab <t_last.3145>
    2322:	d0 92 ac 02 	sts	0x02AC, r13	; 0x8002ac <t_last.3145+0x1>
    2326:	e0 92 ad 02 	sts	0x02AD, r14	; 0x8002ad <t_last.3145+0x2>
    232a:	f0 92 ae 02 	sts	0x02AE, r15	; 0x8002ae <t_last.3145+0x3>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), " T=  %2d.%02d^C ", (int) t, ((int) (t * 100.0f)) % 100);
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	48 ec       	ldi	r20, 0xC8	; 200
    2334:	52 e4       	ldi	r21, 0x42	; 66
    2336:	c7 01       	movw	r24, r14
    2338:	b6 01       	movw	r22, r12
    233a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__mulsf3>
    233e:	0e 94 c2 19 	call	0x3384	; 0x3384 <__fixsfsi>
    2342:	cb 01       	movw	r24, r22
    2344:	64 e6       	ldi	r22, 0x64	; 100
    2346:	70 e0       	ldi	r23, 0x00	; 0
    2348:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__divmodhi4>
    234c:	9f 93       	push	r25
    234e:	8f 93       	push	r24
    2350:	c7 01       	movw	r24, r14
    2352:	b6 01       	movw	r22, r12
    2354:	0e 94 c2 19 	call	0x3384	; 0x3384 <__fixsfsi>
    2358:	7f 93       	push	r23
    235a:	6f 93       	push	r22
    235c:	8a e4       	ldi	r24, 0x4A	; 74
    235e:	92 e0       	ldi	r25, 0x02	; 2
    2360:	9f 93       	push	r25
    2362:	8f 93       	push	r24
    2364:	1f 92       	push	r1
    2366:	80 e3       	ldi	r24, 0x30	; 48
    2368:	8f 93       	push	r24
    236a:	85 e3       	ldi	r24, 0x35	; 53
    236c:	93 e0       	ldi	r25, 0x03	; 3
    236e:	9f 93       	push	r25
    2370:	8f 93       	push	r24
    2372:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 160, 105, &sysfont);
    2376:	23 e0       	ldi	r18, 0x03	; 3
    2378:	31 e0       	ldi	r19, 0x01	; 1
    237a:	49 e6       	ldi	r20, 0x69	; 105
    237c:	60 ea       	ldi	r22, 0xA0	; 160
    237e:	85 e3       	ldi	r24, 0x35	; 53
    2380:	93 e0       	ldi	r25, 0x03	; 3
    2382:	0e 94 c3 06 	call	0xd86	; 0xd86 <gfx_mono_draw_string>
    2386:	8d b7       	in	r24, 0x3d	; 61
    2388:	9e b7       	in	r25, 0x3e	; 62
    238a:	0a 96       	adiw	r24, 0x0a	; 10
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	9e bf       	out	0x3e, r25	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	8d bf       	out	0x3d, r24	; 61
static void s_lcd_test_light(void)
{
	static float l_last = 0.0f;
	float l;

	irqflags_t flags = cpu_irq_save();
    2396:	19 da       	rcall	.-3022   	; 0x17ca <cpu_irq_save>
	l = g_adc_light;
    2398:	c0 90 bb 03 	lds	r12, 0x03BB	; 0x8003bb <g_adc_light>
    239c:	d0 90 bc 03 	lds	r13, 0x03BC	; 0x8003bc <g_adc_light+0x1>
    23a0:	e0 90 bd 03 	lds	r14, 0x03BD	; 0x8003bd <g_adc_light+0x2>
    23a4:	f0 90 be 03 	lds	r15, 0x03BE	; 0x8003be <g_adc_light+0x3>
    23a8:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	if (fabsf(l - l_last) < 0.1f) {
    23aa:	20 91 a7 02 	lds	r18, 0x02A7	; 0x8002a7 <l_last.3151>
    23ae:	30 91 a8 02 	lds	r19, 0x02A8	; 0x8002a8 <l_last.3151+0x1>
    23b2:	40 91 a9 02 	lds	r20, 0x02A9	; 0x8002a9 <l_last.3151+0x2>
    23b6:	50 91 aa 02 	lds	r21, 0x02AA	; 0x8002aa <l_last.3151+0x3>
    23ba:	c7 01       	movw	r24, r14
    23bc:	b6 01       	movw	r22, r12
    23be:	11 d7       	rcall	.+3618   	; 0x31e2 <__subsf3>
    23c0:	9f 77       	andi	r25, 0x7F	; 127
    23c2:	2d ec       	ldi	r18, 0xCD	; 205
    23c4:	3c ec       	ldi	r19, 0xCC	; 204
    23c6:	4c ec       	ldi	r20, 0xCC	; 204
    23c8:	5d e3       	ldi	r21, 0x3D	; 61
    23ca:	70 d7       	rcall	.+3808   	; 0x32ac <__cmpsf2>
    23cc:	87 fd       	sbrc	r24, 7
    23ce:	3a c0       	rjmp	.+116    	; 0x2444 <lcd_animation_loop+0x2a2>
		return;
	}
	l_last = l;
    23d0:	c0 92 a7 02 	sts	0x02A7, r12	; 0x8002a7 <l_last.3151>
    23d4:	d0 92 a8 02 	sts	0x02A8, r13	; 0x8002a8 <l_last.3151+0x1>
    23d8:	e0 92 a9 02 	sts	0x02A9, r14	; 0x8002a9 <l_last.3151+0x2>
    23dc:	f0 92 aa 02 	sts	0x02AA, r15	; 0x8002aa <l_last.3151+0x3>

	snprintf(s_lcd_prepare_buf, sizeof(s_lcd_prepare_buf), " L=%4d.%1d AD", (int) l, ((int) (l * 10.0f)) % 10);
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e2       	ldi	r20, 0x20	; 32
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	c7 01       	movw	r24, r14
    23ea:	b6 01       	movw	r22, r12
    23ec:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__mulsf3>
    23f0:	c9 d7       	rcall	.+3986   	; 0x3384 <__fixsfsi>
    23f2:	cb 01       	movw	r24, r22
    23f4:	6a e0       	ldi	r22, 0x0A	; 10
    23f6:	70 e0       	ldi	r23, 0x00	; 0
    23f8:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__divmodhi4>
    23fc:	9f 93       	push	r25
    23fe:	8f 93       	push	r24
    2400:	c7 01       	movw	r24, r14
    2402:	b6 01       	movw	r22, r12
    2404:	bf d7       	rcall	.+3966   	; 0x3384 <__fixsfsi>
    2406:	7f 93       	push	r23
    2408:	6f 93       	push	r22
    240a:	8b e5       	ldi	r24, 0x5B	; 91
    240c:	92 e0       	ldi	r25, 0x02	; 2
    240e:	9f 93       	push	r25
    2410:	8f 93       	push	r24
    2412:	1f 92       	push	r1
    2414:	80 e3       	ldi	r24, 0x30	; 48
    2416:	8f 93       	push	r24
    2418:	85 e3       	ldi	r24, 0x35	; 53
    241a:	93 e0       	ldi	r25, 0x03	; 3
    241c:	9f 93       	push	r25
    241e:	8f 93       	push	r24
    2420:	0e 94 3f 1b 	call	0x367e	; 0x367e <snprintf>
	gfx_mono_draw_string(s_lcd_prepare_buf, 160, 95, &sysfont);
    2424:	23 e0       	ldi	r18, 0x03	; 3
    2426:	31 e0       	ldi	r19, 0x01	; 1
    2428:	4f e5       	ldi	r20, 0x5F	; 95
    242a:	60 ea       	ldi	r22, 0xA0	; 160
    242c:	85 e3       	ldi	r24, 0x35	; 53
    242e:	93 e0       	ldi	r25, 0x03	; 3
    2430:	0e 94 c3 06 	call	0xd86	; 0xd86 <gfx_mono_draw_string>
    2434:	8d b7       	in	r24, 0x3d	; 61
    2436:	9e b7       	in	r25, 0x3e	; 62
    2438:	0a 96       	adiw	r24, 0x0a	; 10
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	9e bf       	out	0x3e, r25	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	8d bf       	out	0x3d, r24	; 61
	const int w = GFX_MONO_LCD_WIDTH;

	static int loop = 0;
	static uint8_t sw = 2;

	if (loop++ < h) {
    2444:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <loop.3136>
    2448:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <loop.3136+0x1>
    244c:	f9 01       	movw	r30, r18
    244e:	31 96       	adiw	r30, 0x01	; 1
    2450:	f0 93 a6 02 	sts	0x02A6, r31	; 0x8002a6 <loop.3136+0x1>
    2454:	e0 93 a5 02 	sts	0x02A5, r30	; 0x8002a5 <loop.3136>
    2458:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    245c:	22 31       	cpi	r18, 0x12	; 18
    245e:	31 05       	cpc	r19, r1
    2460:	6c f4       	brge	.+26     	; 0x247c <lcd_animation_loop+0x2da>
		uint8_t y11 = oy + loop;
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);
    2462:	63 e0       	ldi	r22, 0x03	; 3
    2464:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__udivmodqi4>
	static int loop = 0;
	static uint8_t sw = 2;

	if (loop++ < h) {
		uint8_t y11 = oy + loop;
		uint8_t y12 = oy + h - loop - 1;
    2468:	2b e1       	ldi	r18, 0x1B	; 27
    246a:	2e 1b       	sub	r18, r30

	static int loop = 0;
	static uint8_t sw = 2;

	if (loop++ < h) {
		uint8_t y11 = oy + loop;
    246c:	6a e0       	ldi	r22, 0x0A	; 10
    246e:	6e 0f       	add	r22, r30
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);
    2470:	09 2f       	mov	r16, r25
    2472:	4f ee       	ldi	r20, 0xEF	; 239
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	0e 94 dd 03 	call	0x7ba	; 0x7ba <gfx_mono_generic_draw_line>
    247a:	1d c0       	rjmp	.+58     	; 0x24b6 <lcd_animation_loop+0x314>

	} else if (loop < (h + w)) {
    247c:	e2 30       	cpi	r30, 0x02	; 2
    247e:	91 e0       	ldi	r25, 0x01	; 1
    2480:	f9 07       	cpc	r31, r25
    2482:	6c f4       	brge	.+26     	; 0x249e <lcd_animation_loop+0x2fc>
		uint8_t x21 = (loop - h);
		uint8_t x22 = w - (loop - h) - 1;
		gfx_mono_generic_draw_line (x21, oy + h - 1, x22, oy, sw % 3);
    2484:	63 e0       	ldi	r22, 0x03	; 3
    2486:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__udivmodqi4>
		uint8_t y12 = oy + h - loop - 1;
		gfx_mono_generic_draw_line (0, y11, w - 1, y12, sw % 3);

	} else if (loop < (h + w)) {
		uint8_t x21 = (loop - h);
		uint8_t x22 = w - (loop - h) - 1;
    248a:	41 e0       	ldi	r20, 0x01	; 1
    248c:	4e 1b       	sub	r20, r30
		gfx_mono_generic_draw_line (x21, oy + h - 1, x22, oy, sw % 3);
    248e:	09 2f       	mov	r16, r25
    2490:	2a e0       	ldi	r18, 0x0A	; 10
    2492:	6b e1       	ldi	r22, 0x1B	; 27
    2494:	8e ee       	ldi	r24, 0xEE	; 238
    2496:	8e 0f       	add	r24, r30
    2498:	0e 94 dd 03 	call	0x7ba	; 0x7ba <gfx_mono_generic_draw_line>
    249c:	0c c0       	rjmp	.+24     	; 0x24b6 <lcd_animation_loop+0x314>

	} else {
		loop = 0;
    249e:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <loop.3136+0x1>
    24a2:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <loop.3136>
		if (++sw >= 3) {
    24a6:	8f 5f       	subi	r24, 0xFF	; 255
    24a8:	83 30       	cpi	r24, 0x03	; 3
    24aa:	18 f4       	brcc	.+6      	; 0x24b2 <lcd_animation_loop+0x310>
    24ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <lcd_animation_loop+0x314>
			sw = 0;
    24b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			s_lcd_test_light();
		}

		s_lcd_test_lines();  // Every cycle
	}
}
    24b6:	0f 91       	pop	r16
    24b8:	ff 90       	pop	r15
    24ba:	ef 90       	pop	r14
    24bc:	df 90       	pop	r13
    24be:	cf 90       	pop	r12
    24c0:	08 95       	ret

000024c2 <lcd_test>:

void lcd_test(uint8_t pattern_bm)
{
    24c2:	ef 92       	push	r14
    24c4:	ff 92       	push	r15
    24c6:	0f 93       	push	r16
    24c8:	1f 93       	push	r17
    24ca:	cf 93       	push	r28
    24cc:	c8 2f       	mov	r28, r24
	if (pattern_bm & (1 << 0)) {
    24ce:	80 fd       	sbrc	r24, 0
    24d0:	03 c0       	rjmp	.+6      	; 0x24d8 <lcd_test+0x16>
		for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
			lcd_bus_write_ram(i);
		}
	}

	if (pattern_bm & (1 << 1)) {
    24d2:	c1 ff       	sbrs	r28, 1
    24d4:	22 c0       	rjmp	.+68     	; 0x251a <lcd_test+0x58>
    24d6:	07 c0       	rjmp	.+14     	; 0x24e6 <lcd_test+0x24>
    24d8:	10 e0       	ldi	r17, 0x00	; 0
void lcd_test(uint8_t pattern_bm)
{
	if (pattern_bm & (1 << 0)) {
		// TEST 1
		for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
			lcd_bus_write_ram(i);
    24da:	81 2f       	mov	r24, r17
    24dc:	cc d9       	rcall	.-3176   	; 0x1876 <lcd_bus_write_ram>
    24de:	1f 5f       	subi	r17, 0xFF	; 255

void lcd_test(uint8_t pattern_bm)
{
	if (pattern_bm & (1 << 0)) {
		// TEST 1
		for (int i = 0; i < GFX_MONO_LCD_WIDTH; ++i) {
    24e0:	10 3f       	cpi	r17, 0xF0	; 240
    24e2:	d9 f7       	brne	.-10     	; 0x24da <lcd_test+0x18>
    24e4:	f6 cf       	rjmp	.-20     	; 0x24d2 <lcd_test+0x10>
		}
	}

	if (pattern_bm & (1 << 1)) {
		// TEST 2
		lcd_page_set(2);
    24e6:	82 e0       	ldi	r24, 0x02	; 2
    24e8:	e8 d9       	rcall	.-3120   	; 0x18ba <lcd_page_set>
		lcd_cr();
    24ea:	fd d9       	rcall	.-3078   	; 0x18e6 <lcd_cr>
		for (int i = 0, pos = 231; i < GFX_MONO_LCD_WIDTH; ++i, ++pos) {
    24ec:	00 e0       	ldi	r16, 0x00	; 0
    24ee:	10 e0       	ldi	r17, 0x00	; 0
			if (!(i % 7)) {
    24f0:	87 e0       	ldi	r24, 0x07	; 7
    24f2:	e8 2e       	mov	r14, r24
    24f4:	f1 2c       	mov	r15, r1
    24f6:	c8 01       	movw	r24, r16
    24f8:	b7 01       	movw	r22, r14
    24fa:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__divmodhi4>
    24fe:	89 2b       	or	r24, r25
    2500:	11 f4       	brne	.+4      	; 0x2506 <lcd_test+0x44>
				lcd_bus_write_ram(0);
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	b8 d9       	rcall	.-3216   	; 0x1876 <lcd_bus_write_ram>
    2506:	f8 01       	movw	r30, r16
    2508:	ef 51       	subi	r30, 0x1F	; 31
    250a:	fc 4f       	sbci	r31, 0xFC	; 252
			}
			lcd_bus_write_ram(PROGMEM_READ_BYTE(&(sysfont_glyphs[pos])));
    250c:	84 91       	lpm	r24, Z
    250e:	b3 d9       	rcall	.-3226   	; 0x1876 <lcd_bus_write_ram>

	if (pattern_bm & (1 << 1)) {
		// TEST 2
		lcd_page_set(2);
		lcd_cr();
		for (int i = 0, pos = 231; i < GFX_MONO_LCD_WIDTH; ++i, ++pos) {
    2510:	0f 5f       	subi	r16, 0xFF	; 255
    2512:	1f 4f       	sbci	r17, 0xFF	; 255
    2514:	00 3f       	cpi	r16, 0xF0	; 240
    2516:	11 05       	cpc	r17, r1
    2518:	71 f7       	brne	.-36     	; 0x24f6 <lcd_test+0x34>
			}
			lcd_bus_write_ram(PROGMEM_READ_BYTE(&(sysfont_glyphs[pos])));
		}
	}

	if (pattern_bm & (1 << 2)) {
    251a:	c2 ff       	sbrs	r28, 2
    251c:	2d c0       	rjmp	.+90     	; 0x2578 <lcd_test+0xb6>
		// TEST 3
		gfx_mono_draw_pixel(4 + 0, 40 + 0, GFX_PIXEL_SET);
    251e:	41 e0       	ldi	r20, 0x01	; 1
    2520:	68 e2       	ldi	r22, 0x28	; 40
    2522:	84 e0       	ldi	r24, 0x04	; 4
    2524:	0e 94 45 06 	call	0xc8a	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 1, 40 + 1, GFX_PIXEL_SET);
    2528:	41 e0       	ldi	r20, 0x01	; 1
    252a:	69 e2       	ldi	r22, 0x29	; 41
    252c:	85 e0       	ldi	r24, 0x05	; 5
    252e:	0e 94 45 06 	call	0xc8a	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 2, GFX_PIXEL_SET);
    2532:	41 e0       	ldi	r20, 0x01	; 1
    2534:	6a e2       	ldi	r22, 0x2A	; 42
    2536:	86 e0       	ldi	r24, 0x06	; 6
    2538:	0e 94 45 06 	call	0xc8a	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 3, 40 + 3, GFX_PIXEL_SET);
    253c:	41 e0       	ldi	r20, 0x01	; 1
    253e:	6b e2       	ldi	r22, 0x2B	; 43
    2540:	87 e0       	ldi	r24, 0x07	; 7
    2542:	0e 94 45 06 	call	0xc8a	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 4, GFX_PIXEL_SET);
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	6c e2       	ldi	r22, 0x2C	; 44
    254a:	86 e0       	ldi	r24, 0x06	; 6
    254c:	0e 94 45 06 	call	0xc8a	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 1, 40 + 5, GFX_PIXEL_SET);
    2550:	41 e0       	ldi	r20, 0x01	; 1
    2552:	6d e2       	ldi	r22, 0x2D	; 45
    2554:	85 e0       	ldi	r24, 0x05	; 5
    2556:	0e 94 45 06 	call	0xc8a	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 2, 40 + 6, GFX_PIXEL_SET);
    255a:	41 e0       	ldi	r20, 0x01	; 1
    255c:	6e e2       	ldi	r22, 0x2E	; 46
    255e:	86 e0       	ldi	r24, 0x06	; 6
    2560:	0e 94 45 06 	call	0xc8a	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 3, 40 + 7, GFX_PIXEL_SET);
    2564:	41 e0       	ldi	r20, 0x01	; 1
    2566:	6f e2       	ldi	r22, 0x2F	; 47
    2568:	87 e0       	ldi	r24, 0x07	; 7
    256a:	0e 94 45 06 	call	0xc8a	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
		gfx_mono_draw_pixel(4 + 4, 40 + 8, GFX_PIXEL_SET);
    256e:	41 e0       	ldi	r20, 0x01	; 1
    2570:	60 e3       	ldi	r22, 0x30	; 48
    2572:	88 e0       	ldi	r24, 0x08	; 8
    2574:	0e 94 45 06 	call	0xc8a	; 0xc8a <gfx_mono_lcd_uc1608_draw_pixel>
	}

	if (pattern_bm & (1 << 3)) {
    2578:	c3 ff       	sbrs	r28, 3
    257a:	07 c0       	rjmp	.+14     	; 0x258a <lcd_test+0xc8>
		// TEST 4
		gfx_mono_generic_draw_line (0, 16, 239, 31, GFX_PIXEL_SET);
    257c:	01 e0       	ldi	r16, 0x01	; 1
    257e:	2f e1       	ldi	r18, 0x1F	; 31
    2580:	4f ee       	ldi	r20, 0xEF	; 239
    2582:	60 e1       	ldi	r22, 0x10	; 16
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	0e 94 dd 03 	call	0x7ba	; 0x7ba <gfx_mono_generic_draw_line>
	}

	if (pattern_bm & (1 << 4)) {
    258a:	c4 ff       	sbrs	r28, 4
    258c:	0d c0       	rjmp	.+26     	; 0x25a8 <lcd_test+0xe6>
		// TEST 5
		gfx_mono_generic_draw_rect(        70, 48, 40, 40, GFX_PIXEL_SET);
    258e:	01 e0       	ldi	r16, 0x01	; 1
    2590:	28 e2       	ldi	r18, 0x28	; 40
    2592:	48 e2       	ldi	r20, 0x28	; 40
    2594:	60 e3       	ldi	r22, 0x30	; 48
    2596:	86 e4       	ldi	r24, 0x46	; 70
    2598:	0e 94 4c 04 	call	0x898	; 0x898 <gfx_mono_generic_draw_rect>
		gfx_mono_generic_draw_filled_rect(170, 48, 40, 40, GFX_PIXEL_SET);
    259c:	28 e2       	ldi	r18, 0x28	; 40
    259e:	48 e2       	ldi	r20, 0x28	; 40
    25a0:	60 e3       	ldi	r22, 0x30	; 48
    25a2:	8a ea       	ldi	r24, 0xAA	; 170
    25a4:	0e 94 6f 04 	call	0x8de	; 0x8de <gfx_mono_generic_draw_filled_rect>
	}

	if (pattern_bm & (1 << 5)) {
    25a8:	c5 ff       	sbrs	r28, 5
    25aa:	0d c0       	rjmp	.+26     	; 0x25c6 <lcd_test+0x104>
		// TEST 6
		gfx_mono_generic_draw_circle(       10, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    25ac:	0f ef       	ldi	r16, 0xFF	; 255
    25ae:	21 e0       	ldi	r18, 0x01	; 1
    25b0:	4a e0       	ldi	r20, 0x0A	; 10
    25b2:	60 e5       	ldi	r22, 0x50	; 80
    25b4:	8a e0       	ldi	r24, 0x0A	; 10
    25b6:	0e 94 89 04 	call	0x912	; 0x912 <gfx_mono_generic_draw_circle>
		gfx_mono_generic_draw_filled_circle(40, 80, 10, GFX_PIXEL_SET, GFX_WHOLE);
    25ba:	21 e0       	ldi	r18, 0x01	; 1
    25bc:	4a e0       	ldi	r20, 0x0A	; 10
    25be:	60 e5       	ldi	r22, 0x50	; 80
    25c0:	88 e2       	ldi	r24, 0x28	; 40
    25c2:	0e 94 39 05 	call	0xa72	; 0xa72 <gfx_mono_generic_draw_filled_circle>
	}

	if (pattern_bm & (1 << 6)) {
    25c6:	c6 ff       	sbrs	r28, 6
    25c8:	08 c0       	rjmp	.+16     	; 0x25da <lcd_test+0x118>
		// TEST 7
		gfx_mono_draw_string("DF4IAH Smart-LCD", 70, 32, &sysfont);
    25ca:	23 e0       	ldi	r18, 0x03	; 3
    25cc:	31 e0       	ldi	r19, 0x01	; 1
    25ce:	40 e2       	ldi	r20, 0x20	; 32
    25d0:	66 e4       	ldi	r22, 0x46	; 70
    25d2:	89 e6       	ldi	r24, 0x69	; 105
    25d4:	92 e0       	ldi	r25, 0x02	; 2
    25d6:	0e 94 c3 06 	call	0xd86	; 0xd86 <gfx_mono_draw_string>
	}

	if (pattern_bm & (1 << 7)) {
    25da:	c7 ff       	sbrs	r28, 7
    25dc:	0c c0       	rjmp	.+24     	; 0x25f6 <lcd_test+0x134>
		// TEST 8
		lcd_animation_prepare();
    25de:	61 dd       	rcall	.-1342   	; 0x20a2 <lcd_animation_prepare>

		g_status.doAnimation = true;
    25e0:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <g_status>
    25e4:	81 60       	ori	r24, 0x01	; 1
    25e6:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <g_status>
		lcd_animation_loop();
	}
}
    25ea:	cf 91       	pop	r28
    25ec:	1f 91       	pop	r17
    25ee:	0f 91       	pop	r16
    25f0:	ff 90       	pop	r15
    25f2:	ef 90       	pop	r14
	if (pattern_bm & (1 << 7)) {
		// TEST 8
		lcd_animation_prepare();

		g_status.doAnimation = true;
		lcd_animation_loop();
    25f4:	d6 cd       	rjmp	.-1108   	; 0x21a2 <lcd_animation_loop>
	}
}
    25f6:	cf 91       	pop	r28
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	ff 90       	pop	r15
    25fe:	ef 90       	pop	r14
    2600:	08 95       	ret

00002602 <isr_lcd_10mhz_ref_osc_show_clk_state>:
/* ISR - interrupt disabled functions called within the TWI interrupt handling */

void isr_lcd_10mhz_ref_osc_show_clk_state(uint8_t clk_state, int16_t phase100)
{
	// interrupt is already disabled, here
	if (g_showData.clkState_clk_state != clk_state ||
    2602:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <g_showData+0x14>
    2606:	98 13       	cpse	r25, r24
    2608:	07 c0       	rjmp	.+14     	; 0x2618 <isr_lcd_10mhz_ref_osc_show_clk_state+0x16>
    260a:	20 91 86 03 	lds	r18, 0x0386	; 0x800386 <g_showData+0x2>
    260e:	30 91 87 03 	lds	r19, 0x0387	; 0x800387 <g_showData+0x3>
    2612:	26 17       	cp	r18, r22
    2614:	37 07       	cpc	r19, r23
    2616:	59 f0       	breq	.+22     	; 0x262e <isr_lcd_10mhz_ref_osc_show_clk_state+0x2c>
			g_showData.clkState_phase100 != phase100) {
		g_showData.newClkState = true;
    2618:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <g_showData>
    261c:	91 60       	ori	r25, 0x01	; 1
    261e:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <g_showData>
		g_showData.clkState_clk_state = clk_state;
    2622:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <g_showData+0x14>
		g_showData.clkState_phase100 = phase100;
    2626:	70 93 87 03 	sts	0x0387, r23	; 0x800387 <g_showData+0x3>
    262a:	60 93 86 03 	sts	0x0386, r22	; 0x800386 <g_showData+0x2>
    262e:	08 95       	ret

00002630 <isr_lcd_10mhz_ref_osc_show_date>:
}

void isr_lcd_10mhz_ref_osc_show_date(uint16_t year, int8_t month, uint8_t day)
{
	// interrupt is already disabled, here
	if (g_showData.date_year != year ||
    2630:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <g_showData+0x4>
    2634:	30 91 89 03 	lds	r19, 0x0389	; 0x800389 <g_showData+0x5>
    2638:	28 17       	cp	r18, r24
    263a:	39 07       	cpc	r19, r25
    263c:	71 f4       	brne	.+28     	; 0x265a <isr_lcd_10mhz_ref_osc_show_date+0x2a>
			g_showData.date_month != month ||
    263e:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <g_showData+0x15>
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	e6 2f       	mov	r30, r22
    2646:	06 2e       	mov	r0, r22
    2648:	00 0c       	add	r0, r0
    264a:	ff 0b       	sbc	r31, r31
}

void isr_lcd_10mhz_ref_osc_show_date(uint16_t year, int8_t month, uint8_t day)
{
	// interrupt is already disabled, here
	if (g_showData.date_year != year ||
    264c:	2e 17       	cp	r18, r30
    264e:	3f 07       	cpc	r19, r31
    2650:	21 f4       	brne	.+8      	; 0x265a <isr_lcd_10mhz_ref_osc_show_date+0x2a>
			g_showData.date_month != month ||
    2652:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <g_showData+0x16>
    2656:	24 17       	cp	r18, r20
    2658:	69 f0       	breq	.+26     	; 0x2674 <isr_lcd_10mhz_ref_osc_show_date+0x44>
			g_showData.date_day != day) {
		g_showData.newDate = true;
    265a:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <g_showData>
    265e:	22 60       	ori	r18, 0x02	; 2
    2660:	20 93 84 03 	sts	0x0384, r18	; 0x800384 <g_showData>
		g_showData.date_year = year;
    2664:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <g_showData+0x5>
    2668:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <g_showData+0x4>
		g_showData.date_month = month;
    266c:	60 93 99 03 	sts	0x0399, r22	; 0x800399 <g_showData+0x15>
		g_showData.date_day = day;
    2670:	40 93 9a 03 	sts	0x039A, r20	; 0x80039a <g_showData+0x16>
    2674:	08 95       	ret

00002676 <isr_lcd_10mhz_ref_osc_show_time>:
}

void isr_lcd_10mhz_ref_osc_show_time(uint8_t hour, int8_t minute, uint8_t second)
{
	// interrupt is already disabled, here
	if (g_showData.time_hour != hour ||
    2676:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <g_showData+0x17>
    267a:	98 13       	cpse	r25, r24
    267c:	0e c0       	rjmp	.+28     	; 0x269a <isr_lcd_10mhz_ref_osc_show_time+0x24>
			g_showData.time_minute != minute ||
    267e:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <g_showData+0x18>
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	e6 2f       	mov	r30, r22
    2686:	06 2e       	mov	r0, r22
    2688:	00 0c       	add	r0, r0
    268a:	ff 0b       	sbc	r31, r31
}

void isr_lcd_10mhz_ref_osc_show_time(uint8_t hour, int8_t minute, uint8_t second)
{
	// interrupt is already disabled, here
	if (g_showData.time_hour != hour ||
    268c:	2e 17       	cp	r18, r30
    268e:	3f 07       	cpc	r19, r31
    2690:	21 f4       	brne	.+8      	; 0x269a <isr_lcd_10mhz_ref_osc_show_time+0x24>
			g_showData.time_minute != minute ||
    2692:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <g_showData+0x19>
    2696:	94 17       	cp	r25, r20
    2698:	59 f0       	breq	.+22     	; 0x26b0 <isr_lcd_10mhz_ref_osc_show_time+0x3a>
			g_showData.time_second != second) {
		g_showData.newTime = true;
    269a:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <g_showData>
    269e:	94 60       	ori	r25, 0x04	; 4
    26a0:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <g_showData>
		g_showData.time_hour = hour;
    26a4:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <g_showData+0x17>
		g_showData.time_minute = minute;
    26a8:	60 93 9c 03 	sts	0x039C, r22	; 0x80039c <g_showData+0x18>
		g_showData.time_second = second;
    26ac:	40 93 9d 03 	sts	0x039D, r20	; 0x80039d <g_showData+0x19>
    26b0:	08 95       	ret

000026b2 <isr_lcd_10mhz_ref_osc_show_ppm>:
}

void isr_lcd_10mhz_ref_osc_show_ppm(int16_t ppm_int, uint16_t ppm_frac1000)
{
	// interrupt is already disabled, here
	if (g_showData.ppb_int != ppm_int ||
    26b2:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <g_showData+0x6>
    26b6:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <g_showData+0x7>
    26ba:	28 17       	cp	r18, r24
    26bc:	39 07       	cpc	r19, r25
    26be:	39 f4       	brne	.+14     	; 0x26ce <isr_lcd_10mhz_ref_osc_show_ppm+0x1c>
    26c0:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <g_showData+0x8>
    26c4:	30 91 8d 03 	lds	r19, 0x038D	; 0x80038d <g_showData+0x9>
    26c8:	26 17       	cp	r18, r22
    26ca:	37 07       	cpc	r19, r23
    26cc:	69 f0       	breq	.+26     	; 0x26e8 <isr_lcd_10mhz_ref_osc_show_ppm+0x36>
			g_showData.ppb_frac1000 != ppm_frac1000) {
		g_showData.newPpb = true;
    26ce:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <g_showData>
    26d2:	28 60       	ori	r18, 0x08	; 8
    26d4:	20 93 84 03 	sts	0x0384, r18	; 0x800384 <g_showData>
		g_showData.ppb_int = ppm_int;
    26d8:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <g_showData+0x7>
    26dc:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <g_showData+0x6>
		g_showData.ppb_frac1000 = ppm_frac1000;
    26e0:	70 93 8d 03 	sts	0x038D, r23	; 0x80038d <g_showData+0x9>
    26e4:	60 93 8c 03 	sts	0x038C, r22	; 0x80038c <g_showData+0x8>
    26e8:	08 95       	ret

000026ea <isr_lcd_10mhz_ref_osc_show_pwm>:
}

void isr_lcd_10mhz_ref_osc_show_pwm(uint8_t pwm_int, uint8_t pwm_frac256)
{
	// interrupt is already disabled, here
	if (g_showData.pwm_int != pwm_int ||
    26ea:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <g_showData+0x1a>
    26ee:	98 13       	cpse	r25, r24
    26f0:	04 c0       	rjmp	.+8      	; 0x26fa <isr_lcd_10mhz_ref_osc_show_pwm+0x10>
    26f2:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <g_showData+0x1b>
    26f6:	96 17       	cp	r25, r22
    26f8:	49 f0       	breq	.+18     	; 0x270c <isr_lcd_10mhz_ref_osc_show_pwm+0x22>
			g_showData.pwm_frac256 != pwm_frac256) {
		g_showData.newPwm = true;
    26fa:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <g_showData>
    26fe:	90 61       	ori	r25, 0x10	; 16
    2700:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <g_showData>
		g_showData.pwm_int = pwm_int;
    2704:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <g_showData+0x1a>
		g_showData.pwm_frac256 = pwm_frac256;
    2708:	60 93 9f 03 	sts	0x039F, r22	; 0x80039f <g_showData+0x1b>
    270c:	08 95       	ret

0000270e <isr_lcd_10mhz_ref_osc_show_pv>:
}

void isr_lcd_10mhz_ref_osc_show_pv(uint8_t pv_int, uint16_t pv_frac1000)
{
	// interrupt is already disabled, here
	if (g_showData.pv_int != pv_int ||
    270e:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <g_showData+0x1c>
    2712:	98 13       	cpse	r25, r24
    2714:	07 c0       	rjmp	.+14     	; 0x2724 <isr_lcd_10mhz_ref_osc_show_pv+0x16>
    2716:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <g_showData+0xa>
    271a:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <g_showData+0xb>
    271e:	26 17       	cp	r18, r22
    2720:	37 07       	cpc	r19, r23
    2722:	59 f0       	breq	.+22     	; 0x273a <isr_lcd_10mhz_ref_osc_show_pv+0x2c>
			g_showData.pv_frac1000 != pv_frac1000) {
		g_showData.newPv = true;
    2724:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <g_showData>
    2728:	90 62       	ori	r25, 0x20	; 32
    272a:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <g_showData>
		g_showData.pv_int = pv_int;
    272e:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <g_showData+0x1c>
		g_showData.pv_frac1000 = pv_frac1000;
    2732:	70 93 8f 03 	sts	0x038F, r23	; 0x80038f <g_showData+0xb>
    2736:	60 93 8e 03 	sts	0x038E, r22	; 0x80038e <g_showData+0xa>
    273a:	08 95       	ret

0000273c <isr_lcd_10mhz_ref_osc_show_sat_use>:
}

void isr_lcd_10mhz_ref_osc_show_sat_use(uint8_t sat_west, uint8_t sat_east, uint8_t sat_used)
{
	// interrupt is already disabled, here
	if (g_showData.satUse_west != sat_west ||
    273c:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <g_showData+0x1d>
    2740:	98 13       	cpse	r25, r24
    2742:	08 c0       	rjmp	.+16     	; 0x2754 <isr_lcd_10mhz_ref_osc_show_sat_use+0x18>
    2744:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <g_showData+0x1e>
    2748:	96 13       	cpse	r25, r22
    274a:	04 c0       	rjmp	.+8      	; 0x2754 <isr_lcd_10mhz_ref_osc_show_sat_use+0x18>
			g_showData.satUse_east != sat_east ||
    274c:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <g_showData+0x1f>
    2750:	94 17       	cp	r25, r20
    2752:	59 f0       	breq	.+22     	; 0x276a <isr_lcd_10mhz_ref_osc_show_sat_use+0x2e>
			g_showData.satUse_used != sat_used) {
		g_showData.newSatUse = true;
    2754:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <g_showData>
    2758:	90 64       	ori	r25, 0x40	; 64
    275a:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <g_showData>
		g_showData.satUse_west = sat_west;
    275e:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <g_showData+0x1d>
		g_showData.satUse_east = sat_east;
    2762:	60 93 a2 03 	sts	0x03A2, r22	; 0x8003a2 <g_showData+0x1e>
		g_showData.satUse_used = sat_used;
    2766:	40 93 a3 03 	sts	0x03A3, r20	; 0x8003a3 <g_showData+0x1f>
    276a:	08 95       	ret

0000276c <isr_lcd_10mhz_ref_osc_show_sat_dop>:
}

void isr_lcd_10mhz_ref_osc_show_sat_dop(uint16_t sat_dop100)
{
	// interrupt is already disabled, here
	if (g_showData.satDop_dop100 != sat_dop100) {
    276c:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <g_showData+0xc>
    2770:	30 91 91 03 	lds	r19, 0x0391	; 0x800391 <g_showData+0xd>
    2774:	28 17       	cp	r18, r24
    2776:	39 07       	cpc	r19, r25
    2778:	49 f0       	breq	.+18     	; 0x278c <isr_lcd_10mhz_ref_osc_show_sat_dop+0x20>
		g_showData.newSatDop = true;
    277a:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <g_showData>
    277e:	20 68       	ori	r18, 0x80	; 128
    2780:	20 93 84 03 	sts	0x0384, r18	; 0x800384 <g_showData>
		g_showData.satDop_dop100 = sat_dop100;
    2784:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <g_showData+0xd>
    2788:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <g_showData+0xc>
    278c:	08 95       	ret

0000278e <isr_lcd_10mhz_ref_osc_show_pos_state>:
}

void isr_lcd_10mhz_ref_osc_show_pos_state(uint8_t state_fi, uint8_t state_m2)
{
	// interrupt is already disabled, here
	if (g_showData.posState_fi != state_fi ||
    278e:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <g_showData+0x20>
    2792:	98 13       	cpse	r25, r24
    2794:	04 c0       	rjmp	.+8      	; 0x279e <isr_lcd_10mhz_ref_osc_show_pos_state+0x10>
    2796:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <g_showData+0x21>
    279a:	96 17       	cp	r25, r22
    279c:	49 f0       	breq	.+18     	; 0x27b0 <isr_lcd_10mhz_ref_osc_show_pos_state+0x22>
			g_showData.posState_m2 != state_m2) {
		g_showData.newPosState = true;
    279e:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <g_showData+0x1>
    27a2:	91 60       	ori	r25, 0x01	; 1
    27a4:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <g_showData+0x1>
		g_showData.posState_fi = state_fi;
    27a8:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <g_showData+0x20>
		g_showData.posState_m2 = state_m2;
    27ac:	60 93 a5 03 	sts	0x03A5, r22	; 0x8003a5 <g_showData+0x21>
    27b0:	08 95       	ret

000027b2 <isr_lcd_10mhz_ref_osc_show_pos_lat>:
}

void isr_lcd_10mhz_ref_osc_show_pos_lat(uint8_t lat_sgn, uint8_t lat_deg, uint8_t lat_min_int, uint16_t lat_min_frac10000)
{
	// interrupt is already disabled, here
	if (g_showData.posLat_sgn != lat_sgn ||
    27b2:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <g_showData+0x22>
    27b6:	98 13       	cpse	r25, r24
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <isr_lcd_10mhz_ref_osc_show_pos_lat+0x26>
    27ba:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <g_showData+0x23>
    27be:	96 13       	cpse	r25, r22
    27c0:	0b c0       	rjmp	.+22     	; 0x27d8 <isr_lcd_10mhz_ref_osc_show_pos_lat+0x26>
			g_showData.posLat_deg != lat_deg ||
    27c2:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <g_showData+0x24>
    27c6:	94 13       	cpse	r25, r20
    27c8:	07 c0       	rjmp	.+14     	; 0x27d8 <isr_lcd_10mhz_ref_osc_show_pos_lat+0x26>
			g_showData.posLat_min_int != lat_min_int ||
			g_showData.posLat_min_int != lat_min_int ||
    27ca:	e0 91 92 03 	lds	r30, 0x0392	; 0x800392 <g_showData+0xe>
    27ce:	f0 91 93 03 	lds	r31, 0x0393	; 0x800393 <g_showData+0xf>
    27d2:	e2 17       	cp	r30, r18
    27d4:	f3 07       	cpc	r31, r19
    27d6:	79 f0       	breq	.+30     	; 0x27f6 <isr_lcd_10mhz_ref_osc_show_pos_lat+0x44>
			g_showData.posLat_min_frac10000 != lat_min_frac10000) {
		g_showData.newPosLat = true;
    27d8:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <g_showData+0x1>
    27dc:	92 60       	ori	r25, 0x02	; 2
    27de:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <g_showData+0x1>
		g_showData.posLat_sgn = lat_sgn;
    27e2:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <g_showData+0x22>
		g_showData.posLat_deg = lat_deg;
    27e6:	60 93 a7 03 	sts	0x03A7, r22	; 0x8003a7 <g_showData+0x23>
		g_showData.posLat_min_int = lat_min_int;
    27ea:	40 93 a8 03 	sts	0x03A8, r20	; 0x8003a8 <g_showData+0x24>
		g_showData.posLat_min_frac10000 = lat_min_frac10000;
    27ee:	30 93 93 03 	sts	0x0393, r19	; 0x800393 <g_showData+0xf>
    27f2:	20 93 92 03 	sts	0x0392, r18	; 0x800392 <g_showData+0xe>
    27f6:	08 95       	ret

000027f8 <isr_lcd_10mhz_ref_osc_show_pos_lon>:
}

void isr_lcd_10mhz_ref_osc_show_pos_lon(uint8_t lon_sgn, uint8_t lon_deg, uint8_t lon_min_int, uint16_t lon_min_frac10000)
{
	// interrupt is already disabled, here
	if (g_showData.posLon_sgn != lon_sgn ||
    27f8:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <g_showData+0x25>
    27fc:	98 13       	cpse	r25, r24
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <isr_lcd_10mhz_ref_osc_show_pos_lon+0x26>
    2800:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <g_showData+0x26>
    2804:	96 13       	cpse	r25, r22
    2806:	0b c0       	rjmp	.+22     	; 0x281e <isr_lcd_10mhz_ref_osc_show_pos_lon+0x26>
			g_showData.posLon_deg != lon_deg ||
			g_showData.posLon_deg != lon_deg ||
    2808:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <g_showData+0x27>
    280c:	94 13       	cpse	r25, r20
    280e:	07 c0       	rjmp	.+14     	; 0x281e <isr_lcd_10mhz_ref_osc_show_pos_lon+0x26>
			g_showData.posLon_min_int != lon_min_int ||
    2810:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <g_showData+0x10>
    2814:	f0 91 95 03 	lds	r31, 0x0395	; 0x800395 <g_showData+0x11>
    2818:	e2 17       	cp	r30, r18
    281a:	f3 07       	cpc	r31, r19
    281c:	79 f0       	breq	.+30     	; 0x283c <isr_lcd_10mhz_ref_osc_show_pos_lon+0x44>
			g_showData.posLon_min_frac10000 != lon_min_frac10000) {
		g_showData.newPosLon = true;
    281e:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <g_showData+0x1>
    2822:	94 60       	ori	r25, 0x04	; 4
    2824:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <g_showData+0x1>
		g_showData.posLon_sgn = lon_sgn;
    2828:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <g_showData+0x25>
		g_showData.posLon_deg = lon_deg;
    282c:	60 93 aa 03 	sts	0x03AA, r22	; 0x8003aa <g_showData+0x26>
		g_showData.posLon_min_int = lon_min_int;
    2830:	40 93 ab 03 	sts	0x03AB, r20	; 0x8003ab <g_showData+0x27>
		g_showData.posLon_min_frac10000 = lon_min_frac10000;
    2834:	30 93 95 03 	sts	0x0395, r19	; 0x800395 <g_showData+0x11>
    2838:	20 93 94 03 	sts	0x0394, r18	; 0x800394 <g_showData+0x10>
    283c:	08 95       	ret

0000283e <isr_lcd_10mhz_ref_osc_show_pos_height>:
}

void isr_lcd_10mhz_ref_osc_show_pos_height(int16_t height_int, uint8_t height_frac100)
{
	// interrupt is already disabled, here
	if (g_showData.pos_height_int != height_int || g_showData.pos_height_frac100 != height_frac100) {
    283e:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <g_showData+0x12>
    2842:	30 91 97 03 	lds	r19, 0x0397	; 0x800397 <g_showData+0x13>
    2846:	28 17       	cp	r18, r24
    2848:	39 07       	cpc	r19, r25
    284a:	21 f4       	brne	.+8      	; 0x2854 <isr_lcd_10mhz_ref_osc_show_pos_height+0x16>
    284c:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <g_showData+0x28>
    2850:	26 17       	cp	r18, r22
    2852:	59 f0       	breq	.+22     	; 0x286a <isr_lcd_10mhz_ref_osc_show_pos_height+0x2c>
		g_showData.newPosHeight = true;
    2854:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <g_showData+0x1>
    2858:	28 60       	ori	r18, 0x08	; 8
    285a:	20 93 85 03 	sts	0x0385, r18	; 0x800385 <g_showData+0x1>
		g_showData.pos_height_int = height_int;
    285e:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <g_showData+0x13>
    2862:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <g_showData+0x12>
		g_showData.pos_height_frac100 = height_frac100;
    2866:	60 93 ac 03 	sts	0x03AC, r22	; 0x8003ac <g_showData+0x28>
    286a:	08 95       	ret

0000286c <lcd_get_sysfont>:


const void* lcd_get_sysfont(void)
{
	return &sysfont;
}
    286c:	83 e0       	ldi	r24, 0x03	; 3
    286e:	91 e0       	ldi	r25, 0x01	; 1
    2870:	08 95       	ret

00002872 <lcd_init>:
uint8_t lcd_init(void)
{
	uint8_t data;

	/* INIT sequence */
	lcd_bus_write_cmd(0b11100010);									// Reset display
    2872:	82 ee       	ldi	r24, 0xE2	; 226
    2874:	0e 94 09 0c 	call	0x1812	; 0x1812 <lcd_bus_write_cmd>
	delay_ms(20);													// Wait for the panel to get ready in case one is attached to the bus
    2878:	6b e2       	ldi	r22, 0x2B	; 43
    287a:	78 e6       	ldi	r23, 0x68	; 104
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__portable_avr_delay_cycles>

	data = lcd_bus_read_status();									// Get current status
    2884:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_bus_read_status>
	if (!(data & C_LCD_STATUS_M)) {
    2888:	87 fd       	sbrc	r24, 7
    288a:	05 c0       	rjmp	.+10     	; 0x2896 <lcd_init+0x24>
    288c:	0e 94 16 0c 	call	0x182c	; 0x182c <lcd_enable.part.0>
		/* LCD panel reacts correctly - resume with INIT sequence */
		lcd_enable(true);
		lcd_cls();													// Clear screen
    2890:	35 d8       	rcall	.-3990   	; 0x18fc <lcd_cls>
		return 0;													// Return OK
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	08 95       	ret

	} else {
		return 1;													// Return failure
    2896:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    2898:	08 95       	ret

0000289a <lcd_shutdown>:

void lcd_shutdown(void)
{
	lcd_bus_write_cmd(0b11100010);									// Reset display
    289a:	82 ee       	ldi	r24, 0xE2	; 226
    289c:	0e 94 09 0c 	call	0x1812	; 0x1812 <lcd_bus_write_cmd>
	delay_ms(2);													// Wait for the energy to dissipate
    28a0:	6b e6       	ldi	r22, 0x6B	; 107
    28a2:	7a e0       	ldi	r23, 0x0A	; 10
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__portable_avr_delay_cycles>

000028ac <s_twi_tx_done>:
#endif

static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
    28ac:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <s_tx_next_len>
    28b0:	22 23       	and	r18, r18
    28b2:	61 f0       	breq	.+24     	; 0x28cc <s_twi_tx_done+0x20>
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
    28b4:	82 2f       	mov	r24, r18
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	fc 01       	movw	r30, r24
    28ba:	ec 58       	subi	r30, 0x8C	; 140
    28bc:	fc 4f       	sbci	r31, 0xFC	; 252
			s_tx_d[idx] = s_tx_next_d[idx];
    28be:	10 82       	st	Z, r1
static void s_twi_tx_done(void)
{
	// Called when  s_tx_lock == 0
	if (s_tx_next_len) {
		// Load	next master message
		for (int idx = s_tx_next_len; idx >= 0; --idx) {
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	d0 f7       	brcc	.-12     	; 0x28b8 <s_twi_tx_done+0xc>
			s_tx_d[idx] = s_tx_next_d[idx];
		}
		s_tx_len = s_tx_next_len;
    28c4:	20 93 7c 03 	sts	0x037C, r18	; 0x80037c <s_tx_len>
		s_tx_next_len = 0;
    28c8:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <s_tx_next_len>
    28cc:	08 95       	ret

000028ce <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2>:

static void s_isr_twi_rcvd_command_closed_form(uint8_t data[], uint8_t cnt)
{
	uint8_t prepareBuf[4] = { 0 };
	uint8_t isGCA	= !data[0];
	uint8_t cmd		=  data[1];
    28ce:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <s_rx_d+0x1>
			{
				// do nothing
			}
		}

	} else if (data[0] == TWI_SLAVE_ADDR_10MHZREFOSC) {
    28d2:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <s_rx_d>
    28d6:	92 32       	cpi	r25, 0x22	; 34
    28d8:	09 f0       	breq	.+2      	; 0x28dc <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xe>
    28da:	b5 c0       	rjmp	.+362    	; 0x2a46 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x178>
		g_status.doAnimation = false;			// stop animation demo
    28dc:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <g_status>
    28e0:	9e 7f       	andi	r25, 0xFE	; 254
    28e2:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <g_status>

		switch (cmd) {
    28e6:	85 38       	cpi	r24, 0x85	; 133
    28e8:	09 f4       	brne	.+2      	; 0x28ec <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x1e>
    28ea:	64 c0       	rjmp	.+200    	; 0x29b4 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xe6>
    28ec:	a8 f4       	brcc	.+42     	; 0x2918 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x4a>
    28ee:	81 38       	cpi	r24, 0x81	; 129
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x26>
    28f2:	3d c0       	rjmp	.+122    	; 0x296e <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xa0>
    28f4:	28 f4       	brcc	.+10     	; 0x2900 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x32>
    28f6:	81 30       	cpi	r24, 0x01	; 1
    28f8:	19 f1       	breq	.+70     	; 0x2940 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x72>
    28fa:	80 38       	cpi	r24, 0x80	; 128
    28fc:	69 f1       	breq	.+90     	; 0x2958 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x8a>
    28fe:	08 95       	ret
    2900:	83 38       	cpi	r24, 0x83	; 131
    2902:	09 f4       	brne	.+2      	; 0x2906 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x38>
    2904:	41 c0       	rjmp	.+130    	; 0x2988 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xba>
    2906:	08 f0       	brcs	.+2      	; 0x290a <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x3c>
    2908:	50 c0       	rjmp	.+160    	; 0x29aa <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xdc>
			case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
			isr_lcd_10mhz_ref_osc_show_date(data[2] | (data[3] << 8), data[4], data[5]);
			break;

			case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
			isr_lcd_10mhz_ref_osc_show_time(data[2], data[3], data[4]);
    290a:	40 91 6f 03 	lds	r20, 0x036F	; 0x80036f <s_rx_d+0x4>
    290e:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <s_rx_d+0x3>
    2912:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <s_rx_d+0x2>
    2916:	af ce       	rjmp	.-674    	; 0x2676 <isr_lcd_10mhz_ref_osc_show_time>
		}

	} else if (data[0] == TWI_SLAVE_ADDR_10MHZREFOSC) {
		g_status.doAnimation = false;			// stop animation demo

		switch (cmd) {
    2918:	8a 38       	cpi	r24, 0x8A	; 138
    291a:	09 f4       	brne	.+2      	; 0x291e <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x50>
    291c:	66 c0       	rjmp	.+204    	; 0x29ea <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x11c>
    291e:	38 f4       	brcc	.+14     	; 0x292e <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x60>
    2920:	88 38       	cpi	r24, 0x88	; 136
    2922:	09 f4       	brne	.+2      	; 0x2926 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x58>
    2924:	52 c0       	rjmp	.+164    	; 0x29ca <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0xfc>
    2926:	89 38       	cpi	r24, 0x89	; 137
    2928:	09 f4       	brne	.+2      	; 0x292c <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x5e>
    292a:	56 c0       	rjmp	.+172    	; 0x29d8 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x10a>
    292c:	08 95       	ret
    292e:	8c 38       	cpi	r24, 0x8C	; 140
    2930:	09 f4       	brne	.+2      	; 0x2934 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x66>
    2932:	6f c0       	rjmp	.+222    	; 0x2a12 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x144>
    2934:	08 f4       	brcc	.+2      	; 0x2938 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x6a>
    2936:	5e c0       	rjmp	.+188    	; 0x29f4 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x126>
    2938:	8d 38       	cpi	r24, 0x8D	; 141
    293a:	09 f4       	brne	.+2      	; 0x293e <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x70>
    293c:	79 c0       	rjmp	.+242    	; 0x2a30 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x162>
    293e:	08 95       	ret
}

static void s_twi_rx_prepare(uint8_t msgCnt, uint8_t msg[])
{
	if (msgCnt && msg) {
		if (!s_rx_lock) {
    2940:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <s_rx_lock>
    2944:	91 11       	cpse	r25, r1
    2946:	7f c0       	rjmp	.+254    	; 0x2a46 <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2+0x178>
			// Prepare master message buffer
			for (int idx = msgCnt; idx >= 0; --idx) {
				s_rx_d[idx] = msg[idx];
    2948:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <s_rx_d+0x1>
    294c:	90 e1       	ldi	r25, 0x10	; 16
    294e:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <s_rx_d>
			}
			s_rx_len = msgCnt;
    2952:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <s_rx_len>
    2956:	08 95       	ret
			prepareBuf[0] = VERSION;
			s_twi_rx_prepare(1, prepareBuf);
			break;

			case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
			isr_lcd_10mhz_ref_osc_show_clk_state(data[2], (int16_t) (data[3] | (data[4] << 8)));
    2958:	60 91 6f 03 	lds	r22, 0x036F	; 0x80036f <s_rx_d+0x4>
    295c:	70 e0       	ldi	r23, 0x00	; 0
    295e:	76 2f       	mov	r23, r22
    2960:	66 27       	eor	r22, r22
    2962:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <s_rx_d+0x3>
    2966:	68 2b       	or	r22, r24
    2968:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <s_rx_d+0x2>
    296c:	4a ce       	rjmp	.-876    	; 0x2602 <isr_lcd_10mhz_ref_osc_show_clk_state>
			break;

			case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
			isr_lcd_10mhz_ref_osc_show_date(data[2] | (data[3] << 8), data[4], data[5]);
    296e:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <s_rx_d+0x3>
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	98 2f       	mov	r25, r24
    2976:	88 27       	eor	r24, r24
    2978:	20 91 6d 03 	lds	r18, 0x036D	; 0x80036d <s_rx_d+0x2>
    297c:	40 91 70 03 	lds	r20, 0x0370	; 0x800370 <s_rx_d+0x5>
    2980:	60 91 6f 03 	lds	r22, 0x036F	; 0x80036f <s_rx_d+0x4>
    2984:	82 2b       	or	r24, r18
    2986:	54 ce       	rjmp	.-856    	; 0x2630 <isr_lcd_10mhz_ref_osc_show_date>
			case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
			isr_lcd_10mhz_ref_osc_show_time(data[2], data[3], data[4]);
			break;

			case TWI_SMART_LCD_CMD_SHOW_PPM:
			isr_lcd_10mhz_ref_osc_show_ppm((int16_t) (data[2] | (data[3] << 8)), data[4] | (data[5] << 8));
    2988:	60 91 70 03 	lds	r22, 0x0370	; 0x800370 <s_rx_d+0x5>
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	76 2f       	mov	r23, r22
    2990:	66 27       	eor	r22, r22
    2992:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <s_rx_d+0x4>
    2996:	68 2b       	or	r22, r24
    2998:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <s_rx_d+0x3>
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	98 2f       	mov	r25, r24
    29a0:	88 27       	eor	r24, r24
    29a2:	20 91 6d 03 	lds	r18, 0x036D	; 0x80036d <s_rx_d+0x2>
    29a6:	82 2b       	or	r24, r18
    29a8:	84 ce       	rjmp	.-760    	; 0x26b2 <isr_lcd_10mhz_ref_osc_show_ppm>
			break;

			case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
			isr_lcd_10mhz_ref_osc_show_pwm(data[2], data[3]);
    29aa:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <s_rx_d+0x3>
    29ae:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <s_rx_d+0x2>
    29b2:	9b ce       	rjmp	.-714    	; 0x26ea <isr_lcd_10mhz_ref_osc_show_pwm>
			break;

			case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
			isr_lcd_10mhz_ref_osc_show_pv(data[2], data[3] | (data[4] << 8));
    29b4:	60 91 6f 03 	lds	r22, 0x036F	; 0x80036f <s_rx_d+0x4>
    29b8:	70 e0       	ldi	r23, 0x00	; 0
    29ba:	76 2f       	mov	r23, r22
    29bc:	66 27       	eor	r22, r22
    29be:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <s_rx_d+0x3>
    29c2:	68 2b       	or	r22, r24
    29c4:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <s_rx_d+0x2>
    29c8:	a2 ce       	rjmp	.-700    	; 0x270e <isr_lcd_10mhz_ref_osc_show_pv>
			break;

			case TWI_SMART_LCD_CMD_SHOW_SATS:
			isr_lcd_10mhz_ref_osc_show_sat_use(data[2], data[3], data[4]);
    29ca:	40 91 6f 03 	lds	r20, 0x036F	; 0x80036f <s_rx_d+0x4>
    29ce:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <s_rx_d+0x3>
    29d2:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <s_rx_d+0x2>
    29d6:	b2 ce       	rjmp	.-668    	; 0x273c <isr_lcd_10mhz_ref_osc_show_sat_use>
			break;

			case TWI_SMART_LCD_CMD_SHOW_DOP:
			isr_lcd_10mhz_ref_osc_show_sat_dop(data[2] | (data[3] << 8));
    29d8:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <s_rx_d+0x3>
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	98 2f       	mov	r25, r24
    29e0:	88 27       	eor	r24, r24
    29e2:	20 91 6d 03 	lds	r18, 0x036D	; 0x80036d <s_rx_d+0x2>
    29e6:	82 2b       	or	r24, r18
    29e8:	c1 ce       	rjmp	.-638    	; 0x276c <isr_lcd_10mhz_ref_osc_show_sat_dop>
			break;

			case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
			isr_lcd_10mhz_ref_osc_show_pos_state(data[2], data[3]);
    29ea:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <s_rx_d+0x3>
    29ee:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <s_rx_d+0x2>
    29f2:	cd ce       	rjmp	.-614    	; 0x278e <isr_lcd_10mhz_ref_osc_show_pos_state>
			break;

			case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
			isr_lcd_10mhz_ref_osc_show_pos_lat(data[2], data[3], data[4], data[5] | (data[6] << 8));
    29f4:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <s_rx_d+0x6>
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	32 2f       	mov	r19, r18
    29fc:	22 27       	eor	r18, r18
    29fe:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <s_rx_d+0x5>
    2a02:	28 2b       	or	r18, r24
    2a04:	40 91 6f 03 	lds	r20, 0x036F	; 0x80036f <s_rx_d+0x4>
    2a08:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <s_rx_d+0x3>
    2a0c:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <s_rx_d+0x2>
    2a10:	d0 ce       	rjmp	.-608    	; 0x27b2 <isr_lcd_10mhz_ref_osc_show_pos_lat>
			break;

			case TWI_SMART_LCD_CMD_SHOW_POS_LON:
			isr_lcd_10mhz_ref_osc_show_pos_lon(data[2], data[3], data[4], data[5] | (data[6] << 8));
    2a12:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <s_rx_d+0x6>
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	32 2f       	mov	r19, r18
    2a1a:	22 27       	eor	r18, r18
    2a1c:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <s_rx_d+0x5>
    2a20:	28 2b       	or	r18, r24
    2a22:	40 91 6f 03 	lds	r20, 0x036F	; 0x80036f <s_rx_d+0x4>
    2a26:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <s_rx_d+0x3>
    2a2a:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <s_rx_d+0x2>
    2a2e:	e4 ce       	rjmp	.-568    	; 0x27f8 <isr_lcd_10mhz_ref_osc_show_pos_lon>
			break;

			case TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT:
			isr_lcd_10mhz_ref_osc_show_pos_height((data[2] | (data[3] << 8)), data[4]);
    2a30:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <s_rx_d+0x3>
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	98 2f       	mov	r25, r24
    2a38:	88 27       	eor	r24, r24
    2a3a:	20 91 6d 03 	lds	r18, 0x036D	; 0x80036d <s_rx_d+0x2>
    2a3e:	60 91 6f 03 	lds	r22, 0x036F	; 0x80036f <s_rx_d+0x4>
    2a42:	82 2b       	or	r24, r18
    2a44:	fc ce       	rjmp	.-520    	; 0x283e <isr_lcd_10mhz_ref_osc_show_pos_height>
    2a46:	08 95       	ret

00002a48 <__vector_24__bottom>:
	}
}


uint8_t __vector_24__bottom(uint8_t tws, uint8_t twd, uint8_t twcr_cur)
{
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	d6 2f       	mov	r29, r22
	static uint8_t pos_i	= 0;
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur & 0b01000101;
    2a50:	c4 2f       	mov	r28, r20
    2a52:	c5 74       	andi	r28, 0x45	; 69

	switch(tws) {
    2a54:	88 36       	cpi	r24, 0x68	; 104
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <__vector_24__bottom+0x12>
    2a58:	95 c0       	rjmp	.+298    	; 0x2b84 <__vector_24__bottom+0x13c>
    2a5a:	08 f0       	brcs	.+2      	; 0x2a5e <__vector_24__bottom+0x16>
    2a5c:	45 c0       	rjmp	.+138    	; 0x2ae8 <__vector_24__bottom+0xa0>
    2a5e:	80 33       	cpi	r24, 0x30	; 48
    2a60:	09 f4       	brne	.+2      	; 0x2a64 <__vector_24__bottom+0x1c>
    2a62:	86 c0       	rjmp	.+268    	; 0x2b70 <__vector_24__bottom+0x128>
    2a64:	60 f5       	brcc	.+88     	; 0x2abe <__vector_24__bottom+0x76>
    2a66:	80 31       	cpi	r24, 0x10	; 16
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <__vector_24__bottom+0x24>
    2a6a:	6d c0       	rjmp	.+218    	; 0x2b46 <__vector_24__bottom+0xfe>
    2a6c:	f0 f4       	brcc	.+60     	; 0x2aaa <__vector_24__bottom+0x62>
    2a6e:	88 23       	and	r24, r24
    2a70:	09 f4       	brne	.+2      	; 0x2a74 <__vector_24__bottom+0x2c>
    2a72:	5a c1       	rjmp	.+692    	; 0x2d28 <__vector_24__bottom+0x2e0>
    2a74:	88 30       	cpi	r24, 0x08	; 8
    2a76:	09 f0       	breq	.+2      	; 0x2a7a <__vector_24__bottom+0x32>
    2a78:	57 c1       	rjmp	.+686    	; 0x2d28 <__vector_24__bottom+0x2e0>

	/* Master Transmitter Mode */

	case TWI_TWSR_START:						// Start condition transmitted
		s_tx_lock = 1;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <s_tx_lock>
		pos_o = 0;
    2a80:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <pos_o.2652>

		cnt_o = 2;								// TEST
    2a84:	82 e0       	ldi	r24, 0x02	; 2
    2a86:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <cnt_o.2654>
		s_tx_d[0] = (0x12 << TWD1) | (0b0 << TWD0);	// TEST
    2a8a:	84 e2       	ldi	r24, 0x24	; 36
    2a8c:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <s_tx_d>
		s_tx_d[1] = 0x34;						// TEST
    2a90:	84 e3       	ldi	r24, 0x34	; 52
    2a92:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <s_tx_d+0x1>
		s_tx_d[2] = 0x56;						// TEST
    2a96:	86 e5       	ldi	r24, 0x56	; 86
    2a98:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <s_tx_d+0x2>
		s_tx_d[3] = 0x78;						// TEST
    2a9c:	88 e7       	ldi	r24, 0x78	; 120
    2a9e:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <s_tx_d+0x3>
		s_tx_d[4] = 0x9a;						// TEST
    2aa2:	8a e9       	ldi	r24, 0x9A	; 154
    2aa4:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <s_tx_d+0x4>
    2aa8:	4e c0       	rjmp	.+156    	; 0x2b46 <__vector_24__bottom+0xfe>
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur & 0b01000101;

	switch(tws) {
    2aaa:	80 32       	cpi	r24, 0x20	; 32
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <__vector_24__bottom+0x68>
    2aae:	63 c0       	rjmp	.+198    	; 0x2b76 <__vector_24__bottom+0x12e>
    2ab0:	88 32       	cpi	r24, 0x28	; 40
    2ab2:	09 f4       	brne	.+2      	; 0x2ab6 <__vector_24__bottom+0x6e>
    2ab4:	4c c0       	rjmp	.+152    	; 0x2b4e <__vector_24__bottom+0x106>
    2ab6:	88 31       	cpi	r24, 0x18	; 24
    2ab8:	09 f0       	breq	.+2      	; 0x2abc <__vector_24__bottom+0x74>
    2aba:	36 c1       	rjmp	.+620    	; 0x2d28 <__vector_24__bottom+0x2e0>
    2abc:	45 c0       	rjmp	.+138    	; 0x2b48 <__vector_24__bottom+0x100>
    2abe:	88 34       	cpi	r24, 0x48	; 72
    2ac0:	09 f4       	brne	.+2      	; 0x2ac4 <__vector_24__bottom+0x7c>
    2ac2:	5d c0       	rjmp	.+186    	; 0x2b7e <__vector_24__bottom+0x136>
    2ac4:	38 f4       	brcc	.+14     	; 0x2ad4 <__vector_24__bottom+0x8c>
    2ac6:	88 33       	cpi	r24, 0x38	; 56
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <__vector_24__bottom+0x84>
    2aca:	57 c0       	rjmp	.+174    	; 0x2b7a <__vector_24__bottom+0x132>
    2acc:	80 34       	cpi	r24, 0x40	; 64
    2ace:	09 f4       	brne	.+2      	; 0x2ad2 <__vector_24__bottom+0x8a>
    2ad0:	56 c0       	rjmp	.+172    	; 0x2b7e <__vector_24__bottom+0x136>
    2ad2:	2a c1       	rjmp	.+596    	; 0x2d28 <__vector_24__bottom+0x2e0>
    2ad4:	88 35       	cpi	r24, 0x58	; 88
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <__vector_24__bottom+0x92>
    2ad8:	52 c0       	rjmp	.+164    	; 0x2b7e <__vector_24__bottom+0x136>
    2ada:	80 36       	cpi	r24, 0x60	; 96
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <__vector_24__bottom+0x98>
    2ade:	51 c0       	rjmp	.+162    	; 0x2b82 <__vector_24__bottom+0x13a>
    2ae0:	80 35       	cpi	r24, 0x50	; 80
    2ae2:	09 f0       	breq	.+2      	; 0x2ae6 <__vector_24__bottom+0x9e>
    2ae4:	21 c1       	rjmp	.+578    	; 0x2d28 <__vector_24__bottom+0x2e0>
    2ae6:	4b c0       	rjmp	.+150    	; 0x2b7e <__vector_24__bottom+0x136>
    2ae8:	80 3a       	cpi	r24, 0xA0	; 160
    2aea:	09 f4       	brne	.+2      	; 0x2aee <__vector_24__bottom+0xa6>
    2aec:	e6 c0       	rjmp	.+460    	; 0x2cba <__vector_24__bottom+0x272>
    2aee:	b0 f4       	brcc	.+44     	; 0x2b1c <__vector_24__bottom+0xd4>
    2af0:	80 38       	cpi	r24, 0x80	; 128
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <__vector_24__bottom+0xae>
    2af4:	61 c0       	rjmp	.+194    	; 0x2bb8 <__vector_24__bottom+0x170>
    2af6:	38 f4       	brcc	.+14     	; 0x2b06 <__vector_24__bottom+0xbe>
    2af8:	80 37       	cpi	r24, 0x70	; 112
    2afa:	09 f4       	brne	.+2      	; 0x2afe <__vector_24__bottom+0xb6>
    2afc:	52 c0       	rjmp	.+164    	; 0x2ba2 <__vector_24__bottom+0x15a>
    2afe:	88 37       	cpi	r24, 0x78	; 120
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <__vector_24__bottom+0xbc>
    2b02:	50 c0       	rjmp	.+160    	; 0x2ba4 <__vector_24__bottom+0x15c>
    2b04:	11 c1       	rjmp	.+546    	; 0x2d28 <__vector_24__bottom+0x2e0>
    2b06:	80 39       	cpi	r24, 0x90	; 144
    2b08:	09 f4       	brne	.+2      	; 0x2b0c <__vector_24__bottom+0xc4>
    2b0a:	57 c0       	rjmp	.+174    	; 0x2bba <__vector_24__bottom+0x172>
    2b0c:	88 39       	cpi	r24, 0x98	; 152
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <__vector_24__bottom+0xca>
    2b10:	c0 c0       	rjmp	.+384    	; 0x2c92 <__vector_24__bottom+0x24a>
    2b12:	88 38       	cpi	r24, 0x88	; 136
    2b14:	09 f0       	breq	.+2      	; 0x2b18 <__vector_24__bottom+0xd0>
    2b16:	08 c1       	rjmp	.+528    	; 0x2d28 <__vector_24__bottom+0x2e0>
			}
		}
		break;

	case TWI_TWSR_S_SLAW_MYADDR_DATA_NACK:		// NACK after last data byte sent
		nop();
    2b18:	00 00       	nop
    2b1a:	bb c0       	rjmp	.+374    	; 0x2c92 <__vector_24__bottom+0x24a>
	static uint8_t pos_o	= 0;
	static uint8_t cnt_i	= 0;
	static uint8_t cnt_o	= 0;
	uint8_t twcr_new = twcr_cur & 0b01000101;

	switch(tws) {
    2b1c:	88 3b       	cpi	r24, 0xB8	; 184
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <__vector_24__bottom+0xda>
    2b20:	e6 c0       	rjmp	.+460    	; 0x2cee <__vector_24__bottom+0x2a6>
    2b22:	38 f4       	brcc	.+14     	; 0x2b32 <__vector_24__bottom+0xea>
    2b24:	88 3a       	cpi	r24, 0xA8	; 168
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <__vector_24__bottom+0xe2>
    2b28:	d3 c0       	rjmp	.+422    	; 0x2cd0 <__vector_24__bottom+0x288>
    2b2a:	80 3b       	cpi	r24, 0xB0	; 176
    2b2c:	09 f4       	brne	.+2      	; 0x2b30 <__vector_24__bottom+0xe8>
    2b2e:	d1 c0       	rjmp	.+418    	; 0x2cd2 <__vector_24__bottom+0x28a>
    2b30:	fb c0       	rjmp	.+502    	; 0x2d28 <__vector_24__bottom+0x2e0>
    2b32:	88 3c       	cpi	r24, 0xC8	; 200
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <__vector_24__bottom+0xf0>
    2b36:	f5 c0       	rjmp	.+490    	; 0x2d22 <__vector_24__bottom+0x2da>
    2b38:	88 3f       	cpi	r24, 0xF8	; 248
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <__vector_24__bottom+0xf6>
    2b3c:	f5 c0       	rjmp	.+490    	; 0x2d28 <__vector_24__bottom+0x2e0>
    2b3e:	80 3c       	cpi	r24, 0xC0	; 192
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <__vector_24__bottom+0xfc>
    2b42:	f2 c0       	rjmp	.+484    	; 0x2d28 <__vector_24__bottom+0x2e0>
    2b44:	ee c0       	rjmp	.+476    	; 0x2d22 <__vector_24__bottom+0x2da>
		s_tx_d[2] = 0x56;						// TEST
		s_tx_d[3] = 0x78;						// TEST
		s_tx_d[4] = 0x9a;						// TEST
		// fall-through.
	case TWI_TWSR_REPEATEDSTART:				// Repeated start condition transmitted
		nop();
    2b46:	00 00       	nop
		// fall-through.
	case TWI_TWSR_M_SLAW_ADDR_ACK:				// SLA+W transmitted and ACK received
		TWDR = s_tx_d[pos_o++];
    2b48:	e0 91 69 03 	lds	r30, 0x0369	; 0x800369 <pos_o.2652>
    2b4c:	06 c0       	rjmp	.+12     	; 0x2b5a <__vector_24__bottom+0x112>
	case TWI_TWSR_M_SLAW_ADDR_NACK:				// SLA+W transmitted and NACK received
		twcr_new |= _BV(TWSTO);					// Send STOP
		break;

	case TWI_TWSR_M_SLAW_DATA_ACK:				// Data byte sent and ACK received
		if (pos_o < cnt_o) {
    2b4e:	e0 91 69 03 	lds	r30, 0x0369	; 0x800369 <pos_o.2652>
    2b52:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <cnt_o.2654>
    2b56:	e8 17       	cp	r30, r24
    2b58:	58 f4       	brcc	.+22     	; 0x2b70 <__vector_24__bottom+0x128>
			TWDR = s_tx_d[pos_o++];				// Send new data byte
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	8e 0f       	add	r24, r30
    2b5e:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <pos_o.2652>
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	ec 58       	subi	r30, 0x8C	; 140
    2b66:	fc 4f       	sbci	r31, 0xFC	; 252
    2b68:	80 81       	ld	r24, Z
    2b6a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2b6e:	e2 c0       	rjmp	.+452    	; 0x2d34 <__vector_24__bottom+0x2ec>
			twcr_new |= _BV(TWSTO);				// Send STOP - no more data available
		}
		break;

	case TWI_TWSR_M_SLAW_DATA_NACK:				// Data byte sent and NACK received
		s_tx_lock = 0;
    2b70:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <s_tx_lock>
		s_twi_tx_done();						// Message failure
    2b74:	9b de       	rcall	.-714    	; 0x28ac <s_twi_tx_done>
		twcr_new |= _BV(TWSTO);					// Send STOP - due to an error or slave not ready situation
    2b76:	c0 61       	ori	r28, 0x10	; 16
		break;
    2b78:	dd c0       	rjmp	.+442    	; 0x2d34 <__vector_24__bottom+0x2ec>

	case TWI_TWSR_M_SLAW_ARBIT_LOST:			// Arbitration lost
		twcr_new |= _BV(TWSTA);					// Send START (again)
    2b7a:	c0 62       	ori	r28, 0x20	; 32
		break;
    2b7c:	db c0       	rjmp	.+438    	; 0x2d34 <__vector_24__bottom+0x2ec>
	case TWI_TWSR_M_SLAR_DATA_ACK:
		nop();
		break;

	case TWI_TWSR_M_SLAR_DATA_NACK:
		nop();
    2b7e:	00 00       	nop
		break;
    2b80:	d9 c0       	rjmp	.+434    	; 0x2d34 <__vector_24__bottom+0x2ec>


	/* Slave Receiver Mode */

	case TWI_TWSR_S_SLAW_MYADDR_RECEIVED:		// SLA+W received and ACK returned
		nop();
    2b82:	00 00       	nop
		// fall-through.
	case TWI_TWSR_S_SLAW_MYADDR_ARBIT_LOST:
		s_rx_lock = 1;
    2b84:	11 e0       	ldi	r17, 0x01	; 1
    2b86:	10 93 73 03 	sts	0x0373, r17	; 0x800373 <s_rx_lock>
		mem_set(s_rx_d, 8, 0x00);
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	68 e0       	ldi	r22, 0x08	; 8
    2b8e:	8b e6       	ldi	r24, 0x6B	; 107
    2b90:	93 e0       	ldi	r25, 0x03	; 3
    2b92:	23 d1       	rcall	.+582    	; 0x2dda <mem_set>
		s_rx_d[0] = twd >> 1;					// [0]=Target address (== MYADDR)
    2b94:	d6 95       	lsr	r29
    2b96:	d0 93 6b 03 	sts	0x036B, r29	; 0x80036b <s_rx_d>
		pos_i = 1;								// Starting of reception
    2b9a:	10 93 67 03 	sts	0x0367, r17	; 0x800367 <pos_i.2651>
		twcr_new |= _BV(TWEA);					// Send ACK
    2b9e:	c0 64       	ori	r28, 0x40	; 64
		break;
    2ba0:	c9 c0       	rjmp	.+402    	; 0x2d34 <__vector_24__bottom+0x2ec>

	case TWI_TWSR_S_SLAW_OMNIADDR_RECEIVED:		// GCA received and ACK sent
		nop();
    2ba2:	00 00       	nop
		// fall-through.
	case TWI_TWSR_S_SLAW_OMNIADDR_ARBIT_LOST:
		s_rx_lock = 1;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <s_rx_lock>
		s_rx_d[0] = twd >> 1;					// GCA
    2baa:	d6 95       	lsr	r29
    2bac:	d0 93 6b 03 	sts	0x036B, r29	; 0x80036b <s_rx_d>
		pos_i = 1;								// Starting of reception
    2bb0:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <pos_i.2651>
		twcr_new |= _BV(TWEA);					// Send after next coming data byte ACK
    2bb4:	c0 64       	ori	r28, 0x40	; 64
		break;
    2bb6:	be c0       	rjmp	.+380    	; 0x2d34 <__vector_24__bottom+0x2ec>

	case TWI_TWSR_S_SLAW_MYADDR_DATA_ACK:		// Data after SLA+W received
		nop();
    2bb8:	00 00       	nop
		// fall-through.
	case TWI_TWSR_S_SLAW_OMNIADDR_DATA_ACK:
		if (cnt_i != 0b1111) {					// Closed parameter form
    2bba:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <cnt_i.2653>
    2bbe:	8f 30       	cpi	r24, 0x0F	; 15
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <__vector_24__bottom+0x17c>
    2bc2:	60 c0       	rjmp	.+192    	; 0x2c84 <__vector_24__bottom+0x23c>
			if (pos_i <= 0b1110) {
    2bc4:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <pos_i.2651>
    2bc8:	9f 30       	cpi	r25, 0x0F	; 15
    2bca:	08 f0       	brcs	.+2      	; 0x2bce <__vector_24__bottom+0x186>
    2bcc:	5f c0       	rjmp	.+190    	; 0x2c8c <__vector_24__bottom+0x244>
				s_rx_d[pos_i] = twd;			// [1]=cmd, [2..]=parameters
    2bce:	e9 2f       	mov	r30, r25
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	e5 59       	subi	r30, 0x95	; 149
    2bd4:	fc 4f       	sbci	r31, 0xFC	; 252
    2bd6:	d0 83       	st	Z, r29
			}
			if (pos_i == 1) {
    2bd8:	91 30       	cpi	r25, 0x01	; 1
    2bda:	09 f0       	breq	.+2      	; 0x2bde <__vector_24__bottom+0x196>
    2bdc:	49 c0       	rjmp	.+146    	; 0x2c70 <__vector_24__bottom+0x228>
				/* Load receive counter */
				if (s_rx_d[0] == TWI_SLAVE_ADDR_SMARTLCD) {
    2bde:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <s_rx_d>
    2be2:	80 33       	cpi	r24, 0x30	; 48
    2be4:	49 f4       	brne	.+18     	; 0x2bf8 <__vector_24__bottom+0x1b0>
					cnt_i = ((s_rx_d[1] >> 5) & 0b111) + 1;	// encoded parameter count
    2be6:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <s_rx_d+0x1>
    2bea:	82 95       	swap	r24
    2bec:	86 95       	lsr	r24
    2bee:	87 70       	andi	r24, 0x07	; 7
    2bf0:	8f 5f       	subi	r24, 0xFF	; 255
    2bf2:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <cnt_i.2653>
    2bf6:	3e c0       	rjmp	.+124    	; 0x2c74 <__vector_24__bottom+0x22c>

				} else if (s_rx_d[0] == TWI_SLAVE_ADDR_10MHZREFOSC) {
    2bf8:	82 32       	cpi	r24, 0x22	; 34
    2bfa:	e1 f5       	brne	.+120    	; 0x2c74 <__vector_24__bottom+0x22c>
					cnt_i = 0;
    2bfc:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <cnt_i.2653>
					cnt_o = 0;
    2c00:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <cnt_o.2654>

					switch (s_rx_d[1]) {
    2c04:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <s_rx_d+0x1>
    2c08:	84 38       	cpi	r24, 0x84	; 132
    2c0a:	11 f1       	breq	.+68     	; 0x2c50 <__vector_24__bottom+0x208>
    2c0c:	78 f4       	brcc	.+30     	; 0x2c2c <__vector_24__bottom+0x1e4>
    2c0e:	80 38       	cpi	r24, 0x80	; 128
    2c10:	19 f1       	breq	.+70     	; 0x2c58 <__vector_24__bottom+0x210>
    2c12:	48 f4       	brcc	.+18     	; 0x2c26 <__vector_24__bottom+0x1de>
    2c14:	88 23       	and	r24, r24
    2c16:	c1 f0       	breq	.+48     	; 0x2c48 <__vector_24__bottom+0x200>
    2c18:	81 30       	cpi	r24, 0x01	; 1
    2c1a:	61 f5       	brne	.+88     	; 0x2c74 <__vector_24__bottom+0x22c>
						case TWI_SMART_LCD_CMD_NOOP:
							cnt_i = 1;
							break;

						case TWI_SMART_LCD_CMD_GETVER:
							cnt_i = 1;
    2c1c:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <cnt_i.2653>
							cnt_o = 1;
    2c20:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <cnt_o.2654>
							break;
    2c24:	27 c0       	rjmp	.+78     	; 0x2c74 <__vector_24__bottom+0x22c>

				} else if (s_rx_d[0] == TWI_SLAVE_ADDR_10MHZREFOSC) {
					cnt_i = 0;
					cnt_o = 0;

					switch (s_rx_d[1]) {
    2c26:	82 38       	cpi	r24, 0x82	; 130
    2c28:	d9 f4       	brne	.+54     	; 0x2c60 <__vector_24__bottom+0x218>
    2c2a:	16 c0       	rjmp	.+44     	; 0x2c58 <__vector_24__bottom+0x210>
    2c2c:	8b 38       	cpi	r24, 0x8B	; 139
    2c2e:	38 f4       	brcc	.+14     	; 0x2c3e <__vector_24__bottom+0x1f6>
    2c30:	89 38       	cpi	r24, 0x89	; 137
    2c32:	70 f4       	brcc	.+28     	; 0x2c50 <__vector_24__bottom+0x208>
    2c34:	85 38       	cpi	r24, 0x85	; 133
    2c36:	81 f0       	breq	.+32     	; 0x2c58 <__vector_24__bottom+0x210>
    2c38:	88 38       	cpi	r24, 0x88	; 136
    2c3a:	71 f0       	breq	.+28     	; 0x2c58 <__vector_24__bottom+0x210>
    2c3c:	1b c0       	rjmp	.+54     	; 0x2c74 <__vector_24__bottom+0x22c>
    2c3e:	8d 38       	cpi	r24, 0x8D	; 141
    2c40:	98 f0       	brcs	.+38     	; 0x2c68 <__vector_24__bottom+0x220>
    2c42:	8d 38       	cpi	r24, 0x8D	; 141
    2c44:	29 f0       	breq	.+10     	; 0x2c50 <__vector_24__bottom+0x208>
    2c46:	16 c0       	rjmp	.+44     	; 0x2c74 <__vector_24__bottom+0x22c>
						case TWI_SMART_LCD_CMD_NOOP:
							cnt_i = 1;
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <cnt_i.2653>
							break;
    2c4e:	12 c0       	rjmp	.+36     	; 0x2c74 <__vector_24__bottom+0x22c>

						case TWI_SMART_LCD_CMD_SHOW_TCXO_PWM:
						case TWI_SMART_LCD_CMD_SHOW_DOP:
						case TWI_SMART_LCD_CMD_SHOW_POS_STATE:
						case TWI_SMART_LCD_CMD_SHOW_POS_HEIGHT:
							cnt_i = 3;
    2c50:	83 e0       	ldi	r24, 0x03	; 3
    2c52:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <cnt_i.2653>
							break;
    2c56:	0e c0       	rjmp	.+28     	; 0x2c74 <__vector_24__bottom+0x22c>

						case TWI_SMART_LCD_CMD_SHOW_CLK_STATE:
						case TWI_SMART_LCD_CMD_SHOW_HR_MIN_SEC:
						case TWI_SMART_LCD_CMD_SHOW_TCXO_VC:
						case TWI_SMART_LCD_CMD_SHOW_SATS:
							cnt_i = 4;
    2c58:	84 e0       	ldi	r24, 0x04	; 4
    2c5a:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <cnt_i.2653>
							break;
    2c5e:	0a c0       	rjmp	.+20     	; 0x2c74 <__vector_24__bottom+0x22c>

						case TWI_SMART_LCD_CMD_SHOW_YEAR_MON_DAY:
						case TWI_SMART_LCD_CMD_SHOW_PPM:
							cnt_i = 5;
    2c60:	85 e0       	ldi	r24, 0x05	; 5
    2c62:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <cnt_i.2653>
							break;
    2c66:	06 c0       	rjmp	.+12     	; 0x2c74 <__vector_24__bottom+0x22c>

						case TWI_SMART_LCD_CMD_SHOW_POS_LAT:
						case TWI_SMART_LCD_CMD_SHOW_POS_LON:
							cnt_i = 6;
    2c68:	86 e0       	ldi	r24, 0x06	; 6
    2c6a:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <cnt_i.2653>
							break;
    2c6e:	02 c0       	rjmp	.+4      	; 0x2c74 <__vector_24__bottom+0x22c>
					}
				}
			}

			if (pos_i < 0b1110) {
    2c70:	9e 30       	cpi	r25, 0x0E	; 14
    2c72:	60 f4       	brcc	.+24     	; 0x2c8c <__vector_24__bottom+0x244>
				if (++pos_i <= cnt_i) {
    2c74:	9f 5f       	subi	r25, 0xFF	; 255
    2c76:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <pos_i.2651>
    2c7a:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <cnt_i.2653>
    2c7e:	89 17       	cp	r24, r25
    2c80:	28 f0       	brcs	.+10     	; 0x2c8c <__vector_24__bottom+0x244>
    2c82:	24 c0       	rjmp	.+72     	; 0x2ccc <__vector_24__bottom+0x284>
			} else {
				twcr_new &= ~_BV(TWEA);			// Send NACK
			}

		} else {								// Open parameter form
			s_rx_d[2] = twd;
    2c84:	d0 93 6d 03 	sts	0x036D, r29	; 0x80036d <s_rx_d+0x2>
			if (!s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i)) {
				twcr_new |= _BV(TWEA);			// Send ACK
			} else {
				pos_i = 0;
    2c88:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <pos_i.2651>
				twcr_new &= ~_BV(TWEA);			// Send NACK
    2c8c:	c4 2f       	mov	r28, r20
    2c8e:	c5 70       	andi	r28, 0x05	; 5
    2c90:	51 c0       	rjmp	.+162    	; 0x2d34 <__vector_24__bottom+0x2ec>

	case TWI_TWSR_S_SLAW_MYADDR_DATA_NACK:		// NACK after last data byte sent
		nop();
		// fall-through.
	case TWI_TWSR_S_SLAW_OMNIADDR_DATA_NACK:
		s_rx_lock = 0;
    2c92:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <s_rx_lock>
		if (cnt_i != 0b1111) {
    2c96:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <cnt_i.2653>
    2c9a:	8f 30       	cpi	r24, 0x0F	; 15
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <__vector_24__bottom+0x258>
			s_isr_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    2c9e:	17 de       	rcall	.-978    	; 0x28ce <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2>
		} else {
			s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    2ca0:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <pos_i.2651>
		cnt_i = 0;
    2ca4:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <cnt_i.2653>
		mem_set(s_rx_d, 8, 0x00);
    2ca8:	40 e0       	ldi	r20, 0x00	; 0
    2caa:	68 e0       	ldi	r22, 0x08	; 8
    2cac:	8b e6       	ldi	r24, 0x6B	; 107
    2cae:	93 e0       	ldi	r25, 0x03	; 3
    2cb0:	94 d0       	rcall	.+296    	; 0x2dda <mem_set>
		s_rx_lock = 0;
    2cb2:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <s_rx_lock>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    2cb6:	c0 64       	ori	r28, 0x40	; 64
		break;
    2cb8:	3d c0       	rjmp	.+122    	; 0x2d34 <__vector_24__bottom+0x2ec>

	case TWI_TWSR_S_SLAW_STOP_REPEATEDSTART_RECEIVED:	// STOP or RESTART received while still addressed as slave
		s_rx_lock = 0;
    2cba:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <s_rx_lock>
		if (cnt_i != 0b1111) {
    2cbe:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <cnt_i.2653>
    2cc2:	8f 30       	cpi	r24, 0x0F	; 15
    2cc4:	09 f0       	breq	.+2      	; 0x2cc8 <__vector_24__bottom+0x280>
			s_isr_twi_rcvd_command_closed_form(s_rx_d, pos_i);	// Call interpreter for closed form of parameters
    2cc6:	03 de       	rcall	.-1018   	; 0x28ce <s_isr_twi_rcvd_command_closed_form.isra.1.constprop.2>
		} else {
			s_isr_twi_rcvd_command_open_form(s_rx_d, ++pos_i);	// Call interpreter for open form of parameters
		}
		pos_i = 0;
    2cc8:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <pos_i.2651>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
    2ccc:	c0 64       	ori	r28, 0x40	; 64
		break;
    2cce:	32 c0       	rjmp	.+100    	; 0x2d34 <__vector_24__bottom+0x2ec>


	/* Slave Transmitter Mode */

	case TWI_TWSR_S_SLAR_MYADDR_DATA_ACK:		// SLA+R received and ACK has been returned
		nop();
    2cd0:	00 00       	nop
		// fall-through.
	case TWI_TWSR_S_SLAR_MYADDR_ARBIT_LOST:
		s_rx_lock = 1;
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <s_rx_lock>
		pos_o = 0;
    2cd8:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <pos_o.2652>
		TWDR = cnt_o > pos_o ?  s_rx_d[pos_o++] : 0;
    2cdc:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <cnt_o.2654>
    2ce0:	99 23       	and	r25, r25
    2ce2:	a1 f0       	breq	.+40     	; 0x2d0c <__vector_24__bottom+0x2c4>
    2ce4:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <pos_o.2652>
    2ce8:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <s_rx_d>
    2cec:	10 c0       	rjmp	.+32     	; 0x2d0e <__vector_24__bottom+0x2c6>
			twcr_new &= ~_BV(TWEA);				// No more data to send NACK
		}
		break;

	case TWI_TWSR_S_SLAR_OMNIADDR_DATA_ACK:		// Data sent and ACK has been returned
		TWDR = cnt_o > pos_o ?  s_rx_d[pos_o++] : 0;
    2cee:	e0 91 69 03 	lds	r30, 0x0369	; 0x800369 <pos_o.2652>
    2cf2:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <cnt_o.2654>
    2cf6:	e8 17       	cp	r30, r24
    2cf8:	48 f4       	brcc	.+18     	; 0x2d0c <__vector_24__bottom+0x2c4>
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	8e 0f       	add	r24, r30
    2cfe:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <pos_o.2652>
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	e5 59       	subi	r30, 0x95	; 149
    2d06:	fc 4f       	sbci	r31, 0xFC	; 252
    2d08:	80 81       	ld	r24, Z
    2d0a:	01 c0       	rjmp	.+2      	; 0x2d0e <__vector_24__bottom+0x2c6>
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		if (cnt_o > pos_o) {
    2d12:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <cnt_o.2654>
    2d16:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <pos_o.2652>
    2d1a:	89 17       	cp	r24, r25
    2d1c:	08 f0       	brcs	.+2      	; 0x2d20 <__vector_24__bottom+0x2d8>
    2d1e:	b6 cf       	rjmp	.-148    	; 0x2c8c <__vector_24__bottom+0x244>
    2d20:	d5 cf       	rjmp	.-86     	; 0x2ccc <__vector_24__bottom+0x284>
		twcr_new |= _BV(TWEA);					// TWI goes to unaddressed, be active again
		break;

	case TWI_TWSR_S_SLAR_MYADDR_LASTDATA_ACK:	// Last data sent and ACK has been returned
		/* message transmitted successfully in slave mode */
		s_rx_lock = 0;
    2d22:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <s_rx_lock>
    2d26:	d2 cf       	rjmp	.-92     	; 0x2ccc <__vector_24__bottom+0x284>
		s_rx_lock = 0;
		twcr_new |= _BV(TWSTO) | _BV(TWEA);		// TWI goes to unaddressed, be active again
		break;

	default:
		nop();
    2d28:	00 00       	nop
		s_tx_lock = 0;
    2d2a:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <s_tx_lock>
		s_rx_lock = 0;
    2d2e:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <s_rx_lock>
		twcr_new |= _BV(TWSTO) | _BV(TWEA);		// TWI goes to unaddressed, be active again
    2d32:	c0 65       	ori	r28, 0x50	; 80
	}

	return twcr_new;
}
    2d34:	8c 2f       	mov	r24, r28
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	1f 91       	pop	r17
    2d3c:	08 95       	ret

00002d3e <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    2d3e:	08 95       	ret

00002d40 <cpu_irq_save>:
/* MAIN section */

void halt(void)
{
	/* MAIN Loop Shutdown */
	runmode = 0;
    2d40:	cf 93       	push	r28
    2d42:	df 93       	push	r29
    2d44:	1f 92       	push	r1
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	8f b7       	in	r24, 0x3f	; 63
    2d4c:	89 83       	std	Y+1, r24	; 0x01
    2d4e:	f8 94       	cli
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	0f 90       	pop	r0
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	08 95       	ret

00002d5a <get_abs_time>:
    2d5a:	8f 92       	push	r8
    2d5c:	9f 92       	push	r9
    2d5e:	af 92       	push	r10
    2d60:	bf 92       	push	r11
    2d62:	cf 92       	push	r12
    2d64:	df 92       	push	r13
    2d66:	ef 92       	push	r14
    2d68:	ff 92       	push	r15
    2d6a:	ea df       	rcall	.-44     	; 0x2d40 <cpu_irq_save>
    2d6c:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2d70:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2d74:	c0 90 c0 03 	lds	r12, 0x03C0	; 0x8003c0 <g_timer_abs_msb>
    2d78:	d0 90 c1 03 	lds	r13, 0x03C1	; 0x8003c1 <g_timer_abs_msb+0x1>
    2d7c:	e0 90 c2 03 	lds	r14, 0x03C2	; 0x8003c2 <g_timer_abs_msb+0x2>
    2d80:	f0 90 c3 03 	lds	r15, 0x03C3	; 0x8003c3 <g_timer_abs_msb+0x3>
    2d84:	8f bf       	out	0x3f, r24	; 63
    2d86:	89 2f       	mov	r24, r25
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	92 2b       	or	r25, r18
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	99 0f       	add	r25, r25
    2d90:	88 0b       	sbc	r24, r24
    2d92:	99 0b       	sbc	r25, r25
    2d94:	2a d3       	rcall	.+1620   	; 0x33ea <__floatsisf>
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	34 e2       	ldi	r19, 0x24	; 36
    2d9a:	44 ef       	ldi	r20, 0xF4	; 244
    2d9c:	5a e4       	ldi	r21, 0x4A	; 74
    2d9e:	8a d2       	rcall	.+1300   	; 0x32b4 <__divsf3>
    2da0:	4b 01       	movw	r8, r22
    2da2:	5c 01       	movw	r10, r24
    2da4:	c7 01       	movw	r24, r14
    2da6:	b6 01       	movw	r22, r12
    2da8:	1e d3       	rcall	.+1596   	; 0x33e6 <__floatunsisf>
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 e0       	ldi	r20, 0x00	; 0
    2db0:	54 e4       	ldi	r21, 0x44	; 68
    2db2:	cf d3       	rcall	.+1950   	; 0x3552 <__mulsf3>
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	34 e2       	ldi	r19, 0x24	; 36
    2db8:	44 ef       	ldi	r20, 0xF4	; 244
    2dba:	5a e4       	ldi	r21, 0x4A	; 74
    2dbc:	7b d2       	rcall	.+1270   	; 0x32b4 <__divsf3>
    2dbe:	9b 01       	movw	r18, r22
    2dc0:	ac 01       	movw	r20, r24
    2dc2:	c5 01       	movw	r24, r10
    2dc4:	b4 01       	movw	r22, r8
    2dc6:	0e d2       	rcall	.+1052   	; 0x31e4 <__addsf3>
    2dc8:	ff 90       	pop	r15
    2dca:	ef 90       	pop	r14
    2dcc:	df 90       	pop	r13
    2dce:	cf 90       	pop	r12
    2dd0:	bf 90       	pop	r11
    2dd2:	af 90       	pop	r10
    2dd4:	9f 90       	pop	r9
    2dd6:	8f 90       	pop	r8
    2dd8:	08 95       	ret

00002dda <mem_set>:
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	61 15       	cp	r22, r1
    2dde:	71 05       	cpc	r23, r1
    2de0:	31 f0       	breq	.+12     	; 0x2dee <mem_set+0x14>
    2de2:	fc 01       	movw	r30, r24
    2de4:	41 93       	st	Z+, r20
    2de6:	cf 01       	movw	r24, r30
    2de8:	61 50       	subi	r22, 0x01	; 1
    2dea:	71 09       	sbc	r23, r1
    2dec:	f7 cf       	rjmp	.-18     	; 0x2ddc <mem_set+0x2>
    2dee:	08 95       	ret

00002df0 <s_task>:
    2df0:	4f 92       	push	r4
    2df2:	5f 92       	push	r5
    2df4:	6f 92       	push	r6
    2df6:	7f 92       	push	r7
    2df8:	8f 92       	push	r8
    2dfa:	9f 92       	push	r9
    2dfc:	af 92       	push	r10
    2dfe:	bf 92       	push	r11
    2e00:	df 92       	push	r13
    2e02:	ef 92       	push	r14
    2e04:	ff 92       	push	r15
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	a8 97       	sbiw	r28, 0x28	; 40
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	90 df       	rcall	.-224    	; 0x2d40 <cpu_irq_save>
    2e20:	40 90 b7 03 	lds	r4, 0x03B7	; 0x8003b7 <g_adc_temp>
    2e24:	50 90 b8 03 	lds	r5, 0x03B8	; 0x8003b8 <g_adc_temp+0x1>
    2e28:	60 90 b9 03 	lds	r6, 0x03B9	; 0x8003b9 <g_adc_temp+0x2>
    2e2c:	70 90 ba 03 	lds	r7, 0x03BA	; 0x8003ba <g_adc_temp+0x3>
    2e30:	80 90 bb 03 	lds	r8, 0x03BB	; 0x8003bb <g_adc_light>
    2e34:	90 90 bc 03 	lds	r9, 0x03BC	; 0x8003bc <g_adc_light+0x1>
    2e38:	a0 90 bd 03 	lds	r10, 0x03BD	; 0x8003bd <g_adc_light+0x2>
    2e3c:	b0 90 be 03 	lds	r11, 0x03BE	; 0x8003be <g_adc_light+0x3>
    2e40:	10 91 ad 03 	lds	r17, 0x03AD	; 0x8003ad <g_status>
    2e44:	10 fb       	bst	r17, 0
    2e46:	ee 24       	eor	r14, r14
    2e48:	e0 f8       	bld	r14, 0
    2e4a:	16 95       	lsr	r17
    2e4c:	11 70       	andi	r17, 0x01	; 1
    2e4e:	8f bf       	out	0x3f, r24	; 63
    2e50:	77 df       	rcall	.-274    	; 0x2d40 <cpu_irq_save>
    2e52:	f8 2e       	mov	r15, r24
    2e54:	29 e1       	ldi	r18, 0x19	; 25
    2e56:	37 ec       	ldi	r19, 0xC7	; 199
    2e58:	4f ea       	ldi	r20, 0xAF	; 175
    2e5a:	53 e4       	ldi	r21, 0x43	; 67
    2e5c:	c3 01       	movw	r24, r6
    2e5e:	b2 01       	movw	r22, r4
    2e60:	c0 d1       	rcall	.+896    	; 0x31e2 <__subsf3>
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 ea       	ldi	r19, 0xA0	; 160
    2e66:	47 e8       	ldi	r20, 0x87	; 135
    2e68:	5f e3       	ldi	r21, 0x3F	; 63
    2e6a:	73 d3       	rcall	.+1766   	; 0x3552 <__mulsf3>
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	48 ec       	ldi	r20, 0xC8	; 200
    2e72:	51 e4       	ldi	r21, 0x41	; 65
    2e74:	b7 d1       	rcall	.+878    	; 0x31e4 <__addsf3>
    2e76:	60 93 b3 03 	sts	0x03B3, r22	; 0x8003b3 <g_temp>
    2e7a:	70 93 b4 03 	sts	0x03B4, r23	; 0x8003b4 <g_temp+0x1>
    2e7e:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <g_temp+0x2>
    2e82:	90 93 b6 03 	sts	0x03B6, r25	; 0x8003b6 <g_temp+0x3>
    2e86:	ff be       	out	0x3f, r15	; 63
    2e88:	c5 01       	movw	r24, r10
    2e8a:	b4 01       	movw	r22, r8
    2e8c:	80 d2       	rcall	.+1280   	; 0x338e <__fixunssfsi>
    2e8e:	66 3b       	cpi	r22, 0xB6	; 182
    2e90:	23 e0       	ldi	r18, 0x03	; 3
    2e92:	72 07       	cpc	r23, r18
    2e94:	00 f5       	brcc	.+64     	; 0x2ed6 <s_task+0xe6>
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	a5 d2       	rcall	.+1354   	; 0x33e6 <__floatunsisf>
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e2       	ldi	r20, 0x20	; 32
    2ea2:	51 e4       	ldi	r21, 0x41	; 65
    2ea4:	9e d1       	rcall	.+828    	; 0x31e2 <__subsf3>
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e8       	ldi	r19, 0x80	; 128
    2eaa:	4d e6       	ldi	r20, 0x6D	; 109
    2eac:	54 e4       	ldi	r21, 0x44	; 68
    2eae:	02 d2       	rcall	.+1028   	; 0x32b4 <__divsf3>
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	45 e7       	ldi	r20, 0x75	; 117
    2eb6:	53 e4       	ldi	r21, 0x43	; 67
    2eb8:	4c d3       	rcall	.+1688   	; 0x3552 <__mulsf3>
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e2       	ldi	r20, 0x20	; 32
    2ec0:	51 e4       	ldi	r21, 0x41	; 65
    2ec2:	90 d1       	rcall	.+800    	; 0x31e4 <__addsf3>
    2ec4:	64 d2       	rcall	.+1224   	; 0x338e <__fixunssfsi>
    2ec6:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2eca:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ece:	80 68       	ori	r24, 0x80	; 128
    2ed0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ed4:	07 c0       	rjmp	.+14     	; 0x2ee4 <s_task+0xf4>
    2ed6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2eda:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ede:	8f 73       	andi	r24, 0x3F	; 63
    2ee0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ee4:	88 e2       	ldi	r24, 0x28	; 40
    2ee6:	d8 2e       	mov	r13, r24
    2ee8:	11 23       	and	r17, r17
    2eea:	21 f0       	breq	.+8      	; 0x2ef4 <s_task+0x104>
    2eec:	0e 94 93 0c 	call	0x1926	; 0x1926 <lcd_show_new_data>
    2ef0:	f8 2e       	mov	r15, r24
    2ef2:	01 c0       	rjmp	.+2      	; 0x2ef6 <s_task+0x106>
    2ef4:	f1 2c       	mov	r15, r1
    2ef6:	ee 20       	and	r14, r14
    2ef8:	11 f0       	breq	.+4      	; 0x2efe <s_task+0x10e>
    2efa:	53 d9       	rcall	.-3418   	; 0x21a2 <lcd_animation_loop>
    2efc:	27 c0       	rjmp	.+78     	; 0x2f4c <s_task+0x15c>
    2efe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <s_last_animation.3052>
    2f02:	88 23       	and	r24, r24
    2f04:	19 f1       	breq	.+70     	; 0x2f4c <s_task+0x15c>
    2f06:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <s_last_animation.3052>
    2f0a:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <lcd_cls>
    2f0e:	01 e0       	ldi	r16, 0x01	; 1
    2f10:	20 e8       	ldi	r18, 0x80	; 128
    2f12:	40 ef       	ldi	r20, 0xF0	; 240
    2f14:	60 e0       	ldi	r22, 0x00	; 0
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	0e 94 4c 04 	call	0x898	; 0x898 <gfx_mono_generic_draw_rect>
    2f1c:	ea e7       	ldi	r30, 0x7A	; 122
    2f1e:	f2 e0       	ldi	r31, 0x02	; 2
    2f20:	de 01       	movw	r26, r28
    2f22:	11 96       	adiw	r26, 0x01	; 1
    2f24:	8d 2d       	mov	r24, r13
    2f26:	01 90       	ld	r0, Z+
    2f28:	0d 92       	st	X+, r0
    2f2a:	8a 95       	dec	r24
    2f2c:	e1 f7       	brne	.-8      	; 0x2f26 <s_task+0x136>
    2f2e:	9e dc       	rcall	.-1732   	; 0x286c <lcd_get_sysfont>
    2f30:	9c 01       	movw	r18, r24
    2f32:	42 e0       	ldi	r20, 0x02	; 2
    2f34:	63 e0       	ldi	r22, 0x03	; 3
    2f36:	ce 01       	movw	r24, r28
    2f38:	01 96       	adiw	r24, 0x01	; 1
    2f3a:	0e 94 c3 06 	call	0xd86	; 0xd86 <gfx_mono_draw_string>
    2f3e:	00 df       	rcall	.-512    	; 0x2d40 <cpu_irq_save>
    2f40:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <g_status>
    2f44:	92 60       	ori	r25, 0x02	; 2
    2f46:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <g_status>
    2f4a:	8f bf       	out	0x3f, r24	; 63
    2f4c:	f1 10       	cpse	r15, r1
    2f4e:	cc cf       	rjmp	.-104    	; 0x2ee8 <s_task+0xf8>
    2f50:	a8 96       	adiw	r28, 0x28	; 40
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	de bf       	out	0x3e, r29	; 62
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	cd bf       	out	0x3d, r28	; 61
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	1f 91       	pop	r17
    2f62:	0f 91       	pop	r16
    2f64:	ff 90       	pop	r15
    2f66:	ef 90       	pop	r14
    2f68:	df 90       	pop	r13
    2f6a:	bf 90       	pop	r11
    2f6c:	af 90       	pop	r10
    2f6e:	9f 90       	pop	r9
    2f70:	8f 90       	pop	r8
    2f72:	7f 90       	pop	r7
    2f74:	6f 90       	pop	r6
    2f76:	5f 90       	pop	r5
    2f78:	4f 90       	pop	r4
    2f7a:	08 95       	ret

00002f7c <main>:
}

int main (void)
{
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts,
	 * most critical pins are handled first.
	 */

	PORTC = 0b01111110;		// PC0: LDR-ADC in-NoPU, PC1: SW_I in-PU, PC2: SW_Q in-PU, PC3: LCD-CS out-HI
    2f80:	8e e7       	ldi	r24, 0x7E	; 126
    2f82:	88 b9       	out	0x08, r24	; 8
	DDRC  = 0b00001000;		// PC4: I2C-SDA in-PU-AF-TWI, PC5: I2C-SCL in-PU-AF-TWI, PC6: RESET in-PU, PC7: -
    2f84:	88 e0       	ldi	r24, 0x08	; 8
    2f86:	87 b9       	out	0x07, r24	; 7

	PORTB = 0b00010100;		// PB0: LCD-CD out-LO, PB1: AUDIO out-AF-OC1A, PB2: SW_P in-PU, PB3: LCDBL out-AF-OC2A,
    2f88:	84 e1       	ldi	r24, 0x14	; 20
    2f8a:	85 b9       	out	0x05, r24	; 5
	DDRB  = 0b11111011;		// PB4: LCD-R/!W out-HI, PB5: LCD-EN out-LO, PB6: LEDRD out-LO, LEDGN out-LO
    2f8c:	8b ef       	ldi	r24, 0xFB	; 251
    2f8e:	84 b9       	out	0x04, r24	; 4

	PORTD = 0xff;			// PD0..PD7: LCD-D0..LCD-D7 in-PU
    2f90:	8f ef       	ldi	r24, 0xFF	; 255
    2f92:	8b b9       	out	0x0b, r24	; 11
	DDRD  = 0x00;
    2f94:	1a b8       	out	0x0a, r1	; 10

	// Analog input: Digital Disable Register
	DIDR0 = 0b00000001;		// PC0: LDR-ADC
    2f96:	c1 e0       	ldi	r28, 0x01	; 1
    2f98:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

	/* Rapid I/O settings */
	s_io_preinit();

	/* Init of sub-modules */
	sysclk_init();	PRR = 0b11101011;			// For debugging this module has to be powered on, again
    2f9c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <sysclk_init>
    2fa0:	8b ee       	ldi	r24, 0xEB	; 235
    2fa2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
static void s_tc_init(void)
{
	/* This function is called prior enabled interrupts and thus does not lock interrupts. */

	/* Timer Synchronous Mode - prepare for  s_tc_start(void) */
	GTCCR = _BV(TSM)							// Timer Synchronous Mode active
    2fa6:	d3 e8       	ldi	r29, 0x83	; 131
    2fa8:	d3 bd       	out	0x23, r29	; 35
	{
	}

	/* TC1 - OC1A: Audio output @ 16-bit counter PWM, used: 9-bit resolution - overflows with 15625 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    2faa:	68 e0       	ldi	r22, 0x08	; 8
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <sysclk_enable_module>

		TCCR1A  = (0b10  << COM1A0)		 		// HI --> LO when compare value is reached - non-inverted PWM mode
    2fb2:	82 e8       	ldi	r24, 0x82	; 130
    2fb4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				| (0b10  << WGM10);				// WGM: 0b0110 = Fast PWM 9 bit

		TCCR1B  = ( 0b01 << WGM12)
    2fb8:	89 e0       	ldi	r24, 0x09	; 9
    2fba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
				| (0b001 << CS10);				// CLKio DIV1 = 8 MHz

		TCNT1H  = 0b00000000           ;		// Clear current value for synchronous start (when restarting without reset)
    2fbe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		barrier();
		TCNT1L	=            0b00000000;
    2fc2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

		OCR1AH  =        0b0           ;		// Mid-range compare value for zero audio output
    2fc6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		OCR1AL  =            0b10000000;
    2fca:	80 e8       	ldi	r24, 0x80	; 128
    2fcc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

		TIMSK1  = _BV(TOIE1);					// TOIE1 interrupt
    2fd0:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		TIFR1   = 0b00100111;					// Clear all flags (when restarting without reset)
    2fd4:	87 e2       	ldi	r24, 0x27	; 39
    2fd6:	86 bb       	out	0x16, r24	; 22
	}

	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    2fd8:	60 e4       	ldi	r22, 0x40	; 64
    2fda:	80 e0       	ldi	r24, 0x00	; 0
    2fdc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <sysclk_enable_module>

		TCCR2A  = (0b10  << COM2A0)				// HI --> LO when compare value is reached - non-inverted PWM mode
    2fe0:	d0 93 b0 00 	sts	0x00B0, r29	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				| (0b11  << WGM20);				// WGM: 0b011 = Fast PWM mode 8 bit

		TCCR2B  = ( 0b0  << WGM22)
    2fe4:	85 e0       	ldi	r24, 0x05	; 5
    2fe6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
				| (0b101 << CS20);				// CLKio DIV 128 = 62500 Hz --> / 2**8 = 244 Hz looping rate

		TCNT2   = 0;							// Clear current value for synchronous start (when restarting without reset)
    2fea:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

		OCR2A   = 0x00;							// LCD backlight dimmed down
    2fee:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

		TIMSK2  = 0b00000001;					// TOIE2: overflow interrupt
    2ff2:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		TIFR2   = 0b00000111;					// Clear all flags
    2ff6:	87 e0       	ldi	r24, 0x07	; 7
    2ff8:	87 bb       	out	0x17, r24	; 23

		ASSR    = 0;							// No async. TOSC1 mode
    2ffa:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
}


static void s_adc_init(void)
{
	sysclk_enable_module(POWER_RED_REG0, PRADC_bm);	// enable ADC sub-module
    2ffe:	61 e0       	ldi	r22, 0x01	; 1
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <sysclk_enable_module>
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    3006:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
    300a:	87 e8       	ldi	r24, 0x87	; 135
    300c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    3010:	80 ec       	ldi	r24, 0xC0	; 192
    3012:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	adc_disable_digital_inputs(_BV(ADC0D));		// disable the digital input on the ADC0 port

	adc_init(ADC_PRESCALER_DIV128);
	adc_set_admux(ADC_MUX_ADC0 | ADC_VREF_1V1 | ADC_ADJUSTMENT_RIGHT);

	ADCSRA |= _BV(ADIF);						// clear interrupt status bit by setting it to clear
    3016:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    301a:	80 61       	ori	r24, 0x10	; 16
    301c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}

/*  \brief Enable ADC interrupt */
static inline void adc_enable_interrupt(void)
{
	ADCSRA |= (1 << ADIE);
    3020:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3024:	88 60       	ori	r24, 0x08	; 8
    3026:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    302a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    302e:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
    3030:	86 60       	ori	r24, 0x06	; 6
	ADC_ADTS_REG = temp;
    3032:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
}

/*  \brief Enable ADC Auto Trigger */
static inline void adc_enable_autotrigger(void)
{
	ADCSRA |= (1 << ADATE);
    3036:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    303a:	80 62       	ori	r24, 0x20	; 32
    303c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ioport_init();
	s_tc_init();
	s_adc_init();

	/* I/O pins go active here */
	board_init();
    3040:	7e de       	rcall	.-772    	; 0x2d3e <board_init>
//@}
static inline reset_cause_t reset_cause_get_causes(void)
{
#if (MEGA_XX4 ||MEGA_XX4_A || MEGA_XX8 || MEGA_XX8_A || \
	MEGA_XX || MEGA_XX_UN2 || MEGA_XX0_1 || MEGA_RF || MEGA_UNCATEGORIZED) && !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t temp_mcsr = MCUSR ;
    3042:	84 b7       	in	r24, 0x34	; 52
    3044:	98 2f       	mov	r25, r24
    3046:	97 70       	andi	r25, 0x07	; 7

	reset_cause_t rc = reset_cause_get_causes();
	if (rc & CHIP_RESET_CAUSE_EXTRST	||
		rc & CHIP_RESET_CAUSE_BOD_CPU	||
    3048:	11 f4       	brne	.+4      	; 0x304e <main+0xd2>
		rc & CHIP_RESET_CAUSE_POR		||
    304a:	81 11       	cpse	r24, r1
    304c:	2b c0       	rjmp	.+86     	; 0x30a4 <main+0x128>

/* HELPERS */

static void s_reset_global_vars(void)
{
	irqflags_t flags	= cpu_irq_save();
    304e:	78 de       	rcall	.-784    	; 0x2d40 <cpu_irq_save>
	cpu_irq_disable();
    3050:	f8 94       	cli

	g_adc_state			= ADC_STATE_PRE_LDR;
    3052:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <g_adc_state>
	g_adc_light			= 0.f;
    3056:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <g_adc_light>
    305a:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <g_adc_light+0x1>
    305e:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <g_adc_light+0x2>
    3062:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <g_adc_light+0x3>
	g_adc_temp			= 0.f;
    3066:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <g_adc_temp>
    306a:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <g_adc_temp+0x1>
    306e:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <g_adc_temp+0x2>
    3072:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <g_adc_temp+0x3>

	g_temp				= 25.f;
    3076:	40 e0       	ldi	r20, 0x00	; 0
    3078:	50 e0       	ldi	r21, 0x00	; 0
    307a:	68 ec       	ldi	r22, 0xC8	; 200
    307c:	71 e4       	ldi	r23, 0x41	; 65
    307e:	40 93 b3 03 	sts	0x03B3, r20	; 0x8003b3 <g_temp>
    3082:	50 93 b4 03 	sts	0x03B4, r21	; 0x8003b4 <g_temp+0x1>
    3086:	60 93 b5 03 	sts	0x03B5, r22	; 0x8003b5 <g_temp+0x2>
    308a:	70 93 b6 03 	sts	0x03B6, r23	; 0x8003b6 <g_temp+0x3>
	g_lcdbl_dimmer		= 64;
    308e:	90 e4       	ldi	r25, 0x40	; 64
    3090:	90 93 b2 03 	sts	0x03B2, r25	; 0x8003b2 <g_lcdbl_dimmer>

	g_status.doAnimation = false;
    3094:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <g_status>
	g_status.isAnimationStopped = false;
    3098:	9e 7f       	andi	r25, 0xFE	; 254
    309a:	9d 7f       	andi	r25, 0xFD	; 253
    309c:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <g_status>
    30a0:	8f bf       	out	0x3f, r24	; 63
    30a2:	0d c0       	rjmp	.+26     	; 0x30be <main+0x142>
		rc & CHIP_RESET_CAUSE_POR		||
		!rc) {
		s_reset_global_vars();
	} else {
		/* DEBUG */
		g_u32_DEBUG21 = rc;
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	a0 e0       	ldi	r26, 0x00	; 0
    30a8:	b0 e0       	ldi	r27, 0x00	; 0
    30aa:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <g_u32_DEBUG21>
    30ae:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <g_u32_DEBUG21+0x1>
    30b2:	a0 93 82 03 	sts	0x0382, r26	; 0x800382 <g_u32_DEBUG21+0x2>
    30b6:	b0 93 83 03 	sts	0x0383, r27	; 0x800383 <g_u32_DEBUG21+0x3>
		asm_break();
    30ba:	0e 94 ef 06 	call	0xdde	; 0xdde <asm_break>
	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
}

static void s_twi_init(uint8_t twi_addr, uint8_t twi_addr_bm)
{
	sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    30be:	60 e8       	ldi	r22, 0x80	; 128
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <sysclk_enable_module>

	irqflags_t flags = cpu_irq_save();
    30c6:	3c de       	rcall	.-904    	; 0x2d40 <cpu_irq_save>

	TWSR = (0b00 << TWPS0);						// Prescaler value = 1
    30c8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 2;									// TWI bit-rate = 400 kBit/sec @ 8 MHz when master mode active
    30cc:	92 e0       	ldi	r25, 0x02	; 2
    30ce:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	TWAR  = (twi_addr    << 1) /* | (TWI_SLAVE_ADDR_GCE << TWGCE)*/ ;
    30d2:	94 e4       	ldi	r25, 0x44	; 68
    30d4:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	TWAMR = (twi_addr_bm << 1);
    30d8:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__TEXT_REGION_LENGTH__+0x7e00bd>

	TWCR = _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// Enable Acknowledge, ENable TWI port, Interrupt Enable, no START or STOP bit
    30dc:	95 e4       	ldi	r25, 0x45	; 69
    30de:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    30e2:	8f bf       	out	0x3f, r24	; 63

	/* I2C interface - 10 MHz-Ref-Osc. second display */
	s_twi_init(TWI_SLAVE_ADDR_10MHZREFOSC, TWI_SLAVE_ADDR_BM);

	/* All interrupt sources prepared here - IRQ activation */
	cpu_irq_enable();
    30e4:	78 94       	sei
	/* TC0: not in use */
	/* TC1: Audio output @ 16-bit counter PWM, used: 10-bit resolution */
	/* TC2: LCD backlight w/ 8-bit resolution */
	{
		/* Timer Synchronous Mode - trigger */
		GTCCR = 0;								// trigger the sync for all counters
    30e6:	13 bc       	out	0x23, r1	; 35

	/* Start of sub-modules */
	s_tc_start();								// All clocks and PWM timers start here

	/* Initialize external components */
	lcd_init();
    30e8:	c4 db       	rcall	.-2168   	; 0x2872 <lcd_init>
	lcd_test(0b11110001);						// Debugging purposes
    30ea:	81 ef       	ldi	r24, 0xF1	; 241
    30ec:	ea d9       	rcall	.-3116   	; 0x24c2 <lcd_test>


	/* main loop */
	runmode = 1;
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <runmode>
	} while (more);
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    30f4:	c1 e0       	ldi	r28, 0x01	; 1
	lcd_test(0b11110001);						// Debugging purposes


	/* main loop */
	runmode = 1;
    while (runmode) {
    30f6:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <runmode>
    30fa:	88 23       	and	r24, r24
    30fc:	39 f0       	breq	.+14     	; 0x310c <main+0x190>
	    s_task();
    30fe:	78 de       	rcall	.-784    	; 0x2df0 <s_task>
	} while (more);
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    3100:	c3 bf       	out	0x33, r28	; 51
		  | _BV(SE);							// enable sleep command

	__asm__ __volatile__ ("sleep" ::: "memory");
    3102:	88 95       	sleep

	SMCR &= ~(_BV(SE));							// disable sleep command
    3104:	83 b7       	in	r24, 0x33	; 51
    3106:	8e 7f       	andi	r24, 0xFE	; 254
    3108:	83 bf       	out	0x33, r24	; 51
    310a:	f5 cf       	rjmp	.-22     	; 0x30f6 <main+0x17a>
	    s_enter_sleep(SLEEP_MODE_IDLE);
    }


	/* Shutdown external components */
	lcd_shutdown();
    310c:	c6 db       	rcall	.-2164   	; 0x289a <lcd_shutdown>

	cpu_irq_disable();
    310e:	f8 94       	cli

	/* disable sub-modules */
	ACSR |= _BV(ACD);							// disable AnalogCompare sub-module
    3110:	80 b7       	in	r24, 0x30	; 48
    3112:	80 68       	ori	r24, 0x80	; 128
    3114:	80 bf       	out	0x30, r24	; 48

	sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    3116:	64 e0       	ldi	r22, 0x04	; 4
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	0e 94 12 03 	call	0x624	; 0x624 <sysclk_disable_module>
	sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    311e:	62 e0       	ldi	r22, 0x02	; 2
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	0e 94 12 03 	call	0x624	; 0x624 <sysclk_disable_module>
	cpu_irq_restore(flags);
}

static void s_twi_disable(void)
{
	irqflags_t flags = cpu_irq_save();
    3126:	0c de       	rcall	.-1000   	; 0x2d40 <cpu_irq_save>

	TWCR = _BV(TWEN);							// disable the interrupt source
    3128:	94 e0       	ldi	r25, 0x04	; 4
    312a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    312e:	3c 98       	cbi	0x07, 4	; 7
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
    3130:	44 9a       	sbi	0x08, 4	; 8
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    3132:	3d 98       	cbi	0x07, 5	; 7
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
    3134:	45 9a       	sbi	0x08, 5	; 8
	ioport_set_pin_mode(SDA_GPIO, IOPORT_MODE_PULLUP);

	ioport_set_pin_dir(SCL_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(SCL_GPIO, IOPORT_MODE_PULLUP);

	TWCR = 0;									// disable the TWI port
    3136:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    313a:	8f bf       	out	0x3f, r24	; 63

	cpu_irq_restore(flags);

	sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    313c:	60 e8       	ldi	r22, 0x80	; 128
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	0e 94 12 03 	call	0x624	; 0x624 <sysclk_disable_module>
}

/*  \brief Disable ADC interrupt */
static inline void adc_disable_interrupt(void)
{
	ADCSRA &= ~(1 << ADIE);
    3144:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3148:	87 7f       	andi	r24, 0xF7	; 247
    314a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}

/*  \brief Disable ADC Auto Trigger */
static inline void adc_disable_autotrigger(void)
{
	ADCSRA &= ~(1 << ADATE);
    314e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3152:	8f 7d       	andi	r24, 0xDF	; 223
    3154:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 */
static inline void adc_set_autotrigger_source(enum adc_auto_trigger_source trg)
{
	uint8_t temp;

	temp = (ADC_ADTS_REG & ~(ADC_ADTS_SOURCE_MASK));
    3158:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    315c:	88 7f       	andi	r24, 0xF8	; 248
	temp |= (uint8_t)trg;
	ADC_ADTS_REG = temp;
    315e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 *
 * \param regval   ADC input mux selection and voltage reference
 */
static inline void adc_set_admux(uint8_t regval)
{
	ADMUX = regval;
    3162:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 * \param pinmask   ADC pin bitmask
 */
static inline void adc_disable_digital_inputs(uint8_t pinmask)
{
#if defined(DIDR0)
	DIDR0 = pinmask;
    3166:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	adc_disable_autotrigger();
	adc_set_autotrigger_source(0);
	adc_set_admux(0);
	adc_disable_digital_inputs(0);

	sysclk_disable_module(POWER_RED_REG0, PRADC_bm);	// disable ADC sub-module
    316a:	61 e0       	ldi	r22, 0x01	; 1
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	0e 94 12 03 	call	0x624	; 0x624 <sysclk_disable_module>
	}
}

static void s_tc_disable(void)
{
	irqflags_t flags = cpu_irq_save();
    3172:	e6 dd       	rcall	.-1076   	; 0x2d40 <cpu_irq_save>
    3174:	c8 2f       	mov	r28, r24

	/* TC0: not in use */
	{
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    3176:	60 e2       	ldi	r22, 0x20	; 32
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	0e 94 12 03 	call	0x624	; 0x624 <sysclk_disable_module>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
    317e:	21 98       	cbi	0x04, 1	; 4
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
	} else if (mode == IOPORT_MODE_PULLDOWN) {
		base->PORTDATA &= ~mask_pin;
    3180:	29 98       	cbi	0x05, 1	; 5
	{
		// bring pin to high Z mode to reduce audible plop noise
		ioport_set_pin_dir(AUDIO_PWM, IOPORT_DIR_INPUT);
		ioport_set_pin_mode(AUDIO_PWM, IOPORT_MODE_PULLDOWN);

		TCCR1A  = 0;							// release alternate port function
    3182:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1B  = 0;
    3186:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		TCCR1C  = 0;
    318a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>

		TIMSK1  = 0;							// no interrupts
    318e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    3192:	68 e0       	ldi	r22, 0x08	; 8
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	0e 94 12 03 	call	0x624	; 0x624 <sysclk_disable_module>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
    319a:	23 9a       	sbi	0x04, 3	; 4
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    319c:	2b 98       	cbi	0x05, 3	; 5
	/* TC2 - OC2A: LCD backlight w/ 8-bit resolution - overflows with abt. 61 Hz */
	{
		ioport_set_pin_dir(LCDBL_PWM, IOPORT_DIR_OUTPUT);
		ioport_set_pin_level(LCDBL_PWM, false);	// turn backlight off

		TCCR2A  = 0;							// release alternate port function
    319e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
		TCCR2B  = 0;
    31a2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

		TIMSK2  = 0;							// no interrupts
    31a6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>

		ASSR    = 0;							// no async TOSC1 mode
    31aa:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>

		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    31ae:	60 e4       	ldi	r22, 0x40	; 64
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	0e 94 12 03 	call	0x624	; 0x624 <sysclk_disable_module>
 */

static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();
    31b6:	c4 dd       	rcall	.-1144   	; 0x2d40 <cpu_irq_save>

	ASM(
    31b8:	5f 93       	push	r21
    31ba:	50 e8       	ldi	r21, 0x80	; 128
    31bc:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    31c0:	50 e0       	ldi	r21, 0x00	; 0
    31c2:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    31c6:	5f 91       	pop	r21
    31c8:	8f bf       	out	0x3f, r24	; 63
    31ca:	cf bf       	out	0x3f, r28	; 63
	} while (more);
}

static void s_enter_sleep(uint8_t sleep_mode)
{
	SMCR  = (sleep_mode << SM0)
    31cc:	89 e0       	ldi	r24, 0x09	; 9
    31ce:	83 bf       	out	0x33, r24	; 51
		  | _BV(SE);							// enable sleep command

	__asm__ __volatile__ ("sleep" ::: "memory");
    31d0:	88 95       	sleep

	SMCR &= ~(_BV(SE));							// disable sleep command
    31d2:	83 b7       	in	r24, 0x33	; 51
    31d4:	8e 7f       	andi	r24, 0xFE	; 254
    31d6:	83 bf       	out	0x33, r24	; 51
	s_tc_disable();

    s_enter_sleep(SLEEP_MODE_PWR_DOWN);

    return retcode;								// should never be reached
}
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	df 91       	pop	r29
    31de:	cf 91       	pop	r28
    31e0:	08 95       	ret

000031e2 <__subsf3>:
    31e2:	50 58       	subi	r21, 0x80	; 128

000031e4 <__addsf3>:
    31e4:	bb 27       	eor	r27, r27
    31e6:	aa 27       	eor	r26, r26
    31e8:	0e d0       	rcall	.+28     	; 0x3206 <__addsf3x>
    31ea:	75 c1       	rjmp	.+746    	; 0x34d6 <__fp_round>
    31ec:	66 d1       	rcall	.+716    	; 0x34ba <__fp_pscA>
    31ee:	30 f0       	brcs	.+12     	; 0x31fc <__addsf3+0x18>
    31f0:	6b d1       	rcall	.+726    	; 0x34c8 <__fp_pscB>
    31f2:	20 f0       	brcs	.+8      	; 0x31fc <__addsf3+0x18>
    31f4:	31 f4       	brne	.+12     	; 0x3202 <__addsf3+0x1e>
    31f6:	9f 3f       	cpi	r25, 0xFF	; 255
    31f8:	11 f4       	brne	.+4      	; 0x31fe <__addsf3+0x1a>
    31fa:	1e f4       	brtc	.+6      	; 0x3202 <__addsf3+0x1e>
    31fc:	5b c1       	rjmp	.+694    	; 0x34b4 <__fp_nan>
    31fe:	0e f4       	brtc	.+2      	; 0x3202 <__addsf3+0x1e>
    3200:	e0 95       	com	r30
    3202:	e7 fb       	bst	r30, 7
    3204:	51 c1       	rjmp	.+674    	; 0x34a8 <__fp_inf>

00003206 <__addsf3x>:
    3206:	e9 2f       	mov	r30, r25
    3208:	77 d1       	rcall	.+750    	; 0x34f8 <__fp_split3>
    320a:	80 f3       	brcs	.-32     	; 0x31ec <__addsf3+0x8>
    320c:	ba 17       	cp	r27, r26
    320e:	62 07       	cpc	r22, r18
    3210:	73 07       	cpc	r23, r19
    3212:	84 07       	cpc	r24, r20
    3214:	95 07       	cpc	r25, r21
    3216:	18 f0       	brcs	.+6      	; 0x321e <__addsf3x+0x18>
    3218:	71 f4       	brne	.+28     	; 0x3236 <__addsf3x+0x30>
    321a:	9e f5       	brtc	.+102    	; 0x3282 <__addsf3x+0x7c>
    321c:	8f c1       	rjmp	.+798    	; 0x353c <__fp_zero>
    321e:	0e f4       	brtc	.+2      	; 0x3222 <__addsf3x+0x1c>
    3220:	e0 95       	com	r30
    3222:	0b 2e       	mov	r0, r27
    3224:	ba 2f       	mov	r27, r26
    3226:	a0 2d       	mov	r26, r0
    3228:	0b 01       	movw	r0, r22
    322a:	b9 01       	movw	r22, r18
    322c:	90 01       	movw	r18, r0
    322e:	0c 01       	movw	r0, r24
    3230:	ca 01       	movw	r24, r20
    3232:	a0 01       	movw	r20, r0
    3234:	11 24       	eor	r1, r1
    3236:	ff 27       	eor	r31, r31
    3238:	59 1b       	sub	r21, r25
    323a:	99 f0       	breq	.+38     	; 0x3262 <__addsf3x+0x5c>
    323c:	59 3f       	cpi	r21, 0xF9	; 249
    323e:	50 f4       	brcc	.+20     	; 0x3254 <__addsf3x+0x4e>
    3240:	50 3e       	cpi	r21, 0xE0	; 224
    3242:	68 f1       	brcs	.+90     	; 0x329e <__addsf3x+0x98>
    3244:	1a 16       	cp	r1, r26
    3246:	f0 40       	sbci	r31, 0x00	; 0
    3248:	a2 2f       	mov	r26, r18
    324a:	23 2f       	mov	r18, r19
    324c:	34 2f       	mov	r19, r20
    324e:	44 27       	eor	r20, r20
    3250:	58 5f       	subi	r21, 0xF8	; 248
    3252:	f3 cf       	rjmp	.-26     	; 0x323a <__addsf3x+0x34>
    3254:	46 95       	lsr	r20
    3256:	37 95       	ror	r19
    3258:	27 95       	ror	r18
    325a:	a7 95       	ror	r26
    325c:	f0 40       	sbci	r31, 0x00	; 0
    325e:	53 95       	inc	r21
    3260:	c9 f7       	brne	.-14     	; 0x3254 <__addsf3x+0x4e>
    3262:	7e f4       	brtc	.+30     	; 0x3282 <__addsf3x+0x7c>
    3264:	1f 16       	cp	r1, r31
    3266:	ba 0b       	sbc	r27, r26
    3268:	62 0b       	sbc	r22, r18
    326a:	73 0b       	sbc	r23, r19
    326c:	84 0b       	sbc	r24, r20
    326e:	ba f0       	brmi	.+46     	; 0x329e <__addsf3x+0x98>
    3270:	91 50       	subi	r25, 0x01	; 1
    3272:	a1 f0       	breq	.+40     	; 0x329c <__addsf3x+0x96>
    3274:	ff 0f       	add	r31, r31
    3276:	bb 1f       	adc	r27, r27
    3278:	66 1f       	adc	r22, r22
    327a:	77 1f       	adc	r23, r23
    327c:	88 1f       	adc	r24, r24
    327e:	c2 f7       	brpl	.-16     	; 0x3270 <__addsf3x+0x6a>
    3280:	0e c0       	rjmp	.+28     	; 0x329e <__addsf3x+0x98>
    3282:	ba 0f       	add	r27, r26
    3284:	62 1f       	adc	r22, r18
    3286:	73 1f       	adc	r23, r19
    3288:	84 1f       	adc	r24, r20
    328a:	48 f4       	brcc	.+18     	; 0x329e <__addsf3x+0x98>
    328c:	87 95       	ror	r24
    328e:	77 95       	ror	r23
    3290:	67 95       	ror	r22
    3292:	b7 95       	ror	r27
    3294:	f7 95       	ror	r31
    3296:	9e 3f       	cpi	r25, 0xFE	; 254
    3298:	08 f0       	brcs	.+2      	; 0x329c <__addsf3x+0x96>
    329a:	b3 cf       	rjmp	.-154    	; 0x3202 <__addsf3+0x1e>
    329c:	93 95       	inc	r25
    329e:	88 0f       	add	r24, r24
    32a0:	08 f0       	brcs	.+2      	; 0x32a4 <__addsf3x+0x9e>
    32a2:	99 27       	eor	r25, r25
    32a4:	ee 0f       	add	r30, r30
    32a6:	97 95       	ror	r25
    32a8:	87 95       	ror	r24
    32aa:	08 95       	ret

000032ac <__cmpsf2>:
    32ac:	d9 d0       	rcall	.+434    	; 0x3460 <__fp_cmp>
    32ae:	08 f4       	brcc	.+2      	; 0x32b2 <__cmpsf2+0x6>
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	08 95       	ret

000032b4 <__divsf3>:
    32b4:	0c d0       	rcall	.+24     	; 0x32ce <__divsf3x>
    32b6:	0f c1       	rjmp	.+542    	; 0x34d6 <__fp_round>
    32b8:	07 d1       	rcall	.+526    	; 0x34c8 <__fp_pscB>
    32ba:	40 f0       	brcs	.+16     	; 0x32cc <__divsf3+0x18>
    32bc:	fe d0       	rcall	.+508    	; 0x34ba <__fp_pscA>
    32be:	30 f0       	brcs	.+12     	; 0x32cc <__divsf3+0x18>
    32c0:	21 f4       	brne	.+8      	; 0x32ca <__divsf3+0x16>
    32c2:	5f 3f       	cpi	r21, 0xFF	; 255
    32c4:	19 f0       	breq	.+6      	; 0x32cc <__divsf3+0x18>
    32c6:	f0 c0       	rjmp	.+480    	; 0x34a8 <__fp_inf>
    32c8:	51 11       	cpse	r21, r1
    32ca:	39 c1       	rjmp	.+626    	; 0x353e <__fp_szero>
    32cc:	f3 c0       	rjmp	.+486    	; 0x34b4 <__fp_nan>

000032ce <__divsf3x>:
    32ce:	14 d1       	rcall	.+552    	; 0x34f8 <__fp_split3>
    32d0:	98 f3       	brcs	.-26     	; 0x32b8 <__divsf3+0x4>

000032d2 <__divsf3_pse>:
    32d2:	99 23       	and	r25, r25
    32d4:	c9 f3       	breq	.-14     	; 0x32c8 <__divsf3+0x14>
    32d6:	55 23       	and	r21, r21
    32d8:	b1 f3       	breq	.-20     	; 0x32c6 <__divsf3+0x12>
    32da:	95 1b       	sub	r25, r21
    32dc:	55 0b       	sbc	r21, r21
    32de:	bb 27       	eor	r27, r27
    32e0:	aa 27       	eor	r26, r26
    32e2:	62 17       	cp	r22, r18
    32e4:	73 07       	cpc	r23, r19
    32e6:	84 07       	cpc	r24, r20
    32e8:	38 f0       	brcs	.+14     	; 0x32f8 <__divsf3_pse+0x26>
    32ea:	9f 5f       	subi	r25, 0xFF	; 255
    32ec:	5f 4f       	sbci	r21, 0xFF	; 255
    32ee:	22 0f       	add	r18, r18
    32f0:	33 1f       	adc	r19, r19
    32f2:	44 1f       	adc	r20, r20
    32f4:	aa 1f       	adc	r26, r26
    32f6:	a9 f3       	breq	.-22     	; 0x32e2 <__divsf3_pse+0x10>
    32f8:	33 d0       	rcall	.+102    	; 0x3360 <__divsf3_pse+0x8e>
    32fa:	0e 2e       	mov	r0, r30
    32fc:	3a f0       	brmi	.+14     	; 0x330c <__divsf3_pse+0x3a>
    32fe:	e0 e8       	ldi	r30, 0x80	; 128
    3300:	30 d0       	rcall	.+96     	; 0x3362 <__divsf3_pse+0x90>
    3302:	91 50       	subi	r25, 0x01	; 1
    3304:	50 40       	sbci	r21, 0x00	; 0
    3306:	e6 95       	lsr	r30
    3308:	00 1c       	adc	r0, r0
    330a:	ca f7       	brpl	.-14     	; 0x32fe <__divsf3_pse+0x2c>
    330c:	29 d0       	rcall	.+82     	; 0x3360 <__divsf3_pse+0x8e>
    330e:	fe 2f       	mov	r31, r30
    3310:	27 d0       	rcall	.+78     	; 0x3360 <__divsf3_pse+0x8e>
    3312:	66 0f       	add	r22, r22
    3314:	77 1f       	adc	r23, r23
    3316:	88 1f       	adc	r24, r24
    3318:	bb 1f       	adc	r27, r27
    331a:	26 17       	cp	r18, r22
    331c:	37 07       	cpc	r19, r23
    331e:	48 07       	cpc	r20, r24
    3320:	ab 07       	cpc	r26, r27
    3322:	b0 e8       	ldi	r27, 0x80	; 128
    3324:	09 f0       	breq	.+2      	; 0x3328 <__divsf3_pse+0x56>
    3326:	bb 0b       	sbc	r27, r27
    3328:	80 2d       	mov	r24, r0
    332a:	bf 01       	movw	r22, r30
    332c:	ff 27       	eor	r31, r31
    332e:	93 58       	subi	r25, 0x83	; 131
    3330:	5f 4f       	sbci	r21, 0xFF	; 255
    3332:	2a f0       	brmi	.+10     	; 0x333e <__divsf3_pse+0x6c>
    3334:	9e 3f       	cpi	r25, 0xFE	; 254
    3336:	51 05       	cpc	r21, r1
    3338:	68 f0       	brcs	.+26     	; 0x3354 <__divsf3_pse+0x82>
    333a:	b6 c0       	rjmp	.+364    	; 0x34a8 <__fp_inf>
    333c:	00 c1       	rjmp	.+512    	; 0x353e <__fp_szero>
    333e:	5f 3f       	cpi	r21, 0xFF	; 255
    3340:	ec f3       	brlt	.-6      	; 0x333c <__divsf3_pse+0x6a>
    3342:	98 3e       	cpi	r25, 0xE8	; 232
    3344:	dc f3       	brlt	.-10     	; 0x333c <__divsf3_pse+0x6a>
    3346:	86 95       	lsr	r24
    3348:	77 95       	ror	r23
    334a:	67 95       	ror	r22
    334c:	b7 95       	ror	r27
    334e:	f7 95       	ror	r31
    3350:	9f 5f       	subi	r25, 0xFF	; 255
    3352:	c9 f7       	brne	.-14     	; 0x3346 <__divsf3_pse+0x74>
    3354:	88 0f       	add	r24, r24
    3356:	91 1d       	adc	r25, r1
    3358:	96 95       	lsr	r25
    335a:	87 95       	ror	r24
    335c:	97 f9       	bld	r25, 7
    335e:	08 95       	ret
    3360:	e1 e0       	ldi	r30, 0x01	; 1
    3362:	66 0f       	add	r22, r22
    3364:	77 1f       	adc	r23, r23
    3366:	88 1f       	adc	r24, r24
    3368:	bb 1f       	adc	r27, r27
    336a:	62 17       	cp	r22, r18
    336c:	73 07       	cpc	r23, r19
    336e:	84 07       	cpc	r24, r20
    3370:	ba 07       	cpc	r27, r26
    3372:	20 f0       	brcs	.+8      	; 0x337c <__divsf3_pse+0xaa>
    3374:	62 1b       	sub	r22, r18
    3376:	73 0b       	sbc	r23, r19
    3378:	84 0b       	sbc	r24, r20
    337a:	ba 0b       	sbc	r27, r26
    337c:	ee 1f       	adc	r30, r30
    337e:	88 f7       	brcc	.-30     	; 0x3362 <__divsf3_pse+0x90>
    3380:	e0 95       	com	r30
    3382:	08 95       	ret

00003384 <__fixsfsi>:
    3384:	04 d0       	rcall	.+8      	; 0x338e <__fixunssfsi>
    3386:	68 94       	set
    3388:	b1 11       	cpse	r27, r1
    338a:	d9 c0       	rjmp	.+434    	; 0x353e <__fp_szero>
    338c:	08 95       	ret

0000338e <__fixunssfsi>:
    338e:	bc d0       	rcall	.+376    	; 0x3508 <__fp_splitA>
    3390:	88 f0       	brcs	.+34     	; 0x33b4 <__fixunssfsi+0x26>
    3392:	9f 57       	subi	r25, 0x7F	; 127
    3394:	90 f0       	brcs	.+36     	; 0x33ba <__fixunssfsi+0x2c>
    3396:	b9 2f       	mov	r27, r25
    3398:	99 27       	eor	r25, r25
    339a:	b7 51       	subi	r27, 0x17	; 23
    339c:	a0 f0       	brcs	.+40     	; 0x33c6 <__fixunssfsi+0x38>
    339e:	d1 f0       	breq	.+52     	; 0x33d4 <__fixunssfsi+0x46>
    33a0:	66 0f       	add	r22, r22
    33a2:	77 1f       	adc	r23, r23
    33a4:	88 1f       	adc	r24, r24
    33a6:	99 1f       	adc	r25, r25
    33a8:	1a f0       	brmi	.+6      	; 0x33b0 <__fixunssfsi+0x22>
    33aa:	ba 95       	dec	r27
    33ac:	c9 f7       	brne	.-14     	; 0x33a0 <__fixunssfsi+0x12>
    33ae:	12 c0       	rjmp	.+36     	; 0x33d4 <__fixunssfsi+0x46>
    33b0:	b1 30       	cpi	r27, 0x01	; 1
    33b2:	81 f0       	breq	.+32     	; 0x33d4 <__fixunssfsi+0x46>
    33b4:	c3 d0       	rcall	.+390    	; 0x353c <__fp_zero>
    33b6:	b1 e0       	ldi	r27, 0x01	; 1
    33b8:	08 95       	ret
    33ba:	c0 c0       	rjmp	.+384    	; 0x353c <__fp_zero>
    33bc:	67 2f       	mov	r22, r23
    33be:	78 2f       	mov	r23, r24
    33c0:	88 27       	eor	r24, r24
    33c2:	b8 5f       	subi	r27, 0xF8	; 248
    33c4:	39 f0       	breq	.+14     	; 0x33d4 <__fixunssfsi+0x46>
    33c6:	b9 3f       	cpi	r27, 0xF9	; 249
    33c8:	cc f3       	brlt	.-14     	; 0x33bc <__fixunssfsi+0x2e>
    33ca:	86 95       	lsr	r24
    33cc:	77 95       	ror	r23
    33ce:	67 95       	ror	r22
    33d0:	b3 95       	inc	r27
    33d2:	d9 f7       	brne	.-10     	; 0x33ca <__fixunssfsi+0x3c>
    33d4:	3e f4       	brtc	.+14     	; 0x33e4 <__fixunssfsi+0x56>
    33d6:	90 95       	com	r25
    33d8:	80 95       	com	r24
    33da:	70 95       	com	r23
    33dc:	61 95       	neg	r22
    33de:	7f 4f       	sbci	r23, 0xFF	; 255
    33e0:	8f 4f       	sbci	r24, 0xFF	; 255
    33e2:	9f 4f       	sbci	r25, 0xFF	; 255
    33e4:	08 95       	ret

000033e6 <__floatunsisf>:
    33e6:	e8 94       	clt
    33e8:	09 c0       	rjmp	.+18     	; 0x33fc <__floatsisf+0x12>

000033ea <__floatsisf>:
    33ea:	97 fb       	bst	r25, 7
    33ec:	3e f4       	brtc	.+14     	; 0x33fc <__floatsisf+0x12>
    33ee:	90 95       	com	r25
    33f0:	80 95       	com	r24
    33f2:	70 95       	com	r23
    33f4:	61 95       	neg	r22
    33f6:	7f 4f       	sbci	r23, 0xFF	; 255
    33f8:	8f 4f       	sbci	r24, 0xFF	; 255
    33fa:	9f 4f       	sbci	r25, 0xFF	; 255
    33fc:	99 23       	and	r25, r25
    33fe:	a9 f0       	breq	.+42     	; 0x342a <__floatsisf+0x40>
    3400:	f9 2f       	mov	r31, r25
    3402:	96 e9       	ldi	r25, 0x96	; 150
    3404:	bb 27       	eor	r27, r27
    3406:	93 95       	inc	r25
    3408:	f6 95       	lsr	r31
    340a:	87 95       	ror	r24
    340c:	77 95       	ror	r23
    340e:	67 95       	ror	r22
    3410:	b7 95       	ror	r27
    3412:	f1 11       	cpse	r31, r1
    3414:	f8 cf       	rjmp	.-16     	; 0x3406 <__floatsisf+0x1c>
    3416:	fa f4       	brpl	.+62     	; 0x3456 <__floatsisf+0x6c>
    3418:	bb 0f       	add	r27, r27
    341a:	11 f4       	brne	.+4      	; 0x3420 <__floatsisf+0x36>
    341c:	60 ff       	sbrs	r22, 0
    341e:	1b c0       	rjmp	.+54     	; 0x3456 <__floatsisf+0x6c>
    3420:	6f 5f       	subi	r22, 0xFF	; 255
    3422:	7f 4f       	sbci	r23, 0xFF	; 255
    3424:	8f 4f       	sbci	r24, 0xFF	; 255
    3426:	9f 4f       	sbci	r25, 0xFF	; 255
    3428:	16 c0       	rjmp	.+44     	; 0x3456 <__floatsisf+0x6c>
    342a:	88 23       	and	r24, r24
    342c:	11 f0       	breq	.+4      	; 0x3432 <__floatsisf+0x48>
    342e:	96 e9       	ldi	r25, 0x96	; 150
    3430:	11 c0       	rjmp	.+34     	; 0x3454 <__floatsisf+0x6a>
    3432:	77 23       	and	r23, r23
    3434:	21 f0       	breq	.+8      	; 0x343e <__floatsisf+0x54>
    3436:	9e e8       	ldi	r25, 0x8E	; 142
    3438:	87 2f       	mov	r24, r23
    343a:	76 2f       	mov	r23, r22
    343c:	05 c0       	rjmp	.+10     	; 0x3448 <__floatsisf+0x5e>
    343e:	66 23       	and	r22, r22
    3440:	71 f0       	breq	.+28     	; 0x345e <__floatsisf+0x74>
    3442:	96 e8       	ldi	r25, 0x86	; 134
    3444:	86 2f       	mov	r24, r22
    3446:	70 e0       	ldi	r23, 0x00	; 0
    3448:	60 e0       	ldi	r22, 0x00	; 0
    344a:	2a f0       	brmi	.+10     	; 0x3456 <__floatsisf+0x6c>
    344c:	9a 95       	dec	r25
    344e:	66 0f       	add	r22, r22
    3450:	77 1f       	adc	r23, r23
    3452:	88 1f       	adc	r24, r24
    3454:	da f7       	brpl	.-10     	; 0x344c <__floatsisf+0x62>
    3456:	88 0f       	add	r24, r24
    3458:	96 95       	lsr	r25
    345a:	87 95       	ror	r24
    345c:	97 f9       	bld	r25, 7
    345e:	08 95       	ret

00003460 <__fp_cmp>:
    3460:	99 0f       	add	r25, r25
    3462:	00 08       	sbc	r0, r0
    3464:	55 0f       	add	r21, r21
    3466:	aa 0b       	sbc	r26, r26
    3468:	e0 e8       	ldi	r30, 0x80	; 128
    346a:	fe ef       	ldi	r31, 0xFE	; 254
    346c:	16 16       	cp	r1, r22
    346e:	17 06       	cpc	r1, r23
    3470:	e8 07       	cpc	r30, r24
    3472:	f9 07       	cpc	r31, r25
    3474:	c0 f0       	brcs	.+48     	; 0x34a6 <__fp_cmp+0x46>
    3476:	12 16       	cp	r1, r18
    3478:	13 06       	cpc	r1, r19
    347a:	e4 07       	cpc	r30, r20
    347c:	f5 07       	cpc	r31, r21
    347e:	98 f0       	brcs	.+38     	; 0x34a6 <__fp_cmp+0x46>
    3480:	62 1b       	sub	r22, r18
    3482:	73 0b       	sbc	r23, r19
    3484:	84 0b       	sbc	r24, r20
    3486:	95 0b       	sbc	r25, r21
    3488:	39 f4       	brne	.+14     	; 0x3498 <__fp_cmp+0x38>
    348a:	0a 26       	eor	r0, r26
    348c:	61 f0       	breq	.+24     	; 0x34a6 <__fp_cmp+0x46>
    348e:	23 2b       	or	r18, r19
    3490:	24 2b       	or	r18, r20
    3492:	25 2b       	or	r18, r21
    3494:	21 f4       	brne	.+8      	; 0x349e <__fp_cmp+0x3e>
    3496:	08 95       	ret
    3498:	0a 26       	eor	r0, r26
    349a:	09 f4       	brne	.+2      	; 0x349e <__fp_cmp+0x3e>
    349c:	a1 40       	sbci	r26, 0x01	; 1
    349e:	a6 95       	lsr	r26
    34a0:	8f ef       	ldi	r24, 0xFF	; 255
    34a2:	81 1d       	adc	r24, r1
    34a4:	81 1d       	adc	r24, r1
    34a6:	08 95       	ret

000034a8 <__fp_inf>:
    34a8:	97 f9       	bld	r25, 7
    34aa:	9f 67       	ori	r25, 0x7F	; 127
    34ac:	80 e8       	ldi	r24, 0x80	; 128
    34ae:	70 e0       	ldi	r23, 0x00	; 0
    34b0:	60 e0       	ldi	r22, 0x00	; 0
    34b2:	08 95       	ret

000034b4 <__fp_nan>:
    34b4:	9f ef       	ldi	r25, 0xFF	; 255
    34b6:	80 ec       	ldi	r24, 0xC0	; 192
    34b8:	08 95       	ret

000034ba <__fp_pscA>:
    34ba:	00 24       	eor	r0, r0
    34bc:	0a 94       	dec	r0
    34be:	16 16       	cp	r1, r22
    34c0:	17 06       	cpc	r1, r23
    34c2:	18 06       	cpc	r1, r24
    34c4:	09 06       	cpc	r0, r25
    34c6:	08 95       	ret

000034c8 <__fp_pscB>:
    34c8:	00 24       	eor	r0, r0
    34ca:	0a 94       	dec	r0
    34cc:	12 16       	cp	r1, r18
    34ce:	13 06       	cpc	r1, r19
    34d0:	14 06       	cpc	r1, r20
    34d2:	05 06       	cpc	r0, r21
    34d4:	08 95       	ret

000034d6 <__fp_round>:
    34d6:	09 2e       	mov	r0, r25
    34d8:	03 94       	inc	r0
    34da:	00 0c       	add	r0, r0
    34dc:	11 f4       	brne	.+4      	; 0x34e2 <__fp_round+0xc>
    34de:	88 23       	and	r24, r24
    34e0:	52 f0       	brmi	.+20     	; 0x34f6 <__fp_round+0x20>
    34e2:	bb 0f       	add	r27, r27
    34e4:	40 f4       	brcc	.+16     	; 0x34f6 <__fp_round+0x20>
    34e6:	bf 2b       	or	r27, r31
    34e8:	11 f4       	brne	.+4      	; 0x34ee <__fp_round+0x18>
    34ea:	60 ff       	sbrs	r22, 0
    34ec:	04 c0       	rjmp	.+8      	; 0x34f6 <__fp_round+0x20>
    34ee:	6f 5f       	subi	r22, 0xFF	; 255
    34f0:	7f 4f       	sbci	r23, 0xFF	; 255
    34f2:	8f 4f       	sbci	r24, 0xFF	; 255
    34f4:	9f 4f       	sbci	r25, 0xFF	; 255
    34f6:	08 95       	ret

000034f8 <__fp_split3>:
    34f8:	57 fd       	sbrc	r21, 7
    34fa:	90 58       	subi	r25, 0x80	; 128
    34fc:	44 0f       	add	r20, r20
    34fe:	55 1f       	adc	r21, r21
    3500:	59 f0       	breq	.+22     	; 0x3518 <__fp_splitA+0x10>
    3502:	5f 3f       	cpi	r21, 0xFF	; 255
    3504:	71 f0       	breq	.+28     	; 0x3522 <__fp_splitA+0x1a>
    3506:	47 95       	ror	r20

00003508 <__fp_splitA>:
    3508:	88 0f       	add	r24, r24
    350a:	97 fb       	bst	r25, 7
    350c:	99 1f       	adc	r25, r25
    350e:	61 f0       	breq	.+24     	; 0x3528 <__fp_splitA+0x20>
    3510:	9f 3f       	cpi	r25, 0xFF	; 255
    3512:	79 f0       	breq	.+30     	; 0x3532 <__fp_splitA+0x2a>
    3514:	87 95       	ror	r24
    3516:	08 95       	ret
    3518:	12 16       	cp	r1, r18
    351a:	13 06       	cpc	r1, r19
    351c:	14 06       	cpc	r1, r20
    351e:	55 1f       	adc	r21, r21
    3520:	f2 cf       	rjmp	.-28     	; 0x3506 <__fp_split3+0xe>
    3522:	46 95       	lsr	r20
    3524:	f1 df       	rcall	.-30     	; 0x3508 <__fp_splitA>
    3526:	08 c0       	rjmp	.+16     	; 0x3538 <__fp_splitA+0x30>
    3528:	16 16       	cp	r1, r22
    352a:	17 06       	cpc	r1, r23
    352c:	18 06       	cpc	r1, r24
    352e:	99 1f       	adc	r25, r25
    3530:	f1 cf       	rjmp	.-30     	; 0x3514 <__fp_splitA+0xc>
    3532:	86 95       	lsr	r24
    3534:	71 05       	cpc	r23, r1
    3536:	61 05       	cpc	r22, r1
    3538:	08 94       	sec
    353a:	08 95       	ret

0000353c <__fp_zero>:
    353c:	e8 94       	clt

0000353e <__fp_szero>:
    353e:	bb 27       	eor	r27, r27
    3540:	66 27       	eor	r22, r22
    3542:	77 27       	eor	r23, r23
    3544:	cb 01       	movw	r24, r22
    3546:	97 f9       	bld	r25, 7
    3548:	08 95       	ret

0000354a <__gesf2>:
    354a:	8a df       	rcall	.-236    	; 0x3460 <__fp_cmp>
    354c:	08 f4       	brcc	.+2      	; 0x3550 <__gesf2+0x6>
    354e:	8f ef       	ldi	r24, 0xFF	; 255
    3550:	08 95       	ret

00003552 <__mulsf3>:
    3552:	0b d0       	rcall	.+22     	; 0x356a <__mulsf3x>
    3554:	c0 cf       	rjmp	.-128    	; 0x34d6 <__fp_round>
    3556:	b1 df       	rcall	.-158    	; 0x34ba <__fp_pscA>
    3558:	28 f0       	brcs	.+10     	; 0x3564 <__mulsf3+0x12>
    355a:	b6 df       	rcall	.-148    	; 0x34c8 <__fp_pscB>
    355c:	18 f0       	brcs	.+6      	; 0x3564 <__mulsf3+0x12>
    355e:	95 23       	and	r25, r21
    3560:	09 f0       	breq	.+2      	; 0x3564 <__mulsf3+0x12>
    3562:	a2 cf       	rjmp	.-188    	; 0x34a8 <__fp_inf>
    3564:	a7 cf       	rjmp	.-178    	; 0x34b4 <__fp_nan>
    3566:	11 24       	eor	r1, r1
    3568:	ea cf       	rjmp	.-44     	; 0x353e <__fp_szero>

0000356a <__mulsf3x>:
    356a:	c6 df       	rcall	.-116    	; 0x34f8 <__fp_split3>
    356c:	a0 f3       	brcs	.-24     	; 0x3556 <__mulsf3+0x4>

0000356e <__mulsf3_pse>:
    356e:	95 9f       	mul	r25, r21
    3570:	d1 f3       	breq	.-12     	; 0x3566 <__mulsf3+0x14>
    3572:	95 0f       	add	r25, r21
    3574:	50 e0       	ldi	r21, 0x00	; 0
    3576:	55 1f       	adc	r21, r21
    3578:	62 9f       	mul	r22, r18
    357a:	f0 01       	movw	r30, r0
    357c:	72 9f       	mul	r23, r18
    357e:	bb 27       	eor	r27, r27
    3580:	f0 0d       	add	r31, r0
    3582:	b1 1d       	adc	r27, r1
    3584:	63 9f       	mul	r22, r19
    3586:	aa 27       	eor	r26, r26
    3588:	f0 0d       	add	r31, r0
    358a:	b1 1d       	adc	r27, r1
    358c:	aa 1f       	adc	r26, r26
    358e:	64 9f       	mul	r22, r20
    3590:	66 27       	eor	r22, r22
    3592:	b0 0d       	add	r27, r0
    3594:	a1 1d       	adc	r26, r1
    3596:	66 1f       	adc	r22, r22
    3598:	82 9f       	mul	r24, r18
    359a:	22 27       	eor	r18, r18
    359c:	b0 0d       	add	r27, r0
    359e:	a1 1d       	adc	r26, r1
    35a0:	62 1f       	adc	r22, r18
    35a2:	73 9f       	mul	r23, r19
    35a4:	b0 0d       	add	r27, r0
    35a6:	a1 1d       	adc	r26, r1
    35a8:	62 1f       	adc	r22, r18
    35aa:	83 9f       	mul	r24, r19
    35ac:	a0 0d       	add	r26, r0
    35ae:	61 1d       	adc	r22, r1
    35b0:	22 1f       	adc	r18, r18
    35b2:	74 9f       	mul	r23, r20
    35b4:	33 27       	eor	r19, r19
    35b6:	a0 0d       	add	r26, r0
    35b8:	61 1d       	adc	r22, r1
    35ba:	23 1f       	adc	r18, r19
    35bc:	84 9f       	mul	r24, r20
    35be:	60 0d       	add	r22, r0
    35c0:	21 1d       	adc	r18, r1
    35c2:	82 2f       	mov	r24, r18
    35c4:	76 2f       	mov	r23, r22
    35c6:	6a 2f       	mov	r22, r26
    35c8:	11 24       	eor	r1, r1
    35ca:	9f 57       	subi	r25, 0x7F	; 127
    35cc:	50 40       	sbci	r21, 0x00	; 0
    35ce:	8a f0       	brmi	.+34     	; 0x35f2 <__mulsf3_pse+0x84>
    35d0:	e1 f0       	breq	.+56     	; 0x360a <__mulsf3_pse+0x9c>
    35d2:	88 23       	and	r24, r24
    35d4:	4a f0       	brmi	.+18     	; 0x35e8 <__mulsf3_pse+0x7a>
    35d6:	ee 0f       	add	r30, r30
    35d8:	ff 1f       	adc	r31, r31
    35da:	bb 1f       	adc	r27, r27
    35dc:	66 1f       	adc	r22, r22
    35de:	77 1f       	adc	r23, r23
    35e0:	88 1f       	adc	r24, r24
    35e2:	91 50       	subi	r25, 0x01	; 1
    35e4:	50 40       	sbci	r21, 0x00	; 0
    35e6:	a9 f7       	brne	.-22     	; 0x35d2 <__mulsf3_pse+0x64>
    35e8:	9e 3f       	cpi	r25, 0xFE	; 254
    35ea:	51 05       	cpc	r21, r1
    35ec:	70 f0       	brcs	.+28     	; 0x360a <__mulsf3_pse+0x9c>
    35ee:	5c cf       	rjmp	.-328    	; 0x34a8 <__fp_inf>
    35f0:	a6 cf       	rjmp	.-180    	; 0x353e <__fp_szero>
    35f2:	5f 3f       	cpi	r21, 0xFF	; 255
    35f4:	ec f3       	brlt	.-6      	; 0x35f0 <__mulsf3_pse+0x82>
    35f6:	98 3e       	cpi	r25, 0xE8	; 232
    35f8:	dc f3       	brlt	.-10     	; 0x35f0 <__mulsf3_pse+0x82>
    35fa:	86 95       	lsr	r24
    35fc:	77 95       	ror	r23
    35fe:	67 95       	ror	r22
    3600:	b7 95       	ror	r27
    3602:	f7 95       	ror	r31
    3604:	e7 95       	ror	r30
    3606:	9f 5f       	subi	r25, 0xFF	; 255
    3608:	c1 f7       	brne	.-16     	; 0x35fa <__mulsf3_pse+0x8c>
    360a:	fe 2b       	or	r31, r30
    360c:	88 0f       	add	r24, r24
    360e:	91 1d       	adc	r25, r1
    3610:	96 95       	lsr	r25
    3612:	87 95       	ror	r24
    3614:	97 f9       	bld	r25, 7
    3616:	08 95       	ret

00003618 <__udivmodqi4>:
    3618:	99 1b       	sub	r25, r25
    361a:	79 e0       	ldi	r23, 0x09	; 9
    361c:	04 c0       	rjmp	.+8      	; 0x3626 <__udivmodqi4_ep>

0000361e <__udivmodqi4_loop>:
    361e:	99 1f       	adc	r25, r25
    3620:	96 17       	cp	r25, r22
    3622:	08 f0       	brcs	.+2      	; 0x3626 <__udivmodqi4_ep>
    3624:	96 1b       	sub	r25, r22

00003626 <__udivmodqi4_ep>:
    3626:	88 1f       	adc	r24, r24
    3628:	7a 95       	dec	r23
    362a:	c9 f7       	brne	.-14     	; 0x361e <__udivmodqi4_loop>
    362c:	80 95       	com	r24
    362e:	08 95       	ret

00003630 <__udivmodhi4>:
    3630:	aa 1b       	sub	r26, r26
    3632:	bb 1b       	sub	r27, r27
    3634:	51 e1       	ldi	r21, 0x11	; 17
    3636:	07 c0       	rjmp	.+14     	; 0x3646 <__udivmodhi4_ep>

00003638 <__udivmodhi4_loop>:
    3638:	aa 1f       	adc	r26, r26
    363a:	bb 1f       	adc	r27, r27
    363c:	a6 17       	cp	r26, r22
    363e:	b7 07       	cpc	r27, r23
    3640:	10 f0       	brcs	.+4      	; 0x3646 <__udivmodhi4_ep>
    3642:	a6 1b       	sub	r26, r22
    3644:	b7 0b       	sbc	r27, r23

00003646 <__udivmodhi4_ep>:
    3646:	88 1f       	adc	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	5a 95       	dec	r21
    364c:	a9 f7       	brne	.-22     	; 0x3638 <__udivmodhi4_loop>
    364e:	80 95       	com	r24
    3650:	90 95       	com	r25
    3652:	bc 01       	movw	r22, r24
    3654:	cd 01       	movw	r24, r26
    3656:	08 95       	ret

00003658 <__divmodhi4>:
    3658:	97 fb       	bst	r25, 7
    365a:	07 2e       	mov	r0, r23
    365c:	16 f4       	brtc	.+4      	; 0x3662 <__divmodhi4+0xa>
    365e:	00 94       	com	r0
    3660:	06 d0       	rcall	.+12     	; 0x366e <__divmodhi4_neg1>
    3662:	77 fd       	sbrc	r23, 7
    3664:	08 d0       	rcall	.+16     	; 0x3676 <__divmodhi4_neg2>
    3666:	e4 df       	rcall	.-56     	; 0x3630 <__udivmodhi4>
    3668:	07 fc       	sbrc	r0, 7
    366a:	05 d0       	rcall	.+10     	; 0x3676 <__divmodhi4_neg2>
    366c:	3e f4       	brtc	.+14     	; 0x367c <__divmodhi4_exit>

0000366e <__divmodhi4_neg1>:
    366e:	90 95       	com	r25
    3670:	81 95       	neg	r24
    3672:	9f 4f       	sbci	r25, 0xFF	; 255
    3674:	08 95       	ret

00003676 <__divmodhi4_neg2>:
    3676:	70 95       	com	r23
    3678:	61 95       	neg	r22
    367a:	7f 4f       	sbci	r23, 0xFF	; 255

0000367c <__divmodhi4_exit>:
    367c:	08 95       	ret

0000367e <snprintf>:
    367e:	ae e0       	ldi	r26, 0x0E	; 14
    3680:	b0 e0       	ldi	r27, 0x00	; 0
    3682:	e4 e4       	ldi	r30, 0x44	; 68
    3684:	fb e1       	ldi	r31, 0x1B	; 27
    3686:	a5 c2       	rjmp	.+1354   	; 0x3bd2 <__prologue_saves__+0x1c>
    3688:	0d 89       	ldd	r16, Y+21	; 0x15
    368a:	1e 89       	ldd	r17, Y+22	; 0x16
    368c:	8f 89       	ldd	r24, Y+23	; 0x17
    368e:	98 8d       	ldd	r25, Y+24	; 0x18
    3690:	26 e0       	ldi	r18, 0x06	; 6
    3692:	2c 83       	std	Y+4, r18	; 0x04
    3694:	1a 83       	std	Y+2, r17	; 0x02
    3696:	09 83       	std	Y+1, r16	; 0x01
    3698:	97 ff       	sbrs	r25, 7
    369a:	02 c0       	rjmp	.+4      	; 0x36a0 <snprintf+0x22>
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	90 e8       	ldi	r25, 0x80	; 128
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	9e 83       	std	Y+6, r25	; 0x06
    36a4:	8d 83       	std	Y+5, r24	; 0x05
    36a6:	ae 01       	movw	r20, r28
    36a8:	45 5e       	subi	r20, 0xE5	; 229
    36aa:	5f 4f       	sbci	r21, 0xFF	; 255
    36ac:	69 8d       	ldd	r22, Y+25	; 0x19
    36ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36b0:	ce 01       	movw	r24, r28
    36b2:	01 96       	adiw	r24, 0x01	; 1
    36b4:	11 d0       	rcall	.+34     	; 0x36d8 <vfprintf>
    36b6:	4d 81       	ldd	r20, Y+5	; 0x05
    36b8:	5e 81       	ldd	r21, Y+6	; 0x06
    36ba:	57 fd       	sbrc	r21, 7
    36bc:	0a c0       	rjmp	.+20     	; 0x36d2 <snprintf+0x54>
    36be:	2f 81       	ldd	r18, Y+7	; 0x07
    36c0:	38 85       	ldd	r19, Y+8	; 0x08
    36c2:	42 17       	cp	r20, r18
    36c4:	53 07       	cpc	r21, r19
    36c6:	0c f4       	brge	.+2      	; 0x36ca <snprintf+0x4c>
    36c8:	9a 01       	movw	r18, r20
    36ca:	f8 01       	movw	r30, r16
    36cc:	e2 0f       	add	r30, r18
    36ce:	f3 1f       	adc	r31, r19
    36d0:	10 82       	st	Z, r1
    36d2:	2e 96       	adiw	r28, 0x0e	; 14
    36d4:	e4 e0       	ldi	r30, 0x04	; 4
    36d6:	99 c2       	rjmp	.+1330   	; 0x3c0a <__epilogue_restores__+0x1c>

000036d8 <vfprintf>:
    36d8:	ac e0       	ldi	r26, 0x0C	; 12
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	e1 e7       	ldi	r30, 0x71	; 113
    36de:	fb e1       	ldi	r31, 0x1B	; 27
    36e0:	6a c2       	rjmp	.+1236   	; 0x3bb6 <__prologue_saves__>
    36e2:	7c 01       	movw	r14, r24
    36e4:	6b 01       	movw	r12, r22
    36e6:	8a 01       	movw	r16, r20
    36e8:	fc 01       	movw	r30, r24
    36ea:	17 82       	std	Z+7, r1	; 0x07
    36ec:	16 82       	std	Z+6, r1	; 0x06
    36ee:	83 81       	ldd	r24, Z+3	; 0x03
    36f0:	81 ff       	sbrs	r24, 1
    36f2:	b0 c1       	rjmp	.+864    	; 0x3a54 <vfprintf+0x37c>
    36f4:	ce 01       	movw	r24, r28
    36f6:	01 96       	adiw	r24, 0x01	; 1
    36f8:	4c 01       	movw	r8, r24
    36fa:	f7 01       	movw	r30, r14
    36fc:	93 81       	ldd	r25, Z+3	; 0x03
    36fe:	f6 01       	movw	r30, r12
    3700:	93 fd       	sbrc	r25, 3
    3702:	85 91       	lpm	r24, Z+
    3704:	93 ff       	sbrs	r25, 3
    3706:	81 91       	ld	r24, Z+
    3708:	6f 01       	movw	r12, r30
    370a:	88 23       	and	r24, r24
    370c:	09 f4       	brne	.+2      	; 0x3710 <vfprintf+0x38>
    370e:	9e c1       	rjmp	.+828    	; 0x3a4c <vfprintf+0x374>
    3710:	85 32       	cpi	r24, 0x25	; 37
    3712:	39 f4       	brne	.+14     	; 0x3722 <vfprintf+0x4a>
    3714:	93 fd       	sbrc	r25, 3
    3716:	85 91       	lpm	r24, Z+
    3718:	93 ff       	sbrs	r25, 3
    371a:	81 91       	ld	r24, Z+
    371c:	6f 01       	movw	r12, r30
    371e:	85 32       	cpi	r24, 0x25	; 37
    3720:	21 f4       	brne	.+8      	; 0x372a <vfprintf+0x52>
    3722:	b7 01       	movw	r22, r14
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	b1 d1       	rcall	.+866    	; 0x3a8a <fputc>
    3728:	e8 cf       	rjmp	.-48     	; 0x36fa <vfprintf+0x22>
    372a:	51 2c       	mov	r5, r1
    372c:	31 2c       	mov	r3, r1
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	20 32       	cpi	r18, 0x20	; 32
    3732:	a0 f4       	brcc	.+40     	; 0x375c <vfprintf+0x84>
    3734:	8b 32       	cpi	r24, 0x2B	; 43
    3736:	69 f0       	breq	.+26     	; 0x3752 <vfprintf+0x7a>
    3738:	30 f4       	brcc	.+12     	; 0x3746 <vfprintf+0x6e>
    373a:	80 32       	cpi	r24, 0x20	; 32
    373c:	59 f0       	breq	.+22     	; 0x3754 <vfprintf+0x7c>
    373e:	83 32       	cpi	r24, 0x23	; 35
    3740:	69 f4       	brne	.+26     	; 0x375c <vfprintf+0x84>
    3742:	20 61       	ori	r18, 0x10	; 16
    3744:	2c c0       	rjmp	.+88     	; 0x379e <vfprintf+0xc6>
    3746:	8d 32       	cpi	r24, 0x2D	; 45
    3748:	39 f0       	breq	.+14     	; 0x3758 <vfprintf+0x80>
    374a:	80 33       	cpi	r24, 0x30	; 48
    374c:	39 f4       	brne	.+14     	; 0x375c <vfprintf+0x84>
    374e:	21 60       	ori	r18, 0x01	; 1
    3750:	26 c0       	rjmp	.+76     	; 0x379e <vfprintf+0xc6>
    3752:	22 60       	ori	r18, 0x02	; 2
    3754:	24 60       	ori	r18, 0x04	; 4
    3756:	23 c0       	rjmp	.+70     	; 0x379e <vfprintf+0xc6>
    3758:	28 60       	ori	r18, 0x08	; 8
    375a:	21 c0       	rjmp	.+66     	; 0x379e <vfprintf+0xc6>
    375c:	27 fd       	sbrc	r18, 7
    375e:	27 c0       	rjmp	.+78     	; 0x37ae <vfprintf+0xd6>
    3760:	30 ed       	ldi	r19, 0xD0	; 208
    3762:	38 0f       	add	r19, r24
    3764:	3a 30       	cpi	r19, 0x0A	; 10
    3766:	78 f4       	brcc	.+30     	; 0x3786 <vfprintf+0xae>
    3768:	26 ff       	sbrs	r18, 6
    376a:	06 c0       	rjmp	.+12     	; 0x3778 <vfprintf+0xa0>
    376c:	fa e0       	ldi	r31, 0x0A	; 10
    376e:	5f 9e       	mul	r5, r31
    3770:	30 0d       	add	r19, r0
    3772:	11 24       	eor	r1, r1
    3774:	53 2e       	mov	r5, r19
    3776:	13 c0       	rjmp	.+38     	; 0x379e <vfprintf+0xc6>
    3778:	8a e0       	ldi	r24, 0x0A	; 10
    377a:	38 9e       	mul	r3, r24
    377c:	30 0d       	add	r19, r0
    377e:	11 24       	eor	r1, r1
    3780:	33 2e       	mov	r3, r19
    3782:	20 62       	ori	r18, 0x20	; 32
    3784:	0c c0       	rjmp	.+24     	; 0x379e <vfprintf+0xc6>
    3786:	8e 32       	cpi	r24, 0x2E	; 46
    3788:	21 f4       	brne	.+8      	; 0x3792 <vfprintf+0xba>
    378a:	26 fd       	sbrc	r18, 6
    378c:	5f c1       	rjmp	.+702    	; 0x3a4c <vfprintf+0x374>
    378e:	20 64       	ori	r18, 0x40	; 64
    3790:	06 c0       	rjmp	.+12     	; 0x379e <vfprintf+0xc6>
    3792:	8c 36       	cpi	r24, 0x6C	; 108
    3794:	11 f4       	brne	.+4      	; 0x379a <vfprintf+0xc2>
    3796:	20 68       	ori	r18, 0x80	; 128
    3798:	02 c0       	rjmp	.+4      	; 0x379e <vfprintf+0xc6>
    379a:	88 36       	cpi	r24, 0x68	; 104
    379c:	41 f4       	brne	.+16     	; 0x37ae <vfprintf+0xd6>
    379e:	f6 01       	movw	r30, r12
    37a0:	93 fd       	sbrc	r25, 3
    37a2:	85 91       	lpm	r24, Z+
    37a4:	93 ff       	sbrs	r25, 3
    37a6:	81 91       	ld	r24, Z+
    37a8:	6f 01       	movw	r12, r30
    37aa:	81 11       	cpse	r24, r1
    37ac:	c1 cf       	rjmp	.-126    	; 0x3730 <vfprintf+0x58>
    37ae:	98 2f       	mov	r25, r24
    37b0:	9f 7d       	andi	r25, 0xDF	; 223
    37b2:	95 54       	subi	r25, 0x45	; 69
    37b4:	93 30       	cpi	r25, 0x03	; 3
    37b6:	28 f4       	brcc	.+10     	; 0x37c2 <vfprintf+0xea>
    37b8:	0c 5f       	subi	r16, 0xFC	; 252
    37ba:	1f 4f       	sbci	r17, 0xFF	; 255
    37bc:	ff e3       	ldi	r31, 0x3F	; 63
    37be:	f9 83       	std	Y+1, r31	; 0x01
    37c0:	0d c0       	rjmp	.+26     	; 0x37dc <vfprintf+0x104>
    37c2:	83 36       	cpi	r24, 0x63	; 99
    37c4:	31 f0       	breq	.+12     	; 0x37d2 <vfprintf+0xfa>
    37c6:	83 37       	cpi	r24, 0x73	; 115
    37c8:	71 f0       	breq	.+28     	; 0x37e6 <vfprintf+0x10e>
    37ca:	83 35       	cpi	r24, 0x53	; 83
    37cc:	09 f0       	breq	.+2      	; 0x37d0 <vfprintf+0xf8>
    37ce:	57 c0       	rjmp	.+174    	; 0x387e <vfprintf+0x1a6>
    37d0:	21 c0       	rjmp	.+66     	; 0x3814 <vfprintf+0x13c>
    37d2:	f8 01       	movw	r30, r16
    37d4:	80 81       	ld	r24, Z
    37d6:	89 83       	std	Y+1, r24	; 0x01
    37d8:	0e 5f       	subi	r16, 0xFE	; 254
    37da:	1f 4f       	sbci	r17, 0xFF	; 255
    37dc:	44 24       	eor	r4, r4
    37de:	43 94       	inc	r4
    37e0:	51 2c       	mov	r5, r1
    37e2:	54 01       	movw	r10, r8
    37e4:	14 c0       	rjmp	.+40     	; 0x380e <vfprintf+0x136>
    37e6:	38 01       	movw	r6, r16
    37e8:	f2 e0       	ldi	r31, 0x02	; 2
    37ea:	6f 0e       	add	r6, r31
    37ec:	71 1c       	adc	r7, r1
    37ee:	f8 01       	movw	r30, r16
    37f0:	a0 80       	ld	r10, Z
    37f2:	b1 80       	ldd	r11, Z+1	; 0x01
    37f4:	26 ff       	sbrs	r18, 6
    37f6:	03 c0       	rjmp	.+6      	; 0x37fe <vfprintf+0x126>
    37f8:	65 2d       	mov	r22, r5
    37fa:	70 e0       	ldi	r23, 0x00	; 0
    37fc:	02 c0       	rjmp	.+4      	; 0x3802 <vfprintf+0x12a>
    37fe:	6f ef       	ldi	r22, 0xFF	; 255
    3800:	7f ef       	ldi	r23, 0xFF	; 255
    3802:	c5 01       	movw	r24, r10
    3804:	2c 87       	std	Y+12, r18	; 0x0c
    3806:	36 d1       	rcall	.+620    	; 0x3a74 <strnlen>
    3808:	2c 01       	movw	r4, r24
    380a:	83 01       	movw	r16, r6
    380c:	2c 85       	ldd	r18, Y+12	; 0x0c
    380e:	2f 77       	andi	r18, 0x7F	; 127
    3810:	22 2e       	mov	r2, r18
    3812:	16 c0       	rjmp	.+44     	; 0x3840 <vfprintf+0x168>
    3814:	38 01       	movw	r6, r16
    3816:	f2 e0       	ldi	r31, 0x02	; 2
    3818:	6f 0e       	add	r6, r31
    381a:	71 1c       	adc	r7, r1
    381c:	f8 01       	movw	r30, r16
    381e:	a0 80       	ld	r10, Z
    3820:	b1 80       	ldd	r11, Z+1	; 0x01
    3822:	26 ff       	sbrs	r18, 6
    3824:	03 c0       	rjmp	.+6      	; 0x382c <vfprintf+0x154>
    3826:	65 2d       	mov	r22, r5
    3828:	70 e0       	ldi	r23, 0x00	; 0
    382a:	02 c0       	rjmp	.+4      	; 0x3830 <vfprintf+0x158>
    382c:	6f ef       	ldi	r22, 0xFF	; 255
    382e:	7f ef       	ldi	r23, 0xFF	; 255
    3830:	c5 01       	movw	r24, r10
    3832:	2c 87       	std	Y+12, r18	; 0x0c
    3834:	14 d1       	rcall	.+552    	; 0x3a5e <strnlen_P>
    3836:	2c 01       	movw	r4, r24
    3838:	2c 85       	ldd	r18, Y+12	; 0x0c
    383a:	20 68       	ori	r18, 0x80	; 128
    383c:	22 2e       	mov	r2, r18
    383e:	83 01       	movw	r16, r6
    3840:	23 fc       	sbrc	r2, 3
    3842:	19 c0       	rjmp	.+50     	; 0x3876 <vfprintf+0x19e>
    3844:	83 2d       	mov	r24, r3
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	48 16       	cp	r4, r24
    384a:	59 06       	cpc	r5, r25
    384c:	a0 f4       	brcc	.+40     	; 0x3876 <vfprintf+0x19e>
    384e:	b7 01       	movw	r22, r14
    3850:	80 e2       	ldi	r24, 0x20	; 32
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	1a d1       	rcall	.+564    	; 0x3a8a <fputc>
    3856:	3a 94       	dec	r3
    3858:	f5 cf       	rjmp	.-22     	; 0x3844 <vfprintf+0x16c>
    385a:	f5 01       	movw	r30, r10
    385c:	27 fc       	sbrc	r2, 7
    385e:	85 91       	lpm	r24, Z+
    3860:	27 fe       	sbrs	r2, 7
    3862:	81 91       	ld	r24, Z+
    3864:	5f 01       	movw	r10, r30
    3866:	b7 01       	movw	r22, r14
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	0f d1       	rcall	.+542    	; 0x3a8a <fputc>
    386c:	31 10       	cpse	r3, r1
    386e:	3a 94       	dec	r3
    3870:	f1 e0       	ldi	r31, 0x01	; 1
    3872:	4f 1a       	sub	r4, r31
    3874:	51 08       	sbc	r5, r1
    3876:	41 14       	cp	r4, r1
    3878:	51 04       	cpc	r5, r1
    387a:	79 f7       	brne	.-34     	; 0x385a <vfprintf+0x182>
    387c:	de c0       	rjmp	.+444    	; 0x3a3a <vfprintf+0x362>
    387e:	84 36       	cpi	r24, 0x64	; 100
    3880:	11 f0       	breq	.+4      	; 0x3886 <vfprintf+0x1ae>
    3882:	89 36       	cpi	r24, 0x69	; 105
    3884:	31 f5       	brne	.+76     	; 0x38d2 <vfprintf+0x1fa>
    3886:	f8 01       	movw	r30, r16
    3888:	27 ff       	sbrs	r18, 7
    388a:	07 c0       	rjmp	.+14     	; 0x389a <vfprintf+0x1c2>
    388c:	60 81       	ld	r22, Z
    388e:	71 81       	ldd	r23, Z+1	; 0x01
    3890:	82 81       	ldd	r24, Z+2	; 0x02
    3892:	93 81       	ldd	r25, Z+3	; 0x03
    3894:	0c 5f       	subi	r16, 0xFC	; 252
    3896:	1f 4f       	sbci	r17, 0xFF	; 255
    3898:	08 c0       	rjmp	.+16     	; 0x38aa <vfprintf+0x1d2>
    389a:	60 81       	ld	r22, Z
    389c:	71 81       	ldd	r23, Z+1	; 0x01
    389e:	07 2e       	mov	r0, r23
    38a0:	00 0c       	add	r0, r0
    38a2:	88 0b       	sbc	r24, r24
    38a4:	99 0b       	sbc	r25, r25
    38a6:	0e 5f       	subi	r16, 0xFE	; 254
    38a8:	1f 4f       	sbci	r17, 0xFF	; 255
    38aa:	2f 76       	andi	r18, 0x6F	; 111
    38ac:	72 2e       	mov	r7, r18
    38ae:	97 ff       	sbrs	r25, 7
    38b0:	09 c0       	rjmp	.+18     	; 0x38c4 <vfprintf+0x1ec>
    38b2:	90 95       	com	r25
    38b4:	80 95       	com	r24
    38b6:	70 95       	com	r23
    38b8:	61 95       	neg	r22
    38ba:	7f 4f       	sbci	r23, 0xFF	; 255
    38bc:	8f 4f       	sbci	r24, 0xFF	; 255
    38be:	9f 4f       	sbci	r25, 0xFF	; 255
    38c0:	20 68       	ori	r18, 0x80	; 128
    38c2:	72 2e       	mov	r7, r18
    38c4:	2a e0       	ldi	r18, 0x0A	; 10
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	a4 01       	movw	r20, r8
    38ca:	17 d1       	rcall	.+558    	; 0x3afa <__ultoa_invert>
    38cc:	a8 2e       	mov	r10, r24
    38ce:	a8 18       	sub	r10, r8
    38d0:	43 c0       	rjmp	.+134    	; 0x3958 <vfprintf+0x280>
    38d2:	85 37       	cpi	r24, 0x75	; 117
    38d4:	29 f4       	brne	.+10     	; 0x38e0 <vfprintf+0x208>
    38d6:	2f 7e       	andi	r18, 0xEF	; 239
    38d8:	b2 2e       	mov	r11, r18
    38da:	2a e0       	ldi	r18, 0x0A	; 10
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	25 c0       	rjmp	.+74     	; 0x392a <vfprintf+0x252>
    38e0:	f2 2f       	mov	r31, r18
    38e2:	f9 7f       	andi	r31, 0xF9	; 249
    38e4:	bf 2e       	mov	r11, r31
    38e6:	8f 36       	cpi	r24, 0x6F	; 111
    38e8:	c1 f0       	breq	.+48     	; 0x391a <vfprintf+0x242>
    38ea:	18 f4       	brcc	.+6      	; 0x38f2 <vfprintf+0x21a>
    38ec:	88 35       	cpi	r24, 0x58	; 88
    38ee:	79 f0       	breq	.+30     	; 0x390e <vfprintf+0x236>
    38f0:	ad c0       	rjmp	.+346    	; 0x3a4c <vfprintf+0x374>
    38f2:	80 37       	cpi	r24, 0x70	; 112
    38f4:	19 f0       	breq	.+6      	; 0x38fc <vfprintf+0x224>
    38f6:	88 37       	cpi	r24, 0x78	; 120
    38f8:	21 f0       	breq	.+8      	; 0x3902 <vfprintf+0x22a>
    38fa:	a8 c0       	rjmp	.+336    	; 0x3a4c <vfprintf+0x374>
    38fc:	2f 2f       	mov	r18, r31
    38fe:	20 61       	ori	r18, 0x10	; 16
    3900:	b2 2e       	mov	r11, r18
    3902:	b4 fe       	sbrs	r11, 4
    3904:	0d c0       	rjmp	.+26     	; 0x3920 <vfprintf+0x248>
    3906:	8b 2d       	mov	r24, r11
    3908:	84 60       	ori	r24, 0x04	; 4
    390a:	b8 2e       	mov	r11, r24
    390c:	09 c0       	rjmp	.+18     	; 0x3920 <vfprintf+0x248>
    390e:	24 ff       	sbrs	r18, 4
    3910:	0a c0       	rjmp	.+20     	; 0x3926 <vfprintf+0x24e>
    3912:	9f 2f       	mov	r25, r31
    3914:	96 60       	ori	r25, 0x06	; 6
    3916:	b9 2e       	mov	r11, r25
    3918:	06 c0       	rjmp	.+12     	; 0x3926 <vfprintf+0x24e>
    391a:	28 e0       	ldi	r18, 0x08	; 8
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	05 c0       	rjmp	.+10     	; 0x392a <vfprintf+0x252>
    3920:	20 e1       	ldi	r18, 0x10	; 16
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	02 c0       	rjmp	.+4      	; 0x392a <vfprintf+0x252>
    3926:	20 e1       	ldi	r18, 0x10	; 16
    3928:	32 e0       	ldi	r19, 0x02	; 2
    392a:	f8 01       	movw	r30, r16
    392c:	b7 fe       	sbrs	r11, 7
    392e:	07 c0       	rjmp	.+14     	; 0x393e <vfprintf+0x266>
    3930:	60 81       	ld	r22, Z
    3932:	71 81       	ldd	r23, Z+1	; 0x01
    3934:	82 81       	ldd	r24, Z+2	; 0x02
    3936:	93 81       	ldd	r25, Z+3	; 0x03
    3938:	0c 5f       	subi	r16, 0xFC	; 252
    393a:	1f 4f       	sbci	r17, 0xFF	; 255
    393c:	06 c0       	rjmp	.+12     	; 0x394a <vfprintf+0x272>
    393e:	60 81       	ld	r22, Z
    3940:	71 81       	ldd	r23, Z+1	; 0x01
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	0e 5f       	subi	r16, 0xFE	; 254
    3948:	1f 4f       	sbci	r17, 0xFF	; 255
    394a:	a4 01       	movw	r20, r8
    394c:	d6 d0       	rcall	.+428    	; 0x3afa <__ultoa_invert>
    394e:	a8 2e       	mov	r10, r24
    3950:	a8 18       	sub	r10, r8
    3952:	fb 2d       	mov	r31, r11
    3954:	ff 77       	andi	r31, 0x7F	; 127
    3956:	7f 2e       	mov	r7, r31
    3958:	76 fe       	sbrs	r7, 6
    395a:	0b c0       	rjmp	.+22     	; 0x3972 <vfprintf+0x29a>
    395c:	37 2d       	mov	r19, r7
    395e:	3e 7f       	andi	r19, 0xFE	; 254
    3960:	a5 14       	cp	r10, r5
    3962:	50 f4       	brcc	.+20     	; 0x3978 <vfprintf+0x2a0>
    3964:	74 fe       	sbrs	r7, 4
    3966:	0a c0       	rjmp	.+20     	; 0x397c <vfprintf+0x2a4>
    3968:	72 fc       	sbrc	r7, 2
    396a:	08 c0       	rjmp	.+16     	; 0x397c <vfprintf+0x2a4>
    396c:	37 2d       	mov	r19, r7
    396e:	3e 7e       	andi	r19, 0xEE	; 238
    3970:	05 c0       	rjmp	.+10     	; 0x397c <vfprintf+0x2a4>
    3972:	ba 2c       	mov	r11, r10
    3974:	37 2d       	mov	r19, r7
    3976:	03 c0       	rjmp	.+6      	; 0x397e <vfprintf+0x2a6>
    3978:	ba 2c       	mov	r11, r10
    397a:	01 c0       	rjmp	.+2      	; 0x397e <vfprintf+0x2a6>
    397c:	b5 2c       	mov	r11, r5
    397e:	34 ff       	sbrs	r19, 4
    3980:	0d c0       	rjmp	.+26     	; 0x399c <vfprintf+0x2c4>
    3982:	fe 01       	movw	r30, r28
    3984:	ea 0d       	add	r30, r10
    3986:	f1 1d       	adc	r31, r1
    3988:	80 81       	ld	r24, Z
    398a:	80 33       	cpi	r24, 0x30	; 48
    398c:	11 f4       	brne	.+4      	; 0x3992 <vfprintf+0x2ba>
    398e:	39 7e       	andi	r19, 0xE9	; 233
    3990:	09 c0       	rjmp	.+18     	; 0x39a4 <vfprintf+0x2cc>
    3992:	32 ff       	sbrs	r19, 2
    3994:	06 c0       	rjmp	.+12     	; 0x39a2 <vfprintf+0x2ca>
    3996:	b3 94       	inc	r11
    3998:	b3 94       	inc	r11
    399a:	04 c0       	rjmp	.+8      	; 0x39a4 <vfprintf+0x2cc>
    399c:	83 2f       	mov	r24, r19
    399e:	86 78       	andi	r24, 0x86	; 134
    39a0:	09 f0       	breq	.+2      	; 0x39a4 <vfprintf+0x2cc>
    39a2:	b3 94       	inc	r11
    39a4:	33 fd       	sbrc	r19, 3
    39a6:	12 c0       	rjmp	.+36     	; 0x39cc <vfprintf+0x2f4>
    39a8:	30 ff       	sbrs	r19, 0
    39aa:	06 c0       	rjmp	.+12     	; 0x39b8 <vfprintf+0x2e0>
    39ac:	5a 2c       	mov	r5, r10
    39ae:	b3 14       	cp	r11, r3
    39b0:	18 f4       	brcc	.+6      	; 0x39b8 <vfprintf+0x2e0>
    39b2:	53 0c       	add	r5, r3
    39b4:	5b 18       	sub	r5, r11
    39b6:	b3 2c       	mov	r11, r3
    39b8:	b3 14       	cp	r11, r3
    39ba:	60 f4       	brcc	.+24     	; 0x39d4 <vfprintf+0x2fc>
    39bc:	b7 01       	movw	r22, r14
    39be:	80 e2       	ldi	r24, 0x20	; 32
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	3c 87       	std	Y+12, r19	; 0x0c
    39c4:	62 d0       	rcall	.+196    	; 0x3a8a <fputc>
    39c6:	b3 94       	inc	r11
    39c8:	3c 85       	ldd	r19, Y+12	; 0x0c
    39ca:	f6 cf       	rjmp	.-20     	; 0x39b8 <vfprintf+0x2e0>
    39cc:	b3 14       	cp	r11, r3
    39ce:	10 f4       	brcc	.+4      	; 0x39d4 <vfprintf+0x2fc>
    39d0:	3b 18       	sub	r3, r11
    39d2:	01 c0       	rjmp	.+2      	; 0x39d6 <vfprintf+0x2fe>
    39d4:	31 2c       	mov	r3, r1
    39d6:	34 ff       	sbrs	r19, 4
    39d8:	11 c0       	rjmp	.+34     	; 0x39fc <vfprintf+0x324>
    39da:	b7 01       	movw	r22, r14
    39dc:	80 e3       	ldi	r24, 0x30	; 48
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	3c 87       	std	Y+12, r19	; 0x0c
    39e2:	53 d0       	rcall	.+166    	; 0x3a8a <fputc>
    39e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    39e6:	32 ff       	sbrs	r19, 2
    39e8:	16 c0       	rjmp	.+44     	; 0x3a16 <vfprintf+0x33e>
    39ea:	31 fd       	sbrc	r19, 1
    39ec:	03 c0       	rjmp	.+6      	; 0x39f4 <vfprintf+0x31c>
    39ee:	88 e7       	ldi	r24, 0x78	; 120
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	02 c0       	rjmp	.+4      	; 0x39f8 <vfprintf+0x320>
    39f4:	88 e5       	ldi	r24, 0x58	; 88
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	b7 01       	movw	r22, r14
    39fa:	0c c0       	rjmp	.+24     	; 0x3a14 <vfprintf+0x33c>
    39fc:	83 2f       	mov	r24, r19
    39fe:	86 78       	andi	r24, 0x86	; 134
    3a00:	51 f0       	breq	.+20     	; 0x3a16 <vfprintf+0x33e>
    3a02:	31 ff       	sbrs	r19, 1
    3a04:	02 c0       	rjmp	.+4      	; 0x3a0a <vfprintf+0x332>
    3a06:	8b e2       	ldi	r24, 0x2B	; 43
    3a08:	01 c0       	rjmp	.+2      	; 0x3a0c <vfprintf+0x334>
    3a0a:	80 e2       	ldi	r24, 0x20	; 32
    3a0c:	37 fd       	sbrc	r19, 7
    3a0e:	8d e2       	ldi	r24, 0x2D	; 45
    3a10:	b7 01       	movw	r22, r14
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	3a d0       	rcall	.+116    	; 0x3a8a <fputc>
    3a16:	a5 14       	cp	r10, r5
    3a18:	30 f4       	brcc	.+12     	; 0x3a26 <vfprintf+0x34e>
    3a1a:	b7 01       	movw	r22, r14
    3a1c:	80 e3       	ldi	r24, 0x30	; 48
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	34 d0       	rcall	.+104    	; 0x3a8a <fputc>
    3a22:	5a 94       	dec	r5
    3a24:	f8 cf       	rjmp	.-16     	; 0x3a16 <vfprintf+0x33e>
    3a26:	aa 94       	dec	r10
    3a28:	f4 01       	movw	r30, r8
    3a2a:	ea 0d       	add	r30, r10
    3a2c:	f1 1d       	adc	r31, r1
    3a2e:	80 81       	ld	r24, Z
    3a30:	b7 01       	movw	r22, r14
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	2a d0       	rcall	.+84     	; 0x3a8a <fputc>
    3a36:	a1 10       	cpse	r10, r1
    3a38:	f6 cf       	rjmp	.-20     	; 0x3a26 <vfprintf+0x34e>
    3a3a:	33 20       	and	r3, r3
    3a3c:	09 f4       	brne	.+2      	; 0x3a40 <vfprintf+0x368>
    3a3e:	5d ce       	rjmp	.-838    	; 0x36fa <vfprintf+0x22>
    3a40:	b7 01       	movw	r22, r14
    3a42:	80 e2       	ldi	r24, 0x20	; 32
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	21 d0       	rcall	.+66     	; 0x3a8a <fputc>
    3a48:	3a 94       	dec	r3
    3a4a:	f7 cf       	rjmp	.-18     	; 0x3a3a <vfprintf+0x362>
    3a4c:	f7 01       	movw	r30, r14
    3a4e:	86 81       	ldd	r24, Z+6	; 0x06
    3a50:	97 81       	ldd	r25, Z+7	; 0x07
    3a52:	02 c0       	rjmp	.+4      	; 0x3a58 <vfprintf+0x380>
    3a54:	8f ef       	ldi	r24, 0xFF	; 255
    3a56:	9f ef       	ldi	r25, 0xFF	; 255
    3a58:	2c 96       	adiw	r28, 0x0c	; 12
    3a5a:	e2 e1       	ldi	r30, 0x12	; 18
    3a5c:	c8 c0       	rjmp	.+400    	; 0x3bee <__epilogue_restores__>

00003a5e <strnlen_P>:
    3a5e:	fc 01       	movw	r30, r24
    3a60:	05 90       	lpm	r0, Z+
    3a62:	61 50       	subi	r22, 0x01	; 1
    3a64:	70 40       	sbci	r23, 0x00	; 0
    3a66:	01 10       	cpse	r0, r1
    3a68:	d8 f7       	brcc	.-10     	; 0x3a60 <strnlen_P+0x2>
    3a6a:	80 95       	com	r24
    3a6c:	90 95       	com	r25
    3a6e:	8e 0f       	add	r24, r30
    3a70:	9f 1f       	adc	r25, r31
    3a72:	08 95       	ret

00003a74 <strnlen>:
    3a74:	fc 01       	movw	r30, r24
    3a76:	61 50       	subi	r22, 0x01	; 1
    3a78:	70 40       	sbci	r23, 0x00	; 0
    3a7a:	01 90       	ld	r0, Z+
    3a7c:	01 10       	cpse	r0, r1
    3a7e:	d8 f7       	brcc	.-10     	; 0x3a76 <strnlen+0x2>
    3a80:	80 95       	com	r24
    3a82:	90 95       	com	r25
    3a84:	8e 0f       	add	r24, r30
    3a86:	9f 1f       	adc	r25, r31
    3a88:	08 95       	ret

00003a8a <fputc>:
    3a8a:	0f 93       	push	r16
    3a8c:	1f 93       	push	r17
    3a8e:	cf 93       	push	r28
    3a90:	df 93       	push	r29
    3a92:	fb 01       	movw	r30, r22
    3a94:	23 81       	ldd	r18, Z+3	; 0x03
    3a96:	21 fd       	sbrc	r18, 1
    3a98:	03 c0       	rjmp	.+6      	; 0x3aa0 <fputc+0x16>
    3a9a:	8f ef       	ldi	r24, 0xFF	; 255
    3a9c:	9f ef       	ldi	r25, 0xFF	; 255
    3a9e:	28 c0       	rjmp	.+80     	; 0x3af0 <fputc+0x66>
    3aa0:	22 ff       	sbrs	r18, 2
    3aa2:	16 c0       	rjmp	.+44     	; 0x3ad0 <fputc+0x46>
    3aa4:	46 81       	ldd	r20, Z+6	; 0x06
    3aa6:	57 81       	ldd	r21, Z+7	; 0x07
    3aa8:	24 81       	ldd	r18, Z+4	; 0x04
    3aaa:	35 81       	ldd	r19, Z+5	; 0x05
    3aac:	42 17       	cp	r20, r18
    3aae:	53 07       	cpc	r21, r19
    3ab0:	44 f4       	brge	.+16     	; 0x3ac2 <fputc+0x38>
    3ab2:	a0 81       	ld	r26, Z
    3ab4:	b1 81       	ldd	r27, Z+1	; 0x01
    3ab6:	9d 01       	movw	r18, r26
    3ab8:	2f 5f       	subi	r18, 0xFF	; 255
    3aba:	3f 4f       	sbci	r19, 0xFF	; 255
    3abc:	31 83       	std	Z+1, r19	; 0x01
    3abe:	20 83       	st	Z, r18
    3ac0:	8c 93       	st	X, r24
    3ac2:	26 81       	ldd	r18, Z+6	; 0x06
    3ac4:	37 81       	ldd	r19, Z+7	; 0x07
    3ac6:	2f 5f       	subi	r18, 0xFF	; 255
    3ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aca:	37 83       	std	Z+7, r19	; 0x07
    3acc:	26 83       	std	Z+6, r18	; 0x06
    3ace:	10 c0       	rjmp	.+32     	; 0x3af0 <fputc+0x66>
    3ad0:	eb 01       	movw	r28, r22
    3ad2:	09 2f       	mov	r16, r25
    3ad4:	18 2f       	mov	r17, r24
    3ad6:	00 84       	ldd	r0, Z+8	; 0x08
    3ad8:	f1 85       	ldd	r31, Z+9	; 0x09
    3ada:	e0 2d       	mov	r30, r0
    3adc:	09 95       	icall
    3ade:	89 2b       	or	r24, r25
    3ae0:	e1 f6       	brne	.-72     	; 0x3a9a <fputc+0x10>
    3ae2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ae4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ae6:	01 96       	adiw	r24, 0x01	; 1
    3ae8:	9f 83       	std	Y+7, r25	; 0x07
    3aea:	8e 83       	std	Y+6, r24	; 0x06
    3aec:	81 2f       	mov	r24, r17
    3aee:	90 2f       	mov	r25, r16
    3af0:	df 91       	pop	r29
    3af2:	cf 91       	pop	r28
    3af4:	1f 91       	pop	r17
    3af6:	0f 91       	pop	r16
    3af8:	08 95       	ret

00003afa <__ultoa_invert>:
    3afa:	fa 01       	movw	r30, r20
    3afc:	aa 27       	eor	r26, r26
    3afe:	28 30       	cpi	r18, 0x08	; 8
    3b00:	51 f1       	breq	.+84     	; 0x3b56 <__ultoa_invert+0x5c>
    3b02:	20 31       	cpi	r18, 0x10	; 16
    3b04:	81 f1       	breq	.+96     	; 0x3b66 <__ultoa_invert+0x6c>
    3b06:	e8 94       	clt
    3b08:	6f 93       	push	r22
    3b0a:	6e 7f       	andi	r22, 0xFE	; 254
    3b0c:	6e 5f       	subi	r22, 0xFE	; 254
    3b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b10:	8f 4f       	sbci	r24, 0xFF	; 255
    3b12:	9f 4f       	sbci	r25, 0xFF	; 255
    3b14:	af 4f       	sbci	r26, 0xFF	; 255
    3b16:	b1 e0       	ldi	r27, 0x01	; 1
    3b18:	3e d0       	rcall	.+124    	; 0x3b96 <__ultoa_invert+0x9c>
    3b1a:	b4 e0       	ldi	r27, 0x04	; 4
    3b1c:	3c d0       	rcall	.+120    	; 0x3b96 <__ultoa_invert+0x9c>
    3b1e:	67 0f       	add	r22, r23
    3b20:	78 1f       	adc	r23, r24
    3b22:	89 1f       	adc	r24, r25
    3b24:	9a 1f       	adc	r25, r26
    3b26:	a1 1d       	adc	r26, r1
    3b28:	68 0f       	add	r22, r24
    3b2a:	79 1f       	adc	r23, r25
    3b2c:	8a 1f       	adc	r24, r26
    3b2e:	91 1d       	adc	r25, r1
    3b30:	a1 1d       	adc	r26, r1
    3b32:	6a 0f       	add	r22, r26
    3b34:	71 1d       	adc	r23, r1
    3b36:	81 1d       	adc	r24, r1
    3b38:	91 1d       	adc	r25, r1
    3b3a:	a1 1d       	adc	r26, r1
    3b3c:	20 d0       	rcall	.+64     	; 0x3b7e <__ultoa_invert+0x84>
    3b3e:	09 f4       	brne	.+2      	; 0x3b42 <__ultoa_invert+0x48>
    3b40:	68 94       	set
    3b42:	3f 91       	pop	r19
    3b44:	2a e0       	ldi	r18, 0x0A	; 10
    3b46:	26 9f       	mul	r18, r22
    3b48:	11 24       	eor	r1, r1
    3b4a:	30 19       	sub	r19, r0
    3b4c:	30 5d       	subi	r19, 0xD0	; 208
    3b4e:	31 93       	st	Z+, r19
    3b50:	de f6       	brtc	.-74     	; 0x3b08 <__ultoa_invert+0xe>
    3b52:	cf 01       	movw	r24, r30
    3b54:	08 95       	ret
    3b56:	46 2f       	mov	r20, r22
    3b58:	47 70       	andi	r20, 0x07	; 7
    3b5a:	40 5d       	subi	r20, 0xD0	; 208
    3b5c:	41 93       	st	Z+, r20
    3b5e:	b3 e0       	ldi	r27, 0x03	; 3
    3b60:	0f d0       	rcall	.+30     	; 0x3b80 <__ultoa_invert+0x86>
    3b62:	c9 f7       	brne	.-14     	; 0x3b56 <__ultoa_invert+0x5c>
    3b64:	f6 cf       	rjmp	.-20     	; 0x3b52 <__ultoa_invert+0x58>
    3b66:	46 2f       	mov	r20, r22
    3b68:	4f 70       	andi	r20, 0x0F	; 15
    3b6a:	40 5d       	subi	r20, 0xD0	; 208
    3b6c:	4a 33       	cpi	r20, 0x3A	; 58
    3b6e:	18 f0       	brcs	.+6      	; 0x3b76 <__ultoa_invert+0x7c>
    3b70:	49 5d       	subi	r20, 0xD9	; 217
    3b72:	31 fd       	sbrc	r19, 1
    3b74:	40 52       	subi	r20, 0x20	; 32
    3b76:	41 93       	st	Z+, r20
    3b78:	02 d0       	rcall	.+4      	; 0x3b7e <__ultoa_invert+0x84>
    3b7a:	a9 f7       	brne	.-22     	; 0x3b66 <__ultoa_invert+0x6c>
    3b7c:	ea cf       	rjmp	.-44     	; 0x3b52 <__ultoa_invert+0x58>
    3b7e:	b4 e0       	ldi	r27, 0x04	; 4
    3b80:	a6 95       	lsr	r26
    3b82:	97 95       	ror	r25
    3b84:	87 95       	ror	r24
    3b86:	77 95       	ror	r23
    3b88:	67 95       	ror	r22
    3b8a:	ba 95       	dec	r27
    3b8c:	c9 f7       	brne	.-14     	; 0x3b80 <__ultoa_invert+0x86>
    3b8e:	00 97       	sbiw	r24, 0x00	; 0
    3b90:	61 05       	cpc	r22, r1
    3b92:	71 05       	cpc	r23, r1
    3b94:	08 95       	ret
    3b96:	9b 01       	movw	r18, r22
    3b98:	ac 01       	movw	r20, r24
    3b9a:	0a 2e       	mov	r0, r26
    3b9c:	06 94       	lsr	r0
    3b9e:	57 95       	ror	r21
    3ba0:	47 95       	ror	r20
    3ba2:	37 95       	ror	r19
    3ba4:	27 95       	ror	r18
    3ba6:	ba 95       	dec	r27
    3ba8:	c9 f7       	brne	.-14     	; 0x3b9c <__ultoa_invert+0xa2>
    3baa:	62 0f       	add	r22, r18
    3bac:	73 1f       	adc	r23, r19
    3bae:	84 1f       	adc	r24, r20
    3bb0:	95 1f       	adc	r25, r21
    3bb2:	a0 1d       	adc	r26, r0
    3bb4:	08 95       	ret

00003bb6 <__prologue_saves__>:
    3bb6:	2f 92       	push	r2
    3bb8:	3f 92       	push	r3
    3bba:	4f 92       	push	r4
    3bbc:	5f 92       	push	r5
    3bbe:	6f 92       	push	r6
    3bc0:	7f 92       	push	r7
    3bc2:	8f 92       	push	r8
    3bc4:	9f 92       	push	r9
    3bc6:	af 92       	push	r10
    3bc8:	bf 92       	push	r11
    3bca:	cf 92       	push	r12
    3bcc:	df 92       	push	r13
    3bce:	ef 92       	push	r14
    3bd0:	ff 92       	push	r15
    3bd2:	0f 93       	push	r16
    3bd4:	1f 93       	push	r17
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	cd b7       	in	r28, 0x3d	; 61
    3bdc:	de b7       	in	r29, 0x3e	; 62
    3bde:	ca 1b       	sub	r28, r26
    3be0:	db 0b       	sbc	r29, r27
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	f8 94       	cli
    3be6:	de bf       	out	0x3e, r29	; 62
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	cd bf       	out	0x3d, r28	; 61
    3bec:	09 94       	ijmp

00003bee <__epilogue_restores__>:
    3bee:	2a 88       	ldd	r2, Y+18	; 0x12
    3bf0:	39 88       	ldd	r3, Y+17	; 0x11
    3bf2:	48 88       	ldd	r4, Y+16	; 0x10
    3bf4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bf6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bf8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bfa:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bfc:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bfe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c00:	b9 84       	ldd	r11, Y+9	; 0x09
    3c02:	c8 84       	ldd	r12, Y+8	; 0x08
    3c04:	df 80       	ldd	r13, Y+7	; 0x07
    3c06:	ee 80       	ldd	r14, Y+6	; 0x06
    3c08:	fd 80       	ldd	r15, Y+5	; 0x05
    3c0a:	0c 81       	ldd	r16, Y+4	; 0x04
    3c0c:	1b 81       	ldd	r17, Y+3	; 0x03
    3c0e:	aa 81       	ldd	r26, Y+2	; 0x02
    3c10:	b9 81       	ldd	r27, Y+1	; 0x01
    3c12:	ce 0f       	add	r28, r30
    3c14:	d1 1d       	adc	r29, r1
    3c16:	0f b6       	in	r0, 0x3f	; 63
    3c18:	f8 94       	cli
    3c1a:	de bf       	out	0x3e, r29	; 62
    3c1c:	0f be       	out	0x3f, r0	; 63
    3c1e:	cd bf       	out	0x3d, r28	; 61
    3c20:	ed 01       	movw	r28, r26
    3c22:	08 95       	ret

00003c24 <_exit>:
    3c24:	f8 94       	cli

00003c26 <__stop_program>:
    3c26:	ff cf       	rjmp	.-2      	; 0x3c26 <__stop_program>
